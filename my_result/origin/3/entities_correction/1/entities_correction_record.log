
index is 0
SELECT count(*) FROM singer
How many singers do we have?
SQL correction:
SELECT COUNT(DISTINCT Singer_ID) FROM singer
original correction:
SELECT COUNT(DISTINCT Singer_ID) FROM singer

index is 1
SELECT count(*) FROM singer
What is the total number of singers?
SQL correction:
SELECT COUNT(*) AS Total_Singers FROM singer
original correction:
SELECT COUNT(*) AS Total_Singers FROM singer

index is 2
SELECT name ,  country ,  age FROM singer ORDER BY age DESC
Show name, country, age for all singers ordered by age from the oldest to the youngest.
SQL correction:
SELECT Name, Country, Age FROM singer ORDER BY Age ASC
original correction:
SELECT Name, Country, Age FROM singer ORDER BY Age ASC

index is 3
SELECT name ,  country ,  age FROM singer ORDER BY age DESC
What are the names, countries, and ages for every singer in descending order of age?
SQL correction:
SELECT Name, Country, Age FROM singer ORDER BY Age DESC
original correction:
SELECT Name, Country, Age FROM singer ORDER BY Age DESC

index is 4
SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
What is the average, minimum, and maximum age of all singers from France?
SQL correction:
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France'
entities correction:
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE LOWER(Country) = 'france'

index is 5
SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
What is the average, minimum, and maximum age for all French singers?
SQL correction:
SELECT AVG(Age) as Average_Age, MIN(Age) as Minimum_Age, MAX(Age) as Maximum_Age FROM singer WHERE Country = 'French'
entities correction:
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age  FROM singer  WHERE Country = 'France'

index is 6
SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1
Show the name and the release year of the song by the youngest singer.
SQL correction:
SELECT singer.Name, singer.Song_Name, singer.Song_release_year  FROM singer  WHERE singer.Age = (SELECT MIN(singer.Age) FROM singer)
original correction:
SELECT singer.Name, singer.Song_Name, singer.Song_release_year  FROM singer  WHERE singer.Age = (SELECT MIN(singer.Age) FROM singer)

index is 7
SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1
What are the names and release years for all the songs of the youngest singer?
SQL correction:
SELECT singer.Song_Name, singer.Song_release_year FROM singer WHERE singer.Age = (SELECT MIN(singer.Age) FROM singer)
original correction:
SELECT singer.Song_Name, singer.Song_release_year FROM singer WHERE singer.Age = (SELECT MIN(singer.Age) FROM singer)

index is 8
SELECT DISTINCT country FROM singer WHERE age  >  20
What are all distinct countries where singers above age 20 are from?
SQL correction:
SELECT DISTINCT Country FROM singer WHERE Age > 20
original correction:
SELECT DISTINCT Country FROM singer WHERE Age > 20

index is 9
SELECT DISTINCT country FROM singer WHERE age  >  20
What are  the different countries with singers above age 20?
SQL correction:
SELECT DISTINCT Country FROM singer WHERE Age > 20
original correction:
SELECT DISTINCT Country FROM singer WHERE Age > 20

index is 10
SELECT country ,  count(*) FROM singer GROUP BY country
Show all countries and the number of singers in each country.
SQL correction:
SELECT Country, COUNT(Singer_ID) FROM singer GROUP BY Country
original correction:
SELECT Country, COUNT(Singer_ID) FROM singer GROUP BY Country

index is 11
SELECT country ,  count(*) FROM singer GROUP BY country
How many singers are from each country?
SQL correction:
SELECT COUNT(Singer_ID) AS Singer_Count, Country  FROM singer  GROUP BY Country
original correction:
SELECT COUNT(Singer_ID) AS Singer_Count, Country  FROM singer  GROUP BY Country

index is 12
SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
List all song names by singers above the average age.
SQL correction:
SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)
original correction:
SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)

index is 13
SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
What are all the song names by singers who are older than average?
SQL correction:
SELECT singer.Song_Name FROM singer WHERE singer.Age > (     SELECT AVG(singer.Age)     FROM singer )
original correction:
SELECT singer.Song_Name FROM singer WHERE singer.Age > (     SELECT AVG(singer.Age)     FROM singer )

index is 14
SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
Show location and name for all stadiums with a capacity between 5000 and 10000.
SQL correction:
SELECT Location, Name  FROM stadium  WHERE Capacity BETWEEN 5000 AND 10000
original correction:
SELECT Location, Name  FROM stadium  WHERE Capacity BETWEEN 5000 AND 10000

index is 15
SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
What are the locations and names of all stations with capacity between 5000 and 10000?
SQL correction:
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000
original correction:
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000

index is 16
select max(capacity), average from stadium
What is the maximum capacity and the average of all stadiums ?
SQL correction:
SELECT MAX(Capacity) AS Maximum_Capacity, AVG(Capacity) AS Average_Capacity FROM stadium
original correction:
SELECT MAX(Capacity) AS Maximum_Capacity, AVG(Capacity) AS Average_Capacity FROM stadium

index is 17
select avg(capacity) ,  max(capacity) from stadium
What is the average and maximum capacities for all stadiums ?
SQL correction:
SELECT AVG(Capacity) AS Average_Capacity, MAX(Capacity) AS Maximum_Capacity FROM stadium
original correction:
SELECT AVG(Capacity) AS Average_Capacity, MAX(Capacity) AS Maximum_Capacity FROM stadium

index is 18
SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
What is the name and capacity for the stadium with highest average attendance?
SQL correction:
SELECT Name, Capacity  FROM stadium  WHERE Average = (SELECT MAX(Average) FROM stadium)
original correction:
SELECT Name, Capacity  FROM stadium  WHERE Average = (SELECT MAX(Average) FROM stadium)

index is 19
SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
What is the name and capacity for the stadium with the highest average attendance?
SQL correction:
SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)
original correction:
SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)

index is 20
SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015
How many concerts are there in year 2014 or 2015?
SQL correction:
SELECT COUNT(DISTINCT concert_ID) FROM concert WHERE Year = 2014 OR Year = 2015
original correction:
SELECT COUNT(DISTINCT concert_ID) FROM concert WHERE Year = 2014 OR Year = 2015

index is 21
SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015
How many concerts occurred in 2014 or 2015?
SQL correction:
SELECT COUNT(*) FROM concert WHERE Year = 2014 OR Year = 2015
original correction:
SELECT COUNT(*) FROM concert WHERE Year = 2014 OR Year = 2015

index is 22
SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id
Show the stadium name and the number of concerts in each stadium.
SQL correction:
SELECT T1.Name, COUNT(T2.concert_ID) FROM stadium AS T1 LEFT JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Name
original correction:
SELECT T1.Name, COUNT(T2.concert_ID) FROM stadium AS T1 LEFT JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Name

index is 23
SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id
For each stadium, how many concerts play there?
SQL correction:
SELECT T1.Stadium_ID, T1.Location, T1.Name, T1.Capacity, T1.Highest, T1.Lowest, T1.Average, COUNT(T2.concert_ID) FROM stadium AS T1 LEFT JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Stadium_ID
original correction:
SELECT T1.Stadium_ID, T1.Location, T1.Name, T1.Capacity, T1.Highest, T1.Lowest, T1.Average, COUNT(T2.concert_ID) FROM stadium AS T1 LEFT JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Stadium_ID

index is 24
SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1
Show the stadium name and capacity with most number of concerts in year 2014 or after.
SQL correction:
SELECT Name, Capacity  FROM stadium  WHERE Stadium_ID = (     SELECT Stadium_ID      FROM concert      WHERE Year >= 2014      GROUP BY Stadium_ID      HAVING COUNT(*) = (         SELECT MAX(concert_count)          FROM (             SELECT COUNT(*) as concert_count              FROM concert              WHERE Year >= 2014              GROUP BY Stadium_ID         ) AS temp     ) )
original correction:
SELECT Name, Capacity  FROM stadium  WHERE Stadium_ID = (     SELECT Stadium_ID      FROM concert      WHERE Year >= 2014      GROUP BY Stadium_ID      HAVING COUNT(*) = (         SELECT MAX(concert_count)          FROM (             SELECT COUNT(*) as concert_count              FROM concert              WHERE Year >= 2014              GROUP BY Stadium_ID         ) AS temp     ) )

index is 25
select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1
What is the name and capacity of the stadium with the most concerts after 2013 ?
SQL correction:
SELECT S.Name, S.Capacity FROM stadium AS S JOIN concert AS C ON C.Stadium_ID = S.Stadium_ID WHERE C.Year > 2013 GROUP BY S.Name, S.Capacity ORDER BY COUNT(*) DESC LIMIT 1
original correction:
SELECT S.Name, S.Capacity FROM stadium AS S JOIN concert AS C ON C.Stadium_ID = S.Stadium_ID WHERE C.Year > 2013 GROUP BY S.Name, S.Capacity ORDER BY COUNT(*) DESC LIMIT 1

index is 26
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
Which year has most number of concerts?
SQL correction:
SELECT Year, COUNT(*) AS Concert_Count FROM concert GROUP BY Year ORDER BY Concert_Count DESC LIMIT 1
original correction:
SELECT Year, COUNT(*) AS Concert_Count FROM concert GROUP BY Year ORDER BY Concert_Count DESC LIMIT 1

index is 27
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
What is the year that had the most concerts?
SQL correction:
SELECT Year, COUNT(*) AS concert_count FROM concert GROUP BY Year ORDER BY concert_count DESC LIMIT 1
original correction:
SELECT Year, COUNT(*) AS concert_count FROM concert GROUP BY Year ORDER BY concert_count DESC LIMIT 1

index is 28
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
Show the stadium names without any concert.
SQL correction:
SELECT Name  FROM stadium  WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)
original correction:
SELECT Name  FROM stadium  WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)

index is 29
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
What are the names of the stadiums without any concerts?
SQL correction:
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)
original correction:
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)

index is 30
SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30
Show countries where a singer above age 40 and a singer below 30 are from.
SQL correction:
SELECT DISTINCT Country  FROM singer  WHERE Age > 40  AND Country IN (     SELECT DISTINCT Country      FROM singer      WHERE Age < 30 )
original correction:
SELECT DISTINCT Country  FROM singer  WHERE Age > 40  AND Country IN (     SELECT DISTINCT Country      FROM singer      WHERE Age < 30 )

index is 31
SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014
Show names for all stadiums except for stadiums having a concert in year 2014.
SQL correction:
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014)
original correction:
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014)

index is 32
SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014
What are the names of all stadiums that did not have a concert in 2014?
SQL correction:
SELECT Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.concert_ID IS NULL OR concert.Year <> 2014
original correction:
SELECT Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.concert_ID IS NULL OR concert.Year <> 2014

index is 33
SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id
Show the name and theme for all concerts and the number of singers in each concert.
SQL correction:
SELECT concert_Name, Theme, COUNT(singer.Singer_ID) AS number_of_singers  FROM concert  JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID  JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID  GROUP BY concert_Name, Theme
original correction:
SELECT concert_Name, Theme, COUNT(singer.Singer_ID) AS number_of_singers  FROM concert  JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID  JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID  GROUP BY concert_Name, Theme

index is 34
select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id
What are the names , themes , and number of singers for every concert ?
SQL correction:
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID)  FROM concert  JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID  GROUP BY concert.concert_Name, concert.Theme
original correction:
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID)  FROM concert  JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID  GROUP BY concert.concert_Name, concert.Theme

index is 35
SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id
List singer names and number of concerts for each singer.
SQL correction:
SELECT singer.Name, COUNT(singer_in_concert.concert_ID)  FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  GROUP BY singer.Name
original correction:
SELECT singer.Name, COUNT(singer_in_concert.concert_ID)  FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  GROUP BY singer.Name

index is 36
SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id
What are the names of the singers and number of concerts for each person?
SQL correction:
SELECT Name, COUNT(concert_ID)  FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  GROUP BY singer.Singer_ID, Name
original correction:
SELECT Name, COUNT(concert_ID)  FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  GROUP BY singer.Singer_ID, Name

index is 37
SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014
List all singer names in concerts in year 2014.
SQL correction:
SELECT singer.Name  FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID  WHERE concert.Year = 2014
original correction:
SELECT singer.Name  FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID  WHERE concert.Year = 2014

index is 38
SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014
What are the names of the singers who performed in a concert in 2014?
SQL correction:
SELECT singer.Name  FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID  WHERE concert.Year = 2014
original correction:
SELECT singer.Name  FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID  WHERE concert.Year = 2014

index is 39
SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
what is the name and nation of the singer who have a song having 'Hey' in its name?
SQL correction:
SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%'
entities correction:
SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%';

index is 40
SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?
SQL correction:
SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'
entities correction:
SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%';

index is 41
SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015
Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.
SQL correction:
SELECT SELECT stadium.Name, stadium.Location FROM stadium INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year IN (2014, 2015) GROUP BY stadium.Name, stadium.Location
original correction:
SELECT SELECT stadium.Name, stadium.Location FROM stadium INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year IN (2014, 2015) GROUP BY stadium.Name, stadium.Location

index is 42
SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015
What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?
SQL correction:
SELECT Name, Location  FROM stadium  WHERE Stadium_ID IN (     SELECT Stadium_ID      FROM concert      WHERE Year = 2014 )  AND Stadium_ID IN (     SELECT Stadium_ID      FROM concert      WHERE Year = 2015 )
original correction:
SELECT Name, Location  FROM stadium  WHERE Stadium_ID IN (     SELECT Stadium_ID      FROM concert      WHERE Year = 2014 )  AND Stadium_ID IN (     SELECT Stadium_ID      FROM concert      WHERE Year = 2015 )

index is 43
select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)
Find the number of concerts happened in the stadium with the highest capacity .
SQL correction:
SELECT COUNT(concert_ID)  FROM concert  JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE stadium.Capacity = (SELECT MAX(Capacity) FROM stadium)
original correction:
SELECT COUNT(concert_ID)  FROM concert  JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE stadium.Capacity = (SELECT MAX(Capacity) FROM stadium)

index is 44
select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)
What are the number of concerts that occurred in the stadium with the largest capacity ?
SQL correction:
SELECT COUNT(concert_ID) FROM concert  JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID  WHERE stadium.Capacity = (SELECT MAX(Capacity) FROM stadium)
original correction:
SELECT COUNT(concert_ID) FROM concert  JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID  WHERE stadium.Capacity = (SELECT MAX(Capacity) FROM stadium)

index is 45
SELECT count(*) FROM pets WHERE weight  >  10
Find the number of pets whose weight is heavier than 10.
SQL correction:
SELECT COUNT(DISTINCT PetID) FROM Pets WHERE weight > 10
original correction:
SELECT COUNT(DISTINCT PetID) FROM Pets WHERE weight > 10

index is 46
SELECT count(*) FROM pets WHERE weight  >  10
How many pets have a greater weight than 10?
SQL correction:
SELECT COUNT(*) FROM Pets WHERE weight > 10
original correction:
SELECT COUNT(*) FROM Pets WHERE weight > 10

index is 47
SELECT weight FROM pets ORDER BY pet_age LIMIT 1
Find the weight of the youngest dog.
SQL correction:
SELECT Pets.weight  FROM Pets  JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID  JOIN Student ON Has_Pet.StuID = Student.StuID  WHERE Pets.PetType = 'dog'  ORDER BY Pets.pet_age ASC  LIMIT 1
entities correction:
SELECT Pets.weight   FROM Pets   JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID   JOIN Student ON Has_Pet.StuID = Student.StuID   WHERE Pets.PetType = 'dog'   ORDER BY Pets.pet_age ASC   LIMIT 1

index is 48
SELECT weight FROM pets ORDER BY pet_age LIMIT 1
How much does the youngest dog weigh?
SQL correction:
SELECT weight FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog')
entities correction:
SELECT weight  FROM Pets  WHERE PetType = 'dog'  AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog')

index is 49
SELECT max(weight) ,  petType FROM pets GROUP BY petType
Find the maximum weight for each type of pet. List the maximum weight and pet type.
SQL correction:
SELECT MAX(weight) AS max_weight, PetType FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID GROUP BY PetType
original correction:
SELECT MAX(weight) AS max_weight, PetType FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID GROUP BY PetType

index is 50
SELECT max(weight) ,  petType FROM pets GROUP BY petType
List the maximum weight and type for each type of pet.
SQL correction:
SELECT Pets.PetType, MAX(Pets.weight)  FROM Pets  JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID  GROUP BY Pets.PetType
original correction:
SELECT Pets.PetType, MAX(Pets.weight)  FROM Pets  JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID  GROUP BY Pets.PetType

index is 51
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
Find number of pets owned by students who are older than 20.
SQL correction:
SELECT COUNT(Has_Pet.PetID) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20
original correction:
SELECT COUNT(Has_Pet.PetID) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20

index is 52
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
How many pets are owned by students that have an age greater than 20?
SQL correction:
SELECT COUNT(DISTINCT Has_Pet.PetID)  FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20
original correction:
SELECT COUNT(DISTINCT Has_Pet.PetID)  FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20

index is 53
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'
Find the number of dog pets that are raised by female students (with sex F).
SQL correction:
SELECT COUNT(DISTINCT Has_Pet.PetID) FROM Has_Pet  JOIN Student ON Has_Pet.StuID = Student.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'dog' AND Student.Sex = 'F'
entities correction:
SELECT COUNT(DISTINCT Has_Pet.PetID)  FROM Has_Pet   JOIN Student ON Has_Pet.StuID = Student.StuID   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE LOWER(Pets.PetType) = 'dog' AND LOWER(Student.Sex) = 'f'

index is 54
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'
How many dog pets are raised by female students?
SQL correction:
SELECT COUNT(DISTINCT Has_Pet.PetID) FROM Has_Pet  JOIN Pets ON Has_Pet.PetID = Pets.PetID  JOIN Student ON Has_Pet.StuID = Student.StuID  WHERE Pets.PetType = 'dog' AND Student.Sex = 'female'
entities correction:
SELECT COUNT(DISTINCT Pets.PetID) FROM Has_Pet   JOIN Pets ON Has_Pet.PetID = Pets.PetID   JOIN Student ON Has_Pet.StuID = Student.StuID   WHERE Pets.PetType = 'dog' AND Student.Sex = 'F'

index is 55
SELECT count(DISTINCT pettype) FROM pets
Find the number of distinct type of pets.
SQL correction:
SELECT COUNT(DISTINCT PetType) FROM Pets
original correction:
SELECT COUNT(DISTINCT PetType) FROM Pets

index is 56
SELECT count(DISTINCT pettype) FROM pets
How many different types of pet are there?
SQL correction:
SELECT COUNT(DISTINCT PetType) FROM Pets
original correction:
SELECT COUNT(DISTINCT PetType) FROM Pets

index is 57
SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'
Find the first name of students who have cat or dog pet.
SQL correction:
SELECT DISTINCT Student.Fname  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType IN ('cat', 'dog')
entities correction:
SELECT DISTINCT Student.Fname   FROM Student   JOIN Has_Pet ON Student.StuID = Has_Pet.StuID   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType IN ('cat', 'dog')

index is 58
SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'
What are the first names of every student who has a cat or dog as a pet?
SQL correction:
SELECT DISTINCT Student.Fname  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'cat' OR Pets.PetType = 'dog'
entities correction:
SELECT DISTINCT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog')

index is 59
select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'
Find the first name of students who have both cat and dog pets .
SQL correction:
SELECT Fname  FROM Student  WHERE StuID IN (   SELECT StuID    FROM Has_Pet    WHERE PetID IN (     SELECT PetID      FROM Pets      WHERE PetType = 'cat'   ) )  AND StuID IN (   SELECT StuID    FROM Has_Pet    WHERE PetID IN (     SELECT PetID      FROM Pets      WHERE PetType = 'dog'   ) )
entities correction:
SELECT Fname FROM Student WHERE StuID IN (   SELECT StuID   FROM Has_Pet   WHERE PetID IN (     SELECT PetID     FROM Pets     WHERE PetType = 'cat'   ) ) AND StuID IN (   SELECT StuID   FROM Has_Pet   WHERE PetID IN (     SELECT PetID     FROM Pets     WHERE PetType = 'dog'   ) )

index is 60
SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'
What are the students' first names who have both cats and dogs as pets?
SQL correction:
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cats' AND Student.StuID IN (   SELECT Student.StuID   FROM Student   JOIN Has_Pet ON Student.StuID = Has_Pet.StuID   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'dogs' )
entities correction:
SELECT Student.Fname FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'cat'  AND Student.StuID IN (     SELECT Student.StuID      FROM Student      JOIN Has_Pet ON Student.StuID = Has_Pet.StuID      JOIN Pets ON Has_Pet.PetID = Pets.PetID      WHERE Pets.PetType = 'dog' )

index is 61
SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
Find the major and age of students who do not have a cat pet.
SQL correction:
SELECT Major, Age FROM Student WHERE StuID NOT IN (   SELECT StuID   FROM Has_Pet   WHERE PetID IN (     SELECT PetID     FROM Pets     WHERE PetType = 'cat'   ) )
entities correction:
SELECT Major, Age  FROM Student  WHERE StuID NOT IN (   SELECT StuID    FROM Has_Pet    WHERE PetID IN (     SELECT PetID      FROM Pets      WHERE LOWER(PetType) = 'cat'   ) )

index is 62
SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
What major is every student who does not own a cat as a pet, and also how old are they?
SQL correction:
SELECT Major, Age FROM Student WHERE StuID NOT IN (   SELECT StuID   FROM Has_Pet   WHERE PetID IN (     SELECT PetID     FROM Pets     WHERE PetType = 'cat'   ) )
entities correction:
SELECT Major, Age  FROM Student  WHERE StuID NOT IN (      SELECT StuID      FROM Has_Pet      WHERE PetID IN (          SELECT PetID          FROM Pets          WHERE PetType = 'cat'      )  )

index is 63
SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'
Find the id of students who do not have a cat pet.
SQL correction:
SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN (     SELECT Has_Pet.StuID     FROM Has_Pet     INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE Pets.PetType = 'cat' )
entities correction:
SELECT Student.StuID  FROM Student  WHERE Student.StuID NOT IN (     SELECT Has_Pet.StuID      FROM Has_Pet      INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID      WHERE Pets.PetType = 'cat' )

index is 64
SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'
What are the ids of the students who do not own cats as pets?
SQL correction:
SELECT DISTINCT Student.StuID FROM Student WHERE Student.StuID NOT IN (     SELECT Has_Pet.StuID     FROM Has_Pet     JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE Pets.PetType = 'cat'         AND Has_Pet.StuID IN (             SELECT StuID             FROM Student         ) )
entities correction:
SELECT DISTINCT Student.StuID  FROM Student  WHERE Student.StuID NOT IN (     SELECT Has_Pet.StuID      FROM Has_Pet      JOIN Pets ON Has_Pet.PetID = Pets.PetID      WHERE Pets.PetType = 'cat' )

index is 65
SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
Find the first name and age of students who have a dog but do not have a cat as a pet.
SQL correction:
SELECT Student.Fname, Student.Age  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'dog'  AND Student.StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat')
entities correction:
SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Student.StuID NOT IN (     SELECT Has_Pet.StuID     FROM Has_Pet     JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE Pets.PetType = 'cat' )

index is 66
SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
What is the first name of every student who has a dog but does not have a cat?
SQL correction:
SELECT DISTINCT Student.Fname  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'dog'  AND Student.StuID NOT IN (     SELECT Student.StuID      FROM Student      JOIN Has_Pet ON Student.StuID = Has_Pet.StuID      JOIN Pets ON Has_Pet.PetID = Pets.PetID      WHERE Pets.PetType = 'cat' )
entities correction:
SELECT  DISTINCT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Student.StuID NOT IN (     SELECT Student.StuID     FROM Student     JOIN Has_Pet ON Student.StuID = Has_Pet.StuID     JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE Pets.PetType = 'cat' )

index is 67
SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1
Find the type and weight of the youngest pet.
SQL correction:
SELECT PetType, weight  FROM Pets  WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)
original correction:
SELECT PetType, weight  FROM Pets  WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)

index is 68
SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1
What type of pet is the youngest animal, and how much does it weigh?
SQL correction:
SELECT PetType, pet_age, weight FROM Pets ORDER BY pet_age ASC, weight ASC LIMIT 1
original correction:
SELECT PetType, pet_age, weight FROM Pets ORDER BY pet_age ASC, weight ASC LIMIT 1

index is 69
SELECT petid ,  weight FROM pets WHERE pet_age  >  1
Find the id and weight of all pets whose age is older than 1.
SQL correction:
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1
original correction:
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1

index is 70
SELECT petid ,  weight FROM pets WHERE pet_age  >  1
What is the id and weight of every pet who is older than 1?
SQL correction:
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1
original correction:
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1

index is 71
SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype
Find the average and maximum age for each type of pet.
SQL correction:
SELECT PetType, AVG(pet_age), MAX(pet_age)  FROM Pets  GROUP BY PetType
original correction:
SELECT PetType, AVG(pet_age), MAX(pet_age)  FROM Pets  GROUP BY PetType

index is 72
SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype
What is the average and maximum age for each pet type?
SQL correction:
SELECT PetType, AVG(pet_age), MAX(pet_age) FROM Pets GROUP BY PetType
original correction:
SELECT PetType, AVG(pet_age), MAX(pet_age) FROM Pets GROUP BY PetType

index is 73
SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype
Find the average weight for each pet type.
SQL correction:
SELECT PetType, AVG(weight)  FROM Pets  GROUP BY PetType
original correction:
SELECT PetType, AVG(weight)  FROM Pets  GROUP BY PetType

index is 74
SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype
What is the average weight for each type of pet?
SQL correction:
SELECT PetType, AVG(weight) AS average_weight FROM Pets GROUP BY PetType
original correction:
SELECT PetType, AVG(weight) AS average_weight FROM Pets GROUP BY PetType

index is 75
SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid
Find the first name and age of students who have a pet.
SQL correction:
SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)
original correction:
SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)

index is 76
SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid
What are the different first names and ages of the students who do have pets?
SQL correction:
SELECT Fname, Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID
original correction:
SELECT Fname, Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID

index is 77
SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'
Find the id of the pet owned by student whose last name is ‘Smith’.
SQL correction:
SELECT Pets.PetID  FROM Pets  JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.LName = 'Smith'
entities correction:
SELECT Pets.PetID FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.LName = 'Smith'

index is 78
SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'
What is the id of the pet owned by the student whose last name is 'Smith'?
SQL correction:
SELECT Pets.PetID  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Student.LName = 'Smith'
entities correction:
SELECT Pets.PetID  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Student.LName = 'Smith'

index is 79
SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid
Find the number of pets for each student who has any pet and student id.
SQL correction:
SELECT Student.StuID, COUNT(Has_Pet.PetID)  FROM Has_Pet  JOIN Pets ON Has_Pet.PetID = Pets.PetID  GROUP BY Student.StuID
original correction:
SELECT Student.StuID, COUNT(Has_Pet.PetID)  FROM Has_Pet  JOIN Pets ON Has_Pet.PetID = Pets.PetID  GROUP BY Student.StuID

index is 80
select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid
For students who have pets , how many pets does each student have ? list their ids instead of names .
SQL correction:
SELECT Student.StuID, count(Has_Pet.PetID)  FROM Has_Pet  JOIN Student ON Has_Pet.StuID = Student.StuID GROUP BY Student.StuID
original correction:
SELECT Student.StuID, count(Has_Pet.PetID)  FROM Has_Pet  JOIN Student ON Has_Pet.StuID = Student.StuID GROUP BY Student.StuID

index is 81
SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1
Find the first name and gender of student who have more than one pet.
SQL correction:
SELECT T1.Fname, T1.Sex FROM Student AS T1 WHERE T1.StuID IN (   SELECT T2.StuID   FROM Has_Pet AS T2   GROUP BY T2.StuID   HAVING COUNT(*) > 1 )
original correction:
SELECT T1.Fname, T1.Sex FROM Student AS T1 WHERE T1.StuID IN (   SELECT T2.StuID   FROM Has_Pet AS T2   GROUP BY T2.StuID   HAVING COUNT(*) > 1 )

index is 82
SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1
What is the first name and gender of the all the students who have more than one pet?
SQL correction:
SELECT Fname, Sex  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  GROUP BY Student.StuID  HAVING COUNT(Has_Pet.PetID) > 1
original correction:
SELECT Fname, Sex  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  GROUP BY Student.StuID  HAVING COUNT(Has_Pet.PetID) > 1

index is 83
SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'
Find the last name of the student who has a cat that is age 3.
SQL correction:
SELECT Student.LName  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.pet_age = 3  AND Pets.PetType = 'cat'
entities correction:
SELECT Student.LName  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.pet_age = 3  AND Pets.PetType = 'cat'

index is 84
SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'
What is the last name of the student who has a cat that is 3 years old?
SQL correction:
SELECT Student.LName  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3 ORDER BY Student.LName DESC LIMIT 1
entities correction:
SELECT Student.LName   FROM Student   JOIN Has_Pet ON Student.StuID = Has_Pet.StuID   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3   ORDER BY Student.LName DESC   LIMIT 1

index is 85
select avg(age) from student where stuid not in (select stuid from has_pet)
Find the average age of students who do not have any pet .
SQL correction:
SELECT avg(Age) FROM Student WHERE StuID NOT IN (SELECT DISTINCT StuID FROM Has_Pet);
original correction:
SELECT avg(Age) FROM Student WHERE StuID NOT IN (SELECT DISTINCT StuID FROM Has_Pet);

index is 86
select avg(age) from student where stuid not in (select stuid from has_pet)
What is the average age for all students who do not own any pets ?
SQL correction:
SELECT avg(Age)  FROM Student  WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
original correction:
SELECT avg(Age)  FROM Student  WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)

index is 87
SELECT count(*) FROM CONTINENTS;
How many continents are there?
SQL correction:
SELECT COUNT(*) FROM continents
original correction:
SELECT COUNT(*) FROM continents

index is 88
SELECT count(*) FROM CONTINENTS;
What is the number of continents?
SQL correction:
SELECT COUNT(ContId) FROM continents
original correction:
SELECT COUNT(ContId) FROM continents

index is 89
SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;
How many countries does each continent have? List the continent id, continent name and the number of countries.
SQL correction:
SELECT ContId, Continent, COUNT(CountryId) AS NumCountries  FROM continents  JOIN countries ON continents.ContId = countries.Continent  GROUP BY ContId, Continent
original correction:
SELECT ContId, Continent, COUNT(CountryId) AS NumCountries  FROM continents  JOIN countries ON continents.ContId = countries.Continent  GROUP BY ContId, Continent

index is 90
SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;
For each continent, list its id, name, and how many countries it has?
SQL correction:
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS CountryCount FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent
original correction:
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS CountryCount FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent

index is 91
SELECT count(*) FROM COUNTRIES;
How many countries are listed?
SQL correction:
SELECT COUNT(DISTINCT CountryId) FROM countries
original correction:
SELECT COUNT(DISTINCT CountryId) FROM countries

index is 92
SELECT count(*) FROM COUNTRIES;
How many countries exist?
SQL correction:
SELECT COUNT(*) FROM countries
original correction:
SELECT COUNT(*) FROM countries

index is 93
SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;
How many models does each car maker produce? List maker full name, id and the number.
SQL correction:
SELECT FullName, Id, COUNT(model_list.ModelId) AS num_models FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY FullName, Id
original correction:
SELECT FullName, Id, COUNT(model_list.ModelId) AS num_models FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY FullName, Id

index is 94
SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;
What is the full name of each car maker, along with its id and how many models it produces?
SQL correction:
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.Model) AS ModelCount  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  GROUP BY car_makers.FullName, car_makers.Id
original correction:
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.Model) AS ModelCount  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  GROUP BY car_makers.FullName, car_makers.Id

index is 95
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;
Which model of the car has the minimum horsepower?
SQL correction:
SELECT SELECT Model FROM cars_data WHERE Horsepower = (     SELECT MIN(Horsepower)     FROM cars_data )
original correction:
SELECT SELECT Model FROM cars_data WHERE Horsepower = (     SELECT MIN(Horsepower)     FROM cars_data )

index is 96
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;
What is the model of the car with the smallest amount of horsepower?
SQL correction:
SELECT model_list.Model  FROM model_list  JOIN car_names ON model_list.ModelId = car_names.ModelId  JOIN cars_data ON car_names.MakeId = cars_data.Id  ORDER BY cars_data.Horsepower ASC  LIMIT 1
original correction:
SELECT model_list.Model  FROM model_list  JOIN car_names ON model_list.ModelId = car_names.ModelId  JOIN cars_data ON car_names.MakeId = cars_data.Id  ORDER BY cars_data.Horsepower ASC  LIMIT 1

index is 97
SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)
Find the model of the car whose weight is below the average weight.
SQL correction:
SELECT Model FROM model_list WHERE ModelId IN (   SELECT Model   FROM car_names   WHERE MakeId IN (     SELECT Id     FROM cars_data     WHERE Weight < (       SELECT AVG(Weight)       FROM cars_data     )   ) )
original correction:
SELECT Model FROM model_list WHERE ModelId IN (   SELECT Model   FROM car_names   WHERE MakeId IN (     SELECT Id     FROM cars_data     WHERE Weight < (       SELECT AVG(Weight)       FROM cars_data     )   ) )

index is 98
SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)
What is the model for the car with a weight smaller than the average?
SQL correction:
SELECT model_list.Model  FROM cars_data  JOIN model_list ON cars_data.Id = model_list.ModelId  WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)
original correction:
SELECT model_list.Model  FROM cars_data  JOIN model_list ON cars_data.Id = model_list.ModelId  WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)

index is 99
SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';
Find the name of the makers that produced some cars in the year of 1970?
SQL correction:
SELECT T1.Maker FROM car_makers AS T1 JOIN cars_data AS T2 ON T1.Id = T2.Id WHERE T2.Year = 1970
original correction:
SELECT T1.Maker FROM car_makers AS T1 JOIN cars_data AS T2 ON T1.Id = T2.Id WHERE T2.Year = 1970

index is 100
SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';
What is the name of the different car makers who produced a car in 1970?
SQL correction:
SELECT SELECT DISTINCT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id WHERE cars_data.Year = 1970
original correction:
SELECT SELECT DISTINCT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id WHERE cars_data.Year = 1970

index is 101
SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);
Find the make and production time of the cars that were produced in the earliest year?
SQL correction:
SELECT car_makers.Maker, MIN(cars_data.Year) AS EarliestYear FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_makers.Maker ORDER BY EarliestYear ASC LIMIT 1
original correction:
SELECT car_makers.Maker, MIN(cars_data.Year) AS EarliestYear FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_makers.Maker ORDER BY EarliestYear ASC LIMIT 1

index is 102
SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);
What is the maker of the carr produced in the earliest year and what year was it?
SQL correction:
SELECT T1.Maker, T4.Year FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id ORDER BY T4.Year ASC LIMIT 1
original correction:
SELECT T1.Maker, T4.Year FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id ORDER BY T4.Year ASC LIMIT 1

index is 103
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;
Which distinct car models are the produced after 1980?
SQL correction:
SELECT DISTINCT car_names.Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980
original correction:
SELECT DISTINCT car_names.Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980

index is 104
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;
What are the different models for the cards produced after 1980?
SQL correction:
SELECT DISTINCT T1.Model  FROM model_list AS T1  JOIN car_names AS T2 ON T1.ModelId = T2.Model  JOIN cars_data AS T3 ON T2.MakeId = T3.Id  WHERE T3.Year > 1980
original correction:
SELECT DISTINCT T1.Model  FROM model_list AS T1  JOIN car_names AS T2 ON T1.ModelId = T2.Model  JOIN cars_data AS T3 ON T2.MakeId = T3.Id  WHERE T3.Year > 1980

index is 105
SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;
How many car makers are there in each continents? List the continent name and the count.
SQL correction:
SELECT T1.Continent, COUNT(DISTINCT T3.Id) AS MakerCount FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent
original correction:
SELECT T1.Continent, COUNT(DISTINCT T3.Id) AS MakerCount FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent

index is 106
SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;
What is the name of each continent and how many car makers are there in each one?
SQL correction:
SELECT continents.Continent, COUNT(DISTINCT car_makers.Id) AS MakerCount FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent
original correction:
SELECT continents.Continent, COUNT(DISTINCT car_makers.Id) AS MakerCount FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent

index is 107
SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;
Which of the countries has the most car makers? List the country name.
SQL correction:
SELECT CountryName FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1
original correction:
SELECT CountryName FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1

index is 108
SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;
What is the name of the country with the most car makers?
SQL correction:
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1
original correction:
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1

index is 109
select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;
How many car models are produced by each maker ? Only list the count and the maker full name .
SQL correction:
SELECT COUNT(car_names.Model) AS ModelCount, car_makers.FullName FROM car_names JOIN car_makers ON car_names.MakeId = car_makers.Id GROUP BY car_makers.FullName
original correction:
SELECT COUNT(car_names.Model) AS ModelCount, car_makers.FullName FROM car_names JOIN car_makers ON car_names.MakeId = car_makers.Id GROUP BY car_makers.FullName

index is 110
SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;
What is the number of car models that are produced by each maker and what is the id and full name of each maker?
SQL correction:
SELECT COUNT(T3.Model) AS NumCarModels, T1.Id, T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.ModelId = T3.MakeId GROUP BY T1.Id, T1.FullName
original correction:
SELECT COUNT(T3.Model) AS NumCarModels, T1.Id, T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.ModelId = T3.MakeId GROUP BY T1.Id, T1.FullName

index is 111
SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';
What is the accelerate of the car make amc hornet sportabout (sw)?
SQL correction:
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON car_names.MakeId = cars_data.Id JOIN model_list ON model_list.Model = car_names.Model JOIN car_makers ON car_makers.Id = model_list.Maker WHERE car_names.Make = 'amc' AND car_names.Model = 'hornet sportabout (sw)'
entities correction:
SELECT cars_data.Accelerate  FROM cars_data  JOIN car_names ON car_names.MakeId = cars_data.Id  JOIN model_list ON model_list.Model = car_names.Model  JOIN car_makers ON car_makers.Id = model_list.Maker  WHERE car_names.Make = 'amc'  AND model_list.Model = 'hornet sportabout (sw)'

index is 112
SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';
How much does the car accelerate that makes amc hornet sportabout (sw)?
SQL correction:
SELECT Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'amc' AND model_list.Model = 'hornet sportabout (sw)'
entities correction:
SELECT Acceleration FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'amc' AND model_list.Model = 'hornet sportabout (sw)'

index is 113
SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';
How many car makers are there in france?
SQL correction:
SELECT COUNT(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France')
entities correction:
SELECT COUNT(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France')

index is 114
SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';
What is the number of makers of care in France?
SQL correction:
SELECT count(DISTINCT car_makers.Id)  FROM car_makers  JOIN countries ON car_makers.Country = countries.CountryId  WHERE countries.CountryName = 'France'
entities correction:
SELECT count(DISTINCT car_makers.Id)  FROM car_makers  JOIN countries ON car_makers.Country = countries.CountryId  WHERE countries.CountryName = 'France'

index is 115
SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';
How many car models are produced in the usa?
SQL correction:
SELECT COUNT(DISTINCT car_names.Model)  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  JOIN car_names ON model_list.ModelId = car_names.MakeId  JOIN countries ON car_makers.Country = countries.CountryId  WHERE countries.CountryName = 'USA'
entities correction:
SELECT COUNT(DISTINCT car_names.Model)   FROM car_makers   JOIN model_list ON car_makers.Id = model_list.Maker   JOIN car_names ON model_list.ModelId = car_names.MakeId   JOIN countries ON car_makers.Country = countries.CountryId   JOIN continents ON countries.Continent = continents.ContId   WHERE countries.CountryName = 'USA'

index is 116
SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';
What is the count of the car models produced in the United States?
SQL correction:
SELECT COUNT(DISTINCT model_list.ModelId) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'United States'
entities correction:
SELECT COUNT(DISTINCT car_names.Model) FROM car_names JOIN model_list ON car_names.Model = model_list.ModelId JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'United States'

index is 117
SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;
What is the average miles per gallon(mpg) of the cars with 4 cylinders?
SQL correction:
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
original correction:
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;

index is 118
SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;
What is the average miles per gallon of all the cards with 4 cylinders?
SQL correction:
SELECT AVG(cars_data.MPG) FROM cars_data WHERE cars_data.Cylinders = 4
original correction:
SELECT AVG(cars_data.MPG) FROM cars_data WHERE cars_data.Cylinders = 4

index is 119
select min(weight) from cars_data where cylinders  =  8 and year  =  1974
What is the smallest weight of the car produced with 8 cylinders on 1974 ?
SQL correction:
SELECT MIN(Weight)  FROM cars_data  WHERE Cylinders = 8    AND Year = 1974
original correction:
SELECT MIN(Weight)  FROM cars_data  WHERE Cylinders = 8    AND Year = 1974

index is 120
select min(weight) from cars_data where cylinders  =  8 and year  =  1974
What is the minimum weight of the car with 8 cylinders produced in 1974 ?
SQL correction:
SELECT MIN(Weight)  FROM cars_data  WHERE Cylinders = 8 AND Year = 1974
original correction:
SELECT MIN(Weight)  FROM cars_data  WHERE Cylinders = 8 AND Year = 1974

index is 121
SELECT Maker ,  Model FROM MODEL_LIST;
What are all the makers and models?
SQL correction:
SELECT T1.Maker, T3.Model  FROM car_makers AS T1  JOIN model_list AS T2 ON T1.Id = T2.Maker  JOIN car_names AS T3 ON T3.MakeId = T2.Model
original correction:
SELECT T1.Maker, T3.Model  FROM car_makers AS T1  JOIN model_list AS T2 ON T1.Id = T2.Maker  JOIN car_names AS T3 ON T3.MakeId = T2.Model

index is 122
SELECT Maker ,  Model FROM MODEL_LIST;
What are the makers and models?
SQL correction:
SELECT car_makers.Maker, car_names.Model  FROM car_makers  JOIN car_names ON car_makers.Id = car_names.MakeId
original correction:
SELECT car_makers.Maker, car_names.Model  FROM car_makers  JOIN car_names ON car_makers.Id = car_names.MakeId

index is 123
SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;
What are the countries having at least one car maker? List name and id.
SQL correction:
SELECT CountryName, CountryId FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY CountryName, CountryId
original correction:
SELECT CountryName, CountryId FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY CountryName, CountryId

index is 124
SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;
What are the names and ids of all countries with at least one car maker?
SQL correction:
SELECT T1.CountryName, T1.CountryId FROM countries AS T1 WHERE EXISTS (     SELECT *     FROM car_makers AS T2     WHERE T2.Country = T1.CountryId )
original correction:
SELECT T1.CountryName, T1.CountryId FROM countries AS T1 WHERE EXISTS (     SELECT *     FROM car_makers AS T2     WHERE T2.Country = T1.CountryId )

index is 125
SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;
What is the number of the cars with horsepower more than 150?
SQL correction:
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150
original correction:
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150

index is 126
SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;
What is the number of cars with a horsepower greater than 150?
SQL correction:
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150
original correction:
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150

index is 127
SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;
What is the average weight of cars each year?
SQL correction:
SELECT Year, AVG(Weight) AS AverageWeight FROM cars_data GROUP BY Year
original correction:
SELECT Year, AVG(Weight) AS AverageWeight FROM cars_data GROUP BY Year

index is 128
SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;
What is the average weight and year for each year?
SQL correction:
SELECT AVG(Weight) AS AverageWeight, Year FROM cars_data GROUP BY Year
original correction:
SELECT AVG(Weight) AS AverageWeight, Year FROM cars_data GROUP BY Year

index is 129
SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;
Which countries in europe have at least 3 car manufacturers?
SQL correction:
SELECT countries.CountryName  FROM countries  JOIN continents ON countries.Continent = continents.ContId  JOIN car_makers ON car_makers.Country = countries.CountryId  WHERE continents.Continent = 'Europe'  GROUP BY countries.CountryName  HAVING count(DISTINCT car_makers.Id) >= 3
entities correction:
SELECT countries.CountryName FROM countries JOIN continents ON countries.Continent = continents.ContId JOIN car_makers ON car_makers.Country = countries.CountryId WHERE continents.Continent = 'Europe' GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3

index is 130
SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;
What are the names of all European countries with at least 3 manufacturers?
SQL correction:
SELECT CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'European' GROUP BY CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3
entities correction:
SELECT CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'Europe' GROUP BY CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3

index is 131
SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;
What is the maximum horsepower and the make of the car models with 3 cylinders?
SQL correction:
SELECT MAX(cars_data.Horsepower) AS Maximum_Horsepower, car_makers.Maker  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE cars_data.Cylinders = 3 GROUP BY car_makers.Maker
original correction:
SELECT MAX(cars_data.Horsepower) AS Maximum_Horsepower, car_makers.Maker  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE cars_data.Cylinders = 3 GROUP BY car_makers.Maker

index is 132
SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;
What is the largest amount of horsepower for the models with 3 cylinders and what make is it?
SQL correction:
SELECT MAX(cars_data.Horsepower) AS MaxHorsepower, car_makers.Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE cars_data.Cylinders = 3 GROUP BY car_makers.Maker
original correction:
SELECT MAX(cars_data.Horsepower) AS MaxHorsepower, car_makers.Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE cars_data.Cylinders = 3 GROUP BY car_makers.Maker

index is 133
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;
Which model saves the most gasoline? That is to say, have the maximum miles per gallon.
SQL correction:
SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.ModelId = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.MPG DESC LIMIT 1
original correction:
SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.ModelId = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.MPG DESC LIMIT 1

index is 134
select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;
What is the car model with the highest mpg ?
SQL correction:
SELECT car_names.Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY cars_data.MPG DESC LIMIT 1
original correction:
SELECT car_names.Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY cars_data.MPG DESC LIMIT 1

index is 135
SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;
What is the average horsepower of the cars before 1980?
SQL correction:
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980
original correction:
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980

index is 136
select avg(horsepower) from cars_data where year  <  1980;
What is the average horsepower for all cars produced before 1980 ?
SQL correction:
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
original correction:
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;

index is 137
SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';
What is the average edispl of the cars of model volvo?
SQL correction:
SELECT AVG(cars_data.Edispl)  FROM model_list  JOIN car_names ON model_list.Model = car_names.Model  JOIN cars_data ON car_names.MakeId = cars_data.Id  JOIN car_makers ON car_names.MakeId = car_makers.Id  WHERE car_makers.Maker = 'volvo'
entities correction:
SELECT AVG(cars_data.Edispl)   FROM model_list   JOIN car_names ON model_list.ModelId = car_names.ModelId   JOIN cars_data ON car_names.MakeId = cars_data.Id   JOIN car_makers ON car_makers.Id = car_names.MakeId   WHERE car_makers.Maker = 'volvo'

index is 138
SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';
What is the average edispl for all volvos?
SQL correction:
SELECT AVG(cars_data.Edispl)  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.FullName = 'volvo'
entities correction:
SELECT AVG(cars_data.Edispl) FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.Maker = 'Volvo'

index is 139
SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;
What is the maximum accelerate for different number of cylinders?
SQL correction:
SELECT Cylinders, MAX(Accelerate)  FROM cars_data  GROUP BY Cylinders
original correction:
SELECT Cylinders, MAX(Accelerate)  FROM cars_data  GROUP BY Cylinders

index is 140
SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;
What is the maximum accelerate for all the different cylinders?
SQL correction:
SELECT MAX(Accelerate) AS Max_Accelerate, Cylinders FROM cars_data GROUP BY Cylinders
original correction:
SELECT MAX(Accelerate) AS Max_Accelerate, Cylinders FROM cars_data GROUP BY Cylinders

index is 141
SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;
Which model has the most version(make) of cars?
SQL correction:
SELECT Model FROM model_list GROUP BY Model HAVING COUNT(DISTINCT Make) = (     SELECT MAX(count_model)     FROM (         SELECT COUNT(DISTINCT Make) AS count_model         FROM model_list         GROUP BY Model     ) AS counts )
original correction:
SELECT Model FROM model_list GROUP BY Model HAVING COUNT(DISTINCT Make) = (     SELECT MAX(count_model)     FROM (         SELECT COUNT(DISTINCT Make) AS count_model         FROM model_list         GROUP BY Model     ) AS counts )

index is 142
SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;
What model has the most different versions?
SQL correction:
SELECT Model FROM model_list GROUP BY Model ORDER BY COUNT(DISTINCT Maker) DESC LIMIT 1
original correction:
SELECT Model FROM model_list GROUP BY Model ORDER BY COUNT(DISTINCT Maker) DESC LIMIT 1

index is 143
SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;
How many cars have more than 4 cylinders?
SQL correction:
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4
original correction:
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4

index is 144
SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;
What is the number of cars with more than 4 cylinders?
SQL correction:
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4
original correction:
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4

index is 145
SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;
how many cars were produced in 1980?
SQL correction:
SELECT COUNT(*) FROM cars_data WHERE Year = 1980
original correction:
SELECT COUNT(*) FROM cars_data WHERE Year = 1980

index is 146
SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;
In 1980, how many cars were made?
SQL correction:
SELECT COUNT(*) AS TotalCars FROM cars_data WHERE Year = 1980
original correction:
SELECT COUNT(*) AS TotalCars FROM cars_data WHERE Year = 1980

index is 147
SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';
How many car models were produced by the maker with full name American Motor Company?
SQL correction:
SELECT COUNT(DISTINCT car_names.Model) FROM car_names JOIN car_makers ON car_names.MakeId = car_makers.Id JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = 'American Motor Company'
entities correction:
SELECT COUNT(DISTINCT model_list.Model) FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  WHERE car_makers.FullName = 'American Motor Company'

index is 148
SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';
What is the number of car models created by the car maker American Motor Company?
SQL correction:
SELECT COUNT(ModelId)  FROM model_list  WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'American Motor Company')
entities correction:
SELECT COUNT(ModelId) FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'amc')

index is 149
SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;
Which makers designed more than 3 car models? List full name and the id.
SQL correction:
SELECT FullName, Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY FullName, Id HAVING COUNT(DISTINCT model_list.ModelId) > 3
original correction:
SELECT FullName, Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY FullName, Id HAVING COUNT(DISTINCT model_list.ModelId) > 3

index is 150
SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;
What are the names and ids of all makers with more than 3 models?
SQL correction:
SELECT Id, Maker  FROM car_makers  WHERE Id IN (   SELECT Maker    FROM model_list    GROUP BY Maker    HAVING COUNT(*) > 3 )
original correction:
SELECT Id, Maker  FROM car_makers  WHERE Id IN (   SELECT Maker    FROM model_list    GROUP BY Maker    HAVING COUNT(*) > 3 )

index is 151
SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;
Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?
SQL correction:
SELECT DISTINCT car_names.Model  FROM car_makers  JOIN model_list ON model_list.Maker = car_makers.Id  JOIN car_names ON car_names.MakeId = model_list.Model  JOIN cars_data ON cars_data.Id = car_names.MakeId  WHERE car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500
entities correction:
SELECT DISTINCT car_names.Model FROM car_makers JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON car_names.MakeId = model_list.Model JOIN cars_data ON cars_data.Id = car_names.MakeId WHERE car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500

index is 152
SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;
What are the different models created by either the car maker General Motors or weighed more than 3500?
SQL correction:
SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id JOIN car_names AS T4 ON T1.Model = T4.Model JOIN cars_data AS T3 ON T4.MakeId = T3.Id WHERE T2.Maker = 'General Motors' OR T3.Weight > 3500
entities correction:
SELECT DISTINCT T1.Model  FROM model_list AS T1  JOIN car_makers AS T2 ON T1.Maker = T2.Id  JOIN car_names AS T4 ON T1.Model = T4.Model  JOIN cars_data AS T3 ON T4.MakeId = T3.Id  WHERE T2.Maker = 'gm' OR T3.Weight > 3500

index is 153
select distinct year from cars_data where weight between 3000 and 4000;
In which years cars were produced weighing no less than 3000 and no more than 4000 ?
SQL correction:
SELECT DISTINCT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000
original correction:
SELECT DISTINCT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000

index is 154
select distinct year from cars_data where weight between 3000 and 4000;
What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?
SQL correction:
SELECT DISTINCT Year  FROM cars_data  WHERE Weight < 4000    AND Year IN (     SELECT DISTINCT Year      FROM cars_data      WHERE Weight > 3000   )
original correction:
SELECT DISTINCT Year  FROM cars_data  WHERE Weight < 4000    AND Year IN (     SELECT DISTINCT Year      FROM cars_data      WHERE Weight > 3000   )

index is 155
SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;
What is the horsepower of the car with the largest accelerate?
SQL correction:
SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1
original correction:
SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1

index is 156
SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;
What is the horsepower of the car with the greatest accelerate?
SQL correction:
SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1
original correction:
SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1

index is 157
SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
For model volvo, how many cylinders does the car with the least accelerate have?
SQL correction:
SELECT cars_data.Cylinders FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_names.Model = 'volvo' AND cars_data.Accelerate = (     SELECT min(cars_data.Accelerate)     FROM car_names     JOIN cars_data ON car_names.MakeId = cars_data.Id     WHERE car_names.Model = 'volvo' )
entities correction:
SELECT cars_data.Cylinders  FROM car_names  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE car_names.Model = 'volvo'  AND cars_data.Accelerate = (      SELECT min(cars_data.Accelerate)           FROM car_names           JOIN cars_data ON car_names.MakeId = cars_data.Id           WHERE car_names.Model = 'volvo' ) 

index is 158
SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
For a volvo model, how many cylinders does the version with least accelerate have?
SQL correction:
SELECT min(Cylinders)  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  JOIN car_names ON model_list.Model = car_names.Model  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE car_makers.Maker = 'Volvo'  AND cars_data.Accelerate = (     SELECT min(Accelerate)      FROM car_makers      JOIN model_list ON car_makers.Id = model_list.Maker      JOIN car_names ON model_list.Model = car_names.Model      JOIN cars_data ON car_names.MakeId = cars_data.Id      WHERE car_makers.Maker = 'Volvo' )
entities correction:
SELECT min(Cylinders)  FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'volvo' AND cars_data.Accelerate = (     SELECT min(Accelerate)     FROM car_makers     JOIN model_list ON car_makers.Id = model_list.Maker     JOIN car_names ON model_list.Model = car_names.Model     JOIN cars_data ON car_names.MakeId = cars_data.Id     WHERE car_makers.Maker = 'volvo' )

index is 159
SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );
How many cars have a larger accelerate than the car with the largest horsepower?
SQL correction:
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
original correction:
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)

index is 160
SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );
What is the number of cars with a greater accelerate than the one with the most horsepower?
SQL correction:
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
original correction:
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)

index is 161
select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2
How many countries has more than 2 car makers ?
SQL correction:
SELECT COUNT(DISTINCT T1.CountryId) FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING COUNT(DISTINCT T2.Id) > 2
original correction:
SELECT COUNT(DISTINCT T1.CountryId) FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING COUNT(DISTINCT T2.Id) > 2

index is 162
select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2
What is the number of countries with more than 2 car makers ?
SQL correction:
SELECT count(DISTINCT T1.CountryId)  FROM countries AS T1  JOIN car_makers AS T2 ON T2.Country = T1.CountryId  GROUP BY T1.CountryId  HAVING count(DISTINCT T2.Id) > 2
original correction:
SELECT count(DISTINCT T1.CountryId)  FROM countries AS T1  JOIN car_makers AS T2 ON T2.Country = T1.CountryId  GROUP BY T1.CountryId  HAVING count(DISTINCT T2.Id) > 2

index is 163
SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;
How many cars has over 6 cylinders?
SQL correction:
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6
original correction:
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6

index is 164
SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;
What is the number of carsw ith over 6 cylinders?
SQL correction:
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6
original correction:
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6

index is 165
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;
For the cars with 4 cylinders, which model has the largest horsepower?
SQL correction:
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE cars_data.Cylinders = 4 GROUP BY model_list.Model ORDER BY cars_data.Horsepower DESC LIMIT 1
original correction:
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE cars_data.Cylinders = 4 GROUP BY model_list.Model ORDER BY cars_data.Horsepower DESC LIMIT 1

index is 166
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;
For all of the 4 cylinder cars, which model has the most horsepower?
SQL correction:
SELECT SELECT car_names.Model, MAX(cars_data.Horsepower) AS MaxHorsepower FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 4 GROUP BY car_names.Model ORDER BY MaxHorsepower DESC LIMIT 1;
original correction:
SELECT SELECT car_names.Model, MAX(cars_data.Horsepower) AS MaxHorsepower FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 4 GROUP BY car_names.Model ORDER BY MaxHorsepower DESC LIMIT 1;

index is 167
SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;
Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.
SQL correction:
SELECT MakeId, Make FROM car_names WHERE MakeId IN (     SELECT MakeId     FROM cars_data     WHERE Horsepower > (         SELECT MIN(Horsepower)         FROM cars_data     ) ) AND MakeId NOT IN (     SELECT MakeId     FROM cars_data     WHERE Cylinders > 3 )
original correction:
SELECT MakeId, Make FROM car_names WHERE MakeId IN (     SELECT MakeId     FROM cars_data     WHERE Horsepower > (         SELECT MIN(Horsepower)         FROM cars_data     ) ) AND MakeId NOT IN (     SELECT MakeId     FROM cars_data     WHERE Cylinders > 3 )

index is 168
select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;
Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?
SQL correction:
SELECT car_names.MakeId, car_names.Make FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id JOIN car_makers ON car_makers.Id = car_names.Model WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders < 4;
original correction:
SELECT car_names.MakeId, car_names.Make FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id JOIN car_makers ON car_makers.Id = car_names.Model WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders < 4;

index is 169
select max(mpg) from cars_data where cylinders  =  8 or year  <  1980
What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?
SQL correction:
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 AND Year < 1980
original correction:
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 AND Year < 1980

index is 170
select max(mpg) from cars_data where cylinders  =  8 or year  <  1980
What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?
SQL correction:
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980
original correction:
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980

index is 171
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';
Which models are lighter than 3500 but not built by the 'Ford Motor Company'?
SQL correction:
SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.ModelId = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id JOIN car_makers AS T4 ON T1.Maker = T4.Id WHERE T3.Weight < 3500 AND T4.Maker != 'Ford Motor Company'
entities correction:
SELECT T1.Model  FROM model_list AS T1  JOIN car_names AS T2 ON T1.ModelId = T2.Model  JOIN cars_data AS T3 ON T2.MakeId = T3.Id  JOIN car_makers AS T4 ON T2.MakeId = T4.Id  WHERE T3.Weight < 3500  AND T4.Maker != 'Ford Motor Company'

index is 172
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';
What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?
SQL correction:
SELECT Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON model_list.Model = car_names.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker != 'Ford Motor Company'
entities correction:
SELECT Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON model_list.Model = car_names.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker <> 'Ford'

index is 173
SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;
What are the name of the countries where there is not a single car maker?
SQL correction:
SELECT CountryName  FROM countries  LEFT JOIN car_makers ON countries.CountryId = car_makers.Country  WHERE car_makers.Country IS NULL
original correction:
SELECT CountryName  FROM countries  LEFT JOIN car_makers ON countries.CountryId = car_makers.Country  WHERE car_makers.Country IS NULL

index is 174
SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;
What are the names of the countries with no car makers?
SQL correction:
SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers)
original correction:
SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers)

index is 175
select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;
Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .
SQL correction:
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(car_makers.Id) >= 2 AND COUNT(DISTINCT car_makers.Maker) > 3
original correction:
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(car_makers.Id) >= 2 AND COUNT(DISTINCT car_makers.Maker) > 3

index is 176
SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;
What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?
SQL correction:
SELECT SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT model_list.Model) >= 2 AND COUNT(*) > 3
original correction:
SELECT SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT model_list.Model) >= 2 AND COUNT(*) > 3

index is 177
SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';
What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?
SQL correction:
SELECT CountryId, CountryName FROM countries WHERE CountryId IN (   SELECT DISTINCT countries.CountryId   FROM countries   JOIN car_makers ON car_makers.Country = countries.CountryId   JOIN model_list ON model_list.Maker = car_makers.Id   JOIN car_names ON car_names.Model = model_list.Model   WHERE car_names.Make = 'fiat' OR         (SELECT COUNT(DISTINCT car_makers.Id) FROM car_makers WHERE car_makers.Country = countries.CountryId) > 3 )
entities correction:
SELECT CountryId, CountryName  FROM countries  WHERE CountryId IN (   SELECT DISTINCT countries.CountryId    FROM countries    JOIN car_makers ON car_makers.Country = countries.CountryId    JOIN model_list ON model_list.Maker = car_makers.Id    JOIN car_names ON car_names.Model = model_list.Model    WHERE car_names.Make = 'fiat' OR      (SELECT COUNT(DISTINCT car_makers.Id) FROM car_makers WHERE car_makers.Country = countries.CountryId) > 3 )

index is 178
select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';
What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?
SQL correction:
SELECT SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId WHERE car_makers.Id > 3 OR car_names.Model = 'fiat'
entities correction:
SELECT countries.CountryId, countries.CountryName  FROM countries  JOIN car_makers ON countries.CountryId = car_makers.Country  JOIN model_list ON car_makers.Id = model_list.Maker  JOIN car_names ON model_list.ModelId = car_names.MakeId  WHERE car_makers.Id > 3 OR car_names.Model = 'fiat'

index is 179
SELECT Country FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
Which country does Airline "JetBlue Airways" belong to?
SQL correction:
SELECT SELECT airlines.Country FROM airlines WHERE airlines.Airline = 'JetBlue Airways'
entities correction:
SELECT airlines.Country FROM airlines WHERE airlines.Airline = 'JetBlue Airways'

index is 180
SELECT Country FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
What country is Jetblue Airways affiliated with?
SQL correction:
SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways'
entities correction:
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'

index is 181
SELECT Abbreviation FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
What is the abbreviation of Airline "JetBlue Airways"?
SQL correction:
SELECT Abbreviation  FROM airlines  WHERE Airline = 'JetBlue Airways'
entities correction:
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'

index is 182
SELECT Abbreviation FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
Which abbreviation corresponds to Jetblue Airways?
SQL correction:
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways'
entities correction:
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'

index is 183
SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  "USA"
List all airline names and their abbreviations in "USA".
SQL correction:
SELECT T1.Airline, T1.Abbreviation  FROM airlines AS T1  JOIN flights AS T2 ON T2.Airline = T1.Airline  JOIN airports AS T3 ON T2.SourceAirport = T3.AirportCode  WHERE T3.Country = 'USA'
entities correction:
SELECT T1.Airline, T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'USA'

index is 184
SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  "USA"
What are the airline names and abbreviations for airlines in the USA?
SQL correction:
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'
entities correction:
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'United States'

index is 185
SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  "Anthony"
List the airport code and name in the city of Anthony.
SQL correction:
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'
entities correction:
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'

index is 186
SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  "Anthony"
Give the airport code and airport name corresonding to the city Anthony.
SQL correction:
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'
entities correction:
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'

index is 187
SELECT count(*) FROM AIRLINES
How many airlines do we have?
SQL correction:
SELECT COUNT(*) FROM airlines
original correction:
SELECT COUNT(*) FROM airlines

index is 188
SELECT count(*) FROM AIRLINES
What is the total number of airlines?
SQL correction:
SELECT COUNT(*) FROM airlines
original correction:
SELECT COUNT(*) FROM airlines

index is 189
SELECT count(*) FROM AIRPORTS
How many airports do we have?
SQL correction:
SELECT COUNT(*) FROM airports
original correction:
SELECT COUNT(*) FROM airports

index is 190
SELECT count(*) FROM AIRPORTS
Return the number of  airports.
SQL correction:
SELECT COUNT(*) FROM airports
original correction:
SELECT COUNT(*) FROM airports

index is 191
SELECT count(*) FROM FLIGHTS
How many flights do we have?
SQL correction:
SELECT COUNT(*) FROM flights
original correction:
SELECT COUNT(*) FROM flights

index is 192
SELECT count(*) FROM FLIGHTS
Return the number of flights.
SQL correction:
SELECT COUNT(*) FROM flights
original correction:
SELECT COUNT(*) FROM flights

index is 193
SELECT Airline FROM AIRLINES WHERE Abbreviation  =  "UAL"
Which airline has abbreviation 'UAL'?
SQL correction:
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
entities correction:
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'

index is 194
SELECT Airline FROM AIRLINES WHERE Abbreviation  =  "UAL"
Give the airline with abbreviation 'UAL'.
SQL correction:
SELECT Airline  FROM airlines  WHERE Abbreviation = 'UAL'
entities correction:
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'

index is 195
SELECT count(*) FROM AIRLINES WHERE Country  =  "USA"
How many airlines are from USA?
SQL correction:
SELECT COUNT(DISTINCT Airline) FROM airlines WHERE Country = 'USA'
entities correction:
SELECT COUNT(DISTINCT Airline) FROM airlines WHERE Country = 'United States'

index is 196
SELECT count(*) FROM AIRLINES WHERE Country  =  "USA"
Return the number of airlines in the USA.
SQL correction:
SELECT COUNT(uid) FROM airlines WHERE Country = 'USA'
entities correction:
SELECT COUNT(*) FROM airlines WHERE Country = 'United States'

index is 197
SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"
Which city and country is the Alton airport at?
SQL correction:
SELECT City, Country FROM airports WHERE AirportName = 'Alton'
entities correction:
SELECT City, Country FROM airports WHERE AirportName = 'Alton' AND AirportCode = 'Alton'

index is 198
SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"
Give the city and country for the Alton airport.
SQL correction:
SELECT City, Country FROM airports WHERE AirportName = 'Alton';
entities correction:
SELECT City, Country FROM airports WHERE AirportName = 'Alton' AND City = 'Alton';

index is 199
SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  "AKO"
What is the airport name for airport 'AKO'?
SQL correction:
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
entities correction:
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'

index is 200
SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  "AKO"
Return the name of the airport with code 'AKO'.
SQL correction:
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
entities correction:
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'

index is 201
SELECT AirportName FROM AIRPORTS WHERE City = "Aberdeen"
What are airport names at City 'Aberdeen'?
SQL correction:
SELECT AirportName FROM airports WHERE City = 'Aberdeen'
entities correction:
SELECT AirportName FROM airports WHERE City = 'Aberdeen'

index is 202
SELECT AirportName FROM AIRPORTS WHERE City = "Aberdeen"
What are the names of airports in Aberdeen?
SQL correction:
SELECT AirportName FROM airports WHERE City = 'Aberdeen'
entities correction:
SELECT AirportName FROM airports WHERE City = 'Aberdeen'

index is 203
SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  "APG"
How many flights depart from 'APG'?
SQL correction:
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'
entities correction:
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'

index is 204
SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  "APG"
Count the number of flights departing from 'APG'.
SQL correction:
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.AirportCode = 'APG'
entities correction:
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'APG' AND flights.SourceAirport = 'APG'

index is 205
SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"
How many flights have destination ATO?
SQL correction:
SELECT count(*) FROM flights WHERE DestAirport = 'ATO'
entities correction:
SELECT count(*) FROM flights WHERE flights.DestAirport = 'ATO'

index is 206
SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"
Count the number of flights into ATO.
SQL correction:
SELECT count(*)  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.AirportName = 'ATO'
entities correction:
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'ATO'

index is 207
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
How many flights depart from City Aberdeen?
SQL correction:
SELECT SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
entities correction:
SELECT COUNT(*) FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen';

index is 208
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Return the number of flights departing from Aberdeen.
SQL correction:
SELECT COUNT(flights.FlightNo) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
entities correction:
SELECT COUNT(flights.FlightNo)  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen' AND flights.DestAirport != airports.AirportCode

index is 209
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
How many flights arriving in Aberdeen city?
SQL correction:
SELECT COUNT(*) FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen'
entities correction:
SELECT COUNT(*) FROM flights   JOIN airports ON flights.DestAirport = airports.AirportCode   JOIN cities ON airports.City = cities.CityName   WHERE cities.CityName = 'Aberdeen'

index is 210
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Return the number of flights arriving in Aberdeen.
SQL correction:
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
entities correction:
SELECT COUNT(*) FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen' AND flights.DestAirport IN  (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')

index is 211
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"
How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?
SQL correction:
SELECT COUNT(*) FROM flights  JOIN airports AS A1 ON flights.SourceAirport = A1.AirportCode  JOIN airports AS A2 ON flights.DestAirport = A2.AirportCode  WHERE A1.City = 'Aberdeen' AND A2.City = 'Ashley'
entities correction:
SELECT COUNT(*) FROM flights   JOIN airports AS A1 ON flights.SourceAirport = A1.AirportCode   JOIN airports AS A2 ON flights.DestAirport = A2.AirportCode   WHERE A1.City = 'Aberdeen' AND A2.City = 'Ashley'

index is 212
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"
How many flights fly from Aberdeen to Ashley?
SQL correction:
SELECT COUNT(*) FROM flights  JOIN airports AS A1 ON flights.SourceAirport = A1.AirportCode  JOIN airports AS A2 ON flights.DestAirport = A2.AirportCode  WHERE A1.City = 'Aberdeen'  AND A2.City = 'Ashley'
entities correction:
SELECT COUNT(*) FROM flights   JOIN airports AS A1 ON flights.SourceAirport = A1.AirportCode   JOIN airports AS A2 ON flights.DestAirport = A2.AirportCode   WHERE A1.City = 'Aberdeen'   AND A2.City = 'Ashley';

index is 213
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"
How many flights does airline 'JetBlue Airways' have?
SQL correction:
SELECT COUNT(FlightNo) FROM flights WHERE Airline = 'JetBlue Airways'
entities correction:
SELECT COUNT(FlightNo) FROM flights WHERE Airline = 'JetBlue Airways'

index is 214
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"
Give the number of Jetblue Airways flights.
SQL correction:
SELECT COUNT(FlightNo) FROM flights WHERE Airline IN (SELECT uid FROM airlines WHERE Airline = 'Jetblue Airways')
entities correction:
SELECT COUNT(FlightNo) FROM flights WHERE Airline IN (SELECT Airline FROM airlines WHERE Airline = 'JetBlue Airways')

index is 215
SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"
How many 'United Airlines' flights go to Airport 'ASY'?
SQL correction:
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE flights.Airline = 'United Airlines' AND airports.AirportCode = 'ASY'
entities correction:
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE flights.Airline = 'United Airlines'  AND airports.AirportCode = 'ASY' AND flights.Airline = 'United Airlines' AND airports.AirportCode = 'ASY'

index is 216
SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"
Count the number of United Airlines flights arriving in ASY Airport.
SQL correction:
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Abbreviation = 'United Airlines' AND airports.AirportCode = 'ASY'
entities correction:
SELECT COUNT(*) FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  JOIN airlines ON flights.Airline = airlines.uid  WHERE airlines.Airline = 'UAL'  AND airports.AirportCode = 'ASY'

index is 217
SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"
How many 'United Airlines' flights depart from Airport 'AHD'?
SQL correction:
SELECT COUNT(*) FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  JOIN airlines ON flights.Airline = airlines.Abbreviation  WHERE airlines.Airline = 'United Airlines'  AND airports.AirportCode = 'AHD'
entities correction:
SELECT COUNT(*)  FROM flights   JOIN airports ON flights.SourceAirport = airports.AirportCode   JOIN airlines ON flights.Airline = airlines.Airline  WHERE airlines.Airline = 'United Airlines'  AND airports.AirportCode = 'AHD'

index is 218
SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"
Return the number of United Airlines flights leaving from AHD Airport.
SQL correction:
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airlines.Airline = 'United'  AND airports.AirportCode = 'AHD' AND airlines.Airline = 'United' AND airports.AirportCode = 'AHD'
entities correction:
SELECT COUNT(*) FROM flights  JOIN airlines ON flights.Airline = airlines.Abbreviation  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airlines.Airline = 'United Airlines'   AND airports.AirportCode = 'AHD'

index is 219
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"
How many United Airlines flights go to City 'Aberdeen'?
SQL correction:
SELECT COUNT(flights.FlightNo) FROM flights  JOIN airlines ON flights.Airline = airlines.Abbreviation  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen'
entities correction:
SELECT COUNT(flights.FlightNo) FROM flights   JOIN airlines ON flights.Airline = airlines.Airline   JOIN airports ON flights.DestAirport = airports.AirportCode   WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen'

index is 220
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"
Count the number of United Airlines flights that arrive in Aberdeen.
SQL correction:
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode JOIN airlines ON airlines.Abbreviation = flights.Airline WHERE airlines.Airline = 'United Airlines'  AND airports.AirportName = 'Aberdeen'
entities correction:
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  JOIN airlines ON airlines.Airline = flights.Airline  WHERE airlines.Airline = 'United Airlines'  AND airports.AirportName = 'Aberdeen'

index is 221
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
Which city has most number of arriving flights?
SQL correction:
SELECT airports.City  FROM airports  JOIN flights ON flights.DestAirport = airports.AirportCode  GROUP BY airports.City  ORDER BY COUNT(flights.DestAirport) DESC  LIMIT 1
original correction:
SELECT airports.City  FROM airports  JOIN flights ON flights.DestAirport = airports.AirportCode  GROUP BY airports.City  ORDER BY COUNT(flights.DestAirport) DESC  LIMIT 1

index is 222
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
Which city has the most frequent destination airport?
SQL correction:
SELECT airports.City  FROM airports  JOIN flights ON airports.AirportCode = flights.DestAirport  GROUP BY airports.City  ORDER BY COUNT(*) DESC  LIMIT 1
original correction:
SELECT airports.City  FROM airports  JOIN flights ON airports.AirportCode = flights.DestAirport  GROUP BY airports.City  ORDER BY COUNT(*) DESC  LIMIT 1

index is 223
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
Which city has most number of departing flights?
SQL correction:
SELECT airports.City, COUNT(*) AS departures  FROM airports  JOIN flights ON airports.AirportCode = flights.SourceAirport  GROUP BY airports.City  ORDER BY departures DESC  LIMIT 1
original correction:
SELECT airports.City, COUNT(*) AS departures  FROM airports  JOIN flights ON airports.AirportCode = flights.SourceAirport  GROUP BY airports.City  ORDER BY departures DESC  LIMIT 1

index is 224
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
Which city is the most frequent source airport?
SQL correction:
SELECT airports.City FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1
original correction:
SELECT airports.City FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1

index is 225
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
What is the code of airport that has the highest number of flights?
SQL correction:
SELECT airports.AirportCode FROM airports JOIN flights ON flights.SourceAirport = airports.AirportCode OR flights.DestAirport = airports.AirportCode GROUP BY airports.AirportCode ORDER BY COUNT(*) DESC LIMIT 1
original correction:
SELECT airports.AirportCode FROM airports JOIN flights ON flights.SourceAirport = airports.AirportCode OR flights.DestAirport = airports.AirportCode GROUP BY airports.AirportCode ORDER BY COUNT(*) DESC LIMIT 1

index is 226
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
What is the airport code of the airport with the most flights?
SQL correction:
SELECT AirportCode FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport OR airports.AirportCode = flights.SourceAirport GROUP BY airports.AirportCode ORDER BY COUNT(*) DESC LIMIT 1
original correction:
SELECT AirportCode FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport OR airports.AirportCode = flights.SourceAirport GROUP BY airports.AirportCode ORDER BY COUNT(*) DESC LIMIT 1

index is 227
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
What is the code of airport that has fewest number of flights?
SQL correction:
SELECT T1.AirportCode  FROM airports AS T1  LEFT JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport OR T1.AirportCode = T2.DestAirport  GROUP BY T1.AirportCode  ORDER BY COUNT(T2.FlightNo) ASC  LIMIT 1
original correction:
SELECT T1.AirportCode  FROM airports AS T1  LEFT JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport OR T1.AirportCode = T2.DestAirport  GROUP BY T1.AirportCode  ORDER BY COUNT(T2.FlightNo) ASC  LIMIT 1

index is 228
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
Give the code of the airport with the least flights.
SQL correction:
SELECT AirportCode FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport GROUP BY airports.AirportCode ORDER BY COUNT(flights.FlightNo) ASC LIMIT 1
original correction:
SELECT AirportCode FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport GROUP BY airports.AirportCode ORDER BY COUNT(flights.FlightNo) ASC LIMIT 1

index is 229
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1
Which airline has most number of flights?
SQL correction:
SELECT airlines.Airline, COUNT(*) AS num_flights FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY airlines.Airline ORDER BY num_flights DESC LIMIT 1
original correction:
SELECT airlines.Airline, COUNT(*) AS num_flights FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY airlines.Airline ORDER BY num_flights DESC LIMIT 1

index is 230
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1
What airline serves the most flights?
SQL correction:
SELECT T2.Airline  FROM flights AS T1  JOIN airlines AS T2 ON T1.Airline = T2.uid  GROUP BY T2.Airline  ORDER BY COUNT(*) DESC  LIMIT 1
original correction:
SELECT T2.Airline  FROM flights AS T1  JOIN airlines AS T2 ON T1.Airline = T2.uid  GROUP BY T2.Airline  ORDER BY COUNT(*) DESC  LIMIT 1

index is 231
SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1
Find the abbreviation and country of the airline that has fewest number of flights?
SQL correction:
SELECT Abbreviation, Country  FROM airlines  WHERE uid = (SELECT Airline               FROM flights               GROUP BY Airline               ORDER BY COUNT(*) ASC               LIMIT 1)
original correction:
SELECT Abbreviation, Country  FROM airlines  WHERE uid = (SELECT Airline               FROM flights               GROUP BY Airline               ORDER BY COUNT(*) ASC               LIMIT 1)

index is 232
SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1
What is the abbreviation of the airilne has the fewest flights and what country is it in?
SQL correction:
SELECT Abbreviation, Country FROM airlines GROUP BY Abbreviation, Country ORDER BY COUNT(*) ASC LIMIT 1
original correction:
SELECT Abbreviation, Country FROM airlines GROUP BY Abbreviation, Country ORDER BY COUNT(*) ASC LIMIT 1

index is 233
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"
What are airlines that have some flight departing from airport 'AHD'?
SQL correction:
SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD';
entities correction:
SELECT Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE flights.SourceAirport = 'AHD';

index is 234
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"
Which airlines have a flight with source airport AHD?
SQL correction:
SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD';
entities correction:
SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE flights.SourceAirport = 'AHD';

index is 235
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"
What are airlines that have flights arriving at airport 'AHD'?
SQL correction:
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD';
entities correction:
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD' AND flights.DestAirport = airports.AirportCode;

index is 236
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"
Which airlines have a flight with destination airport AHD?
SQL correction:
SELECT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.AirportCode = 'AHD'
entities correction:
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD';

index is 237
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
Find all airlines that have flights from both airports 'APG' and 'CVO'.
SQL correction:
SELECT Airline  FROM airlines  WHERE EXISTS (   SELECT *    FROM flights    WHERE airlines.uid = flights.Airline      AND flights.SourceAirport = 'APG' )  AND EXISTS (   SELECT *    FROM flights    WHERE airlines.uid = flights.Airline      AND flights.SourceAirport = 'CVO' )
entities correction:
SELECT Airline FROM airlines WHERE EXISTS (   SELECT *   FROM flights   WHERE airlines.uid = flights.Airline     AND flights.SourceAirport = 'APG' ) AND EXISTS (   SELECT *   FROM flights   WHERE airlines.uid = flights.Airline     AND flights.SourceAirport = 'CVO' )

index is 238
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
Which airlines have departing flights from both APG and CVO airports?
SQL correction:
SELECT Airline  FROM airlines  WHERE Airline IN (SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'APG')    AND Airline IN (SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'CVO')
entities correction:
SELECT Airline FROM airlines WHERE Airline IN (SELECT DISTINCT Airline FROM flights WHERE SourceAirport IN ('APG', 'CVO'))

index is 239
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"
Find all airlines that have flights from airport 'CVO' but not from 'APG'.
SQL correction:
SELECT Airline FROM airlines WHERE uid IN (     SELECT DISTINCT Airline     FROM flights     WHERE SourceAirport = 'CVO' ) AND uid NOT IN (     SELECT DISTINCT Airline     FROM flights     WHERE SourceAirport = 'APG'         AND DestAirport = flights.DestAirport )
entities correction:
SELECT Airline  FROM airlines  WHERE uid IN (      SELECT DISTINCT Airline      FROM flights      WHERE SourceAirport = 'CVO'  )  AND uid NOT IN (      SELECT DISTINCT Airline      FROM flights      WHERE SourceAirport = 'APG'      AND DestAirport = (         SELECT AirportCode          FROM airports          WHERE AirportCode = flights.DestAirport      ) )

index is 240
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"
Which airlines have departures from CVO but not from APG airports?
SQL correction:
SELECT Airline FROM airlines WHERE Airline NOT IN (   SELECT DISTINCT Airline   FROM flights   JOIN airports ON flights.SourceAirport = airports.AirportCode   WHERE airports.AirportCode = 'APG' ) AND Airline IN (   SELECT DISTINCT Airline   FROM flights   JOIN airports ON flights.SourceAirport = airports.AirportCode   WHERE airports.AirportCode = 'CVO' )
entities correction:
SELECT Airline  FROM airlines  WHERE Airline NOT IN (    SELECT DISTINCT Airline     FROM flights     JOIN airports ON flights.SourceAirport = airports.AirportCode     WHERE airports.AirportCode = 'APG' )  AND Airline IN (    SELECT DISTINCT Airline     FROM flights     JOIN airports ON flights.SourceAirport = airports.AirportCode     WHERE airports.AirportCode = 'CVO' )

index is 241
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10
Find all airlines that have at least 10 flights.
SQL correction:
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.Abbreviation = T2.Airline GROUP BY T1.Airline HAVING COUNT(*) >= 10
original correction:
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.Abbreviation = T2.Airline GROUP BY T1.Airline HAVING COUNT(*) >= 10

index is 242
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10
Which airlines have at least 10 flights?
SQL correction:
SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY Airline HAVING COUNT(*) >= 10
original correction:
SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY Airline HAVING COUNT(*) >= 10

index is 243
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200
Find all airlines that have fewer than 200 flights.
SQL correction:
SELECT Airline FROM airlines WHERE Abbreviation IN (     SELECT Airline     FROM flights     GROUP BY Airline     HAVING COUNT(*) < 200 )
original correction:
SELECT Airline FROM airlines WHERE Abbreviation IN (     SELECT Airline     FROM flights     GROUP BY Airline     HAVING COUNT(*) < 200 )

index is 244
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200
Which airlines have less than 200 flights?
SQL correction:
SELECT Airline FROM airlines WHERE EXISTS (     SELECT *     FROM flights     WHERE flights.Airline = airlines.Airline     GROUP BY flights.Airline     HAVING COUNT(*) < 200 )
original correction:
SELECT Airline FROM airlines WHERE EXISTS (     SELECT *     FROM flights     WHERE flights.Airline = airlines.Airline     GROUP BY flights.Airline     HAVING COUNT(*) < 200 )

index is 245
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"
What are flight numbers of Airline "United Airlines"?
SQL correction:
SELECT FlightNo FROM flights WHERE Airline = 'United Airlines'
entities correction:
SELECT FlightNo FROM flights WHERE Airline = 'United Airlines'

index is 246
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"
Which flight numbers correspond to United Airlines flights?
SQL correction:
SELECT FlightNo  FROM flights  WHERE Airline = (SELECT uid FROM airlines WHERE Abbreviation = 'United')
entities correction:
SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Abbreviation = 'UAL')

index is 247
SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"
What are flight numbers of flights departing from Airport "APG"?
SQL correction:
SELECT flights.FlightNo  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.AirportCode = 'APG'
entities correction:
SELECT flights.FlightNo  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.AirportCode = 'APG'

index is 248
SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"
Give the flight numbers of flights leaving from APG.
SQL correction:
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'
entities correction:
SELECT FlightNo  FROM flights  WHERE SourceAirport = 'APG'

index is 249
SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"
What are flight numbers of flights arriving at Airport "APG"?
SQL correction:
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG'
entities correction:
SELECT flights.FlightNo  FROM flights  JOIN airports  ON flights.DestAirport = airports.AirportCode  WHERE airports.AirportCode = 'APG'

index is 250
SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"
Give the flight numbers of flights landing at APG.
SQL correction:
SELECT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName = 'APG'
entities correction:
SELECT FlightNo  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.AirportName = 'Phillips AAF'

index is 251
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
What are flight numbers of flights departing from City "Aberdeen "?
SQL correction:
SELECT FlightNo  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen'
entities correction:
SELECT FlightNo  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen'

index is 252
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Give the flight numbers of flights leaving from Aberdeen.
SQL correction:
SELECT FlightNo  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen'
entities correction:
SELECT FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'

index is 253
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
What are flight numbers of flights arriving at City "Aberdeen"?
SQL correction:
SELECT flights.FlightNo FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen'
entities correction:
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'

index is 254
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Give the flight numbers of flights arriving in Aberdeen.
SQL correction:
SELECT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
entities correction:
SELECT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'

index is 255
SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"
Find the number of flights landing in the city of Aberdeen or Abilene.
SQL correction:
SELECT COUNT(*) FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen' OR airports.City = 'Abilene'
entities correction:
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City IN ('Aberdeen', 'Abilene')

index is 256
SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"
How many flights land in Aberdeen or Abilene?
SQL correction:
SELECT COUNT(*) FROM flights WHERE DestAirport IN ('Aberdeen', 'Abilene')
entities correction:
SELECT COUNT(*) FROM flights WHERE DestAirport IN ('ABR', 'ABI')

index is 257
SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
Find the name of airports which do not have any flight in and out.
SQL correction:
SELECT AirportName  FROM airports  LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport  WHERE flights.SourceAirport IS NULL AND flights.DestAirport IS NULL
original correction:
SELECT AirportName  FROM airports  LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport  WHERE flights.SourceAirport IS NULL AND flights.DestAirport IS NULL

index is 258
SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
Which airports do not have departing or arriving flights?
SQL correction:
SELECT AirportName  FROM airports  LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport  WHERE FlightNo IS NULL AND flights.SourceAirport IS NULL AND flights.DestAirport IS NULL
original correction:
SELECT AirportName  FROM airports  LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport  WHERE FlightNo IS NULL AND flights.SourceAirport IS NULL AND flights.DestAirport IS NULL

index is 259
SELECT count(*) FROM employee
How many employees are there?
SQL correction:
SELECT COUNT(*) FROM employee
original correction:
SELECT COUNT(*) FROM employee

index is 260
SELECT count(*) FROM employee
Count the number of employees
SQL correction:
SELECT COUNT(*) FROM employee
original correction:
SELECT COUNT(*) FROM employee

index is 261
SELECT name FROM employee ORDER BY age
Sort employee names by their age in ascending order.
SQL correction:
SELECT employee.Name FROM employee ORDER BY employee.Age ASC
original correction:
SELECT employee.Name FROM employee ORDER BY employee.Age ASC

index is 262
SELECT name FROM employee ORDER BY age
List the names of employees and sort in ascending order of age.
SQL correction:
SELECT employee.Name FROM employee ORDER BY employee.Age ASC
original correction:
SELECT employee.Name FROM employee ORDER BY employee.Age ASC

index is 263
SELECT count(*) ,  city FROM employee GROUP BY city
What is the number of employees from each city?
SQL correction:
SELECT COUNT(Employee_ID) AS Num_Employees, City  FROM employee  GROUP BY City
original correction:
SELECT COUNT(Employee_ID) AS Num_Employees, City  FROM employee  GROUP BY City

index is 264
SELECT count(*) ,  city FROM employee GROUP BY city
Count the number of employees for each city.
SQL correction:
SELECT COUNT(Employee_ID) AS Employee_Count, City  FROM employee  GROUP BY City
original correction:
SELECT COUNT(Employee_ID) AS Employee_Count, City  FROM employee  GROUP BY City

index is 265
SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1
Which cities do more than one employee under age 30 come from?
SQL correction:
SELECT employee.city FROM employee WHERE employee.age < 30 GROUP BY employee.city HAVING COUNT(DISTINCT employee.Employee_ID) > 1
original correction:
SELECT employee.city FROM employee WHERE employee.age < 30 GROUP BY employee.city HAVING COUNT(DISTINCT employee.Employee_ID) > 1

index is 266
SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1
Find the cities that have more than one employee under age 30.
SQL correction:
SELECT City  FROM employee  WHERE Age < 30  GROUP BY City  HAVING COUNT(*) > 1
original correction:
SELECT City  FROM employee  WHERE Age < 30  GROUP BY City  HAVING COUNT(*) > 1

index is 267
SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION
Find the number of shops in each location.
SQL correction:
SELECT COUNT(DISTINCT Shop_ID) AS num_shops, Location FROM shop GROUP BY Location
original correction:
SELECT COUNT(DISTINCT Shop_ID) AS num_shops, Location FROM shop GROUP BY Location

index is 268
SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION
How many shops are there in each location?
SQL correction:
SELECT COUNT(Shop_ID) AS Shop_Count, Location FROM shop GROUP BY Location
original correction:
SELECT COUNT(Shop_ID) AS Shop_Count, Location FROM shop GROUP BY Location

index is 269
SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1
Find the manager name and district of the shop whose number of products is the largest.
SQL correction:
SELECT Manager_name, District  FROM shop  WHERE Number_products = (SELECT MAX(Number_products) FROM shop)
original correction:
SELECT Manager_name, District  FROM shop  WHERE Number_products = (SELECT MAX(Number_products) FROM shop)

index is 270
SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1
What are the manager name and district of the shop that sells the largest number of products?
SQL correction:
SELECT shop.Manager_name, shop.District FROM shop ORDER BY shop.Number_products DESC LIMIT 1
original correction:
SELECT shop.Manager_name, shop.District FROM shop ORDER BY shop.Number_products DESC LIMIT 1

index is 271
SELECT min(Number_products) ,  max(Number_products) FROM shop
find the minimum and maximum number of products of all stores.
SQL correction:
SELECT MIN(Number_products) AS Min_Products, MAX(Number_products) AS Max_Products FROM shop
original correction:
SELECT MIN(Number_products) AS Min_Products, MAX(Number_products) AS Max_Products FROM shop

index is 272
SELECT min(Number_products) ,  max(Number_products) FROM shop
What are the minimum and maximum number of products across all the shops?
SQL correction:
SELECT MIN(Number_products), MAX(Number_products) FROM shop
original correction:
SELECT MIN(Number_products), MAX(Number_products) FROM shop

index is 273
SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC
Return the name, location and district of all shops in descending order of number of products.
SQL correction:
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC
original correction:
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC

index is 274
SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC
Sort all the shops by number products in descending order, and return the name, location and district of each shop.
SQL correction:
SELECT shop.Name, shop.Location, shop.District FROM shop ORDER BY shop.Number_products DESC
original correction:
SELECT shop.Name, shop.Location, shop.District FROM shop ORDER BY shop.Number_products DESC

index is 275
SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
Find the names of stores whose number products is more than the average number of products.
SQL correction:
SELECT shop.Name FROM shop WHERE Number_products > (   SELECT AVG(Number_products)   FROM shop )
original correction:
SELECT shop.Name FROM shop WHERE Number_products > (   SELECT AVG(Number_products)   FROM shop )

index is 276
SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
Which shops' number products is above the average? Give me the shop names.
SQL correction:
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)
original correction:
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)

index is 277
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1
find the name of employee who was awarded the most times in the evaluation.
SQL correction:
SELECT T1.Name  FROM employee AS T1  JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID  GROUP BY T1.Employee_ID  ORDER BY COUNT(*) DESC  LIMIT 1
original correction:
SELECT T1.Name  FROM employee AS T1  JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID  GROUP BY T1.Employee_ID  ORDER BY COUNT(*) DESC  LIMIT 1

index is 278
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1
Which employee received the most awards in evaluations? Give me the employee name.
SQL correction:
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.Employee_ID ORDER BY COUNT(evaluation.Employee_ID) DESC LIMIT 1;
original correction:
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.Employee_ID ORDER BY COUNT(evaluation.Employee_ID) DESC LIMIT 1;

index is 279
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1
Find the name of the employee who got the highest one time bonus.
SQL correction:
SELECT employee.Name  FROM employee  JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID  ORDER BY evaluation.Bonus DESC  LIMIT 1
original correction:
SELECT employee.Name  FROM employee  JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID  ORDER BY evaluation.Bonus DESC  LIMIT 1

index is 280
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1
Which employee received the biggest bonus? Give me the employee name.
SQL correction:
SELECT employee.Name FROM employee INNER JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1
original correction:
SELECT employee.Name FROM employee INNER JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1

index is 281
SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
Find the names of employees who never won any award in the evaluation.
SQL correction:
SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
original correction:
SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)

index is 282
SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
What are the names of the employees who never received any evaluation?
SQL correction:
SELECT Name  FROM employee  WHERE Employee_ID NOT IN (   SELECT Employee_ID    FROM evaluation )
original correction:
SELECT Name  FROM employee  WHERE Employee_ID NOT IN (   SELECT Employee_ID    FROM evaluation )

index is 283
SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1
What is the name of the shop that is hiring the largest number of employees?
SQL correction:
SELECT T1.Name  FROM shop AS T1  JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID  GROUP BY T1.Name  ORDER BY COUNT(*) DESC  LIMIT 1
original correction:
SELECT T1.Name  FROM shop AS T1  JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID  GROUP BY T1.Name  ORDER BY COUNT(*) DESC  LIMIT 1

index is 284
SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1
Which shop has the most employees? Give me the shop name.
SQL correction:
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1
original correction:
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1

index is 285
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
Find the name of the shops that do not hire any employee.
SQL correction:
SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT DISTINCT Shop_ID FROM hiring)
original correction:
SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT DISTINCT Shop_ID FROM hiring)

index is 286
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
Which shops run with no employees? Find the shop names
SQL correction:
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL  This query uses a LEFT JOIN to combine the "shop" table with the "hiring" table on the Shop_ID column. Then, it filters the results by selecting only those rows where the Employee_ID is NULL, indicating that the shop has no employees. Finally, it selects the Name column from the "shop" table to retrieve the shop names.
original correction:
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL  This query uses a LEFT JOIN to combine the "shop" table with the "hiring" table on the Shop_ID column. Then, it filters the results by selecting only those rows where the Employee_ID is NULL, indicating that the shop has no employees. Finally, it selects the Name column from the "shop" table to retrieve the shop names.

index is 287
SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name
Find the number of employees hired in each shop; show the shop name as well.
SQL correction:
SELECT T1.Name, COUNT(T2.Employee_ID) FROM shop AS T1 JOIN hiring AS T2 ON T2.Shop_ID = T1.Shop_ID GROUP BY T1.Shop_ID, T1.Name
original correction:
SELECT T1.Name, COUNT(T2.Employee_ID) FROM shop AS T1 JOIN hiring AS T2 ON T2.Shop_ID = T1.Shop_ID GROUP BY T1.Shop_ID, T1.Name

index is 288
SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name
For each shop, return the number of employees working there and the name of the shop.
SQL correction:
SELECT COUNT(T3.Employee_ID) AS Number_of_Employees, T1.Name AS Shop_Name FROM shop AS T1 JOIN hiring AS T2 ON T2.Shop_ID = T1.Shop_ID JOIN employee AS T3 ON T3.Employee_ID = T2.Employee_ID GROUP BY T1.Shop_ID
original correction:
SELECT COUNT(T3.Employee_ID) AS Number_of_Employees, T1.Name AS Shop_Name FROM shop AS T1 JOIN hiring AS T2 ON T2.Shop_ID = T1.Shop_ID JOIN employee AS T3 ON T3.Employee_ID = T2.Employee_ID GROUP BY T1.Shop_ID

index is 289
SELECT sum(bonus) FROM evaluation
What is total bonus given in all evaluations?
SQL correction:
SELECT SUM(Bonus) AS Total_Bonus FROM evaluation
original correction:
SELECT SUM(Bonus) AS Total_Bonus FROM evaluation

index is 290
SELECT sum(bonus) FROM evaluation
Find the total amount of bonus given in all the evaluations.
SQL correction:
SELECT SUM(Bonus) AS Total_Bonus FROM evaluation
original correction:
SELECT SUM(Bonus) AS Total_Bonus FROM evaluation

index is 291
SELECT * FROM hiring
Give me all the information about hiring.
SQL correction:
SELECT * FROM hiring
original correction:
SELECT * FROM hiring

index is 292
SELECT * FROM hiring
What is all the information about hiring?
SQL correction:
SELECT hiring.* FROM hiring;
original correction:
SELECT hiring.* FROM hiring;

index is 293
SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000
Which district has both stores with less than 3000 products and stores with more than 10000 products?
SQL correction:
SELECT District FROM shop WHERE Number_products < 3000 AND District IN (   SELECT District   FROM shop   WHERE Number_products > 10000 )
original correction:
SELECT District FROM shop WHERE Number_products < 3000 AND District IN (   SELECT District   FROM shop   WHERE Number_products > 10000 )

index is 294
SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000
Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.
SQL correction:
SELECT DISTINCT District  FROM shop WHERE District IN (   SELECT District FROM shop WHERE Number_products < 3000 )  AND District IN (   SELECT District FROM shop WHERE Number_products > 10000 );
original correction:
SELECT DISTINCT District  FROM shop WHERE District IN (   SELECT District FROM shop WHERE Number_products < 3000 )  AND District IN (   SELECT District FROM shop WHERE Number_products > 10000 );

index is 295
SELECT count(DISTINCT LOCATION) FROM shop
How many different store locations are there?
SQL correction:
SELECT COUNT(DISTINCT Location) FROM shop
original correction:
SELECT COUNT(DISTINCT Location) FROM shop

index is 296
SELECT count(DISTINCT LOCATION) FROM shop
Count the number of distinct store locations.
SQL correction:
SELECT COUNT(DISTINCT Location) AS StoreCount FROM shop
original correction:
SELECT COUNT(DISTINCT Location) AS StoreCount FROM shop

index is 297
SELECT count(*) FROM Documents
How many documents do we have?
SQL correction:
SELECT COUNT(*) FROM Documents
original correction:
SELECT COUNT(*) FROM Documents

index is 298
SELECT count(*) FROM Documents
Count the number of documents.
SQL correction:
SELECT COUNT(DISTINCT Document_ID) FROM Documents
original correction:
SELECT COUNT(DISTINCT Document_ID) FROM Documents

index is 299
SELECT document_id ,  document_name ,  document_description FROM Documents
List document IDs, document names, and document descriptions for all documents.
SQL correction:
SELECT Document_ID, Document_Name, Document_Description FROM Documents
original correction:
SELECT Document_ID, Document_Name, Document_Description FROM Documents

index is 300
SELECT document_id ,  document_name ,  document_description FROM Documents
What are the ids, names, and descriptions for all documents?
SQL correction:
SELECT Document_ID, Document_Name, Document_Description  FROM Documents
original correction:
SELECT Document_ID, Document_Name, Document_Description  FROM Documents

index is 301
SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE "%w%"
What is the document name and template id for document with description with the letter 'w' in it?
SQL correction:
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'
entities correction:
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'

index is 302
SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE "%w%"
Return the names and template ids for documents that contain the letter w in their description.
SQL correction:
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%';
entities correction:
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%';

index is 303
SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  "Robbin CV"
What is the document id, template id and description for document named "Robbin CV"?
SQL correction:
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'
entities correction:
SELECT Document_ID, Template_ID, Document_Description  FROM Documents  WHERE Document_Name = 'Robbin CV'

index is 304
SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  "Robbin CV"
Return the document id, template id, and description for the document with the name Robbin CV.
SQL correction:
SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description  FROM Documents  WHERE Documents.Document_Name = 'Robbin CV'
entities correction:
SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description   FROM Documents   WHERE Documents.Document_Name = 'Robbin CV'

index is 305
SELECT count(DISTINCT template_id) FROM Documents
How many different templates do all document use?
SQL correction:
SELECT COUNT(DISTINCT Documents.Template_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID
original correction:
SELECT COUNT(DISTINCT Documents.Template_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID

index is 306
SELECT count(DISTINCT template_id) FROM Documents
Count the number of different templates used for documents.
SQL correction:
SELECT COUNT(DISTINCT Documents.Template_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID
original correction:
SELECT COUNT(DISTINCT Documents.Template_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID

index is 307
SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'
How many documents are using the template with type code 'PPT'?
SQL correction:
SELECT count(DISTINCT Documents.Document_ID) FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  WHERE Templates.Template_Type_Code = 'PPT'
entities correction:
SELECT count(DISTINCT Documents.Document_ID) FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID   WHERE Templates.Template_Type_Code = 'PPT'

index is 308
SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'
Count the number of documents that use the PPT template type.
SQL correction:
SELECT COUNT(DISTINCT Documents.Document_ID)  FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'PPT'
entities correction:
SELECT COUNT(DISTINCT Documents.Document_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE LOWER(Ref_Template_Types.Template_Type_Description) = 'presentation'

index is 309
SELECT template_id ,  count(*) FROM Documents GROUP BY template_id
Show all template ids and number of documents using each template.
SQL correction:
SELECT T1.Template_ID, COUNT(DISTINCT T2.Document_ID) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID
original correction:
SELECT T1.Template_ID, COUNT(DISTINCT T2.Document_ID) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID

index is 310
SELECT template_id ,  count(*) FROM Documents GROUP BY template_id
What are all different template ids used for documents, and how many times were each of them used?
SQL correction:
SELECT Templates.Template_ID, COUNT(DISTINCT Documents.Document_ID)  FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID
original correction:
SELECT Templates.Template_ID, COUNT(DISTINCT Documents.Document_ID)  FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID

index is 311
SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1
What is the id and type code for the template used by the most documents?
SQL correction:
SELECT SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1;
original correction:
SELECT SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1;

index is 312
SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1
Return the id and type code of the template that is used for the greatest number of documents.
SQL correction:
SELECT SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1;
original correction:
SELECT SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1;

index is 313
SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1
Show ids for all templates that are used by more than one document.
SQL correction:
SELECT Templates.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1
original correction:
SELECT Templates.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1

index is 314
SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1
What are the template ids of any templates used in more than a single document?
SQL correction:
SELECT Templates.Template_ID  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1;
original correction:
SELECT Templates.Template_ID  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1;

index is 315
SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
Show ids for all templates not used by any document.
SQL correction:
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IS NULL
original correction:
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IS NULL

index is 316
SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
What are the ids for templates that are not used in any documents?
SQL correction:
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Template_ID IS NULL
original correction:
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Template_ID IS NULL

index is 317
SELECT count(*) FROM Templates
How many templates do we have?
SQL correction:
SELECT COUNT(Template_ID) AS Template_Count FROM Templates
original correction:
SELECT COUNT(Template_ID) AS Template_Count FROM Templates

index is 318
SELECT count(*) FROM Templates
Count the number of templates.
SQL correction:
SELECT COUNT(Template_ID) FROM Templates
original correction:
SELECT COUNT(Template_ID) FROM Templates

index is 319
SELECT template_id ,  version_number ,  template_type_code FROM Templates
Show template ids, version numbers, and template type codes for all templates.
SQL correction:
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates
original correction:
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates

index is 320
SELECT template_id ,  version_number ,  template_type_code FROM Templates
What are the ids, version numbers, and type codes for each template?
SQL correction:
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates
original correction:
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates

index is 321
SELECT DISTINCT template_type_code FROM Templates
Show all distinct template type codes for all templates.
SQL correction:
SELECT DISTINCT T2.Template_Type_Code  FROM Templates AS T2
original correction:
SELECT DISTINCT T2.Template_Type_Code  FROM Templates AS T2

index is 322
SELECT DISTINCT template_type_code FROM Templates
What are the different template type codes?
SQL correction:
SELECT Template_Type_Code  FROM Ref_Template_Types
original correction:
SELECT Template_Type_Code  FROM Ref_Template_Types

index is 323
SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"
What are the ids of templates with template type code PP or PPT?
SQL correction:
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code = 'PP' OR Ref_Template_Types.Template_Type_Code = 'PPT'
entities correction:
SELECT Templates.Template_ID  FROM Templates  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  WHERE Ref_Template_Types.Template_Type_Code IN ('PP', 'PPT')

index is 324
SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"
Return the ids of templates that have the code PP or PPT.
SQL correction:
SELECT Templates.Template_ID  FROM Templates  WHERE Templates.Template_Type_Code IN (   SELECT Ref_Template_Types.Template_Type_Code    FROM Ref_Template_Types    WHERE Ref_Template_Types.Template_Type_Code = 'PP' OR Ref_Template_Types.Template_Type_Code = 'PPT' )
entities correction:
SELECT Templates.Template_ID  FROM Templates   WHERE Templates.Template_Type_Code IN (    SELECT Ref_Template_Types.Template_Type_Code      FROM Ref_Template_Types      WHERE Ref_Template_Types.Template_Type_Code IN ('PP', 'PPT') )

index is 325
SELECT count(*) FROM Templates WHERE template_type_code  =  "CV"
How many templates have template type code CV?
SQL correction:
SELECT count(DISTINCT Template_ID) FROM Templates WHERE Template_Type_Code = 'CV'
entities correction:
SELECT count(DISTINCT Template_ID) FROM Templates WHERE Template_Type_Code IN ('CV')

index is 326
SELECT count(*) FROM Templates WHERE template_type_code  =  "CV"
Count the number of templates of the type CV.
SQL correction:
SELECT COUNT(Template_ID) FROM Templates WHERE Template_Type_Code = "CV"
entities correction:
SELECT COUNT(Template_ID) FROM Templates WHERE Template_Type_Code = 'CV'

index is 327
SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5
What is the version number and template type code for the template with version number later than 5?
SQL correction:
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5
original correction:
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5

index is 328
SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5
Return the version numbers and template type codes of templates with a version number greater than 5.
SQL correction:
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5
original correction:
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5

index is 329
SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code
Show all template type codes and number of templates for each.
SQL correction:
SELECT T1.Template_Type_Code, COUNT(T2.Template_ID)  FROM Ref_Template_Types AS T1  LEFT JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code
original correction:
SELECT T1.Template_Type_Code, COUNT(T2.Template_ID)  FROM Ref_Template_Types AS T1  LEFT JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code

index is 330
SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code
What are the different template type codes, and how many templates correspond to each?
SQL correction:
SELECT T1.Template_Type_Code, COUNT(T2.Template_ID)  FROM Ref_Template_Types AS T1  JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code
original correction:
SELECT T1.Template_Type_Code, COUNT(T2.Template_ID)  FROM Ref_Template_Types AS T1  JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code

index is 331
SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
Which template type code has most number of templates?
SQL correction:
SELECT T1.Template_Type_Code  FROM Ref_Template_Types AS T1  JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code  ORDER BY COUNT(T2.Template_ID) DESC  LIMIT 1
original correction:
SELECT T1.Template_Type_Code  FROM Ref_Template_Types AS T1  JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code  ORDER BY COUNT(T2.Template_ID) DESC  LIMIT 1

index is 332
SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
Return the type code of the template type that the most templates belong to.
SQL correction:
SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
original correction:
SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1

index is 333
SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
Show all template type codes with less than three templates.
SQL correction:
SELECT Template_Type_Code  FROM Ref_Template_Types  GROUP BY Template_Type_Code  HAVING COUNT(*) < 3;
original correction:
SELECT Template_Type_Code  FROM Ref_Template_Types  GROUP BY Template_Type_Code  HAVING COUNT(*) < 3;

index is 334
SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
What are the codes of template types that have fewer than 3 templates?
SQL correction:
SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_Type_Code HAVING COUNT(*) < 3
original correction:
SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_Type_Code HAVING COUNT(*) < 3

index is 335
SELECT min(Version_Number) ,  template_type_code FROM Templates
What the smallest version number and its template type code?
SQL correction:
SELECT MIN(Version_Number), Template_Type_Code  FROM Templates GROUP BY Template_Type_Code
original correction:
SELECT MIN(Version_Number), Template_Type_Code  FROM Templates GROUP BY Template_Type_Code

index is 336
SELECT min(Version_Number) ,  template_type_code FROM Templates
Return the lowest version number, along with its corresponding template type code.
SQL correction:
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Version_Number ASC LIMIT 1
original correction:
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Version_Number ASC LIMIT 1

index is 337
SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  "Data base"
What is the template type code of the template used by document with the name "Data base"?
SQL correction:
SELECT Ref_Template_Types.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Data base'
entities correction:
SELECT Ref_Template_Types.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Data base'

index is 338
SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  "Data base"
Return the template type code of the template that is used by a document named Data base.
SQL correction:
SELECT Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Data base'
entities correction:
SELECT Templates.Template_Type_Code  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  WHERE Documents.Document_Name = 'Data base'

index is 339
SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"
Show all document names using templates with template type code BK.
SQL correction:
SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code = 'BK'
entities correction:
SELECT Documents.Document_Name  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  WHERE Ref_Template_Types.Template_Type_Code = 'BK'

index is 340
SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"
What are the names of documents that use templates with the code BK?
SQL correction:
SELECT SELECT d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code WHERE rtt.Template_Type_Code = 'BK'
entities correction:
SELECT d.Document_Name  FROM Documents d  JOIN Templates t ON d.Template_ID = t.Template_ID  JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code  WHERE rtt.Template_Type_Code = 'BK'

index is 341
SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code
Show all template type codes and the number of documents using each type.
SQL correction:
SELECT T1.Template_Type_Code, COUNT(DISTINCT T3.Document_ID)  FROM Ref_Template_Types AS T1  LEFT JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  LEFT JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID  GROUP BY T1.Template_Type_Code
original correction:
SELECT T1.Template_Type_Code, COUNT(DISTINCT T3.Document_ID)  FROM Ref_Template_Types AS T1  LEFT JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  LEFT JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID  GROUP BY T1.Template_Type_Code

index is 342
SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code
What are the different template type codes, and how many documents use each type?
SQL correction:
SELECT T1.Template_Type_Code, COUNT(T2.Document_ID)  FROM Ref_Template_Types AS T1  LEFT JOIN Templates AS T3 ON T1.Template_Type_Code = T3.Template_Type_Code  LEFT JOIN Documents AS T2 ON T3.Template_ID = T2.Template_ID  GROUP BY T1.Template_Type_Code
original correction:
SELECT T1.Template_Type_Code, COUNT(T2.Document_ID)  FROM Ref_Template_Types AS T1  LEFT JOIN Templates AS T3 ON T1.Template_Type_Code = T3.Template_Type_Code  LEFT JOIN Documents AS T2 ON T3.Template_ID = T2.Template_ID  GROUP BY T1.Template_Type_Code

index is 343
SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1
Which template type code is used by most number of documents?
SQL correction:
SELECT T3.Template_Type_Code FROM Templates AS T3 JOIN Documents AS T2 ON T3.Template_ID = T2.Template_ID JOIN Ref_Template_Types AS T1 ON T3.Template_Type_Code = T1.Template_Type_Code GROUP BY T3.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
original correction:
SELECT T3.Template_Type_Code FROM Templates AS T3 JOIN Documents AS T2 ON T3.Template_ID = T2.Template_ID JOIN Ref_Template_Types AS T1 ON T3.Template_Type_Code = T1.Template_Type_Code GROUP BY T3.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1

index is 344
SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1
Return the code of the template type that is most commonly used in documents.
SQL correction:
SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 INNER JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code INNER JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID GROUP BY T1.Template_Type_Code ORDER BY COUNT(T3.Template_ID) DESC LIMIT 1
original correction:
SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 INNER JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code INNER JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID GROUP BY T1.Template_Type_Code ORDER BY COUNT(T3.Template_ID) DESC LIMIT 1

index is 345
SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
Show all template type codes that are not used by any document.
SQL correction:
SELECT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Code NOT IN (SELECT DISTINCT Template_Type_Code FROM Templates)
original correction:
SELECT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Code NOT IN (SELECT DISTINCT Template_Type_Code FROM Templates)

index is 346
SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
What are the codes of template types that are not used for any document?
SQL correction:
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IS NULL
original correction:
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IS NULL

index is 347
SELECT template_type_code ,  template_type_description FROM Ref_template_types
Show all template type codes and descriptions.
SQL correction:
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
original correction:
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types

index is 348
SELECT template_type_code ,  template_type_description FROM Ref_template_types
What are the type codes and descriptions for all template types?
SQL correction:
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
original correction:
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types

index is 349
SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"
What is the template type descriptions for template type code "AD".
SQL correction:
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'
entities correction:
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'

index is 350
SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"
Return the template type description of the template type with the code AD.
SQL correction:
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'
entities correction:
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'

index is 351
SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book"
What is the template type code for template type description "Book".
SQL correction:
SELECT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Description = 'Book'
entities correction:
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'

index is 352
SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book"
Return the type code of the template type with the description "Book".
SQL correction:
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'
entities correction:
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'

index is 353
SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID
What are the distinct template type descriptions for the templates ever used by any document?
SQL correction:
SELECT DISTINCT T1.Template_Type_Description  FROM Ref_Template_Types AS T1  JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID
original correction:
SELECT DISTINCT T1.Template_Type_Description  FROM Ref_Template_Types AS T1  JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID

index is 354
SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID
Return the different descriptions for templates that have been used in a document.
SQL correction:
SELECT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID GROUP BY T1.Template_Type_Description
original correction:
SELECT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID GROUP BY T1.Template_Type_Description

index is 355
SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  "Presentation"
What are the template ids with template type description "Presentation".
SQL correction:
SELECT
original correction:
SELECT

index is 356
SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  "Presentation"
Return the ids corresponding to templates with the description 'Presentation'.
SQL correction:
SELECT Templates.Template_ID  FROM Templates  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation'
entities correction:
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE LOWER(Ref_Template_Types.Template_Type_Description) = 'presentation'

index is 357
SELECT count(*) FROM Paragraphs
How many paragraphs in total?
SQL correction:
SELECT COUNT(*) FROM Paragraphs
original correction:
SELECT COUNT(*) FROM Paragraphs

index is 358
SELECT count(*) FROM Paragraphs
Count the number of paragraphs.
SQL correction:
SELECT COUNT(Paragraph_ID) FROM Paragraphs
original correction:
SELECT COUNT(Paragraph_ID) FROM Paragraphs

index is 359
SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'
How many paragraphs for the document with name 'Summer Show'?
SQL correction:
SELECT COUNT(Paragraphs.Paragraph_ID) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = 'Summer Show'
entities correction:
SELECT COUNT(Paragraphs.Paragraph_ID)  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  WHERE Documents.Document_Name = 'Summer Show'

index is 360
SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'
Count the number of paragraphs in the document named 'Summer Show'.
SQL correction:
SELECT COUNT(Paragraphs.Paragraph_ID)  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  WHERE Documents.Document_Name = 'Summer Show'
entities correction:
SELECT COUNT(Paragraphs.Paragraph_ID)   FROM Documents   JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID   WHERE Documents.Document_Name = 'Summer Show'

index is 361
select other_details from paragraphs where paragraph_text like 'korea'
Show paragraph details for paragraph with text 'Korea ' .
SQL correction:
SELECT Paragraphs.*  FROM Paragraphs  WHERE Paragraph_Text = 'Korea'
entities correction:
SELECT Paragraphs.*   FROM Paragraphs   WHERE Paragraph_Text = 'Korea';

index is 362
select other_details from paragraphs where paragraph_text like 'korea'
What are the details for the paragraph that includes the text 'Korea ' ?
SQL correction:
SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details  FROM Paragraphs  WHERE Paragraph_Text LIKE '%Korea%'
entities correction:
SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%';

index is 363
SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'
Show all paragraph ids and texts for the document with name 'Welcome to NY'.
SQL correction:
SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text  FROM Paragraphs  JOIN Documents ON Documents.Document_ID = Paragraphs.Document_ID  WHERE Documents.Document_Name = 'Welcome to NY'
entities correction:
SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = 'Welcome to NY'

index is 364
SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'
What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?
SQL correction:
SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text  FROM Paragraphs  JOIN Documents ON Documents.Document_ID = Paragraphs.Document_ID  WHERE Documents.Document_Name = 'Welcome to NY'
entities correction:
SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = 'Welcome to NY'

index is 365
SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Customer reviews"
Show all paragraph texts for the document "Customer reviews".
SQL correction:
SELECT Paragraphs.Paragraph_Text  FROM Paragraphs  JOIN Documents ON Documents.Document_ID = Paragraphs.Document_ID  WHERE Documents.Document_Name = 'Customer reviews'
entities correction:
SELECT Paragraphs.Paragraph_Text   FROM Paragraphs JOIN Documents ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = 'Customer reviews'

index is 366
SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Customer reviews"
What are the paragraph texts for the document with the name 'Customer reviews'?
SQL correction:
SELECT Paragraphs.Paragraph_Text  FROM Paragraphs  JOIN Documents ON Documents.Document_ID = Paragraphs.Document_ID  WHERE Documents.Document_Name = 'Customer reviews'
entities correction:
SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = 'Customer reviews'

index is 367
SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
Show all document ids and the number of paragraphs in each document. Order by document id.
SQL correction:
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID
original correction:
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID

index is 368
SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.
SQL correction:
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS num_paragraphs FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID
original correction:
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS num_paragraphs FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID

index is 369
SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id
Show all document ids, names and the number of paragraphs in each document.
SQL correction:
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name
original correction:
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name

index is 370
SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id
What are the ids and names of each document, as well as the number of paragraphs in each?
SQL correction:
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID)  FROM Documents  LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID, Documents.Document_Name
original correction:
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID)  FROM Documents  LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID, Documents.Document_Name

index is 371
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
List all document ids with at least two paragraphs.
SQL correction:
SELECT DISTINCT T1.Document_ID  FROM Documents AS T1  JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID  HAVING COUNT(T2.Paragraph_ID) >= 2
original correction:
SELECT DISTINCT T1.Document_ID  FROM Documents AS T1  JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID  HAVING COUNT(T2.Paragraph_ID) >= 2

index is 372
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
What are the ids of documents that have 2 or more paragraphs?
SQL correction:
SELECT Documents.Document_ID  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID  HAVING COUNT(Paragraphs.Paragraph_ID) >= 2
original correction:
SELECT Documents.Document_ID  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID  HAVING COUNT(Paragraphs.Paragraph_ID) >= 2

index is 373
SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1
What is the document id and name with greatest number of paragraphs?
SQL correction:
SELECT Document_ID, Document_Name FROM (     SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS paragraph_count     FROM Documents     JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID     GROUP BY Documents.Document_ID, Documents.Document_Name     ORDER BY paragraph_count DESC     LIMIT 1 ) AS subquery
original correction:
SELECT Document_ID, Document_Name FROM (     SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS paragraph_count     FROM Documents     JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID     GROUP BY Documents.Document_ID, Documents.Document_Name     ORDER BY paragraph_count DESC     LIMIT 1 ) AS subquery

index is 374
SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1
Return the id and name of the document with the most paragraphs.
SQL correction:
SELECT SELECT D.Document_ID, D.Document_Name FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID, D.Document_Name ORDER BY COUNT(P.Paragraph_ID) DESC LIMIT 1;
original correction:
SELECT SELECT D.Document_ID, D.Document_Name FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID, D.Document_Name ORDER BY COUNT(P.Paragraph_ID) DESC LIMIT 1;

index is 375
SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
What is the document id with least number of paragraphs?
SQL correction:
SELECT Documents.Document_ID FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY COUNT(Paragraphs.Paragraph_ID) ASC LIMIT 1
original correction:
SELECT Documents.Document_ID FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY COUNT(Paragraphs.Paragraph_ID) ASC LIMIT 1

index is 376
SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
Return the id of the document with the fewest paragraphs.
SQL correction:
SELECT Documents.Document_ID  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID  HAVING COUNT(Paragraphs.Paragraph_ID) = (   SELECT MIN(ParagraphCount)    FROM (     SELECT COUNT(Paragraphs.Paragraph_ID) AS ParagraphCount      FROM Paragraphs      GROUP BY Paragraphs.Document_ID   ) )
original correction:
SELECT Documents.Document_ID  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID  HAVING COUNT(Paragraphs.Paragraph_ID) = (   SELECT MIN(ParagraphCount)    FROM (     SELECT COUNT(Paragraphs.Paragraph_ID) AS ParagraphCount      FROM Paragraphs      GROUP BY Paragraphs.Document_ID   ) )

index is 377
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2
What is the document id with 1 to 2 paragraphs?
SQL correction:
SELECT Documents.Document_ID  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID  HAVING COUNT(Paragraphs.Paragraph_ID) >= 1 AND COUNT(Paragraphs.Paragraph_ID) <= 2
original correction:
SELECT Documents.Document_ID  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID  HAVING COUNT(Paragraphs.Paragraph_ID) >= 1 AND COUNT(Paragraphs.Paragraph_ID) <= 2

index is 378
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2
Give the ids of documents that have between one and two paragraphs.
SQL correction:
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Paragraphs.Document_ID = Documents.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(DISTINCT Paragraphs.Paragraph_ID) BETWEEN 1 AND 2;
original correction:
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Paragraphs.Document_ID = Documents.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(DISTINCT Paragraphs.Paragraph_ID) BETWEEN 1 AND 2;

index is 379
SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'
Show the document id with paragraph text 'Brazil' and 'Ireland'.
SQL correction:
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text IN ('Brazil', 'Ireland')
entities correction:
SELECT Documents.Document_ID  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  WHERE LOWER(Paragraphs.Paragraph_Text) IN ('brazil', 'ireland')

index is 380
SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'
What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?
SQL correction:
SELECT T1.Document_ID  FROM Documents AS T1  JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID  WHERE T2.Paragraph_Text IN ('Brazil', 'Ireland')  GROUP BY T1.Document_ID  HAVING COUNT(DISTINCT T2.Paragraph_Text) = 2
entities correction:
SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Paragraph_Text IN ('Brazil', 'Ireland') GROUP BY T1.Document_ID HAVING COUNT(DISTINCT T2.Paragraph_Text) = 2

index is 381
SELECT count(*) FROM teacher
How many teachers are there?
SQL correction:
SELECT COUNT(Teacher_ID) FROM teacher
original correction:
SELECT COUNT(Teacher_ID) FROM teacher

index is 382
SELECT count(*) FROM teacher
What is the total count of teachers?
SQL correction:
SELECT COUNT(DISTINCT Teacher_ID) FROM teacher
original correction:
SELECT COUNT(DISTINCT Teacher_ID) FROM teacher

index is 383
SELECT Name FROM teacher ORDER BY Age ASC
List the names of teachers in ascending order of age.
SQL correction:
SELECT Name FROM teacher ORDER BY Age ASC
original correction:
SELECT Name FROM teacher ORDER BY Age ASC

index is 384
SELECT Name FROM teacher ORDER BY Age ASC
What are the names of the teachers ordered by ascending age?
SQL correction:
SELECT Name FROM teacher ORDER BY Age ASC
original correction:
SELECT Name FROM teacher ORDER BY Age ASC

index is 385
SELECT Age ,  Hometown FROM teacher
What are the age and hometown of teachers?
SQL correction:
SELECT Age, Hometown FROM teacher
original correction:
SELECT Age, Hometown FROM teacher

index is 386
SELECT Age ,  Hometown FROM teacher
What is the age and hometown of every teacher?
SQL correction:
SELECT Age, Hometown FROM teacher
original correction:
SELECT Age, Hometown FROM teacher

index is 387
select name from teacher where hometown != "little lever urban district"
List the name of teachers whose hometown is not `` Little Lever Urban District '' .
SQL correction:
SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District'
entities correction:
SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District'

index is 388
select name from teacher where hometown != "little lever urban district"
What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?
SQL correction:
SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District'
entities correction:
SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District'

index is 389
SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33
Show the name of teachers aged either 32 or 33?
SQL correction:
SELECT teacher.Name FROM teacher WHERE teacher.Age IN (32, 33)
original correction:
SELECT teacher.Name FROM teacher WHERE teacher.Age IN (32, 33)

index is 390
SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33
What are the names of the teachers who are aged either 32 or 33?
SQL correction:
SELECT teacher.Name  FROM teacher  WHERE teacher.Age IN (32, 33)
original correction:
SELECT teacher.Name  FROM teacher  WHERE teacher.Age IN (32, 33)

index is 391
SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
What is the hometown of the youngest teacher?
SQL correction:
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher) ORDER BY Age ASC LIMIT 1
original correction:
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher) ORDER BY Age ASC LIMIT 1

index is 392
SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
Where is the youngest teacher from?
SQL correction:
SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
original correction:
SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1

index is 393
SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown
Show different hometown of teachers and the number of teachers from each hometown.
SQL correction:
SELECT Hometown, COUNT(DISTINCT Teacher_ID) FROM teacher GROUP BY Hometown
original correction:
SELECT Hometown, COUNT(DISTINCT Teacher_ID) FROM teacher GROUP BY Hometown

index is 394
SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown
For each hometown, how many teachers are there?
SQL correction:
SELECT Hometown, COUNT(Teacher_ID) FROM teacher GROUP BY Hometown
original correction:
SELECT Hometown, COUNT(Teacher_ID) FROM teacher GROUP BY Hometown

index is 395
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
List the most common hometown of teachers.
SQL correction:
SELECT Hometown, COUNT(*) AS count FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY Hometown ORDER BY count DESC LIMIT 1
original correction:
SELECT Hometown, COUNT(*) AS count FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY Hometown ORDER BY count DESC LIMIT 1

index is 396
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
What is the most commmon hometowns for teachers?
SQL correction:
SELECT Hometown, COUNT(*) AS count  FROM teacher  GROUP BY Hometown  ORDER BY count DESC  LIMIT 1
original correction:
SELECT Hometown, COUNT(*) AS count  FROM teacher  GROUP BY Hometown  ORDER BY count DESC  LIMIT 1

index is 397
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2
Show the hometowns shared by at least two teachers.
SQL correction:
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(DISTINCT Teacher_ID) >= 2
original correction:
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(DISTINCT Teacher_ID) >= 2

index is 398
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2
What are the towns from which at least two teachers come from?
SQL correction:
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(DISTINCT Teacher_ID) >= 2
original correction:
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(DISTINCT Teacher_ID) >= 2

index is 399
SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID
Show names of teachers and the courses they are arranged to teach.
SQL correction:
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course.Course_ID = course_arrange.Course_ID;
original correction:
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course.Course_ID = course_arrange.Course_ID;

index is 400
SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID
What is the name of each teacher and what course they teach?
SQL correction:
SELECT T1.Name AS Teacher_Name, T3.Course AS Course_Name  FROM teacher AS T1  JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID  JOIN course AS T3 ON T2.Course_ID = T3.Course_ID
original correction:
SELECT T1.Name AS Teacher_Name, T3.Course AS Course_Name  FROM teacher AS T1  JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID  JOIN course AS T3 ON T2.Course_ID = T3.Course_ID

index is 401
SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name
Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.
SQL correction:
SELECT T1.Name, T3.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID ORDER BY T1.Name ASC
original correction:
SELECT T1.Name, T3.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID ORDER BY T1.Name ASC

index is 402
SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name
What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?
SQL correction:
SELECT T1.Name, T3.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID ORDER BY T1.Name ASC
original correction:
SELECT T1.Name, T3.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID ORDER BY T1.Name ASC

index is 403
SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "Math"
Show the name of the teacher for the math course.
SQL correction:
SELECT T1.Name  FROM teacher AS T1  JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID  JOIN course AS T3 ON T2.Course_ID = T3.Course_ID  WHERE T3.Course = 'math'
entities correction:
SELECT T1.Name  FROM teacher AS T1   JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID   JOIN course AS T3 ON T2.Course_ID = T3.Course_ID   WHERE T3.Course = 'Math'

index is 404
SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "Math"
What are the names of the people who teach math courses?
SQL correction:
SELECT teacher.Name  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  JOIN course ON course.Course_ID = course_arrange.Course_ID  WHERE course.Course = 'math'
entities correction:
SELECT teacher.Name  FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course.Course_ID = course_arrange.Course_ID WHERE course.Course = 'Math'

index is 405
SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name
Show names of teachers and the number of courses they teach.
SQL correction:
SELECT teacher.Name, COUNT(DISTINCT course_arrange.Course_ID) AS num_courses FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name
original correction:
SELECT teacher.Name, COUNT(DISTINCT course_arrange.Course_ID) AS num_courses FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name

index is 406
SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name
What are the names of the teachers and how many courses do they teach?
SQL correction:
SELECT T1.Name, COUNT(T2.Course_ID)  FROM teacher AS T1  JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID  GROUP BY T1.Name
original correction:
SELECT T1.Name, COUNT(T2.Course_ID)  FROM teacher AS T1  JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID  GROUP BY T1.Name

index is 407
SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2
Show names of teachers that teach at least two courses.
SQL correction:
SELECT T1.Name  FROM teacher AS T1  JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID  GROUP BY T1.Teacher_ID  HAVING COUNT(DISTINCT T2.Course_ID) >= 2
original correction:
SELECT T1.Name  FROM teacher AS T1  JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID  GROUP BY T1.Teacher_ID  HAVING COUNT(DISTINCT T2.Course_ID) >= 2

index is 408
SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2
What are the names of the teachers who teach at least two courses?
SQL correction:
SELECT T1.Name  FROM teacher AS T1  JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID  GROUP BY T1.Name  HAVING COUNT(DISTINCT T2.Course_ID) >= 2
original correction:
SELECT T1.Name  FROM teacher AS T1  JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID  GROUP BY T1.Name  HAVING COUNT(DISTINCT T2.Course_ID) >= 2

index is 409
SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
List the names of teachers who have not been arranged to teach courses.
SQL correction:
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT DISTINCT Teacher_ID FROM course_arrange)
original correction:
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT DISTINCT Teacher_ID FROM course_arrange)

index is 410
SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
What are the names of the teachers whose courses have not been arranged?
SQL correction:
SELECT T1.Name FROM teacher AS T1 WHERE T1.Teacher_ID NOT IN (SELECT T2.Teacher_ID FROM course_arrange AS T2)
original correction:
SELECT T1.Name FROM teacher AS T1 WHERE T1.Teacher_ID NOT IN (SELECT T2.Teacher_ID FROM course_arrange AS T2)

index is 411
SELECT count(*) FROM visitor WHERE age  <  30
How many visitors below age 30 are there?
SQL correction:
SELECT COUNT(*) FROM visitor WHERE Age < 30
original correction:
SELECT COUNT(*) FROM visitor WHERE Age < 30

index is 412
SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC
Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.
SQL correction:
SELECT visitor.Name  FROM visitor  WHERE visitor.Level_of_membership > 4  ORDER BY visitor.Level_of_membership DESC
original correction:
SELECT visitor.Name  FROM visitor  WHERE visitor.Level_of_membership > 4  ORDER BY visitor.Level_of_membership DESC

index is 413
SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4
What is the average age of the visitors whose membership level is not higher than 4?
SQL correction:
SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4
original correction:
SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4

index is 414
SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC
Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.
SQL correction:
SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Age DESC
original correction:
SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Age DESC

index is 415
SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1
Find the id and name of the museum that has the most staff members?
SQL correction:
SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)
original correction:
SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)

index is 416
SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009
Find the average number of staff working for the museums that were open before 2009.
SQL correction:
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009
original correction:
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009

index is 417
SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'
What are the opening year and staff number of the museum named Plaza Museum?
SQL correction:
SELECT Open_Year, Num_of_Staff  FROM museum  WHERE Name = 'Plaza Museum'
entities correction:
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'

index is 418
SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)
find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.
SQL correction:
SELECT m.Name FROM museum m WHERE m.Num_of_Staff > (SELECT min(m2.Num_of_Staff) FROM museum m2 WHERE m2.Open_Year > 2010)
original correction:
SELECT m.Name FROM museum m WHERE m.Num_of_Staff > (SELECT min(m2.Num_of_Staff) FROM museum m2 WHERE m2.Open_Year > 2010)

index is 419
SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1
find the id, name and age for visitors who visited some museums more than once.
SQL correction:
SELECT visitor.ID, visitor.Name, visitor.Age FROM visitor WHERE visitor.ID IN (   SELECT visit.visitor_ID   FROM visit   GROUP BY visit.visitor_ID   HAVING COUNT(*) > 1 )
original correction:
SELECT visitor.ID, visitor.Name, visitor.Age FROM visitor WHERE visitor.ID IN (   SELECT visit.visitor_ID   FROM visit   GROUP BY visit.visitor_ID   HAVING COUNT(*) > 1 )

index is 420
SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1
What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?
SQL correction:
SELECT SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor JOIN visit ON visit.visitor_ID = visitor.ID GROUP BY visitor.ID, visitor.Name, visitor.Level_of_membership ORDER BY SUM(visit.Total_spent) DESC LIMIT 1;
original correction:
SELECT SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor JOIN visit ON visit.visitor_ID = visitor.ID GROUP BY visitor.ID, visitor.Name, visitor.Level_of_membership ORDER BY SUM(visit.Total_spent) DESC LIMIT 1;

index is 421
SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1
What are the id and name of the museum visited most times?
SQL correction:
SELECT museum.Museum_ID, museum.Name  FROM museum  JOIN visit ON museum.Museum_ID = visit.Museum_ID  GROUP BY museum.Museum_ID, museum.Name  ORDER BY COUNT(visit.Museum_ID) DESC  LIMIT 1
original correction:
SELECT museum.Museum_ID, museum.Name  FROM museum  JOIN visit ON museum.Museum_ID = visit.Museum_ID  GROUP BY museum.Museum_ID, museum.Name  ORDER BY COUNT(visit.Museum_ID) DESC  LIMIT 1

index is 422
SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)
What is the name of the museum that had no visitor yet?
SQL correction:
SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)
original correction:
SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)

index is 423
SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1
Find the name and age of the visitor who bought the most tickets at once.
SQL correction:
SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID ORDER BY visit.Num_of_Ticket DESC LIMIT 1
original correction:
SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID ORDER BY visit.Num_of_Ticket DESC LIMIT 1

index is 424
SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit
What are the average and maximum number of tickets bought in all visits?
SQL correction:
SELECT AVG(Num_of_Ticket) AS Average_Num_of_Tickets, MAX(Num_of_Ticket) AS Maximum_Num_of_Tickets FROM visit
original correction:
SELECT AVG(Num_of_Ticket) AS Average_Num_of_Tickets, MAX(Num_of_Ticket) AS Maximum_Num_of_Tickets FROM visit

index is 425
SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1
What is the total ticket expense of the visitors whose membership level is 1?
SQL correction:
SELECT SUM(T1.Total_spent) AS Total_Expense FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1
original correction:
SELECT SUM(T1.Total_spent) AS Total_Expense FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1

index is 426
SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011
What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?
SQL correction:
SELECT SELECT DISTINCT v.Name FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID JOIN museum m ON vi.Museum_ID = m.Museum_ID WHERE m.Open_Year < 2009 OR m.Open_Year > 2011 GROUP BY v.Name HAVING COUNT(DISTINCT m.Open_Year) > 1
original correction:
SELECT SELECT DISTINCT v.Name FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID JOIN museum m ON vi.Museum_ID = m.Museum_ID WHERE m.Open_Year < 2009 OR m.Open_Year > 2011 GROUP BY v.Name HAVING COUNT(DISTINCT m.Open_Year) > 1

index is 427
SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)
Find the number of visitors who did not visit any museum opened after 2010.
SQL correction:
SELECT count(*) FROM visitor WHERE ID NOT IN (SELECT visitor_ID FROM visit WHERE Museum_ID IN (SELECT Museum_ID FROM museum WHERE Open_Year > 2010));
original correction:
SELECT count(*) FROM visitor WHERE ID NOT IN (SELECT visitor_ID FROM visit WHERE Museum_ID IN (SELECT Museum_ID FROM museum WHERE Open_Year > 2010));

index is 428
SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008
How many museums were opened after 2013 or before 2008?
SQL correction:
SELECT COUNT(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008
original correction:
SELECT COUNT(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008

index is 429
SELECT count(*) FROM players
Find the total number of players.
SQL correction:
SELECT COUNT(*) FROM players
original correction:
SELECT COUNT(*) FROM players

index is 430
SELECT count(*) FROM players
How many players are there?
SQL correction:
SELECT COUNT(*) FROM players
original correction:
SELECT COUNT(*) FROM players

index is 431
SELECT count(*) FROM matches
Find the total number of matches.
SQL correction:
SELECT COUNT(*) FROM matches;
original correction:
SELECT COUNT(*) FROM matches;

index is 432
SELECT count(*) FROM matches
Count the number of matches.
SQL correction:
SELECT COUNT(*) FROM matches
original correction:
SELECT COUNT(*) FROM matches

index is 433
SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
List the first name and birth date of all players from the country with code USA.
SQL correction:
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
entities correction:
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'

index is 434
SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
What are the first names and birth dates of players from the USA?
SQL correction:
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA'
entities correction:
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA'

index is 435
SELECT avg(loser_age) ,  avg(winner_age) FROM matches
Find the average age of losers and winners of all matches.
SQL correction:
SELECT AVG(DATEDIFF(CURRENT_DATE(), players.birth_date) / 365) AS average_age FROM matches JOIN players ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id
original correction:
SELECT AVG(DATEDIFF(CURRENT_DATE(), players.birth_date) / 365) AS average_age FROM matches JOIN players ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id

index is 436
SELECT avg(loser_age) ,  avg(winner_age) FROM matches
What are the average ages of losers and winners across matches?
SQL correction:
SELECT AVG(DATEDIFF(CURRENT_DATE, loser_birth_date)) AS average_loser_age, AVG(DATEDIFF(CURRENT_DATE, winner_birth_date)) AS average_winner_age FROM matches JOIN players ON matches.loser_id = players.player_id OR matches.winner_id = players.player_id
original correction:
SELECT AVG(DATEDIFF(CURRENT_DATE, loser_birth_date)) AS average_loser_age, AVG(DATEDIFF(CURRENT_DATE, winner_birth_date)) AS average_winner_age FROM matches JOIN players ON matches.loser_id = players.player_id OR matches.winner_id = players.player_id

index is 437
SELECT avg(winner_rank) FROM matches
Find the average rank of winners in all matches.
SQL correction:
SELECT avg(rankings.ranking)  FROM rankings  JOIN matches ON rankings.player_id = matches.winner_id
original correction:
SELECT avg(rankings.ranking)  FROM rankings  JOIN matches ON rankings.player_id = matches.winner_id

index is 438
SELECT avg(winner_rank) FROM matches
What is the average rank for winners in all matches?
SQL correction:
SELECT AVG(winner_rank) AS average_rank FROM matches
original correction:
SELECT AVG(winner_rank) AS average_rank FROM matches

index is 439
SELECT min(loser_rank) FROM matches
Find the highest rank of losers in all matches.
SQL correction:
SELECT max(loser_rank) FROM matches
original correction:
SELECT max(loser_rank) FROM matches

index is 440
SELECT min(loser_rank) FROM matches
What is the best rank of losers across all matches?
SQL correction:
SELECT MAX(loser_rank) AS best_rank FROM matches
original correction:
SELECT MAX(loser_rank) AS best_rank FROM matches

index is 441
SELECT count(DISTINCT country_code) FROM players
find the number of distinct country codes of all players.
SQL correction:
SELECT COUNT(DISTINCT country_code) FROM players
original correction:
SELECT COUNT(DISTINCT country_code) FROM players

index is 442
SELECT count(DISTINCT country_code) FROM players
How many distinct countries do players come from?
SQL correction:
SELECT COUNT(DISTINCT country_code) FROM players
original correction:
SELECT COUNT(DISTINCT country_code) FROM players

index is 443
SELECT count(DISTINCT loser_name) FROM matches
Find the number of distinct name of losers.
SQL correction:
SELECT COUNT(DISTINCT T1.loser_name) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id
original correction:
SELECT COUNT(DISTINCT T1.loser_name) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id

index is 444
SELECT count(DISTINCT loser_name) FROM matches
How many different loser names are there?
SQL correction:
SELECT COUNT(DISTINCT loser_name) FROM matches
original correction:
SELECT COUNT(DISTINCT loser_name) FROM matches

index is 445
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10
Find the name of tourney that has more than 10 matches.
SQL correction:
SELECT tourney_name  FROM matches  GROUP BY tourney_name  HAVING COUNT(*) > 10
original correction:
SELECT tourney_name  FROM matches  GROUP BY tourney_name  HAVING COUNT(*) > 10

index is 446
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10
What are the names of tournaments that have more than 10 matches?
SQL correction:
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10
original correction:
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10

index is 447
SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016
List the names of all winners who played in both 2013 and 2016.
SQL correction:
SELECT P.first_name, P.last_name FROM players AS P INNER JOIN matches AS M ON P.player_id = M.winner_id WHERE M.year IN (2013, 2016) GROUP BY P.player_id HAVING COUNT(DISTINCT M.year) = 2
original correction:
SELECT P.first_name, P.last_name FROM players AS P INNER JOIN matches AS M ON P.player_id = M.winner_id WHERE M.year IN (2013, 2016) GROUP BY P.player_id HAVING COUNT(DISTINCT M.year) = 2

index is 448
SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016
What are the names of players who won in both 2013 and 2016?
SQL correction:
SELECT T1.first_name, T1.last_name  FROM players AS T1  JOIN matches AS T2 ON T1.player_id = T2.winner_id  WHERE T2.year = 2013  AND T1.player_id IN (     SELECT T3.player_id      FROM players AS T3      JOIN matches AS T4 ON T3.player_id = T4.winner_id      WHERE T4.year = 2016 )
original correction:
SELECT T1.first_name, T1.last_name  FROM players AS T1  JOIN matches AS T2 ON T1.player_id = T2.winner_id  WHERE T2.year = 2013  AND T1.player_id IN (     SELECT T3.player_id      FROM players AS T3      JOIN matches AS T4 ON T3.player_id = T4.winner_id      WHERE T4.year = 2016 )

index is 449
SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016
List the number of all matches who played in years of 2013 or 2016.
SQL correction:
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016
original correction:
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016

index is 450
SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016
How many matches were played in 2013 or 2016?
SQL correction:
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016
original correction:
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016

index is 451
SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'
What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?
SQL correction:
SELECT country_code, first_name  FROM players  WHERE player_id IN (   SELECT winner_id    FROM matches    WHERE tourney_name = 'WTA Championships'   AND player_id IN (     SELECT winner_id      FROM matches      WHERE tourney_name = 'Australian Open'   ) )
entities correction:
SELECT country_code, first_name FROM players WHERE player_id IN (   SELECT winner_id   FROM matches   WHERE tourney_name = 'WTA Championships'   AND winner_id IN (     SELECT winner_id     FROM matches     WHERE tourney_name = 'Australian Open'   ) )

index is 452
SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'
What are the first names and country codes for players who won both the WTA Championships and the Australian Open?
SQL correction:
SELECT players.first_name, players.country_code  FROM players INNER JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'WTA Championships' AND players.player_id IN      (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open')
entities correction:
SELECT players.first_name, players.country_code  FROM players  INNER JOIN matches ON players.player_id = matches.winner_id  WHERE matches.tourney_name = 'WTA Championships'  AND players.player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open')

index is 453
SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1
Find the first name and country code of the oldest player.
SQL correction:
SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date ASC LIMIT 1
original correction:
SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date ASC LIMIT 1

index is 454
SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1
What is the first name and country code of the oldest player?
SQL correction:
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1
original correction:
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1

index is 455
SELECT first_name ,  last_name FROM players ORDER BY birth_date
List the first and last name of all players in the order of birth date.
SQL correction:
SELECT first_name, last_name FROM players ORDER BY birth_date
original correction:
SELECT first_name, last_name FROM players ORDER BY birth_date

index is 456
SELECT first_name ,  last_name FROM players ORDER BY birth_date
What are the full names of all players, sorted by birth date?
SQL correction:
SELECT CONCAT(first_name, ' ', last_name) AS full_name  FROM players  ORDER BY birth_date
original correction:
SELECT CONCAT(first_name, ' ', last_name) AS full_name  FROM players  ORDER BY birth_date

index is 457
SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
List the first and last name of all players who are left / L hand in the order of birth date.
SQL correction:
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
entities correction:
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;

index is 458
SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
What are the full names of all left handed players, in order of birth date?
SQL correction:
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players WHERE hand = 'left' ORDER BY birth_date ASC
entities correction:
SELECT CONCAT(first_name, ' ', last_name) AS full_name  FROM players  WHERE hand = 'L'  ORDER BY birth_date ASC

index is 459
SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1
Find the first name and country code of the player who did the most number of tours.
SQL correction:
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(rankings.tours) DESC LIMIT 1
original correction:
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(rankings.tours) DESC LIMIT 1

index is 460
SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1
What is the first name and country code of the player with the most tours?
SQL correction:
SELECT players.first_name, players.country_code  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.player_id  ORDER BY COUNT(rankings.tours) DESC  LIMIT 1
original correction:
SELECT players.first_name, players.country_code  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.player_id  ORDER BY COUNT(rankings.tours) DESC  LIMIT 1

index is 461
SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
Find the year that has the most number of matches.
SQL correction:
SELECT matches.year FROM matches GROUP BY matches.year ORDER BY COUNT(*) DESC LIMIT 1
original correction:
SELECT matches.year FROM matches GROUP BY matches.year ORDER BY COUNT(*) DESC LIMIT 1

index is 462
SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
Which year had the most matches?
SQL correction:
SELECT year, COUNT(*) as match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1
original correction:
SELECT year, COUNT(*) as match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1

index is 463
SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1
Find the name and rank points of the winner who won the most times.
SQL correction:
SELECT players.first_name, players.last_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON matches.winner_id = players.player_id GROUP BY players.player_id ORDER BY COUNT(matches.match_num) DESC LIMIT 1
original correction:
SELECT players.first_name, players.last_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON matches.winner_id = players.player_id GROUP BY players.player_id ORDER BY COUNT(matches.match_num) DESC LIMIT 1

index is 464
SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1
What is the name of the winner who has won the most matches, and how many rank points does this player have?
SQL correction:
SELECT SELECT winner_name, SUM(winner_rank_points) AS total_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY winner_name ORDER BY total_rank_points DESC LIMIT 1;
original correction:
SELECT SELECT winner_name, SUM(winner_rank_points) AS total_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY winner_name ORDER BY total_rank_points DESC LIMIT 1;

index is 465
SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.
SQL correction:
SELECT players.first_name, players.last_name FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'Australian Open' GROUP BY players.player_id ORDER BY rankings.ranking_points DESC LIMIT 1
entities correction:
SELECT players.first_name, players.last_name FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'Australian Open' GROUP BY players.player_id HAVING MAX(rankings.ranking_points) LIMIT 1

index is 466
SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
What is the name of the winner with the most rank points who participated in the Australian Open tournament?
SQL correction:
SELECT players.first_name, players.last_name FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'Australian Open' GROUP BY players.player_id ORDER BY rankings.ranking_points DESC LIMIT 1
entities correction:
SELECT players.first_name, players.last_name  FROM players  JOIN rankings ON players.player_id = rankings.player_id  JOIN matches ON matches.winner_id = players.player_id  WHERE matches.tourney_name = 'Australian Open'  GROUP BY players.player_id  HAVING MAX(rankings.ranking_points)  ORDER BY rankings.ranking_points DESC  LIMIT 1

index is 467
SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1
find the names of loser and winner who played in the match with greatest number of minutes.
SQL correction:
SELECT T1.first_name AS loser_first_name, T1.last_name AS loser_last_name, T2.first_name AS winner_first_name, T2.last_name AS winner_last_name FROM matches AS M JOIN players AS T1 ON M.loser_id = T1.player_id JOIN players AS T2 ON M.winner_id = T2.player_id WHERE M.minutes = (SELECT MAX(minutes) FROM matches)
original correction:
SELECT T1.first_name AS loser_first_name, T1.last_name AS loser_last_name, T2.first_name AS winner_first_name, T2.last_name AS winner_last_name FROM matches AS M JOIN players AS T1 ON M.loser_id = T1.player_id JOIN players AS T2 ON M.winner_id = T2.player_id WHERE M.minutes = (SELECT MAX(minutes) FROM matches)

index is 468
SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1
What are the names of the winner and loser who played in the longest match?
SQL correction:
SELECT T1.first_name, T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id OR T1.player_id = T2.loser_id WHERE T2.minutes = (SELECT MAX(minutes) FROM matches)
original correction:
SELECT T1.first_name, T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id OR T1.player_id = T2.loser_id WHERE T2.minutes = (SELECT MAX(minutes) FROM matches)

index is 469
SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
Find the average ranking for each player and their first name.
SQL correction:
SELECT avg(rankings.ranking) AS average_ranking, players.first_name FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY players.first_name
original correction:
SELECT avg(rankings.ranking) AS average_ranking, players.first_name FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY players.first_name

index is 470
SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
What are the first names of all players, and their average rankings?
SQL correction:
SELECT players.first_name, AVG(rankings.ranking) AS average_ranking  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name
original correction:
SELECT players.first_name, AVG(rankings.ranking) AS average_ranking  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name

index is 471
SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
Find the total ranking points for each player and their first name.
SQL correction:
SELECT players.first_name, SUM(rankings.ranking_points)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name
original correction:
SELECT players.first_name, SUM(rankings.ranking_points)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name

index is 472
SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
What are the first names of all players, and their total ranking points?
SQL correction:
SELECT players.first_name, sum(rankings.ranking_points)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name
original correction:
SELECT players.first_name, sum(rankings.ranking_points)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name

index is 473
SELECT count(*) ,  country_code FROM players GROUP BY country_code
find the number of players for each country.
SQL correction:
SELECT country_code, COUNT(DISTINCT player_id) AS player_count FROM players GROUP BY country_code
original correction:
SELECT country_code, COUNT(DISTINCT player_id) AS player_count FROM players GROUP BY country_code

index is 474
SELECT count(*) ,  country_code FROM players GROUP BY country_code
How many players are from each country?
SQL correction:
SELECT country_code, COUNT(DISTINCT player_id) AS player_count FROM players GROUP BY country_code
original correction:
SELECT country_code, COUNT(DISTINCT player_id) AS player_count FROM players GROUP BY country_code

index is 475
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
find the code of the country where has the greatest number of players.
SQL correction:
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1
original correction:
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1

index is 476
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
What is the code of the country with the most players?
SQL correction:
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1
original correction:
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1

index is 477
SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50
Find the codes of countries that have more than 50 players.
SQL correction:
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(DISTINCT player_id) > 50
original correction:
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(DISTINCT player_id) > 50

index is 478
SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50
What are the codes of countries with more than 50 players?
SQL correction:
SELECT country_code  FROM players  GROUP BY country_code  HAVING COUNT(*) > 50
original correction:
SELECT country_code  FROM players  GROUP BY country_code  HAVING COUNT(*) > 50

index is 479
SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date
Find the total number of tours for each ranking date.
SQL correction:
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date
original correction:
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date

index is 480
SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date
How many total tours were there for each ranking date?
SQL correction:
SELECT ranking_date, COUNT(DISTINCT tours) FROM rankings GROUP BY ranking_date
original correction:
SELECT ranking_date, COUNT(DISTINCT tours) FROM rankings GROUP BY ranking_date

index is 481
SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR
Find the number of matches happened in each year.
SQL correction:
SELECT year, COUNT(*)  FROM matches  GROUP BY year
original correction:
SELECT year, COUNT(*)  FROM matches  GROUP BY year

index is 482
SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR
How many matches were played in each year?
SQL correction:
SELECT year, COUNT(*) AS match_count  FROM matches  GROUP BY year
original correction:
SELECT year, COUNT(*) AS match_count  FROM matches  GROUP BY year

index is 483
SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3
Find the name and rank of the 3 youngest winners across all matches.
SQL correction:
SELECT players.first_name, players.last_name, rankings.ranking FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON matches.winner_id = players.player_id ORDER BY players.birth_date ASC LIMIT 3
original correction:
SELECT players.first_name, players.last_name, rankings.ranking FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON matches.winner_id = players.player_id ORDER BY players.birth_date ASC LIMIT 3

index is 484
SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3
What are the names and ranks of the three youngest winners across all matches?
SQL correction:
SELECT SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY winner_age ASC LIMIT 3
original correction:
SELECT SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY winner_age ASC LIMIT 3

index is 485
SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'
How many different winners both participated in the WTA Championships and were left handed?
SQL correction:
SELECT COUNT(DISTINCT T1.winner_id) FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.tourney_name = 'WTA Championships' AND T2.hand = 'L'
entities correction:
SELECT COUNT(DISTINCT T1.winner_id) FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.tourney_name = 'WTA Championships' AND (T2.hand = 'L' OR T2.hand = 'l')

index is 486
SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'
Find the number of left handed winners who participated in the WTA Championships.
SQL correction:
SELECT COUNT(DISTINCT T1.player_id)  FROM players AS T1  JOIN matches AS T2 ON T1.player_id = T2.winner_id  WHERE T2.tourney_name = 'WTA Championships'  AND T1.hand = 'L'
entities correction:
SELECT COUNT(DISTINCT T1.player_id) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' AND T1.hand = 'L'

index is 487
SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
Find the first name, country code and birth date of the winner who has the highest rank points in all matches.
SQL correction:
SELECT T1.first_name, T1.country_code, T1.birth_date  FROM players AS T1  JOIN rankings AS T2 ON T1.player_id = T2.player_id  JOIN matches AS T3 ON T3.winner_id = T1.player_id  GROUP BY T1.player_id  ORDER BY T2.ranking_points DESC  LIMIT 1
original correction:
SELECT T1.first_name, T1.country_code, T1.birth_date  FROM players AS T1  JOIN rankings AS T2 ON T1.player_id = T2.player_id  JOIN matches AS T3 ON T3.winner_id = T1.player_id  GROUP BY T1.player_id  ORDER BY T2.ranking_points DESC  LIMIT 1

index is 488
SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
What is the first name, country code, and birth date of the player with the most winner rank points across all matches?
SQL correction:
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON matches.winner_id = players.player_id ORDER BY matches.winner_rank_points DESC LIMIT 1
original correction:
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON matches.winner_id = players.player_id ORDER BY matches.winner_rank_points DESC LIMIT 1

index is 489
SELECT count(*) ,  hand FROM players GROUP BY hand
Find the number of players for each hand type.
SQL correction:
SELECT hand, COUNT(*) AS num_players FROM players GROUP BY hand
original correction:
SELECT hand, COUNT(*) AS num_players FROM players GROUP BY hand

index is 490
SELECT count(*) ,  hand FROM players GROUP BY hand
How many players are there for each hand type?
SQL correction:
SELECT hand, COUNT(DISTINCT player_id) FROM players GROUP BY hand
original correction:
SELECT hand, COUNT(DISTINCT player_id) FROM players GROUP BY hand

index is 491
SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'
How many ships ended up being 'Captured'?
SQL correction:
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'
entities correction:
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'

index is 492
SELECT name ,  tonnage FROM ship ORDER BY name DESC
List the name and tonnage ordered by in descending alphaetical order for the names.
SQL correction:
SELECT name, tonnage FROM ship ORDER BY name DESC
original correction:
SELECT name, tonnage FROM ship ORDER BY name DESC

index is 493
SELECT name ,  date FROM battle
List the name, date and result of each battle.
SQL correction:
SELECT name, date, result FROM battle
original correction:
SELECT name, date, result FROM battle

index is 494
SELECT max(killed) ,  min(killed) FROM death
What is maximum and minimum death toll caused each time?
SQL correction:
SELECT MAX(death.killed), MIN(death.killed)  FROM death  JOIN ship ON death.caused_by_ship_id = ship.id
original correction:
SELECT MAX(death.killed), MIN(death.killed)  FROM death  JOIN ship ON death.caused_by_ship_id = ship.id

index is 495
SELECT avg(injured) FROM death
What is the average number of injuries caused each time?
SQL correction:
SELECT AVG(injured) FROM death
original correction:
SELECT AVG(injured) FROM death

index is 496
SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'
What are the death and injury situations caused by the ship with tonnage 't'?
SQL correction:
SELECT death.id, death.note, death.killed, death.injured, ship.tonnage FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't'
entities correction:
SELECT death.id, death.note, death.killed, death.injured  FROM death  JOIN ship ON death.caused_by_ship_id = ship.id  WHERE ship.tonnage = 't'

index is 497
SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'
What are the name and results of the battles when the bulgarian commander is not 'Boril'
SQL correction:
SELECT name, result  FROM battle  WHERE bulgarian_commander <> 'Boril'
entities correction:
SELECT name, result FROM battle WHERE bulgarian_commander <> 'Boril'

index is 498
SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'
What are the different ids and names of the battles that lost any 'Brig' type shipes?
SQL correction:
SELECT T1.id, T1.name  FROM battle AS T1  JOIN ship AS T2 ON T2.lost_in_battle = T1.id  WHERE T2.ship_type = 'Brig'
entities correction:
SELECT T1.id, T1.name  FROM battle AS T1  JOIN ship AS T2 ON T2.lost_in_battle = T1.id  WHERE T2.ship_type LIKE '%Brig%'

index is 499
SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10
What are the ids and names of the battles that led to more than 10 people killed in total.
SQL correction:
SELECT T1.id, T1.name  FROM battle AS T1  JOIN ship AS T2 ON T1.id = T2.lost_in_battle  JOIN death AS T3 ON T2.id = T3.caused_by_ship_id  WHERE T3.killed > 10  GROUP BY T1.id, T1.name
original correction:
SELECT T1.id, T1.name  FROM battle AS T1  JOIN ship AS T2 ON T1.id = T2.lost_in_battle  JOIN death AS T3 ON T2.id = T3.caused_by_ship_id  WHERE T3.killed > 10  GROUP BY T1.id, T1.name

index is 500
SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1
What is the ship id and name that caused most total injuries?
SQL correction:
SELECT ship.id, ship.name  FROM ship  JOIN death ON death.caused_by_ship_id = ship.id  GROUP BY ship.id, ship.name  ORDER BY SUM(death.injured) DESC  LIMIT 1
original correction:
SELECT ship.id, ship.name  FROM ship  JOIN death ON death.caused_by_ship_id = ship.id  GROUP BY ship.id, ship.name  ORDER BY SUM(death.injured) DESC  LIMIT 1

index is 501
SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'
What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?
SQL correction:
SELECT name  FROM battle  WHERE bulgarian_commander = 'Kaloyan'  AND latin_commander = 'Baldwin I'
entities correction:
SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'

index is 502
SELECT count(DISTINCT RESULT) FROM battle
How many different results are there for the battles?
SQL correction:
SELECT COUNT(DISTINCT result) AS result_count FROM battle
original correction:
SELECT COUNT(DISTINCT result) AS result_count FROM battle

index is 503
SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );
How many battles did not lose any ship with tonnage '225'?
SQL correction:
SELECT count(battle.id)  FROM battle  LEFT JOIN ship ON battle.id = ship.lost_in_battle  WHERE ship.tonnage != '225' OR ship.tonnage IS NULL AND ship.id IS NULL
entities correction:
SELECT count(battle.id) FROM battle LEFT JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.tonnage != '225' OR ship.tonnage IS NULL OR ship.id IS NULL

index is 504
SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'
List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'
SQL correction:
SELECT battle.name, battle.date  FROM battle  JOIN ship ON ship.lost_in_battle = battle.id  WHERE ship.name = 'Lettice' OR ship.name = 'HMS Atalanta'
entities correction:
SELECT battle.name, battle.date FROM battle JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.name IN ('Lettice', 'HMS Atalanta')

index is 505
SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'
Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.
SQL correction:
SELECT name, result, bulgarian_commander  FROM battle  WHERE id NOT IN (   SELECT lost_in_battle    FROM ship    WHERE location = 'English Channel' AND lost_in_battle IS NOT NULL )
entities correction:
SELECT name, result, bulgarian_commander  FROM battle  WHERE id NOT IN (     SELECT lost_in_battle      FROM ship      WHERE location = 'English Channel' AND lost_in_battle IS NOT NULL )

index is 506
SELECT note FROM death WHERE note LIKE '%East%'
What are the notes of the death events which has substring 'East'?
SQL correction:
SELECT note FROM death WHERE note LIKE '%East%'
entities correction:
SELECT note FROM death WHERE note LIKE '%East%'

index is 507
SELECT line_1 ,  line_2 FROM addresses
what are all the addresses including line 1 and line 2?
SQL correction:
SELECT line_1, line_2  FROM Addresses
original correction:
SELECT line_1, line_2  FROM Addresses

index is 508
SELECT line_1 ,  line_2 FROM addresses
What is the first and second line for all addresses?
SQL correction:
SELECT line_1, line_2 FROM Addresses
original correction:
SELECT line_1, line_2 FROM Addresses

index is 509
SELECT count(*) FROM Courses
How many courses in total are listed?
SQL correction:
SELECT COUNT(*) FROM Courses
original correction:
SELECT COUNT(*) FROM Courses

index is 510
SELECT count(*) FROM Courses
How many courses are there?
SQL correction:
SELECT COUNT(course_id) FROM Courses
original correction:
SELECT COUNT(course_id) FROM Courses

index is 511
SELECT course_description FROM Courses WHERE course_name  =  'math'
How is the math course described?
SQL correction:
SELECT course_description FROM Courses WHERE course_name = 'Math'
entities correction:
SELECT course_description FROM Courses WHERE course_name = 'math'

index is 512
SELECT course_description FROM Courses WHERE course_name  =  'math'
What are the descriptions for all the math courses?
SQL correction:
SELECT Courses.course_description  FROM Courses  WHERE Courses.course_name LIKE '%Math%'
entities correction:
SELECT Courses.course_description FROM Courses WHERE UPPER(Courses.course_name) LIKE '%MATH%'

index is 513
SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'
What is the zip code of the address in the city Port Chelsea?
SQL correction:
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
entities correction:
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'

index is 514
SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'
What is the zip code for Port Chelsea?
SQL correction:
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
entities correction:
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'

index is 515
SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1
Which department offers the most number of degrees? List department name and id.
SQL correction:
SELECT Departments.department_name, Departments.department_id  FROM Departments  JOIN Degree_Programs ON Degree_Programs.department_id = Departments.department_id GROUP BY Departments.department_id  ORDER BY COUNT(Degree_Programs.degree_program_id) DESC  LIMIT 1
original correction:
SELECT Departments.department_name, Departments.department_id  FROM Departments  JOIN Degree_Programs ON Degree_Programs.department_id = Departments.department_id GROUP BY Departments.department_id  ORDER BY COUNT(Degree_Programs.degree_program_id) DESC  LIMIT 1

index is 516
select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1
What is the name and id of the department with the most number of degrees ?
SQL correction:
SELECT department_name, department_id FROM Departments GROUP BY department_id HAVING count(*) = (   SELECT max(count_department_id)   FROM (     SELECT department_id, count(*) AS count_department_id     FROM Degree_Programs     GROUP BY department_id   ) AS subquery )
original correction:
SELECT department_name, department_id FROM Departments GROUP BY department_id HAVING count(*) = (   SELECT max(count_department_id)   FROM (     SELECT department_id, count(*) AS count_department_id     FROM Degree_Programs     GROUP BY department_id   ) AS subquery )

index is 517
SELECT count(DISTINCT department_id) FROM Degree_Programs
How many departments offer any degree?
SQL correction:
SELECT COUNT(DISTINCT T1.department_id) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id
original correction:
SELECT COUNT(DISTINCT T1.department_id) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id

index is 518
SELECT count(DISTINCT department_id) FROM Degree_Programs
How many different departments offer degrees?
SQL correction:
SELECT COUNT(DISTINCT T2.department_id) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id
original correction:
SELECT COUNT(DISTINCT T2.department_id) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id

index is 519
SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs
How many different degree names are offered?
SQL correction:
SELECT COUNT(DISTINCT degree_summary_name) AS count_degree_names FROM Degree_Programs
original correction:
SELECT COUNT(DISTINCT degree_summary_name) AS count_degree_names FROM Degree_Programs

index is 520
SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs
How many different degrees are offered?
SQL correction:
SELECT COUNT(DISTINCT degree_summary_name) AS degree_count FROM Degree_Programs
original correction:
SELECT COUNT(DISTINCT degree_summary_name) AS degree_count FROM Degree_Programs

index is 521
SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'
How many degrees does the engineering department offer?
SQL correction:
SELECT COUNT(*) FROM Degree_Programs WHERE department_id IN (SELECT department_id FROM Departments WHERE department_name = 'engineering')
entities correction:
SELECT COUNT(*) FROM Degree_Programs WHERE department_id IN (SELECT department_id FROM Departments WHERE department_name = 'engineer')

index is 522
SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'
How many degrees does the engineering department have?
SQL correction:
SELECT count(Degree_Programs.degree_program_id) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = 'engineering'
entities correction:
SELECT count(Degree_Programs.degree_program_id)  FROM Degree_Programs  JOIN Departments ON Degree_Programs.department_id = Departments.department_id  WHERE Departments.department_name = 'engineer'

index is 523
SELECT section_name ,  section_description FROM Sections
What are the names and descriptions of all the sections?
SQL correction:
SELECT section_name, section_description FROM Sections
original correction:
SELECT section_name, section_description FROM Sections

index is 524
SELECT section_name ,  section_description FROM Sections
What are the names and descriptions for all the sections?
SQL correction:
SELECT Sections.section_name, Sections.section_description FROM Sections JOIN Courses ON Sections.course_id = Courses.course_id
original correction:
SELECT Sections.section_name, Sections.section_description FROM Sections JOIN Courses ON Sections.course_id = Courses.course_id

index is 525
SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2
What are the names and id of courses having at most 2 sections?
SQL correction:
SELECT SELECT Courses.course_id, Courses.course_name FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_id, Courses.course_name HAVING COUNT(Sections.section_id) <= 2;
original correction:
SELECT SELECT Courses.course_id, Courses.course_name FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_id, Courses.course_name HAVING COUNT(Sections.section_id) <= 2;

index is 526
SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2
What are the names and ids of every course with less than 2 sections?
SQL correction:
SELECT Courses.course_name, Courses.course_id  FROM Courses  WHERE Courses.course_id IN      (SELECT Sections.course_id      FROM Sections      GROUP BY Sections.course_id      HAVING COUNT(*) < 2)
original correction:
SELECT Courses.course_name, Courses.course_id  FROM Courses  WHERE Courses.course_id IN      (SELECT Sections.course_id      FROM Sections      GROUP BY Sections.course_id      HAVING COUNT(*) < 2)

index is 527
SELECT section_name FROM Sections ORDER BY section_name DESC
List the section_name in reversed lexicographical order.
SQL correction:
SELECT section_name FROM Sections ORDER BY section_name DESC
original correction:
SELECT section_name FROM Sections ORDER BY section_name DESC

index is 528
SELECT section_name FROM Sections ORDER BY section_name DESC
What are the names of the sections in reverse alphabetical order?
SQL correction:
SELECT section_name  FROM Sections  ORDER BY section_name DESC
original correction:
SELECT section_name  FROM Sections  ORDER BY section_name DESC

index is 529
SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1
What is the semester which most student registered in? Show both the name and the id.
SQL correction:
SELECT T1.semester_id, T1.semester_name FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id, T1.semester_name ORDER BY COUNT(T2.student_enrolment_id) DESC LIMIT 1
original correction:
SELECT T1.semester_id, T1.semester_name FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id, T1.semester_name ORDER BY COUNT(T2.student_enrolment_id) DESC LIMIT 1

index is 530
SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1
For each semester, what is the name and id of the one with the most students registered?
SQL correction:
SELECT Semesters.semester_name, Semesters.semester_id  FROM Semesters  JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id  GROUP BY Semesters.semester_id  HAVING COUNT(*) = (     SELECT MAX(num_students)      FROM (         SELECT semester_id, COUNT(*) AS num_students          FROM Student_Enrolment          GROUP BY semester_id     ) AS counts ) ORDER BY Semesters.semester_id;
original correction:
SELECT Semesters.semester_name, Semesters.semester_id  FROM Semesters  JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id  GROUP BY Semesters.semester_id  HAVING COUNT(*) = (     SELECT MAX(num_students)      FROM (         SELECT semester_id, COUNT(*) AS num_students          FROM Student_Enrolment          GROUP BY semester_id     ) AS counts ) ORDER BY Semesters.semester_id;

index is 531
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
What is the description of the department whose name has the substring the computer?
SQL correction:
SELECT department_description  FROM Departments  WHERE department_name LIKE '%the computer%'
entities correction:
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'

index is 532
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
What is the department description for the one whose name has the word computer?
SQL correction:
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
entities correction:
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'

index is 533
SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.
SQL correction:
SELECT Students.first_name, Students.middle_name, Students.last_name, Students.student_id FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.first_name, Students.middle_name, Students.last_name, Students.student_id HAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) = 2 AND COUNT(DISTINCT Student_Enrolment.semester_id) = 1
original correction:
SELECT Students.first_name, Students.middle_name, Students.last_name, Students.student_id FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.first_name, Students.middle_name, Students.last_name, Students.student_id HAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) = 2 AND COUNT(DISTINCT Student_Enrolment.semester_id) = 1

index is 534
SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?
SQL correction:
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id WHERE Student_Enrolment.semester_id = 1 GROUP BY Students.student_id HAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) = 2
original correction:
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id WHERE Student_Enrolment.semester_id = 1 GROUP BY Students.student_id HAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) = 2

index is 535
SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'
Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.
SQL correction:
SELECT first_name, middle_name, last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelor';
entities correction:
SELECT first_name, middle_name, last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name IN ('Bachelor');

index is 536
SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'
What are the first, middle, and last names for everybody enrolled in a Bachelors program?
SQL correction:
SELECT first_name, middle_name, last_name  FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  WHERE Degree_Programs.degree_summary_name = 'Bachelors'
entities correction:
SELECT first_name, middle_name, last_name   FROM Students   JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id   JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id   WHERE Degree_Programs.degree_summary_name = 'Bachelor'

index is 537
SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1
Find the kind of program which most number of students are enrolled in?
SQL correction:
SELECT Degree_Programs.degree_summary_name, COUNT(*) AS num_students FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY Degree_Programs.degree_summary_name ORDER BY num_students DESC LIMIT 1
original correction:
SELECT Degree_Programs.degree_summary_name, COUNT(*) AS num_students FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY Degree_Programs.degree_summary_name ORDER BY num_students DESC LIMIT 1

index is 538
SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1
What is the degree summary name that has the most number of students enrolled?
SQL correction:
SELECT Degree_Programs.degree_summary_name  FROM Degree_Programs  JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id  GROUP BY Degree_Programs.degree_summary_name  ORDER BY COUNT(Student_Enrolment.student_enrolment_id) DESC  LIMIT 1
original correction:
SELECT Degree_Programs.degree_summary_name  FROM Degree_Programs  JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id  GROUP BY Degree_Programs.degree_summary_name  ORDER BY COUNT(Student_Enrolment.student_enrolment_id) DESC  LIMIT 1

index is 539
SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1
Find the program which most number of students are enrolled in. List both the id and the summary.
SQL correction:
SELECT Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name ORDER BY COUNT(Student_Enrolment.student_enrolment_id) DESC LIMIT 1
original correction:
SELECT Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name ORDER BY COUNT(Student_Enrolment.student_enrolment_id) DESC LIMIT 1

index is 540
SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1
What is the program id and the summary of the degree that has the most students enrolled?
SQL correction:
SELECT degree_program_id, degree_summary_description  FROM Degree_Programs  JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id  GROUP BY degree_program_id, degree_summary_description  ORDER BY COUNT(Student_Enrolment.student_enrolment_id) DESC  LIMIT 1
original correction:
SELECT degree_program_id, degree_summary_description  FROM Degree_Programs  JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id  GROUP BY degree_program_id, degree_summary_description  ORDER BY COUNT(Student_Enrolment.student_enrolment_id) DESC  LIMIT 1

index is 541
SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.
SQL correction:
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(Student_Enrolment.student_enrolment_id) AS enrollment_count FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id, Students.first_name, Students.middle_name, Students.last_name ORDER BY enrollment_count DESC LIMIT 1;
original correction:
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(Student_Enrolment.student_enrolment_id) AS enrollment_count FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id, Students.first_name, Students.middle_name, Students.last_name ORDER BY enrollment_count DESC LIMIT 1;

index is 542
SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?
SQL correction:
SELECT first_name, middle_name, last_name, T1.student_id, COUNT(T2.student_enrolment_id) AS enrollments FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY enrollments DESC LIMIT 1
original correction:
SELECT first_name, middle_name, last_name, T1.student_id, COUNT(T2.student_enrolment_id) AS enrollments FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY enrollments DESC LIMIT 1

index is 543
SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )
Which semesters do not have any student enrolled? List the semester name.
SQL correction:
SELECT Semesters.semester_name FROM Semesters LEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id WHERE Student_Enrolment.student_enrolment_id IS NULL
original correction:
SELECT Semesters.semester_name FROM Semesters LEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id WHERE Student_Enrolment.student_enrolment_id IS NULL

index is 544
SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )
What is the name of the semester with no students enrolled?
SQL correction:
SELECT semester_name FROM Semesters LEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id WHERE Student_Enrolment.student_enrolment_id IS NULL
original correction:
SELECT semester_name FROM Semesters LEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id WHERE Student_Enrolment.student_enrolment_id IS NULL

index is 545
SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id
What are all the course names of the courses which ever have students enrolled in?
SQL correction:
SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id
original correction:
SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id

index is 546
SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id
What are the names of all courses that have some students enrolled?
SQL correction:
SELECT T1.course_name  FROM Courses AS T1  JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id;
original correction:
SELECT T1.course_name  FROM Courses AS T1  JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id;

index is 547
SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1
What's the name of the course with most number of enrollments?
SQL correction:
SELECT Courses.course_name FROM Courses INNER JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_name ORDER BY COUNT(*) DESC LIMIT 1
original correction:
SELECT Courses.course_name FROM Courses INNER JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_name ORDER BY COUNT(*) DESC LIMIT 1

index is 548
SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1
What is the name of the course with the most students enrolled?
SQL correction:
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(T2.student_enrolment_id) DESC LIMIT 1
original correction:
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(T2.student_enrolment_id) DESC LIMIT 1

index is 549
SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.
SQL correction:
SELECT last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE Addresses.state_province_county = 'North Carolina' AND student_id NOT IN (SELECT student_id FROM Student_Enrolment)
entities correction:
SELECT last_name FROM Students  JOIN Addresses ON Students.current_address_id = Addresses.address_id  WHERE Addresses.state_province_county = 'North Carolina'  AND student_id NOT IN (SELECT student_id FROM Student_Enrolment)

index is 550
SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
What are the last name of the students who live in North Carolina but have not registered in any degree programs?
SQL correction:
SELECT Students.last_name  FROM Students  JOIN Addresses ON Students.current_address_id = Addresses.address_id LEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id WHERE Addresses.state_province_county = 'North Carolina'  AND Student_Enrolment.degree_program_id IS NULL
entities correction:
SELECT Students.last_name  FROM Students   JOIN Addresses ON Students.current_address_id = Addresses.address_id  LEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  WHERE Addresses.state_province_county = 'North Carolina'   AND Student_Enrolment.student_id IS NULL

index is 551
SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2
Show the date and id of the transcript with at least 2 course results.
SQL correction:
SELECT transcript_date, transcript_id  FROM Transcripts  WHERE transcript_id IN (     SELECT transcript_id      FROM Transcript_Contents      GROUP BY transcript_id      HAVING COUNT(*) >= 2 )
original correction:
SELECT transcript_date, transcript_id  FROM Transcripts  WHERE transcript_id IN (     SELECT transcript_id      FROM Transcript_Contents      GROUP BY transcript_id      HAVING COUNT(*) >= 2 )

index is 552
SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2
What is the date and id of the transcript with at least 2 courses listed?
SQL correction:
SELECT T1.transcript_id, T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id, T1.transcript_date HAVING COUNT(*) >= 2
original correction:
SELECT T1.transcript_id, T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id, T1.transcript_date HAVING COUNT(*) >= 2

index is 553
SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'
What is the phone number of the man with the first name Timmothy and the last name Ward?
SQL correction:
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
entities correction:
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'

index is 554
select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'
What is the mobile phone number of the student named Timmothy Ward ?
SQL correction:
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
entities correction:
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'

index is 555
SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
Who is the first student to register? List the first name, middle name and last name.
SQL correction:
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
original correction:
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1

index is 556
SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
What is the first, middle, and last name of the first student to register?
SQL correction:
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
original correction:
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1

index is 557
SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1
Who is the earliest graduate of the school? List the first name, middle name and last name.
SQL correction:
SELECT first_name, middle_name, last_name  FROM Students  ORDER BY date_first_registered  LIMIT 1
original correction:
SELECT first_name, middle_name, last_name  FROM Students  ORDER BY date_first_registered  LIMIT 1

index is 558
SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1
What is the first, middle, and last name of the earliest school graduate?
SQL correction:
SELECT first_name, middle_name, last_name FROM Students JOIN Transcripts ON Students.student_id = Transcripts.student_id ORDER BY Transcripts.transcript_date ASC LIMIT 1
original correction:
SELECT first_name, middle_name, last_name FROM Students JOIN Transcripts ON Students.student_id = Transcripts.student_id ORDER BY Transcripts.transcript_date ASC LIMIT 1

index is 559
SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
Whose permanent address is different from his or her current address? List his or her first name.
SQL correction:
SELECT Students.first_name  FROM Students  JOIN Addresses AS permanent ON Students.permanent_address_id = permanent.address_id  JOIN Addresses AS current ON Students.current_address_id = current.address_id  WHERE permanent.address_id <> current.address_id
original correction:
SELECT Students.first_name  FROM Students  JOIN Addresses AS permanent ON Students.permanent_address_id = permanent.address_id  JOIN Addresses AS current ON Students.current_address_id = current.address_id  WHERE permanent.address_id <> current.address_id

index is 560
SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
What is the first name of the student whose permanent address is different from his or her current one?
SQL correction:
SELECT first_name FROM Students JOIN Addresses AS P ON Students.permanent_address_id = P.address_id JOIN Addresses AS C ON Students.current_address_id = C.address_id WHERE P.address_id != C.address_id
original correction:
SELECT first_name FROM Students JOIN Addresses AS P ON Students.permanent_address_id = P.address_id JOIN Addresses AS C ON Students.current_address_id = C.address_id WHERE P.address_id != C.address_id

index is 561
SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
Which address holds the most number of students currently? List the address id and all lines.
SQL correction:
SELECT address_id, line_1, line_2, line_3  FROM Addresses  WHERE address_id IN (     SELECT current_address_id      FROM Students      GROUP BY current_address_id      ORDER BY count(*) DESC      LIMIT 1 )
original correction:
SELECT address_id, line_1, line_2, line_3  FROM Addresses  WHERE address_id IN (     SELECT current_address_id      FROM Students      GROUP BY current_address_id      ORDER BY count(*) DESC      LIMIT 1 )

index is 562
SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
What is the id, line 1, and line 2 of the address with the most students?
SQL correction:
SELECT SELECT A.address_id, A.line_1, A.line_2 FROM Addresses A JOIN Students S ON S.current_address_id = A.address_id GROUP BY A.address_id, A.line_1, A.line_2 ORDER BY COUNT(S.student_id) DESC LIMIT 1;
original correction:
SELECT SELECT A.address_id, A.line_1, A.line_2 FROM Addresses A JOIN Students S ON S.current_address_id = A.address_id GROUP BY A.address_id, A.line_1, A.line_2 ORDER BY COUNT(S.student_id) DESC LIMIT 1;

index is 563
SELECT avg(transcript_date) FROM Transcripts
On average, when were the transcripts printed?
SQL correction:
SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts
original correction:
SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts

index is 564
SELECT avg(transcript_date) FROM Transcripts
What is the average transcript date?
SQL correction:
SELECT AVG(transcript_date) FROM Transcripts
original correction:
SELECT AVG(transcript_date) FROM Transcripts

index is 565
SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
When is the first transcript released? List the date and details.
SQL correction:
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
original correction:
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1

index is 566
SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
What is the earliest date of a transcript release, and what details can you tell me?
SQL correction:
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
original correction:
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1

index is 567
SELECT count(*) FROM Transcripts
How many transcripts are released?
SQL correction:
SELECT COUNT(*) FROM Transcripts
original correction:
SELECT COUNT(*) FROM Transcripts

index is 568
SELECT count(*) FROM Transcripts
How many transcripts are listed?
SQL correction:
SELECT COUNT(DISTINCT transcript_id) FROM Transcripts
original correction:
SELECT COUNT(DISTINCT transcript_id) FROM Transcripts

index is 569
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
What is the last transcript release date?
SQL correction:
SELECT MAX(transcript_date) AS last_transcript_release_date FROM Transcripts
original correction:
SELECT MAX(transcript_date) AS last_transcript_release_date FROM Transcripts

index is 570
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
When was the last transcript released?
SQL correction:
SELECT MAX(transcript_date) AS last_transcript_date FROM Transcripts
original correction:
SELECT MAX(transcript_date) AS last_transcript_date FROM Transcripts

index is 571
SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.
SQL correction:
SELECT T1.student_course_id, COUNT(T1.transcript_id) AS enrollment_count  FROM Transcript_Contents AS T1  GROUP BY T1.student_course_id  ORDER BY enrollment_count DESC  LIMIT 1
original correction:
SELECT T1.student_course_id, COUNT(T1.transcript_id) AS enrollment_count  FROM Transcript_Contents AS T1  GROUP BY T1.student_course_id  ORDER BY enrollment_count DESC  LIMIT 1

index is 572
SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?
SQL correction:
SELECT student_course_id, COUNT(transcript_id) AS course_count FROM Transcript_Contents GROUP BY student_course_id ORDER BY course_count DESC LIMIT 1;
original correction:
SELECT student_course_id, COUNT(transcript_id) AS course_count FROM Transcript_Contents GROUP BY student_course_id ORDER BY course_count DESC LIMIT 1;

index is 573
SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1
Show the date of the transcript which shows the least number of results, also list the id.
SQL correction:
SELECT T2.transcript_date, T1.transcript_id  FROM Transcript_Contents AS T1  JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id  GROUP BY T2.transcript_date, T1.transcript_id  HAVING COUNT(*) = (     SELECT MIN(result_count)      FROM (         SELECT T3.transcript_id, COUNT(*) AS result_count          FROM Transcript_Contents AS T3          GROUP BY T3.transcript_id     ) AS subquery )
original correction:
SELECT T2.transcript_date, T1.transcript_id  FROM Transcript_Contents AS T1  JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id  GROUP BY T2.transcript_date, T1.transcript_id  HAVING COUNT(*) = (     SELECT MIN(result_count)      FROM (         SELECT T3.transcript_id, COUNT(*) AS result_count          FROM Transcript_Contents AS T3          GROUP BY T3.transcript_id     ) AS subquery )

index is 574
SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1
What is the date and id of the transcript with the least number of results?
SQL correction:
SELECT T1.transcript_date, T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_date, T1.transcript_id ORDER BY COUNT(*) ASC LIMIT 1
original correction:
SELECT T1.transcript_date, T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_date, T1.transcript_id ORDER BY COUNT(*) ASC LIMIT 1

index is 575
SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
Find the semester when both Master students and Bachelor students got enrolled in.
SQL correction:
SELECT semester_name FROM Semesters WHERE semester_id IN (   SELECT semester_id   FROM Student_Enrolment   WHERE degree_program_id IN (     SELECT degree_program_id     FROM Degree_Programs     WHERE degree_summary_name = 'Master'   ) ) AND semester_id IN (   SELECT semester_id   FROM Student_Enrolment   WHERE degree_program_id IN (     SELECT degree_program_id     FROM Degree_Programs     WHERE degree_summary_name = 'Bachelor'   ) )
entities correction:
SELECT semester_name  FROM Semesters  WHERE semester_id IN (   SELECT semester_id    FROM Student_Enrolment    WHERE degree_program_id IN (     SELECT degree_program_id      FROM Degree_Programs      WHERE degree_summary_name = 'Master'   )    INTERSECT   SELECT semester_id    FROM Student_Enrolment    WHERE degree_program_id IN (     SELECT degree_program_id      FROM Degree_Programs      WHERE degree_summary_name = 'Bachelor'   ) )

index is 576
SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
What is the id of the semester that had both Masters and Bachelors students enrolled?
SQL correction:
SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (     SELECT degree_program_id     FROM Degree_Programs     WHERE degree_summary_name = 'Masters' ) INTERSECT SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (     SELECT degree_program_id     FROM Degree_Programs     WHERE degree_summary_name = 'Bachelors' )
entities correction:
SELECT semester_id  FROM Student_Enrolment  WHERE degree_program_id IN (     SELECT degree_program_id     FROM Degree_Programs     WHERE degree_summary_name = 'Master' )  INTERSECT  SELECT semester_id  FROM Student_Enrolment  WHERE degree_program_id IN (     SELECT degree_program_id      FROM Degree_Programs      WHERE degree_summary_name = 'Bachelor' )

index is 577
SELECT count(DISTINCT current_address_id) FROM Students
How many different addresses do the students currently live?
SQL correction:
SELECT COUNT(DISTINCT Students.current_address_id) FROM Students
original correction:
SELECT COUNT(DISTINCT Students.current_address_id) FROM Students

index is 578
SELECT count(DISTINCT current_address_id) FROM Students
What are the different addresses that have students living there?
SQL correction:
SELECT T1.*  FROM Addresses AS T1  JOIN Students AS T2 ON T2.current_address_id = T1.address_id OR T2.permanent_address_id = T1.address_id
original correction:
SELECT T1.*  FROM Addresses AS T1  JOIN Students AS T2 ON T2.current_address_id = T1.address_id OR T2.permanent_address_id = T1.address_id

index is 579
SELECT other_student_details FROM Students ORDER BY other_student_details DESC
List all the student details in reversed lexicographical order.
SQL correction:
SELECT Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details FROM Students ORDER BY Students.last_name DESC, Students.first_name DESC
original correction:
SELECT Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details FROM Students ORDER BY Students.last_name DESC, Students.first_name DESC

index is 580
SELECT other_student_details FROM Students ORDER BY other_student_details DESC
What other details can you tell me about students in reverse alphabetical order?
SQL correction:
SELECT * FROM Students ORDER BY last_name DESC
original correction:
SELECT * FROM Students ORDER BY last_name DESC

index is 581
SELECT section_description FROM Sections WHERE section_name  =  'h'
Describe the section h.
SQL correction:
SELECT Sections.* FROM Sections WHERE Sections.section_id = 'h'
entities correction:
SELECT Sections.* FROM Sections WHERE Sections.section_id = 'h'

index is 582
SELECT section_description FROM Sections WHERE section_name  =  'h'
What is the description for the section named h?
SQL correction:
SELECT section_description FROM Sections WHERE section_name = 'h'
entities correction:
SELECT section_description FROM Sections WHERE section_name = 'h'

index is 583
select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'
Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .
SQL correction:
SELECT first_name  FROM Students  JOIN Addresses ON Students.permanent_address_id = Addresses.address_id  WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'
entities correction:
SELECT first_name FROM Students  JOIN Addresses ON Students.permanent_address_id = Addresses.address_id  WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'

index is 584
select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'
What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?
SQL correction:
SELECT first_name  FROM Students  WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti')  OR cell_mobile_number = '09700166582'
entities correction:
SELECT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti') OR cell_mobile_number IN ('09700166582')

index is 585
SELECT Title FROM Cartoon ORDER BY title
List the title of all cartoons in alphabetical order.
SQL correction:
SELECT Title FROM Cartoon ORDER BY Title ASC
original correction:
SELECT Title FROM Cartoon ORDER BY Title ASC

index is 586
SELECT Title FROM Cartoon ORDER BY title
What are the titles of the cartoons sorted alphabetically?
SQL correction:
SELECT Title FROM Cartoon ORDER BY Title ASC
original correction:
SELECT Title FROM Cartoon ORDER BY Title ASC

index is 587
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";
List all cartoon directed by "Ben Jones".
SQL correction:
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'
entities correction:
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'

index is 588
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";
What are the names of all cartoons directed by Ben Jones?
SQL correction:
SELECT Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Directed_by = 'Ben Jones'
entities correction:
SELECT Title FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Directed_by = 'Ben Jones'

index is 589
SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
How many cartoons were written by "Joseph Kuhr"?
SQL correction:
SELECT COUNT(DISTINCT id) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
entities correction:
SELECT COUNT(DISTINCT id) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'

index is 590
SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
What is the number of cartoones written by Joseph Kuhr?
SQL correction:
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
entities correction:
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'

index is 591
SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date
list all cartoon titles and their directors ordered by their air date
SQL correction:
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id ORDER BY Cartoon.Original_air_date;
original correction:
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id ORDER BY Cartoon.Original_air_date;

index is 592
SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date
What is the name and directors of all the cartoons that are ordered by air date?
SQL correction:
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id ORDER BY Cartoon.Original_air_date ASC
original correction:
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id ORDER BY Cartoon.Original_air_date ASC

index is 593
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
List the title of all cartoon directed by "Ben Jones" or "Brandon Vietti".
SQL correction:
SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti')
entities correction:
SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti')

index is 594
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?
SQL correction:
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'
entities correction:
SELECT Title  FROM Cartoon  WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'

index is 595
SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;
Which country has the most of TV Channels? List the country and number of TV Channels it has.
SQL correction:
SELECT Country, COUNT(*) AS NumChannels FROM TV_Channel GROUP BY Country ORDER BY NumChannels DESC LIMIT 1
original correction:
SELECT Country, COUNT(*) AS NumChannels FROM TV_Channel GROUP BY Country ORDER BY NumChannels DESC LIMIT 1

index is 596
SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;
What is the country with the most number of TV Channels and how many does it have?
SQL correction:
SELECT Country, COUNT(id) AS channel_count  FROM TV_Channel  GROUP BY Country  ORDER BY channel_count DESC  LIMIT 1
original correction:
SELECT Country, COUNT(id) AS channel_count  FROM TV_Channel  GROUP BY Country  ORDER BY channel_count DESC  LIMIT 1

index is 597
SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;
List the number of different series names and contents in the TV Channel table.
SQL correction:
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel
original correction:
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel

index is 598
SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;
How many different series and contents are listed in the TV Channel table?
SQL correction:
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;
original correction:
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;

index is 599
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
What is the content of TV Channel with serial name "Sky Radio"?
SQL correction:
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'
entities correction:
SELECT Content  FROM TV_Channel  WHERE series_name = 'Sky Radio'

index is 600
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
What is the content of the series Sky Radio?
SQL correction:
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'
entities correction:
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'

index is 601
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
What is the Package Option of TV Channel with serial name "Sky Radio"?
SQL correction:
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'
entities correction:
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'

index is 602
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
What are the Package Options of the TV Channels whose series names are Sky Radio?
SQL correction:
SELECT Package_Option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = 'Sky Radio'
entities correction:
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'

index is 603
SELECT count(*) FROM TV_Channel WHERE LANGUAGE = "English";
How many TV Channel using language English?
SQL correction:
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'
entities correction:
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'

index is 604
SELECT count(*) FROM TV_Channel WHERE LANGUAGE = "English";
How many TV Channels use the English language?
SQL correction:
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'
entities correction:
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'

index is 605
SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
List the language used least number of TV Channel. List language and number of TV Channel.
SQL correction:
SELECT TV_Channel.Language, COUNT(TV_Channel.id) AS Channel_Count FROM TV_Channel GROUP BY TV_Channel.Language ORDER BY Channel_Count ASC LIMIT 1
original correction:
SELECT TV_Channel.Language, COUNT(TV_Channel.id) AS Channel_Count FROM TV_Channel GROUP BY TV_Channel.Language ORDER BY Channel_Count ASC LIMIT 1

index is 606
SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
What are the languages used by the least number of TV Channels and how many channels use it?
SQL correction:
SELECT Language, COUNT(*) AS channel_count  FROM TV_Channel  GROUP BY Language  ORDER BY channel_count ASC  LIMIT 1
original correction:
SELECT Language, COUNT(*) AS channel_count  FROM TV_Channel  GROUP BY Language  ORDER BY channel_count ASC  LIMIT 1

index is 607
SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE
List each language and the number of TV Channels using it.
SQL correction:
SELECT Language, COUNT(DISTINCT TV_Channel.id) AS num_channels FROM TV_Channel GROUP BY Language
original correction:
SELECT Language, COUNT(DISTINCT TV_Channel.id) AS num_channels FROM TV_Channel GROUP BY Language

index is 608
SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE
For each language, list the number of TV Channels that use it.
SQL correction:
SELECT Language, COUNT(DISTINCT id) FROM TV_Channel GROUP BY Language
original correction:
SELECT Language, COUNT(DISTINCT id) FROM TV_Channel GROUP BY Language

index is 609
SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!";
What is the TV Channel that shows the cartoon "The Rise of the Blue Beetle!"? List the TV Channel's series name.
SQL correction:
SELECT T1.series_name  FROM TV_Channel AS T1  JOIN Cartoon AS T2 ON T2.Channel = T1.id  WHERE T2.Title = 'The Rise of the Blue Beetle!';
entities correction:
SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T2.Channel = T1.id WHERE T2.Title = 'The Rise of the Blue Beetle!';

index is 610
SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!";
What is the series name of the TV Channel that shows the cartoon "The Rise of the Blue Beetle"?
SQL correction:
SELECT TV_Channel.series_name FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = "The Rise of the Blue Beetle";
entities correction:
SELECT TV_Channel.series_name FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle';

index is 611
SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
List the title of all  Cartoons showed on TV Channel with series name "Sky Radio".
SQL correction:
SELECT Cartoon.Title  FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE TV_Channel.series_name = 'Sky Radio'
entities correction:
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio'

index is 612
SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
What is the title of all the cartools that are on the TV Channel with the series name "Sky Radio"?
SQL correction:
SELECT SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
entities correction:
SELECT Cartoon.Title  FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE TV_Channel.series_name = 'Sky Radio';

index is 613
SELECT Episode FROM TV_series ORDER BY rating
List the Episode of all TV series sorted by rating.
SQL correction:
SELECT TV_series.Episode  FROM TV_series  ORDER BY TV_series.Rating DESC
original correction:
SELECT TV_series.Episode  FROM TV_series  ORDER BY TV_series.Rating DESC

index is 614
SELECT Episode FROM TV_series ORDER BY rating
What are all of the episodes ordered by ratings?
SQL correction:
SELECT TV_series.*, Cartoon.Title FROM TV_series JOIN Cartoon ON TV_series.Channel = Cartoon.Channel ORDER BY TV_series.Rating DESC
original correction:
SELECT TV_series.*, Cartoon.Title FROM TV_series JOIN Cartoon ON TV_series.Channel = Cartoon.Channel ORDER BY TV_series.Rating DESC

index is 615
SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
List top 3 highest Rating  TV series. List the TV series's Episode and Rating.
SQL correction:
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3
original correction:
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3

index is 616
SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
What are 3 most highly rated episodes in the TV series table and what were those ratings?
SQL correction:
SELECT TV_series.Episode, TV_series.Rating FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id ORDER BY TV_series.Rating DESC LIMIT 3
original correction:
SELECT TV_series.Episode, TV_series.Rating FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id ORDER BY TV_series.Rating DESC LIMIT 3

index is 617
SELECT max(SHARE) , min(SHARE) FROM TV_series;
What is minimum and maximum share of TV series?
SQL correction:
SELECT MIN(Share), MAX(Share) FROM TV_series
original correction:
SELECT MIN(Share), MAX(Share) FROM TV_series

index is 618
SELECT max(SHARE) , min(SHARE) FROM TV_series;
What is the maximum and minimum share for the TV series?
SQL correction:
SELECT MAX(Share) AS Maximum_Share, MIN(Share) AS Minimum_Share FROM TV_series;
original correction:
SELECT MAX(Share) AS Maximum_Share, MIN(Share) AS Minimum_Share FROM TV_series;

index is 619
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
What is the air date of TV series with Episode "A Love of a Lifetime"?
SQL correction:
SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = 'A Love of a Lifetime'
entities correction:
SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = 'A Love of a Lifetime'

index is 620
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
When did the episode "A Love of a Lifetime" air?
SQL correction:
SELECT TV_series.Air_Date  FROM Cartoon  JOIN TV_series ON Cartoon.id = TV_series.id  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Title = 'A Love of a Lifetime'
entities correction:
SELECT TV_series.Air_Date  FROM Cartoon   JOIN TV_series ON Cartoon.id = TV_series.id   JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id   WHERE Cartoon.Title = 'A Love of a Lifetime'

index is 621
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
What is Weekly Rank of TV series with Episode "A Love of a Lifetime"?
SQL correction:
SELECT SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime"
entities correction:
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime"

index is 622
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
What is the weekly rank for the episode "A Love of a Lifetime"?
SQL correction:
SELECT The provided tables, columns, foreign keys, and primary keys are not sufficient to generate the SQL query for the given question. To fix the query, we need access to the tables related to the episode and its weekly rank. Please provide the schema links or additional information related to these tables so that I can assist you further.
original correction:
SELECT The provided tables, columns, foreign keys, and primary keys are not sufficient to generate the SQL query for the given question. To fix the query, we need access to the tables related to the episode and its weekly rank. Please provide the schema links or additional information related to these tables so that I can assist you further.

index is 623
SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";
What is the TV Channel of TV series with Episode "A Love of a Lifetime"? List the TV Channel's series name.
SQL correction:
SELECT TV_Channel.series_name  FROM TV_Channel  JOIN TV_series ON TV_Channel.id = TV_series.Channel  WHERE TV_series.Episode = 'A Love of a Lifetime'
entities correction:
SELECT TV_Channel.series_name, TV_Channel.Content FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = 'A Love of a Lifetime'

index is 624
SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";
What is the name of the series that has the episode "A Love of a Lifetime"?
SQL correction:
SELECT series_name  FROM TV_series  WHERE Episode = 'A Love of a Lifetime'
entities correction:
SELECT series_name FROM TV_series WHERE Episode = 'A Love of a Lifetime'

index is 625
SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
List the Episode of all  TV series showed on TV Channel with series name "Sky Radio".
SQL correction:
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio'
entities correction:
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';

index is 626
SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
What is the episode for the TV series named "Sky Radio"?
SQL correction:
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"
entities correction:
SELECT TV_series.Episode FROM TV_series  JOIN TV_Channel ON TV_series.Channel = TV_Channel.id  WHERE TV_Channel.series_name = 'Sky Radio'

index is 627
SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by
Find the number of cartoons directed by each of the listed directors.
SQL correction:
SELECT Directed_by, COUNT(*)  FROM Cartoon  WHERE Directed_by IN ('Director1', 'Director2', 'Director3')  GROUP BY Directed_by
entities correction:
SELECT Directed_by, COUNT(*) AS Count FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti', 'Michael Chang') GROUP BY Directed_by

index is 628
SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by
How many cartoons did each director create?
SQL correction:
SELECT Directed_by, COUNT(*)  FROM Cartoon  GROUP BY Directed_by
original correction:
SELECT Directed_by, COUNT(*)  FROM Cartoon  GROUP BY Directed_by

index is 629
select production_code ,  channel from cartoon order by original_air_date desc limit 1
Find the production code and channel of the most recently aired cartoon .
SQL correction:
SELECT Cartoon.Production_code, TV_Channel.series_name AS Channel FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id ORDER BY Cartoon.Original_air_date DESC LIMIT 1
original correction:
SELECT Cartoon.Production_code, TV_Channel.series_name AS Channel FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id ORDER BY Cartoon.Original_air_date DESC LIMIT 1

index is 630
select production_code ,  channel from cartoon order by original_air_date desc limit 1
What is the produdction code and channel of the most recent cartoon ?
SQL correction:
SELECT Production_code, Cartoon.Channel FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)
original correction:
SELECT Production_code, Cartoon.Channel FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)

index is 631
SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"
Find the package choice and series name of the TV channel that has high definition TV.
SQL correction:
SELECT Package_Option, series_name FROM TV_Channel WHERE High_definition_TV = 1
original correction:
SELECT Package_Option, series_name FROM TV_Channel WHERE High_definition_TV = 1

index is 632
SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"
What are the package options and the name of the series for the TV Channel that supports high definition TV?
SQL correction:
SELECT Package_Option, series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE Hight_definition_TV = 1
original correction:
SELECT Package_Option, series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE Hight_definition_TV = 1

index is 633
SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
which countries' tv channels are playing some cartoon written by Todd Casey?
SQL correction:
SELECT Country FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';
entities correction:
SELECT Country FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';

index is 634
SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
What are the countries that have cartoons on TV that were written by Todd Casey?
SQL correction:
SELECT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'Todd Casey'
entities correction:
SELECT TV_Channel.Country  FROM TV_Channel  JOIN Cartoon ON TV_Channel.id = Cartoon.Channel  WHERE Cartoon.Written_by = 'Todd Casey'

index is 635
SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
which countries' tv channels are not playing any cartoon written by Todd Casey?
SQL correction:
SELECT DISTINCT T1.Country FROM TV_Channel AS T1 LEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by <> 'Todd Casey' OR T2.Written_by IS NULL
entities correction:
SELECT DISTINCT T1.Country FROM TV_Channel AS T1 LEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by <> 'Todd Casey' OR T2.Written_by IS NULL;

index is 636
SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
What are the countries that are not playing cartoons written by Todd Casey?
SQL correction:
SELECT DISTINCT Country  FROM TV_Channel  WHERE id NOT IN (     SELECT Channel      FROM Cartoon      WHERE Written_by = 'Todd Casey' )
entities correction:
SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')

index is 637
SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?
SQL correction:
SELECT TV_Channel.series_name, TV_Channel.Country  FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')
entities correction:
SELECT TV_Channel.series_name, TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')

index is 638
SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?
SQL correction:
SELECT TV_Channel.series_name, TV_Channel.Country  FROM TV_Channel  JOIN Cartoon ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Michael Chang'
entities correction:
SELECT TV_Channel.series_name, TV_Channel.Country  FROM TV_Channel  JOIN Cartoon ON Cartoon.Channel = TV_Channel.id   WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')

index is 639
SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'
find the pixel aspect ratio and nation of the tv channels that do not use English.
SQL correction:
SELECT Pixel_aspect_ratio_PAR, Country  FROM TV_Channel  WHERE Language != 'English'
entities correction:
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE language != 'English'

index is 640
SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'
What is the pixel aspect ratio and country of origin for all TV channels that do not use English?
SQL correction:
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> 'English'
entities correction:
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> 'English'

index is 641
SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2
find id of the tv channels that from the countries where have more than two tv channels.
SQL correction:
SELECT TV_Channel.id  FROM TV_Channel  GROUP BY TV_Channel.Country  HAVING COUNT(*) > 2
original correction:
SELECT TV_Channel.id  FROM TV_Channel  GROUP BY TV_Channel.Country  HAVING COUNT(*) > 2

index is 642
SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2
What are the ids of all tv channels that have more than 2 TV channels?
SQL correction:
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.id HAVING COUNT(*) > 2
original correction:
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.id HAVING COUNT(*) > 2

index is 643
SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'
find the id of tv channels that do not play any cartoon directed by Ben Jones.
SQL correction:
SELECT TV_Channel.id FROM TV_Channel LEFT JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by <> 'Ben Jones' OR Cartoon.Directed_by IS NULL
entities correction:
SELECT TV_Channel.id  FROM TV_Channel  LEFT JOIN Cartoon ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Directed_by <> 'Ben Jones' OR Cartoon.Directed_by IS NULL

index is 644
SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'
What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?
SQL correction:
SELECT TV_Channel.id  FROM TV_Channel  WHERE TV_Channel.id NOT IN      (SELECT Cartoon.Channel      FROM Cartoon      WHERE Cartoon.Directed_by = 'Ben Jones')
entities correction:
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones')

index is 645
SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')
find the package option of the tv channel that do not have any cartoon directed by Ben Jones.
SQL correction:
SELECT Package_Option  FROM TV_Channel  WHERE id NOT IN (   SELECT T1.id    FROM TV_Channel AS T1    JOIN Cartoon AS T2 ON T1.id = T2.Channel    WHERE T2.Directed_by = 'Ben Jones' )
entities correction:
SELECT Package_Option  FROM TV_Channel  WHERE id NOT IN (      SELECT T1.id      FROM TV_Channel AS T1      JOIN Cartoon AS T2 ON T1.id = T2.Channel      WHERE T2.Directed_by = 'Ben Jones'      )

index is 646
SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')
What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?
SQL correction:
SELECT Package_Option FROM TV_Channel WHERE id NOT IN      (SELECT Channel      FROM Cartoon      WHERE Directed_by = 'Ben Jones')
entities correction:
SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')

index is 647
SELECT count(*) FROM poker_player
How many poker players are there?
SQL correction:
SELECT COUNT(DISTINCT Poker_Player_ID) FROM poker_player
original correction:
SELECT COUNT(DISTINCT Poker_Player_ID) FROM poker_player

index is 648
SELECT count(*) FROM poker_player
Count the number of poker players.
SQL correction:
SELECT COUNT(DISTINCT People_ID) FROM poker_player
original correction:
SELECT COUNT(DISTINCT People_ID) FROM poker_player

index is 649
SELECT Earnings FROM poker_player ORDER BY Earnings DESC
List the earnings of poker players in descending order.
SQL correction:
SELECT poker_player.Earnings  FROM poker_player  ORDER BY Earnings DESC
original correction:
SELECT poker_player.Earnings  FROM poker_player  ORDER BY Earnings DESC

index is 650
SELECT Earnings FROM poker_player ORDER BY Earnings DESC
What are the earnings of poker players, ordered descending by value?
SQL correction:
SELECT poker_player.Earnings  FROM poker_player  ORDER BY poker_player.Earnings DESC
original correction:
SELECT poker_player.Earnings  FROM poker_player  ORDER BY poker_player.Earnings DESC

index is 651
SELECT Final_Table_Made ,  Best_Finish FROM poker_player
List the final tables made and the best finishes of poker players.
SQL correction:
SELECT Final_Table_Made, Best_Finish FROM poker_player
original correction:
SELECT Final_Table_Made, Best_Finish FROM poker_player

index is 652
SELECT Final_Table_Made ,  Best_Finish FROM poker_player
What are the final tables made and best finishes for all poker players?
SQL correction:
SELECT Final_Table_Made, Best_Finish  FROM poker_player
original correction:
SELECT Final_Table_Made, Best_Finish  FROM poker_player

index is 653
SELECT avg(Earnings) FROM poker_player
What is the average earnings of poker players?
SQL correction:
SELECT AVG(Earnings) FROM poker_player
original correction:
SELECT AVG(Earnings) FROM poker_player

index is 654
SELECT avg(Earnings) FROM poker_player
Return the average earnings across all poker players.
SQL correction:
SELECT avg(Earnings) FROM poker_player
original correction:
SELECT avg(Earnings) FROM poker_player

index is 655
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
What is the money rank of the poker player with the highest earnings?
SQL correction:
SELECT Money_Rank  FROM poker_player  WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)
original correction:
SELECT Money_Rank  FROM poker_player  WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)

index is 656
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
Return the money rank of the player with the greatest earnings.
SQL correction:
SELECT poker_player.Money_Rank FROM poker_player ORDER BY poker_player.Earnings DESC LIMIT 1
original correction:
SELECT poker_player.Money_Rank FROM poker_player ORDER BY poker_player.Earnings DESC LIMIT 1

index is 657
SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000
What is the maximum number of final tables made among poker players with earnings less than 200000?
SQL correction:
SELECT MAX(Final_Table_Made)  FROM poker_player  WHERE Earnings < 200000;
original correction:
SELECT MAX(Final_Table_Made)  FROM poker_player  WHERE Earnings < 200000;

index is 658
SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000
Return the maximum final tables made across all poker players who have earnings below 200000.
SQL correction:
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000
original correction:
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000

index is 659
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID
What are the names of poker players?
SQL correction:
SELECT Name FROM people
original correction:
SELECT Name FROM people

index is 660
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID
Return the names of all the poker players.
SQL correction:
SELECT Name FROM people
original correction:
SELECT Name FROM people

index is 661
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000
What are the names of poker players whose earnings is higher than 300000?
SQL correction:
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000
original correction:
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000

index is 662
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000
Give the names of poker players who have earnings above 300000.
SQL correction:
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000
original correction:
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000

index is 663
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made
List the names of poker players ordered by the final tables made in ascending order.
SQL correction:
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC
original correction:
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC

index is 664
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made
What are the names of poker players, ordered ascending by the number of final tables they have made?
SQL correction:
SELECT T1.Name  FROM people AS T1  JOIN poker_player AS T2 ON T2.People_ID = T1.People_ID  ORDER BY T2.Final_Table_Made ASC
original correction:
SELECT T1.Name  FROM people AS T1  JOIN poker_player AS T2 ON T2.People_ID = T1.People_ID  ORDER BY T2.Final_Table_Made ASC

index is 665
SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1
What is the birth date of the poker player with the lowest earnings?
SQL correction:
SELECT P.Birth_Date FROM people AS P JOIN poker_player AS PP ON P.People_ID = PP.People_ID ORDER BY PP.Earnings ASC LIMIT 1
original correction:
SELECT P.Birth_Date FROM people AS P JOIN poker_player AS PP ON P.People_ID = PP.People_ID ORDER BY PP.Earnings ASC LIMIT 1

index is 666
SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1
Return the birth date of the poker player with the lowest earnings.
SQL correction:
SELECT people.Birth_Date  FROM poker_player  JOIN people ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Earnings ASC  LIMIT 1
original correction:
SELECT people.Birth_Date  FROM poker_player  JOIN people ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Earnings ASC  LIMIT 1

index is 667
SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1
What is the money rank of the tallest poker player?
SQL correction:
SELECT Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1
original correction:
SELECT Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1

index is 668
SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1
Return the money rank of the poker player with the greatest height.
SQL correction:
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1
original correction:
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1

index is 669
SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200
What is the average earnings of poker players with height higher than 200?
SQL correction:
SELECT AVG(poker_player.Earnings) AS Average_Earnings FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200
original correction:
SELECT AVG(poker_player.Earnings) AS Average_Earnings FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200

index is 670
SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200
Give average earnings of poker players who are taller than 200.
SQL correction:
SELECT avg(poker_player.Earnings) FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  WHERE people.Height > 200
original correction:
SELECT avg(poker_player.Earnings) FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  WHERE people.Height > 200

index is 671
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC
What are the names of poker players in descending order of earnings?
SQL correction:
SELECT people.Name  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Earnings DESC
original correction:
SELECT people.Name  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Earnings DESC

index is 672
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC
Return the names of poker players sorted by their earnings descending.
SQL correction:
SELECT people.Name  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Earnings DESC
original correction:
SELECT people.Name  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Earnings DESC

index is 673
SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality
What are different nationalities of people and the corresponding number of people from each nation?
SQL correction:
SELECT Nationality, COUNT(*)  FROM people  GROUP BY Nationality
original correction:
SELECT Nationality, COUNT(*)  FROM people  GROUP BY Nationality

index is 674
SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality
How many people are there of each nationality?
SQL correction:
SELECT Nationality, COUNT(*)  FROM people  GROUP BY Nationality
original correction:
SELECT Nationality, COUNT(*)  FROM people  GROUP BY Nationality

index is 675
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
What is the most common nationality of people?
SQL correction:
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
original correction:
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1

index is 676
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
Give the nationality that is most common across all people.
SQL correction:
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
original correction:
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1

index is 677
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2
What are the nationalities that are shared by at least two people?
SQL correction:
SELECT Nationality FROM people WHERE Nationality IN (   SELECT Nationality   FROM people   GROUP BY Nationality   HAVING COUNT(*) >= 2 )
original correction:
SELECT Nationality FROM people WHERE Nationality IN (   SELECT Nationality   FROM people   GROUP BY Nationality   HAVING COUNT(*) >= 2 )

index is 678
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2
Return the nationalities for which there are two or more people.
SQL correction:
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(DISTINCT People_ID) >= 2
original correction:
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(DISTINCT People_ID) >= 2

index is 679
SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC
List the names and birth dates of people in ascending alphabetical order of name.
SQL correction:
SELECT Name, Birth_Date FROM people ORDER BY Name ASC
original correction:
SELECT Name, Birth_Date FROM people ORDER BY Name ASC

index is 680
SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC
What are the names and birth dates of people, ordered by their names in alphabetical order?
SQL correction:
SELECT Name, Birth_Date FROM people ORDER BY Name ASC
original correction:
SELECT Name, Birth_Date FROM people ORDER BY Name ASC

index is 681
SELECT Name FROM people WHERE Nationality != "Russia"
Show names of people whose nationality is not "Russia".
SQL correction:
SELECT Name FROM people WHERE Nationality <> 'Russia'
entities correction:
SELECT Name FROM people WHERE Nationality NOT IN ('Russia')

index is 682
SELECT Name FROM people WHERE Nationality != "Russia"
What are the names of people who are not from Russia?
SQL correction:
SELECT Name FROM people WHERE Nationality <> 'Russia'
entities correction:
SELECT Name FROM people WHERE Nationality NOT IN ('Russia')

index is 683
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
List the names of people that are not poker players.
SQL correction:
SELECT Name FROM people LEFT JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Poker_Player_ID IS NULL
original correction:
SELECT Name FROM people LEFT JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Poker_Player_ID IS NULL

index is 684
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
What are the names of people who do not play poker?
SQL correction:
SELECT Name  FROM people  WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
original correction:
SELECT Name  FROM people  WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)

index is 685
SELECT count(DISTINCT Nationality) FROM people
How many distinct nationalities are there?
SQL correction:
SELECT COUNT(DISTINCT Nationality) FROM people
original correction:
SELECT COUNT(DISTINCT Nationality) FROM people

index is 686
SELECT count(DISTINCT Nationality) FROM people
Count the number of different nationalities.
SQL correction:
SELECT COUNT(DISTINCT Nationality) FROM people
original correction:
SELECT COUNT(DISTINCT Nationality) FROM people

index is 687
SELECT count(*) FROM area_code_state
How many states are there?
SQL correction:
SELECT COUNT(DISTINCT state) AS state_count FROM AREA_CODE_STATE
original correction:
SELECT COUNT(DISTINCT state) AS state_count FROM AREA_CODE_STATE

index is 688
SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC
List the contestant numbers and names, ordered by contestant name descending.
SQL correction:
SELECT contestant_number, contestant_name  FROM CONTESTANTS  ORDER BY contestant_name DESC
original correction:
SELECT contestant_number, contestant_name  FROM CONTESTANTS  ORDER BY contestant_name DESC

index is 689
SELECT vote_id ,  phone_number ,  state FROM votes
List the vote ids, phone numbers and states of all votes.
SQL correction:
SELECT vote_id, phone_number, state FROM VOTES
original correction:
SELECT vote_id, phone_number, state FROM VOTES

index is 690
SELECT max(area_code) ,  min(area_code) FROM area_code_state
What are the maximum and minimum values of area codes?
SQL correction:
SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE
original correction:
SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE

index is 691
SELECT max(created) FROM votes WHERE state  =  'CA'
What is last date created of votes from the state 'CA'?
SQL correction:
SELECT MAX(created)  FROM VOTES  JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state  WHERE AREA_CODE_STATE.state = 'CA'
entities correction:
SELECT MAX(created) FROM VOTES WHERE state = 'CA'

index is 692
SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'
What are the names of the contestants whose names are not 'Jessie Alloway'
SQL correction:
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name <> 'Jessie Alloway'
entities correction:
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name <> 'Jessie Alloway'

index is 693
SELECT DISTINCT state ,  created FROM votes
What are the distinct states and create time of all votes?
SQL correction:
SELECT DISTINCT state, created FROM VOTES
original correction:
SELECT DISTINCT state, created FROM VOTES

index is 694
SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2
What are the contestant numbers and names of the contestants who had at least two votes?
SQL correction:
SELECT T1.contestant_number, T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number, T1.contestant_name HAVING COUNT(T2.vote_id) >= 2
original correction:
SELECT T1.contestant_number, T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number, T1.contestant_name HAVING COUNT(T2.vote_id) >= 2

index is 695
SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1
Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?
SQL correction:
SELECT contestant_number, contestant_name  FROM CONTESTANTS  WHERE contestant_number IN (   SELECT contestant_number    FROM VOTES    GROUP BY contestant_number    HAVING COUNT(*) = (     SELECT MIN(vote_count)      FROM (       SELECT contestant_number, COUNT(*) as vote_count        FROM VOTES        GROUP BY contestant_number     ) as vote_counts   ) )
original correction:
SELECT contestant_number, contestant_name  FROM CONTESTANTS  WHERE contestant_number IN (   SELECT contestant_number    FROM VOTES    GROUP BY contestant_number    HAVING COUNT(*) = (     SELECT MIN(vote_count)      FROM (       SELECT contestant_number, COUNT(*) as vote_count        FROM VOTES        GROUP BY contestant_number     ) as vote_counts   ) )

index is 696
SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'
What are the number of votes from state 'NY' or 'CA'?
SQL correction:
SELECT COUNT(*) FROM VOTES WHERE state IN ('NY', 'CA')
entities correction:
SELECT COUNT(*) FROM VOTES WHERE state IN ('NY', 'CA')

index is 697
SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )
How many contestants did not get voted?
SQL correction:
SELECT count(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)
original correction:
SELECT count(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)

index is 698
SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1
What is the area code in which the most voters voted?
SQL correction:
SELECT T2.area_code FROM VOTES AS T1 JOIN AREA_CODE_STATE AS T2 ON T1.state = T2.state GROUP BY T2.area_code ORDER BY COUNT(*) DESC LIMIT 1
original correction:
SELECT T2.area_code FROM VOTES AS T1 JOIN AREA_CODE_STATE AS T2 ON T1.state = T2.state GROUP BY T2.area_code ORDER BY COUNT(*) DESC LIMIT 1

index is 699
SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'
What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?
SQL correction:
SELECT created, state, phone_number FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling';
entities correction:
SELECT created, state, phone_number  FROM VOTES  JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number  WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling';

index is 700
SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'
List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.
SQL correction:
SELECT T1.area_code  FROM AREA_CODE_STATE AS T1  JOIN VOTES AS T2 ON T1.state = T2.state  JOIN CONTESTANTS AS T3 ON T2.contestant_number = T3.contestant_number  WHERE T3.contestant_name = 'Tabatha Gehling'    AND T1.area_code IN (     SELECT T1.area_code      FROM AREA_CODE_STATE AS T1      JOIN VOTES AS T2 ON T1.state = T2.state      JOIN CONTESTANTS AS T3 ON T2.contestant_number = T3.contestant_number      WHERE T3.contestant_name = 'Kelly Clauss'   )
entities correction:
SELECT T1.area_code   FROM AREA_CODE_STATE AS T1   JOIN VOTES AS T2 ON T1.state = T2.state   JOIN CONTESTANTS AS T3 ON T2.contestant_number = T3.contestant_number   WHERE T3.contestant_name = 'Tabatha Gehling'   AND T1.area_code IN (        SELECT T1.area_code        FROM AREA_CODE_STATE AS T1        JOIN VOTES AS T2 ON T1.state = T2.state        JOIN CONTESTANTS AS T3 ON T2.contestant_number = T3.contestant_number        WHERE T3.contestant_name = 'Kelly Clauss'   )

index is 701
select contestant_name from contestants where contestant_name like "%al%"
Return the names of the contestants whose names contain the substring 'Al' .
SQL correction:
SELECT contestant_name  FROM CONTESTANTS  WHERE contestant_name LIKE '%Al%'
entities correction:
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'

index is 702
SELECT Name FROM country WHERE IndepYear  >  1950
What are the names of all the countries that became independent after 1950?
SQL correction:
SELECT country.Name FROM country WHERE country.IndepYear > 1950
original correction:
SELECT country.Name FROM country WHERE country.IndepYear > 1950

index is 703
SELECT Name FROM country WHERE IndepYear  >  1950
Give the names of the nations that were founded after 1950.
SQL correction:
SELECT Name FROM country WHERE IndepYear > 1950
original correction:
SELECT Name FROM country WHERE IndepYear > 1950

index is 704
SELECT count(*) FROM country WHERE GovernmentForm  =  "Republic"
How many countries have a republic as their form of government?
SQL correction:
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic'
entities correction:
SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%'

index is 705
SELECT count(*) FROM country WHERE GovernmentForm  =  "Republic"
How many countries have governments that are republics?
SQL correction:
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic'
entities correction:
SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%'

index is 706
SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"
What is the total surface area of the countries in the Caribbean region?
SQL correction:
SELECT SUM(SurfaceArea)  FROM country  WHERE Region = 'Caribbean'
entities correction:
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Region = 'Caribbean'

index is 707
SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"
How much surface area do the countires in the Carribean cover together?
SQL correction:
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'
entities correction:
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'

index is 708
SELECT Continent FROM country WHERE Name  =  "Anguilla"
Which continent is Anguilla in?
SQL correction:
SELECT Continent FROM country WHERE country.Code IN (SELECT CountryCode FROM city WHERE Name = 'Anguilla')
entities correction:
SELECT Continent FROM country WHERE country.Code IN (SELECT CountryCode FROM city WHERE Name = 'Anguilla')

index is 709
SELECT Continent FROM country WHERE Name  =  "Anguilla"
What is the continent name which Anguilla belongs to?
SQL correction:
SELECT Continent FROM country WHERE Code = (SELECT CountryCode FROM city WHERE Name = 'Anguilla')
entities correction:
SELECT Continent FROM country WHERE Code = (SELECT CountryCode FROM city WHERE Name = 'Anguilla')

index is 710
SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"
Which region is the city Kabul located in?
SQL correction:
SELECT country.Region FROM country JOIN city ON city.CountryCode = country.Code WHERE city.Name = 'Kabul'
entities correction:
SELECT country.Region  FROM country  JOIN city ON city.CountryCode = country.Code  WHERE city.Name = 'Kabul'

index is 711
SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"
What region is Kabul in?
SQL correction:
SELECT country.Region  FROM country  JOIN city ON city.CountryCode = country.Code  WHERE city.Name = 'Kabul'
entities correction:
SELECT country.Region FROM country JOIN city ON city.CountryCode = country.Code WHERE city.Name = 'Kabul'

index is 712
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1
Which language is the most popular in Aruba?
SQL correction:
SELECT countrylanguage.Language FROM countrylanguage JOIN city ON city.CountryCode = countrylanguage.CountryCode JOIN country ON country.Code = city.CountryCode WHERE city.Name = 'Aruba' GROUP BY countrylanguage.Language ORDER BY SUM(countrylanguage.Percentage) DESC LIMIT 1
entities correction:
SELECT countrylanguage.Language  FROM countrylanguage  JOIN city ON city.CountryCode = countrylanguage.CountryCode  JOIN country ON country.Code = city.CountryCode  WHERE city.Name = 'Aruba'  GROUP BY countrylanguage.Language  ORDER BY SUM(countrylanguage.Percentage) DESC  LIMIT 1

index is 713
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1
What language is predominantly spoken in Aruba?
SQL correction:
SELECT T1.Language FROM countrylanguage AS T1 JOIN city AS T2 ON T2.CountryCode = T1.CountryCode JOIN country AS T3 ON T3.Code = T2.CountryCode WHERE T2.Name = 'Aruba' GROUP BY T1.Language ORDER BY T1.Percentage DESC LIMIT 1
entities correction:
SELECT T1.Language  FROM countrylanguage AS T1  JOIN country AS T2 ON T2.Code = T1.CountryCode  JOIN city AS T3 ON T3.CountryCode = T2.Code  WHERE T3.Name = 'Aruba'  GROUP BY T1.Language  ORDER BY T1.Percentage DESC  LIMIT 1

index is 714
SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"
What are the population and life expectancies in Brazil?
SQL correction:
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'
entities correction:
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'

index is 715
SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"
Give me Brazil’s population and life expectancies.
SQL correction:
SELECT country.Population, country.LifeExpectancy FROM country INNER JOIN city ON country.Code = city.CountryCode WHERE city.Name = 'Brazil'
entities correction:
SELECT country.Population, country.LifeExpectancy FROM country INNER JOIN city ON country.Code = city.CountryCode WHERE country.Name = 'Brazil'

index is 716
SELECT Population ,  Region FROM country WHERE Name  =  "Angola"
What are the region and population of Angola?
SQL correction:
SELECT Region, Population  FROM country  WHERE Name = 'Angola'
entities correction:
SELECT Region, Population FROM country WHERE Name = 'Angola'

index is 717
SELECT Population ,  Region FROM country WHERE Name  =  "Angola"
What region does Angola belong to and what is its population?
SQL correction:
SELECT Region, Population FROM country WHERE Name = 'Angola'
entities correction:
SELECT Region, Population FROM country WHERE Name = 'Angola'

index is 718
SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"
What is the average expected life expectancy for countries in the region of Central Africa?
SQL correction:
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'
entities correction:
SELECT AVG(LifeExpectancy) FROM country WHERE region = 'Central Africa'

index is 719
SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"
How long is the people’s average life expectancy in Central Africa?
SQL correction:
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND Region = 'Central Africa'
entities correction:
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND Region = 'Central Africa'

index is 720
SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1
What is the name of country that has the shortest life expectancy in Asia?
SQL correction:
SELECT c.Name FROM country c WHERE c.Continent = 'Asia' ORDER BY c.LifeExpectancy ASC LIMIT 1
entities correction:
SELECT c.Name FROM country c WHERE c.Continent = 'Asia' AND c.LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia')

index is 721
SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1
Give the name of the country in Asia with the lowest life expectancy.
SQL correction:
SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1
entities correction:
SELECT Name FROM country WHERE Continent = 'Asia' AND LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia')

index is 722
SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"
What is the total population and maximum GNP in Asia?
SQL correction:
SELECT sum(population) AS total_population, max(GNP) AS maximum_GNP  FROM country  WHERE continent = 'Asia'
entities correction:
SELECT sum(Population) AS total_population, max(GNP) AS maximum_GNP   FROM country   WHERE Continent = 'Asia'

index is 723
SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"
How many people live in Asia, and what is the largest GNP among them?
SQL correction:
SELECT SUM(country.Population), MAX(country.GNP) FROM country WHERE country.Continent = 'Asia'
entities correction:
SELECT SUM(country.Population), MAX(country.GNP) FROM country WHERE country.Continent = 'Asia'

index is 724
SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"
What is the average life expectancy in African countries that are republics?
SQL correction:
SELECT AVG(country.LifeExpectancy) FROM country JOIN city ON country.Code = city.CountryCode JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Africa' AND country.GovernmentForm = 'Republic'
entities correction:
SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent = 'Africa' AND country.GovernmentForm = 'Republic'

index is 725
SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"
Give the average life expectancy for countries in Africa which are republics?
SQL correction:
SELECT avg(LifeExpectancy)  FROM country  WHERE Continent = 'Africa'  AND GovernmentForm LIKE '%Republic%'
entities correction:
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'

index is 726
SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"
What is the total surface area of the continents Asia and Europe?
SQL correction:
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe')
entities correction:
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe')

index is 727
SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"
Give the total surface area covered by countries in Asia or Europe.
SQL correction:
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe')
entities correction:
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe');

index is 728
SELECT sum(Population) FROM city WHERE District  =  "Gelderland"
How many people live in Gelderland district?
SQL correction:
SELECT SUM(Population)  FROM city  WHERE District = 'Gelderland'
entities correction:
SELECT SUM(Population) FROM city WHERE District = 'Gelderland'

index is 729
SELECT sum(Population) FROM city WHERE District  =  "Gelderland"
What is the total population of Gelderland district?
SQL correction:
SELECT SUM(Population)  FROM city  WHERE District = 'Gelderland'
entities correction:
SELECT SUM(Population) FROM city WHERE District = 'Gelderland'

index is 730
SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"
What is the average GNP and total population in all nations whose government is US territory?
SQL correction:
SELECT AVG(country.GNP), SUM(country.Population)  FROM country JOIN city ON country.Code = city.CountryCode JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.GovernmentForm = 'US territory'
entities correction:
SELECT AVG(country.GNP), SUM(country.Population)   FROM country  JOIN city ON country.Code = city.CountryCode  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.GovernmentForm = 'US Territory'

index is 731
SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"
Give the mean GNP and total population of nations which are considered US territory.
SQL correction:
SELECT avg(GNP) AS Mean_GNP, sum(Population) AS Total_Population  FROM country  WHERE Region = 'US'
entities correction:
SELECT avg(GNP) AS Mean_GNP, sum(Population) AS Total_Population   FROM country   WHERE Continent = 'North America' AND GovernmentForm = 'Dependent Territory'

index is 732
SELECT count(DISTINCT LANGUAGE) FROM countrylanguage
How many unique languages are spoken in the world?
SQL correction:
SELECT COUNT(DISTINCT Language) FROM countrylanguage
original correction:
SELECT COUNT(DISTINCT Language) FROM countrylanguage

index is 733
SELECT count(DISTINCT LANGUAGE) FROM countrylanguage
What is the number of distinct languages used around the world?
SQL correction:
SELECT COUNT(DISTINCT Language) FROM countrylanguage
original correction:
SELECT COUNT(DISTINCT Language) FROM countrylanguage

index is 734
SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa"
How many type of governments are in Africa?
SQL correction:
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'
entities correction:
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE continent = 'Africa'

index is 735
SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa"
How many different forms of governments are there in Africa?
SQL correction:
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'
entities correction:
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE continent = 'Africa'

index is 736
SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"
What is the total number of languages used in Aruba?
SQL correction:
SELECT COUNT(DISTINCT countrylanguage.Language) AS TotalLanguages FROM country JOIN city ON country.Code = city.CountryCode JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE city.Name = 'Aruba'
entities correction:
SELECT COUNT(DISTINCT countrylanguage.Language) AS TotalLanguages FROM country JOIN city ON country.Code = city.CountryCode JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE city.Name = 'Aruba'

index is 737
SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"
How many languages are spoken in Aruba?
SQL correction:
SELECT COUNT(DISTINCT T3.Language)  FROM city AS T2 JOIN country AS T1 ON T2.CountryCode = T1.Code JOIN countrylanguage AS T3 ON T3.CountryCode = T1.Code WHERE T2.Name = 'Aruba'
entities correction:
SELECT COUNT(DISTINCT T3.Language) AS LanguageCount FROM city AS T2 JOIN country AS T1 ON T2.CountryCode = T1.Code JOIN countrylanguage AS T3 ON T3.CountryCode = T1.Code WHERE T2.Name = 'Aruba'

index is 738
SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"
How many official languages does Afghanistan have?
SQL correction:
SELECT COUNT(DISTINCT countrylanguage.Language)  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.Name = 'Afghanistan'  AND countrylanguage.IsOfficial = 'T'
entities correction:
SELECT COUNT(DISTINCT countrylanguage.Language) AS OfficialLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = 'Afghanistan' AND countrylanguage.IsOfficial = 'T'

index is 739
SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"
How many official languages are spoken in Afghanistan?
SQL correction:
SELECT COUNT(DISTINCT Language) FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  WHERE country.Name = 'Afghanistan'  AND countrylanguage.IsOfficial = 'T'
entities correction:
SELECT COUNT(DISTINCT Language)  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  WHERE country.Name = 'Afghanistan'  AND countrylanguage.IsOfficial = 'T'

index is 740
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
What is name of the country that speaks the largest number of languages?
SQL correction:
SELECT T1.Name FROM country AS T1 JOIN (     SELECT CountryCode, COUNT(*) AS lang_count     FROM countrylanguage     GROUP BY CountryCode ) AS T2 ON T1.Code = T2.CountryCode ORDER BY T2.lang_count DESC LIMIT 1
original correction:
SELECT T1.Name FROM country AS T1 JOIN (     SELECT CountryCode, COUNT(*) AS lang_count     FROM countrylanguage     GROUP BY CountryCode ) AS T2 ON T1.Code = T2.CountryCode ORDER BY T2.lang_count DESC LIMIT 1

index is 741
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
Give the name of the nation that uses the greatest amount of languages.
SQL correction:
SELECT C.Name FROM country AS C JOIN countrylanguage AS CL ON C.Code = CL.CountryCode GROUP BY C.Name ORDER BY COUNT(DISTINCT CL.Language) DESC LIMIT 1
original correction:
SELECT C.Name FROM country AS C JOIN countrylanguage AS CL ON C.Code = CL.CountryCode GROUP BY C.Name ORDER BY COUNT(DISTINCT CL.Language) DESC LIMIT 1

index is 742
SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1
Which continent has the most diverse languages?
SQL correction:
SELECT T1.Continent, COUNT(DISTINCT T2.Language) AS LanguageCount FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY LanguageCount DESC LIMIT 1
original correction:
SELECT T1.Continent, COUNT(DISTINCT T2.Language) AS LanguageCount FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY LanguageCount DESC LIMIT 1

index is 743
SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1
Which continent speaks the most languages?
SQL correction:
SELECT country.Continent, COUNT(DISTINCT countrylanguage.Language) AS language_count FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Continent ORDER BY language_count DESC LIMIT 1
original correction:
SELECT country.Continent, COUNT(DISTINCT countrylanguage.Language) AS language_count FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Continent ORDER BY language_count DESC LIMIT 1

index is 744
SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
How many countries speak both English and Dutch?
SQL correction:
SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'English' AND CountryCode IN (     SELECT CountryCode     FROM countrylanguage     WHERE Language = 'Dutch' )
entities correction:
SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language IN ('English', 'Dutch') GROUP BY CountryCode HAVING COUNT(DISTINCT Language) = 2

index is 745
SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
What is the number of nations that use English and Dutch?
SQL correction:
SELECT COUNT(DISTINCT CountryCode)  FROM countrylanguage  WHERE Language IN ('English', 'Dutch')
entities correction:
SELECT COUNT(DISTINCT CountryCode) AS NumberOfNations FROM countrylanguage WHERE Language IN ('English', 'Dutch')

index is 746
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
What are the names of nations speak both English and French?
SQL correction:
SELECT Name FROM country WHERE Code IN (   SELECT CountryCode FROM countrylanguage WHERE Language = 'English' ) AND Code IN (   SELECT CountryCode FROM countrylanguage WHERE Language = 'French' )
entities correction:
SELECT Name FROM country WHERE Code IN (   SELECT CountryCode FROM countrylanguage WHERE Language = 'English' OR Language = 'French' )

index is 747
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
Give the names of nations that speak both English and French.
SQL correction:
SELECT Name FROM country WHERE Code IN (   SELECT CountryCode FROM countrylanguage WHERE Language = 'English' ) AND Code IN (   SELECT CountryCode FROM countrylanguage WHERE Language = 'French' )
entities correction:
SELECT Name FROM country WHERE Code IN (    SELECT CountryCode    FROM countrylanguage    WHERE Language = 'English' OR Language = 'French'    GROUP BY CountryCode    HAVING COUNT(DISTINCT Language) = 2 )

index is 748
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
What are the names of nations where both English and French are official languages?
SQL correction:
SELECT Name  FROM country  WHERE Code IN (     SELECT CountryCode      FROM countrylanguage      WHERE Language = 'English'      AND IsOfficial = 'T'     GROUP BY CountryCode     HAVING COUNT(DISTINCT Language) = 2     ) AND Code IN (     SELECT CountryCode      FROM countrylanguage      WHERE Language = 'French'      AND IsOfficial = 'T'     GROUP BY CountryCode     HAVING COUNT(DISTINCT Language) = 2     )
entities correction:
SELECT Name FROM country WHERE Code IN (     SELECT CountryCode     FROM countrylanguage     WHERE Language IN ('English', 'French')     AND IsOfficial = 'T'     GROUP BY CountryCode     HAVING COUNT(DISTINCT Language) = 2 )

index is 749
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
Give the names of countries with English and French as official languages.
SQL correction:
SELECT country.Name FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T')    OR (countrylanguage.Language = 'French' AND countrylanguage.IsOfficial = 'T') GROUP BY country.Name
entities correction:
SELECT country.Name  FROM countrylanguage  JOIN country ON country.Code = countrylanguage.CountryCode  WHERE (countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T')     OR (countrylanguage.Language = 'French' AND countrylanguage.IsOfficial = 'T')  GROUP BY country.Name

index is 750
SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"
What is the number of distinct continents where Chinese is spoken?
SQL correction:
SELECT COUNT(DISTINCT T1.Continent)  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  WHERE T2.Language = 'Chinese'
entities correction:
SELECT COUNT(DISTINCT T1.Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese'

index is 751
SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"
How many continents speak Chinese?
SQL correction:
SELECT COUNT(DISTINCT country.Continent) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Chinese'
entities correction:
SELECT COUNT(DISTINCT country.Continent)  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language = 'Chinese'

index is 752
SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
What are the regions that use English or Dutch?
SQL correction:
SELECT country.Region FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language IN ('English', 'Dutch')
entities correction:
SELECT country.Region FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language IN ('English', 'Dutch')

index is 753
SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
Which regions speak Dutch or English?
SQL correction:
SELECT DISTINCT C.Region  FROM country AS C  JOIN countrylanguage AS CL ON C.Code = CL.CountryCode  WHERE CL.Language IN ('Dutch', 'English')
entities correction:
SELECT DISTINCT C.Region  FROM country AS C JOIN countrylanguage AS CL ON C.Code = CL.CountryCode WHERE CL.Language IN ('Dutch', 'English')

index is 754
select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "english" and isofficial  =  "t" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "dutch" and isofficial  =  "t"
What are the countries where either English or Dutch is the official language ?
SQL correction:
SELECT Name FROM country WHERE Code IN (   SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T' ) OR Code IN (   SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch' AND IsOfficial = 'T' )
entities correction:
SELECT Name FROM country WHERE Code IN (   SELECT CountryCode FROM countrylanguage WHERE Language IN ('English', 'Dutch') AND IsOfficial = 'T' )

index is 755
SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND IsOfficial  =  "T" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch" AND IsOfficial  =  "T"
Which countries have either English or Dutch as an official language?
SQL correction:
SELECT country.Name  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch')  AND countrylanguage.IsOfficial = 'T'
entities correction:
SELECT country.Name  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch')  AND countrylanguage.IsOfficial = 'T'

index is 756
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1
Which language is the most popular on the Asian continent?
SQL correction:
SELECT countrylanguage.Language  FROM countrylanguage  JOIN country ON country.Code = countrylanguage.CountryCode  WHERE country.Continent = 'Asia'  GROUP BY countrylanguage.Language  ORDER BY SUM(countrylanguage.Percentage) DESC  LIMIT 1
entities correction:
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' GROUP BY countrylanguage.Language ORDER BY SUM(countrylanguage.Percentage) DESC LIMIT 1

index is 757
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1
What is the language that is used by the largest number of Asian nations?
SQL correction:
SELECT cl.Language  FROM countrylanguage AS cl  JOIN country AS c ON c.Code = cl.CountryCode  WHERE c.Continent = 'Asia'  GROUP BY cl.Language  ORDER BY COUNT(*) DESC  LIMIT 1
entities correction:
SELECT cl.Language FROM countrylanguage AS cl JOIN country AS c ON c.Code = cl.CountryCode WHERE c.Continent = 'Asia' GROUP BY cl.Language HAVING COUNT(DISTINCT c.Code) = (     SELECT COUNT(*) AS count     FROM country AS c2     WHERE c2.Continent = 'Asia' ) ORDER BY COUNT(*) DESC LIMIT 1

index is 758
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1
Which languages are spoken by only one country in republic governments?
SQL correction:
SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.GovernmentForm = 'Republic' GROUP BY T1.Language HAVING COUNT(*) = 1
entities correction:
SELECT T1.Language  FROM countrylanguage AS T1  JOIN country AS T2 ON T1.CountryCode = T2.Code  WHERE T2.GovernmentForm = 'Republic'  GROUP BY T1.Language  HAVING COUNT(*) = 1

index is 759
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1
What languages are only used by a single country with a republic government?
SQL correction:
SELECT Language  FROM countrylanguage AS CL  JOIN country AS C ON CL.CountryCode = C.Code  WHERE C.GovernmentForm = 'Republic'  GROUP BY Language  HAVING COUNT(C.Code) = 1
entities correction:
SELECT Language FROM countrylanguage AS CL JOIN country AS C ON CL.CountryCode = C.Code WHERE C.GovernmentForm = 'Republic' GROUP BY Language HAVING COUNT(DISTINCT CL.CountryCode) = 1

index is 760
SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1
Find the city with the largest population that uses English.
SQL correction:
SELECT city.Name  FROM city  JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode  JOIN country ON city.CountryCode = country.Code  WHERE countrylanguage.Language = "English"  GROUP BY city.Name  ORDER BY city.Population DESC  LIMIT 1
entities correction:
SELECT city.Name  FROM city  JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode  JOIN country ON city.CountryCode = country.Code  WHERE countrylanguage.Language = 'English'  GROUP BY city.Name  HAVING MAX(city.Population)  ORDER BY city.Population DESC  LIMIT 1

index is 761
SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1
What is the most populace city that speaks English?
SQL correction:
SELECT city.Name, MAX(city.Population) AS Population FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode JOIN country ON city.CountryCode = country.Code WHERE countrylanguage.Language = "English" GROUP BY city.Name ORDER BY Population DESC LIMIT 1
entities correction:
SELECT city.Name, MAX(city.Population) AS Population  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language = 'English'  GROUP BY city.Name  ORDER BY Population DESC  LIMIT 1

index is 762
SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1
Find the name, population and expected life length of asian country with the largest area?
SQL correction:
SELECT Name, Population, LifeExpectancy FROM country WHERE SurfaceArea = (     SELECT MAX(SurfaceArea)     FROM country     WHERE Continent = 'Asia' ) ORDER BY Population DESC LIMIT 1
entities correction:
SELECT Name, Population, LifeExpectancy FROM country WHERE SurfaceArea = (     SELECT MAX(SurfaceArea)     FROM country     WHERE Continent = 'Asia' ) AND Continent = 'Asia' ORDER BY Population DESC LIMIT 1

index is 763
SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1
What are the name, population, and life expectancy of the largest Asian country by land?
SQL correction:
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = 'Asia' ORDER BY country.SurfaceArea DESC LIMIT 1
entities correction:
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = 'Asia' ORDER BY country.SurfaceArea DESC LIMIT 1

index is 764
SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
What is average life expectancy in the countries where English is not the official language?
SQL correction:
SELECT avg(LifeExpectancy)  FROM country  WHERE Code NOT IN (     SELECT CountryCode      FROM countrylanguage      WHERE Language <> 'English'      AND IsOfficial = 'T' )
entities correction:
SELECT avg(LifeExpectancy) FROM country WHERE Code NOT IN (   SELECT CountryCode FROM countrylanguage WHERE Language <> 'English' AND IsOfficial = 'T' )

index is 765
SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
Give the mean life expectancy of countries in which English is not the official language.
SQL correction:
SELECT AVG(LifeExpectancy)  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language <> 'English'  AND countrylanguage.IsOfficial <> 'T'
entities correction:
SELECT AVG(LifeExpectancy) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language <> 'English' AND countrylanguage.IsOfficial = 'F'

index is 766
SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")
What is the total number of people living in the nations that do not use English?
SQL correction:
SELECT SUM(Population) AS TotalPopulation FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')
entities correction:
SELECT SUM(Population) AS TotalPopulation FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language IN ('Dutch', 'Papiamento', 'Spanish', 'Balochi', 'Dari', 'Pashto', 'Turkmenian', 'Uzbek', 'Ambo') AND IsOfficial = 1)

index is 767
SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")
How many people live in countries that do not speak English?
SQL correction:
SELECT sum(Population)  FROM country  WHERE Code NOT IN (SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language = 'English')
entities correction:
SELECT SUM(Population) AS TotalPopulation FROM country WHERE Code NOT IN (SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language = 'English')

index is 768
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"
What is the official language spoken in the country whose head of state is Beatrix?
SQL correction:
SELECT countrylanguage.Language  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.HeadOfState = 'Beatrix'  AND countrylanguage.IsOfficial = 'T'
entities correction:
SELECT countrylanguage.Language  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.HeadOfState = 'Beatrix'  AND countrylanguage.IsOfficial = 'T'

index is 769
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"
What is the official language used in the country the name of whose head of state is Beatrix.
SQL correction:
SELECT T2.Language  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  WHERE T1.HeadOfState = 'Beatrix'  AND T2.IsOfficial = 'T'
entities correction:
SELECT T2.Language  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  WHERE T1.HeadOfState = 'Beatrix'  AND T2.IsOfficial = 'T'

index is 770
SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"
What is the total number of unique official languages spoken in the countries that are founded before 1930?
SQL correction:
SELECT COUNT(DISTINCT countrylanguage.Language)  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.IndepYear < 1930 AND countrylanguage.IsOfficial = 'T'
entities correction:
SELECT COUNT(DISTINCT countrylanguage.Language)   FROM country   JOIN countrylanguage ON country.Code = countrylanguage.CountryCode   WHERE country.IndepYear < 1930 AND countrylanguage.IsOfficial = 'T'

index is 771
SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"
For the countries founded before 1930, what is the total number of distinct official languages?
SQL correction:
SELECT count(DISTINCT countrylanguage.Language) AS TotalDistinctLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 1930
original correction:
SELECT count(DISTINCT countrylanguage.Language) AS TotalDistinctLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 1930

index is 772
SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")
What are the countries that have greater surface area than any country in Europe?
SQL correction:
SELECT Name  FROM country  WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')
entities correction:
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')

index is 773
SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")
Which countries have greater area than that of any country in Europe?
SQL correction:
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')
entities correction:
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')

index is 774
SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  "Asia")
What are the African countries that have a  population less than any country in Asia?
SQL correction:
SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')
entities correction:
SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')

index is 775
SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  "Asia")
Which African countries have a smaller population than that of any country in Asia?
SQL correction:
SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (   SELECT MIN(Population) FROM country WHERE Continent = 'Asia' )
entities correction:
SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')

index is 776
SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  "Africa")
Which Asian countries have a population that is larger than any country in Africa?
SQL correction:
SELECT Name FROM country WHERE Population > (SELECT max(Population) FROM country WHERE Continent = 'Africa') AND Continent = 'Asia'
entities correction:
SELECT Name FROM country WHERE Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa') AND Continent = 'Asia'

index is 777
SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  "Africa")
What are the Asian countries which have a population larger than that of any country in Africa?
SQL correction:
SELECT country.Name FROM country WHERE country.Continent = 'Asia' AND country.Population > (     SELECT MAX(country.Population)     FROM country     WHERE country.Continent = 'Africa' )
entities correction:
SELECT country.Name FROM country WHERE country.Continent = 'Asia' AND country.Population > (     SELECT MAX(country.Population)     FROM country     WHERE country.Continent = 'Africa' )

index is 778
SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
What are the country codes for countries that do not speak English?
SQL correction:
SELECT Code FROM country WHERE Code NOT IN (SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language = 'English')
entities correction:
SELECT Code FROM country WHERE Code NOT IN (SELECT DISTINCT CountryCode FROM countrylanguage WHERE UPPER(Language) <> 'ENGLISH')

index is 779
SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
Return the country codes for countries that do not speak English.
SQL correction:
SELECT Code  FROM country  WHERE Code NOT IN (   SELECT CountryCode    FROM countrylanguage    WHERE Language = 'English' )
entities correction:
SELECT Code FROM country WHERE Code NOT IN (   SELECT CountryCode FROM countrylanguage WHERE LOWER(Language) = 'english' )

index is 780
SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"
What are the country codes of countries where people use languages other than English?
SQL correction:
SELECT DISTINCT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language <> 'English'
entities correction:
SELECT DISTINCT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language <> 'English'

index is 781
SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"
Give the country codes for countries in which people speak langauges that are not English.
SQL correction:
SELECT Code FROM country WHERE Code IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language <> 'English' )
entities correction:
SELECT Code  FROM country  WHERE Code IN (     SELECT CountryCode      FROM countrylanguage      WHERE Language <> 'English' );

index is 782
SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
What are the codes of the countries that do not speak English and whose government forms are not Republic?
SQL correction:
SELECT Code  FROM country  WHERE Code NOT IN (     SELECT CountryCode      FROM countrylanguage      WHERE Language = 'English' )  AND GovernmentForm NOT LIKE '%Republic%'
entities correction:
SELECT Code FROM country WHERE Code NOT IN (     SELECT CountryCode     FROM countrylanguage     WHERE Language = 'English' ) AND GovernmentForm NOT LIKE '%Republic%'

index is 783
SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
Return the codes of countries that do not speak English and do not have Republics for governments.
SQL correction:
SELECT Code FROM country  WHERE Code NOT IN (     SELECT CountryCode FROM countrylanguage WHERE Language = 'English' )  AND GovernmentForm <> 'Republic'
entities correction:
SELECT Code FROM country   WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')   AND GovernmentForm NOT LIKE '%Republic%'

index is 784
SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
Which cities are in European countries where English is not the official language?
SQL correction:
SELECT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON countrylanguage.CountryCode = country.Code  WHERE country.Continent = 'Europe'  AND countrylanguage.Language <> 'English'  AND countrylanguage.IsOfficial <> 'T'
entities correction:
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Europe' AND countrylanguage.Language <> 'English' AND countrylanguage.IsOfficial = 'F'

index is 785
SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
What are the names of cities in Europe for which English is not the official language?
SQL correction:
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language <> 'English' AND countrylanguage.IsOfficial <> 'T'
entities correction:
SELECT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.Continent = 'Europe'  AND countrylanguage.Language <> 'English'  AND countrylanguage.IsOfficial = 'F'

index is 786
select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  "asia"
Which unique cities are in Asian countries where Chinese is the official language ?
SQL correction:
SELECT DISTINCT city.Name FROM city JOIN country ON country.Code = city.CountryCode JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia'   AND countrylanguage.Language = 'Chinese'   AND countrylanguage.IsOfficial = 1
entities correction:
SELECT DISTINCT city.Name  FROM city  JOIN country ON country.Code = city.CountryCode  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.Continent = 'Asia'  AND countrylanguage.Language = 'Chinese'  AND countrylanguage.IsOfficial = 1

index is 787
SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  "Asia"
Return the different names of cities that are in Asia and for which Chinese is the official language.
SQL correction:
SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
entities correction:
SELECT DISTINCT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode  WHERE country.Continent = 'Asia'  AND countrylanguage.Language = 'Chinese'  AND countrylanguage.IsOfficial = 'T'

index is 788
SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1
What are the name, independence year, and surface area of the country with the smallest population?
SQL correction:
SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1
original correction:
SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1

index is 789
SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1
Give the name, year of independence, and surface area of the country that has the lowest population.
SQL correction:
SELECT country.Name, country.IndepYear, country.SurfaceArea  FROM country  WHERE country.Population = (   SELECT MIN(country.Population)    FROM country )
original correction:
SELECT country.Name, country.IndepYear, country.SurfaceArea  FROM country  WHERE country.Population = (   SELECT MIN(country.Population)    FROM country )

index is 790
SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
What are the population, name and leader of the country with the largest area?
SQL correction:
SELECT Population, Name, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);
original correction:
SELECT Population, Name, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);

index is 791
SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
Give the name, population, and head of state for the country that has the largest area.
SQL correction:
SELECT Name, Population, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)
original correction:
SELECT Name, Population, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)

index is 792
SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2
Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.
SQL correction:
SELECT SELECT country.Name, COUNT(countrylanguage.Language) AS LanguageCount FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING LanguageCount >= 3;
original correction:
SELECT SELECT country.Name, COUNT(countrylanguage.Language) AS LanguageCount FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING LanguageCount >= 3;

index is 793
SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2
What are the names of countries that speak more than 2 languages, as well as how many languages they speak?
SQL correction:
SELECT T1.Name, COUNT(DISTINCT T2.Language)  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  GROUP BY T1.Name  HAVING COUNT(DISTINCT T2.Language) > 2
original correction:
SELECT T1.Name, COUNT(DISTINCT T2.Language)  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  GROUP BY T1.Name  HAVING COUNT(DISTINCT T2.Language) > 2

index is 794
SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District
Find the number of cities in each district whose population is greater than the average population of cities?
SQL correction:
SELECT district, COUNT(*)  FROM city  WHERE population > (SELECT AVG(population) FROM city)  GROUP BY district
original correction:
SELECT district, COUNT(*)  FROM city  WHERE population > (SELECT AVG(population) FROM city)  GROUP BY district

index is 795
SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District
How many cities in each district have a population that is above the average population across all cities?
SQL correction:
SELECT country.Code, city.District, COUNT(city.Name) FROM city JOIN country ON city.CountryCode = country.Code GROUP BY city.District HAVING city.Population > (SELECT AVG(city.Population) FROM city)
original correction:
SELECT country.Code, city.District, COUNT(city.Name) FROM city JOIN country ON city.CountryCode = country.Code GROUP BY city.District HAVING city.Population > (SELECT AVG(city.Population) FROM city)

index is 796
SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72
Find the government form name and total population for each government form whose average life expectancy is longer than 72.
SQL correction:
SELECT GovernmentForm, SUM(Population) AS TotalPopulation  FROM country  GROUP BY GovernmentForm  HAVING AVG(LifeExpectancy) > 72;
original correction:
SELECT GovernmentForm, SUM(Population) AS TotalPopulation  FROM country  GROUP BY GovernmentForm  HAVING AVG(LifeExpectancy) > 72;

index is 797
SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72
What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?
SQL correction:
SELECT GovernmentForm, SUM(Population)  FROM country  GROUP BY GovernmentForm  HAVING AVG(LifeExpectancy) > 72;
original correction:
SELECT GovernmentForm, SUM(Population)  FROM country  GROUP BY GovernmentForm  HAVING AVG(LifeExpectancy) > 72;

index is 798
SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72
Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?
SQL correction:
SELECT continent, AVG(LifeExpectancy) AS AverageLifeExpectancy, SUM(Population) AS TotalPopulation FROM country GROUP BY continent HAVING AVG(LifeExpectancy) < 72
original correction:
SELECT continent, AVG(LifeExpectancy) AS AverageLifeExpectancy, SUM(Population) AS TotalPopulation FROM country GROUP BY continent HAVING AVG(LifeExpectancy) < 72

index is 799
SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72
What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?
SQL correction:
SELECT country.continent, SUM(country.population), AVG(country.lifeexpectancy) FROM country GROUP BY country.continent HAVING AVG(country.lifeexpectancy) < 72
original correction:
SELECT country.continent, SUM(country.population), AVG(country.lifeexpectancy) FROM country GROUP BY country.continent HAVING AVG(country.lifeexpectancy) < 72

index is 800
SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
What are the names and areas of countries with the top 5 largest area?
SQL correction:
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
original correction:
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5

index is 801
SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
Return the names and surface areas of the 5 largest countries.
SQL correction:
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
original correction:
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5

index is 802
SELECT Name FROM country ORDER BY Population DESC LIMIT 3
What are names of countries with the top 3 largest population?
SQL correction:
SELECT country.Name FROM country ORDER BY country.Population DESC LIMIT 3
original correction:
SELECT country.Name FROM country ORDER BY country.Population DESC LIMIT 3

index is 803
SELECT Name FROM country ORDER BY Population DESC LIMIT 3
Return the names of the 3 most populated countries.
SQL correction:
SELECT Name  FROM country  ORDER BY Population DESC  LIMIT 3
original correction:
SELECT Name  FROM country  ORDER BY Population DESC  LIMIT 3

index is 804
SELECT Name FROM country ORDER BY Population ASC LIMIT 3
What are the names of the nations with the 3 lowest populations?
SQL correction:
SELECT Name FROM country ORDER BY Population ASC LIMIT 3
original correction:
SELECT Name FROM country ORDER BY Population ASC LIMIT 3

index is 805
SELECT Name FROM country ORDER BY Population ASC LIMIT 3
Return the names of the 3 countries with the fewest people.
SQL correction:
SELECT Name FROM country ORDER BY Population ASC LIMIT 3
original correction:
SELECT Name FROM country ORDER BY Population ASC LIMIT 3

index is 806
SELECT count(*) FROM country WHERE continent  =  "Asia"
how many countries are in Asia?
SQL correction:
SELECT COUNT(DISTINCT Code) FROM country WHERE Continent = 'Asia'
entities correction:
SELECT COUNT(DISTINCT Code) FROM country WHERE continent = 'Asia'

index is 807
SELECT count(*) FROM country WHERE continent  =  "Asia"
Count the number of countries in Asia.
SQL correction:
SELECT COUNT(*) FROM country WHERE Continent = 'Asia'
entities correction:
SELECT COUNT(*) FROM country WHERE continent = 'Asia'

index is 808
SELECT Name FROM country WHERE continent  =  "Europe" AND Population  =  "80000"
What are the names of the countries that are in the continent of Europe and have a population of 80000?
SQL correction:
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000
entities correction:
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000

index is 809
SELECT Name FROM country WHERE continent  =  "Europe" AND Population  =  "80000"
Give the names of countries that are in Europe and have a population equal to 80000.
SQL correction:
SELECT country.Name FROM country WHERE country.Continent = 'Europe' AND country.Population = 80000
entities correction:
SELECT country.Name  FROM country  WHERE country.Continent = 'Europe' AND country.Population = 80000;

index is 810
select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000
What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?
SQL correction:
SELECT sum(Population) AS TotalPopulation, avg(SurfaceArea) AS AverageArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;
entities correction:
SELECT sum(Population) AS TotalPopulation, avg(SurfaceArea) AS AverageArea  FROM country  WHERE Continent = 'North America'  AND SurfaceArea > 3000;

index is 811
select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000
Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .
SQL correction:
SELECT sum(country.Population) AS total_population, avg(country.SurfaceArea) AS average_surface_area FROM country JOIN city ON city.CountryCode = country.Code WHERE country.Continent = 'North America' AND country.SurfaceArea > 3000;
entities correction:
SELECT sum(country.Population) AS total_population, avg(country.SurfaceArea) AS average_surface_area  FROM country  JOIN city ON city.CountryCode = country.Code  WHERE country.Continent = 'North America' AND country.SurfaceArea > 3000 GROUP BY country.Code;

index is 812
SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000
What are the cities whose population is between 160000 and 900000?
SQL correction:
SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000
original correction:
SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000

index is 813
select name from city where population between 160000 and 900000
Return the names of cities that have a population between 160000 and 900000 .
SQL correction:
SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000
original correction:
SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000

index is 814
SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1
Which language is spoken by the largest number of countries?
SQL correction:
SELECT Language  FROM countrylanguage  GROUP BY Language  HAVING COUNT(*) = (     SELECT MAX(language_count)      FROM (         SELECT COUNT(*) AS language_count          FROM countrylanguage          GROUP BY Language     ) AS counts ) ORDER BY language_count DESC LIMIT 1
original correction:
SELECT Language  FROM countrylanguage  GROUP BY Language  HAVING COUNT(*) = (     SELECT MAX(language_count)      FROM (         SELECT COUNT(*) AS language_count          FROM countrylanguage          GROUP BY Language     ) AS counts ) ORDER BY language_count DESC LIMIT 1

index is 815
SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1
Give the language that is spoken in the most countries.
SQL correction:
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1
original correction:
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1

index is 816
SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
What is the language spoken by the largest percentage of people in each country?
SQL correction:
SELECT T2.Name, T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Percentage = (     SELECT MAX(cl.Percentage)     FROM countrylanguage AS cl     WHERE cl.CountryCode = T2.Code ) GROUP BY T2.Name
original correction:
SELECT T2.Name, T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Percentage = (     SELECT MAX(cl.Percentage)     FROM countrylanguage AS cl     WHERE cl.CountryCode = T2.Code ) GROUP BY T2.Name

index is 817
SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?
SQL correction:
SELECT T1.Code, T2.Language  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  GROUP BY T1.Code  HAVING T2.Percentage = (SELECT MAX(Percentage)                          FROM countrylanguage                          WHERE CountryCode = T1.Code)
original correction:
SELECT T1.Code, T2.Language  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  GROUP BY T1.Code  HAVING T2.Percentage = (SELECT MAX(Percentage)                          FROM countrylanguage                          WHERE CountryCode = T1.Code)

index is 818
SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
What is the total number of countries where Spanish is spoken by the largest percentage of people?
SQL correction:
SELECT COUNT(DISTINCT country.Code) FROM countrylanguage  JOIN country ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language = 'Spanish'  AND countrylanguage.Percentage = (SELECT MAX(Percentage)                                    FROM countrylanguage                                    WHERE Language = 'Spanish')
entities correction:
SELECT COUNT(DISTINCT country.Code) FROM countrylanguage   JOIN country ON country.Code = countrylanguage.CountryCode   WHERE countrylanguage.Language = 'Spanish'   AND countrylanguage.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')

index is 819
SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
Count the number of countries for which Spanish is the predominantly spoken language.
SQL correction:
SELECT COUNT(DISTINCT T1.Code) FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  WHERE T2.Language = 'Spanish' AND T2.IsOfficial = 'T'
entities correction:
SELECT COUNT(DISTINCT T1.Code)  FROM country AS T1   JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode   WHERE T2.Language = 'Spanish'  AND T2.IsOfficial = 'T'

index is 820
SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
What are the codes of countries where Spanish is spoken by the largest percentage of people?
SQL correction:
SELECT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Spanish' GROUP BY country.Code ORDER BY countrylanguage.Percentage DESC LIMIT 1
entities correction:
SELECT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Spanish' GROUP BY country.Code HAVING MAX(countrylanguage.Percentage) = (     SELECT MAX(countrylanguage.Percentage)      FROM countrylanguage      WHERE countrylanguage.Language = 'Spanish' ) LIMIT 1

index is 821
SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
Return the codes of countries for which Spanish is the predominantly spoken language.
SQL correction:
SELECT country.Code FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  WHERE countrylanguage.Language = 'Spanish' AND countrylanguage.Percentage > 50
entities correction:
SELECT country.Code  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  WHERE countrylanguage.Language = 'Spanish'  AND countrylanguage.Percentage > 50

index is 822
SELECT count(*) FROM conductor
How many conductors are there?
SQL correction:
SELECT COUNT(Conductor_ID) FROM conductor
original correction:
SELECT COUNT(Conductor_ID) FROM conductor

index is 823
SELECT count(*) FROM conductor
Count the number of conductors.
SQL correction:
SELECT COUNT(DISTINCT Conductor_ID) FROM conductor
original correction:
SELECT COUNT(DISTINCT Conductor_ID) FROM conductor

index is 824
SELECT Name FROM conductor ORDER BY Age ASC
List the names of conductors in ascending order of age.
SQL correction:
SELECT Name FROM conductor ORDER BY Age ASC
original correction:
SELECT Name FROM conductor ORDER BY Age ASC

index is 825
SELECT Name FROM conductor ORDER BY Age ASC
What are the names of conductors, ordered by age?
SQL correction:
SELECT Name FROM conductor ORDER BY Age ASC
original correction:
SELECT Name FROM conductor ORDER BY Age ASC

index is 826
SELECT Name FROM conductor WHERE Nationality != 'USA'
What are the names of conductors whose nationalities are not "USA"?
SQL correction:
SELECT Name FROM conductor WHERE Nationality != 'USA'
entities correction:
SELECT Name FROM conductor WHERE Nationality != 'USA'

index is 827
SELECT Name FROM conductor WHERE Nationality != 'USA'
Return the names of conductors that do not have the nationality "USA".
SQL correction:
SELECT Name FROM conductor WHERE Nationality <> 'USA'
entities correction:
SELECT Name FROM conductor WHERE Nationality NOT IN ('USA')

index is 828
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
What are the record companies of orchestras in descending order of years in which they were founded?
SQL correction:
SELECT orchestra.Record_Company  FROM orchestra  ORDER BY orchestra.Year_of_Founded DESC
original correction:
SELECT orchestra.Record_Company  FROM orchestra  ORDER BY orchestra.Year_of_Founded DESC

index is 829
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
Return the record companies of orchestras, sorted descending by the years in which they were founded.
SQL correction:
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
original correction:
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC

index is 830
SELECT avg(Attendance) FROM SHOW
What is the average attendance of shows?
SQL correction:
SELECT AVG(Attendance) FROM show
original correction:
SELECT AVG(Attendance) FROM show

index is 831
SELECT avg(Attendance) FROM SHOW
Return the average attendance across all shows.
SQL correction:
SELECT AVG(Attendance) AS Average_Attendance FROM show
original correction:
SELECT AVG(Attendance) AS Average_Attendance FROM show

index is 832
SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"
What are the maximum and minimum share of performances whose type is not "Live final".
SQL correction:
SELECT MAX(Share) AS Maximum_Share, MIN(Share) AS Minimum_Share FROM performance WHERE Type <> 'Live final'
entities correction:
SELECT MAX(Share) AS Maximum_Share, MIN(Share) AS Minimum_Share  FROM performance  WHERE Type != 'Live final'

index is 833
SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"
Return the maximum and minimum shares for performances that do not have the type "Live final".
SQL correction:
SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share  FROM performance  WHERE Type <> 'Live final'
entities correction:
SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM performance WHERE Type <> 'Live final'

index is 834
SELECT count(DISTINCT Nationality) FROM conductor
How many different nationalities do conductors have?
SQL correction:
SELECT COUNT(DISTINCT Nationality) AS Total_Nationalities FROM conductor
original correction:
SELECT COUNT(DISTINCT Nationality) AS Total_Nationalities FROM conductor

index is 835
SELECT count(DISTINCT Nationality) FROM conductor
Count the number of different nationalities of conductors.
SQL correction:
SELECT COUNT(DISTINCT Nationality) AS Num_Nationalities FROM conductor
original correction:
SELECT COUNT(DISTINCT Nationality) AS Num_Nationalities FROM conductor

index is 836
SELECT Name FROM conductor ORDER BY Year_of_Work DESC
List names of conductors in descending order of years of work.
SQL correction:
SELECT conductor.Name  FROM conductor  ORDER BY conductor.Year_of_Work DESC
original correction:
SELECT conductor.Name  FROM conductor  ORDER BY conductor.Year_of_Work DESC

index is 837
SELECT Name FROM conductor ORDER BY Year_of_Work DESC
What are the names of conductors, sorted descending by the number of years they have worked?
SQL correction:
SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC
original correction:
SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC

index is 838
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
List the name of the conductor with the most years of work.
SQL correction:
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
original correction:
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1

index is 839
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
What is the name of the conductor who has worked the greatest number of years?
SQL correction:
SELECT Name, COUNT(Year_of_Work) AS WorkYears FROM conductor GROUP BY Name ORDER BY WorkYears DESC LIMIT 1
original correction:
SELECT Name, COUNT(Year_of_Work) AS WorkYears FROM conductor GROUP BY Name ORDER BY WorkYears DESC LIMIT 1

index is 840
SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID
Show the names of conductors and the orchestras they have conducted.
SQL correction:
SELECT Name, Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID
original correction:
SELECT Name, Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID

index is 841
SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID
What are the names of conductors as well as the corresonding orchestras that they have conducted?
SQL correction:
SELECT T1.Name, T2.Orchestra  FROM conductor AS T1  JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID
original correction:
SELECT T1.Name, T2.Orchestra  FROM conductor AS T1  JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID

index is 842
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1
Show the names of conductors that have conducted more than one orchestras.
SQL correction:
SELECT SELECT conductor.Name FROM conductor INNER JOIN orchestra ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Name HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1;
original correction:
SELECT SELECT conductor.Name FROM conductor INNER JOIN orchestra ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Name HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1;

index is 843
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1
What are the names of conductors who have conducted at more than one orchestra?
SQL correction:
SELECT Name FROM conductor GROUP BY Name HAVING COUNT(DISTINCT Orchestra_ID) > 1
original correction:
SELECT Name FROM conductor GROUP BY Name HAVING COUNT(DISTINCT Orchestra_ID) > 1

index is 844
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1
Show the name of the conductor that has conducted the most number of orchestras.
SQL correction:
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Name ORDER BY COUNT(T2.Orchestra_ID) DESC LIMIT 1
original correction:
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Name ORDER BY COUNT(T2.Orchestra_ID) DESC LIMIT 1

index is 845
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1
What is the name of the conductor who has conducted the most orchestras?
SQL correction:
SELECT Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY COUNT(orchestra.Orchestra_ID) DESC LIMIT 1
original correction:
SELECT Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY COUNT(orchestra.Orchestra_ID) DESC LIMIT 1

index is 846
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008
Please show the name of the conductor that has conducted orchestras founded after 2008.
SQL correction:
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008;
original correction:
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008;

index is 847
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008
What are the names of conductors who have conducted orchestras founded after the year 2008?
SQL correction:
SELECT Name FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008
original correction:
SELECT Name FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008

index is 848
SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company
Please show the different record companies and the corresponding number of orchestras.
SQL correction:
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS num_orchestras FROM orchestra GROUP BY Record_Company
original correction:
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS num_orchestras FROM orchestra GROUP BY Record_Company

index is 849
SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company
How many orchestras does each record company manage?
SQL correction:
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS num_orchestras FROM orchestra GROUP BY Record_Company
original correction:
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS num_orchestras FROM orchestra GROUP BY Record_Company

index is 850
SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
Please show the record formats of orchestras in ascending order of count.
SQL correction:
SELECT Major_Record_Format, COUNT(*) AS count  FROM orchestra  GROUP BY Major_Record_Format  ORDER BY count ASC
original correction:
SELECT Major_Record_Format, COUNT(*) AS count  FROM orchestra  GROUP BY Major_Record_Format  ORDER BY count ASC

index is 851
SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
What are the major record formats of orchestras, sorted by their frequency?
SQL correction:
SELECT Major_Record_Format, COUNT(*) as Frequency  FROM orchestra  WHERE Major_Record_Format IS NOT NULL GROUP BY Major_Record_Format  ORDER BY Frequency DESC
original correction:
SELECT Major_Record_Format, COUNT(*) as Frequency  FROM orchestra  WHERE Major_Record_Format IS NOT NULL GROUP BY Major_Record_Format  ORDER BY Frequency DESC

index is 852
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
List the record company shared by the most number of orchestras.
SQL correction:
SELECT Record_Company, COUNT(*) AS Num_Orchestras FROM orchestra GROUP BY Record_Company ORDER BY Num_Orchestras DESC LIMIT 1
original correction:
SELECT Record_Company, COUNT(*) AS Num_Orchestras FROM orchestra GROUP BY Record_Company ORDER BY Num_Orchestras DESC LIMIT 1

index is 853
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
What is the record company used by the greatest number of orchestras?
SQL correction:
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS Orchestra_Count FROM orchestra GROUP BY Record_Company HAVING COUNT(DISTINCT Orchestra_ID) = (     SELECT MAX(Orchestra_Count)     FROM (         SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS Orchestra_Count         FROM orchestra         GROUP BY Record_Company     ) AS counts )
original correction:
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS Orchestra_Count FROM orchestra GROUP BY Record_Company HAVING COUNT(DISTINCT Orchestra_ID) = (     SELECT MAX(Orchestra_Count)     FROM (         SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS Orchestra_Count         FROM orchestra         GROUP BY Record_Company     ) AS counts )

index is 854
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
List the names of orchestras that have no performance.
SQL correction:
SELECT Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL
original correction:
SELECT Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL

index is 855
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
What are the orchestras that do not have any performances?
SQL correction:
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
original correction:
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)

index is 856
SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003
Show the record companies shared by orchestras founded before 2003 and after 2003.
SQL correction:
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003
original correction:
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003

index is 857
SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003
What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?
SQL correction:
SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded > 2003
original correction:
SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded > 2003

index is 858
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"
Find the number of orchestras whose record format is "CD" or "DVD".
SQL correction:
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'
entities correction:
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')

index is 859
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"
Count the number of orchestras that have CD or DVD as their record format.
SQL correction:
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')
entities correction:
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');

index is 860
SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1
Show the years in which orchestras that have given more than one performance are founded.
SQL correction:
SELECT DISTINCT Year_of_Founded FROM orchestra JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID GROUP BY Year_of_Founded HAVING COUNT(DISTINCT performance.Performance_ID) > 1
original correction:
SELECT DISTINCT Year_of_Founded FROM orchestra JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID GROUP BY Year_of_Founded HAVING COUNT(DISTINCT performance.Performance_ID) > 1

index is 861
SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1
What are years of founding for orchestras that have had more than a single performance?
SQL correction:
SELECT Year_of_Founded FROM orchestra  WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance                         GROUP BY Orchestra_ID                         HAVING COUNT(*) > 1)
original correction:
SELECT Year_of_Founded FROM orchestra  WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance                         GROUP BY Orchestra_ID                         HAVING COUNT(*) > 1)

index is 862
SELECT count(*) FROM Highschooler
How many high schoolers are there?
SQL correction:
SELECT COUNT(ID) FROM Highschooler
original correction:
SELECT COUNT(ID) FROM Highschooler

index is 863
SELECT count(*) FROM Highschooler
Count the number of high schoolers.
SQL correction:
SELECT COUNT(*) FROM Highschooler
original correction:
SELECT COUNT(*) FROM Highschooler

index is 864
SELECT name ,  grade FROM Highschooler
Show the names and grades of each high schooler.
SQL correction:
SELECT name, grade  FROM Highschooler
original correction:
SELECT name, grade  FROM Highschooler

index is 865
SELECT name ,  grade FROM Highschooler
What are the names and grades for each high schooler?
SQL correction:
SELECT name, grade FROM Highschooler
original correction:
SELECT name, grade FROM Highschooler

index is 866
SELECT grade FROM Highschooler
Show all the grades of the high schoolers.
SQL correction:
SELECT grade FROM Highschooler
original correction:
SELECT grade FROM Highschooler

index is 867
SELECT grade FROM Highschooler
What is the grade of each high schooler?
SQL correction:
SELECT grade FROM Highschooler
original correction:
SELECT grade FROM Highschooler

index is 868
SELECT grade FROM Highschooler WHERE name  =  "Kyle"
What grade is Kyle in?
SQL correction:
SELECT grade FROM Highschooler WHERE name = 'Kyle'
entities correction:
SELECT grade FROM Highschooler WHERE name = 'Kyle'

index is 869
SELECT grade FROM Highschooler WHERE name  =  "Kyle"
Return the grade for the high schooler named Kyle.
SQL correction:
SELECT grade FROM Highschooler WHERE name = 'Kyle'
entities correction:
SELECT grade FROM Highschooler WHERE name = 'Kyle'

index is 870
SELECT name FROM Highschooler WHERE grade  =  10
Show the names of all high schoolers in grade 10.
SQL correction:
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10
original correction:
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10

index is 871
SELECT name FROM Highschooler WHERE grade  =  10
What are the names of all high schoolers in grade 10?
SQL correction:
SELECT name FROM Highschooler WHERE grade = 10
original correction:
SELECT name FROM Highschooler WHERE grade = 10

index is 872
SELECT ID FROM Highschooler WHERE name  =  "Kyle"
Show the ID of the high schooler named Kyle.
SQL correction:
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.name = 'Kyle'
entities correction:
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.name = 'Kyle'

index is 873
SELECT ID FROM Highschooler WHERE name  =  "Kyle"
What is Kyle's id?
SQL correction:
SELECT ID FROM Highschooler WHERE name = 'Kyle'
entities correction:
SELECT Highschooler.ID FROM Highschooler WHERE name = 'Kyle'

index is 874
SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10
How many high schoolers are there in grade 9 or 10?
SQL correction:
SELECT COUNT(DISTINCT ID) FROM Highschooler WHERE grade IN (9, 10)
original correction:
SELECT COUNT(DISTINCT ID) FROM Highschooler WHERE grade IN (9, 10)

index is 875
SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10
Count the number of high schoolers in grades 9 or 10.
SQL correction:
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)
original correction:
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)

index is 876
SELECT grade ,  count(*) FROM Highschooler GROUP BY grade
Show the number of high schoolers for each grade.
SQL correction:
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade
original correction:
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade

index is 877
SELECT grade ,  count(*) FROM Highschooler GROUP BY grade
How many high schoolers are in each grade?
SQL correction:
SELECT grade, COUNT(DISTINCT ID) FROM Highschooler GROUP BY grade
original correction:
SELECT grade, COUNT(DISTINCT ID) FROM Highschooler GROUP BY grade

index is 878
SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
Which grade has the most high schoolers?
SQL correction:
SELECT grade, COUNT(*) AS count  FROM Highschooler  GROUP BY grade  ORDER BY count DESC  LIMIT 1
original correction:
SELECT grade, COUNT(*) AS count  FROM Highschooler  GROUP BY grade  ORDER BY count DESC  LIMIT 1

index is 879
SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
Return the grade that has the greatest number of high schoolers.
SQL correction:
SELECT grade, COUNT(*) as count FROM Highschooler GROUP BY grade ORDER BY count DESC LIMIT 1
original correction:
SELECT grade, COUNT(*) as count FROM Highschooler GROUP BY grade ORDER BY count DESC LIMIT 1

index is 880
SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4
Show me all grades that have at least 4 students.
SQL correction:
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4
original correction:
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4

index is 881
SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4
Which grades have 4 or more high schoolers?
SQL correction:
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4
original correction:
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4

index is 882
SELECT student_id ,  count(*) FROM Friend GROUP BY student_id
Show the student IDs and numbers of friends corresponding to each.
SQL correction:
SELECT T1.ID, COUNT(DISTINCT T2.friend_id)  FROM Highschooler AS T1  JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.ID
original correction:
SELECT T1.ID, COUNT(DISTINCT T2.friend_id)  FROM Highschooler AS T1  JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.ID

index is 883
SELECT student_id ,  count(*) FROM Friend GROUP BY student_id
How many friends does each student have?
SQL correction:
SELECT Highschooler.ID, COUNT(Friend.friend_id) AS friend_count FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID
original correction:
SELECT Highschooler.ID, COUNT(Friend.friend_id) AS friend_count FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID

index is 884
SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
Show the names of high school students and their corresponding number of friends.
SQL correction:
SELECT T1.name, COUNT(DISTINCT T2.friend_id)  FROM Highschooler AS T1  JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.name
original correction:
SELECT T1.name, COUNT(DISTINCT T2.friend_id)  FROM Highschooler AS T1  JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.name

index is 885
SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
What are the names of the high schoolers and how many friends does each have?
SQL correction:
SELECT T1.name, COUNT(T2.friend_id)  FROM Highschooler AS T1  LEFT JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.name
original correction:
SELECT T1.name, COUNT(T2.friend_id)  FROM Highschooler AS T1  LEFT JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.name

index is 886
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
What is the name of the high schooler who has the greatest number of friends?
SQL correction:
SELECT T1.name  FROM Highschooler AS T1  JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.ID  ORDER BY COUNT(T2.friend_id) DESC  LIMIT 1
original correction:
SELECT T1.name  FROM Highschooler AS T1  JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.ID  ORDER BY COUNT(T2.friend_id) DESC  LIMIT 1

index is 887
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Return the name of the high school student with the most friends.
SQL correction:
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID ORDER BY COUNT(DISTINCT T2.friend_id) DESC LIMIT 1
original correction:
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID ORDER BY COUNT(DISTINCT T2.friend_id) DESC LIMIT 1

index is 888
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3
Show the names of high schoolers who have at least 3 friends.
SQL correction:
SELECT T1.name  FROM Highschooler AS T1  WHERE T1.ID IN (SELECT friend_id                  FROM Friend                  GROUP BY friend_id                  HAVING COUNT(student_id) >= 3)
original correction:
SELECT T1.name  FROM Highschooler AS T1  WHERE T1.ID IN (SELECT friend_id                  FROM Friend                  GROUP BY friend_id                  HAVING COUNT(student_id) >= 3)

index is 889
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3
What are the names of high schoolers who have 3 or more friends?
SQL correction:
SELECT Highschooler.name  FROM Highschooler  JOIN Friend ON Highschooler.ID = Friend.student_id  GROUP BY Highschooler.ID, Highschooler.name  HAVING COUNT(Friend.friend_id) >= 3
original correction:
SELECT Highschooler.name  FROM Highschooler  JOIN Friend ON Highschooler.ID = Friend.student_id  GROUP BY Highschooler.ID, Highschooler.name  HAVING COUNT(Friend.friend_id) >= 3

index is 890
SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"
Show the names of all of the high schooler Kyle's friends.
SQL correction:
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id JOIN Highschooler AS T3 ON T2.student_id = T3.ID WHERE T3.name = 'Kyle'
entities correction:
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id JOIN Highschooler AS T3 ON T2.student_id = T3.ID WHERE T3.name = 'Kyle'

index is 891
SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"
Return the names of friends of the high school student Kyle.
SQL correction:
SELECT H2.name FROM Highschooler AS H1 JOIN Friend AS F ON H1.ID = F.friend_id JOIN Highschooler AS H2 ON F.student_id = H2.ID WHERE H1.name = "Kyle"
entities correction:
SELECT H2.name FROM Highschooler AS H1 JOIN Friend AS F ON H1.ID = F.friend_id JOIN Highschooler AS H2 ON F.student_id = H2.ID WHERE H1.name = 'Kyle';

index is 892
SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
How many friends does the high school student Kyle have?
SQL correction:
SELECT COUNT(*) FROM Friend  JOIN Highschooler ON Friend.friend_id = Highschooler.ID  WHERE Highschooler.name = 'Kyle'
entities correction:
SELECT COUNT(*) FROM Friend   JOIN Highschooler ON Friend.friend_id = Highschooler.ID   WHERE Highschooler.name = 'Kyle'

index is 893
SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
Count the number of friends Kyle has.
SQL correction:
SELECT count(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
entities correction:
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')

index is 894
SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend
Show ids of all students who do not have any friends.
SQL correction:
SELECT Highschooler.ID FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.student_id IS NULL GROUP BY Highschooler.ID
original correction:
SELECT Highschooler.ID FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.student_id IS NULL GROUP BY Highschooler.ID

index is 895
SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend
What are the ids of high school students who do not have friends?
SQL correction:
SELECT Highschooler.ID  FROM Highschooler  LEFT JOIN Friend ON Highschooler.ID = Friend.student_id  WHERE Friend.friend_id IS NULL
original correction:
SELECT Highschooler.ID  FROM Highschooler  LEFT JOIN Friend ON Highschooler.ID = Friend.student_id  WHERE Friend.friend_id IS NULL

index is 896
SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id
Show names of all high school students who do not have any friends.
SQL correction:
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
original correction:
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)

index is 897
SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id
What are the names of students who have no friends?
SQL correction:
SELECT Highschooler.name  FROM Highschooler  WHERE Highschooler.ID NOT IN (     SELECT Friend.student_id      FROM Friend )
original correction:
SELECT Highschooler.name  FROM Highschooler  WHERE Highschooler.ID NOT IN (     SELECT Friend.student_id      FROM Friend )

index is 898
SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes
Show the ids of high schoolers who have friends and are also liked by someone else.
SQL correction:
SELECT DISTINCT HS.ID  FROM Highschooler AS HS  JOIN Friend AS F ON HS.ID = F.student_id  JOIN Likes AS L ON HS.ID = L.student_id  WHERE HS.ID IN (SELECT friend_id FROM Friend)  AND HS.ID IN (SELECT liked_id FROM Likes)
original correction:
SELECT DISTINCT HS.ID  FROM Highschooler AS HS  JOIN Friend AS F ON HS.ID = F.student_id  JOIN Likes AS L ON HS.ID = L.student_id  WHERE HS.ID IN (SELECT friend_id FROM Friend)  AND HS.ID IN (SELECT liked_id FROM Likes)

index is 899
SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes
What are the ids of students who both have friends and are liked?
SQL correction:
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.ID IN (SELECT Friend.student_id FROM Friend) AND Highschooler.ID IN (SELECT Likes.student_id FROM Likes)
original correction:
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.ID IN (SELECT Friend.student_id FROM Friend) AND Highschooler.ID IN (SELECT Likes.student_id FROM Likes)

index is 900
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id
Show name of all students who have some friends and also are liked by someone else.
SQL correction:
SELECT name FROM Highschooler WHERE ID IN (   SELECT student_id   FROM Friend ) AND ID IN (   SELECT liked_id   FROM Likes )
original correction:
SELECT name FROM Highschooler WHERE ID IN (   SELECT student_id   FROM Friend ) AND ID IN (   SELECT liked_id   FROM Likes )

index is 901
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id
What are the names of high schoolers who both have friends and are liked?
SQL correction:
SELECT DISTINCT H1.name  FROM Highschooler AS H1  JOIN Friend AS F1 ON H1.ID = F1.student_id  JOIN Likes AS L1 ON H1.ID = L1.student_id  JOIN Likes AS L2 ON H1.ID = L2.liked_id
original correction:
SELECT DISTINCT H1.name  FROM Highschooler AS H1  JOIN Friend AS F1 ON H1.ID = F1.student_id  JOIN Likes AS L1 ON H1.ID = L1.student_id  JOIN Likes AS L2 ON H1.ID = L2.liked_id

index is 902
SELECT student_id ,  count(*) FROM Likes GROUP BY student_id
Count the number of likes for each student id.
SQL correction:
SELECT Highschooler.ID, COUNT(Likes.*) AS like_count  FROM Highschooler  LEFT JOIN Likes ON Highschooler.ID = Likes.student_id  GROUP BY Highschooler.ID
original correction:
SELECT Highschooler.ID, COUNT(Likes.*) AS like_count  FROM Highschooler  LEFT JOIN Likes ON Highschooler.ID = Likes.student_id  GROUP BY Highschooler.ID

index is 903
SELECT student_id ,  count(*) FROM Likes GROUP BY student_id
How many likes correspond to each student id?
SQL correction:
SELECT student_id, COUNT(*) AS num_likes FROM Likes GROUP BY student_id
original correction:
SELECT student_id, COUNT(*) AS num_likes FROM Likes GROUP BY student_id

index is 904
SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
Show the names of high schoolers who have likes, and numbers of likes for each.
SQL correction:
SELECT Highschooler.name, COUNT(Likes.student_id) AS num_likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name
original correction:
SELECT Highschooler.name, COUNT(Likes.student_id) AS num_likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name

index is 905
SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
What are the names of high schoolers who have likes, and how many likes does each have?
SQL correction:
SELECT T1.name, COUNT(T2.liked_id)  FROM Highschooler AS T1  JOIN Likes AS T2 ON T1.ID = T2.student_id  GROUP BY T1.ID, T1.name
original correction:
SELECT T1.name, COUNT(T2.liked_id)  FROM Highschooler AS T1  JOIN Likes AS T2 ON T1.ID = T2.student_id  GROUP BY T1.ID, T1.name

index is 906
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
What is the name of the high schooler who has the greatest number of likes?
SQL correction:
SELECT T1.name FROM Highschooler AS T1 ORDER BY (SELECT COUNT(*) FROM Likes WHERE Likes.student_id = T1.ID) DESC LIMIT 1
original correction:
SELECT T1.name FROM Highschooler AS T1 ORDER BY (SELECT COUNT(*) FROM Likes WHERE Likes.student_id = T1.ID) DESC LIMIT 1

index is 907
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Give the name of the student with the most likes.
SQL correction:
SELECT T1.name  FROM Highschooler AS T1  WHERE T1.ID = (   SELECT T2.student_id    FROM Likes AS T2    GROUP BY T2.student_id    ORDER BY count(*) DESC    LIMIT 1 )
original correction:
SELECT T1.name  FROM Highschooler AS T1  WHERE T1.ID = (   SELECT T2.student_id    FROM Likes AS T2    GROUP BY T2.student_id    ORDER BY count(*) DESC    LIMIT 1 )

index is 908
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2
Show the names of students who have at least 2 likes.
SQL correction:
SELECT T1.name FROM Highschooler AS T1 JOIN Likes ON Likes.student_id = T1.ID GROUP BY T1.ID HAVING COUNT(Likes.liked_id) >= 2
original correction:
SELECT T1.name FROM Highschooler AS T1 JOIN Likes ON Likes.student_id = T1.ID GROUP BY T1.ID HAVING COUNT(Likes.liked_id) >= 2

index is 909
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2
What are the names of students who have 2 or more likes?
SQL correction:
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name HAVING count(*) >= 2
original correction:
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name HAVING count(*) >= 2

index is 910
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2
Show the names of students who have a grade higher than 5 and have at least 2 friends.
SQL correction:
SELECT Highschooler.name  FROM Highschooler  JOIN Friend ON Highschooler.ID = Friend.student_id  GROUP BY Highschooler.ID  HAVING Highschooler.grade > 5 AND COUNT(DISTINCT Friend.friend_id) >= 2
original correction:
SELECT Highschooler.name  FROM Highschooler  JOIN Friend ON Highschooler.ID = Friend.student_id  GROUP BY Highschooler.ID  HAVING Highschooler.grade > 5 AND COUNT(DISTINCT Friend.friend_id) >= 2

index is 911
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2
What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?
SQL correction:
SELECT name FROM Highschooler WHERE grade > 5   AND ID IN (     SELECT student_id     FROM Friend     GROUP BY student_id     HAVING count(*) >= 2   )
original correction:
SELECT name FROM Highschooler WHERE grade > 5   AND ID IN (     SELECT student_id     FROM Friend     GROUP BY student_id     HAVING count(*) >= 2   )

index is 912
SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
How many likes does Kyle have?
SQL correction:
SELECT COUNT(*)  FROM Likes  JOIN Highschooler ON Likes.student_id = Highschooler.ID  WHERE Highschooler.name = 'Kyle'
entities correction:
SELECT COUNT(*) FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID WHERE Highschooler.name = 'Kyle'

index is 913
SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
Return the number of likes that the high schooler named Kyle has.
SQL correction:
SELECT COUNT(*)  FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID WHERE Highschooler.name = 'Kyle'
entities correction:
SELECT COUNT(*) FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID WHERE Highschooler.name = 'Kyle' AND Highschooler.name = 'Kyle'

index is 914
SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
Find the average grade of all students who have some friends.
SQL correction:
SELECT AVG(T1.grade)  FROM Highschooler AS T1  WHERE T1.ID IN (     SELECT DISTINCT T2.student_id      FROM Friend AS T2 )
original correction:
SELECT AVG(T1.grade)  FROM Highschooler AS T1  WHERE T1.ID IN (     SELECT DISTINCT T2.student_id      FROM Friend AS T2 )

index is 915
SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
What is the average grade of students who have friends?
SQL correction:
SELECT AVG(grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id
original correction:
SELECT AVG(grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id

index is 916
SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
Find the minimum grade of students who have no friends.
SQL correction:
SELECT MIN(grade) AS minimum_grade FROM Highschooler WHERE ID NOT IN (     SELECT student_id     FROM Friend )
original correction:
SELECT MIN(grade) AS minimum_grade FROM Highschooler WHERE ID NOT IN (     SELECT student_id     FROM Friend )

index is 917
SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
What is the lowest grade of students who do not have any friends?
SQL correction:
SELECT min(grade)  FROM Highschooler  WHERE ID NOT IN (SELECT student_id FROM Friend)
original correction:
SELECT min(grade)  FROM Highschooler  WHERE ID NOT IN (SELECT student_id FROM Friend)

index is 918
SELECT state FROM Owners INTERSECT SELECT state FROM Professionals
Which states have both owners and professionals living there?
SQL correction:
SELECT state FROM Owners WHERE state IN (     SELECT state     FROM Professionals )
original correction:
SELECT state FROM Owners WHERE state IN (     SELECT state     FROM Professionals )

index is 919
SELECT state FROM Owners INTERSECT SELECT state FROM Professionals
Find the states where both owners and professionals live.
SQL correction:
SELECT state  FROM Owners  WHERE state IN (     SELECT state      FROM Professionals )
original correction:
SELECT state  FROM Owners  WHERE state IN (     SELECT state      FROM Professionals )

index is 920
SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )
What is the average age of the dogs who have gone through any treatments?
SQL correction:
SELECT AVG(Dogs.age) AS average_age FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
original correction:
SELECT AVG(Dogs.age) AS average_age FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id

index is 921
SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )
Find the average age of the dogs who went through treatments.
SQL correction:
SELECT avg(age) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
original correction:
SELECT avg(age) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id

index is 922
SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.
SQL correction:
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (     SELECT professional_id     FROM Treatments     GROUP BY professional_id     HAVING COUNT(*) > 2 )
entities correction:
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana'    OR professional_id IN (       SELECT professional_id       FROM Treatments       GROUP BY professional_id       HAVING COUNT(*) > 2    )

index is 923
SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.
SQL correction:
SELECT professional_id, last_name, cell_number  FROM Professionals  WHERE state = 'Indiana' OR professional_id IN      (SELECT professional_id      FROM Treatments      GROUP BY professional_id      HAVING count(*) > 2)
entities correction:
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state IN ('Indiana', 'Connecticut', 'Wisconsin', 'Mississippi', 'Hawaii', 'NewMexico', 'NorthCarolina', 'SouthCarolina', 'California', 'Alabama') OR professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) > 2 )

index is 924
select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )
Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .
SQL correction:
SELECT Dogs.name FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.name HAVING COALESCE(SUM(Treatments.cost_of_treatment), 0) <= 1000
original correction:
SELECT Dogs.name FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.name HAVING COALESCE(SUM(Treatments.cost_of_treatment), 0) <= 1000

index is 925
select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )
What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?
SQL correction:
SELECT D.name FROM Dogs AS D LEFT JOIN Treatments AS T ON D.dog_id = T.dog_id LEFT JOIN Owners AS O ON D.owner_id = O.owner_id GROUP BY D.dog_id, D.name HAVING COALESCE(SUM(T.cost_of_treatment), 0) <= 1000
original correction:
SELECT D.name FROM Dogs AS D LEFT JOIN Treatments AS T ON D.dog_id = T.dog_id LEFT JOIN Owners AS O ON D.owner_id = O.owner_id GROUP BY D.dog_id, D.name HAVING COALESCE(SUM(T.cost_of_treatment), 0) <= 1000

index is 926
SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs
Which first names are used for professionals or owners but are not used as dog names?
SQL correction:
SELECT Owners.first_name, Professionals.first_name FROM Owners LEFT JOIN Dogs ON Owners.first_name = Dogs.name LEFT JOIN Professionals ON Owners.first_name = Professionals.first_name WHERE Dogs.name IS NULL
original correction:
SELECT Owners.first_name, Professionals.first_name FROM Owners LEFT JOIN Dogs ON Owners.first_name = Dogs.name LEFT JOIN Professionals ON Owners.first_name = Professionals.first_name WHERE Dogs.name IS NULL

index is 927
SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs
Find the first names that are used for professionals or owners but are not used as dog names.
SQL correction:
SELECT first_name FROM (   SELECT first_name   FROM Owners   UNION   SELECT first_name   FROM Professionals ) AS all_names WHERE first_name NOT IN (   SELECT DISTINCT name   FROM Dogs )
original correction:
SELECT first_name FROM (   SELECT first_name   FROM Owners   UNION   SELECT first_name   FROM Professionals ) AS all_names WHERE first_name NOT IN (   SELECT DISTINCT name   FROM Dogs )

index is 928
SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
Which professional did not operate any treatment on dogs? List the professional's id, role and email.
SQL correction:
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
original correction:
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)

index is 929
SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
Give me the id, role and email of the professionals who did not perform any treatment on dogs.
SQL correction:
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
original correction:
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)

index is 930
SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
Which owner owns the most dogs? List the owner id, first name and last name.
SQL correction:
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id GROUP BY Owners.owner_id ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1
original correction:
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id GROUP BY Owners.owner_id ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1

index is 931
SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
Return the owner id, first name and last name of the owner who has the most dogs.
SQL correction:
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1
original correction:
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1

index is 932
SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
Which professionals have done at least two treatments? List the professional's id, role, and first name.
SQL correction:
SELECT professional_id, role_code, first_name FROM Professionals GROUP BY professional_id, role_code, first_name HAVING COUNT(*) >= 2
original correction:
SELECT professional_id, role_code, first_name FROM Professionals GROUP BY professional_id, role_code, first_name HAVING COUNT(*) >= 2

index is 933
SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
What are the id, role, and first name of the professionals who have performed two or more treatments?
SQL correction:
SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (     SELECT professional_id     FROM Treatments     GROUP BY professional_id     HAVING COUNT(*) >= 2 )
original correction:
SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (     SELECT professional_id     FROM Treatments     GROUP BY professional_id     HAVING COUNT(*) >= 2 )

index is 934
SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1
What is the name of the breed with the most dogs?
SQL correction:
SELECT breed_name FROM Breeds WHERE breed_code IN (     SELECT breed_code     FROM Dogs     GROUP BY breed_code     HAVING count(*) = (         SELECT max(dog_count)         FROM (             SELECT breed_code, count(*) AS dog_count             FROM Dogs             GROUP BY breed_code         ) AS dog_counts     ) )
original correction:
SELECT breed_name FROM Breeds WHERE breed_code IN (     SELECT breed_code     FROM Dogs     GROUP BY breed_code     HAVING count(*) = (         SELECT max(dog_count)         FROM (             SELECT breed_code, count(*) AS dog_count             FROM Dogs             GROUP BY breed_code         ) AS dog_counts     ) )

index is 935
SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1
Which breed do the most dogs have? Give me the breed name.
SQL correction:
SELECT breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY Breeds.breed_code ORDER BY COUNT(*) DESC LIMIT 1
original correction:
SELECT breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY Breeds.breed_code ORDER BY COUNT(*) DESC LIMIT 1

index is 936
SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.
SQL correction:
SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id ORDER BY COUNT(Treatments.treatment_id) DESC LIMIT 1;
original correction:
SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id ORDER BY COUNT(Treatments.treatment_id) DESC LIMIT 1;

index is 937
SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.
SQL correction:
SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id JOIN Treatments ON Treatments.dog_id = Dogs.dog_id JOIN Charges ON Charges.charge_id = Treatments.charge_id GROUP BY Owners.owner_id, Owners.last_name ORDER BY SUM(Charges.charge_amount) DESC LIMIT 1;
original correction:
SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id JOIN Treatments ON Treatments.dog_id = Dogs.dog_id JOIN Charges ON Charges.charge_id = Treatments.charge_id GROUP BY Owners.owner_id, Owners.last_name ORDER BY SUM(Charges.charge_amount) DESC LIMIT 1;

index is 938
SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1
What is the description of the treatment type that costs the least money in total?
SQL correction:
SELECT Treatment_Types.treatment_type_description  FROM Treatment_Types  JOIN Treatments ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code  GROUP BY Treatment_Types.treatment_type_code  ORDER BY SUM(Treatments.cost_of_treatment) ASC  LIMIT 1
original correction:
SELECT Treatment_Types.treatment_type_description  FROM Treatment_Types  JOIN Treatments ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code  GROUP BY Treatment_Types.treatment_type_code  ORDER BY SUM(Treatments.cost_of_treatment) ASC  LIMIT 1

index is 939
SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1
Give me the description of the treatment type whose total cost is the lowest.
SQL correction:
SELECT T1.treatment_type_description  FROM Treatment_Types AS T1  JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code  GROUP BY T1.treatment_type_description  ORDER BY SUM(T2.cost_of_treatment) ASC  LIMIT 1
original correction:
SELECT T1.treatment_type_description  FROM Treatment_Types AS T1  JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code  GROUP BY T1.treatment_type_description  ORDER BY SUM(T2.cost_of_treatment) ASC  LIMIT 1

index is 940
SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1
Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.
SQL correction:
SELECT Owners.owner_id, Owners.zip_code  FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Charges ON Dogs.charge_id = Charges.charge_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Charges.charge_amount) DESC LIMIT 1
original correction:
SELECT Owners.owner_id, Owners.zip_code  FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Charges ON Dogs.charge_id = Charges.charge_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Charges.charge_amount) DESC LIMIT 1

index is 941
SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1
Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.
SQL correction:
SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id JOIN Professionals AS T4 ON T3.professional_id = T4.professional_id GROUP BY T1.owner_id, T1.zip_code ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1;
original correction:
SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id JOIN Professionals AS T4 ON T3.professional_id = T4.professional_id GROUP BY T1.owner_id, T1.zip_code ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1;

index is 942
SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
Which professionals have done at least two types of treatments? List the professional id and cell phone.
SQL correction:
SELECT T1.professional_id, T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(DISTINCT T2.treatment_type_code) >= 2
original correction:
SELECT T1.professional_id, T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(DISTINCT T2.treatment_type_code) >= 2

index is 943
SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
Find the id and cell phone of the professionals who operate two or more types of treatments.
SQL correction:
SELECT T1.professional_id, T1.cell_number  FROM Professionals AS T1  JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T1.professional_id  HAVING COUNT(DISTINCT T2.treatment_type_code) >= 2.
original correction:
SELECT T1.professional_id, T1.cell_number  FROM Professionals AS T1  JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T1.professional_id  HAVING COUNT(DISTINCT T2.treatment_type_code) >= 2.

index is 944
SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )
What are the first name and last name of the professionals who have done treatment with cost below average?
SQL correction:
SELECT first_name, last_name FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   WHERE cost_of_treatment < (     SELECT AVG(cost_of_treatment)     FROM Treatments   ) )
original correction:
SELECT first_name, last_name FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   WHERE cost_of_treatment < (     SELECT AVG(cost_of_treatment)     FROM Treatments   ) )

index is 945
SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )
Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.
SQL correction:
SELECT first_name, last_name FROM Professionals WHERE professional_id IN (     SELECT professional_id     FROM Treatments     WHERE cost_of_treatment < (         SELECT AVG(cost_of_treatment)         FROM Treatments     ) )
original correction:
SELECT first_name, last_name FROM Professionals WHERE professional_id IN (     SELECT professional_id     FROM Treatments     WHERE cost_of_treatment < (         SELECT AVG(cost_of_treatment)         FROM Treatments     ) )

index is 946
SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id
List the date of each treatment, together with the first name of the professional who operated it.
SQL correction:
SELECT Treatments.date_of_treatment, Professionals.first_name  FROM Treatments  JOIN Professionals ON Treatments.professional_id = Professionals.professional_id
original correction:
SELECT Treatments.date_of_treatment, Professionals.first_name  FROM Treatments  JOIN Professionals ON Treatments.professional_id = Professionals.professional_id

index is 947
SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id
What are the date and the operating professional's first name of each treatment?
SQL correction:
SELECT date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id
original correction:
SELECT date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id

index is 948
SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code
List the cost of each treatment and the corresponding treatment type description.
SQL correction:
SELECT T1.cost_of_treatment, T2.treatment_type_description FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code
original correction:
SELECT T1.cost_of_treatment, T2.treatment_type_description FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code

index is 949
SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code
What are the cost and treatment type description of each treatment?
SQL correction:
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
original correction:
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;

index is 950
SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
List each owner's first name, last name, and the size of his for her dog.
SQL correction:
SELECT first_name, last_name, size_description FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code
original correction:
SELECT first_name, last_name, size_description FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code

index is 951
SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
What are each owner's first name, last name, and the size of their dog?
SQL correction:
SELECT T1.first_name, T1.last_name, T4.size_description FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Sizes AS T4 ON T2.size_code = T4.size_code;
original correction:
SELECT T1.first_name, T1.last_name, T4.size_description FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Sizes AS T4 ON T2.size_code = T4.size_code;

index is 952
SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
List pairs of the owner's first name and the dogs's name.
SQL correction:
SELECT Owners.first_name, Dogs.name  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
original correction:
SELECT Owners.first_name, Dogs.name  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id;

index is 953
SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
What are each owner's first name and their dogs's name?
SQL correction:
SELECT T1.first_name, T2.name  FROM Owners AS T1  JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id
original correction:
SELECT T1.first_name, T2.name  FROM Owners AS T1  JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id

index is 954
SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )
List the names of the dogs of the rarest breed and the treatment dates of them.
SQL correction:
SELECT D.name, T.date_of_treatment FROM Dogs AS D JOIN Breeds AS B ON D.breed_code = B.breed_code JOIN Treatments AS T ON T.dog_id = D.dog_id WHERE B.breed_code = (     SELECT breed_code     FROM Breeds     GROUP BY breed_code     ORDER BY COUNT(*) ASC     LIMIT 1 )
original correction:
SELECT D.name, T.date_of_treatment FROM Dogs AS D JOIN Breeds AS B ON D.breed_code = B.breed_code JOIN Treatments AS T ON T.dog_id = D.dog_id WHERE B.breed_code = (     SELECT breed_code     FROM Breeds     GROUP BY breed_code     ORDER BY COUNT(*) ASC     LIMIT 1 )

index is 955
SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )
Which dogs are of the rarest breed? Show their names and treatment dates.
SQL correction:
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Breeds ON Dogs.breed_code = Breeds.breed_code WHERE Breeds.breed_name = 'rarest_breed';
entities correction:
SELECT Dogs.name, Treatments.date_of_treatment  FROM Dogs  JOIN Treatments ON Dogs.dog_id = Treatments.dog_id  JOIN Breeds ON Dogs.breed_code = Breeds.breed_code  WHERE Breeds.breed_name IN ('Eskimo', 'Husky', 'Bulldog');

index is 956
SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'
Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.
SQL correction:
SELECT Owners.first_name, Dogs.name  FROM Dogs  JOIN Owners ON Dogs.owner_id = Owners.owner_id  WHERE Owners.state = 'Virginia'
entities correction:
SELECT Owners.first_name, Dogs.name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Owners.state = 'Virginia'

index is 957
SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'
Find the first names of owners living in Virginia and the names of dogs they own.
SQL correction:
SELECT T1.first_name, T2.name  FROM Owners AS T1  JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  WHERE T1.state = 'Virginia'
entities correction:
SELECT T1.first_name, T2.name   FROM Owners AS T1   JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id   WHERE T1.state = 'Virginia'

index is 958
SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id
What are the arriving date and the departing date of the dogs who have gone through a treatment?
SQL correction:
SELECT date_arrived, date_departed  FROM Dogs  JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
original correction:
SELECT date_arrived, date_departed  FROM Dogs  JOIN Treatments ON Dogs.dog_id = Treatments.dog_id

index is 959
SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id
Find the arriving date and the departing date of the dogs that received a treatment.
SQL correction:
SELECT date_arrived, date_departed FROM Dogs JOIN Treatments ON Treatments.dog_id = Dogs.dog_id
original correction:
SELECT date_arrived, date_departed FROM Dogs JOIN Treatments ON Treatments.dog_id = Dogs.dog_id

index is 960
SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )
List the last name of the owner owning the youngest dog.
SQL correction:
SELECT last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY age LIMIT 1
original correction:
SELECT last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY age LIMIT 1

index is 961
SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )
Who owns the youngest dog? Give me his or her last name.
SQL correction:
SELECT last_name FROM Owners WHERE owner_id = (   SELECT owner_id   FROM Dogs   WHERE date_of_birth = (     SELECT MIN(date_of_birth)     FROM Dogs   ) ) LIMIT 1;
original correction:
SELECT last_name FROM Owners WHERE owner_id = (   SELECT owner_id   FROM Dogs   WHERE date_of_birth = (     SELECT MIN(date_of_birth)     FROM Dogs   ) ) LIMIT 1;

index is 962
SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'
List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.
SQL correction:
SELECT email_address  FROM Professionals  WHERE state = 'Hawaii' OR state = 'Wisconsin'
entities correction:
SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin')

index is 963
SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'
What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?
SQL correction:
SELECT email_address  FROM Professionals  WHERE state = 'Hawaii' OR state = 'Wisconsin'
entities correction:
SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin')

index is 964
SELECT date_arrived ,  date_departed FROM Dogs
What are the arriving date and the departing date of all the dogs?
SQL correction:
SELECT date_arrived, date_departed  FROM Dogs
original correction:
SELECT date_arrived, date_departed  FROM Dogs

index is 965
SELECT date_arrived ,  date_departed FROM Dogs
List the arrival date and the departure date for all the dogs.
SQL correction:
SELECT date_arrived, date_departed  FROM Dogs
original correction:
SELECT date_arrived, date_departed  FROM Dogs

index is 966
SELECT count(DISTINCT dog_id) FROM Treatments
How many dogs went through any treatments?
SQL correction:
SELECT COUNT(DISTINCT T2.dog_id) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id
original correction:
SELECT COUNT(DISTINCT T2.dog_id) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id

index is 967
SELECT count(DISTINCT dog_id) FROM Treatments
Count the number of dogs that went through a treatment.
SQL correction:
SELECT COUNT(DISTINCT Treatments.dog_id) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
original correction:
SELECT COUNT(DISTINCT Treatments.dog_id) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id

index is 968
SELECT count(DISTINCT professional_id) FROM Treatments
How many professionals have performed any treatment to dogs?
SQL correction:
SELECT COUNT(DISTINCT T1.professional_id) FROM Professionals AS T1 JOIN Treatments AS T2 ON T2.professional_id = T1.professional_id
original correction:
SELECT COUNT(DISTINCT T1.professional_id) FROM Professionals AS T1 JOIN Treatments AS T2 ON T2.professional_id = T1.professional_id

index is 969
SELECT count(DISTINCT professional_id) FROM Treatments
Find the number of professionals who have ever treated dogs.
SQL correction:
SELECT count(DISTINCT Professionals.professional_id) AS num_professionals FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id;
original correction:
SELECT count(DISTINCT Professionals.professional_id) AS num_professionals FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id;

index is 970
SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'
Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.
SQL correction:
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'
entities correction:
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'

index is 971
SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'
Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.
SQL correction:
SELECT role_code, street, city, state  FROM Professionals  WHERE city LIKE '%West%'
entities correction:
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'

index is 972
SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'
Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.
SQL correction:
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'
entities correction:
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'

index is 973
SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'
Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.
SQL correction:
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'
entities correction:
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';

index is 974
SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )
How many dogs have an age below the average?
SQL correction:
SELECT COUNT(*)  FROM Dogs  WHERE age < (SELECT AVG(age) FROM Dogs)
original correction:
SELECT COUNT(*)  FROM Dogs  WHERE age < (SELECT AVG(age) FROM Dogs)

index is 975
SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )
Count the number of dogs of an age below the average.
SQL correction:
SELECT COUNT(dog_id) AS dog_count FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
original correction:
SELECT COUNT(dog_id) AS dog_count FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)

index is 976
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
How much does the most recent treatment cost?
SQL correction:
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
original correction:
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1

index is 977
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
Show me the cost of the most recently performed treatment.
SQL correction:
SELECT Treatments.cost_of_treatment  FROM Treatments  ORDER BY Treatments.date_of_treatment DESC  LIMIT 1
original correction:
SELECT Treatments.cost_of_treatment  FROM Treatments  ORDER BY Treatments.date_of_treatment DESC  LIMIT 1

index is 978
SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )
How many dogs have not gone through any treatment?
SQL correction:
SELECT COUNT(Dogs.dog_id) FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.dog_id IS NULL
original correction:
SELECT COUNT(Dogs.dog_id) FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.dog_id IS NULL

index is 979
select count(*) from dogs where dog_id not in ( select dog_id from treatments )
Tell me the number of dogs that have not received any treatment .
SQL correction:
SELECT COUNT(DISTINCT Dogs.dog_id) FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.dog_id IS NULL
original correction:
SELECT COUNT(DISTINCT Dogs.dog_id) FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.dog_id IS NULL

index is 980
SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )
How many owners temporarily do not have any dogs?
SQL correction:
SELECT COUNT(owner_id) AS owner_count FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs)
original correction:
SELECT COUNT(owner_id) AS owner_count FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs)

index is 981
SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )
Find the number of owners who do not own any dogs at this moment.
SQL correction:
SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs WHERE abandoned_yn = 'N' AND date_departed IS NULL)
entities correction:
SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs WHERE abandoned_yn = 'N' AND date_departed IS NULL)

index is 982
SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )
How many professionals did not operate any treatment on dogs?
SQL correction:
SELECT count(T1.professional_id) FROM Professionals AS T1 LEFT JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.professional_id IS NULL GROUP BY T1.professional_id
original correction:
SELECT count(T1.professional_id) FROM Professionals AS T1 LEFT JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.professional_id IS NULL GROUP BY T1.professional_id

index is 983
SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )
Find the number of professionals who have not treated any dogs.
SQL correction:
SELECT COUNT(professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
original correction:
SELECT COUNT(professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)

index is 984
SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1
List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.
SQL correction:
SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1
original correction:
SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1

index is 985
SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1
What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.
SQL correction:
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1
original correction:
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1

index is 986
SELECT avg(age) FROM Dogs
What is the average age of all the dogs?
SQL correction:
SELECT AVG(age) FROM Dogs
original correction:
SELECT AVG(age) FROM Dogs

index is 987
SELECT avg(age) FROM Dogs
Compute the average age of all the dogs.
SQL correction:
SELECT AVG(age) FROM Dogs
original correction:
SELECT AVG(age) FROM Dogs

index is 988
SELECT max(age) FROM Dogs
What is the age of the oldest dog?
SQL correction:
SELECT MAX(age) AS oldest_age FROM Dogs
original correction:
SELECT MAX(age) AS oldest_age FROM Dogs

index is 989
SELECT max(age) FROM Dogs
Tell me the age of the oldest dog.
SQL correction:
SELECT MAX(age) AS oldest_age FROM Dogs
original correction:
SELECT MAX(age) AS oldest_age FROM Dogs

index is 990
SELECT charge_type ,  charge_amount FROM Charges
How much does each charge type costs? List both charge type and amount.
SQL correction:
SELECT charge_type, charge_amount FROM Charges
original correction:
SELECT charge_type, charge_amount FROM Charges

index is 991
SELECT charge_type ,  charge_amount FROM Charges
List each charge type and its amount.
SQL correction:
SELECT charge_type, charge_amount FROM Charges
original correction:
SELECT charge_type, charge_amount FROM Charges

index is 992
SELECT max(charge_amount) FROM Charges
How much does the most expensive charge type costs?
SQL correction:
SELECT charge_type, MAX(charge_amount) FROM Charges
original correction:
SELECT charge_type, MAX(charge_amount) FROM Charges

index is 993
SELECT max(charge_amount) FROM Charges
What is the charge amount of the most expensive charge type?
SQL correction:
SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1
original correction:
SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1

index is 994
SELECT email_address ,  cell_number ,  home_phone FROM professionals
List the email, cell phone and home phone of all the professionals.
SQL correction:
SELECT email_address, cell_number, home_phone FROM Professionals
original correction:
SELECT email_address, cell_number, home_phone FROM Professionals

index is 995
SELECT email_address ,  cell_number ,  home_phone FROM professionals
What are the email, cell phone and home phone of each professional?
SQL correction:
SELECT email_address, cell_number, home_phone  FROM Professionals
original correction:
SELECT email_address, cell_number, home_phone  FROM Professionals

index is 996
SELECT DISTINCT breed_code ,  size_code FROM dogs
What are all the possible breed type and size type combinations?
SQL correction:
SELECT Breeds.breed_name, Sizes.size_description  FROM Breeds  JOIN Dogs ON Dogs.breed_code = Breeds.breed_code  JOIN Sizes ON Dogs.size_code = Sizes.size_code GROUP BY Breeds.breed_name, Sizes.size_description
original correction:
SELECT Breeds.breed_name, Sizes.size_description  FROM Breeds  JOIN Dogs ON Dogs.breed_code = Breeds.breed_code  JOIN Sizes ON Dogs.size_code = Sizes.size_code GROUP BY Breeds.breed_name, Sizes.size_description

index is 997
SELECT DISTINCT breed_code ,  size_code FROM dogs
Find the distinct breed type and size type combinations for dogs.
SQL correction:
SELECT SELECT DISTINCT Dogs.breed_code, Dogs.size_code FROM Dogs
original correction:
SELECT SELECT DISTINCT Dogs.breed_code, Dogs.size_code FROM Dogs

index is 998
SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code
List the first name of all the professionals along with the description of the treatment they have done.
SQL correction:
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Treatments.professional_id = Professionals.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
original correction:
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Treatments.professional_id = Professionals.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code

index is 999
SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code
What are each professional's first name and description of the treatment they have performed?
SQL correction:
SELECT professionals.first_name, treatment_types.treatment_type_description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
original correction:
SELECT professionals.first_name, treatment_types.treatment_type_description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code

index is 1000
SELECT count(*) FROM singer
How many singers are there?
SQL correction:
SELECT COUNT(*) FROM singer
original correction:
SELECT COUNT(*) FROM singer

index is 1001
SELECT count(*) FROM singer
What is the count of singers?
SQL correction:
SELECT COUNT(*) FROM singer
original correction:
SELECT COUNT(*) FROM singer

index is 1002
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
List the name of singers in ascending order of net worth.
SQL correction:
SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions ASC
original correction:
SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions ASC

index is 1003
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
What are the names of singers ordered by ascending net worth?
SQL correction:
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
original correction:
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC

index is 1004
SELECT Birth_Year ,  Citizenship FROM singer
What are the birth year and citizenship of singers?
SQL correction:
SELECT Birth_Year, Citizenship FROM singer
original correction:
SELECT Birth_Year, Citizenship FROM singer

index is 1005
SELECT Birth_Year ,  Citizenship FROM singer
What are the birth years and citizenships of the singers?
SQL correction:
SELECT Birth_Year, Citizenship FROM singer
original correction:
SELECT Birth_Year, Citizenship FROM singer

index is 1006
SELECT Name FROM singer WHERE Citizenship != "France"
List the name of singers whose citizenship is not "France".
SQL correction:
SELECT Name FROM singer WHERE Citizenship <> 'France'
entities correction:
SELECT Name FROM singer WHERE Citizenship != 'France'

index is 1007
SELECT Name FROM singer WHERE Citizenship != "France"
What are the names of the singers who are not French citizens?
SQL correction:
SELECT Name FROM singer WHERE Citizenship <> 'French'
entities correction:
SELECT Name FROM singer WHERE Citizenship <> 'France'

index is 1008
SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949
Show the name of singers whose birth year is either 1948 or 1949?
SQL correction:
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949
original correction:
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949

index is 1009
SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949
What are the names of the singers whose birth years are either 1948 or 1949?
SQL correction:
SELECT Name  FROM singer  WHERE Birth_Year = 1948 OR Birth_Year = 1949
original correction:
SELECT Name  FROM singer  WHERE Birth_Year = 1948 OR Birth_Year = 1949

index is 1010
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
What is the name of the singer with the largest net worth?
SQL correction:
SELECT singer.Name  FROM singer  ORDER BY singer.Net_Worth_Millions DESC  LIMIT 1
original correction:
SELECT singer.Name  FROM singer  ORDER BY singer.Net_Worth_Millions DESC  LIMIT 1

index is 1011
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
What is the name of the singer who is worth the most?
SQL correction:
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
original correction:
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1

index is 1012
SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship
Show different citizenship of singers and the number of singers of each citizenship.
SQL correction:
SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship
original correction:
SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship

index is 1013
SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship
For each citizenship, how many singers are from that country?
SQL correction:
SELECT Citizenship, COUNT(DISTINCT Singer_ID) FROM singer GROUP BY Citizenship
original correction:
SELECT Citizenship, COUNT(DISTINCT Singer_ID) FROM singer GROUP BY Citizenship

index is 1014
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1
Please show the most common citizenship of singers.
SQL correction:
SELECT Citizenship, COUNT(*) AS Count  FROM singer  GROUP BY Citizenship  ORDER BY Count DESC  LIMIT 1
original correction:
SELECT Citizenship, COUNT(*) AS Count  FROM singer  GROUP BY Citizenship  ORDER BY Count DESC  LIMIT 1

index is 1015
select citizenship from singer group by citizenship order by count(*) desc limit 1
What is the most common singer citizenship ?
SQL correction:
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1
original correction:
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1

index is 1016
SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship
Show different citizenships and the maximum net worth of singers of each citizenship.
SQL correction:
SELECT Citizenship, MAX(Net_Worth_Millions)  FROM singer  GROUP BY Citizenship
original correction:
SELECT Citizenship, MAX(Net_Worth_Millions)  FROM singer  GROUP BY Citizenship

index is 1017
SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship
For each citizenship, what is the maximum net worth?
SQL correction:
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship
original correction:
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship

index is 1018
SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID
Show titles of songs and names of singers.
SQL correction:
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID
original correction:
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID

index is 1019
SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID
What are the song titles and singer names?
SQL correction:
SELECT Title, Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID
original correction:
SELECT Title, Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID

index is 1020
SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000
Show distinct names of singers that have songs with sales more than 300000.
SQL correction:
SELECT DISTINCT T1.Name  FROM singer AS T1  JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  WHERE T2.Sales > 300000
original correction:
SELECT DISTINCT T1.Name  FROM singer AS T1  JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  WHERE T2.Sales > 300000

index is 1021
SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000
what are the different names of the singers that have sales more than 300000?
SQL correction:
SELECT Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Sales > 300000
original correction:
SELECT Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Sales > 300000

index is 1022
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1
Show the names of singers that have more than one song.
SQL correction:
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1
original correction:
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1

index is 1023
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1
What are the names of the singers that have more than one songs?
SQL correction:
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1
original correction:
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1

index is 1024
SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name
Show the names of singers and the total sales of their songs.
SQL correction:
SELECT T1.Name, SUM(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name
original correction:
SELECT T1.Name, SUM(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name

index is 1025
SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name
For each singer name, what is the total sales for their songs?
SQL correction:
SELECT T1.Name, SUM(T2.Sales)  FROM singer AS T1  JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Name
original correction:
SELECT T1.Name, SUM(T2.Sales)  FROM singer AS T1  JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Name

index is 1026
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
List the name of singers that do not have any song.
SQL correction:
SELECT Name  FROM singer  WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
original correction:
SELECT Name  FROM singer  WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)

index is 1027
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
What is the sname of every sing that does not have any song?
SQL correction:
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song)
original correction:
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song)

index is 1028
SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955
Show the citizenship shared by singers with birth year before 1945 and after 1955.
SQL correction:
SELECT DISTINCT Citizenship  FROM singer  WHERE Birth_Year < 1945 OR Birth_Year > 1955
original correction:
SELECT DISTINCT Citizenship  FROM singer  WHERE Birth_Year < 1945 OR Birth_Year > 1955

index is 1029
SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955
What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?
SQL correction:
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955
original correction:
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955

index is 1030
SELECT count(*) FROM Other_Available_Features
How many available features are there in total?
SQL correction:
SELECT COUNT(*) AS total_available_features FROM Other_Available_Features
original correction:
SELECT COUNT(*) AS total_available_features FROM Other_Available_Features

index is 1031
SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  "AirCon"
What is the feature type name of feature AirCon?
SQL correction:
SELECT Ref_Feature_Types.feature_type_name  FROM Ref_Feature_Types JOIN Other_Available_Features ON Ref_Feature_Types.feature_type_code = Other_Available_Features.feature_type_code WHERE Other_Available_Features.feature_name = 'AirCon'
entities correction:
SELECT Ref_Feature_Types.feature_type_name  FROM Ref_Feature_Types  JOIN Other_Available_Features ON Ref_Feature_Types.feature_type_code = Other_Available_Features.feature_type_code  WHERE Other_Available_Features.feature_name = 'AirCon'

index is 1032
SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code
Show the property type descriptions of properties belonging to that code.
SQL correction:
SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code = 'code'
entities correction:
SELECT 

index is 1033
SELECT property_name FROM Properties WHERE property_type_code  =  "House" UNION SELECT property_name FROM Properties WHERE property_type_code  =  "Apartment" AND room_count  >  1
What are the names of properties that are either houses or apartments with more than 1 room?
SQL correction:
SELECT property_name  FROM Properties  JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code  WHERE (Ref_Property_Types.property_type_description = 'house' OR Ref_Property_Types.property_type_description = 'apartment')  AND room_count > 1
entities correction:
SELECT Properties.property_name  FROM Properties   JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code   WHERE (Ref_Property_Types.property_type_description = 'House' OR Ref_Property_Types.property_type_description = 'Apartment')   AND room_count > 1
