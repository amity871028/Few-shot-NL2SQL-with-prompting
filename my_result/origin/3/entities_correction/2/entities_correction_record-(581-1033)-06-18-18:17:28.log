
index is 581
SELECT section_description FROM Sections WHERE section_name  =  'h'
Describe the section h.
SQL correction:
SELECT Sections.* FROM Sections WHERE Sections.section_id = 'h'
entities correction:
SELECT Sections.* FROM Sections WHERE Sections.section_id = 'h'

index is 582
SELECT section_description FROM Sections WHERE section_name  =  'h'
What is the description for the section named h?
SQL correction:
SELECT section_description FROM Sections WHERE section_name = 'h'
entities correction:
SELECT section_description FROM Sections WHERE section_name = 'h'

index is 583
select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'
Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .
SQL correction:
SELECT first_name  FROM Students  JOIN Addresses ON Students.permanent_address_id = Addresses.address_id  WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'
entities correction:
SELECT first_name  FROM Students  JOIN Addresses ON Students.permanent_address_id = Addresses.address_id  WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'

index is 584
select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'
What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?
SQL correction:
SELECT first_name  FROM Students  WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti')  OR cell_mobile_number = '09700166582'
entities correction:
SELECT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti') OR cell_mobile_number IN ('09700166582')

index is 585
SELECT Title FROM Cartoon ORDER BY title
List the title of all cartoons in alphabetical order.
SQL correction:
SELECT Title FROM Cartoon ORDER BY Title ASC
original correction:
SELECT Title FROM Cartoon ORDER BY Title ASC

index is 586
SELECT Title FROM Cartoon ORDER BY title
What are the titles of the cartoons sorted alphabetically?
SQL correction:
SELECT Title FROM Cartoon ORDER BY Title ASC
original correction:
SELECT Title FROM Cartoon ORDER BY Title ASC

index is 587
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";
List all cartoon directed by "Ben Jones".
SQL correction:
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'
entities correction:
SELECT Title  FROM Cartoon  WHERE Directed_by = 'Ben Jones'

index is 588
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";
What are the names of all cartoons directed by Ben Jones?
SQL correction:
SELECT Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Directed_by = 'Ben Jones'
entities correction:
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'

index is 589
SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
How many cartoons were written by "Joseph Kuhr"?
SQL correction:
SELECT COUNT(DISTINCT id) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
entities correction:
SELECT COUNT(DISTINCT id) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'

index is 590
SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
What is the number of cartoones written by Joseph Kuhr?
SQL correction:
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
entities correction:
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'

index is 591
SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date
list all cartoon titles and their directors ordered by their air date
SQL correction:
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id ORDER BY Cartoon.Original_air_date;
original correction:
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id ORDER BY Cartoon.Original_air_date;

index is 592
SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date
What is the name and directors of all the cartoons that are ordered by air date?
SQL correction:
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id ORDER BY Cartoon.Original_air_date ASC
original correction:
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id ORDER BY Cartoon.Original_air_date ASC

index is 593
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
List the title of all cartoon directed by "Ben Jones" or "Brandon Vietti".
SQL correction:
SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti')
entities correction:
SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti')

index is 594
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?
SQL correction:
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'
entities correction:
SELECT Title  FROM Cartoon  WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'

index is 595
SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;
Which country has the most of TV Channels? List the country and number of TV Channels it has.
SQL correction:
SELECT Country, COUNT(*) AS NumChannels FROM TV_Channel GROUP BY Country ORDER BY NumChannels DESC LIMIT 1
original correction:
SELECT Country, COUNT(*) AS NumChannels FROM TV_Channel GROUP BY Country ORDER BY NumChannels DESC LIMIT 1

index is 596
SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;
What is the country with the most number of TV Channels and how many does it have?
SQL correction:
SELECT Country, COUNT(id) AS channel_count  FROM TV_Channel  GROUP BY Country  ORDER BY channel_count DESC  LIMIT 1
original correction:
SELECT Country, COUNT(id) AS channel_count  FROM TV_Channel  GROUP BY Country  ORDER BY channel_count DESC  LIMIT 1

index is 597
SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;
List the number of different series names and contents in the TV Channel table.
SQL correction:
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel
original correction:
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel

index is 598
SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;
How many different series and contents are listed in the TV Channel table?
SQL correction:
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;
original correction:
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;

index is 599
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
What is the content of TV Channel with serial name "Sky Radio"?
SQL correction:
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'
entities correction:
SELECT Content  FROM TV_Channel  WHERE series_name = 'Sky Radio'

index is 600
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
What is the content of the series Sky Radio?
SQL correction:
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'
entities correction:
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'

index is 601
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
What is the Package Option of TV Channel with serial name "Sky Radio"?
SQL correction:
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'
entities correction:
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'

index is 602
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
What are the Package Options of the TV Channels whose series names are Sky Radio?
SQL correction:
SELECT Package_Option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = 'Sky Radio'
entities correction:
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'

index is 603
SELECT count(*) FROM TV_Channel WHERE LANGUAGE = "English";
How many TV Channel using language English?
SQL correction:
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'
entities correction:
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'

index is 604
SELECT count(*) FROM TV_Channel WHERE LANGUAGE = "English";
How many TV Channels use the English language?
SQL correction:
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'
entities correction:
SELECT COUNT(*) FROM TV_Channel WHERE UPPER(Language) = 'ENGLISH'

index is 605
SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
List the language used least number of TV Channel. List language and number of TV Channel.
SQL correction:
SELECT TV_Channel.Language, COUNT(TV_Channel.id) AS Channel_Count FROM TV_Channel GROUP BY TV_Channel.Language ORDER BY Channel_Count ASC LIMIT 1
original correction:
SELECT TV_Channel.Language, COUNT(TV_Channel.id) AS Channel_Count FROM TV_Channel GROUP BY TV_Channel.Language ORDER BY Channel_Count ASC LIMIT 1

index is 606
SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
What are the languages used by the least number of TV Channels and how many channels use it?
SQL correction:
SELECT Language, COUNT(*) AS channel_count  FROM TV_Channel  GROUP BY Language  ORDER BY channel_count ASC  LIMIT 1
original correction:
SELECT Language, COUNT(*) AS channel_count  FROM TV_Channel  GROUP BY Language  ORDER BY channel_count ASC  LIMIT 1

index is 607
SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE
List each language and the number of TV Channels using it.
SQL correction:
SELECT Language, COUNT(DISTINCT TV_Channel.id) AS num_channels FROM TV_Channel GROUP BY Language
original correction:
SELECT Language, COUNT(DISTINCT TV_Channel.id) AS num_channels FROM TV_Channel GROUP BY Language

index is 608
SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE
For each language, list the number of TV Channels that use it.
SQL correction:
SELECT Language, COUNT(DISTINCT id) FROM TV_Channel GROUP BY Language
original correction:
SELECT Language, COUNT(DISTINCT id) FROM TV_Channel GROUP BY Language

index is 609
SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!";
What is the TV Channel that shows the cartoon "The Rise of the Blue Beetle!"? List the TV Channel's series name.
SQL correction:
SELECT T1.series_name  FROM TV_Channel AS T1  JOIN Cartoon AS T2 ON T2.Channel = T1.id  WHERE T2.Title = 'The Rise of the Blue Beetle!';
entities correction:
SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T2.Channel = T1.id WHERE T2.Title = 'The Rise of the Blue Beetle!';

index is 610
SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!";
What is the series name of the TV Channel that shows the cartoon "The Rise of the Blue Beetle"?
SQL correction:
SELECT TV_Channel.series_name FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = "The Rise of the Blue Beetle";
entities correction:
SELECT TV_Channel.series_name FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Title = 'The Rise of the Blue Beetle';

index is 611
SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
List the title of all  Cartoons showed on TV Channel with series name "Sky Radio".
SQL correction:
SELECT Cartoon.Title  FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE TV_Channel.series_name = 'Sky Radio'
entities correction:
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';

index is 612
SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
What is the title of all the cartools that are on the TV Channel with the series name "Sky Radio"?
SQL correction:
SELECT SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
entities correction:
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';

index is 613
SELECT Episode FROM TV_series ORDER BY rating
List the Episode of all TV series sorted by rating.
SQL correction:
SELECT TV_series.Episode  FROM TV_series  ORDER BY TV_series.Rating DESC
original correction:
SELECT TV_series.Episode  FROM TV_series  ORDER BY TV_series.Rating DESC

index is 614
SELECT Episode FROM TV_series ORDER BY rating
What are all of the episodes ordered by ratings?
SQL correction:
SELECT TV_series.*, Cartoon.Title FROM TV_series JOIN Cartoon ON TV_series.Channel = Cartoon.Channel ORDER BY TV_series.Rating DESC
original correction:
SELECT TV_series.*, Cartoon.Title FROM TV_series JOIN Cartoon ON TV_series.Channel = Cartoon.Channel ORDER BY TV_series.Rating DESC

index is 615
SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
List top 3 highest Rating  TV series. List the TV series's Episode and Rating.
SQL correction:
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3
original correction:
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3

index is 616
SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
What are 3 most highly rated episodes in the TV series table and what were those ratings?
SQL correction:
SELECT TV_series.Episode, TV_series.Rating FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id ORDER BY TV_series.Rating DESC LIMIT 3
original correction:
SELECT TV_series.Episode, TV_series.Rating FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id ORDER BY TV_series.Rating DESC LIMIT 3

index is 617
SELECT max(SHARE) , min(SHARE) FROM TV_series;
What is minimum and maximum share of TV series?
SQL correction:
SELECT MIN(Share), MAX(Share) FROM TV_series
original correction:
SELECT MIN(Share), MAX(Share) FROM TV_series

index is 618
SELECT max(SHARE) , min(SHARE) FROM TV_series;
What is the maximum and minimum share for the TV series?
SQL correction:
SELECT MAX(Share) AS Maximum_Share, MIN(Share) AS Minimum_Share FROM TV_series;
original correction:
SELECT MAX(Share) AS Maximum_Share, MIN(Share) AS Minimum_Share FROM TV_series;

index is 619
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
What is the air date of TV series with Episode "A Love of a Lifetime"?
SQL correction:
SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = 'A Love of a Lifetime'
entities correction:
SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = 'A Love of a Lifetime'

index is 620
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
When did the episode "A Love of a Lifetime" air?
SQL correction:
SELECT TV_series.Air_Date  FROM Cartoon  JOIN TV_series ON Cartoon.id = TV_series.id  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Title = 'A Love of a Lifetime'
entities correction:
SELECT TV_series.Air_Date FROM Cartoon JOIN TV_series ON Cartoon.id = TV_series.id JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'A Love of a Lifetime'

index is 621
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
What is Weekly Rank of TV series with Episode "A Love of a Lifetime"?
SQL correction:
SELECT SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime"
entities correction:
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime"

index is 622
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
What is the weekly rank for the episode "A Love of a Lifetime"?
SQL correction:
SELECT The provided tables, columns, foreign keys, and primary keys are not sufficient to generate the SQL query for the given question. To fix the query, we need access to the tables related to the episode and its weekly rank. Please provide the schema links or additional information related to these tables so that I can assist you further.
original correction:
SELECT The provided tables, columns, foreign keys, and primary keys are not sufficient to generate the SQL query for the given question. To fix the query, we need access to the tables related to the episode and its weekly rank. Please provide the schema links or additional information related to these tables so that I can assist you further.

index is 623
SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";
What is the TV Channel of TV series with Episode "A Love of a Lifetime"? List the TV Channel's series name.
SQL correction:
SELECT TV_Channel.series_name  FROM TV_Channel  JOIN TV_series ON TV_Channel.id = TV_series.Channel  WHERE TV_series.Episode = 'A Love of a Lifetime'
entities correction:
SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = 'A Love of a Lifetime'

index is 624
SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";
What is the name of the series that has the episode "A Love of a Lifetime"?
SQL correction:
SELECT series_name  FROM TV_series  WHERE Episode = 'A Love of a Lifetime'
entities correction:
SELECT series_name FROM TV_series WHERE Episode = 'A Love of a Lifetime'

index is 625
SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
List the Episode of all  TV series showed on TV Channel with series name "Sky Radio".
SQL correction:
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio'
entities correction:
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio'

index is 626
SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
What is the episode for the TV series named "Sky Radio"?
SQL correction:
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"
entities correction:
SELECT TV_series.Episode FROM TV_series  JOIN TV_Channel ON TV_series.Channel = TV_Channel.id  WHERE TV_Channel.series_name = 'Sky Radio'

index is 627
SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by
Find the number of cartoons directed by each of the listed directors.
SQL correction:
SELECT Directed_by, COUNT(*)  FROM Cartoon  WHERE Directed_by IN ('Director1', 'Director2', 'Director3')  GROUP BY Directed_by
entities correction:
SELECT Directed_by, COUNT(*)   FROM Cartoon   WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti', 'Michael Chang')   GROUP BY Directed_by

index is 628
SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by
How many cartoons did each director create?
SQL correction:
SELECT Directed_by, COUNT(*)  FROM Cartoon  GROUP BY Directed_by
original correction:
SELECT Directed_by, COUNT(*)  FROM Cartoon  GROUP BY Directed_by

index is 629
select production_code ,  channel from cartoon order by original_air_date desc limit 1
Find the production code and channel of the most recently aired cartoon .
SQL correction:
SELECT Cartoon.Production_code, TV_Channel.series_name AS Channel FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id ORDER BY Cartoon.Original_air_date DESC LIMIT 1
original correction:
SELECT Cartoon.Production_code, TV_Channel.series_name AS Channel FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id ORDER BY Cartoon.Original_air_date DESC LIMIT 1

index is 630
select production_code ,  channel from cartoon order by original_air_date desc limit 1
What is the produdction code and channel of the most recent cartoon ?
SQL correction:
SELECT Production_code, Cartoon.Channel FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)
original correction:
SELECT Production_code, Cartoon.Channel FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)

index is 631
SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"
Find the package choice and series name of the TV channel that has high definition TV.
SQL correction:
SELECT Package_Option, series_name FROM TV_Channel WHERE High_definition_TV = 1
original correction:
SELECT Package_Option, series_name FROM TV_Channel WHERE High_definition_TV = 1

index is 632
SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"
What are the package options and the name of the series for the TV Channel that supports high definition TV?
SQL correction:
SELECT Package_Option, series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE Hight_definition_TV = 1
original correction:
SELECT Package_Option, series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE Hight_definition_TV = 1

index is 633
SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
which countries' tv channels are playing some cartoon written by Todd Casey?
SQL correction:
SELECT Country FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';
entities correction:
SELECT Country  FROM TV_Channel  JOIN Cartoon ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Written_by = 'Todd Casey';

index is 634
SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
What are the countries that have cartoons on TV that were written by Todd Casey?
SQL correction:
SELECT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'Todd Casey'
entities correction:
SELECT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel JOIN TV_series ON Cartoon.id = TV_series.id WHERE Cartoon.Written_by = 'Todd Casey'

index is 635
SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
which countries' tv channels are not playing any cartoon written by Todd Casey?
SQL correction:
SELECT DISTINCT T1.Country FROM TV_Channel AS T1 LEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by <> 'Todd Casey' OR T2.Written_by IS NULL
entities correction:
SELECT DISTINCT T1.Country  FROM TV_Channel AS T1  LEFT JOIN Cartoon AS T2  ON T1.id = T2.Channel  WHERE T2.Written_by <> 'Todd Casey' OR T2.Written_by IS NULL

index is 636
SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
What are the countries that are not playing cartoons written by Todd Casey?
SQL correction:
SELECT DISTINCT Country  FROM TV_Channel  WHERE id NOT IN (     SELECT Channel      FROM Cartoon      WHERE Written_by = 'Todd Casey' )
entities correction:
SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (     SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey' )

index is 637
SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?
SQL correction:
SELECT TV_Channel.series_name, TV_Channel.Country  FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')
entities correction:
SELECT TV_Channel.series_name, TV_Channel.Country   FROM Cartoon   JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id   WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')

index is 638
SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?
SQL correction:
SELECT TV_Channel.series_name, TV_Channel.Country  FROM TV_Channel  JOIN Cartoon ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Michael Chang'
entities correction:
SELECT TV_Channel.series_name, TV_Channel.Country   FROM TV_Channel   JOIN Cartoon ON Cartoon.Channel = TV_Channel.id   WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')

index is 639
SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'
find the pixel aspect ratio and nation of the tv channels that do not use English.
SQL correction:
SELECT Pixel_aspect_ratio_PAR, Country  FROM TV_Channel  WHERE Language != 'English'
entities correction:
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE language != 'English'

index is 640
SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'
What is the pixel aspect ratio and country of origin for all TV channels that do not use English?
SQL correction:
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> 'English'
entities correction:
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language IN ('Italian')

index is 641
SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2
find id of the tv channels that from the countries where have more than two tv channels.
SQL correction:
SELECT TV_Channel.id  FROM TV_Channel  GROUP BY TV_Channel.Country  HAVING COUNT(*) > 2
original correction:
SELECT TV_Channel.id  FROM TV_Channel  GROUP BY TV_Channel.Country  HAVING COUNT(*) > 2

index is 642
SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2
What are the ids of all tv channels that have more than 2 TV channels?
SQL correction:
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.id HAVING COUNT(*) > 2
original correction:
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.id HAVING COUNT(*) > 2

index is 643
SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'
find the id of tv channels that do not play any cartoon directed by Ben Jones.
SQL correction:
SELECT TV_Channel.id FROM TV_Channel LEFT JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by <> 'Ben Jones' OR Cartoon.Directed_by IS NULL
entities correction:
SELECT TV_Channel.id FROM TV_Channel LEFT JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by <> 'Ben Jones' OR Cartoon.Directed_by IS NULL

index is 644
SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'
What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?
SQL correction:
SELECT TV_Channel.id  FROM TV_Channel  WHERE TV_Channel.id NOT IN      (SELECT Cartoon.Channel      FROM Cartoon      WHERE Cartoon.Directed_by = 'Ben Jones')
entities correction:
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones' AND Cartoon.Channel IS NOT NULL)

index is 645
SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')
find the package option of the tv channel that do not have any cartoon directed by Ben Jones.
SQL correction:
SELECT Package_Option  FROM TV_Channel  WHERE id NOT IN (   SELECT T1.id    FROM TV_Channel AS T1    JOIN Cartoon AS T2 ON T1.id = T2.Channel    WHERE T2.Directed_by = 'Ben Jones' )
entities correction:
SELECT Package_Option FROM TV_Channel WHERE id NOT IN (   SELECT T1.id   FROM TV_Channel AS T1   LEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel   WHERE T2.Directed_by = 'Ben Jones' )

index is 646
SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')
What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?
SQL correction:
SELECT Package_Option FROM TV_Channel WHERE id NOT IN      (SELECT Channel      FROM Cartoon      WHERE Directed_by = 'Ben Jones')
entities correction:
SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')

index is 647
SELECT count(*) FROM poker_player
How many poker players are there?
SQL correction:
SELECT COUNT(DISTINCT Poker_Player_ID) FROM poker_player
original correction:
SELECT COUNT(DISTINCT Poker_Player_ID) FROM poker_player

index is 648
SELECT count(*) FROM poker_player
Count the number of poker players.
SQL correction:
SELECT COUNT(DISTINCT People_ID) FROM poker_player
original correction:
SELECT COUNT(DISTINCT People_ID) FROM poker_player

index is 649
SELECT Earnings FROM poker_player ORDER BY Earnings DESC
List the earnings of poker players in descending order.
SQL correction:
SELECT poker_player.Earnings  FROM poker_player  ORDER BY Earnings DESC
original correction:
SELECT poker_player.Earnings  FROM poker_player  ORDER BY Earnings DESC

index is 650
SELECT Earnings FROM poker_player ORDER BY Earnings DESC
What are the earnings of poker players, ordered descending by value?
SQL correction:
SELECT poker_player.Earnings  FROM poker_player  ORDER BY poker_player.Earnings DESC
original correction:
SELECT poker_player.Earnings  FROM poker_player  ORDER BY poker_player.Earnings DESC

index is 651
SELECT Final_Table_Made ,  Best_Finish FROM poker_player
List the final tables made and the best finishes of poker players.
SQL correction:
SELECT Final_Table_Made, Best_Finish FROM poker_player
original correction:
SELECT Final_Table_Made, Best_Finish FROM poker_player

index is 652
SELECT Final_Table_Made ,  Best_Finish FROM poker_player
What are the final tables made and best finishes for all poker players?
SQL correction:
SELECT Final_Table_Made, Best_Finish  FROM poker_player
original correction:
SELECT Final_Table_Made, Best_Finish  FROM poker_player

index is 653
SELECT avg(Earnings) FROM poker_player
What is the average earnings of poker players?
SQL correction:
SELECT AVG(Earnings) FROM poker_player
original correction:
SELECT AVG(Earnings) FROM poker_player

index is 654
SELECT avg(Earnings) FROM poker_player
Return the average earnings across all poker players.
SQL correction:
SELECT avg(Earnings) FROM poker_player
original correction:
SELECT avg(Earnings) FROM poker_player

index is 655
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
What is the money rank of the poker player with the highest earnings?
SQL correction:
SELECT Money_Rank  FROM poker_player  WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)
original correction:
SELECT Money_Rank  FROM poker_player  WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)

index is 656
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
Return the money rank of the player with the greatest earnings.
SQL correction:
SELECT poker_player.Money_Rank FROM poker_player ORDER BY poker_player.Earnings DESC LIMIT 1
original correction:
SELECT poker_player.Money_Rank FROM poker_player ORDER BY poker_player.Earnings DESC LIMIT 1

index is 657
SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000
What is the maximum number of final tables made among poker players with earnings less than 200000?
SQL correction:
SELECT MAX(Final_Table_Made)  FROM poker_player  WHERE Earnings < 200000;
original correction:
SELECT MAX(Final_Table_Made)  FROM poker_player  WHERE Earnings < 200000;

index is 658
SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000
Return the maximum final tables made across all poker players who have earnings below 200000.
SQL correction:
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000
original correction:
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000

index is 659
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID
What are the names of poker players?
SQL correction:
SELECT Name FROM people
original correction:
SELECT Name FROM people

index is 660
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID
Return the names of all the poker players.
SQL correction:
SELECT Name FROM people
original correction:
SELECT Name FROM people

index is 661
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000
What are the names of poker players whose earnings is higher than 300000?
SQL correction:
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000
original correction:
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000

index is 662
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000
Give the names of poker players who have earnings above 300000.
SQL correction:
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000
original correction:
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000

index is 663
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made
List the names of poker players ordered by the final tables made in ascending order.
SQL correction:
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC
original correction:
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC

index is 664
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made
What are the names of poker players, ordered ascending by the number of final tables they have made?
SQL correction:
SELECT T1.Name  FROM people AS T1  JOIN poker_player AS T2 ON T2.People_ID = T1.People_ID  ORDER BY T2.Final_Table_Made ASC
original correction:
SELECT T1.Name  FROM people AS T1  JOIN poker_player AS T2 ON T2.People_ID = T1.People_ID  ORDER BY T2.Final_Table_Made ASC

index is 665
SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1
What is the birth date of the poker player with the lowest earnings?
SQL correction:
SELECT P.Birth_Date FROM people AS P JOIN poker_player AS PP ON P.People_ID = PP.People_ID ORDER BY PP.Earnings ASC LIMIT 1
original correction:
SELECT P.Birth_Date FROM people AS P JOIN poker_player AS PP ON P.People_ID = PP.People_ID ORDER BY PP.Earnings ASC LIMIT 1

index is 666
SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1
Return the birth date of the poker player with the lowest earnings.
SQL correction:
SELECT people.Birth_Date  FROM poker_player  JOIN people ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Earnings ASC  LIMIT 1
original correction:
SELECT people.Birth_Date  FROM poker_player  JOIN people ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Earnings ASC  LIMIT 1

index is 667
SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1
What is the money rank of the tallest poker player?
SQL correction:
SELECT Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1
original correction:
SELECT Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1

index is 668
SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1
Return the money rank of the poker player with the greatest height.
SQL correction:
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1
original correction:
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1

index is 669
SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200
What is the average earnings of poker players with height higher than 200?
SQL correction:
SELECT AVG(poker_player.Earnings) AS Average_Earnings FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200
original correction:
SELECT AVG(poker_player.Earnings) AS Average_Earnings FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200

index is 670
SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200
Give average earnings of poker players who are taller than 200.
SQL correction:
SELECT avg(poker_player.Earnings) FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  WHERE people.Height > 200
original correction:
SELECT avg(poker_player.Earnings) FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  WHERE people.Height > 200

index is 671
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC
What are the names of poker players in descending order of earnings?
SQL correction:
SELECT people.Name  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Earnings DESC
original correction:
SELECT people.Name  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Earnings DESC

index is 672
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC
Return the names of poker players sorted by their earnings descending.
SQL correction:
SELECT people.Name  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Earnings DESC
original correction:
SELECT people.Name  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Earnings DESC

index is 673
SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality
What are different nationalities of people and the corresponding number of people from each nation?
SQL correction:
SELECT Nationality, COUNT(*)  FROM people  GROUP BY Nationality
original correction:
SELECT Nationality, COUNT(*)  FROM people  GROUP BY Nationality

index is 674
SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality
How many people are there of each nationality?
SQL correction:
SELECT Nationality, COUNT(*)  FROM people  GROUP BY Nationality
original correction:
SELECT Nationality, COUNT(*)  FROM people  GROUP BY Nationality

index is 675
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
What is the most common nationality of people?
SQL correction:
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
original correction:
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1

index is 676
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
Give the nationality that is most common across all people.
SQL correction:
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
original correction:
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1

index is 677
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2
What are the nationalities that are shared by at least two people?
SQL correction:
SELECT Nationality FROM people WHERE Nationality IN (   SELECT Nationality   FROM people   GROUP BY Nationality   HAVING COUNT(*) >= 2 )
original correction:
SELECT Nationality FROM people WHERE Nationality IN (   SELECT Nationality   FROM people   GROUP BY Nationality   HAVING COUNT(*) >= 2 )

index is 678
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2
Return the nationalities for which there are two or more people.
SQL correction:
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(DISTINCT People_ID) >= 2
original correction:
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(DISTINCT People_ID) >= 2

index is 679
SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC
List the names and birth dates of people in ascending alphabetical order of name.
SQL correction:
SELECT Name, Birth_Date FROM people ORDER BY Name ASC
original correction:
SELECT Name, Birth_Date FROM people ORDER BY Name ASC

index is 680
SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC
What are the names and birth dates of people, ordered by their names in alphabetical order?
SQL correction:
SELECT Name, Birth_Date FROM people ORDER BY Name ASC
original correction:
SELECT Name, Birth_Date FROM people ORDER BY Name ASC

index is 681
SELECT Name FROM people WHERE Nationality != "Russia"
Show names of people whose nationality is not "Russia".
SQL correction:
SELECT Name FROM people WHERE Nationality <> 'Russia'
entities correction:
SELECT Name FROM people WHERE Nationality <> 'Russia'

index is 682
SELECT Name FROM people WHERE Nationality != "Russia"
What are the names of people who are not from Russia?
SQL correction:
SELECT Name FROM people WHERE Nationality <> 'Russia'
entities correction:
SELECT Name FROM people WHERE Nationality NOT IN ('Russia')

index is 683
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
List the names of people that are not poker players.
SQL correction:
SELECT Name FROM people LEFT JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Poker_Player_ID IS NULL
original correction:
SELECT Name FROM people LEFT JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Poker_Player_ID IS NULL

index is 684
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
What are the names of people who do not play poker?
SQL correction:
SELECT Name  FROM people  WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
original correction:
SELECT Name  FROM people  WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)

index is 685
SELECT count(DISTINCT Nationality) FROM people
How many distinct nationalities are there?
SQL correction:
SELECT COUNT(DISTINCT Nationality) FROM people
original correction:
SELECT COUNT(DISTINCT Nationality) FROM people

index is 686
SELECT count(DISTINCT Nationality) FROM people
Count the number of different nationalities.
SQL correction:
SELECT COUNT(DISTINCT Nationality) FROM people
original correction:
SELECT COUNT(DISTINCT Nationality) FROM people

index is 687
SELECT count(*) FROM area_code_state
How many states are there?
SQL correction:
SELECT COUNT(DISTINCT state) AS state_count FROM AREA_CODE_STATE
original correction:
SELECT COUNT(DISTINCT state) AS state_count FROM AREA_CODE_STATE

index is 688
SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC
List the contestant numbers and names, ordered by contestant name descending.
SQL correction:
SELECT contestant_number, contestant_name  FROM CONTESTANTS  ORDER BY contestant_name DESC
original correction:
SELECT contestant_number, contestant_name  FROM CONTESTANTS  ORDER BY contestant_name DESC

index is 689
SELECT vote_id ,  phone_number ,  state FROM votes
List the vote ids, phone numbers and states of all votes.
SQL correction:
SELECT vote_id, phone_number, state FROM VOTES
original correction:
SELECT vote_id, phone_number, state FROM VOTES

index is 690
SELECT max(area_code) ,  min(area_code) FROM area_code_state
What are the maximum and minimum values of area codes?
SQL correction:
SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE
original correction:
SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE

index is 691
SELECT max(created) FROM votes WHERE state  =  'CA'
What is last date created of votes from the state 'CA'?
SQL correction:
SELECT MAX(created)  FROM VOTES  JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state  WHERE AREA_CODE_STATE.state = 'CA'
entities correction:
SELECT MAX(created) FROM VOTES JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state WHERE VOTES.state = 'CA'

index is 692
SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'
What are the names of the contestants whose names are not 'Jessie Alloway'
SQL correction:
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name <> 'Jessie Alloway'
entities correction:
SELECT contestant_name  FROM CONTESTANTS  WHERE contestant_name <> 'Jessie Alloway'

index is 693
SELECT DISTINCT state ,  created FROM votes
What are the distinct states and create time of all votes?
SQL correction:
SELECT DISTINCT state, created FROM VOTES
original correction:
SELECT DISTINCT state, created FROM VOTES

index is 694
SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2
What are the contestant numbers and names of the contestants who had at least two votes?
SQL correction:
SELECT T1.contestant_number, T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number, T1.contestant_name HAVING COUNT(T2.vote_id) >= 2
original correction:
SELECT T1.contestant_number, T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number, T1.contestant_name HAVING COUNT(T2.vote_id) >= 2

index is 695
SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1
Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?
SQL correction:
SELECT contestant_number, contestant_name  FROM CONTESTANTS  WHERE contestant_number IN (   SELECT contestant_number    FROM VOTES    GROUP BY contestant_number    HAVING COUNT(*) = (     SELECT MIN(vote_count)      FROM (       SELECT contestant_number, COUNT(*) as vote_count        FROM VOTES        GROUP BY contestant_number     ) as vote_counts   ) )
original correction:
SELECT contestant_number, contestant_name  FROM CONTESTANTS  WHERE contestant_number IN (   SELECT contestant_number    FROM VOTES    GROUP BY contestant_number    HAVING COUNT(*) = (     SELECT MIN(vote_count)      FROM (       SELECT contestant_number, COUNT(*) as vote_count        FROM VOTES        GROUP BY contestant_number     ) as vote_counts   ) )

index is 696
SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'
What are the number of votes from state 'NY' or 'CA'?
SQL correction:
SELECT COUNT(*) FROM VOTES WHERE state IN ('NY', 'CA')
entities correction:
SELECT COUNT(*) FROM VOTES WHERE state IN ('NY', 'CA')

index is 697
SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )
How many contestants did not get voted?
SQL correction:
SELECT count(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)
original correction:
SELECT count(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)

index is 698
SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1
What is the area code in which the most voters voted?
SQL correction:
SELECT T2.area_code FROM VOTES AS T1 JOIN AREA_CODE_STATE AS T2 ON T1.state = T2.state GROUP BY T2.area_code ORDER BY COUNT(*) DESC LIMIT 1
original correction:
SELECT T2.area_code FROM VOTES AS T1 JOIN AREA_CODE_STATE AS T2 ON T1.state = T2.state GROUP BY T2.area_code ORDER BY COUNT(*) DESC LIMIT 1

index is 699
SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'
What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?
SQL correction:
SELECT created, state, phone_number FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling';
entities correction:
SELECT created, state, phone_number  FROM VOTES  JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number  WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling';

index is 700
SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'
List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.
SQL correction:
SELECT T1.area_code  FROM AREA_CODE_STATE AS T1  JOIN VOTES AS T2 ON T1.state = T2.state  JOIN CONTESTANTS AS T3 ON T2.contestant_number = T3.contestant_number  WHERE T3.contestant_name = 'Tabatha Gehling'    AND T1.area_code IN (     SELECT T1.area_code      FROM AREA_CODE_STATE AS T1      JOIN VOTES AS T2 ON T1.state = T2.state      JOIN CONTESTANTS AS T3 ON T2.contestant_number = T3.contestant_number      WHERE T3.contestant_name = 'Kelly Clauss'   )
entities correction:
SELECT T1.area_code  FROM AREA_CODE_STATE AS T1  JOIN VOTES AS T2 ON T1.state = T2.state  JOIN CONTESTANTS AS T3 ON T2.contestant_number = T3.contestant_number  WHERE T3.contestant_name = 'Tabatha Gehling'  AND T1.area_code IN (     SELECT T1.area_code      FROM AREA_CODE_STATE AS T1      JOIN VOTES AS T2 ON T1.state = T2.state      JOIN CONTESTANTS AS T3 ON T2.contestant_number = T3.contestant_number      WHERE T3.contestant_name = 'Kelly Clauss' )

index is 701
select contestant_name from contestants where contestant_name like "%al%"
Return the names of the contestants whose names contain the substring 'Al' .
SQL correction:
SELECT contestant_name  FROM CONTESTANTS  WHERE contestant_name LIKE '%Al%'
entities correction:
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'

index is 702
SELECT Name FROM country WHERE IndepYear  >  1950
What are the names of all the countries that became independent after 1950?
SQL correction:
SELECT country.Name FROM country WHERE country.IndepYear > 1950
original correction:
SELECT country.Name FROM country WHERE country.IndepYear > 1950

index is 703
SELECT Name FROM country WHERE IndepYear  >  1950
Give the names of the nations that were founded after 1950.
SQL correction:
SELECT Name FROM country WHERE IndepYear > 1950
original correction:
SELECT Name FROM country WHERE IndepYear > 1950

index is 704
SELECT count(*) FROM country WHERE GovernmentForm  =  "Republic"
How many countries have a republic as their form of government?
SQL correction:
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic'
entities correction:
SELECT COUNT(*) FROM country WHERE governmentform = 'Republic'

index is 705
SELECT count(*) FROM country WHERE GovernmentForm  =  "Republic"
How many countries have governments that are republics?
SQL correction:
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic'
entities correction:
SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%'

index is 706
SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"
What is the total surface area of the countries in the Caribbean region?
SQL correction:
SELECT SUM(SurfaceArea)  FROM country  WHERE Region = 'Caribbean'
entities correction:
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE region = 'Caribbean'

index is 707
SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"
How much surface area do the countires in the Carribean cover together?
SQL correction:
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'
entities correction:
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'

index is 708
SELECT Continent FROM country WHERE Name  =  "Anguilla"
Which continent is Anguilla in?
SQL correction:
SELECT Continent FROM country WHERE country.Code IN (SELECT CountryCode FROM city WHERE Name = 'Anguilla')
entities correction:
SELECT Continent FROM country WHERE country.Code IN (SELECT CountryCode FROM city WHERE Name = 'Anguilla')

index is 709
SELECT Continent FROM country WHERE Name  =  "Anguilla"
What is the continent name which Anguilla belongs to?
SQL correction:
SELECT Continent FROM country WHERE Code = (SELECT CountryCode FROM city WHERE Name = 'Anguilla')
entities correction:
SELECT Continent FROM country WHERE Code = (SELECT CountryCode FROM city WHERE Name = 'Anguilla')

index is 710
SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"
Which region is the city Kabul located in?
SQL correction:
SELECT country.Region FROM country JOIN city ON city.CountryCode = country.Code WHERE city.Name = 'Kabul'
entities correction:
SELECT country.Region FROM country JOIN city ON city.CountryCode = country.Code WHERE city.Name = 'Kabul'

index is 711
SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"
What region is Kabul in?
SQL correction:
SELECT country.Region  FROM country  JOIN city ON city.CountryCode = country.Code  WHERE city.Name = 'Kabul'
entities correction:
SELECT country.Region FROM country JOIN city ON city.CountryCode = country.Code WHERE city.Name = 'Kabul'

index is 712
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1
Which language is the most popular in Aruba?
SQL correction:
SELECT countrylanguage.Language FROM countrylanguage JOIN city ON city.CountryCode = countrylanguage.CountryCode JOIN country ON country.Code = city.CountryCode WHERE city.Name = 'Aruba' GROUP BY countrylanguage.Language ORDER BY SUM(countrylanguage.Percentage) DESC LIMIT 1
entities correction:
SELECT countrylanguage.Language  FROM countrylanguage  JOIN city ON city.CountryCode = countrylanguage.CountryCode  JOIN country ON country.Code = city.CountryCode  WHERE city.Name = 'Aruba'  GROUP BY countrylanguage.Language  ORDER BY SUM(countrylanguage.Percentage) DESC  LIMIT 1

index is 713
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1
What language is predominantly spoken in Aruba?
SQL correction:
SELECT T1.Language FROM countrylanguage AS T1 JOIN city AS T2 ON T2.CountryCode = T1.CountryCode JOIN country AS T3 ON T3.Code = T2.CountryCode WHERE T2.Name = 'Aruba' GROUP BY T1.Language ORDER BY T1.Percentage DESC LIMIT 1
entities correction:
SELECT T1.Language FROM countrylanguage AS T1 JOIN city AS T2 ON T2.CountryCode = T1.CountryCode JOIN country AS T3 ON T3.Code = T2.CountryCode WHERE T2.Name = 'Aruba' GROUP BY T1.Language ORDER BY T1.Percentage DESC LIMIT 1

index is 714
SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"
What are the population and life expectancies in Brazil?
SQL correction:
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'
entities correction:
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'

index is 715
SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"
Give me Brazil’s population and life expectancies.
SQL correction:
SELECT country.Population, country.LifeExpectancy FROM country INNER JOIN city ON country.Code = city.CountryCode WHERE city.Name = 'Brazil'
entities correction:
SELECT country.Population, country.LifeExpectancy FROM country WHERE country.Name = 'Brazil'

index is 716
SELECT Population ,  Region FROM country WHERE Name  =  "Angola"
What are the region and population of Angola?
SQL correction:
SELECT Region, Population  FROM country  WHERE Name = 'Angola'
entities correction:
SELECT Region, Population FROM country WHERE Name = 'Angola'

index is 717
SELECT Population ,  Region FROM country WHERE Name  =  "Angola"
What region does Angola belong to and what is its population?
SQL correction:
SELECT Region, Population FROM country WHERE Name = 'Angola'
entities correction:
SELECT Region, Population FROM country WHERE Name = 'Angola'

index is 718
SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"
What is the average expected life expectancy for countries in the region of Central Africa?
SQL correction:
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'
entities correction:
SELECT AVG(LifeExpectancy) FROM country WHERE region = 'Central Africa'

index is 719
SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"
How long is the people’s average life expectancy in Central Africa?
SQL correction:
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND Region = 'Central Africa'
entities correction:
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND Region = 'Central Africa'

index is 720
SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1
What is the name of country that has the shortest life expectancy in Asia?
SQL correction:
SELECT c.Name FROM country c WHERE c.Continent = 'Asia' ORDER BY c.LifeExpectancy ASC LIMIT 1
entities correction:
SELECT c.Name  FROM country c  WHERE c.Continent = 'Asia'  ORDER BY c.LifeExpectancy ASC  LIMIT 1

index is 721
SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1
Give the name of the country in Asia with the lowest life expectancy.
SQL correction:
SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1
entities correction:
SELECT Name FROM country WHERE Continent = 'Asia' AND LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia')

index is 722
SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"
What is the total population and maximum GNP in Asia?
SQL correction:
SELECT sum(population) AS total_population, max(GNP) AS maximum_GNP  FROM country  WHERE continent = 'Asia'
entities correction:
SELECT sum(population) AS total_population, max(GNP) AS maximum_GNP   FROM country   WHERE Continent = 'Asia'

index is 723
SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"
How many people live in Asia, and what is the largest GNP among them?
SQL correction:
SELECT SUM(country.Population), MAX(country.GNP) FROM country WHERE country.Continent = 'Asia'
entities correction:
SELECT SUM(country.Population) AS TotalPopulation, MAX(country.GNP) AS LargestGNP FROM country WHERE country.Continent = 'Asia'

index is 724
SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"
What is the average life expectancy in African countries that are republics?
SQL correction:
SELECT AVG(country.LifeExpectancy) FROM country JOIN city ON country.Code = city.CountryCode JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Africa' AND country.GovernmentForm = 'Republic'
entities correction:
SELECT AVG(country.LifeExpectancy)  FROM country  JOIN city ON country.Code = city.CountryCode  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.Continent = 'Africa'  AND country.GovernmentForm LIKE '%Republic%'

index is 725
SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"
Give the average life expectancy for countries in Africa which are republics?
SQL correction:
SELECT avg(LifeExpectancy)  FROM country  WHERE Continent = 'Africa'  AND GovernmentForm LIKE '%Republic%'
entities correction:
SELECT avg(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'

index is 726
SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"
What is the total surface area of the continents Asia and Europe?
SQL correction:
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe')
entities correction:
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe')

index is 727
SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"
Give the total surface area covered by countries in Asia or Europe.
SQL correction:
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe')
entities correction:
SELECT SUM(SurfaceArea) AS TotalSurfaceArea  FROM country  WHERE continent IN ('Asia', 'Europe')

index is 728
SELECT sum(Population) FROM city WHERE District  =  "Gelderland"
How many people live in Gelderland district?
SQL correction:
SELECT SUM(Population)  FROM city  WHERE District = 'Gelderland'
entities correction:
SELECT SUM(Population) AS TotalPopulation FROM city WHERE District = 'Gelderland'

index is 729
SELECT sum(Population) FROM city WHERE District  =  "Gelderland"
What is the total population of Gelderland district?
SQL correction:
SELECT SUM(Population)  FROM city  WHERE District = 'Gelderland'
entities correction:
SELECT SUM(Population) AS TotalPopulation FROM city WHERE District = 'Gelderland'

index is 730
SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"
What is the average GNP and total population in all nations whose government is US territory?
SQL correction:
SELECT AVG(country.GNP), SUM(country.Population)  FROM country JOIN city ON country.Code = city.CountryCode JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.GovernmentForm = 'US territory'
entities correction:
SELECT AVG(country.GNP), SUM(country.Population) FROM country JOIN city ON country.Code = city.CountryCode JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.GovernmentForm LIKE '%US Territory%'

index is 731
SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"
Give the mean GNP and total population of nations which are considered US territory.
SQL correction:
SELECT avg(GNP) AS Mean_GNP, sum(Population) AS Total_Population  FROM country  WHERE Region = 'US'
entities correction:
SELECT avg(GNP) AS Mean_GNP, sum(Population) AS Total_Population   FROM country   WHERE Region IN ('Caribbean', 'Southern and Central Asia', 'Central Africa', 'Southern Europe', 'Middle East', 'South America', 'Polynesia', 'Antarctica', 'Australia and New Zealand', 'Western Europe')   AND Continent = 'US'

index is 732
SELECT count(DISTINCT LANGUAGE) FROM countrylanguage
How many unique languages are spoken in the world?
SQL correction:
SELECT COUNT(DISTINCT Language) FROM countrylanguage
original correction:
SELECT COUNT(DISTINCT Language) FROM countrylanguage

index is 733
SELECT count(DISTINCT LANGUAGE) FROM countrylanguage
What is the number of distinct languages used around the world?
SQL correction:
SELECT COUNT(DISTINCT Language) FROM countrylanguage
original correction:
SELECT COUNT(DISTINCT Language) FROM countrylanguage

index is 734
SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa"
How many type of governments are in Africa?
SQL correction:
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'
entities correction:
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE continent = 'Africa'

index is 735
SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa"
How many different forms of governments are there in Africa?
SQL correction:
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'
entities correction:
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE continent = 'Africa'

index is 736
SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"
What is the total number of languages used in Aruba?
SQL correction:
SELECT COUNT(DISTINCT countrylanguage.Language) AS TotalLanguages FROM country JOIN city ON country.Code = city.CountryCode JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE city.Name = 'Aruba'
entities correction:
SELECT COUNT(DISTINCT countrylanguage.Language) AS TotalLanguages  FROM country  JOIN city ON country.Code = city.CountryCode  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE city.Name = 'Aruba'

index is 737
SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"
How many languages are spoken in Aruba?
SQL correction:
SELECT COUNT(DISTINCT T3.Language)  FROM city AS T2 JOIN country AS T1 ON T2.CountryCode = T1.Code JOIN countrylanguage AS T3 ON T3.CountryCode = T1.Code WHERE T2.Name = 'Aruba'
entities correction:
SELECT COUNT(DISTINCT T3.Language) FROM city AS T2 JOIN country AS T1 ON T2.CountryCode = T1.Code JOIN countrylanguage AS T3 ON T3.CountryCode = T1.Code WHERE T2.Name = 'Aruba'

index is 738
SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"
How many official languages does Afghanistan have?
SQL correction:
SELECT COUNT(DISTINCT countrylanguage.Language)  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.Name = 'Afghanistan'  AND countrylanguage.IsOfficial = 'T'
entities correction:
SELECT COUNT(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = 'Afghanistan' AND countrylanguage.IsOfficial = 'T' AND countrylanguage.IsOfficial = 'T'

index is 739
SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"
How many official languages are spoken in Afghanistan?
SQL correction:
SELECT COUNT(DISTINCT Language) FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  WHERE country.Name = 'Afghanistan'  AND countrylanguage.IsOfficial = 'T'
entities correction:
SELECT COUNT(DISTINCT Language) FROM countrylanguage   JOIN country ON countrylanguage.CountryCode = country.Code   WHERE country.Name = 'Afghanistan'   AND countrylanguage.IsOfficial = 'T'

index is 740
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
What is name of the country that speaks the largest number of languages?
SQL correction:
SELECT T1.Name FROM country AS T1 JOIN (     SELECT CountryCode, COUNT(*) AS lang_count     FROM countrylanguage     GROUP BY CountryCode ) AS T2 ON T1.Code = T2.CountryCode ORDER BY T2.lang_count DESC LIMIT 1
original correction:
SELECT T1.Name FROM country AS T1 JOIN (     SELECT CountryCode, COUNT(*) AS lang_count     FROM countrylanguage     GROUP BY CountryCode ) AS T2 ON T1.Code = T2.CountryCode ORDER BY T2.lang_count DESC LIMIT 1

index is 741
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
Give the name of the nation that uses the greatest amount of languages.
SQL correction:
SELECT C.Name FROM country AS C JOIN countrylanguage AS CL ON C.Code = CL.CountryCode GROUP BY C.Name ORDER BY COUNT(DISTINCT CL.Language) DESC LIMIT 1
original correction:
SELECT C.Name FROM country AS C JOIN countrylanguage AS CL ON C.Code = CL.CountryCode GROUP BY C.Name ORDER BY COUNT(DISTINCT CL.Language) DESC LIMIT 1

index is 742
SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1
Which continent has the most diverse languages?
SQL correction:
SELECT T1.Continent, COUNT(DISTINCT T2.Language) AS LanguageCount FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY LanguageCount DESC LIMIT 1
original correction:
SELECT T1.Continent, COUNT(DISTINCT T2.Language) AS LanguageCount FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY LanguageCount DESC LIMIT 1

index is 743
SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1
Which continent speaks the most languages?
SQL correction:
SELECT country.Continent, COUNT(DISTINCT countrylanguage.Language) AS language_count FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Continent ORDER BY language_count DESC LIMIT 1
original correction:
SELECT country.Continent, COUNT(DISTINCT countrylanguage.Language) AS language_count FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Continent ORDER BY language_count DESC LIMIT 1

index is 744
SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
How many countries speak both English and Dutch?
SQL correction:
SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'English' AND CountryCode IN (     SELECT CountryCode     FROM countrylanguage     WHERE Language = 'Dutch' )
entities correction:
SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language IN ('English', 'Dutch') GROUP BY CountryCode HAVING COUNT(DISTINCT Language) = 2

index is 745
SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
What is the number of nations that use English and Dutch?
SQL correction:
SELECT COUNT(DISTINCT CountryCode)  FROM countrylanguage  WHERE Language IN ('English', 'Dutch')
entities correction:
SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language IN ('English', 'Dutch')

index is 746
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
What are the names of nations speak both English and French?
SQL correction:
SELECT Name FROM country WHERE Code IN (   SELECT CountryCode FROM countrylanguage WHERE Language = 'English' ) AND Code IN (   SELECT CountryCode FROM countrylanguage WHERE Language = 'French' )
entities correction:
SELECT Name FROM country WHERE Code IN (   SELECT CountryCode FROM countrylanguage WHERE Language IN ('English', 'French') )

index is 747
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
Give the names of nations that speak both English and French.
SQL correction:
SELECT Name FROM country WHERE Code IN (   SELECT CountryCode FROM countrylanguage WHERE Language = 'English' ) AND Code IN (   SELECT CountryCode FROM countrylanguage WHERE Language = 'French' )
entities correction:
SELECT Name FROM country WHERE Code IN (   SELECT CountryCode FROM countrylanguage WHERE Language = 'English' ) INTERSECT SELECT Name FROM country WHERE Code IN (   SELECT CountryCode FROM countrylanguage WHERE Language = 'French' )

index is 748
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
What are the names of nations where both English and French are official languages?
SQL correction:
SELECT Name  FROM country  WHERE Code IN (     SELECT CountryCode      FROM countrylanguage      WHERE Language = 'English'      AND IsOfficial = 'T'     GROUP BY CountryCode     HAVING COUNT(DISTINCT Language) = 2     ) AND Code IN (     SELECT CountryCode      FROM countrylanguage      WHERE Language = 'French'      AND IsOfficial = 'T'     GROUP BY CountryCode     HAVING COUNT(DISTINCT Language) = 2     )
entities correction:
SELECT Name FROM country WHERE Code IN (     SELECT CountryCode     FROM countrylanguage     WHERE Language IN ('English', 'French')     AND IsOfficial = 'T'     GROUP BY CountryCode     HAVING COUNT(DISTINCT Language) = 2 )

index is 749
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
Give the names of countries with English and French as official languages.
SQL correction:
SELECT country.Name FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T')    OR (countrylanguage.Language = 'French' AND countrylanguage.IsOfficial = 'T') GROUP BY country.Name
entities correction:
SELECT country.Name  FROM countrylanguage  JOIN country ON country.Code = countrylanguage.CountryCode  WHERE (countrylanguage.Language IN ('English', 'French') AND countrylanguage.IsOfficial = 'T') GROUP BY country.Name

index is 750
SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"
What is the number of distinct continents where Chinese is spoken?
SQL correction:
SELECT COUNT(DISTINCT T1.Continent)  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  WHERE T2.Language = 'Chinese'
entities correction:
SELECT COUNT(DISTINCT T1.Continent) AS NumDistinctContinents FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese'

index is 751
SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"
How many continents speak Chinese?
SQL correction:
SELECT COUNT(DISTINCT country.Continent) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Chinese'
entities correction:
SELECT COUNT(DISTINCT country.Continent) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 1

index is 752
SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
What are the regions that use English or Dutch?
SQL correction:
SELECT country.Region FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language IN ('English', 'Dutch')
entities correction:
SELECT country.Region FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'Dutch')

index is 753
SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
Which regions speak Dutch or English?
SQL correction:
SELECT DISTINCT C.Region  FROM country AS C  JOIN countrylanguage AS CL ON C.Code = CL.CountryCode  WHERE CL.Language IN ('Dutch', 'English')
entities correction:
SELECT DISTINCT C.Region FROM country AS C JOIN countrylanguage AS CL ON C.Code = CL.CountryCode WHERE CL.Language IN ('Dutch', 'English')

index is 754
select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "english" and isofficial  =  "t" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "dutch" and isofficial  =  "t"
What are the countries where either English or Dutch is the official language ?
SQL correction:
SELECT Name FROM country WHERE Code IN (   SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T' ) OR Code IN (   SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch' AND IsOfficial = 'T' )
entities correction:
SELECT Name  FROM country  WHERE Code IN (     SELECT CountryCode      FROM countrylanguage      WHERE Language IN ('English', 'Dutch')      AND IsOfficial = 'T' )

index is 755
SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND IsOfficial  =  "T" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch" AND IsOfficial  =  "T"
Which countries have either English or Dutch as an official language?
SQL correction:
SELECT country.Name  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch')  AND countrylanguage.IsOfficial = 'T'
entities correction:
SELECT country.Name FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch')  AND countrylanguage.IsOfficial = 'T'

index is 756
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1
Which language is the most popular on the Asian continent?
SQL correction:
SELECT countrylanguage.Language  FROM countrylanguage  JOIN country ON country.Code = countrylanguage.CountryCode  WHERE country.Continent = 'Asia'  GROUP BY countrylanguage.Language  ORDER BY SUM(countrylanguage.Percentage) DESC  LIMIT 1
entities correction:
SELECT countrylanguage.Language   FROM countrylanguage   JOIN country ON country.Code = countrylanguage.CountryCode   WHERE country.Continent = 'Asia'   GROUP BY countrylanguage.Language   ORDER BY SUM(countrylanguage.Percentage) DESC   LIMIT 1

index is 757
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1
What is the language that is used by the largest number of Asian nations?
SQL correction:
SELECT cl.Language  FROM countrylanguage AS cl  JOIN country AS c ON c.Code = cl.CountryCode  WHERE c.Continent = 'Asia'  GROUP BY cl.Language  ORDER BY COUNT(*) DESC  LIMIT 1
entities correction:
SELECT cl.Language FROM countrylanguage AS cl JOIN country AS c ON c.Code = cl.CountryCode WHERE c.Continent = 'Asia' GROUP BY cl.Language HAVING COUNT(*) = (   SELECT MAX(lang_count)   FROM (     SELECT COUNT(*) AS lang_count     FROM countrylanguage AS cl     JOIN country AS c ON c.Code = cl.CountryCode     WHERE c.Continent = 'Asia'     GROUP BY cl.Language   ) )

index is 758
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1
Which languages are spoken by only one country in republic governments?
SQL correction:
SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.GovernmentForm = 'Republic' GROUP BY T1.Language HAVING COUNT(*) = 1
entities correction:
SELECT T1.Language  FROM countrylanguage AS T1  JOIN country AS T2 ON T1.CountryCode = T2.Code  WHERE T2.GovernmentForm = 'Republic'  GROUP BY T1.Language  HAVING COUNT(T1.Language) = 1

index is 759
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1
What languages are only used by a single country with a republic government?
SQL correction:
SELECT Language  FROM countrylanguage AS CL  JOIN country AS C ON CL.CountryCode = C.Code  WHERE C.GovernmentForm = 'Republic'  GROUP BY Language  HAVING COUNT(C.Code) = 1
entities correction:
SELECT Language FROM countrylanguage AS CL  JOIN country AS C ON CL.CountryCode = C.Code  WHERE C.GovernmentForm = 'Republic'  GROUP BY Language  HAVING COUNT(DISTINCT C.Code) = 1

index is 760
SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1
Find the city with the largest population that uses English.
SQL correction:
SELECT city.Name  FROM city  JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode  JOIN country ON city.CountryCode = country.Code  WHERE countrylanguage.Language = "English"  GROUP BY city.Name  ORDER BY city.Population DESC  LIMIT 1
entities correction:
SELECT city.Name   FROM city   JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode   JOIN country ON city.CountryCode = country.Code   WHERE countrylanguage.Language = 'English'   GROUP BY city.Name   HAVING MAX(city.Population)   LIMIT 1

index is 761
SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1
What is the most populace city that speaks English?
SQL correction:
SELECT city.Name, MAX(city.Population) AS Population FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode JOIN country ON city.CountryCode = country.Code WHERE countrylanguage.Language = "English" GROUP BY city.Name ORDER BY Population DESC LIMIT 1
entities correction:
SELECT city.Name, MAX(city.Population) AS Population  FROM city  JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode  JOIN country ON city.CountryCode = country.Code  WHERE countrylanguage.Language = 'English'  AND countrylanguage.IsOfficial = 1  GROUP BY city.Name  ORDER BY Population DESC  LIMIT 1

index is 762
SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1
Find the name, population and expected life length of asian country with the largest area?
SQL correction:
SELECT Name, Population, LifeExpectancy FROM country WHERE SurfaceArea = (     SELECT MAX(SurfaceArea)     FROM country     WHERE Continent = 'Asia' ) ORDER BY Population DESC LIMIT 1
entities correction:
SELECT Name, Population, LifeExpectancy  FROM country  WHERE Continent = 'Asia'  ORDER BY SurfaceArea DESC  LIMIT 1

index is 763
SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1
What are the name, population, and life expectancy of the largest Asian country by land?
SQL correction:
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = 'Asia' ORDER BY country.SurfaceArea DESC LIMIT 1
entities correction:
SELECT country.Name, country.Population, country.LifeExpectancy  FROM country  WHERE country.Continent = 'Asia'  ORDER BY country.SurfaceArea DESC  LIMIT 1

index is 764
SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
What is average life expectancy in the countries where English is not the official language?
SQL correction:
SELECT avg(LifeExpectancy)  FROM country  WHERE Code NOT IN (     SELECT CountryCode      FROM countrylanguage      WHERE Language <> 'English'      AND IsOfficial = 'T' )
entities correction:
SELECT avg(LifeExpectancy)   FROM country   WHERE Code NOT IN (   SELECT CountryCode     FROM countrylanguage     WHERE Language <> 'English'     AND IsOfficial = 'T' )

index is 765
SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
Give the mean life expectancy of countries in which English is not the official language.
SQL correction:
SELECT AVG(LifeExpectancy)  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language <> 'English'  AND countrylanguage.IsOfficial <> 'T'
entities correction:
SELECT AVG(LifeExpectancy) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language <> 'English' AND countrylanguage.IsOfficial = 'F'

index is 766
SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")
What is the total number of people living in the nations that do not use English?
SQL correction:
SELECT SUM(Population) AS TotalPopulation FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')
entities correction:
SELECT SUM(Population) AS TotalPopulation  FROM country  WHERE Code NOT IN (   SELECT CountryCode    FROM countrylanguage    WHERE LOWER(Language) <> 'english' )

index is 767
SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")
How many people live in countries that do not speak English?
SQL correction:
SELECT sum(Population)  FROM country  WHERE Code NOT IN (SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language = 'English')
entities correction:
SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != 'English')

index is 768
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"
What is the official language spoken in the country whose head of state is Beatrix?
SQL correction:
SELECT countrylanguage.Language  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.HeadOfState = 'Beatrix'  AND countrylanguage.IsOfficial = 'T'
entities correction:
SELECT countrylanguage.Language  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.HeadOfState = 'Beatrix'  AND countrylanguage.IsOfficial = 'T'

index is 769
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"
What is the official language used in the country the name of whose head of state is Beatrix.
SQL correction:
SELECT T2.Language  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  WHERE T1.HeadOfState = 'Beatrix'  AND T2.IsOfficial = 'T'
entities correction:
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Beatrix' AND T2.IsOfficial = 'T'

index is 770
SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"
What is the total number of unique official languages spoken in the countries that are founded before 1930?
SQL correction:
SELECT COUNT(DISTINCT countrylanguage.Language)  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.IndepYear < 1930 AND countrylanguage.IsOfficial = 'T'
entities correction:
SELECT COUNT(DISTINCT countrylanguage.Language)  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.IndepYear < 1930  AND countrylanguage.IsOfficial = 'T'

index is 771
SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"
For the countries founded before 1930, what is the total number of distinct official languages?
SQL correction:
SELECT count(DISTINCT countrylanguage.Language) AS TotalDistinctLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 1930
original correction:
SELECT count(DISTINCT countrylanguage.Language) AS TotalDistinctLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 1930

index is 772
SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")
What are the countries that have greater surface area than any country in Europe?
SQL correction:
SELECT Name  FROM country  WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')
entities correction:
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')

index is 773
SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")
Which countries have greater area than that of any country in Europe?
SQL correction:
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')
entities correction:
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')

index is 774
SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  "Asia")
What are the African countries that have a  population less than any country in Asia?
SQL correction:
SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')
entities correction:
SELECT Name  FROM country  WHERE Continent = 'Africa'  AND Population < (   SELECT MIN(Population)    FROM country    WHERE Continent = 'Asia' )

index is 775
SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  "Asia")
Which African countries have a smaller population than that of any country in Asia?
SQL correction:
SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (   SELECT MIN(Population) FROM country WHERE Continent = 'Asia' )
entities correction:
SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')

index is 776
SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  "Africa")
Which Asian countries have a population that is larger than any country in Africa?
SQL correction:
SELECT Name FROM country WHERE Population > (SELECT max(Population) FROM country WHERE Continent = 'Africa') AND Continent = 'Asia'
entities correction:
SELECT Name  FROM country  WHERE Population > (   SELECT MAX(Population)    FROM country    WHERE Continent = 'Africa' )  AND Continent = 'Asia'

index is 777
SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  "Africa")
What are the Asian countries which have a population larger than that of any country in Africa?
SQL correction:
SELECT country.Name FROM country WHERE country.Continent = 'Asia' AND country.Population > (     SELECT MAX(country.Population)     FROM country     WHERE country.Continent = 'Africa' )
entities correction:
SELECT country.Name FROM country WHERE country.Continent = 'Asia' AND country.Population > (     SELECT MAX(c.Population)     FROM country c     WHERE c.Continent = 'Africa' )

index is 778
SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
What are the country codes for countries that do not speak English?
SQL correction:
SELECT Code FROM country WHERE Code NOT IN (SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language = 'English')
entities correction:
SELECT Code FROM country WHERE Code NOT IN (SELECT DISTINCT CountryCode FROM countrylanguage WHERE LOWER(Language) <> 'english')

index is 779
SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
Return the country codes for countries that do not speak English.
SQL correction:
SELECT Code  FROM country  WHERE Code NOT IN (   SELECT CountryCode    FROM countrylanguage    WHERE Language = 'English' )
entities correction:
SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language != 'English')

index is 780
SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"
What are the country codes of countries where people use languages other than English?
SQL correction:
SELECT DISTINCT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language <> 'English'
entities correction:
SELECT DISTINCT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language <> 'English'

index is 781
SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"
Give the country codes for countries in which people speak langauges that are not English.
SQL correction:
SELECT Code FROM country WHERE Code IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language <> 'English' )
entities correction:
SELECT Code FROM country WHERE Code IN (   SELECT CountryCode FROM countrylanguage WHERE Language <> 'English' )

index is 782
SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
What are the codes of the countries that do not speak English and whose government forms are not Republic?
SQL correction:
SELECT Code  FROM country  WHERE Code NOT IN (     SELECT CountryCode      FROM countrylanguage      WHERE Language = 'English' )  AND GovernmentForm NOT LIKE '%Republic%'
entities correction:
SELECT Code FROM country WHERE Code NOT IN (     SELECT CountryCode     FROM countrylanguage     WHERE Language IN ('Dutch', 'Papiamento', 'Spanish', 'Balochi', 'Dari', 'Pashto', 'Turkmenian', 'Uzbek', 'Ambo') ) AND GovernmentForm NOT LIKE '%Republic%'

index is 783
SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
Return the codes of countries that do not speak English and do not have Republics for governments.
SQL correction:
SELECT Code FROM country  WHERE Code NOT IN (     SELECT CountryCode FROM countrylanguage WHERE Language = 'English' )  AND GovernmentForm <> 'Republic'
entities correction:
SELECT Code FROM country WHERE Code NOT IN (     SELECT CountryCode     FROM countrylanguage     WHERE Language = 'English' ) AND GovernmentForm NOT LIKE '%Republic%'

index is 784
SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
Which cities are in European countries where English is not the official language?
SQL correction:
SELECT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON countrylanguage.CountryCode = country.Code  WHERE country.Continent = 'Europe'  AND countrylanguage.Language <> 'English'  AND countrylanguage.IsOfficial <> 'T'
entities correction:
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Europe' AND countrylanguage.Language <> 'English' AND countrylanguage.IsOfficial = 'F'

index is 785
SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
What are the names of cities in Europe for which English is not the official language?
SQL correction:
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language <> 'English' AND countrylanguage.IsOfficial <> 'T'
entities correction:
SELECT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.Continent = 'Europe'  AND countrylanguage.Language <> 'English'  AND countrylanguage.IsOfficial = 'F'

index is 786
select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  "asia"
Which unique cities are in Asian countries where Chinese is the official language ?
SQL correction:
SELECT DISTINCT city.Name FROM city JOIN country ON country.Code = city.CountryCode JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia'   AND countrylanguage.Language = 'Chinese'   AND countrylanguage.IsOfficial = 1
entities correction:
SELECT DISTINCT city.Name  FROM city  JOIN country ON country.Code = city.CountryCode  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.Continent = 'Asia'  AND countrylanguage.Language = 'Chinese'  AND countrylanguage.IsOfficial = 1

index is 787
SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  "Asia"
Return the different names of cities that are in Asia and for which Chinese is the official language.
SQL correction:
SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
entities correction:
SELECT DISTINCT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode  WHERE country.Continent = 'Asia'  AND countrylanguage.Language = 'Chinese'  AND countrylanguage.IsOfficial = 'T'

index is 788
SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1
What are the name, independence year, and surface area of the country with the smallest population?
SQL correction:
SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1
original correction:
SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1

index is 789
SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1
Give the name, year of independence, and surface area of the country that has the lowest population.
SQL correction:
SELECT country.Name, country.IndepYear, country.SurfaceArea  FROM country  WHERE country.Population = (   SELECT MIN(country.Population)    FROM country )
original correction:
SELECT country.Name, country.IndepYear, country.SurfaceArea  FROM country  WHERE country.Population = (   SELECT MIN(country.Population)    FROM country )

index is 790
SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
What are the population, name and leader of the country with the largest area?
SQL correction:
SELECT Population, Name, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);
original correction:
SELECT Population, Name, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);

index is 791
SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
Give the name, population, and head of state for the country that has the largest area.
SQL correction:
SELECT Name, Population, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)
original correction:
SELECT Name, Population, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)

index is 792
SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2
Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.
SQL correction:
SELECT SELECT country.Name, COUNT(countrylanguage.Language) AS LanguageCount FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING LanguageCount >= 3;
original correction:
SELECT SELECT country.Name, COUNT(countrylanguage.Language) AS LanguageCount FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING LanguageCount >= 3;

index is 793
SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2
What are the names of countries that speak more than 2 languages, as well as how many languages they speak?
SQL correction:
SELECT T1.Name, COUNT(DISTINCT T2.Language)  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  GROUP BY T1.Name  HAVING COUNT(DISTINCT T2.Language) > 2
original correction:
SELECT T1.Name, COUNT(DISTINCT T2.Language)  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  GROUP BY T1.Name  HAVING COUNT(DISTINCT T2.Language) > 2

index is 794
SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District
Find the number of cities in each district whose population is greater than the average population of cities?
SQL correction:
SELECT district, COUNT(*)  FROM city  WHERE population > (SELECT AVG(population) FROM city)  GROUP BY district
original correction:
SELECT district, COUNT(*)  FROM city  WHERE population > (SELECT AVG(population) FROM city)  GROUP BY district

index is 795
SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District
How many cities in each district have a population that is above the average population across all cities?
SQL correction:
SELECT country.Code, city.District, COUNT(city.Name) FROM city JOIN country ON city.CountryCode = country.Code GROUP BY city.District HAVING city.Population > (SELECT AVG(city.Population) FROM city)
original correction:
SELECT country.Code, city.District, COUNT(city.Name) FROM city JOIN country ON city.CountryCode = country.Code GROUP BY city.District HAVING city.Population > (SELECT AVG(city.Population) FROM city)

index is 796
SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72
Find the government form name and total population for each government form whose average life expectancy is longer than 72.
SQL correction:
SELECT GovernmentForm, SUM(Population) AS TotalPopulation  FROM country  GROUP BY GovernmentForm  HAVING AVG(LifeExpectancy) > 72;
original correction:
SELECT GovernmentForm, SUM(Population) AS TotalPopulation  FROM country  GROUP BY GovernmentForm  HAVING AVG(LifeExpectancy) > 72;

index is 797
SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72
What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?
SQL correction:
SELECT GovernmentForm, SUM(Population)  FROM country  GROUP BY GovernmentForm  HAVING AVG(LifeExpectancy) > 72;
original correction:
SELECT GovernmentForm, SUM(Population)  FROM country  GROUP BY GovernmentForm  HAVING AVG(LifeExpectancy) > 72;

index is 798
SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72
Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?
SQL correction:
SELECT continent, AVG(LifeExpectancy) AS AverageLifeExpectancy, SUM(Population) AS TotalPopulation FROM country GROUP BY continent HAVING AVG(LifeExpectancy) < 72
original correction:
SELECT continent, AVG(LifeExpectancy) AS AverageLifeExpectancy, SUM(Population) AS TotalPopulation FROM country GROUP BY continent HAVING AVG(LifeExpectancy) < 72

index is 799
SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72
What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?
SQL correction:
SELECT country.continent, SUM(country.population), AVG(country.lifeexpectancy) FROM country GROUP BY country.continent HAVING AVG(country.lifeexpectancy) < 72
original correction:
SELECT country.continent, SUM(country.population), AVG(country.lifeexpectancy) FROM country GROUP BY country.continent HAVING AVG(country.lifeexpectancy) < 72

index is 800
SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
What are the names and areas of countries with the top 5 largest area?
SQL correction:
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
original correction:
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5

index is 801
SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
Return the names and surface areas of the 5 largest countries.
SQL correction:
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
original correction:
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5

index is 802
SELECT Name FROM country ORDER BY Population DESC LIMIT 3
What are names of countries with the top 3 largest population?
SQL correction:
SELECT country.Name FROM country ORDER BY country.Population DESC LIMIT 3
original correction:
SELECT country.Name FROM country ORDER BY country.Population DESC LIMIT 3

index is 803
SELECT Name FROM country ORDER BY Population DESC LIMIT 3
Return the names of the 3 most populated countries.
SQL correction:
SELECT Name  FROM country  ORDER BY Population DESC  LIMIT 3
original correction:
SELECT Name  FROM country  ORDER BY Population DESC  LIMIT 3

index is 804
SELECT Name FROM country ORDER BY Population ASC LIMIT 3
What are the names of the nations with the 3 lowest populations?
SQL correction:
SELECT Name FROM country ORDER BY Population ASC LIMIT 3
original correction:
SELECT Name FROM country ORDER BY Population ASC LIMIT 3

index is 805
SELECT Name FROM country ORDER BY Population ASC LIMIT 3
Return the names of the 3 countries with the fewest people.
SQL correction:
SELECT Name FROM country ORDER BY Population ASC LIMIT 3
original correction:
SELECT Name FROM country ORDER BY Population ASC LIMIT 3

index is 806
SELECT count(*) FROM country WHERE continent  =  "Asia"
how many countries are in Asia?
SQL correction:
SELECT COUNT(DISTINCT Code) FROM country WHERE Continent = 'Asia'
entities correction:
SELECT COUNT(DISTINCT Code) FROM country WHERE continent = 'Asia'

index is 807
SELECT count(*) FROM country WHERE continent  =  "Asia"
Count the number of countries in Asia.
SQL correction:
SELECT COUNT(*) FROM country WHERE Continent = 'Asia'
entities correction:
SELECT COUNT(*) FROM country WHERE continent = 'Asia'

index is 808
SELECT Name FROM country WHERE continent  =  "Europe" AND Population  =  "80000"
What are the names of the countries that are in the continent of Europe and have a population of 80000?
SQL correction:
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000
entities correction:
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000

index is 809
SELECT Name FROM country WHERE continent  =  "Europe" AND Population  =  "80000"
Give the names of countries that are in Europe and have a population equal to 80000.
SQL correction:
SELECT country.Name FROM country WHERE country.Continent = 'Europe' AND country.Population = 80000
entities correction:
SELECT country.Name  FROM country  WHERE country.Continent = 'Europe'  AND country.Population = 80000;

index is 810
select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000
What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?
SQL correction:
SELECT sum(Population) AS TotalPopulation, avg(SurfaceArea) AS AverageArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;
entities correction:
SELECT sum(Population) AS TotalPopulation, avg(SurfaceArea) AS AverageArea  FROM country  WHERE Continent = 'North America' AND SurfaceArea > 3000;

index is 811
select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000
Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .
SQL correction:
SELECT sum(country.Population) AS total_population, avg(country.SurfaceArea) AS average_surface_area FROM country JOIN city ON city.CountryCode = country.Code WHERE country.Continent = 'North America' AND country.SurfaceArea > 3000;
entities correction:
SELECT sum(country.Population) AS total_population, avg(country.SurfaceArea) AS average_surface_area  FROM country  WHERE country.Continent = 'North America'  AND country.SurfaceArea > 3000;

index is 812
SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000
What are the cities whose population is between 160000 and 900000?
SQL correction:
SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000
original correction:
SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000

index is 813
select name from city where population between 160000 and 900000
Return the names of cities that have a population between 160000 and 900000 .
SQL correction:
SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000
original correction:
SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000

index is 814
SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1
Which language is spoken by the largest number of countries?
SQL correction:
SELECT Language  FROM countrylanguage  GROUP BY Language  HAVING COUNT(*) = (     SELECT MAX(language_count)      FROM (         SELECT COUNT(*) AS language_count          FROM countrylanguage          GROUP BY Language     ) AS counts ) ORDER BY language_count DESC LIMIT 1
original correction:
SELECT Language  FROM countrylanguage  GROUP BY Language  HAVING COUNT(*) = (     SELECT MAX(language_count)      FROM (         SELECT COUNT(*) AS language_count          FROM countrylanguage          GROUP BY Language     ) AS counts ) ORDER BY language_count DESC LIMIT 1

index is 815
SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1
Give the language that is spoken in the most countries.
SQL correction:
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1
original correction:
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1

index is 816
SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
What is the language spoken by the largest percentage of people in each country?
SQL correction:
SELECT T2.Name, T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Percentage = (     SELECT MAX(cl.Percentage)     FROM countrylanguage AS cl     WHERE cl.CountryCode = T2.Code ) GROUP BY T2.Name
original correction:
SELECT T2.Name, T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Percentage = (     SELECT MAX(cl.Percentage)     FROM countrylanguage AS cl     WHERE cl.CountryCode = T2.Code ) GROUP BY T2.Name

index is 817
SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?
SQL correction:
SELECT T1.Code, T2.Language  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  GROUP BY T1.Code  HAVING T2.Percentage = (SELECT MAX(Percentage)                          FROM countrylanguage                          WHERE CountryCode = T1.Code)
original correction:
SELECT T1.Code, T2.Language  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  GROUP BY T1.Code  HAVING T2.Percentage = (SELECT MAX(Percentage)                          FROM countrylanguage                          WHERE CountryCode = T1.Code)

index is 818
SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
What is the total number of countries where Spanish is spoken by the largest percentage of people?
SQL correction:
SELECT COUNT(DISTINCT country.Code) FROM countrylanguage  JOIN country ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language = 'Spanish'  AND countrylanguage.Percentage = (SELECT MAX(Percentage)                                    FROM countrylanguage                                    WHERE Language = 'Spanish')
entities correction:
SELECT COUNT(DISTINCT country.Code) AS TotalCountries FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Spanish' AND countrylanguage.Percentage = (     SELECT MAX(Percentage)     FROM countrylanguage     WHERE Language = 'Spanish' )

index is 819
SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
Count the number of countries for which Spanish is the predominantly spoken language.
SQL correction:
SELECT COUNT(DISTINCT T1.Code) FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  WHERE T2.Language = 'Spanish' AND T2.IsOfficial = 'T'
entities correction:
SELECT COUNT(DISTINCT T1.Code)  FROM country AS T1   JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode   WHERE T2.Language = 'Spanish' AND UPPER(T2.IsOfficial) = 'T'

index is 820
SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
What are the codes of countries where Spanish is spoken by the largest percentage of people?
SQL correction:
SELECT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Spanish' GROUP BY country.Code ORDER BY countrylanguage.Percentage DESC LIMIT 1
entities correction:
SELECT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Spanish' GROUP BY country.Code HAVING MAX(countrylanguage.Percentage) ORDER BY countrylanguage.Percentage DESC LIMIT 1

index is 821
SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
Return the codes of countries for which Spanish is the predominantly spoken language.
SQL correction:
SELECT country.Code FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  WHERE countrylanguage.Language = 'Spanish' AND countrylanguage.Percentage > 50
entities correction:
SELECT country.Code  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  WHERE countrylanguage.Language = 'Spanish' AND countrylanguage.Percentage > 50

index is 822
SELECT count(*) FROM conductor
How many conductors are there?
SQL correction:
SELECT COUNT(Conductor_ID) FROM conductor
original correction:
SELECT COUNT(Conductor_ID) FROM conductor

index is 823
SELECT count(*) FROM conductor
Count the number of conductors.
SQL correction:
SELECT COUNT(DISTINCT Conductor_ID) FROM conductor
original correction:
SELECT COUNT(DISTINCT Conductor_ID) FROM conductor

index is 824
SELECT Name FROM conductor ORDER BY Age ASC
List the names of conductors in ascending order of age.
SQL correction:
SELECT Name FROM conductor ORDER BY Age ASC
original correction:
SELECT Name FROM conductor ORDER BY Age ASC

index is 825
SELECT Name FROM conductor ORDER BY Age ASC
What are the names of conductors, ordered by age?
SQL correction:
SELECT Name FROM conductor ORDER BY Age ASC
original correction:
SELECT Name FROM conductor ORDER BY Age ASC

index is 826
SELECT Name FROM conductor WHERE Nationality != 'USA'
What are the names of conductors whose nationalities are not "USA"?
SQL correction:
SELECT Name FROM conductor WHERE Nationality != 'USA'
entities correction:
SELECT Name FROM conductor WHERE Nationality NOT IN ('USA')

index is 827
SELECT Name FROM conductor WHERE Nationality != 'USA'
Return the names of conductors that do not have the nationality "USA".
SQL correction:
SELECT Name FROM conductor WHERE Nationality <> 'USA'
entities correction:
SELECT Name  FROM conductor  WHERE Nationality <> 'USA'

index is 828
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
What are the record companies of orchestras in descending order of years in which they were founded?
SQL correction:
SELECT orchestra.Record_Company  FROM orchestra  ORDER BY orchestra.Year_of_Founded DESC
original correction:
SELECT orchestra.Record_Company  FROM orchestra  ORDER BY orchestra.Year_of_Founded DESC

index is 829
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
Return the record companies of orchestras, sorted descending by the years in which they were founded.
SQL correction:
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
original correction:
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC

index is 830
SELECT avg(Attendance) FROM SHOW
What is the average attendance of shows?
SQL correction:
SELECT AVG(Attendance) FROM show
original correction:
SELECT AVG(Attendance) FROM show

index is 831
SELECT avg(Attendance) FROM SHOW
Return the average attendance across all shows.
SQL correction:
SELECT AVG(Attendance) AS Average_Attendance FROM show
original correction:
SELECT AVG(Attendance) AS Average_Attendance FROM show

index is 832
SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"
What are the maximum and minimum share of performances whose type is not "Live final".
SQL correction:
SELECT MAX(Share) AS Maximum_Share, MIN(Share) AS Minimum_Share FROM performance WHERE Type <> 'Live final'
entities correction:
SELECT MAX(Share) AS Maximum_Share, MIN(Share) AS Minimum_Share FROM performance WHERE Type <> 'Live final';

index is 833
SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"
Return the maximum and minimum shares for performances that do not have the type "Live final".
SQL correction:
SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share  FROM performance  WHERE Type <> 'Live final'
entities correction:
SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share   FROM performance   WHERE Type != 'Live final'

index is 834
SELECT count(DISTINCT Nationality) FROM conductor
How many different nationalities do conductors have?
SQL correction:
SELECT COUNT(DISTINCT Nationality) AS Total_Nationalities FROM conductor
original correction:
SELECT COUNT(DISTINCT Nationality) AS Total_Nationalities FROM conductor

index is 835
SELECT count(DISTINCT Nationality) FROM conductor
Count the number of different nationalities of conductors.
SQL correction:
SELECT COUNT(DISTINCT Nationality) AS Num_Nationalities FROM conductor
original correction:
SELECT COUNT(DISTINCT Nationality) AS Num_Nationalities FROM conductor

index is 836
SELECT Name FROM conductor ORDER BY Year_of_Work DESC
List names of conductors in descending order of years of work.
SQL correction:
SELECT conductor.Name  FROM conductor  ORDER BY conductor.Year_of_Work DESC
original correction:
SELECT conductor.Name  FROM conductor  ORDER BY conductor.Year_of_Work DESC

index is 837
SELECT Name FROM conductor ORDER BY Year_of_Work DESC
What are the names of conductors, sorted descending by the number of years they have worked?
SQL correction:
SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC
original correction:
SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC

index is 838
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
List the name of the conductor with the most years of work.
SQL correction:
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
original correction:
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1

index is 839
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
What is the name of the conductor who has worked the greatest number of years?
SQL correction:
SELECT Name, COUNT(Year_of_Work) AS WorkYears FROM conductor GROUP BY Name ORDER BY WorkYears DESC LIMIT 1
original correction:
SELECT Name, COUNT(Year_of_Work) AS WorkYears FROM conductor GROUP BY Name ORDER BY WorkYears DESC LIMIT 1

index is 840
SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID
Show the names of conductors and the orchestras they have conducted.
SQL correction:
SELECT Name, Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID
original correction:
SELECT Name, Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID

index is 841
SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID
What are the names of conductors as well as the corresonding orchestras that they have conducted?
SQL correction:
SELECT T1.Name, T2.Orchestra  FROM conductor AS T1  JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID
original correction:
SELECT T1.Name, T2.Orchestra  FROM conductor AS T1  JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID

index is 842
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1
Show the names of conductors that have conducted more than one orchestras.
SQL correction:
SELECT SELECT conductor.Name FROM conductor INNER JOIN orchestra ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Name HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1;
original correction:
SELECT SELECT conductor.Name FROM conductor INNER JOIN orchestra ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Name HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1;

index is 843
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1
What are the names of conductors who have conducted at more than one orchestra?
SQL correction:
SELECT Name FROM conductor GROUP BY Name HAVING COUNT(DISTINCT Orchestra_ID) > 1
original correction:
SELECT Name FROM conductor GROUP BY Name HAVING COUNT(DISTINCT Orchestra_ID) > 1

index is 844
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1
Show the name of the conductor that has conducted the most number of orchestras.
SQL correction:
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Name ORDER BY COUNT(T2.Orchestra_ID) DESC LIMIT 1
original correction:
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Name ORDER BY COUNT(T2.Orchestra_ID) DESC LIMIT 1

index is 845
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1
What is the name of the conductor who has conducted the most orchestras?
SQL correction:
SELECT Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY COUNT(orchestra.Orchestra_ID) DESC LIMIT 1
original correction:
SELECT Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY COUNT(orchestra.Orchestra_ID) DESC LIMIT 1

index is 846
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008
Please show the name of the conductor that has conducted orchestras founded after 2008.
SQL correction:
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008;
original correction:
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008;

index is 847
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008
What are the names of conductors who have conducted orchestras founded after the year 2008?
SQL correction:
SELECT Name FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008
original correction:
SELECT Name FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008

index is 848
SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company
Please show the different record companies and the corresponding number of orchestras.
SQL correction:
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS num_orchestras FROM orchestra GROUP BY Record_Company
original correction:
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS num_orchestras FROM orchestra GROUP BY Record_Company

index is 849
SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company
How many orchestras does each record company manage?
SQL correction:
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS num_orchestras FROM orchestra GROUP BY Record_Company
original correction:
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS num_orchestras FROM orchestra GROUP BY Record_Company

index is 850
SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
Please show the record formats of orchestras in ascending order of count.
SQL correction:
SELECT Major_Record_Format, COUNT(*) AS count  FROM orchestra  GROUP BY Major_Record_Format  ORDER BY count ASC
original correction:
SELECT Major_Record_Format, COUNT(*) AS count  FROM orchestra  GROUP BY Major_Record_Format  ORDER BY count ASC

index is 851
SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
What are the major record formats of orchestras, sorted by their frequency?
SQL correction:
SELECT Major_Record_Format, COUNT(*) as Frequency  FROM orchestra  WHERE Major_Record_Format IS NOT NULL GROUP BY Major_Record_Format  ORDER BY Frequency DESC
original correction:
SELECT Major_Record_Format, COUNT(*) as Frequency  FROM orchestra  WHERE Major_Record_Format IS NOT NULL GROUP BY Major_Record_Format  ORDER BY Frequency DESC

index is 852
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
List the record company shared by the most number of orchestras.
SQL correction:
SELECT Record_Company, COUNT(*) AS Num_Orchestras FROM orchestra GROUP BY Record_Company ORDER BY Num_Orchestras DESC LIMIT 1
original correction:
SELECT Record_Company, COUNT(*) AS Num_Orchestras FROM orchestra GROUP BY Record_Company ORDER BY Num_Orchestras DESC LIMIT 1

index is 853
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
What is the record company used by the greatest number of orchestras?
SQL correction:
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS Orchestra_Count FROM orchestra GROUP BY Record_Company HAVING COUNT(DISTINCT Orchestra_ID) = (     SELECT MAX(Orchestra_Count)     FROM (         SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS Orchestra_Count         FROM orchestra         GROUP BY Record_Company     ) AS counts )
original correction:
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS Orchestra_Count FROM orchestra GROUP BY Record_Company HAVING COUNT(DISTINCT Orchestra_ID) = (     SELECT MAX(Orchestra_Count)     FROM (         SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS Orchestra_Count         FROM orchestra         GROUP BY Record_Company     ) AS counts )

index is 854
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
List the names of orchestras that have no performance.
SQL correction:
SELECT Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL
original correction:
SELECT Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL

index is 855
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
What are the orchestras that do not have any performances?
SQL correction:
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
original correction:
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)

index is 856
SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003
Show the record companies shared by orchestras founded before 2003 and after 2003.
SQL correction:
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003
original correction:
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003

index is 857
SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003
What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?
SQL correction:
SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded > 2003
original correction:
SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded > 2003

index is 858
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"
Find the number of orchestras whose record format is "CD" or "DVD".
SQL correction:
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'
entities correction:
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')

index is 859
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"
Count the number of orchestras that have CD or DVD as their record format.
SQL correction:
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')
entities correction:
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')

index is 860
SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1
Show the years in which orchestras that have given more than one performance are founded.
SQL correction:
SELECT DISTINCT Year_of_Founded FROM orchestra JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID GROUP BY Year_of_Founded HAVING COUNT(DISTINCT performance.Performance_ID) > 1
original correction:
SELECT DISTINCT Year_of_Founded FROM orchestra JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID GROUP BY Year_of_Founded HAVING COUNT(DISTINCT performance.Performance_ID) > 1

index is 861
SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1
What are years of founding for orchestras that have had more than a single performance?
SQL correction:
SELECT Year_of_Founded FROM orchestra  WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance                         GROUP BY Orchestra_ID                         HAVING COUNT(*) > 1)
original correction:
SELECT Year_of_Founded FROM orchestra  WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance                         GROUP BY Orchestra_ID                         HAVING COUNT(*) > 1)

index is 862
SELECT count(*) FROM Highschooler
How many high schoolers are there?
SQL correction:
SELECT COUNT(ID) FROM Highschooler
original correction:
SELECT COUNT(ID) FROM Highschooler

index is 863
SELECT count(*) FROM Highschooler
Count the number of high schoolers.
SQL correction:
SELECT COUNT(*) FROM Highschooler
original correction:
SELECT COUNT(*) FROM Highschooler

index is 864
SELECT name ,  grade FROM Highschooler
Show the names and grades of each high schooler.
SQL correction:
SELECT name, grade  FROM Highschooler
original correction:
SELECT name, grade  FROM Highschooler

index is 865
SELECT name ,  grade FROM Highschooler
What are the names and grades for each high schooler?
SQL correction:
SELECT name, grade FROM Highschooler
original correction:
SELECT name, grade FROM Highschooler

index is 866
SELECT grade FROM Highschooler
Show all the grades of the high schoolers.
SQL correction:
SELECT grade FROM Highschooler
original correction:
SELECT grade FROM Highschooler

index is 867
SELECT grade FROM Highschooler
What is the grade of each high schooler?
SQL correction:
SELECT grade FROM Highschooler
original correction:
SELECT grade FROM Highschooler

index is 868
SELECT grade FROM Highschooler WHERE name  =  "Kyle"
What grade is Kyle in?
SQL correction:
SELECT grade FROM Highschooler WHERE name = 'Kyle'
entities correction:
SELECT grade FROM Highschooler WHERE name = 'Kyle'

index is 869
SELECT grade FROM Highschooler WHERE name  =  "Kyle"
Return the grade for the high schooler named Kyle.
SQL correction:
SELECT grade FROM Highschooler WHERE name = 'Kyle'
entities correction:
SELECT grade FROM Highschooler WHERE name = 'Kyle'

index is 870
SELECT name FROM Highschooler WHERE grade  =  10
Show the names of all high schoolers in grade 10.
SQL correction:
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10
original correction:
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10

index is 871
SELECT name FROM Highschooler WHERE grade  =  10
What are the names of all high schoolers in grade 10?
SQL correction:
SELECT name FROM Highschooler WHERE grade = 10
original correction:
SELECT name FROM Highschooler WHERE grade = 10

index is 872
SELECT ID FROM Highschooler WHERE name  =  "Kyle"
Show the ID of the high schooler named Kyle.
SQL correction:
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.name = 'Kyle'
entities correction:
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.name = 'Kyle'

index is 873
SELECT ID FROM Highschooler WHERE name  =  "Kyle"
What is Kyle's id?
SQL correction:
SELECT ID FROM Highschooler WHERE name = 'Kyle'
entities correction:
SELECT Highschooler.ID FROM Highschooler WHERE name = 'Kyle'

index is 874
SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10
How many high schoolers are there in grade 9 or 10?
SQL correction:
SELECT COUNT(DISTINCT ID) FROM Highschooler WHERE grade IN (9, 10)
original correction:
SELECT COUNT(DISTINCT ID) FROM Highschooler WHERE grade IN (9, 10)

index is 875
SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10
Count the number of high schoolers in grades 9 or 10.
SQL correction:
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)
original correction:
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)

index is 876
SELECT grade ,  count(*) FROM Highschooler GROUP BY grade
Show the number of high schoolers for each grade.
SQL correction:
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade
original correction:
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade

index is 877
SELECT grade ,  count(*) FROM Highschooler GROUP BY grade
How many high schoolers are in each grade?
SQL correction:
SELECT grade, COUNT(DISTINCT ID) FROM Highschooler GROUP BY grade
original correction:
SELECT grade, COUNT(DISTINCT ID) FROM Highschooler GROUP BY grade

index is 878
SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
Which grade has the most high schoolers?
SQL correction:
SELECT grade, COUNT(*) AS count  FROM Highschooler  GROUP BY grade  ORDER BY count DESC  LIMIT 1
original correction:
SELECT grade, COUNT(*) AS count  FROM Highschooler  GROUP BY grade  ORDER BY count DESC  LIMIT 1

index is 879
SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
Return the grade that has the greatest number of high schoolers.
SQL correction:
SELECT grade, COUNT(*) as count FROM Highschooler GROUP BY grade ORDER BY count DESC LIMIT 1
original correction:
SELECT grade, COUNT(*) as count FROM Highschooler GROUP BY grade ORDER BY count DESC LIMIT 1

index is 880
SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4
Show me all grades that have at least 4 students.
SQL correction:
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4
original correction:
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4

index is 881
SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4
Which grades have 4 or more high schoolers?
SQL correction:
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4
original correction:
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4

index is 882
SELECT student_id ,  count(*) FROM Friend GROUP BY student_id
Show the student IDs and numbers of friends corresponding to each.
SQL correction:
SELECT T1.ID, COUNT(DISTINCT T2.friend_id)  FROM Highschooler AS T1  JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.ID
original correction:
SELECT T1.ID, COUNT(DISTINCT T2.friend_id)  FROM Highschooler AS T1  JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.ID

index is 883
SELECT student_id ,  count(*) FROM Friend GROUP BY student_id
How many friends does each student have?
SQL correction:
SELECT Highschooler.ID, COUNT(Friend.friend_id) AS friend_count FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID
original correction:
SELECT Highschooler.ID, COUNT(Friend.friend_id) AS friend_count FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID

index is 884
SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
Show the names of high school students and their corresponding number of friends.
SQL correction:
SELECT T1.name, COUNT(DISTINCT T2.friend_id)  FROM Highschooler AS T1  JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.name
original correction:
SELECT T1.name, COUNT(DISTINCT T2.friend_id)  FROM Highschooler AS T1  JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.name

index is 885
SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
What are the names of the high schoolers and how many friends does each have?
SQL correction:
SELECT T1.name, COUNT(T2.friend_id)  FROM Highschooler AS T1  LEFT JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.name
original correction:
SELECT T1.name, COUNT(T2.friend_id)  FROM Highschooler AS T1  LEFT JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.name

index is 886
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
What is the name of the high schooler who has the greatest number of friends?
SQL correction:
SELECT T1.name  FROM Highschooler AS T1  JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.ID  ORDER BY COUNT(T2.friend_id) DESC  LIMIT 1
original correction:
SELECT T1.name  FROM Highschooler AS T1  JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.ID  ORDER BY COUNT(T2.friend_id) DESC  LIMIT 1

index is 887
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Return the name of the high school student with the most friends.
SQL correction:
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID ORDER BY COUNT(DISTINCT T2.friend_id) DESC LIMIT 1
original correction:
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID ORDER BY COUNT(DISTINCT T2.friend_id) DESC LIMIT 1

index is 888
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3
Show the names of high schoolers who have at least 3 friends.
SQL correction:
SELECT T1.name  FROM Highschooler AS T1  WHERE T1.ID IN (SELECT friend_id                  FROM Friend                  GROUP BY friend_id                  HAVING COUNT(student_id) >= 3)
original correction:
SELECT T1.name  FROM Highschooler AS T1  WHERE T1.ID IN (SELECT friend_id                  FROM Friend                  GROUP BY friend_id                  HAVING COUNT(student_id) >= 3)

index is 889
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3
What are the names of high schoolers who have 3 or more friends?
SQL correction:
SELECT Highschooler.name  FROM Highschooler  JOIN Friend ON Highschooler.ID = Friend.student_id  GROUP BY Highschooler.ID, Highschooler.name  HAVING COUNT(Friend.friend_id) >= 3
original correction:
SELECT Highschooler.name  FROM Highschooler  JOIN Friend ON Highschooler.ID = Friend.student_id  GROUP BY Highschooler.ID, Highschooler.name  HAVING COUNT(Friend.friend_id) >= 3

index is 890
SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"
Show the names of all of the high schooler Kyle's friends.
SQL correction:
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id JOIN Highschooler AS T3 ON T2.student_id = T3.ID WHERE T3.name = 'Kyle'
entities correction:
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id JOIN Highschooler AS T3 ON T2.student_id = T3.ID WHERE T3.name = 'Kyle'

index is 891
SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"
Return the names of friends of the high school student Kyle.
SQL correction:
SELECT H2.name FROM Highschooler AS H1 JOIN Friend AS F ON H1.ID = F.friend_id JOIN Highschooler AS H2 ON F.student_id = H2.ID WHERE H1.name = "Kyle"
entities correction:
SELECT H2.name FROM Highschooler AS H1 JOIN Friend AS F ON H1.ID = F.friend_id JOIN Highschooler AS H2 ON F.student_id = H2.ID WHERE H1.name = 'Kyle';

index is 892
SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
How many friends does the high school student Kyle have?
SQL correction:
SELECT COUNT(*) FROM Friend  JOIN Highschooler ON Friend.friend_id = Highschooler.ID  WHERE Highschooler.name = 'Kyle'
entities correction:
SELECT COUNT(*) FROM Friend   JOIN Highschooler ON Friend.friend_id = Highschooler.ID   WHERE Highschooler.name = 'Kyle'   AND Friend.student_id = Highschooler.ID

index is 893
SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
Count the number of friends Kyle has.
SQL correction:
SELECT count(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
entities correction:
SELECT count(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')

index is 894
SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend
Show ids of all students who do not have any friends.
SQL correction:
SELECT Highschooler.ID FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.student_id IS NULL GROUP BY Highschooler.ID
original correction:
SELECT Highschooler.ID FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.student_id IS NULL GROUP BY Highschooler.ID

index is 895
SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend
What are the ids of high school students who do not have friends?
SQL correction:
SELECT Highschooler.ID  FROM Highschooler  LEFT JOIN Friend ON Highschooler.ID = Friend.student_id  WHERE Friend.friend_id IS NULL
original correction:
SELECT Highschooler.ID  FROM Highschooler  LEFT JOIN Friend ON Highschooler.ID = Friend.student_id  WHERE Friend.friend_id IS NULL

index is 896
SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id
Show names of all high school students who do not have any friends.
SQL correction:
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
original correction:
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)

index is 897
SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id
What are the names of students who have no friends?
SQL correction:
SELECT Highschooler.name  FROM Highschooler  WHERE Highschooler.ID NOT IN (     SELECT Friend.student_id      FROM Friend )
original correction:
SELECT Highschooler.name  FROM Highschooler  WHERE Highschooler.ID NOT IN (     SELECT Friend.student_id      FROM Friend )

index is 898
SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes
Show the ids of high schoolers who have friends and are also liked by someone else.
SQL correction:
SELECT DISTINCT HS.ID  FROM Highschooler AS HS  JOIN Friend AS F ON HS.ID = F.student_id  JOIN Likes AS L ON HS.ID = L.student_id  WHERE HS.ID IN (SELECT friend_id FROM Friend)  AND HS.ID IN (SELECT liked_id FROM Likes)
original correction:
SELECT DISTINCT HS.ID  FROM Highschooler AS HS  JOIN Friend AS F ON HS.ID = F.student_id  JOIN Likes AS L ON HS.ID = L.student_id  WHERE HS.ID IN (SELECT friend_id FROM Friend)  AND HS.ID IN (SELECT liked_id FROM Likes)

index is 899
SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes
What are the ids of students who both have friends and are liked?
SQL correction:
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.ID IN (SELECT Friend.student_id FROM Friend) AND Highschooler.ID IN (SELECT Likes.student_id FROM Likes)
original correction:
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.ID IN (SELECT Friend.student_id FROM Friend) AND Highschooler.ID IN (SELECT Likes.student_id FROM Likes)

index is 900
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id
Show name of all students who have some friends and also are liked by someone else.
SQL correction:
SELECT name FROM Highschooler WHERE ID IN (   SELECT student_id   FROM Friend ) AND ID IN (   SELECT liked_id   FROM Likes )
original correction:
SELECT name FROM Highschooler WHERE ID IN (   SELECT student_id   FROM Friend ) AND ID IN (   SELECT liked_id   FROM Likes )

index is 901
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id
What are the names of high schoolers who both have friends and are liked?
SQL correction:
SELECT DISTINCT H1.name  FROM Highschooler AS H1  JOIN Friend AS F1 ON H1.ID = F1.student_id  JOIN Likes AS L1 ON H1.ID = L1.student_id  JOIN Likes AS L2 ON H1.ID = L2.liked_id
original correction:
SELECT DISTINCT H1.name  FROM Highschooler AS H1  JOIN Friend AS F1 ON H1.ID = F1.student_id  JOIN Likes AS L1 ON H1.ID = L1.student_id  JOIN Likes AS L2 ON H1.ID = L2.liked_id

index is 902
SELECT student_id ,  count(*) FROM Likes GROUP BY student_id
Count the number of likes for each student id.
SQL correction:
SELECT Highschooler.ID, COUNT(Likes.*) AS like_count  FROM Highschooler  LEFT JOIN Likes ON Highschooler.ID = Likes.student_id  GROUP BY Highschooler.ID
original correction:
SELECT Highschooler.ID, COUNT(Likes.*) AS like_count  FROM Highschooler  LEFT JOIN Likes ON Highschooler.ID = Likes.student_id  GROUP BY Highschooler.ID

index is 903
SELECT student_id ,  count(*) FROM Likes GROUP BY student_id
How many likes correspond to each student id?
SQL correction:
SELECT student_id, COUNT(*) AS num_likes FROM Likes GROUP BY student_id
original correction:
SELECT student_id, COUNT(*) AS num_likes FROM Likes GROUP BY student_id

index is 904
SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
Show the names of high schoolers who have likes, and numbers of likes for each.
SQL correction:
SELECT Highschooler.name, COUNT(Likes.student_id) AS num_likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name
original correction:
SELECT Highschooler.name, COUNT(Likes.student_id) AS num_likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name

index is 905
SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
What are the names of high schoolers who have likes, and how many likes does each have?
SQL correction:
SELECT T1.name, COUNT(T2.liked_id)  FROM Highschooler AS T1  JOIN Likes AS T2 ON T1.ID = T2.student_id  GROUP BY T1.ID, T1.name
original correction:
SELECT T1.name, COUNT(T2.liked_id)  FROM Highschooler AS T1  JOIN Likes AS T2 ON T1.ID = T2.student_id  GROUP BY T1.ID, T1.name

index is 906
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
What is the name of the high schooler who has the greatest number of likes?
SQL correction:
SELECT T1.name FROM Highschooler AS T1 ORDER BY (SELECT COUNT(*) FROM Likes WHERE Likes.student_id = T1.ID) DESC LIMIT 1
original correction:
SELECT T1.name FROM Highschooler AS T1 ORDER BY (SELECT COUNT(*) FROM Likes WHERE Likes.student_id = T1.ID) DESC LIMIT 1

index is 907
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Give the name of the student with the most likes.
SQL correction:
SELECT T1.name  FROM Highschooler AS T1  WHERE T1.ID = (   SELECT T2.student_id    FROM Likes AS T2    GROUP BY T2.student_id    ORDER BY count(*) DESC    LIMIT 1 )
original correction:
SELECT T1.name  FROM Highschooler AS T1  WHERE T1.ID = (   SELECT T2.student_id    FROM Likes AS T2    GROUP BY T2.student_id    ORDER BY count(*) DESC    LIMIT 1 )

index is 908
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2
Show the names of students who have at least 2 likes.
SQL correction:
SELECT T1.name FROM Highschooler AS T1 JOIN Likes ON Likes.student_id = T1.ID GROUP BY T1.ID HAVING COUNT(Likes.liked_id) >= 2
original correction:
SELECT T1.name FROM Highschooler AS T1 JOIN Likes ON Likes.student_id = T1.ID GROUP BY T1.ID HAVING COUNT(Likes.liked_id) >= 2

index is 909
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2
What are the names of students who have 2 or more likes?
SQL correction:
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name HAVING count(*) >= 2
original correction:
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name HAVING count(*) >= 2

index is 910
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2
Show the names of students who have a grade higher than 5 and have at least 2 friends.
SQL correction:
SELECT Highschooler.name  FROM Highschooler  JOIN Friend ON Highschooler.ID = Friend.student_id  GROUP BY Highschooler.ID  HAVING Highschooler.grade > 5 AND COUNT(DISTINCT Friend.friend_id) >= 2
original correction:
SELECT Highschooler.name  FROM Highschooler  JOIN Friend ON Highschooler.ID = Friend.student_id  GROUP BY Highschooler.ID  HAVING Highschooler.grade > 5 AND COUNT(DISTINCT Friend.friend_id) >= 2

index is 911
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2
What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?
SQL correction:
SELECT name FROM Highschooler WHERE grade > 5   AND ID IN (     SELECT student_id     FROM Friend     GROUP BY student_id     HAVING count(*) >= 2   )
original correction:
SELECT name FROM Highschooler WHERE grade > 5   AND ID IN (     SELECT student_id     FROM Friend     GROUP BY student_id     HAVING count(*) >= 2   )

index is 912
SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
How many likes does Kyle have?
SQL correction:
SELECT COUNT(*)  FROM Likes  JOIN Highschooler ON Likes.student_id = Highschooler.ID  WHERE Highschooler.name = 'Kyle'
entities correction:
SELECT COUNT(*) AS like_count FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID WHERE Highschooler.name = 'Kyle'

index is 913
SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
Return the number of likes that the high schooler named Kyle has.
SQL correction:
SELECT COUNT(*)  FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID WHERE Highschooler.name = 'Kyle'
entities correction:
SELECT COUNT(*) FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID WHERE Highschooler.name = 'Kyle'

index is 914
SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
Find the average grade of all students who have some friends.
SQL correction:
SELECT AVG(T1.grade)  FROM Highschooler AS T1  WHERE T1.ID IN (     SELECT DISTINCT T2.student_id      FROM Friend AS T2 )
original correction:
SELECT AVG(T1.grade)  FROM Highschooler AS T1  WHERE T1.ID IN (     SELECT DISTINCT T2.student_id      FROM Friend AS T2 )

index is 915
SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
What is the average grade of students who have friends?
SQL correction:
SELECT AVG(grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id
original correction:
SELECT AVG(grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id

index is 916
SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
Find the minimum grade of students who have no friends.
SQL correction:
SELECT MIN(grade) AS minimum_grade FROM Highschooler WHERE ID NOT IN (     SELECT student_id     FROM Friend )
original correction:
SELECT MIN(grade) AS minimum_grade FROM Highschooler WHERE ID NOT IN (     SELECT student_id     FROM Friend )

index is 917
SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
What is the lowest grade of students who do not have any friends?
SQL correction:
SELECT min(grade)  FROM Highschooler  WHERE ID NOT IN (SELECT student_id FROM Friend)
original correction:
SELECT min(grade)  FROM Highschooler  WHERE ID NOT IN (SELECT student_id FROM Friend)

index is 918
SELECT state FROM Owners INTERSECT SELECT state FROM Professionals
Which states have both owners and professionals living there?
SQL correction:
SELECT state FROM Owners WHERE state IN (     SELECT state     FROM Professionals )
original correction:
SELECT state FROM Owners WHERE state IN (     SELECT state     FROM Professionals )

index is 919
SELECT state FROM Owners INTERSECT SELECT state FROM Professionals
Find the states where both owners and professionals live.
SQL correction:
SELECT state  FROM Owners  WHERE state IN (     SELECT state      FROM Professionals )
original correction:
SELECT state  FROM Owners  WHERE state IN (     SELECT state      FROM Professionals )

index is 920
SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )
What is the average age of the dogs who have gone through any treatments?
SQL correction:
SELECT AVG(Dogs.age) AS average_age FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
original correction:
SELECT AVG(Dogs.age) AS average_age FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id

index is 921
SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )
Find the average age of the dogs who went through treatments.
SQL correction:
SELECT avg(age) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
original correction:
SELECT avg(age) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id

index is 922
SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.
SQL correction:
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (     SELECT professional_id     FROM Treatments     GROUP BY professional_id     HAVING COUNT(*) > 2 )
entities correction:
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (     SELECT professional_id     FROM Treatments     GROUP BY professional_id     HAVING COUNT(*) > 2 )

index is 923
SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.
SQL correction:
SELECT professional_id, last_name, cell_number  FROM Professionals  WHERE state = 'Indiana' OR professional_id IN      (SELECT professional_id      FROM Treatments      GROUP BY professional_id      HAVING count(*) > 2)
entities correction:
SELECT professional_id, last_name, cell_number   FROM Professionals   WHERE state IN ('Indiana', 'Connecticut', 'Wisconsin', 'Mississippi', 'Hawaii', 'NewMexico', 'NorthCarolina', 'SouthCarolina', 'California', 'Alabama')     OR professional_id IN (       SELECT professional_id         FROM Treatments         GROUP BY professional_id         HAVING COUNT(*) > 2    )

index is 924
select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )
Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .
SQL correction:
SELECT Dogs.name FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.name HAVING COALESCE(SUM(Treatments.cost_of_treatment), 0) <= 1000
original correction:
SELECT Dogs.name FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.name HAVING COALESCE(SUM(Treatments.cost_of_treatment), 0) <= 1000

index is 925
select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )
What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?
SQL correction:
SELECT D.name FROM Dogs AS D LEFT JOIN Treatments AS T ON D.dog_id = T.dog_id LEFT JOIN Owners AS O ON D.owner_id = O.owner_id GROUP BY D.dog_id, D.name HAVING COALESCE(SUM(T.cost_of_treatment), 0) <= 1000
original correction:
SELECT D.name FROM Dogs AS D LEFT JOIN Treatments AS T ON D.dog_id = T.dog_id LEFT JOIN Owners AS O ON D.owner_id = O.owner_id GROUP BY D.dog_id, D.name HAVING COALESCE(SUM(T.cost_of_treatment), 0) <= 1000

index is 926
SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs
Which first names are used for professionals or owners but are not used as dog names?
SQL correction:
SELECT Owners.first_name, Professionals.first_name FROM Owners LEFT JOIN Dogs ON Owners.first_name = Dogs.name LEFT JOIN Professionals ON Owners.first_name = Professionals.first_name WHERE Dogs.name IS NULL
original correction:
SELECT Owners.first_name, Professionals.first_name FROM Owners LEFT JOIN Dogs ON Owners.first_name = Dogs.name LEFT JOIN Professionals ON Owners.first_name = Professionals.first_name WHERE Dogs.name IS NULL

index is 927
SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs
Find the first names that are used for professionals or owners but are not used as dog names.
SQL correction:
SELECT first_name FROM (   SELECT first_name   FROM Owners   UNION   SELECT first_name   FROM Professionals ) AS all_names WHERE first_name NOT IN (   SELECT DISTINCT name   FROM Dogs )
original correction:
SELECT first_name FROM (   SELECT first_name   FROM Owners   UNION   SELECT first_name   FROM Professionals ) AS all_names WHERE first_name NOT IN (   SELECT DISTINCT name   FROM Dogs )

index is 928
SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
Which professional did not operate any treatment on dogs? List the professional's id, role and email.
SQL correction:
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
original correction:
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)

index is 929
SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
Give me the id, role and email of the professionals who did not perform any treatment on dogs.
SQL correction:
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
original correction:
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)

index is 930
SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
Which owner owns the most dogs? List the owner id, first name and last name.
SQL correction:
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id GROUP BY Owners.owner_id ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1
original correction:
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id GROUP BY Owners.owner_id ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1

index is 931
SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
Return the owner id, first name and last name of the owner who has the most dogs.
SQL correction:
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1
original correction:
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1

index is 932
SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
Which professionals have done at least two treatments? List the professional's id, role, and first name.
SQL correction:
SELECT professional_id, role_code, first_name FROM Professionals GROUP BY professional_id, role_code, first_name HAVING COUNT(*) >= 2
original correction:
SELECT professional_id, role_code, first_name FROM Professionals GROUP BY professional_id, role_code, first_name HAVING COUNT(*) >= 2

index is 933
SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
What are the id, role, and first name of the professionals who have performed two or more treatments?
SQL correction:
SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (     SELECT professional_id     FROM Treatments     GROUP BY professional_id     HAVING COUNT(*) >= 2 )
original correction:
SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (     SELECT professional_id     FROM Treatments     GROUP BY professional_id     HAVING COUNT(*) >= 2 )

index is 934
SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1
What is the name of the breed with the most dogs?
SQL correction:
SELECT breed_name FROM Breeds WHERE breed_code IN (     SELECT breed_code     FROM Dogs     GROUP BY breed_code     HAVING count(*) = (         SELECT max(dog_count)         FROM (             SELECT breed_code, count(*) AS dog_count             FROM Dogs             GROUP BY breed_code         ) AS dog_counts     ) )
original correction:
SELECT breed_name FROM Breeds WHERE breed_code IN (     SELECT breed_code     FROM Dogs     GROUP BY breed_code     HAVING count(*) = (         SELECT max(dog_count)         FROM (             SELECT breed_code, count(*) AS dog_count             FROM Dogs             GROUP BY breed_code         ) AS dog_counts     ) )

index is 935
SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1
Which breed do the most dogs have? Give me the breed name.
SQL correction:
SELECT breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY Breeds.breed_code ORDER BY COUNT(*) DESC LIMIT 1
original correction:
SELECT breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY Breeds.breed_code ORDER BY COUNT(*) DESC LIMIT 1

index is 936
SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.
SQL correction:
SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id ORDER BY COUNT(Treatments.treatment_id) DESC LIMIT 1;
original correction:
SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id ORDER BY COUNT(Treatments.treatment_id) DESC LIMIT 1;

index is 937
SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.
SQL correction:
SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id JOIN Treatments ON Treatments.dog_id = Dogs.dog_id JOIN Charges ON Charges.charge_id = Treatments.charge_id GROUP BY Owners.owner_id, Owners.last_name ORDER BY SUM(Charges.charge_amount) DESC LIMIT 1;
original correction:
SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id JOIN Treatments ON Treatments.dog_id = Dogs.dog_id JOIN Charges ON Charges.charge_id = Treatments.charge_id GROUP BY Owners.owner_id, Owners.last_name ORDER BY SUM(Charges.charge_amount) DESC LIMIT 1;

index is 938
SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1
What is the description of the treatment type that costs the least money in total?
SQL correction:
SELECT Treatment_Types.treatment_type_description  FROM Treatment_Types  JOIN Treatments ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code  GROUP BY Treatment_Types.treatment_type_code  ORDER BY SUM(Treatments.cost_of_treatment) ASC  LIMIT 1
original correction:
SELECT Treatment_Types.treatment_type_description  FROM Treatment_Types  JOIN Treatments ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code  GROUP BY Treatment_Types.treatment_type_code  ORDER BY SUM(Treatments.cost_of_treatment) ASC  LIMIT 1

index is 939
SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1
Give me the description of the treatment type whose total cost is the lowest.
SQL correction:
SELECT T1.treatment_type_description  FROM Treatment_Types AS T1  JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code  GROUP BY T1.treatment_type_description  ORDER BY SUM(T2.cost_of_treatment) ASC  LIMIT 1
original correction:
SELECT T1.treatment_type_description  FROM Treatment_Types AS T1  JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code  GROUP BY T1.treatment_type_description  ORDER BY SUM(T2.cost_of_treatment) ASC  LIMIT 1

index is 940
SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1
Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.
SQL correction:
SELECT Owners.owner_id, Owners.zip_code  FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Charges ON Dogs.charge_id = Charges.charge_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Charges.charge_amount) DESC LIMIT 1
original correction:
SELECT Owners.owner_id, Owners.zip_code  FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Charges ON Dogs.charge_id = Charges.charge_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Charges.charge_amount) DESC LIMIT 1

index is 941
SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1
Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.
SQL correction:
SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id JOIN Professionals AS T4 ON T3.professional_id = T4.professional_id GROUP BY T1.owner_id, T1.zip_code ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1;
original correction:
SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id JOIN Professionals AS T4 ON T3.professional_id = T4.professional_id GROUP BY T1.owner_id, T1.zip_code ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1;

index is 942
SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
Which professionals have done at least two types of treatments? List the professional id and cell phone.
SQL correction:
SELECT T1.professional_id, T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(DISTINCT T2.treatment_type_code) >= 2
original correction:
SELECT T1.professional_id, T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(DISTINCT T2.treatment_type_code) >= 2

index is 943
SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
Find the id and cell phone of the professionals who operate two or more types of treatments.
SQL correction:
SELECT T1.professional_id, T1.cell_number  FROM Professionals AS T1  JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T1.professional_id  HAVING COUNT(DISTINCT T2.treatment_type_code) >= 2.
original correction:
SELECT T1.professional_id, T1.cell_number  FROM Professionals AS T1  JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T1.professional_id  HAVING COUNT(DISTINCT T2.treatment_type_code) >= 2.

index is 944
SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )
What are the first name and last name of the professionals who have done treatment with cost below average?
SQL correction:
SELECT first_name, last_name FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   WHERE cost_of_treatment < (     SELECT AVG(cost_of_treatment)     FROM Treatments   ) )
original correction:
SELECT first_name, last_name FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   WHERE cost_of_treatment < (     SELECT AVG(cost_of_treatment)     FROM Treatments   ) )

index is 945
SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )
Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.
SQL correction:
SELECT first_name, last_name FROM Professionals WHERE professional_id IN (     SELECT professional_id     FROM Treatments     WHERE cost_of_treatment < (         SELECT AVG(cost_of_treatment)         FROM Treatments     ) )
original correction:
SELECT first_name, last_name FROM Professionals WHERE professional_id IN (     SELECT professional_id     FROM Treatments     WHERE cost_of_treatment < (         SELECT AVG(cost_of_treatment)         FROM Treatments     ) )

index is 946
SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id
List the date of each treatment, together with the first name of the professional who operated it.
SQL correction:
SELECT Treatments.date_of_treatment, Professionals.first_name  FROM Treatments  JOIN Professionals ON Treatments.professional_id = Professionals.professional_id
original correction:
SELECT Treatments.date_of_treatment, Professionals.first_name  FROM Treatments  JOIN Professionals ON Treatments.professional_id = Professionals.professional_id

index is 947
SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id
What are the date and the operating professional's first name of each treatment?
SQL correction:
SELECT date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id
original correction:
SELECT date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id

index is 948
SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code
List the cost of each treatment and the corresponding treatment type description.
SQL correction:
SELECT T1.cost_of_treatment, T2.treatment_type_description FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code
original correction:
SELECT T1.cost_of_treatment, T2.treatment_type_description FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code

index is 949
SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code
What are the cost and treatment type description of each treatment?
SQL correction:
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
original correction:
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;

index is 950
SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
List each owner's first name, last name, and the size of his for her dog.
SQL correction:
SELECT first_name, last_name, size_description FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code
original correction:
SELECT first_name, last_name, size_description FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code

index is 951
SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
What are each owner's first name, last name, and the size of their dog?
SQL correction:
SELECT T1.first_name, T1.last_name, T4.size_description FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Sizes AS T4 ON T2.size_code = T4.size_code;
original correction:
SELECT T1.first_name, T1.last_name, T4.size_description FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Sizes AS T4 ON T2.size_code = T4.size_code;

index is 952
SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
List pairs of the owner's first name and the dogs's name.
SQL correction:
SELECT Owners.first_name, Dogs.name  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
original correction:
SELECT Owners.first_name, Dogs.name  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id;

index is 953
SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
What are each owner's first name and their dogs's name?
SQL correction:
SELECT T1.first_name, T2.name  FROM Owners AS T1  JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id
original correction:
SELECT T1.first_name, T2.name  FROM Owners AS T1  JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id

index is 954
SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )
List the names of the dogs of the rarest breed and the treatment dates of them.
SQL correction:
SELECT D.name, T.date_of_treatment FROM Dogs AS D JOIN Breeds AS B ON D.breed_code = B.breed_code JOIN Treatments AS T ON T.dog_id = D.dog_id WHERE B.breed_code = (     SELECT breed_code     FROM Breeds     GROUP BY breed_code     ORDER BY COUNT(*) ASC     LIMIT 1 )
original correction:
SELECT D.name, T.date_of_treatment FROM Dogs AS D JOIN Breeds AS B ON D.breed_code = B.breed_code JOIN Treatments AS T ON T.dog_id = D.dog_id WHERE B.breed_code = (     SELECT breed_code     FROM Breeds     GROUP BY breed_code     ORDER BY COUNT(*) ASC     LIMIT 1 )

index is 955
SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )
Which dogs are of the rarest breed? Show their names and treatment dates.
SQL correction:
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Breeds ON Dogs.breed_code = Breeds.breed_code WHERE Breeds.breed_name = 'rarest_breed';
entities correction:
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Breeds ON Dogs.breed_code = Breeds.breed_code WHERE Breeds.breed_name IN ('Eskimo', 'Husky', 'Bulldog');

index is 956
SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'
Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.
SQL correction:
SELECT Owners.first_name, Dogs.name  FROM Dogs  JOIN Owners ON Dogs.owner_id = Owners.owner_id  WHERE Owners.state = 'Virginia'
entities correction:
SELECT Owners.first_name, Dogs.name  FROM Dogs   JOIN Owners ON Dogs.owner_id = Owners.owner_id   WHERE Owners.state = 'Virginia'

index is 957
SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'
Find the first names of owners living in Virginia and the names of dogs they own.
SQL correction:
SELECT T1.first_name, T2.name  FROM Owners AS T1  JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  WHERE T1.state = 'Virginia'
entities correction:
SELECT T1.first_name, T2.name   FROM Owners AS T1   JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id   WHERE T1.state = 'Virginia'

index is 958
SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id
What are the arriving date and the departing date of the dogs who have gone through a treatment?
SQL correction:
SELECT date_arrived, date_departed  FROM Dogs  JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
original correction:
SELECT date_arrived, date_departed  FROM Dogs  JOIN Treatments ON Dogs.dog_id = Treatments.dog_id

index is 959
SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id
Find the arriving date and the departing date of the dogs that received a treatment.
SQL correction:
SELECT date_arrived, date_departed FROM Dogs JOIN Treatments ON Treatments.dog_id = Dogs.dog_id
original correction:
SELECT date_arrived, date_departed FROM Dogs JOIN Treatments ON Treatments.dog_id = Dogs.dog_id

index is 960
SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )
List the last name of the owner owning the youngest dog.
SQL correction:
SELECT last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY age LIMIT 1
original correction:
SELECT last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY age LIMIT 1

index is 961
SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )
Who owns the youngest dog? Give me his or her last name.
SQL correction:
SELECT last_name FROM Owners WHERE owner_id = (   SELECT owner_id   FROM Dogs   WHERE date_of_birth = (     SELECT MIN(date_of_birth)     FROM Dogs   ) ) LIMIT 1;
original correction:
SELECT last_name FROM Owners WHERE owner_id = (   SELECT owner_id   FROM Dogs   WHERE date_of_birth = (     SELECT MIN(date_of_birth)     FROM Dogs   ) ) LIMIT 1;

index is 962
SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'
List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.
SQL correction:
SELECT email_address  FROM Professionals  WHERE state = 'Hawaii' OR state = 'Wisconsin'
entities correction:
SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin')

index is 963
SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'
What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?
SQL correction:
SELECT email_address  FROM Professionals  WHERE state = 'Hawaii' OR state = 'Wisconsin'
entities correction:
SELECT email_address  FROM Professionals  WHERE state IN ('Hawaii', 'Wisconsin')

index is 964
SELECT date_arrived ,  date_departed FROM Dogs
What are the arriving date and the departing date of all the dogs?
SQL correction:
SELECT date_arrived, date_departed  FROM Dogs
original correction:
SELECT date_arrived, date_departed  FROM Dogs

index is 965
SELECT date_arrived ,  date_departed FROM Dogs
List the arrival date and the departure date for all the dogs.
SQL correction:
SELECT date_arrived, date_departed  FROM Dogs
original correction:
SELECT date_arrived, date_departed  FROM Dogs

index is 966
SELECT count(DISTINCT dog_id) FROM Treatments
How many dogs went through any treatments?
SQL correction:
SELECT COUNT(DISTINCT T2.dog_id) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id
original correction:
SELECT COUNT(DISTINCT T2.dog_id) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id

index is 967
SELECT count(DISTINCT dog_id) FROM Treatments
Count the number of dogs that went through a treatment.
SQL correction:
SELECT COUNT(DISTINCT Treatments.dog_id) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
original correction:
SELECT COUNT(DISTINCT Treatments.dog_id) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id

index is 968
SELECT count(DISTINCT professional_id) FROM Treatments
How many professionals have performed any treatment to dogs?
SQL correction:
SELECT COUNT(DISTINCT T1.professional_id) FROM Professionals AS T1 JOIN Treatments AS T2 ON T2.professional_id = T1.professional_id
original correction:
SELECT COUNT(DISTINCT T1.professional_id) FROM Professionals AS T1 JOIN Treatments AS T2 ON T2.professional_id = T1.professional_id

index is 969
SELECT count(DISTINCT professional_id) FROM Treatments
Find the number of professionals who have ever treated dogs.
SQL correction:
SELECT count(DISTINCT Professionals.professional_id) AS num_professionals FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id;
original correction:
SELECT count(DISTINCT Professionals.professional_id) AS num_professionals FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id;

index is 970
SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'
Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.
SQL correction:
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'
entities correction:
SELECT role_code, street, city, state  FROM Professionals  WHERE city LIKE '%West%'

index is 971
SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'
Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.
SQL correction:
SELECT role_code, street, city, state  FROM Professionals  WHERE city LIKE '%West%'
entities correction:
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'

index is 972
SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'
Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.
SQL correction:
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'
entities correction:
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'

index is 973
SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'
Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.
SQL correction:
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'
entities correction:
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'

index is 974
SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )
How many dogs have an age below the average?
SQL correction:
SELECT COUNT(*)  FROM Dogs  WHERE age < (SELECT AVG(age) FROM Dogs)
original correction:
SELECT COUNT(*)  FROM Dogs  WHERE age < (SELECT AVG(age) FROM Dogs)

index is 975
SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )
Count the number of dogs of an age below the average.
SQL correction:
SELECT COUNT(dog_id) AS dog_count FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
original correction:
SELECT COUNT(dog_id) AS dog_count FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)

index is 976
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
How much does the most recent treatment cost?
SQL correction:
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
original correction:
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1

index is 977
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
Show me the cost of the most recently performed treatment.
SQL correction:
SELECT Treatments.cost_of_treatment  FROM Treatments  ORDER BY Treatments.date_of_treatment DESC  LIMIT 1
original correction:
SELECT Treatments.cost_of_treatment  FROM Treatments  ORDER BY Treatments.date_of_treatment DESC  LIMIT 1

index is 978
SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )
How many dogs have not gone through any treatment?
SQL correction:
SELECT COUNT(Dogs.dog_id) FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.dog_id IS NULL
original correction:
SELECT COUNT(Dogs.dog_id) FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.dog_id IS NULL

index is 979
select count(*) from dogs where dog_id not in ( select dog_id from treatments )
Tell me the number of dogs that have not received any treatment .
SQL correction:
SELECT COUNT(DISTINCT Dogs.dog_id) FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.dog_id IS NULL
original correction:
SELECT COUNT(DISTINCT Dogs.dog_id) FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.dog_id IS NULL

index is 980
SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )
How many owners temporarily do not have any dogs?
SQL correction:
SELECT COUNT(owner_id) AS owner_count FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs)
original correction:
SELECT COUNT(owner_id) AS owner_count FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs)

index is 981
SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )
Find the number of owners who do not own any dogs at this moment.
SQL correction:
SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs WHERE abandoned_yn = 'N' AND date_departed IS NULL)
entities correction:
SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs WHERE abandoned_yn = 'N' AND date_departed IS NULL)

index is 982
SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )
How many professionals did not operate any treatment on dogs?
SQL correction:
SELECT count(T1.professional_id) FROM Professionals AS T1 LEFT JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.professional_id IS NULL GROUP BY T1.professional_id
original correction:
SELECT count(T1.professional_id) FROM Professionals AS T1 LEFT JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.professional_id IS NULL GROUP BY T1.professional_id

index is 983
SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )
Find the number of professionals who have not treated any dogs.
SQL correction:
SELECT COUNT(professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
original correction:
SELECT COUNT(professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)

index is 984
SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1
List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.
SQL correction:
SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1
original correction:
SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1

index is 985
SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1
What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.
SQL correction:
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1
original correction:
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1

index is 986
SELECT avg(age) FROM Dogs
What is the average age of all the dogs?
SQL correction:
SELECT AVG(age) FROM Dogs
original correction:
SELECT AVG(age) FROM Dogs

index is 987
SELECT avg(age) FROM Dogs
Compute the average age of all the dogs.
SQL correction:
SELECT AVG(age) FROM Dogs
original correction:
SELECT AVG(age) FROM Dogs

index is 988
SELECT max(age) FROM Dogs
What is the age of the oldest dog?
SQL correction:
SELECT MAX(age) AS oldest_age FROM Dogs
original correction:
SELECT MAX(age) AS oldest_age FROM Dogs

index is 989
SELECT max(age) FROM Dogs
Tell me the age of the oldest dog.
SQL correction:
SELECT MAX(age) AS oldest_age FROM Dogs
original correction:
SELECT MAX(age) AS oldest_age FROM Dogs

index is 990
SELECT charge_type ,  charge_amount FROM Charges
How much does each charge type costs? List both charge type and amount.
SQL correction:
SELECT charge_type, charge_amount FROM Charges
original correction:
SELECT charge_type, charge_amount FROM Charges

index is 991
SELECT charge_type ,  charge_amount FROM Charges
List each charge type and its amount.
SQL correction:
SELECT charge_type, charge_amount FROM Charges
original correction:
SELECT charge_type, charge_amount FROM Charges

index is 992
SELECT max(charge_amount) FROM Charges
How much does the most expensive charge type costs?
SQL correction:
SELECT charge_type, MAX(charge_amount) FROM Charges
original correction:
SELECT charge_type, MAX(charge_amount) FROM Charges

index is 993
SELECT max(charge_amount) FROM Charges
What is the charge amount of the most expensive charge type?
SQL correction:
SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1
original correction:
SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1

index is 994
SELECT email_address ,  cell_number ,  home_phone FROM professionals
List the email, cell phone and home phone of all the professionals.
SQL correction:
SELECT email_address, cell_number, home_phone FROM Professionals
original correction:
SELECT email_address, cell_number, home_phone FROM Professionals

index is 995
SELECT email_address ,  cell_number ,  home_phone FROM professionals
What are the email, cell phone and home phone of each professional?
SQL correction:
SELECT email_address, cell_number, home_phone  FROM Professionals
original correction:
SELECT email_address, cell_number, home_phone  FROM Professionals

index is 996
SELECT DISTINCT breed_code ,  size_code FROM dogs
What are all the possible breed type and size type combinations?
SQL correction:
SELECT Breeds.breed_name, Sizes.size_description  FROM Breeds  JOIN Dogs ON Dogs.breed_code = Breeds.breed_code  JOIN Sizes ON Dogs.size_code = Sizes.size_code GROUP BY Breeds.breed_name, Sizes.size_description
original correction:
SELECT Breeds.breed_name, Sizes.size_description  FROM Breeds  JOIN Dogs ON Dogs.breed_code = Breeds.breed_code  JOIN Sizes ON Dogs.size_code = Sizes.size_code GROUP BY Breeds.breed_name, Sizes.size_description

index is 997
SELECT DISTINCT breed_code ,  size_code FROM dogs
Find the distinct breed type and size type combinations for dogs.
SQL correction:
SELECT SELECT DISTINCT Dogs.breed_code, Dogs.size_code FROM Dogs
original correction:
SELECT SELECT DISTINCT Dogs.breed_code, Dogs.size_code FROM Dogs

index is 998
SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code
List the first name of all the professionals along with the description of the treatment they have done.
SQL correction:
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Treatments.professional_id = Professionals.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
original correction:
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Treatments.professional_id = Professionals.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code

index is 999
SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code
What are each professional's first name and description of the treatment they have performed?
SQL correction:
SELECT professionals.first_name, treatment_types.treatment_type_description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
original correction:
SELECT professionals.first_name, treatment_types.treatment_type_description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code

index is 1000
SELECT count(*) FROM singer
How many singers are there?
SQL correction:
SELECT COUNT(*) FROM singer
original correction:
SELECT COUNT(*) FROM singer

index is 1001
SELECT count(*) FROM singer
What is the count of singers?
SQL correction:
SELECT COUNT(*) FROM singer
original correction:
SELECT COUNT(*) FROM singer

index is 1002
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
List the name of singers in ascending order of net worth.
SQL correction:
SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions ASC
original correction:
SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions ASC

index is 1003
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
What are the names of singers ordered by ascending net worth?
SQL correction:
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
original correction:
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC

index is 1004
SELECT Birth_Year ,  Citizenship FROM singer
What are the birth year and citizenship of singers?
SQL correction:
SELECT Birth_Year, Citizenship FROM singer
original correction:
SELECT Birth_Year, Citizenship FROM singer

index is 1005
SELECT Birth_Year ,  Citizenship FROM singer
What are the birth years and citizenships of the singers?
SQL correction:
SELECT Birth_Year, Citizenship FROM singer
original correction:
SELECT Birth_Year, Citizenship FROM singer

index is 1006
SELECT Name FROM singer WHERE Citizenship != "France"
List the name of singers whose citizenship is not "France".
SQL correction:
SELECT Name FROM singer WHERE Citizenship <> 'France'
entities correction:
SELECT Name FROM singer WHERE Citizenship <> 'France'

index is 1007
SELECT Name FROM singer WHERE Citizenship != "France"
What are the names of the singers who are not French citizens?
SQL correction:
SELECT Name FROM singer WHERE Citizenship <> 'French'
entities correction:
SELECT Name FROM singer WHERE Citizenship NOT IN ('France')

index is 1008
SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949
Show the name of singers whose birth year is either 1948 or 1949?
SQL correction:
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949
original correction:
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949

index is 1009
SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949
What are the names of the singers whose birth years are either 1948 or 1949?
SQL correction:
SELECT Name  FROM singer  WHERE Birth_Year = 1948 OR Birth_Year = 1949
original correction:
SELECT Name  FROM singer  WHERE Birth_Year = 1948 OR Birth_Year = 1949

index is 1010
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
What is the name of the singer with the largest net worth?
SQL correction:
SELECT singer.Name  FROM singer  ORDER BY singer.Net_Worth_Millions DESC  LIMIT 1
original correction:
SELECT singer.Name  FROM singer  ORDER BY singer.Net_Worth_Millions DESC  LIMIT 1

index is 1011
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
What is the name of the singer who is worth the most?
SQL correction:
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
original correction:
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1

index is 1012
SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship
Show different citizenship of singers and the number of singers of each citizenship.
SQL correction:
SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship
original correction:
SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship

index is 1013
SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship
For each citizenship, how many singers are from that country?
SQL correction:
SELECT Citizenship, COUNT(DISTINCT Singer_ID) FROM singer GROUP BY Citizenship
original correction:
SELECT Citizenship, COUNT(DISTINCT Singer_ID) FROM singer GROUP BY Citizenship

index is 1014
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1
Please show the most common citizenship of singers.
SQL correction:
SELECT Citizenship, COUNT(*) AS Count  FROM singer  GROUP BY Citizenship  ORDER BY Count DESC  LIMIT 1
original correction:
SELECT Citizenship, COUNT(*) AS Count  FROM singer  GROUP BY Citizenship  ORDER BY Count DESC  LIMIT 1

index is 1015
select citizenship from singer group by citizenship order by count(*) desc limit 1
What is the most common singer citizenship ?
SQL correction:
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1
original correction:
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1

index is 1016
SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship
Show different citizenships and the maximum net worth of singers of each citizenship.
SQL correction:
SELECT Citizenship, MAX(Net_Worth_Millions)  FROM singer  GROUP BY Citizenship
original correction:
SELECT Citizenship, MAX(Net_Worth_Millions)  FROM singer  GROUP BY Citizenship

index is 1017
SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship
For each citizenship, what is the maximum net worth?
SQL correction:
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship
original correction:
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship

index is 1018
SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID
Show titles of songs and names of singers.
SQL correction:
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID
original correction:
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID

index is 1019
SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID
What are the song titles and singer names?
SQL correction:
SELECT Title, Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID
original correction:
SELECT Title, Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID

index is 1020
SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000
Show distinct names of singers that have songs with sales more than 300000.
SQL correction:
SELECT DISTINCT T1.Name  FROM singer AS T1  JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  WHERE T2.Sales > 300000
original correction:
SELECT DISTINCT T1.Name  FROM singer AS T1  JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  WHERE T2.Sales > 300000

index is 1021
SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000
what are the different names of the singers that have sales more than 300000?
SQL correction:
SELECT Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Sales > 300000
original correction:
SELECT Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Sales > 300000

index is 1022
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1
Show the names of singers that have more than one song.
SQL correction:
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1
original correction:
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1

index is 1023
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1
What are the names of the singers that have more than one songs?
SQL correction:
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1
original correction:
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1

index is 1024
SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name
Show the names of singers and the total sales of their songs.
SQL correction:
SELECT T1.Name, SUM(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name
original correction:
SELECT T1.Name, SUM(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name

index is 1025
SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name
For each singer name, what is the total sales for their songs?
SQL correction:
SELECT T1.Name, SUM(T2.Sales)  FROM singer AS T1  JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Name
original correction:
SELECT T1.Name, SUM(T2.Sales)  FROM singer AS T1  JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Name

index is 1026
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
List the name of singers that do not have any song.
SQL correction:
SELECT Name  FROM singer  WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
original correction:
SELECT Name  FROM singer  WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)

index is 1027
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
What is the sname of every sing that does not have any song?
SQL correction:
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song)
original correction:
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song)

index is 1028
SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955
Show the citizenship shared by singers with birth year before 1945 and after 1955.
SQL correction:
SELECT DISTINCT Citizenship  FROM singer  WHERE Birth_Year < 1945 OR Birth_Year > 1955
original correction:
SELECT DISTINCT Citizenship  FROM singer  WHERE Birth_Year < 1945 OR Birth_Year > 1955

index is 1029
SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955
What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?
SQL correction:
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955
original correction:
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955

index is 1030
SELECT count(*) FROM Other_Available_Features
How many available features are there in total?
SQL correction:
SELECT COUNT(*) AS total_available_features FROM Other_Available_Features
original correction:
SELECT COUNT(*) AS total_available_features FROM Other_Available_Features

index is 1031
SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  "AirCon"
What is the feature type name of feature AirCon?
SQL correction:
SELECT Ref_Feature_Types.feature_type_name  FROM Ref_Feature_Types JOIN Other_Available_Features ON Ref_Feature_Types.feature_type_code = Other_Available_Features.feature_type_code WHERE Other_Available_Features.feature_name = 'AirCon'
entities correction:
SELECT Ref_Feature_Types.feature_type_name FROM Ref_Feature_Types JOIN Other_Available_Features ON Ref_Feature_Types.feature_type_code = Other_Available_Features.feature_type_code WHERE Other_Available_Features.feature_name = 'AirCon'

index is 1032
SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code
Show the property type descriptions of properties belonging to that code.
SQL correction:
SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code = 'code'
entities correction:
SELECT property_type_description  FROM Ref_Property_Types  WHERE property_type_code = 'code'

index is 1033
SELECT property_name FROM Properties WHERE property_type_code  =  "House" UNION SELECT property_name FROM Properties WHERE property_type_code  =  "Apartment" AND room_count  >  1
What are the names of properties that are either houses or apartments with more than 1 room?
SQL correction:
SELECT property_name  FROM Properties  JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code  WHERE (Ref_Property_Types.property_type_description = 'house' OR Ref_Property_Types.property_type_description = 'apartment')  AND room_count > 1
entities correction:
SELECT property_name FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code WHERE (Ref_Property_Types.property_type_description = 'House' OR Ref_Property_Types.property_type_description = 'Apartment') AND room_count > 1
