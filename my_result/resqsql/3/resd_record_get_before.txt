SELECT COUNT(DISTINCT singer_ID) FROM singer
SELECT COUNT(*) FROM singer
SELECT name ,  country ,  age FROM singer ORDER BY age DESC
SELECT name , country , age FROM singer ORDER BY age DESC
SELECT AVG(age) ,  MIN(age) ,  MAX(age) FROM singer WHERE country  =  'France'
SELECT AVG(age) ,  MIN(age) ,  MAX(age) FROM singer WHERE country  =  'French'
SELECT name , song_release_year FROM singer ORDER BY age ASC LIMIT 1
SELECT name ,  song_release_year FROM singer WHERE age  =  (SELECT min(age) FROM singer)
SELECT DISTINCT country FROM singer WHERE age  >  20
SELECT DISTINCT country FROM singer WHERE age > 20
SELECT country , COUNT(*) FROM singer GROUP BY country
SELECT country ,  COUNT(*) FROM singer GROUP BY country
SELECT song_name FROM singer GROUP BY song_name HAVING age  >  (SELECT avg(age) FROM singer)
SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
SELECT location , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
SELECT location ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
SELECT max(capacity) ,  AVG(capacity) FROM stadium
SELECT AVG(capacity) , MAX(capacity) FROM stadium
SELECT name ,  capacity FROM stadium GROUP BY name ORDER BY AVG(average) DESC LIMIT 1
SELECT name , capacity FROM stadium GROUP BY name HAVING AVG(average) = (SELECT MAX(average) FROM stadium)
SELECT count(*) FROM concert WHERE year = 2014 OR year = 2015
SELECT COUNT(*) FROM concert WHERE year = 2014 OR year = 2015
SELECT stadium.name , count(concert.concert_ID) FROM stadium JOIN concert ON stadium.stadium_ID = concert.stadium_ID GROUP BY stadium.name
SELECT T1.name , count(T2.*) FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.name
SELECT stadium.name , stadium.capacity FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year >= 2014 GROUP BY stadium.name , stadium.capacity ORDER BY count(concert.concert_id) DESC LIMIT 1
SELECT name , capacity FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year > 2013 GROUP BY stadium.name ORDER BY COUNT(concert.concert_ID) DESC LIMIT 1
SELECT year FROM concert GROUP BY year ORDER BY count(*) DESC LIMIT 1
SELECT year FROM concert GROUP BY year ORDER BY count(*) DESC LIMIT 1
SELECT name FROM stadium WHERE NOT EXISTS (SELECT concert_ID FROM concert WHERE stadium.Stadium_ID  =  concert.Stadium_ID)
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
SELECT DISTINCT country FROM singer WHERE (age > 40 AND age < 30)
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)
SELECT concert_name ,  theme , COUNT(singer_id) FROM concert JOIN singer_in_concert ON concert.concert_id  =  singer_in_concert.concert_id GROUP BY concert_name ,  theme
SELECT concert_name ,  theme ,  count(singer_id) FROM concert JOIN singer_in_concert ON concert.concert_id  =  singer_in_concert.concert_id GROUP BY concert_name ,  theme
SELECT singer.name ,  COUNT (singer_in_concert.singer_id) FROM singer_in_concert JOIN singer ON singer_in_concert.singer_id  =  singer.singer_id GROUP BY singer.name
SELECT name, COUNT(singer_in_concert.concert_id) FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name
SELECT DISTINCT name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014
SELECT DISTINCT name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id WHERE concert.year = 2014
SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
SELECT DISTINCT stadium.name , stadium.location FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.year = 2014 AND concert.year = 2015
SELECT DISTINCT T1.name ,  T1.location FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T2.year  =  2014 AND T1.stadium_id IN (SELECT stadium_id FROM concert WHERE year  =  2015)
SELECT count(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)
SELECT COUNT(concert_ID) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium))
SELECT count(petid) FROM pets WHERE weight > 10
SELECT count(*) FROM Pets WHERE weight > 10
SELECT weight FROM Pets WHERE pet_age  =  (SELECT min(pet_age) FROM Pets WHERE PetType  =  'dog')
SELECT MIN(weight) FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog')
SELECT max(weight) ,  pettype FROM pets GROUP BY pettype
SELECT pettype , MAX(weight) FROM pets GROUP BY pettype
SELECT count(DISTINCT T2.petid) FROM has_pet AS T1 JOIN student AS T2 ON T1.stuid = T2.stuid WHERE T2.age > 20
SELECT count(*) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20
SELECT COUNT(*) FROM student JOIN has_pet ON student.StuID = has_pet.StuID JOIN Pets ON has_pet.PetID = Pets.PetID WHERE student.Sex = 'F' AND Pets.PetType = 'dog'
SELECT COUNT(petid) FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON student.stuid = has_pet.stuid WHERE pettype = 'dog' AND sex = 'female'
SELECT count(DISTINCT pettype) FROM pets
SELECT COUNT(DISTINCT pettype) FROM pets
SELECT DISTINCT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype IN ('cat', 'dog')))
SELECT DISTINCT fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE (pets.pettype = 'cat' OR pets.pettype = 'dog')
SELECT DISTINCT fname FROM student WHERE EXISTS (SELECT * FROM has_pet WHERE student.StuID = has_pet.StuID AND EXISTS (SELECT * FROM Pets WHERE has_pet.PetID = Pets.PetID AND Pets.PetType = 'cat')) AND EXISTS (SELECT * FROM has_pet WHERE student.StuID = has_pet.StuID AND EXISTS (SELECT * FROM Pets WHERE has_pet.PetID = Pets.PetID AND Pets.PetType = 'dog'))
SELECT fname FROM student WHERE EXISTS (SELECT * FROM has_pet WHERE has_pet.stuid = student.stuid AND has_pet.petid IN (SELECT petid FROM pets WHERE pettype = 'cat')) AND EXISTS (SELECT * FROM has_pet WHERE has_pet.stuid = student.stuid AND has_pet.petid IN (SELECT petid FROM pets WHERE pettype = 'dog'))
SELECT major , age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid  =  pets.petid WHERE pettype  =  'cat')
SELECT student.major ,  student.age FROM student WHERE student.id NOT IN (SELECT has_pet.stuid FROM has_pet WHERE has_pet.petid IN (SELECT pets.petid FROM pets WHERE pets.pettype  =  'cat'))
SELECT id FROM student WHERE id NOT IN (SELECT stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat')
SELECT id FROM student WHERE id NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))
SELECT fname , age FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog')) AND stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat'))
SELECT DISTINCT fname FROM student WHERE EXISTS (SELECT * FROM pets WHERE pettype = 'dog' AND stuid = student.stuid) AND NOT EXISTS (SELECT * FROM pets WHERE pettype = 'cat' AND stuid = student.stuid)
SELECT pettype ,  weight FROM pets WHERE pet_age  =  (SELECT min(pet_age) FROM pets)
SELECT pettype ,  weight FROM pets WHERE pet_age  =  (SELECT min(pet_age) FROM pets)
SELECT petid ,  weight FROM pets WHERE pet_age  >  1
SELECT petid , weight FROM pets WHERE pet_age > 1
SELECT pettype , AVG(pet_age) , MAX(pet_age) FROM pets GROUP BY pettype
SELECT pettype ,  AVG(pet_age) ,  MAX(pet_age) FROM pets GROUP BY pettype
SELECT pettype ,  AVG (weight) FROM pets GROUP BY pettype
SELECT pettype ,  AVG (weight) FROM pets GROUP BY pettype
SELECT fname , age FROM student WHERE stuid IN (SELECT stuid FROM has_pet)
SELECT DISTINCT fname , age FROM student WHERE EXISTS (SELECT * FROM has_pet WHERE student.stuid  =  has_pet.stuid)
SELECT petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE lname  =  'Smith'
SELECT petid FROM has_pet WHERE stuid  =  (SELECT stuid FROM student WHERE lname  =  'Smith')
SELECT count(petid) ,  stuid FROM has_pet GROUP BY stuid
SELECT student.stuid , COUNT(has_pet.petid) FROM student JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.stuid
SELECT fname , sex FROM student JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY fname , sex HAVING count(has_pet.petid) > 1
SELECT fname , sex FROM student WHERE (SELECT COUNT(*) FROM has_pet WHERE has_pet.StuID = student.StuID) > 1
SELECT lname FROM student JOIN has_pet ON student.StuID = has_pet.StuID JOIN pets ON has_pet.PetID = pets.PetID WHERE pets.PetType = 'cat' AND pets.pet_age = 3
SELECT lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND pets.pet_age = 3
SELECT avg(age) FROM student WHERE id NOT IN (SELECT stuid FROM has_pet)
SELECT avg(age) FROM student WHERE id NOT IN (SELECT stuid FROM Has_Pet)
SELECT count(*) FROM continents
SELECT count(*) FROM continents
SELECT contid ,  continent , count(countryname) FROM continents JOIN countries ON continents.continent  =  countries.continent GROUP BY contid ,  continent
SELECT contid ,  continent ,  count(countryname) FROM continents JOIN countries ON continents.contid  =  countries.continent GROUP BY contid ,  continent
SELECT count(DISTINCT countryname) FROM countries
SELECT COUNT(*) FROM countries
SELECT car_makers.fullname , car_makers.id , count(model_list.modelid) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname , car_makers.id
SELECT fullname ,  id , COUNT(modelid) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY fullname , id
SELECT model FROM cars_data JOIN model_list ON cars_data.id = model_list.modelid WHERE horsepower = (SELECT min(horsepower) FROM cars_data)
SELECT model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.modelid ORDER BY cars_data.horsepower ASC LIMIT 1
SELECT T3.model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.id  =  T2.makeid JOIN model_list AS T3 ON T2.model  =  T3.model WHERE T1.weight  <  (SELECT avg(weight) FROM cars_data)
SELECT T3.model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.id  =  T2.makeid JOIN model_list AS T3 ON T2.model  =  T3.model WHERE T1.weight  <  (SELECT avg(weight) FROM cars_data)
SELECT DISTINCT maker FROM car_makers WHERE year  =  1970
SELECT DISTINCT maker FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = 1970
SELECT make ,  year FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE year = (SELECT min(year) FROM cars_data)
SELECT car_makers.maker , cars_data.year FROM cars_data JOIN car_names ON cars_data.id  =  car_names.makeid JOIN model_list ON car_names.model  =  model_list.model JOIN car_makers ON model_list.maker  =  car_makers.id WHERE cars_data.year  =  (SELECT min(year) FROM cars_data)
SELECT DISTINCT model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Year > 1980)
SELECT DISTINCT model FROM cars_data, car_names WHERE cars_data.id = car_names.makeid AND cars_data.year > 1980
SELECT continent ,  COUNT(DISTINCT car_makers.Id) FROM continents JOIN countries ON continents.ContId  =  countries.Continent JOIN car_makers ON countries.CountryId  =  car_makers.Country GROUP BY continent
SELECT continents.continent , count(car_makers.*) FROM continents JOIN countries ON continents.contid  =  countries.continent JOIN car_makers ON car_makers.country  =  countries.countryid GROUP BY continents.continent
SELECT countryname FROM countries GROUP BY countryname ORDER BY count(car_makers.maker) DESC LIMIT 1
SELECT countryname FROM countries GROUP BY countryname ORDER BY count(*) DESC LIMIT 1
SELECT COUNT(DISTINCT model_list.modelid) , car_makers.fullname FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname
SELECT COUNT(model_list.model) , car_makers.id , car_makers.fullname FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY car_makers.id , car_makers.fullname
SELECT accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE car_names.make = 'amc hornet sportabout (sw)'
SELECT accelerate FROM cars_data WHERE id  =  (SELECT makeid FROM car_names WHERE make  =  'amc hornet' AND model  =  'amc hornet sportabout (sw)')
SELECT count(maker) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'france'
SELECT COUNT(DISTINCT maker) FROM car_makers WHERE country = (SELECT countryid FROM countries WHERE countryname = 'France')
SELECT count(DISTINCT model) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.country = 'usa'
SELECT COUNT(model) FROM car_names WHERE MakeId  =  (SELECT CountryId FROM countries WHERE CountryName  =  'United States')
SELECT avg(mpg) FROM cars_data WHERE cylinders = 4
SELECT avg(MPG) FROM cars_data WHERE Cylinders  =  4
SELECT MIN(weight) FROM cars_data WHERE cylinders  =  8 AND year  =  1974
SELECT min(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974
SELECT maker , model FROM car_makers , model_list WHERE car_makers.id = model_list.maker
SELECT maker , model FROM car_makers JOIN model_list ON car_makers.id  =  model_list.maker
SELECT countryname ,  countryid FROM countries WHERE EXISTS (SELECT * FROM car_makers WHERE car_makers.country  =  countries.countryid)
SELECT countryname ,  countryid FROM countries WHERE EXISTS (SELECT * FROM car_makers WHERE countries.countryid  =  car_makers.country)
SELECT count(*) FROM cars_data WHERE horsepower > 150
SELECT count(*) FROM cars_data WHERE horsepower > 150
SELECT year ,  AVG (weight) FROM cars_data GROUP BY year
SELECT AVG(weight) , year FROM cars_data GROUP BY year
SELECT countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE continent = 'europe' GROUP BY countryname HAVING count(DISTINCT car_makers.maker) >= 3
SELECT DISTINCT countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE continent = 'Europe' GROUP BY countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3
SELECT max(horsepower) , make FROM cars_data JOIN car_names ON cars_data.Id  =  car_names.MakeId WHERE cylinders  =  3 GROUP BY make
SELECT max(horsepower) ,  car_makers.Maker FROM cars_data JOIN car_names ON cars_data.Id  =  car_names.MakeId JOIN model_list ON car_names.Model  =  model_list.Model JOIN car_makers ON model_list.Maker  =  car_makers.Id WHERE cars_data.Cylinders  =  3 GROUP BY car_makers.Maker
SELECT T3.model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.id  =  T2.makeid JOIN model_list AS T3 ON T2.model  =  T3.model WHERE T1.mpg  =  (SELECT max(mpg) FROM cars_data)
SELECT model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid ORDER BY cars_data.mpg DESC LIMIT 1
SELECT avg(horsepower) FROM cars_data WHERE year  <  1980
SELECT avg(horsepower) FROM cars_data WHERE year  <  1980
SELECT avg(edispl) FROM cars_data JOIN car_names ON cars_data.Id  =  car_names.MakeId WHERE car_names.Model  =  'volvo'
SELECT avg(edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.model = 'volvo'
SELECT cylinders , MAX(accelerate) FROM cars_data GROUP BY cylinders
SELECT MAX(accelerate) FROM cars_data GROUP BY cylinders
SELECT model FROM model_list GROUP BY model ORDER BY count(make) DESC LIMIT 1
SELECT model FROM model_list GROUP BY model ORDER BY COUNT(DISTINCT modelid) DESC LIMIT 1
SELECT count(*) FROM cars_data WHERE cylinders > 4
SELECT count(*) FROM cars_data WHERE cylinders > 4
SELECT count(*) FROM cars_data WHERE year = 1980
SELECT count(*) FROM cars_data WHERE year = 1980
SELECT COUNT(DISTINCT modelid) FROM model_list WHERE maker = (SELECT id FROM car_makers WHERE fullname = 'American Motor Company')
SELECT count(*) FROM model_list WHERE maker = (SELECT id FROM car_makers WHERE fullname = 'American Motor Company')
SELECT fullname ,  id FROM car_makers GROUP BY fullname , id HAVING count(*)  >  3
SELECT maker ,  id FROM car_makers JOIN model_list ON car_makers.id  =  model_list.maker GROUP BY maker ,  id HAVING count(model_list.modelid)  >  3
SELECT DISTINCT model FROM model_list WHERE maker = 'General Motors' OR EXISTS (SELECT * FROM cars_data WHERE weight > 3500 AND cars_data.id = model_list.modelid)
SELECT DISTINCT model FROM model_list WHERE maker = 'General Motors' OR weight > 3500
SELECT DISTINCT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000
SELECT DISTINCT year FROM cars_data WHERE weight < 4000 OR weight > 3000
SELECT horsepower FROM cars_data WHERE accelerate  =  (SELECT max(accelerate) FROM cars_data)
SELECT horsepower FROM cars_data WHERE accelerate  =  (SELECT max(accelerate) FROM cars_data)
SELECT cylinders FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE model_list.maker = 'volvo' AND cars_data.accelerate = (SELECT MIN(accelerate) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE model_list.maker = 'volvo')
SELECT cylinders FROM cars_data WHERE accelerate  =  (SELECT min(accelerate) FROM cars_data WHERE ModelId IN (SELECT modelid FROM model_list WHERE Maker = 'volvo'))
SELECT count(*) FROM cars_data WHERE accelerate  >  (SELECT max(horsepower) FROM cars_data)
SELECT count(*) FROM cars_data WHERE accelerate  >  (SELECT max(horsepower) FROM cars_data)
SELECT count(DISTINCT countryname) FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING count(DISTINCT car_makers.id) > 2
SELECT count(DISTINCT T1.countryid) FROM countries AS T1 JOIN car_makers AS T2 ON T1.countryid  =  T2.country GROUP BY T1.countryid HAVING count(DISTINCT T2.maker)  >  2
SELECT count(*) FROM cars_data WHERE cylinders > 6
SELECT count(*) FROM cars_data WHERE cylinders  >  6
SELECT model FROM cars_data JOIN model_list ON cars_data.id  =  model_list.modelid WHERE cylinders  =  4 AND horsepower  =  (SELECT max(horsepower) FROM cars_data WHERE cylinders  =  4)
SELECT model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE cars_data.cylinders = 4 GROUP BY model_list.model ORDER BY max(cars_data.horsepower) DESC LIMIT 1
SELECT car_names.makeid , car_names.make FROM cars_data JOIN car_names ON cars_data.id  =  car_names.makeid JOIN car_makers ON car_names.makeid  =  car_makers.id WHERE cars_data.horsepower > (SELECT min(horsepower) FROM cars_data) AND cars_data.cylinders  <=  3 GROUP BY car_names.makeid , car_names.make
SELECT car_names.makeid ,  car_names.make FROM cars_data JOIN car_names ON cars_data.id  =  car_names.makeid JOIN model_list ON car_names.model  =  model_list.model JOIN car_makers ON model_list.maker  =  car_makers.id WHERE cars_data.horsepower  <>  (SELECT min(horsepower) FROM cars_data) AND cars_data.cylinders  <  4
SELECT max(MPG) FROM cars_data WHERE Cylinders  =  8 OR Year  <  1980
SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980
SELECT model FROM cars_data JOIN model_list ON cars_data.id = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id WHERE weight < 3500 AND car_makers.fullname <> 'Ford Motor Company'
SELECT DISTINCT T2.model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.id = T2.makeid JOIN model_list AS T3 ON T2.model = T3.model AND T3.maker <> 'ford' JOIN car_makers AS T4 ON T3.maker = T4.id WHERE T1.weight < 3500
SELECT countryName FROM countries WHERE NOT EXISTS (SELECT id FROM car_makers WHERE car_makers.country  =  countries.countryId)
SELECT countryname FROM countries WHERE NOT EXISTS (SELECT id FROM car_makers WHERE countries.countryid = car_makers.country)
SELECT id , maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY id , maker HAVING count(DISTINCT modelid) >= 2 AND count(DISTINCT id) > 3
SELECT car_makers.id , car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.makeid JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY car_makers.id , car_makers.maker HAVING COUNT(DISTINCT model_list.model) >= 2 AND COUNT(DISTINCT cars_data.id) > 3
SELECT countryid ,  countryname FROM countries JOIN car_makers ON countries.countryid  =  car_makers.country OR countries.countryid  =  car_names.country WHERE count(car_makers.*) > 3 OR car_names.model  =  'fiat' GROUP BY countryid ,  countryname
SELECT countryid ,  countryname FROM countries LEFT JOIN car_makers ON countries.countryid  =  car_makers.country LEFT JOIN car_names ON car_makers.id  =  car_names.makeid WHERE count(car_makers.id)  >  3 OR car_names.make  =  'fiat' GROUP BY countryid ,  countryname
SELECT country FROM airlines WHERE airline = 'JetBlue Airways'
SELECT country FROM airlines WHERE airline = 'JetBlue Airways'
SELECT abbreviation FROM airlines WHERE airline = "JetBlue Airways"
SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways'
SELECT airline , abbreviation FROM airlines WHERE country = "USA"
SELECT airline , abbreviation FROM airlines WHERE country = 'USA'
SELECT airportcode ,  airportname FROM airports WHERE city  =  'Anthony'
SELECT airportcode ,  airportname FROM airports WHERE city = 'Anthony'
SELECT COUNT(DISTINCT airline) FROM airlines
SELECT count(DISTINCT uid) FROM airlines
SELECT count(*) FROM airports
SELECT count(*) FROM airports
SELECT count(*) FROM flights
SELECT count(*) FROM flights
SELECT airline FROM airlines WHERE abbreviation = 'UAL'
SELECT airline FROM airlines WHERE abbreviation = 'UAL'
SELECT count(*) FROM airlines WHERE country  =  'USA'
SELECT COUNT(*) FROM airlines WHERE country = 'USA'
SELECT city ,  country FROM airports WHERE airportname = 'Alton'
SELECT city ,  country FROM airports WHERE airportname  =  'Alton'
SELECT airportname FROM airports WHERE airportcode = 'AKO'
SELECT airportname FROM airports WHERE airportcode = 'AKO'
SELECT airportname FROM airports WHERE city = 'Aberdeen'
SELECT airportname FROM airports WHERE city = 'Aberdeen'
SELECT count(*) FROM flights WHERE SourceAirport = 'APG'
SELECT count(*) FROM flights WHERE SourceAirport  =  'APG'
SELECT count(*) FROM flights WHERE destairport = 'ATO'
SELECT count(*) FROM flights WHERE destairport = 'ATO'
SELECT count(*) FROM flights WHERE sourceairport  =  (SELECT airportcode FROM airports WHERE city = 'Aberdeen')
SELECT count(*) FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen')
SELECT count(*) FROM flights WHERE destairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen')
SELECT count(*) FROM flights WHERE destairport = "Aberdeen"
SELECT count(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley'
SELECT count(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley'
SELECT count(*) FROM flights WHERE airline = 'JetBlue Airways'
SELECT count(*) FROM flights WHERE airline = 'JetBlue Airways'
SELECT count(*) FROM flights WHERE airline = 'United Airlines' AND (destairport = 'ASY' OR sourceairport = 'ASY')
SELECT count(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'ASY'
SELECT count(*) FROM flights WHERE sourceairport  =  'AHD' AND airline  =  'United Airlines'
SELECT count(*) FROM flights WHERE sourceairport  =  'AHD' AND airline  =  'United Airlines'
SELECT count(*) FROM flights WHERE destairport  =  (SELECT airportcode FROM airports WHERE city  =  'Aberdeen') AND airline  =  (SELECT uid FROM airlines WHERE airline  =  'United Airlines')
SELECT count(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode JOIN airlines ON flights.airline = airlines.airline WHERE airports.city = "Aberdeen" AND airlines.airline = "United Airlines"
SELECT city FROM airports GROUP BY city ORDER BY count(DestAirport) DESC LIMIT 1
SELECT airports.city FROM flights JOIN airports ON flights.destairport = airports.airportcode GROUP BY airports.city ORDER BY count(*) DESC LIMIT 1
SELECT city FROM airports INNER JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.city ORDER BY COUNT(flights.SourceAirport) DESC LIMIT 1
SELECT city FROM airports JOIN flights ON airports.airportcode = flights.sourceairport GROUP BY city ORDER BY count(flights.sourceairport) DESC LIMIT 1
SELECT airportcode FROM flights JOIN airports ON flights.destairport = airports.airportcode GROUP BY airportcode ORDER BY count(*) DESC LIMIT 1
SELECT airportcode FROM airports JOIN flights ON airports.airportcode = flights.sourceairport GROUP BY airportcode ORDER BY count(*) DESC LIMIT 1
SELECT airportcode FROM flights GROUP BY destairport ORDER BY count(destairport) LIMIT 1
SELECT airportcode FROM flights GROUP BY sourceairport, destairport ORDER BY count(flightno) ASC LIMIT 1
SELECT airline FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY airline ORDER BY count(*) DESC LIMIT 1
SELECT airline FROM airlines GROUP BY airline ORDER BY count(*) DESC LIMIT 1
SELECT abbreviation ,  country FROM airlines WHERE uid  =  (SELECT min(uid) FROM flights)
SELECT abbreviation, country FROM airlines WHERE airline = (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) = (SELECT MIN(cnt) FROM (SELECT COUNT(*) AS cnt FROM flights GROUP BY airline) AS temp))
SELECT DISTINCT airline FROM airlines INNER JOIN flights ON airlines.uid = flights.airline WHERE flights.sourceairport = 'AHD' OR flights.destairport = 'AHD'
SELECT DISTINCT airline FROM airlines JOIN flights ON airlines.uid = flights.airline WHERE flights.sourceairport = 'AHD'
SELECT airline FROM airlines JOIN flights ON airlines.uid = flights.airline WHERE flights.destairport = 'AHD'
SELECT airline FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE destairport = 'AHD'
SELECT Airline FROM airlines WHERE Airline IN ('APG', 'CVO') GROUP BY Airline HAVING count(DISTINCT Airline) = 2
SELECT airline FROM airlines WHERE airline IN (SELECT airline FROM flights WHERE sourceairport IN ('APG','CVO') AND destairport IN ('APG','CVO') GROUP BY airline HAVING count(DISTINCT sourceairport) > 1)
SELECT airline FROM airlines WHERE EXISTS (SELECT * FROM flights WHERE sourceairport = 'CVO' AND airline = airlines.airline) AND NOT EXISTS (SELECT * FROM flights WHERE sourceairport = 'APG' AND airline = airlines.airline)
SELECT DISTINCT airline FROM airlines WHERE airline IN (SELECT airline FROM flights WHERE sourceairport = 'CVO' AND destairport <> 'APG') AND airline NOT IN (SELECT airline FROM flights WHERE sourceairport = 'APG' AND destairport = 'APG')
SELECT airline FROM flights JOIN airlines ON flights.airline = airlines.uid GROUP BY airlines.airline HAVING count(flights.flightno) >= 10
SELECT airline FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY airline HAVING count(flightno) >= 10
SELECT airline FROM airlines GROUP BY airline HAVING count(*)  <  200
SELECT airline FROM flights INNER JOIN airlines ON flights.airline = airlines.airline GROUP BY airlines.airline HAVING count(flightno) < 200
SELECT flightno FROM flights WHERE airline = 'United Airlines'
SELECT flightno FROM flights WHERE airline  =  'United Airlines'
SELECT flightno FROM flights WHERE sourceairport = "APG"
SELECT flightno FROM flights WHERE sourceairport = 'APG'
SELECT flightno FROM flights WHERE destairport = "APG"
SELECT flightno FROM flights WHERE destairport = 'APG'
SELECT flightno FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen')
SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'
SELECT flightno FROM flights WHERE destairport = (SELECT airportcode FROM airports WHERE city = "Aberdeen")
SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'
SELECT count(*) FROM flights WHERE destairport = 'Aberdeen' OR destairport = 'Abilene'
SELECT count(*) FROM flights WHERE destairport IN ('Aberdeen', 'Abilene')
SELECT airportname FROM airports WHERE NOT EXISTS (SELECT * FROM flights WHERE flights.sourceairport = airports.airportcode) AND NOT EXISTS (SELECT * FROM flights WHERE flights.destairport = airports.airportcode)
SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT destairport FROM flights) OR airportcode NOT IN (SELECT sourceairport FROM flights)
SELECT count(*) FROM employee
SELECT count(Employee_ID) FROM employee
SELECT name FROM employee ORDER BY age ASC
SELECT name FROM employee ORDER BY age ASC
SELECT city , count(employee_id) FROM employee GROUP BY city
SELECT city ,  count(*) FROM employee GROUP BY city
SELECT city FROM employee GROUP BY city HAVING count(*)  >  1 AND age  <  30
SELECT DISTINCT city FROM employee GROUP BY city HAVING count(*)  >  1 AND age < 30
SELECT count(DISTINCT T2.shop_id) ,  T2.location FROM shop AS T2 GROUP BY T2.location
SELECT count(shop_id), location FROM shop GROUP BY location
SELECT manager_name ,  district FROM shop WHERE number_products  =  (SELECT max(number_products) FROM shop)
SELECT manager_name ,  district FROM shop WHERE number_products  =  (SELECT max(number_products) FROM shop)
SELECT min(number_products) , max(number_products) FROM shop
SELECT min(number_products) , max(number_products) FROM shop
SELECT name ,  location ,  district FROM shop ORDER BY number_products DESC
SELECT name , location , district FROM shop ORDER BY number_products DESC
SELECT name FROM shop WHERE number_products  >  (SELECT AVG(number_products) FROM shop)
SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
SELECT name FROM employee GROUP BY name ORDER BY count(employee_id) DESC LIMIT 1
SELECT name FROM employee GROUP BY name ORDER BY count(Employee_ID) DESC LIMIT 1
SELECT name FROM employee ORDER BY bonus DESC LIMIT 1
SELECT name FROM employee ORDER BY bonus DESC LIMIT 1
SELECT DISTINCT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation)
SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation)
SELECT name FROM shop ORDER BY (SELECT COUNT(*) FROM hiring WHERE shop.shop_id  =  hiring.shop_id) DESC LIMIT 1
SELECT name FROM shop GROUP BY name ORDER BY count(shop_id) DESC LIMIT 1
SELECT name FROM shop WHERE NOT EXISTS (SELECT * FROM hiring WHERE shop.shop_id = hiring.shop_id)
SELECT name FROM shop WHERE NOT EXISTS (SELECT * FROM hiring WHERE shop.Shop_ID  =  hiring.Shop_ID)
SELECT COUNT(DISTINCT T2.Employee_ID) , T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Name
SELECT COUNT(T1.employee_id) ,  T2.name FROM shop AS T2 JOIN hiring AS T3 ON T2.shop_id = T3.shop_id JOIN employee AS T1 ON T3.employee_id = T1.employee_id GROUP BY T2.name
SELECT sum(bonus) FROM evaluation
SELECT SUM(bonus) FROM evaluation
SELECT * FROM hiring
SELECT * FROM hiring
SELECT DISTINCT district FROM shop WHERE number_products < 3000 AND number_products > 10000
SELECT DISTINCT district FROM shop WHERE (number_products  <  3000 AND number_products  >  10000)
SELECT count(DISTINCT location) FROM shop
SELECT COUNT(DISTINCT location) FROM shop
SELECT count(*) FROM documents
SELECT count(*) FROM documents
SELECT document_id , document_name , document_description FROM Documents

SELECT document_name ,  template_id FROM Documents WHERE document_description LIKE '%w%'
SELECT document_name ,  template_id FROM documents WHERE document_description LIKE '%w%'
SELECT document_id , template_id , document_description FROM documents WHERE document_name = "Robbin CV"
SELECT document_id , template_id , document_description FROM documents WHERE document_name = 'Robbin CV'
SELECT COUNT(DISTINCT template_id) FROM Templates
SELECT COUNT(DISTINCT template_id) FROM templates
SELECT count(*) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'PPT')
SELECT count(*) FROM documents WHERE template_id = (SELECT template_id FROM ref_template_types WHERE template_type_code = 'PPT')
SELECT template_id , count(*) FROM documents GROUP BY template_id
SELECT template_id, COUNT(template_id) FROM documents GROUP BY template_id
SELECT template_id ,  template_type_code FROM documents GROUP BY template_id , template_type_code ORDER BY count(template_id) DESC LIMIT 1
SELECT template_id , template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY template_id , template_type_code HAVING COUNT(document_id) = (SELECT MAX(count(document_id)) FROM documents GROUP BY template_id)
SELECT template_id FROM templates GROUP BY template_id HAVING count(*)  >  1
SELECT template_id FROM templates GROUP BY template_id HAVING count(*) > 1
SELECT template_id FROM templates WHERE template_id NOT IN (SELECT template_id FROM documents)
SELECT template_id FROM templates WHERE template_id NOT IN (SELECT template_id FROM documents)
SELECT count(*) FROM templates
SELECT count(*) FROM templates
SELECT template_id ,  version_number ,  template_type_code FROM templates
SELECT template_id ,  version_number ,  template_type_code FROM templates
SELECT DISTINCT template_type_code FROM templates
SELECT DISTINCT template_type_code FROM ref_template_types
SELECT template_id FROM templates WHERE template_type_code IN ('PP', 'PPT')
SELECT template_id FROM templates WHERE template_type_code  =  'PP' OR template_type_code  =  'PPT'
SELECT count(*) FROM templates WHERE template_type_code = 'CV'
SELECT count(*) FROM templates WHERE template_type_code = 'CV'
SELECT version_number ,  template_type_code FROM templates WHERE version_number  >  5
SELECT version_number , template_type_code FROM templates WHERE version_number > 5
SELECT template_type_code ,  count(*) FROM templates GROUP BY template_type_code
SELECT template_type_code , count(*) FROM ref_template_types JOIN templates ON templates.template_type_code = ref_template_types.template_type_code GROUP BY ref_template_types.template_type_code
SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY count(template_id) DESC LIMIT 1
SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
SELECT template_type_code FROM templates GROUP BY template_type_code HAVING count(template_id) < 3
SELECT template_type_code FROM templates GROUP BY template_type_code HAVING count(template_id) < 3
SELECT version_number , template_type_code FROM templates WHERE version_number  =  (SELECT min(version_number) FROM templates)
SELECT version_number ,  template_type_code FROM templates WHERE version_number  =  (SELECT min(version_number) FROM templates)
SELECT template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id WHERE documents.document_name = "Data base"
SELECT template_type_code FROM templates WHERE template_id  =  (SELECT template_id FROM documents WHERE document_name  =  'Data base')
SELECT document_name FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'BK'
SELECT document_name FROM documents WHERE template_id  =  (SELECT template_id FROM templates WHERE template_type_code  =  'BK')
SELECT template_type_code , count(*) FROM ref_template_types JOIN documents ON ref_template_types.template_type_code  =  documents.template_id GROUP BY template_type_code
SELECT template_type_code ,  COUNT(*) FROM ref_template_types JOIN documents ON ref_template_types.template_type_code  =  documents.template_id GROUP BY template_type_code
SELECT template_type_code FROM documents GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
SELECT template_type_code FROM documents GROUP BY template_type_code ORDER BY count(template_type_code) DESC LIMIT 1
SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (SELECT template_id FROM documents)
SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (SELECT Template_ID FROM Documents)
SELECT template_type_code , template_type_description FROM ref_template_types
SELECT template_type_code ,  template_type_description FROM ref_template_types
SELECT template_type_description FROM ref_template_types WHERE template_type_code  =  "AD"
SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD'
SELECT template_type_code FROM ref_template_types WHERE template_type_description = "Book"
SELECT template_type_code FROM ref_template_types WHERE template_type_description  =  "Book"
SELECT DISTINCT template_type_description FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id
SELECT DISTINCT template_type_description FROM templates
SELECT template_id FROM templates WHERE template_type_code = (SELECT template_type_code FROM ref_template_types WHERE template_type_description = "Presentation")
SELECT template_id FROM templates WHERE template_type_code  =  (SELECT template_type_code FROM ref_template_types WHERE template_type_description  =  'Presentation')
SELECT count(*) FROM paragraphs
SELECT count(*) FROM paragraphs
SELECT count(*) FROM paragraphs WHERE document_id  =  (SELECT document_id FROM documents WHERE document_name  =  'Summer Show')
SELECT COUNT(*) FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Summer Show'
SELECT * FROM paragraphs WHERE paragraph_text  =  'Korea'
SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Korea%'
SELECT paragraph_id ,  paragraph_text FROM paragraphs WHERE document_id  =  (SELECT document_id FROM documents WHERE document_name  =  'Welcome to NY')
SELECT paragraph_id , paragraph_text FROM paragraphs WHERE document_id IN (SELECT document_id FROM documents WHERE document_name = 'Welcome to NY')
SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = "Customer reviews")
SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer reviews')
SELECT document_id , count(paragraph_id) FROM paragraphs GROUP BY document_id ORDER BY document_id
SELECT document_id ,  COUNT(paragraph_id) FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY documents.document_id
SELECT document_id ,  document_name ,  COUNT(*) FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ,  documents.document_name
SELECT documents.document_id ,  documents.document_name , count(paragraphs.paragraph_id) FROM documents JOIN paragraphs ON documents.document_id  =  paragraphs.document_id GROUP BY documents.document_id
SELECT document_id FROM paragraphs GROUP BY document_id HAVING count(paragraph_id) > 1
SELECT document_id FROM paragraphs GROUP BY document_id HAVING count(paragraph_id) >= 2
SELECT documents.document_id , documents.document_name FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id , documents.document_name ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1
SELECT document_id ,  document_name FROM documents ORDER BY (SELECT count(paragraph_id) FROM paragraphs WHERE documents.document_id = paragraphs.document_id) DESC LIMIT 1
SELECT document_id FROM documents GROUP BY document_id ORDER BY count(paragraph_id) ASC LIMIT 1
SELECT document_id FROM documents GROUP BY document_id ORDER BY count(paragraph_id) ASC LIMIT 1
SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(paragraph_id) >= 1 AND COUNT(paragraph_id) <= 2
SELECT document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id HAVING count(paragraph_id) BETWEEN 1 AND 2
SELECT document_id FROM paragraphs WHERE paragraph_text = 'Brazil' AND paragraph_text = 'Ireland'
SELECT document_id FROM paragraphs WHERE paragraph_text = 'Brazil' AND document_id IN (SELECT document_id FROM paragraphs WHERE paragraph_text = 'Ireland')
SELECT count(Teacher_ID) FROM teacher
SELECT count(DISTINCT teacher_id) FROM teacher
SELECT name FROM teacher ORDER BY age ASC
SELECT name FROM teacher ORDER BY age ASC
SELECT age, hometown FROM teacher
SELECT age ,  hometown FROM teacher
SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'
SELECT name FROM teacher WHERE hometown  !=  'Little Lever Urban District'
SELECT DISTINCT name FROM teacher WHERE age = 32 OR age = 33
SELECT DISTINCT name FROM teacher WHERE age = 32 OR age = 33
SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1
SELECT hometown FROM teacher ORDER BY age LIMIT 1
SELECT hometown ,  COUNT(DISTINCT teacher_id) FROM teacher GROUP BY hometown
SELECT hometown ,  COUNT(*) FROM teacher GROUP BY hometown
SELECT hometown FROM teacher GROUP BY hometown ORDER BY count(*) DESC LIMIT 1
SELECT hometown FROM teacher GROUP BY hometown ORDER BY count(*) DESC LIMIT 1
SELECT DISTINCT hometown FROM teacher GROUP BY hometown HAVING COUNT(DISTINCT teacher_id) > 1
SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(DISTINCT Teacher_ID) >= 2
JOIN course AS T3 ON T2.course_id = T3.course_id
SELECT teacher.name , course.course FROM teacher JOIN course_arrange ON teacher.teacher_id  =  course_arrange.teacher_id JOIN course ON course_arrange.course_id  =  course.course_id
SELECT teacher.name , course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC
ORDER BY T1.name ASC
SELECT name FROM teacher WHERE teacher_id = (SELECT teacher_id FROM course_arrange WHERE course_id = (SELECT course_id FROM course WHERE course = "Math"))
SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_arrange WHERE course_id IN (SELECT course_id FROM course WHERE course = 'Math'))
SELECT T1.name ,  COUNT (T2.course_id) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.name
SELECT T1.name ,  count(T2.course_id) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.name
SELECT name FROM teacher GROUP BY name HAVING count(*)  >  1
SELECT name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY name HAVING count(course_arrange.course_id) >= 2
SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange)
SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange)
SELECT count(*) FROM visitor WHERE age  <  30
SELECT name FROM visitor WHERE level_of_membership  >  4 ORDER BY level_of_membership DESC
SELECT avg(age) FROM visitor WHERE level_of_membership <= 4
SELECT name , level_of_membership FROM visitor WHERE level_of_membership > 4 ORDER BY age ASC
SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1
SELECT avg(num_of_staff) FROM museum WHERE open_year < 2009
SELECT open_year ,  num_of_staff FROM museum WHERE name  =  'Plaza Museum'
SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)
SELECT visitor.id , visitor.name , visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_ID GROUP BY visitor.id , visitor.name , visitor.age HAVING count(visit.museum_ID) > 1
SELECT id ,  name ,  level_of_membership FROM visitor WHERE id  =  (SELECT visitor_ID FROM visit GROUP BY visitor_ID ORDER BY sum(Total_spent) DESC LIMIT 1)
SELECT museum_id ,  name FROM museum GROUP BY museum_id ,  name ORDER BY count(museum_id) DESC LIMIT 1
SELECT name FROM museum WHERE museum_id NOT IN (SELECT museum_id FROM visit)
SELECT name , age FROM visitor ORDER BY num_of_ticket DESC LIMIT 1
SELECT avg(num_of_ticket) , max(num_of_ticket) FROM visit
SELECT sum(total_spent) FROM visit WHERE visitor_ID IN (SELECT ID FROM visitor WHERE Level_of_membership  =  1)
SELECT name FROM visitor WHERE id IN (SELECT visitor_id FROM visit WHERE museum_id IN (SELECT museum_id FROM museum WHERE open_year < 2009)) AND id IN (SELECT visitor_id FROM visit WHERE museum_id IN (SELECT museum_id FROM museum WHERE open_year > 2011))
SELECT count(DISTINCT T1.id) FROM visitor AS T1 LEFT JOIN visit AS T2 ON T1.id  =  T2.visitor_id LEFT JOIN museum AS T3 ON T2.museum_id  =  T3.museum_id WHERE T3.open_year  >  2010
SELECT count(DISTINCT museum_id) FROM museum WHERE open_year > 2013 OR open_year < 2008
SELECT COUNT(*) FROM players
SELECT count(*) FROM players
SELECT count(*) FROM matches
SELECT count(*) FROM matches
SELECT first_name , birth_date FROM players WHERE country_code  =  'USA'
SELECT first_name , birth_date FROM players WHERE country_code = 'USA'
SELECT AVG(loser_age) ,  AVG(winner_age) FROM matches
SELECT avg(loser_age) , avg(winner_age) FROM matches
SELECT avg(winner_rank) FROM matches
SELECT avg(winner_rank) FROM matches
SELECT max(loser_rank) FROM matches
SELECT MAX(loser_rank) FROM matches
SELECT COUNT(DISTINCT country_code) FROM players
SELECT count(DISTINCT country_code) FROM players
SELECT COUNT(DISTINCT loser_name) FROM matches
SELECT count(DISTINCT loser_name) FROM matches
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10
SELECT DISTINCT winner_name FROM matches WHERE year = 2013 AND winner_id IN (SELECT winner_id FROM matches WHERE year = 2016)
SELECT DISTINCT T1.first_name, T1.last_name FROM players AS T1 WHERE EXISTS (SELECT * FROM matches AS T2 WHERE T1.player_id = T2.winner_id AND (T2.year = 2013 OR T2.year = 2016))
SELECT COUNT(*) FROM matches WHERE year  =  2013 OR year  =  2016
SELECT count(match_num) FROM matches WHERE year = 2013 OR year = 2016
SELECT country_code ,  first_name FROM players JOIN matches ON players.player_id  =  matches.winner_id WHERE matches.tourney_name  =  'Australian Open' AND matches.tourney_name  =  'WTA Championships'
SELECT first_name , country_code FROM players JOIN matches ON players.player_id = matches.winner_id WHERE (matches.tourney_name = 'Australian Open' AND matches.tourney_name = 'WTA Championships')
SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1
SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1
SELECT first_name , last_name FROM players ORDER BY birth_date
SELECT first_name , last_name FROM players ORDER BY birth_date
SELECT first_name , last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
SELECT first_name , last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
SELECT first_name , country_code FROM players ORDER BY tours DESC LIMIT 1
SELECT first_name , country_code FROM players ORDER BY tours DESC LIMIT 1
SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1
SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1
SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_id ORDER BY count(winner_id) DESC LIMIT 1
SELECT winner_name , MAX(winner_rank_points) FROM matches GROUP BY winner_name
SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT max(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open')
SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' AND winner_rank_points  =  (SELECT max(winner_rank_points) FROM matches WHERE tourney_name  =  'Australian Open')
SELECT winner_name ,  loser_name FROM matches WHERE minutes  =  (SELECT max(minutes) FROM matches)
SELECT winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1
SELECT avg(ranking) ,  first_name FROM players JOIN rankings ON players.player_id  =  rankings.player_id GROUP BY first_name
SELECT first_name , AVG(ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name
SELECT first_name , SUM(ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name
SELECT first_name , sum(ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name
SELECT country_code ,  COUNT(player_id) FROM players GROUP BY country_code
SELECT country_code ,  COUNT(*) FROM players GROUP BY country_code
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
SELECT DISTINCT country_code FROM players GROUP BY country_code HAVING count(player_id) > 50
SELECT DISTINCT country_code FROM players GROUP BY country_code HAVING COUNT(DISTINCT player_id) > 50
SELECT ranking_date ,  SUM(tours) FROM rankings GROUP BY ranking_date
SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date
SELECT year ,  COUNT(*) FROM matches GROUP BY year
SELECT year , COUNT(*) FROM matches GROUP BY year
SELECT winner_name ,  winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3
SELECT winner_name ,  winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'
SELECT COUNT(DISTINCT winner_id) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = "WTA Championships" AND players.hand = "L"
SELECT first_name , country_code , birth_date FROM players WHERE player_id  =  (SELECT winner_id FROM matches WHERE winner_rank_points  =  (SELECT max(winner_rank_points) FROM matches))
SELECT first_name ,  country_code ,  birth_date FROM players WHERE player_id  =  (SELECT player_id FROM rankings WHERE ranking_points  =  (SELECT max(ranking_points) FROM rankings))
SELECT hand , count(*) FROM players GROUP BY hand
SELECT hand ,  COUNT(*) FROM players GROUP BY hand
SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured'
SELECT name ,  tonnage FROM ship ORDER BY name DESC

SELECT max(killed) , min(killed) FROM death
SELECT AVG(injured) FROM death
SELECT note, killed, injured FROM death WHERE caused_by_ship_id = (SELECT id FROM ship WHERE tonnage = 't')
SELECT name ,  result FROM battle WHERE bulgarian_commander  !=  'Boril'
SELECT DISTINCT battle.id ,  battle.name FROM battle JOIN ship ON battle.id  =  ship.lost_in_battle WHERE ship.ship_type  =  'Brig'
SELECT id ,  name FROM battle JOIN death ON battle.id  =  death.caused_by_ship_id GROUP BY id ,  name HAVING sum(killed) > 10
SELECT ship.id ,  ship.name FROM ship JOIN death ON ship.id  =  death.caused_by_ship_id GROUP BY ship.id ,  ship.name ORDER BY sum(injured) DESC LIMIT 1
SELECT DISTINCT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'
SELECT count(DISTINCT result) FROM battle
SELECT count(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225')
SELECT name , date FROM battle JOIN ship ON battle.id  =  ship.lost_in_battle WHERE ship.name  =  'Lettice' OR ship.name  =  'HMS Atalanta'
SELECT name , result , bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel')
SELECT note FROM death WHERE note LIKE '%East%'
SELECT line_1 ,  line_2 FROM addresses
SELECT line_1 , line_2 FROM addresses
SELECT count(*) FROM Courses
SELECT count(*) FROM courses
SELECT course_description FROM courses WHERE course_name  =  'math'
SELECT course_description FROM courses WHERE course_name LIKE '%math%'
SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'
SELECT zip_postcode FROM addresses WHERE city  =  'Port Chelsea'
SELECT T1.department_name ,  T1.department_id FROM departments AS T1 JOIN degree_programs AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_name , T1.department_id ORDER BY count(T2.degree_program_id) DESC LIMIT 1
SELECT department_name ,  department_id FROM departments GROUP BY department_name ORDER BY COUNT(department_id) DESC LIMIT 1
SELECT COUNT(DISTINCT department_id) FROM departments
SELECT COUNT(DISTINCT department_id) FROM departments
SELECT count(DISTINCT degree_summary_name) FROM degree_programs
SELECT count(DISTINCT degree_program_id) FROM degree_programs
SELECT count(DISTINCT degree_program_id) FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id WHERE departments.department_name = "engineering"
SELECT count(degree_program_id) FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id WHERE departments.department_name = "engineering"
SELECT section_name , section_description FROM sections
SELECT section_name ,  section_description FROM section
SELECT course_name ,  course_id FROM course JOIN section ON course.course_id = section.course_id GROUP BY course.course_id ,  course.course_name HAVING count(section_id) <= 2
SELECT course_name ,  course_id FROM course GROUP BY course_name , course_id HAVING count(*)  <  2
SELECT section_name FROM sections ORDER BY section_name DESC
SELECT section_name FROM section ORDER BY section_name DESC
SELECT semester_name, semester_id FROM semesters GROUP BY semester_id ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1
SELECT semester_name ,  semester_id FROM semesters WHERE semester_id  =  (SELECT semester_id FROM student_enrolment GROUP BY semester_id ORDER BY count(*) DESC LIMIT 1)
SELECT department_description FROM department WHERE department_name LIKE '%computer%'
SELECT department_description FROM department WHERE department_name LIKE '%computer%'
SELECT first_name ,  middle_name ,  last_name ,  student_id FROM students WHERE student_id IN (SELECT student_id FROM student_enrolment GROUP BY student_id HAVING COUNT(DISTINCT degree_program_id) = 2 AND COUNT(DISTINCT semester_id) = 1)
SELECT first_name ,  middle_name ,  last_name ,  student_id FROM students JOIN student_enrolment ON students.student_id  =  student_enrolment.student_id GROUP BY student_id HAVING count(DISTINCT degree_program_id) > 1 AND count(DISTINCT semester_id) = 1
SELECT first_name , middle_name , last_name FROM students , degree_programs , student_enrolment WHERE degree_summary_name = 'Bachelor' AND students.student_id = student_enrolment.student_id AND student_enrolment.degree_program_id = degree_programs.degree_program_id
SELECT first_name ,  middle_name ,  last_name FROM students WHERE student_id IN (SELECT student_id FROM student_enrolment WHERE degree_program_id = "Bachelors")
SELECT degree_summary_name FROM degree_programs GROUP BY degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT degree_summary_name FROM degree_programs GROUP BY degree_summary_name ORDER BY count(*) DESC LIMIT 1
SELECT degree_program_id ,  degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id  =  student_enrolment.degree_program_id GROUP BY degree_program_id ORDER BY count(student_id) DESC LIMIT 1
SELECT degree_program_id ,  degree_summary_description FROM degree_programs WHERE degree_program_id  =  (SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY count(*) DESC LIMIT 1)
LIMIT 1
SELECT first_name , middle_name , last_name , student_id , COUNT(student_enrolment_id) FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id ORDER BY COUNT(student_enrolment_id) DESC LIMIT 1
SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment)
SELECT semester_name FROM semesters WHERE NOT EXISTS (SELECT * FROM student_enrolment WHERE semesters.semester_id = student_enrolment.semester_id)
SELECT DISTINCT course_name FROM courses WHERE EXISTS (SELECT * FROM student_enrolment_courses WHERE courses.course_id = student_enrolment_courses.course_id)
SELECT DISTINCT course_name FROM courses WHERE EXISTS (SELECT * FROM student_enrolment_courses)
SELECT course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY course_name ORDER BY count(*) DESC LIMIT 1
SELECT course_name FROM courses GROUP BY course_name ORDER BY count(*) DESC LIMIT 1
SELECT DISTINCT last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id WHERE state_province_county = 'North Carolina' AND students.student_id NOT IN (SELECT student_id FROM student_enrolment)
SELECT last_name FROM students JOIN addresses ON students.current_address_id  =  addresses.address_id WHERE state_province_county  =  'North Carolina' AND student_id NOT IN (SELECT student_id FROM student_enrolment)
SELECT transcript_date ,  transcript_id FROM transcripts JOIN transcript_contents ON transcripts.transcript_id  =  transcript_contents.transcript_id GROUP BY transcript_id HAVING COUNT(transcript_contents.student_course_id)  >  1
SELECT transcript_date , transcript_id FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY transcript_id HAVING count(student_course_id)  >=  2
SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT first_name , middle_name , last_name FROM students ORDER BY date_first_registered LIMIT 1
SELECT first_name ,  middle_name ,  last_name FROM students ORDER BY date_first_registered LIMIT 1
SELECT first_name ,  middle_name ,  last_name FROM students ORDER BY date_first_registered LIMIT 1
SELECT first_name ,  middle_name ,  last_name FROM students ORDER BY date_first_registered LIMIT 1
SELECT first_name FROM students WHERE permanent_address_id  !=  current_address_id
SELECT first_name FROM students WHERE permanent_address_id != current_address_id
SELECT T1.address_id , T1.line_1 , T1.line_2 , T1.line_3 FROM addresses AS T1 JOIN students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id , T1.line_1 , T1.line_2 , T1.line_3 HAVING count(*)  =  (SELECT count(*) FROM students GROUP BY current_address_id ORDER BY count(*) DESC LIMIT 1)
SELECT address_id ,  line_1 ,  line_2 FROM addresses WHERE address_id  =  (SELECT current_address_id FROM students GROUP BY current_address_id ORDER BY count(*) DESC LIMIT 1)
SELECT AVG(transcript_date) FROM transcripts
SELECT avg(transcript_date) FROM transcripts
SELECT transcript_date , other_details FROM transcripts ORDER BY transcript_date LIMIT 1
Note: The query for "transcript_contents" and "students" tables is missing. Please provide the necessary information to complete the query.
SELECT count(DISTINCT transcript_id) FROM transcripts
SELECT count(*) FROM transcripts
SELECT max(transcript_date) FROM transcripts
SELECT max(transcript_date) FROM transcripts
SELECT max(cnt) ,  course_id FROM (SELECT COUNT(*) as cnt,  course_id FROM student_enrolment_courses GROUP BY course_id) AS T GROUP BY course_id
SELECT max(count(*)), course_id FROM transcript_contents GROUP BY course_id
SELECT transcript_date , transcript_id FROM transcript GROUP BY transcript_date , transcript_id ORDER BY count(*) LIMIT 1
SELECT transcript_date , transcript_id FROM transcripts JOIN transcript_contents ON transcripts.transcript_id  =  transcript_contents.transcript_id GROUP BY transcripts.transcript_id ORDER BY count(*) ASC LIMIT 1
SELECT DISTINCT semester_name FROM semesters WHERE semester_id IN (SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelor')) AND semester_id IN (SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Master'))
SELECT semester_id FROM student_enrolment WHERE degree_program_id = 'Masters' AND semester_id IN (SELECT semester_id FROM student_enrolment WHERE degree_program_id = 'Bachelors')
SELECT count(DISTINCT current_address_id) FROM students
SELECT DISTINCT address_id FROM addresses WHERE address_id IN (SELECT current_address_id FROM students) OR address_id IN (SELECT permanent_address_id FROM students)
SELECT * FROM students ORDER BY first_name DESC
SELECT * FROM students ORDER BY last_name DESC
SELECT * FROM Sections WHERE section_name = 'h'
SELECT section_description FROM section WHERE section_name = 'h'
SELECT DISTINCT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582'
SELECT first_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.country = 'Haiti' OR students.cell_mobile_number = '09700166582'
SELECT title FROM cartoon ORDER BY title
SELECT title FROM cartoon ORDER BY title
SELECT title FROM cartoon WHERE directed_by = "Ben Jones"
SELECT title FROM Cartoon WHERE Directed_by = 'Ben Jones'
SELECT COUNT(title) FROM Cartoon WHERE written_by = 'Joseph Kuhr'
SELECT count(*) FROM cartoon WHERE written_by = "Joseph Kuhr"
SELECT title ,  directed_by FROM cartoon ORDER BY original_air_date
SELECT title , directed_by FROM Cartoon ORDER BY original_air_date
SELECT title FROM cartoon WHERE directed_by IN ("Ben Jones", "Brandon Vietti")
SELECT title FROM cartoon WHERE directed_by IN ('Ben Jones', 'Brandon Vietti')
SELECT country , COUNT(*) FROM tv_channel GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1
SELECT country , COUNT(*) FROM tv_channel GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1
SELECT count(DISTINCT series_name), count(DISTINCT content) FROM TV_Channel
SELECT count(DISTINCT series_name) , count(DISTINCT content) FROM TV_Channel
SELECT content FROM tv_channel WHERE series_name = "Sky Radio"
SELECT content FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT package_option FROM tv_channel WHERE series_name = "Sky Radio"
SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio'
SELECT count(DISTINCT id) FROM tv_channel WHERE language = 'English'
SELECT count(DISTINCT id) FROM tv_channel WHERE language = 'English'
SELECT language , count(*) FROM tv_channel GROUP BY language HAVING count(*)  =  (SELECT min(cnt) FROM (SELECT language, COUNT(*) as cnt FROM tv_channel GROUP BY language) AS T)
SELECT language ,  COUNT(*) FROM tv_channel GROUP BY language ORDER BY COUNT(*) ASC LIMIT 1
SELECT language , COUNT(*) FROM tv_channel GROUP BY language
SELECT language ,  COUNT(*) FROM tv_channel GROUP BY language
SELECT series_name FROM TV_Channel WHERE id = (SELECT channel FROM Cartoon WHERE title = "The Rise of the Blue Beetle!")
SELECT series_name FROM TV_Channel WHERE id = (SELECT Channel FROM Cartoon WHERE Title = 'The Rise of the Blue Beetle')
SELECT title FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE tv_channel.series_name = "Sky Radio"
SELECT title FROM cartoon WHERE channel  =  (SELECT id FROM tv_channel WHERE series_name  =  "Sky Radio")
SELECT episode FROM tv_series ORDER BY rating
SELECT episode FROM tv_series ORDER BY rating
SELECT episode ,  rating FROM tv_series ORDER BY rating DESC LIMIT 3
SELECT episode , rating FROM tv_series ORDER BY rating DESC LIMIT 3
SELECT min(share) , max(share) FROM tv_series
SELECT MAX(share) , MIN(share) FROM tv_series
SELECT air_date FROM TV_series WHERE Episode = "A Love of a Lifetime"
SELECT air_date FROM tv_series WHERE episode = 'A Love of a Lifetime'
SELECT weekly_rank FROM tv_series WHERE episode = "A Love of a Lifetime"
SELECT weekly_rank FROM TV_series WHERE episode = "A Love of a Lifetime"
SELECT series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = 'A Love of a Lifetime'
SELECT title FROM cartoon WHERE episode = "A Love of a Lifetime"
SELECT episode FROM tv_series WHERE channel  =  (SELECT id FROM tv_channel WHERE series_name  =  "Sky Radio")
SELECT episode FROM tv_series WHERE id  =  (SELECT id FROM tv_channel WHERE series_name  =  "Sky Radio")
SELECT directed_by ,  COUNT(*) FROM cartoon GROUP BY directed_by
SELECT directed_by , count(*) FROM Cartoon GROUP BY directed_by
SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1
SELECT production_code , channel FROM Cartoon ORDER BY original_air_date DESC LIMIT 1
SELECT package_option , series_name FROM TV_Channel WHERE Hight_definition_TV = true
SELECT package_option , series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE Hight_definition_TV = true
SELECT DISTINCT country FROM tv_channel WHERE id IN (SELECT DISTINCT channel FROM cartoon WHERE written_by = 'Todd Casey')
SELECT DISTINCT country FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.written_by = 'Todd Casey'
SELECT DISTINCT country FROM tv_channel WHERE country NOT IN (SELECT DISTINCT country FROM tv_channel JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.written_by = 'Todd Casey')
SELECT DISTINCT country FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE written_by = 'Todd Casey')
SELECT series_name ,  country FROM TV_Channel WHERE id  =  (SELECT channel FROM Cartoon WHERE directed_by  =  'Ben Jones' OR directed_by  =  'Michael Chang')
SELECT series_name , country FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.directed_by = 'Ben Jones' OR cartoon.directed_by = 'Michael Chang'
SELECT pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'
SELECT pixel_aspect_ratio_PAR ,  Country FROM TV_Channel WHERE Language != 'English'
SELECT id FROM tv_channel GROUP BY id HAVING count(*) > 2
SELECT id FROM TV_Channel GROUP BY id HAVING count(*) > 2
SELECT DISTINCT id FROM TV_Channel WHERE id NOT IN (SELECT channel FROM Cartoon WHERE directed_by = 'Ben Jones')
SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')
SELECT package_option FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')
SELECT package_option FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')
SELECT count(Poker_Player_ID) FROM poker_player
SELECT count(poker_player_id) FROM poker_player
SELECT earnings FROM poker_player ORDER BY earnings DESC
SELECT earnings FROM poker_player ORDER BY earnings DESC
SELECT final_table_made ,  best_finish FROM poker_player
SELECT final_table_made ,  best_finish FROM poker_player
SELECT avg(earnings) FROM poker_player
SELECT avg(earnings) FROM poker_player
SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1
SELECT money_rank FROM poker_player WHERE earnings  =  (SELECT max(earnings) FROM poker_player)
SELECT max(final_table_made) FROM poker_player WHERE earnings < 200000
SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000
SELECT name FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID
SELECT name FROM people
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE earnings > 300000
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE earnings  >  300000
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY final_table_made ASC
SELECT T1.name FROM people AS T1 JOIN poker_player AS T2 ON T1.people_id  =  T2.people_id ORDER BY T2.final_table_made ASC
SELECT birth_date FROM people ORDER BY earnings ASC LIMIT 1
SELECT birth_date FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY earnings LIMIT 1
SELECT money_rank FROM poker_player WHERE People_ID  =  (SELECT People_ID FROM people WHERE height  =  (SELECT max(height) FROM people))
SELECT money_rank FROM poker_player WHERE People_ID  =  (SELECT People_ID FROM people WHERE height  =  (SELECT max(height) FROM people))
SELECT avg(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200
SELECT avg(earnings) FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE Height  >  200
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY earnings DESC
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY earnings DESC
SELECT nationality , count(*) FROM people GROUP BY nationality
SELECT count(DISTINCT T1.People_ID) ,  T1.Nationality FROM people AS T1 GROUP BY T1.Nationality
SELECT nationality FROM people GROUP BY nationality ORDER BY count(*) DESC LIMIT 1
SELECT nationality FROM people GROUP BY nationality ORDER BY count(*) DESC LIMIT 1
SELECT nationality FROM people GROUP BY nationality HAVING count(DISTINCT People_ID) > 1
SELECT nationality FROM people GROUP BY nationality HAVING count(*)  >  1
SELECT name , birth_date FROM people ORDER BY name ASC
SELECT name ,  birth_date FROM people ORDER BY name
SELECT name FROM people WHERE nationality <> 'Russia'
SELECT name FROM people WHERE nationality != 'Russia'
SELECT name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
SELECT name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
SELECT COUNT(DISTINCT nationality) FROM people
SELECT COUNT(DISTINCT nationality) FROM people
SELECT count(DISTINCT state) FROM area_code_state
SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC
SELECT vote_id, phone_number, state FROM votes
SELECT max(area_code) , min(area_code) FROM area_code_state
SELECT MAX(created) FROM votes WHERE state = 'CA'
SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'
SELECT DISTINCT state , created FROM votes
SELECT contestant_number ,  contestant_name FROM contestants JOIN votes ON contestants.contestant_number  =  votes.contestant_number GROUP BY contestant_number ,  contestant_name HAVING count(*)  >=  2
SELECT contestant_number , contestant_name FROM contestants WHERE contestant_number  =  (SELECT contestant_number FROM votes ORDER BY vote_id LIMIT 1)
SELECT count(*) FROM votes WHERE state = 'NY' OR state = 'CA'
SELECT COUNT(contestants.contestant_number) FROM contestants LEFT JOIN votes ON contestants.contestant_number = votes.contestant_number WHERE votes.contestant_number IS NULL
SELECT area_code FROM area_code_state GROUP BY area_code ORDER BY count(*) DESC LIMIT 1
SELECT created , state , phone_number FROM votes WHERE contestant_number  =  (SELECT contestant_number FROM contestants WHERE contestant_name  =  'Tabatha Gehling')
SELECT area_code FROM area_code_state WHERE state IN (SELECT state FROM votes WHERE contestant_number = (SELECT contestant_number FROM contestants WHERE contestant_name = 'Kelly Clauss')) AND state IN (SELECT state FROM votes WHERE contestant_number = (SELECT contestant_number FROM contestants WHERE contestant_name = 'Tabatha Gehling'))
SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%'
SELECT name FROM country WHERE indepyear  >  1950
SELECT name FROM country WHERE indepyear  >  1950
SELECT count(DISTINCT T1.code) FROM country AS T1 WHERE governmentform = 'Republic'
SELECT count(DISTINCT code) FROM country WHERE governmentform = 'Republic'
SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean'
SELECT sum(surfacearea) FROM country WHERE continent = 'Carribean'
SELECT continent FROM country WHERE name  =  'Anguilla'
SELECT continent FROM country WHERE name = 'Anguilla'
SELECT region FROM country WHERE name = 'Kabul'
SELECT region FROM country WHERE name = 'Kabul'
SELECT language FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba') ORDER BY percentage DESC LIMIT 1
SELECT language FROM countrylanguage WHERE countrycode = (SELECT Code FROM country WHERE name = 'Aruba') AND isofficial = 'T' ORDER BY percentage DESC LIMIT 1
SELECT population , lifeexpectancy FROM country WHERE name = 'Brazil'
SELECT population , lifeexpectancy FROM country WHERE name  =  'Brazil'
SELECT region ,  population FROM country WHERE name  =  'Angola'
SELECT region ,  population FROM country WHERE name  =  'Angola'
SELECT avg(lifeexpectancy) FROM country WHERE region = 'Central Africa'
SELECT avg(lifeexpectancy) FROM country WHERE region = 'Central Africa' AND continent = 'Africa'
SELECT name FROM country WHERE continent = 'Asia' AND lifeexpectancy = (SELECT MIN(lifeexpectancy) FROM country WHERE continent = 'Asia')
SELECT name FROM country WHERE continent = 'Asia' AND lifeexpectancy  =  (SELECT min(lifeexpectancy) FROM country WHERE continent = 'Asia')
SELECT sum(population) , max(GNP) FROM country WHERE continent = 'Asia'
SELECT sum(population) , max(GNP) FROM country WHERE continent = 'Asia'
SELECT avg(lifeexpectancy) FROM country WHERE governmentform = 'Republic' AND continent = 'Africa'
SELECT avg(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic'
SELECT sum(surfacearea) FROM country WHERE continent IN ('Asia', 'Europe')
SELECT sum(surfacearea) FROM country WHERE continent  =  'Asia' OR continent  =  'Europe'
SELECT sum(population) FROM city WHERE district = 'Gelderland'
SELECT sum(population) FROM city WHERE district = 'Gelderland'
SELECT avg(gnp) , sum(population) FROM country WHERE governmentform = 'US Territory'
SELECT AVG(GNP) , SUM(Population) FROM country WHERE GovernmentForm = 'US Territory' AND Code2 = 'US'
SELECT count(DISTINCT language) FROM countrylanguage
SELECT count(DISTINCT language) FROM countrylanguage
SELECT count(DISTINCT governmentform) FROM country WHERE continent = 'Africa'
SELECT count(DISTINCT governmentform) FROM country WHERE continent = 'Africa'
SELECT count(DISTINCT language) FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba')
SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW'
SELECT count(DISTINCT language) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = 'T'
SELECT count(DISTINCT language) FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Afghanistan')
SELECT country.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code GROUP BY countrylanguage.countrycode ORDER BY count(countrylanguage.language) DESC LIMIT 1
SELECT name FROM country GROUP BY name ORDER BY COUNT(*) DESC LIMIT 1
SELECT continent FROM countrylanguage GROUP BY continent ORDER BY count(DISTINCT language) DESC LIMIT 1
SELECT continent FROM countrylanguage GROUP BY continent ORDER BY count(language) DESC LIMIT 1
SELECT count(DISTINCT CountryCode) FROM countrylanguage WHERE (Language = 'English' OR Language = 'Dutch') GROUP BY CountryCode HAVING count(DISTINCT Language) = 2
SELECT count(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'English' OR Language = 'Dutch'
SELECT DISTINCT country.name FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code WHERE (countrylanguage.language = 'English' AND countrylanguage.language = 'French')
SELECT DISTINCT C.name FROM countrylanguage CL1, countrylanguage CL2, country C WHERE CL1.language = 'English' AND CL2.language = 'French' AND CL1.countrycode = CL2.countrycode AND CL1.countrycode = C.code
SELECT DISTINCT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode WHERE T2.language  =  'English' AND T2.isofficial  =  'T' AND EXISTS (SELECT * FROM countrylanguage WHERE language  =  'French' AND isofficial  =  'T' AND countrycode  =  T1.code)
SELECT DISTINCT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language IN ('English', 'French') AND isofficial = 'T')
SELECT count(DISTINCT continent) FROM countrylanguage WHERE language = 'Chinese'
SELECT count(DISTINCT country.continent) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.language = 'Chinese'
SELECT DISTINCT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' OR language = 'Dutch')
SELECT DISTINCT region FROM countrylanguage WHERE language IN ('Dutch', 'English')
SELECT DISTINCT T2.name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.countrycode  =  T2.code WHERE language  =  'English' OR language  =  'Dutch' AND isofficial  =  'T'
SELECT DISTINCT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode WHERE T2.language  =  'English' OR T2.language  =  'Dutch' AND T2.isofficial  =  'T'
SELECT language FROM countrylanguage WHERE countrycode  =  (SELECT code FROM country WHERE continent  =  'Asia') ORDER BY percentage DESC LIMIT 1
SELECT language FROM countrylanguage WHERE countrycode  IN  (SELECT code FROM country WHERE continent  =  'Asia') GROUP BY language ORDER BY COUNT(language) DESC LIMIT 1
SELECT language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.governmentform = 'Republic' GROUP BY language HAVING count(*) = 1
SELECT language FROM countrylanguage WHERE percentage = 100 AND countrycode IN (SELECT code FROM country WHERE governmentform = 'Republic') GROUP BY language
SELECT name FROM city JOIN countrylanguage ON city.CountryCode  =  countrylanguage.CountryCode WHERE population  =  (SELECT max(population) FROM city WHERE countrylanguage.Language = 'English')
SELECT city.name FROM city WHERE city.countrycode = (SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = 'English' AND countrylanguage.isofficial = 'T' AND countrylanguage.percentage = 100) AND city.population = (SELECT max(population) FROM city WHERE city.countrycode = (SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = 'English' AND countrylanguage.isofficial = 'T' AND countrylanguage.percentage = 100))
SELECT name , population , lifeexpectancy FROM country WHERE continent = 'Asia' AND surfacearea = (SELECT max(surfacearea) FROM country WHERE continent = 'Asia')
SELECT name ,  population ,  lifeexpectancy FROM country WHERE continent  =  'Asia' ORDER BY surfacearea DESC LIMIT 1
SELECT avg(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')
SELECT AVG(lifeexpectancy) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language != 'English' AND countrylanguage.isofficial = 'F'
SELECT sum(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')
SELECT sum(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')
SELECT language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.headofstate = 'Beatrix' AND countrylanguage.isofficial = 'T'
SELECT language FROM countrylanguage WHERE countrycode  =  (SELECT code FROM country WHERE headofstate  =  'Beatrix') AND isofficial  =  'T'
SELECT count(DISTINCT language) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.indepyear < 1930
SELECT count(DISTINCT language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.IndepYear < 1930
SELECT name FROM country WHERE surfacearea > (SELECT max(surfacearea) FROM country WHERE continent = 'Europe')
SELECT name FROM country WHERE surfacearea  >  (SELECT max(surfacearea) FROM country WHERE continent = 'Europe')
SELECT name FROM country WHERE continent = 'Africa' AND population < ANY (SELECT population FROM country WHERE continent = 'Asia')
SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')
SELECT name FROM country WHERE continent = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE continent = 'Africa')
SELECT name FROM country WHERE continent = 'Asia' AND population > (SELECT max(population) FROM country WHERE continent = 'Africa')
SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')
SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')
SELECT DISTINCT countrycode FROM countrylanguage WHERE language != 'English' AND countrycode NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')
SELECT countrycode FROM countrylanguage WHERE language != 'English'
SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language <> 'English') AND governmentform <> 'Republic'
SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English') AND governmentform != 'Republic'
SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Europe' AND countrylanguage.language <> 'English'
SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Europe' AND countrylanguage.language != 'English'
SELECT DISTINCT name FROM city WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia' AND code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Chinese' AND isofficial = 'T'))
SELECT DISTINCT name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
SELECT name ,  indepyear ,  surfacearea FROM country WHERE population  =  (SELECT min(population) FROM country)
SELECT name ,  indepyear ,  surfacearea FROM country WHERE population  =  (SELECT min(population) FROM country)
SELECT population ,  name ,  headofstate FROM country ORDER BY surfacearea DESC LIMIT 1
SELECT name ,  population ,  headofstate FROM country ORDER BY surfacearea DESC LIMIT 1
SELECT country.name , count(DISTINCT countrylanguage.language) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING count(DISTINCT countrylanguage.language) >= 3
HAVING count(DISTINCT countrylanguage.language) > 2
SELECT district ,  count(*) FROM city WHERE population  >  (SELECT avg(population) FROM city) GROUP BY district
SELECT district , count(name) FROM city GROUP BY district HAVING population  >  (SELECT avg(population) FROM city)
SELECT governmentform , SUM(population) FROM country GROUP BY governmentform HAVING AVG(lifeexpectancy) > 72
SELECT governmentform ,  SUM(population) FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform
SELECT continent , AVG(lifeexpectancy) , SUM(population) FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72
SELECT continent , SUM(population) , AVG(lifeexpectancy) FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72
SELECT name , surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5
SELECT name ,  surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5
SELECT name FROM country ORDER BY population DESC LIMIT 3
SELECT name FROM country ORDER BY population DESC LIMIT 3
SELECT name FROM country ORDER BY population ASC LIMIT 3
SELECT name FROM country ORDER BY population ASC LIMIT 3
SELECT count(DISTINCT code) FROM country WHERE continent = 'Asia'
SELECT count(*) FROM country WHERE continent = 'Asia'
SELECT name FROM country WHERE continent = 'Europe' AND population = 80000
SELECT name FROM country WHERE continent = 'Europe' AND population = 80000
SELECT sum(population) ,  avg(surfacearea) FROM country WHERE continent  =  'North America' AND surfacearea  >  3000
SELECT sum(population) , avg(surfacearea) FROM country WHERE surfacearea > 3000 AND continent = 'North America' GROUP BY continent
SELECT name FROM city WHERE population BETWEEN 160000 AND 900000
SELECT name FROM city WHERE population BETWEEN 160000 AND 900000
SELECT language FROM countrylanguage GROUP BY language ORDER BY count(countrycode) DESC LIMIT 1
SELECT language FROM countrylanguage GROUP BY language ORDER BY count(*) DESC LIMIT 1
SELECT T1.name ,  T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode WHERE T2.percentage  = (SELECT MAX(T3.percentage) FROM countrylanguage AS T3 WHERE T3.countrycode  =  T2.countrycode GROUP BY countrycode) GROUP BY T2.countrycode
SELECT countrylanguage.countrycode ,  countrylanguage.language FROM countrylanguage GROUP BY countrylanguage.countrycode ORDER BY MAX(countrylanguage.percentage) DESC
SELECT count(DISTINCT countrycode) FROM countrylanguage WHERE language = 'Spanish' AND percentage = (SELECT max(percentage) FROM countrylanguage WHERE language = 'Spanish')
SELECT count(DISTINCT countrycode) FROM countrylanguage WHERE language = 'Spanish' AND isofficial = true AND percentage > 50
SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' AND percentage = (SELECT max(percentage) FROM countrylanguage WHERE language = 'Spanish')
SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' AND percentage > 50
SELECT count(Conductor_ID) FROM conductor
SELECT count(conductor_id) FROM conductor
SELECT name FROM conductor ORDER BY age ASC
SELECT name FROM conductor ORDER BY age
SELECT name FROM conductor WHERE nationality <> 'USA'
SELECT name FROM conductor WHERE nationality != 'USA'
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC
SELECT avg(attendance) FROM show
SELECT avg(attendance) FROM show
SELECT max(share) , min(share) FROM performance WHERE type != 'Live final'
SELECT max(share) , min(share) FROM performance WHERE type != 'Live final' GROUP BY performance_id
SELECT count(DISTINCT nationality) FROM conductor
SELECT COUNT(DISTINCT nationality) FROM conductor
SELECT name FROM conductor ORDER BY year_of_work DESC
SELECT name FROM conductor ORDER BY year_of_work DESC
SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1
SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1
SELECT conductor.name , orchestra.orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID
SELECT conductor.name , orchestra.orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID
SELECT name FROM conductor GROUP BY name HAVING count(orchestra_id) > 1
SELECT name FROM conductor GROUP BY name HAVING count(*)  >  1
SELECT name FROM conductor GROUP BY name ORDER BY count(orchestra_id) DESC LIMIT 1
SELECT name FROM conductor GROUP BY name ORDER BY count(orchestra_id) DESC LIMIT 1
SELECT name FROM conductor WHERE conductor_id IN (SELECT conductor_id FROM orchestra WHERE year_of_founded > 2008)
SELECT DISTINCT T1.name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE T2.Year_of_Founded > 2008
SELECT record_company ,  COUNT(orchestra_id) FROM orchestra GROUP BY record_company
SELECT count(DISTINCT orchestra_id) , record_company FROM orchestra GROUP BY record_company
SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY count(major_record_format) ASC
SELECT major_record_format , COUNT(*) FROM orchestra GROUP BY major_record_format ORDER BY COUNT(*) DESC
SELECT record_company FROM orchestra GROUP BY record_company ORDER BY count(orchestra_id) DESC LIMIT 1
SELECT record_company FROM orchestra GROUP BY record_company ORDER BY count(*) DESC LIMIT 1
SELECT DISTINCT orchestra FROM orchestra WHERE NOT EXISTS (SELECT * FROM performance WHERE orchestra.Orchestra_ID = performance.Orchestra_ID)
SELECT DISTINCT orchestra FROM orchestra WHERE NOT EXISTS (SELECT * FROM performance WHERE orchestra.Orchestra_ID = performance.Orchestra_ID)
SELECT DISTINCT record_company FROM orchestra WHERE year_of_founded < 2003 AND year_of_founded > 2003
SELECT record_company FROM orchestra WHERE year_of_founded < 2003 AND year_of_founded > 2003 GROUP BY record_company
SELECT COUNT(*) FROM orchestra WHERE major_record_format = 'CD' OR major_record_format = 'DVD'
SELECT COUNT(DISTINCT orchestra_id) FROM orchestra WHERE major_record_format = 'CD' OR major_record_format = 'DVD'
SELECT year_of_founded FROM orchestra GROUP BY year_of_founded HAVING count(*)  >  1
SELECT year_of_founded FROM orchestra GROUP BY year_of_founded HAVING count(*)  >  1
SELECT count(id) FROM highschooler
SELECT count(id) FROM highschooler
SELECT name , grade FROM highschooler
SELECT name , grade FROM highschooler
SELECT grade FROM highschooler
SELECT grade ,  name FROM highschooler
SELECT grade FROM highschooler WHERE name  =  'Kyle'
SELECT grade FROM highschooler WHERE name = "Kyle"
SELECT name FROM highschooler WHERE grade  =  10
SELECT name FROM highschooler WHERE grade = 10
SELECT id FROM highschooler WHERE name = 'Kyle'
SELECT id FROM highschooler WHERE name = 'Kyle'
SELECT count(id) FROM highschooler WHERE grade  =  9 OR grade  =  10
SELECT count(id) FROM highschooler WHERE grade  =  9 OR grade  =  10
SELECT grade ,  COUNT(*) FROM highschooler GROUP BY grade
SELECT grade ,  COUNT(*) FROM highschooler GROUP BY grade
SELECT grade FROM highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
SELECT grade FROM highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
SELECT DISTINCT grade FROM takes GROUP BY grade HAVING count(DISTINCT id) >= 4
SELECT grade FROM highschooler GROUP BY grade HAVING count(*) >= 4
SELECT student_id ,  COUNT(friend_id) FROM friend GROUP BY student_id
SELECT T1.name ,  COUNT(T2.friend_id) FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id GROUP BY T1.name
SELECT highschooler.name , count(friend.friend_id) FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.name
SELECT highschooler.name ,  count(friend.friend_id) FROM highschooler JOIN friend ON highschooler.id  =  friend.student_id GROUP BY highschooler.name
SELECT name FROM highschooler ORDER BY (SELECT COUNT(friend_id) FROM friend WHERE friend.student_id  =  highschooler.id) DESC LIMIT 1
SELECT name FROM highschooler GROUP BY name ORDER BY count(*) DESC LIMIT 1
SELECT DISTINCT name FROM Highschooler GROUP BY name HAVING COUNT(friend_id) >= 3
SELECT name FROM Highschooler GROUP BY name HAVING count(*)  >=  3
SELECT T2.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id WHERE T1.name  =  'Kyle'

SELECT COUNT(friend.friend_id) FROM friend JOIN highschooler ON friend.student_id = highschooler.id WHERE highschooler.name = 'Kyle'
SELECT count(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')
SELECT id FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)
SELECT id FROM highschooler WHERE NOT EXISTS (SELECT * FROM friend WHERE highschooler.id  =  friend.student_id)
SELECT name FROM highschooler WHERE NOT EXISTS (SELECT friend_id FROM friend WHERE student_id = highschooler.id)
SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)
SELECT DISTINCT T1.id FROM highschooler AS T1 WHERE EXISTS (SELECT * FROM friend AS T2 WHERE T2.student_id = T1.id) AND EXISTS (SELECT * FROM likes AS T3 WHERE T3.student_id = T1.id)
SELECT DISTINCT student_id FROM friend INNER JOIN likes ON friend.student_id = likes.student_id
SELECT DISTINCT name FROM highschooler WHERE EXISTS (SELECT * FROM friend WHERE highschooler.id = friend.student_id) AND EXISTS (SELECT * FROM likes WHERE highschooler.id = likes.student_id)
SELECT DISTINCT name FROM highschooler WHERE id IN (SELECT DISTINCT student_id FROM friend) AND id IN (SELECT DISTINCT student_id FROM likes)
SELECT student_id , COUNT(*) FROM Likes GROUP BY student_id
SELECT student_id ,  COUNT(*) FROM likes GROUP BY student_id
SELECT highschooler.name, count(likes.liked_id) FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name
SELECT highschooler.name , count(likes.liked_id) FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name
SELECT name FROM highschooler GROUP BY name ORDER BY count(*) DESC LIMIT 1
SELECT name FROM highschooler GROUP BY name ORDER BY count(*) DESC LIMIT 1
SELECT name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY name HAVING count(liked_id) >= 2
SELECT name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY name HAVING count(liked_id) >= 2
SELECT name FROM highschooler WHERE grade  >  5 AND (SELECT count(*) FROM friend WHERE friend.student_id  =  highschooler.id)  >=  2
SELECT name FROM highschooler JOIN friend ON highschooler.id  =  friend.student_id WHERE grade > 5 GROUP BY name HAVING COUNT(DISTINCT friend.friend_id) >= 2
SELECT count(*) FROM likes WHERE student_id  =  (SELECT id FROM highschooler WHERE name  =  'Kyle')
SELECT count(*) FROM likes JOIN highschooler ON likes.student_id = highschooler.id WHERE highschooler.name = "Kyle"
SELECT AVG (grade) FROM highschooler WHERE id  IN  (SELECT student_id FROM friend)
SELECT avg(grade) FROM highschooler WHERE EXISTS (SELECT * FROM friend WHERE friend.student_id = highschooler.id)
SELECT min(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)
SELECT min(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)
SELECT DISTINCT state FROM owners WHERE state IN (SELECT state FROM professionals)
SELECT DISTINCT state FROM owners WHERE state IN (SELECT DISTINCT state FROM professionals)
SELECT AVG(age) FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)
SELECT AVG(age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id
SELECT professional_id , last_name , cell_number FROM professionals WHERE state  =  'Indiana' OR professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING count(*)  >  2)
SELECT professional_id ,  last_name ,  cell_number FROM professionals WHERE state = 'Indiana' OR (SELECT count(*) FROM treatments WHERE treatments.professional_id = professionals.professional_id) > 2
SELECT name FROM dogs WHERE cost_of_treatment > 1000
SELECT name FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments WHERE cost_of_treatment > 1000)
SELECT DISTINCT T1.first_name FROM owners AS T1 WHERE T1.first_name NOT IN (SELECT T2.name FROM dogs AS T2)
SELECT first_name FROM owners WHERE first_name NOT IN (SELECT name FROM dogs) UNION SELECT first_name FROM professionals WHERE first_name NOT IN (SELECT name FROM dogs)
SELECT professional_id , role_code , email_address FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments)
SELECT professional_id ,  role_code ,  email_address FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments)
SELECT owner_id ,  first_name ,  last_name FROM owners WHERE owner_id  =  (SELECT owner_id FROM dogs GROUP BY owner_id ORDER BY count(*) DESC LIMIT 1)
SELECT owner_id ,  first_name ,  last_name FROM owners WHERE owner_id  =  (SELECT owner_id FROM dogs GROUP BY owner_id HAVING count(*)  =  (SELECT max(count(*)) FROM dogs GROUP BY owner_id))
SELECT professional_id ,  role_code ,  first_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING count(*) >= 2)
SELECT professional_id ,  role_code ,  first_name FROM professionals GROUP BY professional_id , role_code , first_name HAVING count(*)  >=  2
SELECT breed_name FROM breeds GROUP BY breed_name ORDER BY count(*) DESC LIMIT 1
SELECT breed_name FROM breeds GROUP BY breed_name ORDER BY count(breed_code) DESC LIMIT 1
SELECT owner_id ,  last_name FROM owners WHERE owner_id  =  (SELECT owner_id FROM dogs GROUP BY owner_id ORDER BY sum(cost_of_treatment) DESC LIMIT 1)
SELECT owner_id ,  last_name FROM owners WHERE owner_id  =  (SELECT owner_id FROM dogs JOIN treatments ON dogs.dog_id  =  treatments.dog_id GROUP BY owner_id ORDER BY sum(cost_of_treatment) DESC LIMIT 1)
SELECT treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code GROUP BY treatment_types.treatment_type_description ORDER BY sum(cost_of_treatment) LIMIT 1
SELECT treatment_type_description FROM treatment_types WHERE treatment_type_code  =  (SELECT treatment_type_code FROM treatments GROUP BY treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1)
SELECT owner_id , zip_code FROM owners ORDER BY (SELECT sum(charge_amount) FROM charges WHERE dogs.owner_id = owners.owner_id) DESC LIMIT 1
SELECT owners.owner_id ,  owners.zip_code FROM owners JOIN dogs ON owners.owner_id  =  dogs.owner_id JOIN treatments ON dogs.dog_id  =  treatments.dog_id GROUP BY owners.owner_id ORDER BY sum(treatments.cost_of_treatment) DESC LIMIT 1
SELECT professional_id , cell_number FROM professionals GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2
SELECT professional_id ,  cell_number FROM professionals GROUP BY professional_id HAVING count(DISTINCT treatment_type_code)  >  1
SELECT first_name ,  last_name FROM professionals WHERE cost_of_treatment  <  (SELECT avg(cost_of_treatment) FROM treatments)
SELECT first_name , last_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments WHERE cost_of_treatment < (SELECT avg(cost_of_treatment) FROM treatments))
SELECT date_of_treatment , first_name FROM treatments JOIN professionals ON treatments.professional_id  =  professionals.professional_id
SELECT date_of_treatment ,  first_name FROM treatments JOIN professionals ON treatments.professional_id  =  professionals.professional_id
SELECT cost_of_treatment , treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT cost_of_treatment, treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT owners.first_name , owners.last_name , sizes.size_description FROM owners JOIN dogs ON owners.owner_id  =  dogs.owner_id JOIN sizes ON dogs.size_code  =  sizes.size_code
SELECT owners.first_name ,  owners.last_name ,  sizes.size_description FROM owners JOIN dogs ON owners.owner_id  =  dogs.owner_id JOIN sizes ON dogs.size_code  =  sizes.size_code
SELECT owners.first_name , dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id
SELECT owners.first_name , dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id
SELECT dogs.name ,  treatments.date_of_treatment FROM dogs JOIN treatments ON dogs.dog_id  =  treatments.dog_id WHERE dogs.breed_code  =  (SELECT breed_code FROM breeds WHERE breed_name  =  (SELECT breed_name FROM breeds GROUP BY breed_name HAVING count(*)  =  1))
SELECT dogs.name , treatments.date_of_treatment FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id JOIN breeds ON dogs.breed_code = breeds.breed_code WHERE breeds.breed_code = (SELECT breed_code FROM breeds ORDER BY breed_code LIMIT 1)
SELECT owners.first_name ,  dogs.name FROM owners JOIN dogs ON owners.owner_id  =  dogs.owner_id WHERE owners.state  =  'Virginia'
SELECT owners.first_name , dogs.name FROM owners JOIN dogs ON owners.owner_id  =  dogs.owner_id WHERE owners.state  =  'Virginia'
SELECT date_arrived ,  date_departed FROM dogs WHERE EXISTS (SELECT dog_id FROM treatments WHERE dogs.dog_id = treatments.dog_id)
SELECT date_arrived ,  date_departed FROM dogs WHERE EXISTS (SELECT dog_id FROM treatments WHERE treatments.dog_id  =  dogs.dog_id)
SELECT last_name FROM owners WHERE owner_id  =  (SELECT owner_id FROM dogs WHERE age  =  (SELECT min(age) FROM dogs))
SELECT last_name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id ORDER BY dogs.date_of_birth LIMIT 1
SELECT email_address FROM professionals WHERE state IN ('Hawaii', 'Wisconsin')
SELECT email_address FROM professionals WHERE state  IN  ('Hawaii', 'Wisconsin')
SELECT date_arrived ,  date_departed FROM dogs
SELECT date_arrived ,  date_departed FROM dogs
SELECT count(DISTINCT dog_id) FROM treatments
SELECT count(*) FROM treatments
SELECT COUNT(DISTINCT professional_id) FROM treatments WHERE professional_id IS NOT NULL
SELECT COUNT(DISTINCT professional_id) FROM treatments WHERE professional_id IS NOT NULL
SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'
SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'
SELECT first_name ,  last_name ,  email_address FROM owners WHERE state LIKE '%North%'
SELECT first_name ,  last_name ,  email_address FROM owners WHERE state LIKE '%North%'
SELECT count(*) FROM dogs WHERE age < (SELECT avg(age) FROM dogs)
SELECT count(dog_id) FROM dogs WHERE age  <  (SELECT AVG(age) FROM dogs)
SELECT MAX(cost_of_treatment) FROM treatments
SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1
SELECT count(dog_id) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)
SELECT count(dog_id) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)
SELECT count(*) FROM owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM dogs)
SELECT count(DISTINCT T1.owner_id) FROM owners AS T1 WHERE T1.owner_id NOT IN (SELECT owner_id FROM dogs)
SELECT count(DISTINCT T1.professional_id) FROM professionals AS T1 WHERE T1.professional_id NOT IN (SELECT DISTINCT T2.professional_id FROM treatments AS T2)
SELECT count(professional_id) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments)
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1
SELECT name , age , weight FROM dogs WHERE abandoned_yn  =  1
SELECT avg(age) FROM dogs
SELECT AVG(age) FROM dogs
SELECT max(age) FROM dogs
SELECT max(age) FROM dogs
SELECT charge_type ,  charge_amount FROM charges
SELECT charge_type ,  charge_amount FROM charges
SELECT max(charge_amount) FROM charges
SELECT charge_amount FROM charges ORDER BY charge_amount DESC LIMIT 1
SELECT email_address ,  cell_number ,  home_phone FROM professionals
SELECT email_address ,  cell_number ,  home_phone FROM professionals
SELECT breeds.breed_name , sizes.size_description FROM breeds , sizes
SELECT DISTINCT breed_code ,  size_code FROM dogs
SELECT professionals.first_name , treatment_types.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id
SELECT professionals.first_name , treatment_types.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id  =  treatments.professional_id
SELECT count(*) FROM singer
SELECT count(*) FROM singer
SELECT name FROM singer ORDER BY net_worth_millions ASC
SELECT name FROM singer ORDER BY net_worth_millions ASC
SELECT birth_year ,  citizenship FROM singer
SELECT birth_year ,  citizenship FROM singer
SELECT name FROM singer WHERE citizenship  <>  'France'
SELECT name FROM singer WHERE citizenship != 'French'
SELECT DISTINCT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949
SELECT DISTINCT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949
SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1
SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1
SELECT DISTINCT citizenship , COUNT(citizenship) FROM singer GROUP BY citizenship
SELECT citizenship , count(*) FROM singer GROUP BY citizenship
SELECT citizenship ,  count(*) FROM singer GROUP BY citizenship ORDER BY count(*) DESC LIMIT 1
SELECT citizenship FROM singer GROUP BY citizenship ORDER BY count(citizenship) DESC LIMIT 1
SELECT citizenship ,  MAX (net_worth_millions) FROM singer GROUP BY citizenship
SELECT citizenship ,  MAX(net_worth_millions) FROM singer GROUP BY citizenship
SELECT title ,  name FROM song JOIN singer ON song.singer_id  =  singer.singer_id
SELECT title , name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID
SELECT DISTINCT name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE sales > 300000
SELECT DISTINCT name FROM singer WHERE sales > 300000
SELECT name FROM singer GROUP BY name HAVING count(*)  >  1
SELECT name FROM singer GROUP BY name HAVING count(*)  >  1
SELECT singer.name , sum(song.sales) FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name
SELECT singer.name , sum(song.sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.name
SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song)
SELECT name FROM singer WHERE NOT EXISTS (SELECT * FROM song WHERE singer.Singer_ID = song.Singer_ID)
SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955
SELECT DISTINCT citizenship FROM singer WHERE birth_year  <  1945 AND birth_year  >  1955
SELECT count(*) FROM other_available_features
SELECT feature_type_name FROM ref_feature_types WHERE feature_type_code  =  (SELECT feature_type_code FROM other_available_features WHERE feature_name  =  'AirCon')
SELECT property_type_description FROM ref_property_types WHERE property_type_code = (SELECT property_type_code FROM properties)
SELECT property_name FROM properties WHERE (property_type_code = 'Apartment' OR property_type_code = 'House') AND room_count > 1
