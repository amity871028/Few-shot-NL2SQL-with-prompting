SELECT COUNT(DISTINCT Singer_ID) FROM singer
SELECT COUNT(*) AS Total_Singers FROM singer
SELECT Name, Country, Age FROM singer ORDER BY Age ASC
SELECT Name, Country, Age FROM singer ORDER BY Age DESC
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE LOWER(Country) = 'france'
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age  FROM singer  WHERE Country = 'France'
SELECT singer.Name, singer.Song_Name, singer.Song_release_year  FROM singer  WHERE singer.Age = (SELECT MIN(singer.Age) FROM singer)
SELECT singer.Song_Name, singer.Song_release_year FROM singer WHERE singer.Age = (SELECT MIN(singer.Age) FROM singer)
SELECT DISTINCT Country FROM singer WHERE Age > 20
SELECT DISTINCT Country FROM singer WHERE Age > 20
SELECT Country, COUNT(Singer_ID) FROM singer GROUP BY Country
SELECT COUNT(Singer_ID) AS Singer_Count, Country  FROM singer  GROUP BY Country
SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)
SELECT singer.Song_Name FROM singer WHERE singer.Age > (     SELECT AVG(singer.Age)     FROM singer )
SELECT Location, Name  FROM stadium  WHERE Capacity BETWEEN 5000 AND 10000
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000
SELECT MAX(Capacity) AS Maximum_Capacity, AVG(Capacity) AS Average_Capacity FROM stadium
SELECT AVG(Capacity) AS Average_Capacity, MAX(Capacity) AS Maximum_Capacity FROM stadium
SELECT Name, Capacity  FROM stadium  WHERE Average = (SELECT MAX(Average) FROM stadium)
SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)
SELECT COUNT(DISTINCT concert_ID) FROM concert WHERE Year = 2014 OR Year = 2015
SELECT COUNT(*) FROM concert WHERE Year = 2014 OR Year = 2015
SELECT T1.Name, COUNT(T2.concert_ID) FROM stadium AS T1 LEFT JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Name
SELECT T1.Stadium_ID, T1.Location, T1.Name, T1.Capacity, T1.Highest, T1.Lowest, T1.Average, COUNT(T2.concert_ID) FROM stadium AS T1 LEFT JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Stadium_ID
SELECT Name, Capacity  FROM stadium  WHERE Stadium_ID = (     SELECT Stadium_ID      FROM concert      WHERE Year >= 2014      GROUP BY Stadium_ID      HAVING COUNT(*) = (         SELECT MAX(concert_count)          FROM (             SELECT COUNT(*) as concert_count              FROM concert              WHERE Year >= 2014              GROUP BY Stadium_ID         ) AS temp     ) )
SELECT S.Name, S.Capacity FROM stadium AS S JOIN concert AS C ON C.Stadium_ID = S.Stadium_ID WHERE C.Year > 2013 GROUP BY S.Name, S.Capacity ORDER BY COUNT(*) DESC LIMIT 1
SELECT Year, COUNT(*) AS Concert_Count FROM concert GROUP BY Year ORDER BY Concert_Count DESC LIMIT 1
SELECT Year, COUNT(*) AS concert_count FROM concert GROUP BY Year ORDER BY concert_count DESC LIMIT 1
SELECT Name  FROM stadium  WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)
SELECT DISTINCT Country  FROM singer  WHERE Age > 40  AND Country IN (     SELECT DISTINCT Country      FROM singer      WHERE Age < 30 )
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014)
SELECT Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.concert_ID IS NULL OR concert.Year <> 2014
SELECT concert_Name, Theme, COUNT(singer.Singer_ID) AS number_of_singers  FROM concert  JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID  JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID  GROUP BY concert_Name, Theme
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID)  FROM concert  JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID  GROUP BY concert.concert_Name, concert.Theme
SELECT singer.Name, COUNT(singer_in_concert.concert_ID)  FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  GROUP BY singer.Name
SELECT Name, COUNT(concert_ID)  FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  GROUP BY singer.Singer_ID, Name
SELECT singer.Name  FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID  WHERE concert.Year = 2014
SELECT singer.Name  FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID  WHERE concert.Year = 2014
SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%';
SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%';
SELECT SELECT stadium.Name, stadium.Location FROM stadium INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year IN (2014, 2015) GROUP BY stadium.Name, stadium.Location
SELECT Name, Location  FROM stadium  WHERE Stadium_ID IN (     SELECT Stadium_ID      FROM concert      WHERE Year = 2014 )  AND Stadium_ID IN (     SELECT Stadium_ID      FROM concert      WHERE Year = 2015 )
SELECT COUNT(concert_ID)  FROM concert  JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE stadium.Capacity = (SELECT MAX(Capacity) FROM stadium)
SELECT COUNT(concert_ID) FROM concert  JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID  WHERE stadium.Capacity = (SELECT MAX(Capacity) FROM stadium)
SELECT COUNT(DISTINCT PetID) FROM Pets WHERE weight > 10
SELECT COUNT(*) FROM Pets WHERE weight > 10
SELECT Pets.weight   FROM Pets   JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID   JOIN Student ON Has_Pet.StuID = Student.StuID   WHERE Pets.PetType = 'dog'   ORDER BY Pets.pet_age ASC   LIMIT 1
SELECT weight  FROM Pets  WHERE PetType = 'dog'  AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog')
SELECT MAX(weight) AS max_weight, PetType FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID GROUP BY PetType
SELECT Pets.PetType, MAX(Pets.weight)  FROM Pets  JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID  GROUP BY Pets.PetType
SELECT COUNT(Has_Pet.PetID) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20
SELECT COUNT(DISTINCT Has_Pet.PetID)  FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20
SELECT COUNT(DISTINCT Has_Pet.PetID)  FROM Has_Pet   JOIN Student ON Has_Pet.StuID = Student.StuID   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE LOWER(Pets.PetType) = 'dog' AND LOWER(Student.Sex) = 'f'
SELECT COUNT(DISTINCT Pets.PetID) FROM Has_Pet   JOIN Pets ON Has_Pet.PetID = Pets.PetID   JOIN Student ON Has_Pet.StuID = Student.StuID   WHERE Pets.PetType = 'dog' AND Student.Sex = 'F'
SELECT COUNT(DISTINCT PetType) FROM Pets
SELECT COUNT(DISTINCT PetType) FROM Pets
SELECT DISTINCT Student.Fname   FROM Student   JOIN Has_Pet ON Student.StuID = Has_Pet.StuID   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType IN ('cat', 'dog')
SELECT DISTINCT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog')
SELECT Fname FROM Student WHERE StuID IN (   SELECT StuID   FROM Has_Pet   WHERE PetID IN (     SELECT PetID     FROM Pets     WHERE PetType = 'cat'   ) ) AND StuID IN (   SELECT StuID   FROM Has_Pet   WHERE PetID IN (     SELECT PetID     FROM Pets     WHERE PetType = 'dog'   ) )
SELECT Student.Fname FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'cat'  AND Student.StuID IN (     SELECT Student.StuID      FROM Student      JOIN Has_Pet ON Student.StuID = Has_Pet.StuID      JOIN Pets ON Has_Pet.PetID = Pets.PetID      WHERE Pets.PetType = 'dog' )
SELECT Major, Age  FROM Student  WHERE StuID NOT IN (   SELECT StuID    FROM Has_Pet    WHERE PetID IN (     SELECT PetID      FROM Pets      WHERE LOWER(PetType) = 'cat'   ) )
SELECT Major, Age  FROM Student  WHERE StuID NOT IN (      SELECT StuID      FROM Has_Pet      WHERE PetID IN (          SELECT PetID          FROM Pets          WHERE PetType = 'cat'      )  )
SELECT Student.StuID  FROM Student  WHERE Student.StuID NOT IN (     SELECT Has_Pet.StuID      FROM Has_Pet      INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID      WHERE Pets.PetType = 'cat' )
SELECT DISTINCT Student.StuID  FROM Student  WHERE Student.StuID NOT IN (     SELECT Has_Pet.StuID      FROM Has_Pet      JOIN Pets ON Has_Pet.PetID = Pets.PetID      WHERE Pets.PetType = 'cat' )
SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Student.StuID NOT IN (     SELECT Has_Pet.StuID     FROM Has_Pet     JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE Pets.PetType = 'cat' )
SELECT  DISTINCT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Student.StuID NOT IN (     SELECT Student.StuID     FROM Student     JOIN Has_Pet ON Student.StuID = Has_Pet.StuID     JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE Pets.PetType = 'cat' )
SELECT PetType, weight  FROM Pets  WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT PetType, pet_age, weight FROM Pets ORDER BY pet_age ASC, weight ASC LIMIT 1
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1
SELECT PetType, AVG(pet_age), MAX(pet_age)  FROM Pets  GROUP BY PetType
SELECT PetType, AVG(pet_age), MAX(pet_age) FROM Pets GROUP BY PetType
SELECT PetType, AVG(weight)  FROM Pets  GROUP BY PetType
SELECT PetType, AVG(weight) AS average_weight FROM Pets GROUP BY PetType
SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)
SELECT Fname, Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID
SELECT Pets.PetID FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.LName = 'Smith'
SELECT Pets.PetID  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Student.LName = 'Smith'
SELECT Student.StuID, COUNT(Has_Pet.PetID)  FROM Has_Pet  JOIN Pets ON Has_Pet.PetID = Pets.PetID  GROUP BY Student.StuID
SELECT Student.StuID, count(Has_Pet.PetID)  FROM Has_Pet  JOIN Student ON Has_Pet.StuID = Student.StuID GROUP BY Student.StuID
SELECT T1.Fname, T1.Sex FROM Student AS T1 WHERE T1.StuID IN (   SELECT T2.StuID   FROM Has_Pet AS T2   GROUP BY T2.StuID   HAVING COUNT(*) > 1 )
SELECT Fname, Sex  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  GROUP BY Student.StuID  HAVING COUNT(Has_Pet.PetID) > 1
SELECT Student.LName  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.pet_age = 3  AND Pets.PetType = 'cat'
SELECT Student.LName   FROM Student   JOIN Has_Pet ON Student.StuID = Has_Pet.StuID   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3   ORDER BY Student.LName DESC   LIMIT 1
SELECT avg(Age) FROM Student WHERE StuID NOT IN (SELECT DISTINCT StuID FROM Has_Pet);
SELECT avg(Age)  FROM Student  WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT COUNT(*) FROM continents
SELECT COUNT(ContId) FROM continents
SELECT ContId, Continent, COUNT(CountryId) AS NumCountries  FROM continents  JOIN countries ON continents.ContId = countries.Continent  GROUP BY ContId, Continent
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS CountryCount FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent
SELECT COUNT(DISTINCT CountryId) FROM countries
SELECT COUNT(*) FROM countries
SELECT FullName, Id, COUNT(model_list.ModelId) AS num_models FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY FullName, Id
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.Model) AS ModelCount  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  GROUP BY car_makers.FullName, car_makers.Id
SELECT SELECT Model FROM cars_data WHERE Horsepower = (     SELECT MIN(Horsepower)     FROM cars_data )
SELECT model_list.Model  FROM model_list  JOIN car_names ON model_list.ModelId = car_names.ModelId  JOIN cars_data ON car_names.MakeId = cars_data.Id  ORDER BY cars_data.Horsepower ASC  LIMIT 1
SELECT Model FROM model_list WHERE ModelId IN (   SELECT Model   FROM car_names   WHERE MakeId IN (     SELECT Id     FROM cars_data     WHERE Weight < (       SELECT AVG(Weight)       FROM cars_data     )   ) )
SELECT model_list.Model  FROM cars_data  JOIN model_list ON cars_data.Id = model_list.ModelId  WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT T1.Maker FROM car_makers AS T1 JOIN cars_data AS T2 ON T1.Id = T2.Id WHERE T2.Year = 1970
SELECT SELECT DISTINCT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id WHERE cars_data.Year = 1970
SELECT car_makers.Maker, MIN(cars_data.Year) AS EarliestYear FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_makers.Maker ORDER BY EarliestYear ASC LIMIT 1
SELECT T1.Maker, T4.Year FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id ORDER BY T4.Year ASC LIMIT 1
SELECT DISTINCT car_names.Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980
SELECT DISTINCT T1.Model  FROM model_list AS T1  JOIN car_names AS T2 ON T1.ModelId = T2.Model  JOIN cars_data AS T3 ON T2.MakeId = T3.Id  WHERE T3.Year > 1980
SELECT T1.Continent, COUNT(DISTINCT T3.Id) AS MakerCount FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent
SELECT continents.Continent, COUNT(DISTINCT car_makers.Id) AS MakerCount FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent
SELECT CountryName FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1
SELECT COUNT(car_names.Model) AS ModelCount, car_makers.FullName FROM car_names JOIN car_makers ON car_names.MakeId = car_makers.Id GROUP BY car_makers.FullName
SELECT COUNT(T3.Model) AS NumCarModels, T1.Id, T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.ModelId = T3.MakeId GROUP BY T1.Id, T1.FullName
SELECT cars_data.Accelerate  FROM cars_data  JOIN car_names ON car_names.MakeId = cars_data.Id  JOIN model_list ON model_list.Model = car_names.Model  JOIN car_makers ON car_makers.Id = model_list.Maker  WHERE car_names.Make = 'amc'  AND model_list.Model = 'hornet sportabout (sw)'
SELECT Acceleration FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'amc' AND model_list.Model = 'hornet sportabout (sw)'
SELECT COUNT(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France')
SELECT count(DISTINCT car_makers.Id)  FROM car_makers  JOIN countries ON car_makers.Country = countries.CountryId  WHERE countries.CountryName = 'France'
SELECT COUNT(DISTINCT car_names.Model)   FROM car_makers   JOIN model_list ON car_makers.Id = model_list.Maker   JOIN car_names ON model_list.ModelId = car_names.MakeId   JOIN countries ON car_makers.Country = countries.CountryId   JOIN continents ON countries.Continent = continents.ContId   WHERE countries.CountryName = 'USA'
SELECT COUNT(DISTINCT car_names.Model) FROM car_names JOIN model_list ON car_names.Model = model_list.ModelId JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'United States'
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT AVG(cars_data.MPG) FROM cars_data WHERE cars_data.Cylinders = 4
SELECT MIN(Weight)  FROM cars_data  WHERE Cylinders = 8    AND Year = 1974
SELECT MIN(Weight)  FROM cars_data  WHERE Cylinders = 8 AND Year = 1974
SELECT T1.Maker, T3.Model  FROM car_makers AS T1  JOIN model_list AS T2 ON T1.Id = T2.Maker  JOIN car_names AS T3 ON T3.MakeId = T2.Model
SELECT car_makers.Maker, car_names.Model  FROM car_makers  JOIN car_names ON car_makers.Id = car_names.MakeId
SELECT CountryName, CountryId FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY CountryName, CountryId
SELECT T1.CountryName, T1.CountryId FROM countries AS T1 WHERE EXISTS (     SELECT *     FROM car_makers AS T2     WHERE T2.Country = T1.CountryId )
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150
SELECT Year, AVG(Weight) AS AverageWeight FROM cars_data GROUP BY Year
SELECT AVG(Weight) AS AverageWeight, Year FROM cars_data GROUP BY Year
SELECT countries.CountryName FROM countries JOIN continents ON countries.Continent = continents.ContId JOIN car_makers ON car_makers.Country = countries.CountryId WHERE continents.Continent = 'Europe' GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3
SELECT CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'Europe' GROUP BY CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3
SELECT MAX(cars_data.Horsepower) AS Maximum_Horsepower, car_makers.Maker  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE cars_data.Cylinders = 3 GROUP BY car_makers.Maker
SELECT MAX(cars_data.Horsepower) AS MaxHorsepower, car_makers.Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE cars_data.Cylinders = 3 GROUP BY car_makers.Maker
SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.ModelId = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.MPG DESC LIMIT 1
SELECT car_names.Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY cars_data.MPG DESC LIMIT 1
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT AVG(cars_data.Edispl)   FROM model_list   JOIN car_names ON model_list.ModelId = car_names.ModelId   JOIN cars_data ON car_names.MakeId = cars_data.Id   JOIN car_makers ON car_makers.Id = car_names.MakeId   WHERE car_makers.Maker = 'volvo'
SELECT AVG(cars_data.Edispl) FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.Maker = 'Volvo'
SELECT Cylinders, MAX(Accelerate)  FROM cars_data  GROUP BY Cylinders
SELECT MAX(Accelerate) AS Max_Accelerate, Cylinders FROM cars_data GROUP BY Cylinders
SELECT Model FROM model_list GROUP BY Model HAVING COUNT(DISTINCT Make) = (     SELECT MAX(count_model)     FROM (         SELECT COUNT(DISTINCT Make) AS count_model         FROM model_list         GROUP BY Model     ) AS counts )
SELECT Model FROM model_list GROUP BY Model ORDER BY COUNT(DISTINCT Maker) DESC LIMIT 1
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4
SELECT COUNT(*) FROM cars_data WHERE Year = 1980
SELECT COUNT(*) AS TotalCars FROM cars_data WHERE Year = 1980
SELECT COUNT(DISTINCT model_list.Model) FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  WHERE car_makers.FullName = 'American Motor Company'
SELECT COUNT(ModelId) FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'amc')
SELECT FullName, Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY FullName, Id HAVING COUNT(DISTINCT model_list.ModelId) > 3
SELECT Id, Maker  FROM car_makers  WHERE Id IN (   SELECT Maker    FROM model_list    GROUP BY Maker    HAVING COUNT(*) > 3 )
SELECT DISTINCT car_names.Model FROM car_makers JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON car_names.MakeId = model_list.Model JOIN cars_data ON cars_data.Id = car_names.MakeId WHERE car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500
SELECT DISTINCT T1.Model  FROM model_list AS T1  JOIN car_makers AS T2 ON T1.Maker = T2.Id  JOIN car_names AS T4 ON T1.Model = T4.Model  JOIN cars_data AS T3 ON T4.MakeId = T3.Id  WHERE T2.Maker = 'gm' OR T3.Weight > 3500
SELECT DISTINCT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000
SELECT DISTINCT Year  FROM cars_data  WHERE Weight < 4000    AND Year IN (     SELECT DISTINCT Year      FROM cars_data      WHERE Weight > 3000   )
SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1
SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1
SELECT cars_data.Cylinders  FROM car_names  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE car_names.Model = 'volvo'  AND cars_data.Accelerate = (      SELECT min(cars_data.Accelerate)           FROM car_names           JOIN cars_data ON car_names.MakeId = cars_data.Id           WHERE car_names.Model = 'volvo' ) 
SELECT min(Cylinders)  FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'volvo' AND cars_data.Accelerate = (     SELECT min(Accelerate)     FROM car_makers     JOIN model_list ON car_makers.Id = model_list.Maker     JOIN car_names ON model_list.Model = car_names.Model     JOIN cars_data ON car_names.MakeId = cars_data.Id     WHERE car_makers.Maker = 'volvo' )
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT COUNT(DISTINCT T1.CountryId) FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING COUNT(DISTINCT T2.Id) > 2
SELECT count(DISTINCT T1.CountryId)  FROM countries AS T1  JOIN car_makers AS T2 ON T2.Country = T1.CountryId  GROUP BY T1.CountryId  HAVING count(DISTINCT T2.Id) > 2
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE cars_data.Cylinders = 4 GROUP BY model_list.Model ORDER BY cars_data.Horsepower DESC LIMIT 1
SELECT SELECT car_names.Model, MAX(cars_data.Horsepower) AS MaxHorsepower FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 4 GROUP BY car_names.Model ORDER BY MaxHorsepower DESC LIMIT 1;
SELECT MakeId, Make FROM car_names WHERE MakeId IN (     SELECT MakeId     FROM cars_data     WHERE Horsepower > (         SELECT MIN(Horsepower)         FROM cars_data     ) ) AND MakeId NOT IN (     SELECT MakeId     FROM cars_data     WHERE Cylinders > 3 )
SELECT car_names.MakeId, car_names.Make FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id JOIN car_makers ON car_makers.Id = car_names.Model WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders < 4;
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 AND Year < 1980
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980
SELECT T1.Model  FROM model_list AS T1  JOIN car_names AS T2 ON T1.ModelId = T2.Model  JOIN cars_data AS T3 ON T2.MakeId = T3.Id  JOIN car_makers AS T4 ON T2.MakeId = T4.Id  WHERE T3.Weight < 3500  AND T4.Maker != 'Ford Motor Company'
SELECT Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON model_list.Model = car_names.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker <> 'Ford'
SELECT CountryName  FROM countries  LEFT JOIN car_makers ON countries.CountryId = car_makers.Country  WHERE car_makers.Country IS NULL
SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers)
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(car_makers.Id) >= 2 AND COUNT(DISTINCT car_makers.Maker) > 3
SELECT SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT model_list.Model) >= 2 AND COUNT(*) > 3
SELECT CountryId, CountryName  FROM countries  WHERE CountryId IN (   SELECT DISTINCT countries.CountryId    FROM countries    JOIN car_makers ON car_makers.Country = countries.CountryId    JOIN model_list ON model_list.Maker = car_makers.Id    JOIN car_names ON car_names.Model = model_list.Model    WHERE car_names.Make = 'fiat' OR      (SELECT COUNT(DISTINCT car_makers.Id) FROM car_makers WHERE car_makers.Country = countries.CountryId) > 3 )
SELECT countries.CountryId, countries.CountryName  FROM countries  JOIN car_makers ON countries.CountryId = car_makers.Country  JOIN model_list ON car_makers.Id = model_list.Maker  JOIN car_names ON model_list.ModelId = car_names.MakeId  WHERE car_makers.Id > 3 OR car_names.Model = 'fiat'
SELECT airlines.Country FROM airlines WHERE airlines.Airline = 'JetBlue Airways'
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT T1.Airline, T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'USA'
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'United States'
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'
SELECT COUNT(*) FROM airlines
SELECT COUNT(*) FROM airlines
SELECT COUNT(*) FROM airports
SELECT COUNT(*) FROM airports
SELECT COUNT(*) FROM flights
SELECT COUNT(*) FROM flights
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
SELECT COUNT(DISTINCT Airline) FROM airlines WHERE Country = 'United States'
SELECT COUNT(*) FROM airlines WHERE Country = 'United States'
SELECT City, Country FROM airports WHERE AirportName = 'Alton' AND AirportCode = 'Alton'
SELECT City, Country FROM airports WHERE AirportName = 'Alton' AND City = 'Alton';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
SELECT AirportName FROM airports WHERE City = 'Aberdeen'
SELECT AirportName FROM airports WHERE City = 'Aberdeen'
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'APG' AND flights.SourceAirport = 'APG'
SELECT count(*) FROM flights WHERE flights.DestAirport = 'ATO'
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'ATO'
SELECT COUNT(*) FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen';
SELECT COUNT(flights.FlightNo)  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen' AND flights.DestAirport != airports.AirportCode
SELECT COUNT(*) FROM flights   JOIN airports ON flights.DestAirport = airports.AirportCode   JOIN cities ON airports.City = cities.CityName   WHERE cities.CityName = 'Aberdeen'
SELECT COUNT(*) FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen' AND flights.DestAirport IN  (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
SELECT COUNT(*) FROM flights   JOIN airports AS A1 ON flights.SourceAirport = A1.AirportCode   JOIN airports AS A2 ON flights.DestAirport = A2.AirportCode   WHERE A1.City = 'Aberdeen' AND A2.City = 'Ashley'
SELECT COUNT(*) FROM flights   JOIN airports AS A1 ON flights.SourceAirport = A1.AirportCode   JOIN airports AS A2 ON flights.DestAirport = A2.AirportCode   WHERE A1.City = 'Aberdeen'   AND A2.City = 'Ashley';
SELECT COUNT(FlightNo) FROM flights WHERE Airline = 'JetBlue Airways'
SELECT COUNT(FlightNo) FROM flights WHERE Airline IN (SELECT Airline FROM airlines WHERE Airline = 'JetBlue Airways')
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE flights.Airline = 'United Airlines'  AND airports.AirportCode = 'ASY' AND flights.Airline = 'United Airlines' AND airports.AirportCode = 'ASY'
SELECT COUNT(*) FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  JOIN airlines ON flights.Airline = airlines.uid  WHERE airlines.Airline = 'UAL'  AND airports.AirportCode = 'ASY'
SELECT COUNT(*)  FROM flights   JOIN airports ON flights.SourceAirport = airports.AirportCode   JOIN airlines ON flights.Airline = airlines.Airline  WHERE airlines.Airline = 'United Airlines'  AND airports.AirportCode = 'AHD'
SELECT COUNT(*) FROM flights  JOIN airlines ON flights.Airline = airlines.Abbreviation  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airlines.Airline = 'United Airlines'   AND airports.AirportCode = 'AHD'
SELECT COUNT(flights.FlightNo) FROM flights   JOIN airlines ON flights.Airline = airlines.Airline   JOIN airports ON flights.DestAirport = airports.AirportCode   WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen'
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  JOIN airlines ON airlines.Airline = flights.Airline  WHERE airlines.Airline = 'United Airlines'  AND airports.AirportName = 'Aberdeen'
SELECT airports.City  FROM airports  JOIN flights ON flights.DestAirport = airports.AirportCode  GROUP BY airports.City  ORDER BY COUNT(flights.DestAirport) DESC  LIMIT 1
SELECT airports.City  FROM airports  JOIN flights ON airports.AirportCode = flights.DestAirport  GROUP BY airports.City  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT airports.City, COUNT(*) AS departures  FROM airports  JOIN flights ON airports.AirportCode = flights.SourceAirport  GROUP BY airports.City  ORDER BY departures DESC  LIMIT 1
SELECT airports.City FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1
SELECT airports.AirportCode FROM airports JOIN flights ON flights.SourceAirport = airports.AirportCode OR flights.DestAirport = airports.AirportCode GROUP BY airports.AirportCode ORDER BY COUNT(*) DESC LIMIT 1
SELECT AirportCode FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport OR airports.AirportCode = flights.SourceAirport GROUP BY airports.AirportCode ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.AirportCode  FROM airports AS T1  LEFT JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport OR T1.AirportCode = T2.DestAirport  GROUP BY T1.AirportCode  ORDER BY COUNT(T2.FlightNo) ASC  LIMIT 1
SELECT AirportCode FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport GROUP BY airports.AirportCode ORDER BY COUNT(flights.FlightNo) ASC LIMIT 1
SELECT airlines.Airline, COUNT(*) AS num_flights FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY airlines.Airline ORDER BY num_flights DESC LIMIT 1
SELECT T2.Airline  FROM flights AS T1  JOIN airlines AS T2 ON T1.Airline = T2.uid  GROUP BY T2.Airline  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT Abbreviation, Country  FROM airlines  WHERE uid = (SELECT Airline               FROM flights               GROUP BY Airline               ORDER BY COUNT(*) ASC               LIMIT 1)
SELECT Abbreviation, Country FROM airlines GROUP BY Abbreviation, Country ORDER BY COUNT(*) ASC LIMIT 1
SELECT Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE flights.SourceAirport = 'AHD';
SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE flights.SourceAirport = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD' AND flights.DestAirport = airports.AirportCode;
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD';
SELECT Airline FROM airlines WHERE EXISTS (   SELECT *   FROM flights   WHERE airlines.uid = flights.Airline     AND flights.SourceAirport = 'APG' ) AND EXISTS (   SELECT *   FROM flights   WHERE airlines.uid = flights.Airline     AND flights.SourceAirport = 'CVO' )
SELECT Airline FROM airlines WHERE Airline IN (SELECT DISTINCT Airline FROM flights WHERE SourceAirport IN ('APG', 'CVO'))
SELECT Airline  FROM airlines  WHERE uid IN (      SELECT DISTINCT Airline      FROM flights      WHERE SourceAirport = 'CVO'  )  AND uid NOT IN (      SELECT DISTINCT Airline      FROM flights      WHERE SourceAirport = 'APG'      AND DestAirport = (         SELECT AirportCode          FROM airports          WHERE AirportCode = flights.DestAirport      ) )
SELECT Airline  FROM airlines  WHERE Airline NOT IN (    SELECT DISTINCT Airline     FROM flights     JOIN airports ON flights.SourceAirport = airports.AirportCode     WHERE airports.AirportCode = 'APG' )  AND Airline IN (    SELECT DISTINCT Airline     FROM flights     JOIN airports ON flights.SourceAirport = airports.AirportCode     WHERE airports.AirportCode = 'CVO' )
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.Abbreviation = T2.Airline GROUP BY T1.Airline HAVING COUNT(*) >= 10
SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY Airline HAVING COUNT(*) >= 10
SELECT Airline FROM airlines WHERE Abbreviation IN (     SELECT Airline     FROM flights     GROUP BY Airline     HAVING COUNT(*) < 200 )
SELECT Airline FROM airlines WHERE EXISTS (     SELECT *     FROM flights     WHERE flights.Airline = airlines.Airline     GROUP BY flights.Airline     HAVING COUNT(*) < 200 )
SELECT FlightNo FROM flights WHERE Airline = 'United Airlines'
SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Abbreviation = 'UAL')
SELECT flights.FlightNo  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.AirportCode = 'APG'
SELECT FlightNo  FROM flights  WHERE SourceAirport = 'APG'
SELECT flights.FlightNo  FROM flights  JOIN airports  ON flights.DestAirport = airports.AirportCode  WHERE airports.AirportCode = 'APG'
SELECT FlightNo  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.AirportName = 'Phillips AAF'
SELECT FlightNo  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen'
SELECT FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City IN ('Aberdeen', 'Abilene')
SELECT COUNT(*) FROM flights WHERE DestAirport IN ('ABR', 'ABI')
SELECT AirportName  FROM airports  LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport  WHERE flights.SourceAirport IS NULL AND flights.DestAirport IS NULL
SELECT AirportName  FROM airports  LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport  WHERE FlightNo IS NULL AND flights.SourceAirport IS NULL AND flights.DestAirport IS NULL
SELECT COUNT(*) FROM employee
SELECT COUNT(*) FROM employee
SELECT employee.Name FROM employee ORDER BY employee.Age ASC
SELECT employee.Name FROM employee ORDER BY employee.Age ASC
SELECT COUNT(Employee_ID) AS Num_Employees, City  FROM employee  GROUP BY City
SELECT COUNT(Employee_ID) AS Employee_Count, City  FROM employee  GROUP BY City
SELECT employee.city FROM employee WHERE employee.age < 30 GROUP BY employee.city HAVING COUNT(DISTINCT employee.Employee_ID) > 1
SELECT City  FROM employee  WHERE Age < 30  GROUP BY City  HAVING COUNT(*) > 1
SELECT COUNT(DISTINCT Shop_ID) AS num_shops, Location FROM shop GROUP BY Location
SELECT COUNT(Shop_ID) AS Shop_Count, Location FROM shop GROUP BY Location
SELECT Manager_name, District  FROM shop  WHERE Number_products = (SELECT MAX(Number_products) FROM shop)
SELECT shop.Manager_name, shop.District FROM shop ORDER BY shop.Number_products DESC LIMIT 1
SELECT MIN(Number_products) AS Min_Products, MAX(Number_products) AS Max_Products FROM shop
SELECT MIN(Number_products), MAX(Number_products) FROM shop
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC
SELECT shop.Name, shop.Location, shop.District FROM shop ORDER BY shop.Number_products DESC
SELECT shop.Name FROM shop WHERE Number_products > (   SELECT AVG(Number_products)   FROM shop )
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)
SELECT T1.Name  FROM employee AS T1  JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID  GROUP BY T1.Employee_ID  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.Employee_ID ORDER BY COUNT(evaluation.Employee_ID) DESC LIMIT 1;
SELECT employee.Name  FROM employee  JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID  ORDER BY evaluation.Bonus DESC  LIMIT 1
SELECT employee.Name FROM employee INNER JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1
SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
SELECT Name  FROM employee  WHERE Employee_ID NOT IN (   SELECT Employee_ID    FROM evaluation )
SELECT T1.Name  FROM shop AS T1  JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID  GROUP BY T1.Name  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1
SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT DISTINCT Shop_ID FROM hiring)
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL  This query uses a LEFT JOIN to combine the "shop" table with the "hiring" table on the Shop_ID column. Then, it filters the results by selecting only those rows where the Employee_ID is NULL, indicating that the shop has no employees. Finally, it selects the Name column from the "shop" table to retrieve the shop names.
SELECT T1.Name, COUNT(T2.Employee_ID) FROM shop AS T1 JOIN hiring AS T2 ON T2.Shop_ID = T1.Shop_ID GROUP BY T1.Shop_ID, T1.Name
SELECT COUNT(T3.Employee_ID) AS Number_of_Employees, T1.Name AS Shop_Name FROM shop AS T1 JOIN hiring AS T2 ON T2.Shop_ID = T1.Shop_ID JOIN employee AS T3 ON T3.Employee_ID = T2.Employee_ID GROUP BY T1.Shop_ID
SELECT SUM(Bonus) AS Total_Bonus FROM evaluation
SELECT SUM(Bonus) AS Total_Bonus FROM evaluation
SELECT * FROM hiring
SELECT hiring.* FROM hiring;
SELECT District FROM shop WHERE Number_products < 3000 AND District IN (   SELECT District   FROM shop   WHERE Number_products > 10000 )
SELECT DISTINCT District  FROM shop WHERE District IN (   SELECT District FROM shop WHERE Number_products < 3000 )  AND District IN (   SELECT District FROM shop WHERE Number_products > 10000 );
SELECT COUNT(DISTINCT Location) FROM shop
SELECT COUNT(DISTINCT Location) AS StoreCount FROM shop
SELECT COUNT(*) FROM Documents
SELECT COUNT(DISTINCT Document_ID) FROM Documents
SELECT Document_ID, Document_Name, Document_Description FROM Documents
SELECT Document_ID, Document_Name, Document_Description  FROM Documents
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%';
SELECT Document_ID, Template_ID, Document_Description  FROM Documents  WHERE Document_Name = 'Robbin CV'
SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description   FROM Documents   WHERE Documents.Document_Name = 'Robbin CV'
SELECT COUNT(DISTINCT Documents.Template_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID
SELECT COUNT(DISTINCT Documents.Template_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID
SELECT count(DISTINCT Documents.Document_ID) FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID   WHERE Templates.Template_Type_Code = 'PPT'
SELECT COUNT(DISTINCT Documents.Document_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE LOWER(Ref_Template_Types.Template_Type_Description) = 'presentation'
SELECT T1.Template_ID, COUNT(DISTINCT T2.Document_ID) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID
SELECT Templates.Template_ID, COUNT(DISTINCT Documents.Document_ID)  FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID
SELECT SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1;
SELECT SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1;
SELECT Templates.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1
SELECT Templates.Template_ID  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1;
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IS NULL
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Template_ID IS NULL
SELECT COUNT(Template_ID) AS Template_Count FROM Templates
SELECT COUNT(Template_ID) FROM Templates
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates
SELECT DISTINCT T2.Template_Type_Code  FROM Templates AS T2
SELECT Template_Type_Code  FROM Ref_Template_Types
SELECT Templates.Template_ID  FROM Templates  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  WHERE Ref_Template_Types.Template_Type_Code IN ('PP', 'PPT')
SELECT Templates.Template_ID  FROM Templates   WHERE Templates.Template_Type_Code IN (    SELECT Ref_Template_Types.Template_Type_Code      FROM Ref_Template_Types      WHERE Ref_Template_Types.Template_Type_Code IN ('PP', 'PPT') )
SELECT count(DISTINCT Template_ID) FROM Templates WHERE Template_Type_Code IN ('CV')
SELECT COUNT(Template_ID) FROM Templates WHERE Template_Type_Code = 'CV'
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5
SELECT T1.Template_Type_Code, COUNT(T2.Template_ID)  FROM Ref_Template_Types AS T1  LEFT JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code
SELECT T1.Template_Type_Code, COUNT(T2.Template_ID)  FROM Ref_Template_Types AS T1  JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code
SELECT T1.Template_Type_Code  FROM Ref_Template_Types AS T1  JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code  ORDER BY COUNT(T2.Template_ID) DESC  LIMIT 1
SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
SELECT Template_Type_Code  FROM Ref_Template_Types  GROUP BY Template_Type_Code  HAVING COUNT(*) < 3;
SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_Type_Code HAVING COUNT(*) < 3
SELECT MIN(Version_Number), Template_Type_Code  FROM Templates GROUP BY Template_Type_Code
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Version_Number ASC LIMIT 1
SELECT Ref_Template_Types.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Data base'
SELECT Templates.Template_Type_Code  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  WHERE Documents.Document_Name = 'Data base'
SELECT Documents.Document_Name  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  WHERE Ref_Template_Types.Template_Type_Code = 'BK'
SELECT d.Document_Name  FROM Documents d  JOIN Templates t ON d.Template_ID = t.Template_ID  JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code  WHERE rtt.Template_Type_Code = 'BK'
SELECT T1.Template_Type_Code, COUNT(DISTINCT T3.Document_ID)  FROM Ref_Template_Types AS T1  LEFT JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  LEFT JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID  GROUP BY T1.Template_Type_Code
SELECT T1.Template_Type_Code, COUNT(T2.Document_ID)  FROM Ref_Template_Types AS T1  LEFT JOIN Templates AS T3 ON T1.Template_Type_Code = T3.Template_Type_Code  LEFT JOIN Documents AS T2 ON T3.Template_ID = T2.Template_ID  GROUP BY T1.Template_Type_Code
SELECT T3.Template_Type_Code FROM Templates AS T3 JOIN Documents AS T2 ON T3.Template_ID = T2.Template_ID JOIN Ref_Template_Types AS T1 ON T3.Template_Type_Code = T1.Template_Type_Code GROUP BY T3.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 INNER JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code INNER JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID GROUP BY T1.Template_Type_Code ORDER BY COUNT(T3.Template_ID) DESC LIMIT 1
SELECT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Code NOT IN (SELECT DISTINCT Template_Type_Code FROM Templates)
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IS NULL
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'
SELECT DISTINCT T1.Template_Type_Description  FROM Ref_Template_Types AS T1  JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID
SELECT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID GROUP BY T1.Template_Type_Description
SELECT
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE LOWER(Ref_Template_Types.Template_Type_Description) = 'presentation'
SELECT COUNT(*) FROM Paragraphs
SELECT COUNT(Paragraph_ID) FROM Paragraphs
SELECT COUNT(Paragraphs.Paragraph_ID)  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  WHERE Documents.Document_Name = 'Summer Show'
SELECT COUNT(Paragraphs.Paragraph_ID)   FROM Documents   JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID   WHERE Documents.Document_Name = 'Summer Show'
SELECT Paragraphs.*   FROM Paragraphs   WHERE Paragraph_Text = 'Korea';
SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%';
SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = 'Welcome to NY'
SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = 'Welcome to NY'
SELECT Paragraphs.Paragraph_Text   FROM Paragraphs JOIN Documents ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = 'Customer reviews'
SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = 'Customer reviews'
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS num_paragraphs FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID)  FROM Documents  LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID, Documents.Document_Name
SELECT DISTINCT T1.Document_ID  FROM Documents AS T1  JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID  HAVING COUNT(T2.Paragraph_ID) >= 2
SELECT Documents.Document_ID  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID  HAVING COUNT(Paragraphs.Paragraph_ID) >= 2
SELECT Document_ID, Document_Name FROM (     SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS paragraph_count     FROM Documents     JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID     GROUP BY Documents.Document_ID, Documents.Document_Name     ORDER BY paragraph_count DESC     LIMIT 1 ) AS subquery
SELECT SELECT D.Document_ID, D.Document_Name FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID, D.Document_Name ORDER BY COUNT(P.Paragraph_ID) DESC LIMIT 1;
SELECT Documents.Document_ID FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY COUNT(Paragraphs.Paragraph_ID) ASC LIMIT 1
SELECT Documents.Document_ID  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID  HAVING COUNT(Paragraphs.Paragraph_ID) = (   SELECT MIN(ParagraphCount)    FROM (     SELECT COUNT(Paragraphs.Paragraph_ID) AS ParagraphCount      FROM Paragraphs      GROUP BY Paragraphs.Document_ID   ) )
SELECT Documents.Document_ID  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID  HAVING COUNT(Paragraphs.Paragraph_ID) >= 1 AND COUNT(Paragraphs.Paragraph_ID) <= 2
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Paragraphs.Document_ID = Documents.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(DISTINCT Paragraphs.Paragraph_ID) BETWEEN 1 AND 2;
SELECT Documents.Document_ID  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  WHERE LOWER(Paragraphs.Paragraph_Text) IN ('brazil', 'ireland')
SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Paragraph_Text IN ('Brazil', 'Ireland') GROUP BY T1.Document_ID HAVING COUNT(DISTINCT T2.Paragraph_Text) = 2
SELECT COUNT(Teacher_ID) FROM teacher
SELECT COUNT(DISTINCT Teacher_ID) FROM teacher
SELECT Name FROM teacher ORDER BY Age ASC
SELECT Name FROM teacher ORDER BY Age ASC
SELECT Age, Hometown FROM teacher
SELECT Age, Hometown FROM teacher
SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District'
SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District'
SELECT teacher.Name FROM teacher WHERE teacher.Age IN (32, 33)
SELECT teacher.Name  FROM teacher  WHERE teacher.Age IN (32, 33)
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher) ORDER BY Age ASC LIMIT 1
SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
SELECT Hometown, COUNT(DISTINCT Teacher_ID) FROM teacher GROUP BY Hometown
SELECT Hometown, COUNT(Teacher_ID) FROM teacher GROUP BY Hometown
SELECT Hometown, COUNT(*) AS count FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY Hometown ORDER BY count DESC LIMIT 1
SELECT Hometown, COUNT(*) AS count  FROM teacher  GROUP BY Hometown  ORDER BY count DESC  LIMIT 1
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(DISTINCT Teacher_ID) >= 2
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(DISTINCT Teacher_ID) >= 2
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course.Course_ID = course_arrange.Course_ID;
SELECT T1.Name AS Teacher_Name, T3.Course AS Course_Name  FROM teacher AS T1  JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID  JOIN course AS T3 ON T2.Course_ID = T3.Course_ID
SELECT T1.Name, T3.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID ORDER BY T1.Name ASC
SELECT T1.Name, T3.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID ORDER BY T1.Name ASC
SELECT T1.Name  FROM teacher AS T1   JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID   JOIN course AS T3 ON T2.Course_ID = T3.Course_ID   WHERE T3.Course = 'Math'
SELECT teacher.Name  FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course.Course_ID = course_arrange.Course_ID WHERE course.Course = 'Math'
SELECT teacher.Name, COUNT(DISTINCT course_arrange.Course_ID) AS num_courses FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name
SELECT T1.Name, COUNT(T2.Course_ID)  FROM teacher AS T1  JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID  GROUP BY T1.Name
SELECT T1.Name  FROM teacher AS T1  JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID  GROUP BY T1.Teacher_ID  HAVING COUNT(DISTINCT T2.Course_ID) >= 2
SELECT T1.Name  FROM teacher AS T1  JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID  GROUP BY T1.Name  HAVING COUNT(DISTINCT T2.Course_ID) >= 2
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT DISTINCT Teacher_ID FROM course_arrange)
SELECT T1.Name FROM teacher AS T1 WHERE T1.Teacher_ID NOT IN (SELECT T2.Teacher_ID FROM course_arrange AS T2)
SELECT COUNT(*) FROM visitor WHERE Age < 30
SELECT visitor.Name  FROM visitor  WHERE visitor.Level_of_membership > 4  ORDER BY visitor.Level_of_membership DESC
SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4
SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Age DESC
SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'
SELECT m.Name FROM museum m WHERE m.Num_of_Staff > (SELECT min(m2.Num_of_Staff) FROM museum m2 WHERE m2.Open_Year > 2010)
SELECT visitor.ID, visitor.Name, visitor.Age FROM visitor WHERE visitor.ID IN (   SELECT visit.visitor_ID   FROM visit   GROUP BY visit.visitor_ID   HAVING COUNT(*) > 1 )
SELECT SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor JOIN visit ON visit.visitor_ID = visitor.ID GROUP BY visitor.ID, visitor.Name, visitor.Level_of_membership ORDER BY SUM(visit.Total_spent) DESC LIMIT 1;
SELECT museum.Museum_ID, museum.Name  FROM museum  JOIN visit ON museum.Museum_ID = visit.Museum_ID  GROUP BY museum.Museum_ID, museum.Name  ORDER BY COUNT(visit.Museum_ID) DESC  LIMIT 1
SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)
SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID ORDER BY visit.Num_of_Ticket DESC LIMIT 1
SELECT AVG(Num_of_Ticket) AS Average_Num_of_Tickets, MAX(Num_of_Ticket) AS Maximum_Num_of_Tickets FROM visit
SELECT SUM(T1.Total_spent) AS Total_Expense FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1
SELECT SELECT DISTINCT v.Name FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID JOIN museum m ON vi.Museum_ID = m.Museum_ID WHERE m.Open_Year < 2009 OR m.Open_Year > 2011 GROUP BY v.Name HAVING COUNT(DISTINCT m.Open_Year) > 1
SELECT count(*) FROM visitor WHERE ID NOT IN (SELECT visitor_ID FROM visit WHERE Museum_ID IN (SELECT Museum_ID FROM museum WHERE Open_Year > 2010));
SELECT COUNT(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008
SELECT COUNT(*) FROM players
SELECT COUNT(*) FROM players
SELECT COUNT(*) FROM matches;
SELECT COUNT(*) FROM matches
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA'
SELECT AVG(DATEDIFF(CURRENT_DATE(), players.birth_date) / 365) AS average_age FROM matches JOIN players ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id
SELECT AVG(DATEDIFF(CURRENT_DATE, loser_birth_date)) AS average_loser_age, AVG(DATEDIFF(CURRENT_DATE, winner_birth_date)) AS average_winner_age FROM matches JOIN players ON matches.loser_id = players.player_id OR matches.winner_id = players.player_id
SELECT avg(rankings.ranking)  FROM rankings  JOIN matches ON rankings.player_id = matches.winner_id
SELECT AVG(winner_rank) AS average_rank FROM matches
SELECT max(loser_rank) FROM matches
SELECT MAX(loser_rank) AS best_rank FROM matches
SELECT COUNT(DISTINCT country_code) FROM players
SELECT COUNT(DISTINCT country_code) FROM players
SELECT COUNT(DISTINCT T1.loser_name) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.loser_id
SELECT COUNT(DISTINCT loser_name) FROM matches
SELECT tourney_name  FROM matches  GROUP BY tourney_name  HAVING COUNT(*) > 10
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10
SELECT P.first_name, P.last_name FROM players AS P INNER JOIN matches AS M ON P.player_id = M.winner_id WHERE M.year IN (2013, 2016) GROUP BY P.player_id HAVING COUNT(DISTINCT M.year) = 2
SELECT T1.first_name, T1.last_name  FROM players AS T1  JOIN matches AS T2 ON T1.player_id = T2.winner_id  WHERE T2.year = 2013  AND T1.player_id IN (     SELECT T3.player_id      FROM players AS T3      JOIN matches AS T4 ON T3.player_id = T4.winner_id      WHERE T4.year = 2016 )
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016
SELECT country_code, first_name FROM players WHERE player_id IN (   SELECT winner_id   FROM matches   WHERE tourney_name = 'WTA Championships'   AND winner_id IN (     SELECT winner_id     FROM matches     WHERE tourney_name = 'Australian Open'   ) )
SELECT players.first_name, players.country_code  FROM players  INNER JOIN matches ON players.player_id = matches.winner_id  WHERE matches.tourney_name = 'WTA Championships'  AND players.player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open')
SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date ASC LIMIT 1
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1
SELECT first_name, last_name FROM players ORDER BY birth_date
SELECT CONCAT(first_name, ' ', last_name) AS full_name  FROM players  ORDER BY birth_date
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT CONCAT(first_name, ' ', last_name) AS full_name  FROM players  WHERE hand = 'L'  ORDER BY birth_date ASC
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(rankings.tours) DESC LIMIT 1
SELECT players.first_name, players.country_code  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.player_id  ORDER BY COUNT(rankings.tours) DESC  LIMIT 1
SELECT matches.year FROM matches GROUP BY matches.year ORDER BY COUNT(*) DESC LIMIT 1
SELECT year, COUNT(*) as match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1
SELECT players.first_name, players.last_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON matches.winner_id = players.player_id GROUP BY players.player_id ORDER BY COUNT(matches.match_num) DESC LIMIT 1
SELECT SELECT winner_name, SUM(winner_rank_points) AS total_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY winner_name ORDER BY total_rank_points DESC LIMIT 1;
SELECT players.first_name, players.last_name FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'Australian Open' GROUP BY players.player_id HAVING MAX(rankings.ranking_points) LIMIT 1
SELECT players.first_name, players.last_name  FROM players  JOIN rankings ON players.player_id = rankings.player_id  JOIN matches ON matches.winner_id = players.player_id  WHERE matches.tourney_name = 'Australian Open'  GROUP BY players.player_id  HAVING MAX(rankings.ranking_points)  ORDER BY rankings.ranking_points DESC  LIMIT 1
SELECT T1.first_name AS loser_first_name, T1.last_name AS loser_last_name, T2.first_name AS winner_first_name, T2.last_name AS winner_last_name FROM matches AS M JOIN players AS T1 ON M.loser_id = T1.player_id JOIN players AS T2 ON M.winner_id = T2.player_id WHERE M.minutes = (SELECT MAX(minutes) FROM matches)
SELECT T1.first_name, T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id OR T1.player_id = T2.loser_id WHERE T2.minutes = (SELECT MAX(minutes) FROM matches)
SELECT avg(rankings.ranking) AS average_ranking, players.first_name FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY players.first_name
SELECT players.first_name, AVG(rankings.ranking) AS average_ranking  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name
SELECT players.first_name, SUM(rankings.ranking_points)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name
SELECT players.first_name, sum(rankings.ranking_points)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name
SELECT country_code, COUNT(DISTINCT player_id) AS player_count FROM players GROUP BY country_code
SELECT country_code, COUNT(DISTINCT player_id) AS player_count FROM players GROUP BY country_code
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(DISTINCT player_id) > 50
SELECT country_code  FROM players  GROUP BY country_code  HAVING COUNT(*) > 50
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date
SELECT ranking_date, COUNT(DISTINCT tours) FROM rankings GROUP BY ranking_date
SELECT year, COUNT(*)  FROM matches  GROUP BY year
SELECT year, COUNT(*) AS match_count  FROM matches  GROUP BY year
SELECT players.first_name, players.last_name, rankings.ranking FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON matches.winner_id = players.player_id ORDER BY players.birth_date ASC LIMIT 3
SELECT SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY winner_age ASC LIMIT 3
SELECT COUNT(DISTINCT T1.winner_id) FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.tourney_name = 'WTA Championships' AND (T2.hand = 'L' OR T2.hand = 'l')
SELECT COUNT(DISTINCT T1.player_id) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' AND T1.hand = 'L'
SELECT T1.first_name, T1.country_code, T1.birth_date  FROM players AS T1  JOIN rankings AS T2 ON T1.player_id = T2.player_id  JOIN matches AS T3 ON T3.winner_id = T1.player_id  GROUP BY T1.player_id  ORDER BY T2.ranking_points DESC  LIMIT 1
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON matches.winner_id = players.player_id ORDER BY matches.winner_rank_points DESC LIMIT 1
SELECT hand, COUNT(*) AS num_players FROM players GROUP BY hand
SELECT hand, COUNT(DISTINCT player_id) FROM players GROUP BY hand
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'
SELECT name, tonnage FROM ship ORDER BY name DESC
SELECT name, date, result FROM battle
SELECT MAX(death.killed), MIN(death.killed)  FROM death  JOIN ship ON death.caused_by_ship_id = ship.id
SELECT AVG(injured) FROM death
SELECT death.id, death.note, death.killed, death.injured  FROM death  JOIN ship ON death.caused_by_ship_id = ship.id  WHERE ship.tonnage = 't'
SELECT name, result FROM battle WHERE bulgarian_commander <> 'Boril'
SELECT T1.id, T1.name  FROM battle AS T1  JOIN ship AS T2 ON T2.lost_in_battle = T1.id  WHERE T2.ship_type LIKE '%Brig%'
SELECT T1.id, T1.name  FROM battle AS T1  JOIN ship AS T2 ON T1.id = T2.lost_in_battle  JOIN death AS T3 ON T2.id = T3.caused_by_ship_id  WHERE T3.killed > 10  GROUP BY T1.id, T1.name
SELECT ship.id, ship.name  FROM ship  JOIN death ON death.caused_by_ship_id = ship.id  GROUP BY ship.id, ship.name  ORDER BY SUM(death.injured) DESC  LIMIT 1
SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'
SELECT COUNT(DISTINCT result) AS result_count FROM battle
SELECT count(battle.id) FROM battle LEFT JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.tonnage != '225' OR ship.tonnage IS NULL OR ship.id IS NULL
SELECT battle.name, battle.date FROM battle JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.name IN ('Lettice', 'HMS Atalanta')
SELECT name, result, bulgarian_commander  FROM battle  WHERE id NOT IN (     SELECT lost_in_battle      FROM ship      WHERE location = 'English Channel' AND lost_in_battle IS NOT NULL )
SELECT note FROM death WHERE note LIKE '%East%'
SELECT line_1, line_2  FROM Addresses
SELECT line_1, line_2 FROM Addresses
SELECT COUNT(*) FROM Courses
SELECT COUNT(course_id) FROM Courses
SELECT course_description FROM Courses WHERE course_name = 'math'
SELECT Courses.course_description FROM Courses WHERE UPPER(Courses.course_name) LIKE '%MATH%'
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
SELECT Departments.department_name, Departments.department_id  FROM Departments  JOIN Degree_Programs ON Degree_Programs.department_id = Departments.department_id GROUP BY Departments.department_id  ORDER BY COUNT(Degree_Programs.degree_program_id) DESC  LIMIT 1
SELECT department_name, department_id FROM Departments GROUP BY department_id HAVING count(*) = (   SELECT max(count_department_id)   FROM (     SELECT department_id, count(*) AS count_department_id     FROM Degree_Programs     GROUP BY department_id   ) AS subquery )
SELECT COUNT(DISTINCT T1.department_id) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id
SELECT COUNT(DISTINCT T2.department_id) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id
SELECT COUNT(DISTINCT degree_summary_name) AS count_degree_names FROM Degree_Programs
SELECT COUNT(DISTINCT degree_summary_name) AS degree_count FROM Degree_Programs
SELECT COUNT(*) FROM Degree_Programs WHERE department_id IN (SELECT department_id FROM Departments WHERE department_name = 'engineer')
SELECT count(Degree_Programs.degree_program_id)  FROM Degree_Programs  JOIN Departments ON Degree_Programs.department_id = Departments.department_id  WHERE Departments.department_name = 'engineer'
SELECT section_name, section_description FROM Sections
SELECT Sections.section_name, Sections.section_description FROM Sections JOIN Courses ON Sections.course_id = Courses.course_id
SELECT SELECT Courses.course_id, Courses.course_name FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_id, Courses.course_name HAVING COUNT(Sections.section_id) <= 2;
SELECT Courses.course_name, Courses.course_id  FROM Courses  WHERE Courses.course_id IN      (SELECT Sections.course_id      FROM Sections      GROUP BY Sections.course_id      HAVING COUNT(*) < 2)
SELECT section_name FROM Sections ORDER BY section_name DESC
SELECT section_name  FROM Sections  ORDER BY section_name DESC
SELECT T1.semester_id, T1.semester_name FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id, T1.semester_name ORDER BY COUNT(T2.student_enrolment_id) DESC LIMIT 1
SELECT Semesters.semester_name, Semesters.semester_id  FROM Semesters  JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id  GROUP BY Semesters.semester_id  HAVING COUNT(*) = (     SELECT MAX(num_students)      FROM (         SELECT semester_id, COUNT(*) AS num_students          FROM Student_Enrolment          GROUP BY semester_id     ) AS counts ) ORDER BY Semesters.semester_id;
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
SELECT Students.first_name, Students.middle_name, Students.last_name, Students.student_id FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.first_name, Students.middle_name, Students.last_name, Students.student_id HAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) = 2 AND COUNT(DISTINCT Student_Enrolment.semester_id) = 1
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id WHERE Student_Enrolment.semester_id = 1 GROUP BY Students.student_id HAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) = 2
SELECT first_name, middle_name, last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name IN ('Bachelor');
SELECT first_name, middle_name, last_name   FROM Students   JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id   JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id   WHERE Degree_Programs.degree_summary_name = 'Bachelor'
SELECT Degree_Programs.degree_summary_name, COUNT(*) AS num_students FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY Degree_Programs.degree_summary_name ORDER BY num_students DESC LIMIT 1
SELECT Degree_Programs.degree_summary_name  FROM Degree_Programs  JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id  GROUP BY Degree_Programs.degree_summary_name  ORDER BY COUNT(Student_Enrolment.student_enrolment_id) DESC  LIMIT 1
SELECT Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name ORDER BY COUNT(Student_Enrolment.student_enrolment_id) DESC LIMIT 1
SELECT degree_program_id, degree_summary_description  FROM Degree_Programs  JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id  GROUP BY degree_program_id, degree_summary_description  ORDER BY COUNT(Student_Enrolment.student_enrolment_id) DESC  LIMIT 1
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(Student_Enrolment.student_enrolment_id) AS enrollment_count FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id, Students.first_name, Students.middle_name, Students.last_name ORDER BY enrollment_count DESC LIMIT 1;
SELECT first_name, middle_name, last_name, T1.student_id, COUNT(T2.student_enrolment_id) AS enrollments FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY enrollments DESC LIMIT 1
SELECT Semesters.semester_name FROM Semesters LEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id WHERE Student_Enrolment.student_enrolment_id IS NULL
SELECT semester_name FROM Semesters LEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id WHERE Student_Enrolment.student_enrolment_id IS NULL
SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id
SELECT T1.course_name  FROM Courses AS T1  JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id;
SELECT Courses.course_name FROM Courses INNER JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(T2.student_enrolment_id) DESC LIMIT 1
SELECT last_name FROM Students  JOIN Addresses ON Students.current_address_id = Addresses.address_id  WHERE Addresses.state_province_county = 'North Carolina'  AND student_id NOT IN (SELECT student_id FROM Student_Enrolment)
SELECT Students.last_name  FROM Students   JOIN Addresses ON Students.current_address_id = Addresses.address_id  LEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  WHERE Addresses.state_province_county = 'North Carolina'   AND Student_Enrolment.student_id IS NULL
SELECT transcript_date, transcript_id  FROM Transcripts  WHERE transcript_id IN (     SELECT transcript_id      FROM Transcript_Contents      GROUP BY transcript_id      HAVING COUNT(*) >= 2 )
SELECT T1.transcript_id, T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id, T1.transcript_date HAVING COUNT(*) >= 2
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
SELECT first_name, middle_name, last_name  FROM Students  ORDER BY date_first_registered  LIMIT 1
SELECT first_name, middle_name, last_name FROM Students JOIN Transcripts ON Students.student_id = Transcripts.student_id ORDER BY Transcripts.transcript_date ASC LIMIT 1
SELECT Students.first_name  FROM Students  JOIN Addresses AS permanent ON Students.permanent_address_id = permanent.address_id  JOIN Addresses AS current ON Students.current_address_id = current.address_id  WHERE permanent.address_id <> current.address_id
SELECT first_name FROM Students JOIN Addresses AS P ON Students.permanent_address_id = P.address_id JOIN Addresses AS C ON Students.current_address_id = C.address_id WHERE P.address_id != C.address_id
SELECT address_id, line_1, line_2, line_3  FROM Addresses  WHERE address_id IN (     SELECT current_address_id      FROM Students      GROUP BY current_address_id      ORDER BY count(*) DESC      LIMIT 1 )
SELECT SELECT A.address_id, A.line_1, A.line_2 FROM Addresses A JOIN Students S ON S.current_address_id = A.address_id GROUP BY A.address_id, A.line_1, A.line_2 ORDER BY COUNT(S.student_id) DESC LIMIT 1;
SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts
SELECT AVG(transcript_date) FROM Transcripts
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
SELECT COUNT(*) FROM Transcripts
SELECT COUNT(DISTINCT transcript_id) FROM Transcripts
SELECT MAX(transcript_date) AS last_transcript_release_date FROM Transcripts
SELECT MAX(transcript_date) AS last_transcript_date FROM Transcripts
SELECT T1.student_course_id, COUNT(T1.transcript_id) AS enrollment_count  FROM Transcript_Contents AS T1  GROUP BY T1.student_course_id  ORDER BY enrollment_count DESC  LIMIT 1
SELECT student_course_id, COUNT(transcript_id) AS course_count FROM Transcript_Contents GROUP BY student_course_id ORDER BY course_count DESC LIMIT 1;
SELECT T2.transcript_date, T1.transcript_id  FROM Transcript_Contents AS T1  JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id  GROUP BY T2.transcript_date, T1.transcript_id  HAVING COUNT(*) = (     SELECT MIN(result_count)      FROM (         SELECT T3.transcript_id, COUNT(*) AS result_count          FROM Transcript_Contents AS T3          GROUP BY T3.transcript_id     ) AS subquery )
SELECT T1.transcript_date, T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_date, T1.transcript_id ORDER BY COUNT(*) ASC LIMIT 1
SELECT semester_name  FROM Semesters  WHERE semester_id IN (   SELECT semester_id    FROM Student_Enrolment    WHERE degree_program_id IN (     SELECT degree_program_id      FROM Degree_Programs      WHERE degree_summary_name = 'Master'   )    INTERSECT   SELECT semester_id    FROM Student_Enrolment    WHERE degree_program_id IN (     SELECT degree_program_id      FROM Degree_Programs      WHERE degree_summary_name = 'Bachelor'   ) )
SELECT semester_id  FROM Student_Enrolment  WHERE degree_program_id IN (     SELECT degree_program_id     FROM Degree_Programs     WHERE degree_summary_name = 'Master' )  INTERSECT  SELECT semester_id  FROM Student_Enrolment  WHERE degree_program_id IN (     SELECT degree_program_id      FROM Degree_Programs      WHERE degree_summary_name = 'Bachelor' )
SELECT COUNT(DISTINCT Students.current_address_id) FROM Students
SELECT T1.*  FROM Addresses AS T1  JOIN Students AS T2 ON T2.current_address_id = T1.address_id OR T2.permanent_address_id = T1.address_id
SELECT Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details FROM Students ORDER BY Students.last_name DESC, Students.first_name DESC
SELECT * FROM Students ORDER BY last_name DESC
SELECT Sections.* FROM Sections WHERE Sections.section_id = 'h'
SELECT section_description FROM Sections WHERE section_name = 'h'
SELECT first_name FROM Students  JOIN Addresses ON Students.permanent_address_id = Addresses.address_id  WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'
SELECT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti') OR cell_mobile_number IN ('09700166582')
SELECT Title FROM Cartoon ORDER BY Title ASC
SELECT Title FROM Cartoon ORDER BY Title ASC
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'
SELECT Title FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Directed_by = 'Ben Jones'
SELECT COUNT(DISTINCT id) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id ORDER BY Cartoon.Original_air_date;
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id ORDER BY Cartoon.Original_air_date ASC
SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti')
SELECT Title  FROM Cartoon  WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'
SELECT Country, COUNT(*) AS NumChannels FROM TV_Channel GROUP BY Country ORDER BY NumChannels DESC LIMIT 1
SELECT Country, COUNT(id) AS channel_count  FROM TV_Channel  GROUP BY Country  ORDER BY channel_count DESC  LIMIT 1
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;
SELECT Content  FROM TV_Channel  WHERE series_name = 'Sky Radio'
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'
SELECT TV_Channel.Language, COUNT(TV_Channel.id) AS Channel_Count FROM TV_Channel GROUP BY TV_Channel.Language ORDER BY Channel_Count ASC LIMIT 1
SELECT Language, COUNT(*) AS channel_count  FROM TV_Channel  GROUP BY Language  ORDER BY channel_count ASC  LIMIT 1
SELECT Language, COUNT(DISTINCT TV_Channel.id) AS num_channels FROM TV_Channel GROUP BY Language
SELECT Language, COUNT(DISTINCT id) FROM TV_Channel GROUP BY Language
SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T2.Channel = T1.id WHERE T2.Title = 'The Rise of the Blue Beetle!';
SELECT TV_Channel.series_name FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle';
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio'
SELECT Cartoon.Title  FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE TV_Channel.series_name = 'Sky Radio';
SELECT TV_series.Episode  FROM TV_series  ORDER BY TV_series.Rating DESC
SELECT TV_series.*, Cartoon.Title FROM TV_series JOIN Cartoon ON TV_series.Channel = Cartoon.Channel ORDER BY TV_series.Rating DESC
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3
SELECT TV_series.Episode, TV_series.Rating FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id ORDER BY TV_series.Rating DESC LIMIT 3
SELECT MIN(Share), MAX(Share) FROM TV_series
SELECT MAX(Share) AS Maximum_Share, MIN(Share) AS Minimum_Share FROM TV_series;
SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = 'A Love of a Lifetime'
SELECT TV_series.Air_Date  FROM Cartoon   JOIN TV_series ON Cartoon.id = TV_series.id   JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id   WHERE Cartoon.Title = 'A Love of a Lifetime'
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime"
SELECT The provided tables, columns, foreign keys, and primary keys are not sufficient to generate the SQL query for the given question. To fix the query, we need access to the tables related to the episode and its weekly rank. Please provide the schema links or additional information related to these tables so that I can assist you further.
SELECT TV_Channel.series_name, TV_Channel.Content FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = 'A Love of a Lifetime'
SELECT series_name FROM TV_series WHERE Episode = 'A Love of a Lifetime'
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
SELECT TV_series.Episode FROM TV_series  JOIN TV_Channel ON TV_series.Channel = TV_Channel.id  WHERE TV_Channel.series_name = 'Sky Radio'
SELECT Directed_by, COUNT(*) AS Count FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti', 'Michael Chang') GROUP BY Directed_by
SELECT Directed_by, COUNT(*)  FROM Cartoon  GROUP BY Directed_by
SELECT Cartoon.Production_code, TV_Channel.series_name AS Channel FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id ORDER BY Cartoon.Original_air_date DESC LIMIT 1
SELECT Production_code, Cartoon.Channel FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)
SELECT Package_Option, series_name FROM TV_Channel WHERE High_definition_TV = 1
SELECT Package_Option, series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE Hight_definition_TV = 1
SELECT Country FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';
SELECT TV_Channel.Country  FROM TV_Channel  JOIN Cartoon ON TV_Channel.id = Cartoon.Channel  WHERE Cartoon.Written_by = 'Todd Casey'
SELECT DISTINCT T1.Country FROM TV_Channel AS T1 LEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by <> 'Todd Casey' OR T2.Written_by IS NULL;
SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')
SELECT TV_Channel.series_name, TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')
SELECT TV_Channel.series_name, TV_Channel.Country  FROM TV_Channel  JOIN Cartoon ON Cartoon.Channel = TV_Channel.id   WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE language != 'English'
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> 'English'
SELECT TV_Channel.id  FROM TV_Channel  GROUP BY TV_Channel.Country  HAVING COUNT(*) > 2
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.id HAVING COUNT(*) > 2
SELECT TV_Channel.id  FROM TV_Channel  LEFT JOIN Cartoon ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Directed_by <> 'Ben Jones' OR Cartoon.Directed_by IS NULL
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones')
SELECT Package_Option  FROM TV_Channel  WHERE id NOT IN (      SELECT T1.id      FROM TV_Channel AS T1      JOIN Cartoon AS T2 ON T1.id = T2.Channel      WHERE T2.Directed_by = 'Ben Jones'      )
SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')
SELECT COUNT(DISTINCT Poker_Player_ID) FROM poker_player
SELECT COUNT(DISTINCT People_ID) FROM poker_player
SELECT poker_player.Earnings  FROM poker_player  ORDER BY Earnings DESC
SELECT poker_player.Earnings  FROM poker_player  ORDER BY poker_player.Earnings DESC
SELECT Final_Table_Made, Best_Finish FROM poker_player
SELECT Final_Table_Made, Best_Finish  FROM poker_player
SELECT AVG(Earnings) FROM poker_player
SELECT avg(Earnings) FROM poker_player
SELECT Money_Rank  FROM poker_player  WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)
SELECT poker_player.Money_Rank FROM poker_player ORDER BY poker_player.Earnings DESC LIMIT 1
SELECT MAX(Final_Table_Made)  FROM poker_player  WHERE Earnings < 200000;
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000
SELECT Name FROM people
SELECT Name FROM people
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC
SELECT T1.Name  FROM people AS T1  JOIN poker_player AS T2 ON T2.People_ID = T1.People_ID  ORDER BY T2.Final_Table_Made ASC
SELECT P.Birth_Date FROM people AS P JOIN poker_player AS PP ON P.People_ID = PP.People_ID ORDER BY PP.Earnings ASC LIMIT 1
SELECT people.Birth_Date  FROM poker_player  JOIN people ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Earnings ASC  LIMIT 1
SELECT Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1
SELECT AVG(poker_player.Earnings) AS Average_Earnings FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200
SELECT avg(poker_player.Earnings) FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  WHERE people.Height > 200
SELECT people.Name  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Earnings DESC
SELECT people.Name  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Earnings DESC
SELECT Nationality, COUNT(*)  FROM people  GROUP BY Nationality
SELECT Nationality, COUNT(*)  FROM people  GROUP BY Nationality
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
SELECT Nationality FROM people WHERE Nationality IN (   SELECT Nationality   FROM people   GROUP BY Nationality   HAVING COUNT(*) >= 2 )
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(DISTINCT People_ID) >= 2
SELECT Name, Birth_Date FROM people ORDER BY Name ASC
SELECT Name, Birth_Date FROM people ORDER BY Name ASC
SELECT Name FROM people WHERE Nationality NOT IN ('Russia')
SELECT Name FROM people WHERE Nationality NOT IN ('Russia')
SELECT Name FROM people LEFT JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Poker_Player_ID IS NULL
SELECT Name  FROM people  WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
SELECT COUNT(DISTINCT Nationality) FROM people
SELECT COUNT(DISTINCT Nationality) FROM people
SELECT COUNT(DISTINCT state) AS state_count FROM AREA_CODE_STATE
SELECT contestant_number, contestant_name  FROM CONTESTANTS  ORDER BY contestant_name DESC
SELECT vote_id, phone_number, state FROM VOTES
SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE
SELECT MAX(created) FROM VOTES WHERE state = 'CA'
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name <> 'Jessie Alloway'
SELECT DISTINCT state, created FROM VOTES
SELECT T1.contestant_number, T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number, T1.contestant_name HAVING COUNT(T2.vote_id) >= 2
SELECT contestant_number, contestant_name  FROM CONTESTANTS  WHERE contestant_number IN (   SELECT contestant_number    FROM VOTES    GROUP BY contestant_number    HAVING COUNT(*) = (     SELECT MIN(vote_count)      FROM (       SELECT contestant_number, COUNT(*) as vote_count        FROM VOTES        GROUP BY contestant_number     ) as vote_counts   ) )
SELECT COUNT(*) FROM VOTES WHERE state IN ('NY', 'CA')
SELECT count(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)
SELECT T2.area_code FROM VOTES AS T1 JOIN AREA_CODE_STATE AS T2 ON T1.state = T2.state GROUP BY T2.area_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT created, state, phone_number  FROM VOTES  JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number  WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling';
SELECT T1.area_code   FROM AREA_CODE_STATE AS T1   JOIN VOTES AS T2 ON T1.state = T2.state   JOIN CONTESTANTS AS T3 ON T2.contestant_number = T3.contestant_number   WHERE T3.contestant_name = 'Tabatha Gehling'   AND T1.area_code IN (        SELECT T1.area_code        FROM AREA_CODE_STATE AS T1        JOIN VOTES AS T2 ON T1.state = T2.state        JOIN CONTESTANTS AS T3 ON T2.contestant_number = T3.contestant_number        WHERE T3.contestant_name = 'Kelly Clauss'   )
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'
SELECT country.Name FROM country WHERE country.IndepYear > 1950
SELECT Name FROM country WHERE IndepYear > 1950
SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%'
SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%'
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Region = 'Caribbean'
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'
SELECT Continent FROM country WHERE country.Code IN (SELECT CountryCode FROM city WHERE Name = 'Anguilla')
SELECT Continent FROM country WHERE Code = (SELECT CountryCode FROM city WHERE Name = 'Anguilla')
SELECT country.Region  FROM country  JOIN city ON city.CountryCode = country.Code  WHERE city.Name = 'Kabul'
SELECT country.Region FROM country JOIN city ON city.CountryCode = country.Code WHERE city.Name = 'Kabul'
SELECT countrylanguage.Language  FROM countrylanguage  JOIN city ON city.CountryCode = countrylanguage.CountryCode  JOIN country ON country.Code = city.CountryCode  WHERE city.Name = 'Aruba'  GROUP BY countrylanguage.Language  ORDER BY SUM(countrylanguage.Percentage) DESC  LIMIT 1
SELECT T1.Language  FROM countrylanguage AS T1  JOIN country AS T2 ON T2.Code = T1.CountryCode  JOIN city AS T3 ON T3.CountryCode = T2.Code  WHERE T3.Name = 'Aruba'  GROUP BY T1.Language  ORDER BY T1.Percentage DESC  LIMIT 1
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'
SELECT country.Population, country.LifeExpectancy FROM country INNER JOIN city ON country.Code = city.CountryCode WHERE country.Name = 'Brazil'
SELECT Region, Population FROM country WHERE Name = 'Angola'
SELECT Region, Population FROM country WHERE Name = 'Angola'
SELECT AVG(LifeExpectancy) FROM country WHERE region = 'Central Africa'
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND Region = 'Central Africa'
SELECT c.Name FROM country c WHERE c.Continent = 'Asia' AND c.LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia')
SELECT Name FROM country WHERE Continent = 'Asia' AND LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia')
SELECT sum(Population) AS total_population, max(GNP) AS maximum_GNP   FROM country   WHERE Continent = 'Asia'
SELECT SUM(country.Population), MAX(country.GNP) FROM country WHERE country.Continent = 'Asia'
SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent = 'Africa' AND country.GovernmentForm = 'Republic'
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe')
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT SUM(Population) FROM city WHERE District = 'Gelderland'
SELECT SUM(Population) FROM city WHERE District = 'Gelderland'
SELECT AVG(country.GNP), SUM(country.Population)   FROM country  JOIN city ON country.Code = city.CountryCode  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.GovernmentForm = 'US Territory'
SELECT avg(GNP) AS Mean_GNP, sum(Population) AS Total_Population   FROM country   WHERE Continent = 'North America' AND GovernmentForm = 'Dependent Territory'
SELECT COUNT(DISTINCT Language) FROM countrylanguage
SELECT COUNT(DISTINCT Language) FROM countrylanguage
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE continent = 'Africa'
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE continent = 'Africa'
SELECT COUNT(DISTINCT countrylanguage.Language) AS TotalLanguages FROM country JOIN city ON country.Code = city.CountryCode JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE city.Name = 'Aruba'
SELECT COUNT(DISTINCT T3.Language) AS LanguageCount FROM city AS T2 JOIN country AS T1 ON T2.CountryCode = T1.Code JOIN countrylanguage AS T3 ON T3.CountryCode = T1.Code WHERE T2.Name = 'Aruba'
SELECT COUNT(DISTINCT countrylanguage.Language) AS OfficialLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = 'Afghanistan' AND countrylanguage.IsOfficial = 'T'
SELECT COUNT(DISTINCT Language)  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  WHERE country.Name = 'Afghanistan'  AND countrylanguage.IsOfficial = 'T'
SELECT T1.Name FROM country AS T1 JOIN (     SELECT CountryCode, COUNT(*) AS lang_count     FROM countrylanguage     GROUP BY CountryCode ) AS T2 ON T1.Code = T2.CountryCode ORDER BY T2.lang_count DESC LIMIT 1
SELECT C.Name FROM country AS C JOIN countrylanguage AS CL ON C.Code = CL.CountryCode GROUP BY C.Name ORDER BY COUNT(DISTINCT CL.Language) DESC LIMIT 1
SELECT T1.Continent, COUNT(DISTINCT T2.Language) AS LanguageCount FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY LanguageCount DESC LIMIT 1
SELECT country.Continent, COUNT(DISTINCT countrylanguage.Language) AS language_count FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Continent ORDER BY language_count DESC LIMIT 1
SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language IN ('English', 'Dutch') GROUP BY CountryCode HAVING COUNT(DISTINCT Language) = 2
SELECT COUNT(DISTINCT CountryCode) AS NumberOfNations FROM countrylanguage WHERE Language IN ('English', 'Dutch')
SELECT Name FROM country WHERE Code IN (   SELECT CountryCode FROM countrylanguage WHERE Language = 'English' OR Language = 'French' )
SELECT Name FROM country WHERE Code IN (    SELECT CountryCode    FROM countrylanguage    WHERE Language = 'English' OR Language = 'French'    GROUP BY CountryCode    HAVING COUNT(DISTINCT Language) = 2 )
SELECT Name FROM country WHERE Code IN (     SELECT CountryCode     FROM countrylanguage     WHERE Language IN ('English', 'French')     AND IsOfficial = 'T'     GROUP BY CountryCode     HAVING COUNT(DISTINCT Language) = 2 )
SELECT country.Name  FROM countrylanguage  JOIN country ON country.Code = countrylanguage.CountryCode  WHERE (countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T')     OR (countrylanguage.Language = 'French' AND countrylanguage.IsOfficial = 'T')  GROUP BY country.Name
SELECT COUNT(DISTINCT T1.Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese'
SELECT COUNT(DISTINCT country.Continent)  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language = 'Chinese'
SELECT country.Region FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language IN ('English', 'Dutch')
SELECT DISTINCT C.Region  FROM country AS C JOIN countrylanguage AS CL ON C.Code = CL.CountryCode WHERE CL.Language IN ('Dutch', 'English')
SELECT Name FROM country WHERE Code IN (   SELECT CountryCode FROM countrylanguage WHERE Language IN ('English', 'Dutch') AND IsOfficial = 'T' )
SELECT country.Name  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch')  AND countrylanguage.IsOfficial = 'T'
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' GROUP BY countrylanguage.Language ORDER BY SUM(countrylanguage.Percentage) DESC LIMIT 1
SELECT cl.Language FROM countrylanguage AS cl JOIN country AS c ON c.Code = cl.CountryCode WHERE c.Continent = 'Asia' GROUP BY cl.Language HAVING COUNT(DISTINCT c.Code) = (     SELECT COUNT(*) AS count     FROM country AS c2     WHERE c2.Continent = 'Asia' ) ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Language  FROM countrylanguage AS T1  JOIN country AS T2 ON T1.CountryCode = T2.Code  WHERE T2.GovernmentForm = 'Republic'  GROUP BY T1.Language  HAVING COUNT(*) = 1
SELECT Language FROM countrylanguage AS CL JOIN country AS C ON CL.CountryCode = C.Code WHERE C.GovernmentForm = 'Republic' GROUP BY Language HAVING COUNT(DISTINCT CL.CountryCode) = 1
SELECT city.Name  FROM city  JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode  JOIN country ON city.CountryCode = country.Code  WHERE countrylanguage.Language = 'English'  GROUP BY city.Name  HAVING MAX(city.Population)  ORDER BY city.Population DESC  LIMIT 1
SELECT city.Name, MAX(city.Population) AS Population  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language = 'English'  GROUP BY city.Name  ORDER BY Population DESC  LIMIT 1
SELECT Name, Population, LifeExpectancy FROM country WHERE SurfaceArea = (     SELECT MAX(SurfaceArea)     FROM country     WHERE Continent = 'Asia' ) AND Continent = 'Asia' ORDER BY Population DESC LIMIT 1
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = 'Asia' ORDER BY country.SurfaceArea DESC LIMIT 1
SELECT avg(LifeExpectancy) FROM country WHERE Code NOT IN (   SELECT CountryCode FROM countrylanguage WHERE Language <> 'English' AND IsOfficial = 'T' )
SELECT AVG(LifeExpectancy) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language <> 'English' AND countrylanguage.IsOfficial = 'F'
SELECT SUM(Population) AS TotalPopulation FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language IN ('Dutch', 'Papiamento', 'Spanish', 'Balochi', 'Dari', 'Pashto', 'Turkmenian', 'Uzbek', 'Ambo') AND IsOfficial = 1)
SELECT SUM(Population) AS TotalPopulation FROM country WHERE Code NOT IN (SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language = 'English')
SELECT countrylanguage.Language  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.HeadOfState = 'Beatrix'  AND countrylanguage.IsOfficial = 'T'
SELECT T2.Language  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  WHERE T1.HeadOfState = 'Beatrix'  AND T2.IsOfficial = 'T'
SELECT COUNT(DISTINCT countrylanguage.Language)   FROM country   JOIN countrylanguage ON country.Code = countrylanguage.CountryCode   WHERE country.IndepYear < 1930 AND countrylanguage.IsOfficial = 'T'
SELECT count(DISTINCT countrylanguage.Language) AS TotalDistinctLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 1930
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')
SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')
SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')
SELECT Name FROM country WHERE Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa') AND Continent = 'Asia'
SELECT country.Name FROM country WHERE country.Continent = 'Asia' AND country.Population > (     SELECT MAX(country.Population)     FROM country     WHERE country.Continent = 'Africa' )
SELECT Code FROM country WHERE Code NOT IN (SELECT DISTINCT CountryCode FROM countrylanguage WHERE UPPER(Language) <> 'ENGLISH')
SELECT Code FROM country WHERE Code NOT IN (   SELECT CountryCode FROM countrylanguage WHERE LOWER(Language) = 'english' )
SELECT DISTINCT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language <> 'English'
SELECT Code  FROM country  WHERE Code IN (     SELECT CountryCode      FROM countrylanguage      WHERE Language <> 'English' );
SELECT Code FROM country WHERE Code NOT IN (     SELECT CountryCode     FROM countrylanguage     WHERE Language = 'English' ) AND GovernmentForm NOT LIKE '%Republic%'
SELECT Code FROM country   WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')   AND GovernmentForm NOT LIKE '%Republic%'
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Europe' AND countrylanguage.Language <> 'English' AND countrylanguage.IsOfficial = 'F'
SELECT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.Continent = 'Europe'  AND countrylanguage.Language <> 'English'  AND countrylanguage.IsOfficial = 'F'
SELECT DISTINCT city.Name  FROM city  JOIN country ON country.Code = city.CountryCode  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.Continent = 'Asia'  AND countrylanguage.Language = 'Chinese'  AND countrylanguage.IsOfficial = 1
SELECT DISTINCT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode  WHERE country.Continent = 'Asia'  AND countrylanguage.Language = 'Chinese'  AND countrylanguage.IsOfficial = 'T'
SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1
SELECT country.Name, country.IndepYear, country.SurfaceArea  FROM country  WHERE country.Population = (   SELECT MIN(country.Population)    FROM country )
SELECT Population, Name, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);
SELECT Name, Population, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)
SELECT SELECT country.Name, COUNT(countrylanguage.Language) AS LanguageCount FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING LanguageCount >= 3;
SELECT T1.Name, COUNT(DISTINCT T2.Language)  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  GROUP BY T1.Name  HAVING COUNT(DISTINCT T2.Language) > 2
SELECT district, COUNT(*)  FROM city  WHERE population > (SELECT AVG(population) FROM city)  GROUP BY district
SELECT country.Code, city.District, COUNT(city.Name) FROM city JOIN country ON city.CountryCode = country.Code GROUP BY city.District HAVING city.Population > (SELECT AVG(city.Population) FROM city)
SELECT GovernmentForm, SUM(Population) AS TotalPopulation  FROM country  GROUP BY GovernmentForm  HAVING AVG(LifeExpectancy) > 72;
SELECT GovernmentForm, SUM(Population)  FROM country  GROUP BY GovernmentForm  HAVING AVG(LifeExpectancy) > 72;
SELECT continent, AVG(LifeExpectancy) AS AverageLifeExpectancy, SUM(Population) AS TotalPopulation FROM country GROUP BY continent HAVING AVG(LifeExpectancy) < 72
SELECT country.continent, SUM(country.population), AVG(country.lifeexpectancy) FROM country GROUP BY country.continent HAVING AVG(country.lifeexpectancy) < 72
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
SELECT country.Name FROM country ORDER BY country.Population DESC LIMIT 3
SELECT Name  FROM country  ORDER BY Population DESC  LIMIT 3
SELECT Name FROM country ORDER BY Population ASC LIMIT 3
SELECT Name FROM country ORDER BY Population ASC LIMIT 3
SELECT COUNT(DISTINCT Code) FROM country WHERE continent = 'Asia'
SELECT COUNT(*) FROM country WHERE continent = 'Asia'
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000
SELECT country.Name  FROM country  WHERE country.Continent = 'Europe' AND country.Population = 80000;
SELECT sum(Population) AS TotalPopulation, avg(SurfaceArea) AS AverageArea  FROM country  WHERE Continent = 'North America'  AND SurfaceArea > 3000;
SELECT sum(country.Population) AS total_population, avg(country.SurfaceArea) AS average_surface_area  FROM country  JOIN city ON city.CountryCode = country.Code  WHERE country.Continent = 'North America' AND country.SurfaceArea > 3000 GROUP BY country.Code;
SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000
SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000
SELECT Language  FROM countrylanguage  GROUP BY Language  HAVING COUNT(*) = (     SELECT MAX(language_count)      FROM (         SELECT COUNT(*) AS language_count          FROM countrylanguage          GROUP BY Language     ) AS counts ) ORDER BY language_count DESC LIMIT 1
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1
SELECT T2.Name, T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Percentage = (     SELECT MAX(cl.Percentage)     FROM countrylanguage AS cl     WHERE cl.CountryCode = T2.Code ) GROUP BY T2.Name
SELECT T1.Code, T2.Language  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  GROUP BY T1.Code  HAVING T2.Percentage = (SELECT MAX(Percentage)                          FROM countrylanguage                          WHERE CountryCode = T1.Code)
SELECT COUNT(DISTINCT country.Code) FROM countrylanguage   JOIN country ON country.Code = countrylanguage.CountryCode   WHERE countrylanguage.Language = 'Spanish'   AND countrylanguage.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')
SELECT COUNT(DISTINCT T1.Code)  FROM country AS T1   JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode   WHERE T2.Language = 'Spanish'  AND T2.IsOfficial = 'T'
SELECT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Spanish' GROUP BY country.Code HAVING MAX(countrylanguage.Percentage) = (     SELECT MAX(countrylanguage.Percentage)      FROM countrylanguage      WHERE countrylanguage.Language = 'Spanish' ) LIMIT 1
SELECT country.Code  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  WHERE countrylanguage.Language = 'Spanish'  AND countrylanguage.Percentage > 50
SELECT COUNT(Conductor_ID) FROM conductor
SELECT COUNT(DISTINCT Conductor_ID) FROM conductor
SELECT Name FROM conductor ORDER BY Age ASC
SELECT Name FROM conductor ORDER BY Age ASC
SELECT Name FROM conductor WHERE Nationality != 'USA'
SELECT Name FROM conductor WHERE Nationality NOT IN ('USA')
SELECT orchestra.Record_Company  FROM orchestra  ORDER BY orchestra.Year_of_Founded DESC
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
SELECT AVG(Attendance) FROM show
SELECT AVG(Attendance) AS Average_Attendance FROM show
SELECT MAX(Share) AS Maximum_Share, MIN(Share) AS Minimum_Share  FROM performance  WHERE Type != 'Live final'
SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM performance WHERE Type <> 'Live final'
SELECT COUNT(DISTINCT Nationality) AS Total_Nationalities FROM conductor
SELECT COUNT(DISTINCT Nationality) AS Num_Nationalities FROM conductor
SELECT conductor.Name  FROM conductor  ORDER BY conductor.Year_of_Work DESC
SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
SELECT Name, COUNT(Year_of_Work) AS WorkYears FROM conductor GROUP BY Name ORDER BY WorkYears DESC LIMIT 1
SELECT Name, Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID
SELECT T1.Name, T2.Orchestra  FROM conductor AS T1  JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID
SELECT SELECT conductor.Name FROM conductor INNER JOIN orchestra ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Name HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1;
SELECT Name FROM conductor GROUP BY Name HAVING COUNT(DISTINCT Orchestra_ID) > 1
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Name ORDER BY COUNT(T2.Orchestra_ID) DESC LIMIT 1
SELECT Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY COUNT(orchestra.Orchestra_ID) DESC LIMIT 1
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008;
SELECT Name FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS num_orchestras FROM orchestra GROUP BY Record_Company
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS num_orchestras FROM orchestra GROUP BY Record_Company
SELECT Major_Record_Format, COUNT(*) AS count  FROM orchestra  GROUP BY Major_Record_Format  ORDER BY count ASC
SELECT Major_Record_Format, COUNT(*) as Frequency  FROM orchestra  WHERE Major_Record_Format IS NOT NULL GROUP BY Major_Record_Format  ORDER BY Frequency DESC
SELECT Record_Company, COUNT(*) AS Num_Orchestras FROM orchestra GROUP BY Record_Company ORDER BY Num_Orchestras DESC LIMIT 1
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS Orchestra_Count FROM orchestra GROUP BY Record_Company HAVING COUNT(DISTINCT Orchestra_ID) = (     SELECT MAX(Orchestra_Count)     FROM (         SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS Orchestra_Count         FROM orchestra         GROUP BY Record_Company     ) AS counts )
SELECT Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003
SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded > 2003
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');
SELECT DISTINCT Year_of_Founded FROM orchestra JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID GROUP BY Year_of_Founded HAVING COUNT(DISTINCT performance.Performance_ID) > 1
SELECT Year_of_Founded FROM orchestra  WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance                         GROUP BY Orchestra_ID                         HAVING COUNT(*) > 1)
SELECT COUNT(ID) FROM Highschooler
SELECT COUNT(*) FROM Highschooler
SELECT name, grade  FROM Highschooler
SELECT name, grade FROM Highschooler
SELECT grade FROM Highschooler
SELECT grade FROM Highschooler
SELECT grade FROM Highschooler WHERE name = 'Kyle'
SELECT grade FROM Highschooler WHERE name = 'Kyle'
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10
SELECT name FROM Highschooler WHERE grade = 10
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.name = 'Kyle'
SELECT Highschooler.ID FROM Highschooler WHERE name = 'Kyle'
SELECT COUNT(DISTINCT ID) FROM Highschooler WHERE grade IN (9, 10)
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade
SELECT grade, COUNT(DISTINCT ID) FROM Highschooler GROUP BY grade
SELECT grade, COUNT(*) AS count  FROM Highschooler  GROUP BY grade  ORDER BY count DESC  LIMIT 1
SELECT grade, COUNT(*) as count FROM Highschooler GROUP BY grade ORDER BY count DESC LIMIT 1
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4
SELECT T1.ID, COUNT(DISTINCT T2.friend_id)  FROM Highschooler AS T1  JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.ID
SELECT Highschooler.ID, COUNT(Friend.friend_id) AS friend_count FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID
SELECT T1.name, COUNT(DISTINCT T2.friend_id)  FROM Highschooler AS T1  JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.name
SELECT T1.name, COUNT(T2.friend_id)  FROM Highschooler AS T1  LEFT JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.name
SELECT T1.name  FROM Highschooler AS T1  JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.ID  ORDER BY COUNT(T2.friend_id) DESC  LIMIT 1
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID ORDER BY COUNT(DISTINCT T2.friend_id) DESC LIMIT 1
SELECT T1.name  FROM Highschooler AS T1  WHERE T1.ID IN (SELECT friend_id                  FROM Friend                  GROUP BY friend_id                  HAVING COUNT(student_id) >= 3)
SELECT Highschooler.name  FROM Highschooler  JOIN Friend ON Highschooler.ID = Friend.student_id  GROUP BY Highschooler.ID, Highschooler.name  HAVING COUNT(Friend.friend_id) >= 3
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id JOIN Highschooler AS T3 ON T2.student_id = T3.ID WHERE T3.name = 'Kyle'
SELECT H2.name FROM Highschooler AS H1 JOIN Friend AS F ON H1.ID = F.friend_id JOIN Highschooler AS H2 ON F.student_id = H2.ID WHERE H1.name = 'Kyle';
SELECT COUNT(*) FROM Friend   JOIN Highschooler ON Friend.friend_id = Highschooler.ID   WHERE Highschooler.name = 'Kyle'
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT Highschooler.ID FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.student_id IS NULL GROUP BY Highschooler.ID
SELECT Highschooler.ID  FROM Highschooler  LEFT JOIN Friend ON Highschooler.ID = Friend.student_id  WHERE Friend.friend_id IS NULL
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT Highschooler.name  FROM Highschooler  WHERE Highschooler.ID NOT IN (     SELECT Friend.student_id      FROM Friend )
SELECT DISTINCT HS.ID  FROM Highschooler AS HS  JOIN Friend AS F ON HS.ID = F.student_id  JOIN Likes AS L ON HS.ID = L.student_id  WHERE HS.ID IN (SELECT friend_id FROM Friend)  AND HS.ID IN (SELECT liked_id FROM Likes)
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.ID IN (SELECT Friend.student_id FROM Friend) AND Highschooler.ID IN (SELECT Likes.student_id FROM Likes)
SELECT name FROM Highschooler WHERE ID IN (   SELECT student_id   FROM Friend ) AND ID IN (   SELECT liked_id   FROM Likes )
SELECT DISTINCT H1.name  FROM Highschooler AS H1  JOIN Friend AS F1 ON H1.ID = F1.student_id  JOIN Likes AS L1 ON H1.ID = L1.student_id  JOIN Likes AS L2 ON H1.ID = L2.liked_id
SELECT Highschooler.ID, COUNT(Likes.*) AS like_count  FROM Highschooler  LEFT JOIN Likes ON Highschooler.ID = Likes.student_id  GROUP BY Highschooler.ID
SELECT student_id, COUNT(*) AS num_likes FROM Likes GROUP BY student_id
SELECT Highschooler.name, COUNT(Likes.student_id) AS num_likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name
SELECT T1.name, COUNT(T2.liked_id)  FROM Highschooler AS T1  JOIN Likes AS T2 ON T1.ID = T2.student_id  GROUP BY T1.ID, T1.name
SELECT T1.name FROM Highschooler AS T1 ORDER BY (SELECT COUNT(*) FROM Likes WHERE Likes.student_id = T1.ID) DESC LIMIT 1
SELECT T1.name  FROM Highschooler AS T1  WHERE T1.ID = (   SELECT T2.student_id    FROM Likes AS T2    GROUP BY T2.student_id    ORDER BY count(*) DESC    LIMIT 1 )
SELECT T1.name FROM Highschooler AS T1 JOIN Likes ON Likes.student_id = T1.ID GROUP BY T1.ID HAVING COUNT(Likes.liked_id) >= 2
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name HAVING count(*) >= 2
SELECT Highschooler.name  FROM Highschooler  JOIN Friend ON Highschooler.ID = Friend.student_id  GROUP BY Highschooler.ID  HAVING Highschooler.grade > 5 AND COUNT(DISTINCT Friend.friend_id) >= 2
SELECT name FROM Highschooler WHERE grade > 5   AND ID IN (     SELECT student_id     FROM Friend     GROUP BY student_id     HAVING count(*) >= 2   )
SELECT COUNT(*) FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID WHERE Highschooler.name = 'Kyle'
SELECT COUNT(*) FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID WHERE Highschooler.name = 'Kyle' AND Highschooler.name = 'Kyle'
SELECT AVG(T1.grade)  FROM Highschooler AS T1  WHERE T1.ID IN (     SELECT DISTINCT T2.student_id      FROM Friend AS T2 )
SELECT AVG(grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id
SELECT MIN(grade) AS minimum_grade FROM Highschooler WHERE ID NOT IN (     SELECT student_id     FROM Friend )
SELECT min(grade)  FROM Highschooler  WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT state FROM Owners WHERE state IN (     SELECT state     FROM Professionals )
SELECT state  FROM Owners  WHERE state IN (     SELECT state      FROM Professionals )
SELECT AVG(Dogs.age) AS average_age FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
SELECT avg(age) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana'    OR professional_id IN (       SELECT professional_id       FROM Treatments       GROUP BY professional_id       HAVING COUNT(*) > 2    )
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state IN ('Indiana', 'Connecticut', 'Wisconsin', 'Mississippi', 'Hawaii', 'NewMexico', 'NorthCarolina', 'SouthCarolina', 'California', 'Alabama') OR professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) > 2 )
SELECT Dogs.name FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.name HAVING COALESCE(SUM(Treatments.cost_of_treatment), 0) <= 1000
SELECT D.name FROM Dogs AS D LEFT JOIN Treatments AS T ON D.dog_id = T.dog_id LEFT JOIN Owners AS O ON D.owner_id = O.owner_id GROUP BY D.dog_id, D.name HAVING COALESCE(SUM(T.cost_of_treatment), 0) <= 1000
SELECT Owners.first_name, Professionals.first_name FROM Owners LEFT JOIN Dogs ON Owners.first_name = Dogs.name LEFT JOIN Professionals ON Owners.first_name = Professionals.first_name WHERE Dogs.name IS NULL
SELECT first_name FROM (   SELECT first_name   FROM Owners   UNION   SELECT first_name   FROM Professionals ) AS all_names WHERE first_name NOT IN (   SELECT DISTINCT name   FROM Dogs )
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id GROUP BY Owners.owner_id ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1
SELECT professional_id, role_code, first_name FROM Professionals GROUP BY professional_id, role_code, first_name HAVING COUNT(*) >= 2
SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (     SELECT professional_id     FROM Treatments     GROUP BY professional_id     HAVING COUNT(*) >= 2 )
SELECT breed_name FROM Breeds WHERE breed_code IN (     SELECT breed_code     FROM Dogs     GROUP BY breed_code     HAVING count(*) = (         SELECT max(dog_count)         FROM (             SELECT breed_code, count(*) AS dog_count             FROM Dogs             GROUP BY breed_code         ) AS dog_counts     ) )
SELECT breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY Breeds.breed_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id ORDER BY COUNT(Treatments.treatment_id) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id JOIN Treatments ON Treatments.dog_id = Dogs.dog_id JOIN Charges ON Charges.charge_id = Treatments.charge_id GROUP BY Owners.owner_id, Owners.last_name ORDER BY SUM(Charges.charge_amount) DESC LIMIT 1;
SELECT Treatment_Types.treatment_type_description  FROM Treatment_Types  JOIN Treatments ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code  GROUP BY Treatment_Types.treatment_type_code  ORDER BY SUM(Treatments.cost_of_treatment) ASC  LIMIT 1
SELECT T1.treatment_type_description  FROM Treatment_Types AS T1  JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code  GROUP BY T1.treatment_type_description  ORDER BY SUM(T2.cost_of_treatment) ASC  LIMIT 1
SELECT Owners.owner_id, Owners.zip_code  FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Charges ON Dogs.charge_id = Charges.charge_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Charges.charge_amount) DESC LIMIT 1
SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id JOIN Professionals AS T4 ON T3.professional_id = T4.professional_id GROUP BY T1.owner_id, T1.zip_code ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1;
SELECT T1.professional_id, T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(DISTINCT T2.treatment_type_code) >= 2
SELECT T1.professional_id, T1.cell_number  FROM Professionals AS T1  JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T1.professional_id  HAVING COUNT(DISTINCT T2.treatment_type_code) >= 2.
SELECT first_name, last_name FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   WHERE cost_of_treatment < (     SELECT AVG(cost_of_treatment)     FROM Treatments   ) )
SELECT first_name, last_name FROM Professionals WHERE professional_id IN (     SELECT professional_id     FROM Treatments     WHERE cost_of_treatment < (         SELECT AVG(cost_of_treatment)         FROM Treatments     ) )
SELECT Treatments.date_of_treatment, Professionals.first_name  FROM Treatments  JOIN Professionals ON Treatments.professional_id = Professionals.professional_id
SELECT date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id
SELECT T1.cost_of_treatment, T2.treatment_type_description FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT first_name, last_name, size_description FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code
SELECT T1.first_name, T1.last_name, T4.size_description FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Sizes AS T4 ON T2.size_code = T4.size_code;
SELECT Owners.first_name, Dogs.name  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT T1.first_name, T2.name  FROM Owners AS T1  JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id
SELECT D.name, T.date_of_treatment FROM Dogs AS D JOIN Breeds AS B ON D.breed_code = B.breed_code JOIN Treatments AS T ON T.dog_id = D.dog_id WHERE B.breed_code = (     SELECT breed_code     FROM Breeds     GROUP BY breed_code     ORDER BY COUNT(*) ASC     LIMIT 1 )
SELECT Dogs.name, Treatments.date_of_treatment  FROM Dogs  JOIN Treatments ON Dogs.dog_id = Treatments.dog_id  JOIN Breeds ON Dogs.breed_code = Breeds.breed_code  WHERE Breeds.breed_name IN ('Eskimo', 'Husky', 'Bulldog');
SELECT Owners.first_name, Dogs.name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Owners.state = 'Virginia'
SELECT T1.first_name, T2.name   FROM Owners AS T1   JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id   WHERE T1.state = 'Virginia'
SELECT date_arrived, date_departed  FROM Dogs  JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
SELECT date_arrived, date_departed FROM Dogs JOIN Treatments ON Treatments.dog_id = Dogs.dog_id
SELECT last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY age LIMIT 1
SELECT last_name FROM Owners WHERE owner_id = (   SELECT owner_id   FROM Dogs   WHERE date_of_birth = (     SELECT MIN(date_of_birth)     FROM Dogs   ) ) LIMIT 1;
SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin')
SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin')
SELECT date_arrived, date_departed  FROM Dogs
SELECT date_arrived, date_departed  FROM Dogs
SELECT COUNT(DISTINCT T2.dog_id) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id
SELECT COUNT(DISTINCT Treatments.dog_id) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
SELECT COUNT(DISTINCT T1.professional_id) FROM Professionals AS T1 JOIN Treatments AS T2 ON T2.professional_id = T1.professional_id
SELECT count(DISTINCT Professionals.professional_id) AS num_professionals FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id;
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';
SELECT COUNT(*)  FROM Dogs  WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(dog_id) AS dog_count FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
SELECT Treatments.cost_of_treatment  FROM Treatments  ORDER BY Treatments.date_of_treatment DESC  LIMIT 1
SELECT COUNT(Dogs.dog_id) FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.dog_id IS NULL
SELECT COUNT(DISTINCT Dogs.dog_id) FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.dog_id IS NULL
SELECT COUNT(owner_id) AS owner_count FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs)
SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs WHERE abandoned_yn = 'N' AND date_departed IS NULL)
SELECT count(T1.professional_id) FROM Professionals AS T1 LEFT JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.professional_id IS NULL GROUP BY T1.professional_id
SELECT COUNT(professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1
SELECT AVG(age) FROM Dogs
SELECT AVG(age) FROM Dogs
SELECT MAX(age) AS oldest_age FROM Dogs
SELECT MAX(age) AS oldest_age FROM Dogs
SELECT charge_type, charge_amount FROM Charges
SELECT charge_type, charge_amount FROM Charges
SELECT charge_type, MAX(charge_amount) FROM Charges
SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1
SELECT email_address, cell_number, home_phone FROM Professionals
SELECT email_address, cell_number, home_phone  FROM Professionals
SELECT Breeds.breed_name, Sizes.size_description  FROM Breeds  JOIN Dogs ON Dogs.breed_code = Breeds.breed_code  JOIN Sizes ON Dogs.size_code = Sizes.size_code GROUP BY Breeds.breed_name, Sizes.size_description
SELECT SELECT DISTINCT Dogs.breed_code, Dogs.size_code FROM Dogs
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Treatments.professional_id = Professionals.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
SELECT professionals.first_name, treatment_types.treatment_type_description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT COUNT(*) FROM singer
SELECT COUNT(*) FROM singer
SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions ASC
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
SELECT Birth_Year, Citizenship FROM singer
SELECT Birth_Year, Citizenship FROM singer
SELECT Name FROM singer WHERE Citizenship != 'France'
SELECT Name FROM singer WHERE Citizenship <> 'France'
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949
SELECT Name  FROM singer  WHERE Birth_Year = 1948 OR Birth_Year = 1949
SELECT singer.Name  FROM singer  ORDER BY singer.Net_Worth_Millions DESC  LIMIT 1
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship
SELECT Citizenship, COUNT(DISTINCT Singer_ID) FROM singer GROUP BY Citizenship
SELECT Citizenship, COUNT(*) AS Count  FROM singer  GROUP BY Citizenship  ORDER BY Count DESC  LIMIT 1
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1
SELECT Citizenship, MAX(Net_Worth_Millions)  FROM singer  GROUP BY Citizenship
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID
SELECT Title, Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID
SELECT DISTINCT T1.Name  FROM singer AS T1  JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  WHERE T2.Sales > 300000
SELECT Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Sales > 300000
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1
SELECT T1.Name, SUM(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name
SELECT T1.Name, SUM(T2.Sales)  FROM singer AS T1  JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Name
SELECT Name  FROM singer  WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song)
SELECT DISTINCT Citizenship  FROM singer  WHERE Birth_Year < 1945 OR Birth_Year > 1955
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955
SELECT COUNT(*) AS total_available_features FROM Other_Available_Features
SELECT Ref_Feature_Types.feature_type_name  FROM Ref_Feature_Types  JOIN Other_Available_Features ON Ref_Feature_Types.feature_type_code = Other_Available_Features.feature_type_code  WHERE Other_Available_Features.feature_name = 'AirCon'
SELECT 
SELECT Properties.property_name  FROM Properties   JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code   WHERE (Ref_Property_Types.property_type_description = 'House' OR Ref_Property_Types.property_type_description = 'Apartment')   AND room_count > 1
