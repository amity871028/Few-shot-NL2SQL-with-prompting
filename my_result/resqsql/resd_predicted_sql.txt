SELECT count(*) FROM singer
SELECT COUNT(DISTINCT Singer_ID) FROM singer
SELECT name, country, age  FROM singer  ORDER BY age DESC
SELECT singer.Name, singer.Country, singer.Age FROM singer ORDER BY singer.Age DESC
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'
SELECT singer.Name, singer.Song_release_year FROM singer WHERE singer.Age = (   SELECT MIN(singer.Age)   FROM singer )
SELECT s.name, s.song_release_year  FROM singer AS s WHERE s.age = (SELECT MIN(age) FROM singer)
SELECT DISTINCT country FROM singer WHERE Age > 20
SELECT DISTINCT Country  FROM singer  WHERE Age > 20
SELECT country, COUNT(*)  FROM singer  GROUP BY country
SELECT COUNT(*) AS Singer_Count, Country FROM singer GROUP BY Country
SELECT song_name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)
SELECT s.song_Name  FROM singer s WHERE s.Age > (SELECT AVG(singer.Age) FROM singer)
SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;
SELECT max(Capacity), avg(Capacity) FROM stadium
SELECT AVG(Capacity), MAX(Capacity) FROM stadium
SELECT name, capacity  FROM stadium  WHERE average = (SELECT MAX(average) FROM stadium)
SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium)
SELECT count(DISTINCT concert_ID) FROM concert WHERE Year IN (2014, 2015)
SELECT count(concert_ID) FROM concert WHERE Year = 2014 OR Year = 2015
SELECT stadium.Name, COUNT(concert.concert_ID)  FROM stadium  JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID  GROUP BY stadium.Name
SELECT T2.Name, COUNT(T1.concert_ID)  FROM concert AS T1  JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID  GROUP BY T2.Name
SELECT stadium.name, stadium.capacity  FROM stadium  JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID  WHERE concert.Year >= 2014  GROUP BY stadium.name, stadium.capacity  ORDER BY COUNT(concert.concert_ID) DESC  LIMIT 1
SELECT name, capacity  FROM stadium  WHERE stadium_id = (   SELECT stadium_id    FROM concert    WHERE year > 2013    GROUP BY stadium_id    ORDER BY COUNT(*) DESC    LIMIT 1 )
SELECT concert.year FROM concert GROUP BY concert.year ORDER BY COUNT(*) DESC LIMIT 1
SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1
SELECT name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
SELECT DISTINCT Country  FROM singer  WHERE Age > 40     AND Country IN (       SELECT Country        FROM singer        WHERE Age < 30    )
SELECT DISTINCT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014)
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE Year = 2014)
SELECT concert_name, theme, COUNT(singer_id) FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert_name, theme
SELECT concert.concert_Name, concert.Theme, COUNT(singer.Singer_ID) AS num_singers FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_Name, concert.Theme
SELECT T2.Name, COUNT(T1.concert_ID)  FROM singer_in_concert AS T1  JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Name
SELECT T1.Name, COUNT(T2.concert_ID) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name
SELECT DISTINCT T3.Name  FROM singer_in_concert AS T1  JOIN concert AS T2 ON T1.concert_ID = T2.concert_ID  JOIN singer AS T3 ON T1.Singer_ID = T3.Singer_ID  WHERE T2.Year = 2014
SELECT T1.Name FROM singer AS T1  JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID  JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID  WHERE T3.Year = 2014
SELECT name, country FROM singer WHERE Song_Name LIKE '%Hey%'
SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%'
SELECT T2.Name, T2.Location FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T1.Year = 2014 AND T1.Stadium_ID IN (     SELECT Stadium_ID     FROM concert     WHERE Year = 2015 ) GROUP BY T2.Name, T2.Location
SELECT name, location  FROM stadium  WHERE stadium_id IN (     SELECT stadium_id      FROM concert      WHERE year IN (2014, 2015) )  GROUP BY stadium_id  HAVING COUNT(DISTINCT year) > 1
SELECT count(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)
SELECT COUNT(DISTINCT concert_ID) AS Number_of_Concerts FROM concert WHERE Stadium_ID = (   SELECT Stadium_ID   FROM stadium   WHERE Capacity = (     SELECT MAX(Capacity)     FROM stadium   ) )
SELECT COUNT(DISTINCT PetID) FROM Pets WHERE weight > 10
SELECT count(DISTINCT PetID) FROM Pets WHERE weight > 10
SELECT Pets.weight  FROM Pets  JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID  JOIN Student ON Has_Pet.StuID = Student.StuID  WHERE Pets.pet_type = 'dog'  ORDER BY Pets.pet_age ASC  LIMIT 1
SELECT Pets.weight FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType = 'dog' ORDER BY Pets.pet_age ASC LIMIT 1
SELECT MAX(weight) AS max_weight, pettype FROM Pets GROUP BY pettype
SELECT MAX(weight) AS max_weight, pettype FROM Pets GROUP BY pettype
SELECT COUNT(Has_Pet.PetID) FROM Has_Pet  JOIN Student ON Has_Pet.StuID = Student.StuID  WHERE Student.Age > 20
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20
SELECT COUNT(DISTINCT T3.PetID)  FROM Student AS T1  JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID  JOIN Pets AS T3 ON T2.PetID = T3.PetID  WHERE T1.Sex = 'F'  AND T3.PetType = 'dog'
SELECT count(DISTINCT pets.petid) FROM pets  JOIN has_pet ON pets.petid = has_pet.petid  JOIN student ON has_pet.stuid = student.stuid  WHERE pets.pettype = 'dog'  AND student.sex = 'female'
SELECT COUNT(DISTINCT PetType) FROM Pets
SELECT COUNT(DISTINCT PetType) FROM Pets
SELECT DISTINCT Student.FName  FROM Student  WHERE EXISTS (     SELECT 1      FROM Has_Pet      JOIN Pets ON Has_Pet.PetID = Pets.PetID      WHERE Student.StuID = Has_Pet.StuID      AND (Pets.PetType = 'cat' OR Pets.PetType = 'dog') )
SELECT fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog')
SELECT fname FROM Student WHERE StuID IN (     SELECT StuID FROM Has_Pet     WHERE PetID IN (         SELECT PetID FROM Pets         WHERE PetType IN ('cat', 'dog')         GROUP BY PetID         HAVING COUNT(*) = 2     ) )
SELECT fname FROM Student WHERE StuID IN (     SELECT StuID FROM Has_Pet WHERE PetID IN (         SELECT PetID FROM Pets WHERE PetType = 'cat'     ) ) AND StuID IN (     SELECT StuID FROM Has_Pet WHERE PetID IN (         SELECT PetID FROM Pets WHERE PetType = 'dog'     ) )
SELECT major, age  FROM Student  WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))
SELECT major, age FROM Student WHERE StuID NOT IN (     SELECT StuID     FROM Has_Pet     JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE PetType = 'cat' )
SELECT student.StuID  FROM Student  WHERE student.StuID NOT IN (     SELECT Has_Pet.StuID      FROM Has_Pet      JOIN Pets ON Has_Pet.PetID = Pets.PetID      WHERE Pets.PetType = 'cat' )
SELECT stuid FROM student WHERE stuid NOT IN (   SELECT stuid   FROM has_pet   WHERE petid IN (     SELECT petid     FROM pets     WHERE pettype = 'cat'   ) )
SELECT fname, age FROM Student WHERE StuID IN (   SELECT StuID   FROM Has_Pet   WHERE PetID IN (     SELECT PetID     FROM Pets     WHERE PetType = 'dog'   ) ) AND StuID NOT IN (   SELECT StuID   FROM Has_Pet   WHERE PetID IN (     SELECT PetID     FROM Pets     WHERE PetType = 'cat'   ) )
SELECT fname FROM Student WHERE StuID IN (     SELECT StuID FROM Has_Pet     JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE PetType = 'dog' ) AND StuID NOT IN (     SELECT StuID FROM Has_Pet     JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE PetType = 'cat' )
SELECT Pets.PetType, Pets.weight  FROM Pets  ORDER BY Pets.pet_age ASC  LIMIT 1
SELECT Pets.PetType, Pets.weight  FROM Pets ORDER BY Pets.pet_age ASC  LIMIT 1
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1
SELECT Pets.PetID, Pets.weight  FROM Pets  WHERE Pets.pet_age > 1
SELECT AVG(pet_age) AS average_age, MAX(pet_age) AS maximum_age, PetType FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID GROUP BY PetType
SELECT AVG(pet_age) AS average_age, MAX(pet_age) AS maximum_age, pet_type  FROM Pets  GROUP BY pet_type
SELECT AVG(weight) AS average_weight, petType FROM Pets GROUP BY petType
SELECT AVG(weight) AS average_weight, PetType FROM Pets GROUP BY PetType
SELECT student.FName, student.Age  FROM Student  WHERE Student.StuID IN (SELECT Has_Pet.StuID FROM Has_Pet)
SELECT DISTINCT Fname, Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID
SELECT PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.LName = 'Smith'
SELECT Pets.PetID FROM Has_Pet  JOIN Student ON Has_Pet.StuID = Student.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Student.LName = 'Smith'
SELECT COUNT(PetID) AS num_pets, StuID FROM Has_Pet GROUP BY StuID
SELECT COUNT(has_pet.petid) AS pet_count, has_pet.stuid FROM has_pet JOIN student ON student.stuid = has_pet.stuid GROUP BY has_pet.stuid
SELECT fname, sex  FROM student  WHERE StuID IN (   SELECT StuID    FROM Has_Pet    GROUP BY StuID    HAVING COUNT(*) > 1 )
SELECT fname, sex  FROM Student  WHERE StuID IN (   SELECT StuID    FROM Has_Pet    GROUP BY StuID    HAVING COUNT(*) > 1 )
SELECT student.lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND pets.pet_age = 3 ORDER BY student.stuid DESC LIMIT 1
SELECT student.lname  FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND pets.pet_age = 3 LIMIT 1;
SELECT avg(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT COUNT(*) FROM continents
SELECT count(*) FROM continents
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId)  FROM continents  JOIN countries ON continents.ContId = countries.ContinentId  GROUP BY continents.ContId, continents.Continent
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS country_count  FROM continents  JOIN countries ON continents.ContId = countries.Continent  GROUP BY continents.ContId, continents.Continent
SELECT count(*) FROM countries
SELECT COUNT(*) FROM countries
SELECT car_makers.maker, car_makers.FullName, car_makers.Id, COUNT(DISTINCT model_list.Model) AS num_models FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.Model)  FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id
SELECT model FROM cars_data ORDER BY Horsepower ASC LIMIT 1
SELECT model FROM cars_data ORDER BY Horsepower ASC LIMIT 1
SELECT model FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT model FROM model_list WHERE model_list.ModelId IN (     SELECT car_names.MakeId     FROM car_names     JOIN cars_data ON car_names.MakeId = cars_data.Id     WHERE cars_data.Weight < (         SELECT AVG(Weight)         FROM cars_data     ) )
SELECT SELECT DISTINCT Maker FROM car_makers WHERE Id IN (SELECT DISTINCT car_makers.Id FROM car_makers             JOIN car_names ON car_makers.Id = car_names.MakeId             JOIN model_list ON car_names.Model = model_list.Model             JOIN cars_data ON car_names.MakeId = cars_data.Id             WHERE cars_data.Year = 1970)
SELECT DISTINCT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Model WHERE cars_data.Year = 1970
SELECT car_names.Make, cars_data.Year  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data)
SELECT car_makers.Maker, cars_data.Year FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data)
SELECT DISTINCT cars_data.Model  FROM cars_data  JOIN car_names ON cars_data.Model = car_names.Model  JOIN model_list ON car_names.MakeId = model_list.ModelId  WHERE cars_data.Year > 1980
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Model WHERE cars_data.Year > 1980
SELECT continents.Continent, COUNT(DISTINCT car_makers.Id) AS MakerCount FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent
SELECT continents.Continent, COUNT(DISTINCT car_makers.Id) FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId, countries.CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1
SELECT COUNT(model_list.ModelId) AS ModelCount, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName
SELECT count(model_list.ModelId) , car_makers.Id , car_makers.FullName FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN car_makers ON car_names.MakeId = car_makers.Id GROUP BY car_makers.Id, car_makers.FullName
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'amc' AND car_makers.FullName = 'hornet sportabout (sw)'
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'amc hornet sportabout (sw)'
SELECT count(*) FROM car_makers  JOIN countries ON car_makers.Country = countries.CountryId  WHERE countries.CountryName = 'france'
SELECT COUNT(DISTINCT Maker) FROM car_makers  WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France')
SELECT COUNT(DISTINCT car_names.Model) FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN model_list ON car_makers.Id = model_list.Maker JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'usa'
SELECT count(DISTINCT car_names.Model) AS CarModelCount FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId WHERE countries.CountryName = 'United States'
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4
SELECT avg(MPG) FROM cars_data WHERE Cylinders = 4
SELECT min(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974
SELECT min(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974
SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId
SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN countries ON car_makers.Country = countries.CountryId
SELECT CountryName, CountryId FROM countries WHERE CountryId IN (SELECT DISTINCT Country FROM car_makers)
SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT DISTINCT countries.countryid FROM car_makers                     JOIN countries ON car_makers.country = countries.countryid)
SELECT count(*) FROM cars_data WHERE Horsepower > 150
SELECT count(*) FROM cars_data WHERE Horsepower > 150
SELECT AVG(Weight) AS Average_Weight, Year FROM cars_data GROUP BY Year
SELECT AVG(Weight) AS AverageWeight, Year FROM cars_data GROUP BY Year
SELECT countries.CountryName  FROM countries  JOIN car_makers ON countries.CountryId = car_makers.Country JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'Europe' GROUP BY countries.CountryName HAVING COUNT(car_makers.Id) >= 3
SELECT countryname  FROM countries  WHERE continent = 'Europe'  AND countryid IN (   SELECT country    FROM car_makers    GROUP BY country    HAVING count(DISTINCT id) >= 3 )
SELECT MAX(Horsepower), car_makers.Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3 GROUP BY car_makers.Maker
SELECT cars_data.Horsepower, car_makers.Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3 ORDER BY cars_data.Horsepower DESC LIMIT 1
SELECT cars_data.Model FROM cars_data ORDER BY cars_data.MPG DESC LIMIT 1
SELECT cars_data.Model FROM cars_data ORDER BY cars_data.MPG DESC LIMIT 1
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980
SELECT AVG(Edispl)  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.Maker = 'volvo'
SELECT avg(Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'volvo'
SELECT MAX(accelerate) AS max_accelerate, cylinders FROM cars_data GROUP BY cylinders
SELECT MAX(Accelerate) AS Max_Accelerate, Cylinders FROM cars_data GROUP BY Cylinders
SELECT model, COUNT(*) AS car_count FROM model_list GROUP BY model ORDER BY car_count DESC LIMIT 1
SELECT model, COUNT(DISTINCT Maker) AS num_versions FROM model_list GROUP BY model ORDER BY num_versions DESC LIMIT 1
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4
SELECT count(*) FROM cars_data WHERE Year = 1980
SELECT count(*) FROM cars_data WHERE Year = 1980
SELECT COUNT(*) FROM model_list  WHERE Maker = (SELECT Id FROM car_makers WHERE FullName = 'American Motor Company')
SELECT COUNT(*) FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE FullName = 'American Motor Company')
SELECT fullname, id FROM car_makers WHERE id IN (   SELECT Maker   FROM model_list   GROUP BY Maker   HAVING COUNT(*) > 3 )
SELECT car_makers.Maker, car_makers.Id FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker, car_makers.Id  HAVING COUNT(model_list.ModelId) > 3
SELECT DISTINCT car_names.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500
SELECT DISTINCT car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.ModelId JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500
SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight >= 3000 AND cars_data.Weight <= 4000
SELECT DISTINCT Year  FROM cars_data  WHERE weight < 4000     OR weight > 3000
SELECT cars_data.Horsepower  FROM cars_data  ORDER BY cars_data.Accelerate DESC  LIMIT 1
SELECT cars_data.Horsepower  FROM cars_data  ORDER BY cars_data.Accelerate DESC  LIMIT 1
SELECT Cylinders FROM cars_data WHERE Accelerate = (   SELECT MIN(Accelerate)   FROM cars_data   WHERE Id = (     SELECT MakeId     FROM car_names     WHERE Model = 'volvo'   ) )
SELECT cylinders FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON car_names.makeid = car_makers.id WHERE car_makers.maker = 'volvo' ORDER BY cars_data.accelerate ASC LIMIT 1
SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT COUNT(DISTINCT countries.CountryId) AS CountryCount FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.CountryId HAVING COUNT(DISTINCT car_makers.Id) > 2;
SELECT count(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING count(DISTINCT car_makers.Id) > 2
SELECT count(*) FROM cars_data WHERE Cylinders > 6
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6
SELECT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model WHERE T1.Cylinders = 4 GROUP BY T3.Model ORDER BY T1.Horsepower DESC LIMIT 1
SELECT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T1.Cylinders = 4 GROUP BY T3.Model ORDER BY T1.Horsepower DESC LIMIT 1
SELECT car_names.makeid, car_names.make  FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data)  AND cars_data.cylinders <= 3
SELECT car_names.MakeId, car_names.Make  FROM car_names  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE cars_data.Cylinders < 4  AND cars_data.Horsepower > (   SELECT MIN(Horsepower)    FROM cars_data )
SELECT MAX(MPG) AS "Maximum MPG" FROM cars_data WHERE Cylinders = 8 AND Year < 1980
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980
SELECT DISTINCT model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.ModelId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Weight < 3500 AND car_makers.FullName != 'Ford Motor Company'
SELECT DISTINCT model FROM car_names JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_makers.maker != 'Ford Motor Company' AND cars_data.weight < 3500
SELECT countryname FROM countries WHERE countryid NOT IN (   SELECT DISTINCT country   FROM car_makers )
SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT DISTINCT Country FROM car_makers)
SELECT id, maker  FROM car_makers  WHERE id IN (     SELECT maker      FROM model_list      GROUP BY maker      HAVING COUNT(DISTINCT modelid) >= 2 )  AND id IN (     SELECT maker      FROM car_names      GROUP BY maker      HAVING COUNT(DISTINCT makeid) > 3 )
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT model_list.ModelId) >= 2 AND COUNT(DISTINCT car_names.Model) > 3
SELECT countries.CountryId, countries.CountryName  FROM countries  WHERE (SELECT COUNT(DISTINCT car_makers.Maker)         FROM car_makers         WHERE car_makers.Country = countries.CountryId) > 3     OR countries.CountryId IN (SELECT car_makers.Country                                FROM car_makers                                INNER JOIN model_list ON model_list.Maker = car_makers.Id                                INNER JOIN car_names ON car_names.Model = model_list.ModelId                                WHERE car_names.Make = 'fiat')
SELECT countryid, countryname  FROM countries  WHERE countryid IN (   SELECT country    FROM car_makers    WHERE maker = 'fiat' )  OR countryid IN (   SELECT country    FROM car_makers    GROUP BY country    HAVING count(DISTINCT id) > 3 )
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways'
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'
SELECT Airline, Abbreviation  FROM airlines  WHERE Country = 'USA'
SELECT airportcode, airportname  FROM airports  WHERE city = 'Anthony'
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'
SELECT COUNT(*) FROM airlines
SELECT COUNT(*) FROM airlines
SELECT COUNT(*) FROM airports
SELECT COUNT(*) FROM airports
SELECT COUNT(*) FROM flights
SELECT count(*) AS flight_count FROM flights
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
SELECT Abbreviation FROM airlines WHERE Abbreviation = 'UAL'
SELECT COUNT(*) FROM airlines WHERE Country = 'USA'
SELECT COUNT(*) FROM airlines WHERE Country = 'USA'
SELECT City, Country FROM airports WHERE AirportName = 'Alton';
SELECT City, Country FROM airports WHERE AirportName = 'Alton';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
SELECT AirportName  FROM airports  WHERE City = 'Aberdeen'
SELECT AirportName FROM airports WHERE City = 'Aberdeen'
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'
SELECT count(*) FROM flights WHERE SourceAirport = 'APG'
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'
SELECT count(*) FROM flights WHERE DestAirport = 'ATO'
SELECT count(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT count(*)  FROM flights  WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT count(*)  FROM flights  WHERE destairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen')
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN airports AS dest ON flights.DestAirport = dest.AirportCode WHERE airports.City = 'Aberdeen' AND dest.City = 'Ashley'
SELECT count(*) FROM flights  JOIN airports ON flights.sourceairport = airports.AirportCode JOIN airports AS a2 ON flights.destairport = a2.AirportCode WHERE airports.City = 'Aberdeen' AND a2.City = 'Ashley'
SELECT count(*) FROM flights WHERE Airline = 'JetBlue Airways'
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue Airways'
SELECT COUNT(*)  FROM flights  JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = 'United Airlines'  AND flights.DestAirport = 'ASY'
SELECT count(*)  FROM flights  WHERE DestAirport = 'ASY'  AND Airline = 'United Airlines'
SELECT count(*)  FROM flights  JOIN airlines ON flights.airline = airlines.uid  JOIN airports ON flights.sourceairport = airports.AirportCode  WHERE airports.AirportCode = 'AHD'    AND airlines.Airline = 'United Airlines'
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD'
SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.Airline JOIN airports ON flights.destairport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen'
SELECT count(*) FROM flights JOIN airlines ON flights.airline = airlines.Abbreviation JOIN airports ON flights.destairport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen';
SELECT airports.City FROM airports JOIN flights ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1
SELECT airports.City  FROM airports  INNER JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.City  ORDER BY COUNT(flights.DestAirport) DESC  LIMIT 1
SELECT airports.City  FROM airports  JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1
SELECT AirportCode FROM airports GROUP BY AirportCode ORDER BY COUNT(*) DESC LIMIT 1
SELECT airports.AirportCode  FROM flights  GROUP BY flights.DestAirport  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT airports.AirportCode FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.AirportCode ORDER BY count(*) ASC LIMIT 1
SELECT airports.AirportCode  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  GROUP BY flights.DestAirport  ORDER BY COUNT(*) ASC  LIMIT 1
SELECT airline, COUNT(*) AS flight_count FROM flights GROUP BY airline ORDER BY flight_count DESC LIMIT 1
SELECT airline, COUNT(*) AS flight_count FROM flights GROUP BY airline ORDER BY flight_count DESC LIMIT 1
SELECT abbreviation, country FROM airlines GROUP BY abbreviation, country ORDER BY count(*) ASC LIMIT 1
SELECT abbreviation, country FROM airlines GROUP BY abbreviation, country ORDER BY COUNT(*) ASC LIMIT 1
SELECT DISTINCT Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD'
SELECT Airline FROM flights WHERE SourceAirport = 'AHD';
SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD'
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD'
SELECT DISTINCT A1.Airline FROM airlines A1 JOIN flights F1 ON A1.uid = F1.Airline JOIN airports AP1 ON F1.SourceAirport = AP1.AirportCode JOIN airports AP2 ON F1.DestAirport = AP2.AirportCode WHERE AP1.AirportCode = 'APG' AND AP2.AirportCode = 'CVO'
SELECT airline FROM airlines WHERE airline IN (     SELECT airline     FROM flights     WHERE sourceairport = 'APG' ) AND airline IN (     SELECT airline     FROM flights     WHERE sourceairport = 'CVO' );
SELECT airline  FROM airlines  WHERE uid IN (SELECT Airline                FROM flights                WHERE SourceAirport = 'CVO')    AND uid NOT IN (SELECT Airline                    FROM flights                    WHERE SourceAirport = 'APG')
SELECT airline  FROM airlines  WHERE uid IN (   SELECT uid    FROM flights    WHERE SourceAirport = 'CVO' )  AND airline NOT IN (   SELECT DISTINCT airline    FROM flights    JOIN airports ON flights.DestAirport = airports.AirportCode    WHERE airports.AirportCode = 'APG' )
SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10
SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10
SELECT airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline GROUP BY airline  HAVING COUNT(*) < 200
SELECT airlines.Airline  FROM airlines  INNER JOIN flights ON airlines.uid = flights.Airline  GROUP BY airlines.Airline  HAVING count(*) < 200
SELECT flights.FlightNo FROM flights  JOIN airlines ON flights.Airline = airlines.Abbreviation  WHERE airlines.Airline = 'United Airlines'
SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = 'United Airlines'
SELECT flights.FlightNo  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.AirportCode = 'APG'
SELECT flights.FlightNo  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.AirportCode = 'APG'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG'
SELECT FlightNo  FROM flights  WHERE DestAirport = 'APG'
SELECT flights.FlightNo  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen'
SELECT flights.FlightNo  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'
SELECT flights.FlightNo  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen'
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen' OR airports.City = 'Abilene'
SELECT COUNT(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City IN ('Aberdeen', 'Abilene'))
SELECT AirportName  FROM airports  WHERE AirportCode NOT IN (   SELECT SourceAirport    FROM flights )  AND AirportCode NOT IN (   SELECT DestAirport    FROM flights )
SELECT AirportName  FROM airports  LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport WHERE flights.SourceAirport IS NULL AND flights.DestAirport IS NULL
SELECT COUNT(*) FROM employee
SELECT count(Employee_ID) FROM employee
SELECT employee.Name  FROM employee  ORDER BY employee.Age ASC
SELECT employee.Name FROM employee ORDER BY employee.Age ASC
SELECT COUNT(Employee_ID) AS Employee_Count, City FROM employee GROUP BY City
SELECT COUNT(Employee_ID), City FROM employee GROUP BY City
SELECT employee.city FROM employee WHERE employee.age < 30 GROUP BY employee.city HAVING COUNT(DISTINCT employee.employee_ID) > 1
SELECT employee.City FROM employee WHERE employee.Age < 30 GROUP BY employee.City HAVING count(*) > 1
SELECT COUNT(*) AS shop_count, location FROM shop GROUP BY location
SELECT COUNT(Shop_ID) AS Shop_Count, Location FROM shop GROUP BY Location
SELECT manager_name, district FROM shop ORDER BY number_products DESC LIMIT 1
SELECT manager_name, district FROM shop ORDER BY number_products DESC LIMIT 1
SELECT MIN(Number_products), MAX(Number_products) FROM shop
SELECT MIN(Number_products), MAX(Number_products) FROM shop
SELECT name, location, district FROM shop ORDER BY number_products DESC
SELECT shop.name, shop.location, shop.district FROM shop ORDER BY shop.number_products DESC
SELECT shop.Name FROM shop WHERE shop.Number_products > (SELECT AVG(Number_products) FROM shop)
SELECT name  FROM shop  WHERE Number_products > (     SELECT AVG(Number_products)      FROM shop )
SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Employee_ID, T1.Name ORDER BY COUNT(*) DESC LIMIT 1
SELECT employee.Name FROM evaluation JOIN employee ON evaluation.Employee_ID = employee.Employee_ID GROUP BY evaluation.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1
SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
SELECT name FROM employee WHERE employee_id NOT IN (   SELECT employee_id FROM evaluation )
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1
SELECT name  FROM shop  WHERE shop_id NOT IN (SELECT DISTINCT shop_id FROM hiring)
SELECT name FROM shop LEFT JOIN hiring ON shop.shop_id = hiring.shop_id WHERE hiring.shop_id IS NULL
SELECT COUNT(employee.Employee_ID) AS num_employees, shop.Name FROM employee JOIN hiring ON employee.Employee_ID = hiring.Employee_ID JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY shop.Name
SELECT COUNT(employee.Employee_ID) AS num_employees, shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID JOIN employee ON hiring.Employee_ID = employee.Employee_ID GROUP BY shop.Name
SELECT SUM(Bonus) AS TotalBonus FROM evaluation
SELECT SUM(Bonus) AS Total_Bonus FROM evaluation
SELECT hiring.* FROM hiring
SELECT hiring.* FROM hiring
SELECT DISTINCT district  FROM shop  WHERE number_products < 3000  AND district IN (SELECT DISTINCT district FROM shop WHERE number_products > 10000)
SELECT DISTINCT district FROM shop WHERE shop.number_products < 3000 AND shop.district IN (     SELECT DISTINCT district     FROM shop     WHERE shop.number_products > 10000 ) 
SELECT COUNT(DISTINCT Location) FROM shop
SELECT COUNT(DISTINCT Location) FROM shop
SELECT count(*) FROM Documents
SELECT COUNT(*) FROM Documents
SELECT document_id, document_name, document_description FROM documents
SELECT document_id, document_name, document_description  FROM Documents
SELECT document_name, template_id FROM Documents WHERE document_description LIKE '%w%';
SELECT document_name, template_id  FROM Documents  WHERE Document_Description LIKE '%w%'
SELECT documents.Document_ID, documents.Template_ID, documents.Document_Description FROM documents WHERE documents.Document_Name = "Robbin CV"
SELECT documents.Document_ID, documents.Template_ID, documents.Document_Description  FROM documents  WHERE documents.Document_Name = 'Robbin CV'
SELECT COUNT(DISTINCT Template_ID) FROM Documents
SELECT COUNT(DISTINCT Template_ID) FROM Documents
SELECT COUNT(DISTINCT Document_ID) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT')
SELECT COUNT(*) AS Document_Count FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT')
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID
SELECT Documents.Template_ID, COUNT(Documents.Template_ID)  FROM Documents  GROUP BY Documents.Template_ID
SELECT Templates.Template_ID, Templates.Template_Type_Code  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  GROUP BY Templates.Template_ID, Templates.Template_Type_Code  ORDER BY COUNT(Documents.Document_ID) DESC  LIMIT 1
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1
SELECT Templates.Template_ID FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1
SELECT Templates.Template_ID  FROM Templates  JOIN Documents ON Documents.Template_ID = Templates.Template_ID  GROUP BY Templates.Template_ID  HAVING COUNT(DISTINCT Documents.Document_ID) > 1
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Template_ID IS NULL;
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Template_ID IS NULL
SELECT COUNT(*) FROM Templates
SELECT COUNT(Template_ID) FROM Templates
SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates
SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates
SELECT DISTINCT Template_Type_Code FROM Templates
SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Templates.Template_Type_Code IN ('PP', 'PPT')
SELECT templates.Template_ID FROM templates WHERE templates.Template_Type_Code IN ('PP', 'PPT')
SELECT COUNT(DISTINCT Template_ID) FROM Templates WHERE Template_Type_Code = 'CV'
SELECT COUNT(*) FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'CV'
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5
SELECT templates.version_number, templates.template_type_code FROM templates WHERE templates.version_number > 5
SELECT Ref_Template_Types.Template_Type_Code, COUNT(*)  FROM Templates  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  GROUP BY Ref_Template_Types.Template_Type_Code
SELECT Ref_Template_Types.Template_Type_Code, COUNT(*)  FROM Templates  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code
SELECT Ref_Template_Types.Template_Type_Code  FROM Templates  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  GROUP BY Ref_Template_Types.Template_Type_Code  ORDER BY COUNT(Templates.Template_ID) DESC  LIMIT 1
SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_Type_Code ORDER BY COUNT(Templates.Template_ID) DESC LIMIT 1
SELECT template_type_code  FROM Ref_Template_Types  JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code  GROUP BY Ref_Template_Types.Template_Type_Code  HAVING COUNT(Templates.Template_ID) < 3
SELECT template_type_code  FROM ref_template_types  JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  GROUP BY template_type_code  HAVING count(templates.template_id) < 3
SELECT MIN(Version_Number) AS smallest_version_number, Template_Type_Code FROM Templates GROUP BY Template_Type_Code
SELECT MIN(Version_Number) AS Lowest_Version_Number, Template_Type_Code FROM Templates GROUP BY Template_Type_Code
SELECT Templates.Template_Type_Code  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  WHERE Documents.Document_Name = "Data base"
SELECT Ref_Template_Types.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Documents.Document_Name = 'Data base'
SELECT documents.document_name  FROM documents  JOIN templates ON documents.template_id = templates.template_id  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_code = 'BK'
SELECT document_name FROM documents WHERE template_id IN (     SELECT template_id     FROM templates     WHERE template_type_code = 'BK' )
SELECT Ref_Template_Types.Template_Type_Code, COUNT(*)  FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(DISTINCT Documents.Document_ID)  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  GROUP BY Ref_Template_Types.Template_Type_Code
SELECT Ref_Template_Types.Template_Type_Code  FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1
SELECT Ref_Template_Types.Template_Type_Code  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  GROUP BY Ref_Template_Types.Template_Type_Code  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN (SELECT DISTINCT template_type_code FROM templates)
SELECT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Code NOT IN      (SELECT Template_Type_Code      FROM Templates)
SELECT template_type_code, template_type_description FROM Ref_Template_Types
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
SELECT template_type_description  FROM ref_template_types  WHERE template_type_code = "AD"
SELECT template_type_description  FROM ref_template_types  WHERE template_type_code = 'AD'
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'
SELECT template_type_code  FROM Ref_Template_Types  WHERE template_type_description = 'Book'
SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID JOIN Paragraphs AS T4 ON T3.Document_ID = T4.Document_ID
SELECT ref_template_types.template_type_description FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY ref_template_types.template_type_description
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation'
SELECT template_id FROM templates WHERE template_type_code IN (SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Presentation')
SELECT COUNT(*) FROM Paragraphs
SELECT COUNT(*) FROM Paragraphs;
SELECT COUNT(*) AS paragraph_count  FROM Paragraphs  WHERE Document_ID = (   SELECT Document_ID    FROM Documents    WHERE Document_Name = 'Summer Show' )
SELECT COUNT(*) FROM Paragraphs  WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show')
SELECT Paragraph_Text FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'
SELECT Paragraphs.* FROM Paragraphs WHERE Paragraphs.Paragraph_Text LIKE '%Korea%'
SELECT paragraph_id, paragraph_text  FROM paragraphs  WHERE document_id = (     SELECT document_id      FROM documents      WHERE document_name = 'Welcome to NY' )
SELECT paragraph_id, paragraph_text  FROM Paragraphs  WHERE document_id = (SELECT document_id                       FROM Documents                       WHERE document_name = 'Welcome to NY')
SELECT Paragraph_Text  FROM Paragraphs  WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Customer reviews')
SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID = (   SELECT Document_ID   FROM Documents   WHERE Document_Name = 'Customer reviews' )
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Paragraph_Count FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID ASC
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID)  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID  ORDER BY Documents.Document_ID ASC
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id)  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id, documents.document_name
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS paragraph_count FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name
SELECT Documents.Document_ID FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(*) >= 2
SELECT Documents.Document_ID  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID  HAVING COUNT(*) >= 2
SELECT documents.document_id, documents.document_name  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id, documents.document_name  ORDER BY COUNT(paragraphs.paragraph_id) DESC  LIMIT 1
SELECT documents.document_id, documents.document_name FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1
SELECT Documents.Document_ID  FROM    Paragraphs  JOIN    Documents ON Paragraphs.Document_ID = Documents.Document_ID  GROUP BY    Documents.Document_ID  ORDER BY    COUNT(*) ASC  LIMIT 1
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY COUNT(Paragraphs.Paragraph_ID) ASC LIMIT 1
SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(paragraph_id) BETWEEN 1 AND 2
SELECT Documents.Document_ID FROM Paragraphs GROUP BY Documents.Document_ID HAVING COUNT(*) BETWEEN 1 AND 2
SELECT document_id  FROM paragraphs  WHERE paragraph_text IN ('Brazil', 'Ireland');
SELECT document_id FROM paragraphs WHERE paragraph_text = 'Brazil'   AND document_id IN (     SELECT document_id     FROM paragraphs     WHERE paragraph_text = 'Ireland'   )
SELECT count(Teacher_ID) FROM teacher
SELECT count(*) FROM teacher
SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC
SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC
SELECT age, hometown FROM teacher
SELECT teacher.Age, teacher.Hometown FROM teacher
SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'
SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'
SELECT teacher.Name FROM teacher WHERE teacher.Age IN (32, 33)
SELECT teacher.Name FROM teacher WHERE teacher.Age IN (32, 33)
SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1
SELECT teacher.Hometown FROM teacher ORDER BY teacher.Age ASC LIMIT 1
SELECT hometown, COUNT(DISTINCT teacher.Teacher_ID) FROM teacher GROUP BY hometown
SELECT hometown, COUNT(*) FROM teacher GROUP BY hometown
SELECT teacher.hometown  FROM teacher  GROUP BY teacher.hometown  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT teacher.hometown FROM teacher GROUP BY teacher.hometown ORDER BY COUNT(*) DESC LIMIT 1
SELECT teacher.Hometown FROM teacher GROUP BY teacher.Hometown HAVING COUNT(DISTINCT teacher.Teacher_ID) >= 2
SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(DISTINCT Teacher_ID) >= 2
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course.Course_ID = course_arrange.Course_ID ORDER BY teacher.Name ASC
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC
SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID WHERE T3.Course = 'Math'
SELECT teacher.Name  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  JOIN course ON course_arrange.Course_ID = course.Course_ID  WHERE course.Course = 'Math'
SELECT T1.Name, COUNT(T2.Course_ID)  FROM teacher AS T1  JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID  GROUP BY T1.Name
SELECT teacher.Name, COUNT(course_arrange.Course_ID) AS course_count FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name
SELECT name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID HAVING count(DISTINCT course_arrange.Course_ID) >= 2
SELECT teacher.Name  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  GROUP BY teacher.Name  HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2
SELECT name  FROM teacher  WHERE Teacher_ID NOT IN (     SELECT Teacher_ID      FROM course_arrange )
SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT DISTINCT teacher_id FROM course_arrange)
SELECT count(*) FROM visitor WHERE Age < 30
SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Level_of_membership DESC
SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4
SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Age DESC
SELECT museum_id, name  FROM museum  ORDER BY Num_of_Staff DESC  LIMIT 1
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009
SELECT open_year, num_of_staff FROM museum WHERE Name = 'Plaza Museum'
SELECT name  FROM museum  WHERE num_of_staff > (SELECT MIN(num_of_staff) FROM museum WHERE open_year > 2010)
SELECT visitor.ID, visitor.Name, visitor.Age  FROM visitor  JOIN visit ON visitor.ID = visit.visitor_ID  GROUP BY visitor.ID, visitor.Name, visitor.Age  HAVING COUNT(*) > 1
SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID, visitor.Name, visitor.Level_of_membership ORDER BY SUM(visit.Total_spent) DESC LIMIT 1
SELECT museum_id, name  FROM museum  GROUP BY museum_id, name  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT name  FROM museum  WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)
SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.Name, visitor.Age ORDER BY visit.Num_of_Ticket DESC LIMIT 1
SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit
SELECT SUM(Total_spent) AS Total_Expense FROM visit WHERE visitor_ID IN (SELECT ID FROM visitor WHERE Level_of_membership = 1)
SELECT T2.Name FROM visitor AS T2 WHERE EXISTS (   SELECT T1.visitor_id   FROM visit AS T1   JOIN museum AS T3 ON T1.Museum_ID = T3.Museum_ID   WHERE T1.visitor_ID = T2.ID     AND (T3.Open_Year < 2009 OR T3.Open_Year > 2011)   GROUP BY T1.visitor_ID   HAVING COUNT(DISTINCT T3.Open_Year) > 1 )
SELECT COUNT(DISTINCT visitor_ID) FROM visit WHERE Museum_ID NOT IN (SELECT Museum_ID FROM museum WHERE Open_Year > 2010)
SELECT count(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008
SELECT COUNT(DISTINCT player_id) FROM players
SELECT count(player_id) FROM players
SELECT count(*) FROM matches
SELECT COUNT(*) FROM matches
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches
SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches
SELECT AVG(winner_rank) FROM matches
SELECT AVG(winner_rank) AS average_rank FROM matches
SELECT MAX(loser_rank) AS highest_rank_of_losers FROM matches
SELECT MIN(loser_rank) AS best_rank FROM matches
SELECT COUNT(DISTINCT country_code) AS distinct_country_codes FROM players
SELECT COUNT(DISTINCT country_code) AS distinct_countries FROM players
SELECT count(DISTINCT loser_name) FROM matches
SELECT count(DISTINCT loser_name) FROM matches
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10
SELECT tourney_name  FROM matches  GROUP BY tourney_name  HAVING COUNT(*) > 10
SELECT winner_name FROM matches WHERE year = 2013 AND winner_name IN (     SELECT winner_name     FROM matches     WHERE year = 2016 )
SELECT T2.first_name, T2.last_name FROM players AS T2 WHERE EXISTS (     SELECT * FROM matches AS T1     WHERE T1.winner_id = T2.player_id AND T1.year IN (2013, 2016) )
SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016
SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016
SELECT players.country_code, players.first_name FROM players WHERE players.player_id IN (     SELECT winner_id     FROM matches     WHERE tourney_name = 'WTA Championships'     GROUP BY winner_id     HAVING COUNT(DISTINCT tourney_name) = 2 ) AND players.player_id IN (     SELECT winner_id     FROM matches     WHERE tourney_name = 'Australian Open'     GROUP BY winner_id     HAVING COUNT(DISTINCT tourney_name) = 2 )
SELECT players.first_name, players.country_code  FROM players  JOIN matches AS match1 ON players.player_id = match1.winner_id  JOIN matches AS match2 ON players.player_id = match2.winner_id  WHERE match1.tourney_name = 'Australian Open'  AND match2.tourney_name = 'WTA Championships'
SELECT players.first_name, players.country_code  FROM players  ORDER BY players.birth_date ASC  LIMIT 1
SELECT players.first_name, players.country_code  FROM players  ORDER BY players.birth_date ASC  LIMIT 1
SELECT first_name, last_name  FROM players  ORDER BY birth_date ASC
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players ORDER BY birth_date ASC
SELECT first_name, last_name  FROM players  WHERE hand = 'L'  ORDER BY birth_date;
SELECT CONCAT(first_name, ' ', last_name) AS full_name  FROM players  WHERE hand = 'left'  ORDER BY birth_date ASC
SELECT first_name, country_code  FROM players  INNER JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.player_id  ORDER BY COUNT(rankings.tours) DESC  LIMIT 1
SELECT players.first_name, players.country_code  FROM players  INNER JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.player_id  ORDER BY COUNT(rankings.tours) DESC  LIMIT 1
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1
SELECT The SQLite SQL query to determine which year had the most matches would be as follows:  ```sql SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1; ```  Explanation: - The query selects the "year" column from the "matches" table. - It uses the COUNT(*) function to count the number of matches for each year. - The results are grouped by the "year" column using the GROUP BY clause. - The results are then ordered in descending order based on the match count using the ORDER BY clause. - Finally, the LIMIT 1 clause is used to retrieve only the year with the highest match count.
SELECT matches.winner_name, SUM(matches.winner_rank_points) AS total_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY matches.winner_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT winner_name, MAX(winner_rank_points) AS max_rank_points  FROM matches  JOIN players ON matches.winner_id = players.player_id GROUP BY winner_name  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT matches.winner_name  FROM matches  JOIN players ON matches.winner_id = players.player_id  WHERE matches.tourney_name = 'Australian Open'  ORDER BY matches.winner_rank_points DESC  LIMIT 1
SELECT matches.winner_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'Australian Open' ORDER BY matches.winner_rank_points DESC LIMIT 1
SELECT matches.winner_name, matches.loser_name FROM matches ORDER BY minutes DESC LIMIT 1
SELECT matches.winner_name, matches.loser_name  FROM matches  ORDER BY matches.minutes DESC  LIMIT 1
SELECT AVG(T1.ranking) AS average_ranking, T2.first_name  FROM rankings AS T1  JOIN players AS T2 ON T1.player_id = T2.player_id  GROUP BY T2.first_name
SELECT players.first_name, AVG(rankings.ranking)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name
SELECT SUM(rankings.ranking_points) AS total_ranking_points, players.first_name FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.player_id, players.first_name
SELECT players.first_name, sum(rankings.ranking_points)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name
SELECT country_code, COUNT(DISTINCT player_id) FROM players GROUP BY country_code
SELECT COUNT(*) AS player_count, country_code FROM players GROUP BY country_code
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT country_code, COUNT(*) AS player_count FROM players GROUP BY country_code ORDER BY player_count DESC LIMIT 1
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(DISTINCT player_id) > 50
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date
SELECT SUM(tours) AS total_tours, ranking_date FROM rankings GROUP BY ranking_date
SELECT COUNT(*) AS match_count, year FROM matches GROUP BY year
SELECT COUNT(*) AS match_count, year  FROM matches  GROUP BY year
SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY players.birth_date DESC LIMIT 3
SELECT DISTINCT winner_name, winner_rank  FROM matches  JOIN players ON matches.winner_id = players.player_id ORDER BY players.birth_date ASC  LIMIT 3
SELECT count(DISTINCT T1.winner_id)  FROM matches AS T1  JOIN players AS T2 ON T1.winner_id = T2.player_id  WHERE T1.tourney_name = 'WTA Championships'  AND T2.hand = 'L'
SELECT COUNT(DISTINCT winner_id) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = 'WTA Championships' AND players.hand = 'L'
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY matches.winner_rank_points DESC LIMIT 1
SELECT players.first_name, players.country_code, players.birth_date FROM players INNER JOIN matches ON players.player_id = matches.winner_id GROUP BY players.player_id ORDER BY MAX(matches.winner_rank_points) DESC LIMIT 1
SELECT COUNT(*) AS player_count, hand  FROM players  GROUP BY hand
SELECT COUNT(*) AS player_count, hand  FROM players  GROUP BY hand
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'
SELECT name, tonnage  FROM ship  ORDER BY name DESC, tonnage DESC
SELECT name, date, result FROM battle
SELECT MAX(killed) AS maximum_death_toll, MIN(killed) AS minimum_death_toll FROM death
SELECT AVG(injured) AS average_injuries FROM death
SELECT I apologize for the confusion, but it seems that the provided question is incomplete. In order to generate a valid SQL query, I need more specific information or a complete query to work with. Please provide the necessary details or a specific query so that I can assist you further.
SELECT name, result FROM battle WHERE bulgarian_commander <> 'Boril'
SELECT battle.id, battle.name  FROM battle  JOIN ship ON battle.id = ship.lost_in_battle  WHERE ship.ship_type = 'Brig'
SELECT battle.id, battle.name  FROM battle  JOIN ship ON ship.lost_in_battle = battle.id  JOIN death ON death.caused_by_ship_id = ship.id  GROUP BY battle.id, battle.name  HAVING SUM(death.killed) > 10
SELECT ship.id, ship.name  FROM ship JOIN death ON death.caused_by_ship_id = ship.id GROUP BY ship.id, ship.name  ORDER BY sum(death.injured) DESC  LIMIT 1
SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'
SELECT count(DISTINCT result) FROM battle
SELECT count(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225') AND result <> 'lost'
SELECT name, date  FROM battle  WHERE id IN (   SELECT lost_in_battle    FROM ship    WHERE name = 'Lettice' OR name = 'HMS Atalanta' )
SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel')
SELECT note FROM death WHERE note LIKE '%East%'
SELECT line_1, line_2 FROM Addresses
SELECT line_1, line_2 FROM Addresses
SELECT count(*) FROM Courses
SELECT count(*) FROM Courses
SELECT course_description  FROM Courses  WHERE course_name = 'math'
SELECT course_description FROM Courses WHERE course_name LIKE '%math%'
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
SELECT department_name, department_id FROM Departments JOIN Degree_Programs ON Degree_Programs.department_id = Departments.department_id GROUP BY department_name, department_id ORDER BY COUNT(Degree_Programs.degree_program_id) DESC LIMIT 1
SELECT departments.department_name, departments.department_id FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY departments.department_name, departments.department_id ORDER BY COUNT(degree_programs.degree_program_id) DESC LIMIT 1
SELECT COUNT(DISTINCT department_id) FROM Departments
SELECT COUNT(DISTINCT department_id) FROM Departments
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs
SELECT COUNT(DISTINCT degree_program_id) AS degree_count FROM Degree_Programs
SELECT count(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering')
SELECT count(*)  FROM Degree_Programs  WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering')
SELECT section_name, section_description FROM Sections
SELECT section_name, section_description FROM Sections
SELECT courses.course_name, courses.course_id FROM courses JOIN sections ON courses.course_id = sections.course_id GROUP BY courses.course_name, courses.course_id HAVING count(sections.section_id) <= 2
SELECT courses.course_name, courses.course_id FROM courses LEFT JOIN sections ON courses.course_id = sections.course_id GROUP BY courses.course_name, courses.course_id HAVING COUNT(sections.section_id) < 2
SELECT sections.section_name FROM sections ORDER BY sections.section_name DESC
SELECT section_name FROM Sections ORDER BY section_name DESC
SELECT semesters.semester_name, semesters.semester_id FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id, semesters.semester_name ORDER BY count(*) DESC LIMIT 1
SELECT T1.semester_name, T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT department_description FROM departments WHERE department_name LIKE '%computer%'
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id, T1.first_name, T1.middle_name, T1.last_name HAVING COUNT(DISTINCT T2.degree_program_id) = 2 AND COUNT(DISTINCT T2.semester_id) = 1
SELECT T2.first_name, T2.middle_name, T2.last_name, T2.student_id FROM Student_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING COUNT(DISTINCT T1.degree_program_id) = 2 AND COUNT(DISTINCT T1.semester_id) = 1
SELECT students.first_name, students.middle_name, students.last_name  FROM students  JOIN student_enrolment ON students.student_id = student_enrolment.student_id  JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  JOIN departments ON degree_programs.department_id = departments.department_id  WHERE departments.degree_summary_name = 'Bachelor';
SELECT first_name, middle_name, last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelors'
SELECT degree_program_id, COUNT(*) AS enrolment_count FROM Student_Enrolment GROUP BY degree_program_id ORDER BY enrolment_count DESC LIMIT 1
SELECT degree_summary_name, COUNT(*) AS num_students_enrolled FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY num_students_enrolled DESC LIMIT 1
SELECT degree_programs.degree_program_id, degree_programs.degree_summary_name FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY student_enrolment.degree_program_id, degree_programs.degree_summary_name ORDER BY COUNT(student_enrolment.student_enrolment_id) DESC LIMIT 1
SELECT degree_program_id, degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(T2.student_enrolment_id) AS num_enrollments FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id, T1.first_name, T1.middle_name, T1.last_name ORDER BY num_enrollments DESC LIMIT 1
SELECT students.first_name, students.middle_name, students.last_name, students.student_id, COUNT(*) AS enrollment_count FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id ORDER BY enrollment_count DESC LIMIT 1
SELECT semester_name  FROM semesters  WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment)
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT DISTINCT semester_id FROM Student_Enrolment)
SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses)
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id;
SELECT course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY course_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT course_name  FROM Courses  JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id  GROUP BY Courses.course_name  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE Addresses.state_province_county = 'North Carolina' AND Students.student_id NOT IN (     SELECT student_id     FROM Student_Enrolment )
SELECT students.last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id WHERE students.student_id NOT IN (     SELECT student_enrolment.student_id     FROM student_enrolment ) AND addresses.state_province_county = 'North Carolina'
SELECT transcript_date, transcript_id  FROM Transcripts  JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id  JOIN Student_Enrolment_Courses ON Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  GROUP BY Transcripts.transcript_id  HAVING COUNT(*) >= 2
SELECT transcript_date, transcript_id FROM Transcripts JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id JOIN Student_Enrolment_Courses ON Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id GROUP BY transcript_id HAVING COUNT(DISTINCT Student_Enrolment_Courses.course_id) >= 2;
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT Students.first_name, Students.middle_name, Students.last_name  FROM Students  ORDER BY Students.date_first_registered ASC  LIMIT 1
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered LIMIT 1
SELECT Students.first_name, Students.middle_name, Students.last_name  FROM Students  ORDER BY Students.date_first_registered ASC  LIMIT 1
SELECT Students.first_name, Students.middle_name, Students.last_name  FROM Students  ORDER BY Students.date_first_registered ASC  LIMIT 1
SELECT first_name  FROM Students  WHERE permanent_address_id <> current_address_id
SELECT Students.first_name  FROM Students  JOIN Addresses AS permanent ON Students.permanent_address_id = permanent.address_id  JOIN Addresses AS current ON Students.current_address_id = current.address_id  WHERE permanent.line_1 != current.line_1
SELECT addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3 FROM addresses JOIN students ON students.current_address_id = addresses.address_id GROUP BY addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3 ORDER BY COUNT(*) DESC LIMIT 1
SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses JOIN students ON students.current_address_id = addresses.address_id GROUP BY addresses.address_id, addresses.line_1, addresses.line_2 ORDER BY COUNT(*) DESC LIMIT 1
SELECT AVG(transcript_date) FROM Transcripts
SELECT AVG(transcript_date) FROM Transcripts
SELECT transcript_date, other_details  FROM Transcripts  ORDER BY transcript_date ASC  LIMIT 1
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
SELECT count(*) FROM Transcripts
SELECT count(*) FROM Transcripts
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
SELECT COUNT(*) AS enrollment_count, student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY enrollment_count DESC LIMIT 1
SELECT MAX(count), course_id FROM (   SELECT COUNT(course_id) as count, course_id   FROM Student_Enrolment_Courses   GROUP BY course_id ) as counts ORDER BY count DESC LIMIT 1
SELECT transcript_date, transcript_id FROM Transcripts GROUP BY transcript_date, transcript_id ORDER BY COUNT(*) ASC LIMIT 1
SELECT transcript_date, transcript_id FROM Transcripts GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1
SELECT T3.semester_name FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id JOIN Semesters AS T3 ON T1.semester_id = T3.semester_id WHERE T2.degree_summary_name IN ('Bachelor', 'Master') GROUP BY T3.semester_name HAVING COUNT(DISTINCT T2.degree_summary_name) = 2
SELECT T1.semester_id FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id JOIN Courses AS T3 ON T2.course_id = T3.course_id JOIN Degree_Programs AS T4 ON T1.degree_program_id = T4.degree_program_id WHERE T4.degree_summary_name IN ('Masters', 'Bachelors') GROUP BY T1.semester_id HAVING COUNT(DISTINCT T4.degree_summary_name) = 2
SELECT count(DISTINCT students.current_address_id) AS total_addresses FROM students
SELECT DISTINCT address_id FROM Addresses JOIN Students ON Students.current_address_id = Addresses.address_id OR Students.permanent_address_id = Addresses.address_id
SELECT Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details  FROM Students  ORDER BY Students.last_name DESC, Students.first_name DESC, Students.middle_name DESC
SELECT student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details FROM students ORDER BY last_name DESC
SELECT The "DESCRIBE" statement is not supported in SQLite. To describe the structure of a table in SQLite, you can use the following SQL query:  ```sql PRAGMA table_info(Sections); ```  This query will provide information about the columns in the "Sections" table, including the column names, data types, and other details.
SELECT section_description FROM Sections WHERE section_name = 'h'
SELECT Students.first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'
SELECT first_name FROM Students  JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'
SELECT Cartoon.Title FROM Cartoon ORDER BY Cartoon.Title ASC
SELECT title FROM Cartoon ORDER BY Title ASC
SELECT title FROM Cartoon WHERE Directed_by = 'Ben Jones'
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'
SELECT count(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
SELECT cartoon.title, cartoon.directed_by FROM cartoon JOIN TV_Channel ON cartoon.channel = TV_Channel.id ORDER BY cartoon.original_air_date ASC
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon ORDER BY Cartoon.Original_air_date ASC
SELECT title FROM Cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti'
SELECT title FROM Cartoon WHERE directed_by IN ('Ben Jones', 'Brandon Vietti')
SELECT country, COUNT(*)  FROM TV_Channel  GROUP BY country  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT TV_Channel.Country, COUNT(*) AS Channel_Count  FROM TV_Channel  GROUP BY TV_Channel.Country  ORDER BY Channel_Count DESC  LIMIT 1
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio"
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT Package_Option FROM TV_Channel JOIN TV_series ON TV_series.Channel = TV_Channel.id WHERE TV_series.series_name = 'Sky Radio'
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'
SELECT COUNT(DISTINCT id) FROM TV_Channel WHERE Language = 'English'
SELECT TV_Channel.Language, COUNT(*) AS channel_count FROM TV_Channel GROUP BY TV_Channel.Language ORDER BY channel_count ASC LIMIT 1
SELECT TV_Channel.Language, COUNT(*) AS channel_count  FROM TV_Channel  GROUP BY TV_Channel.Language  ORDER BY channel_count ASC  LIMIT 1
SELECT TV_Channel.Language, COUNT(*)  FROM TV_Channel  GROUP BY TV_Channel.Language
SELECT TV_Channel.Language, COUNT(DISTINCT TV_Channel.id) AS Channel_Count FROM TV_Channel GROUP BY TV_Channel.Language
SELECT TV_Channel.series_name  FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Title = 'The Rise of the Blue Beetle!';
SELECT series_name FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle'
SELECT title FROM Cartoon WHERE channel IN (   SELECT id   FROM TV_Channel   WHERE series_name = 'Sky Radio' )
SELECT title FROM Cartoon WHERE channel = (     SELECT id     FROM TV_Channel     WHERE series_name = 'Sky Radio' )
SELECT TV_series.Episode FROM TV_series ORDER BY TV_series.Rating ASC
SELECT TV_series.*  FROM TV_series  ORDER BY Rating DESC
SELECT TV_series.Episode, TV_series.Rating  FROM TV_series  ORDER BY TV_series.Rating DESC  LIMIT 3
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3
SELECT MAX(Share), MIN(Share) FROM TV_series
SELECT MAX(Share) AS Maximum_Share, MIN(Share) AS Minimum_Share FROM TV_series
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime"
SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'
SELECT TV_series.Weekly_Rank  FROM TV_series  JOIN Cartoon ON TV_series.Channel = Cartoon.Channel  JOIN TV_Channel ON TV_series.Channel = TV_Channel.id  WHERE Cartoon.Title = "A Love of a Lifetime"
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime"
SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = "A Love of a Lifetime"
SELECT series_name FROM TV_series WHERE Episode = 'A Love of a Lifetime'
SELECT Episode  FROM TV_series  WHERE Channel = (   SELECT id    FROM TV_Channel    WHERE series_name = 'Sky Radio' )
SELECT Episode FROM TV_series WHERE series_name = "Sky Radio"
SELECT COUNT(*) as num_cartoons, directed_by FROM cartoon GROUP BY directed_by
SELECT COUNT(id), directed_by  FROM Cartoon  GROUP BY directed_by
SELECT production_code, Cartoon.channel FROM Cartoon INNER JOIN TV_Channel ON Cartoon.channel = TV_Channel.id ORDER BY Cartoon.original_air_date DESC LIMIT 1
SELECT Cartoon.production_code, TV_Channel.series_name FROM Cartoon JOIN TV_Channel ON Cartoon.channel = TV_Channel.id ORDER BY Cartoon.original_air_date DESC LIMIT 1
SELECT package_option, series_name  FROM TV_Channel  WHERE High_definition_TV = 1
SELECT package_option, series_name  FROM TV_Channel  WHERE High_definition_TV = true
SELECT TV_Channel.Country FROM TV_Channel INNER JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';
SELECT country FROM TV_Channel WHERE id IN (   SELECT DISTINCT Channel   FROM Cartoon   WHERE Written_by = 'Todd Casey' )
SELECT country FROM TV_Channel WHERE id NOT IN (   SELECT DISTINCT Channel   FROM Cartoon   WHERE Written_by = 'Todd Casey' )
SELECT DISTINCT Country  FROM TV_Channel  WHERE id NOT IN (SELECT Channel                   FROM Cartoon                   WHERE Written_by = 'Todd Casey')
SELECT TV_Channel.series_name, TV_Channel.country  FROM TV_Channel  JOIN Cartoon ON Cartoon.channel = TV_Channel.id WHERE Cartoon.directed_by IN ('Ben Jones', 'Michael Chang')
SELECT series_name, Country FROM TV_Channel WHERE id IN (     SELECT DISTINCT Channel     FROM Cartoon     WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Michael Chang' )
SELECT TV_Channel.pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language <> 'English'
SELECT pixel_aspect_ratio_PAR, Country  FROM TV_Channel  WHERE Language <> 'English'
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.Country HAVING COUNT(*) > 2
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.id HAVING COUNT(*) > 2
SELECT TV_Channel.id  FROM TV_Channel  WHERE TV_Channel.id NOT IN (   SELECT Cartoon.Channel    FROM Cartoon    WHERE Cartoon.Directed_by = 'Ben Jones' )
SELECT TV_Channel.id FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.directed_by <> 'Ben Jones' OR Cartoon.directed_by IS NULL
SELECT TV_Channel.package_option FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT Cartoon.Channel                              FROM Cartoon                              WHERE Cartoon.Directed_by = 'Ben Jones')
SELECT Package_Option FROM TV_Channel WHERE id NOT IN (     SELECT DISTINCT Channel     FROM Cartoon     WHERE Directed_by = 'Ben Jones' )
SELECT COUNT(*) FROM poker_player
SELECT count(*) FROM poker_player
SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC
SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC
SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player
SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player
SELECT AVG(Earnings) FROM poker_player
SELECT AVG(Earnings) FROM poker_player
SELECT poker_player.money_rank  FROM poker_player  INNER JOIN people ON poker_player.People_ID = people.People_ID  ORDER BY poker_player.Earnings DESC  LIMIT 1
SELECT poker_player.money_rank  FROM poker_player  ORDER BY poker_player.earnings DESC  LIMIT 1
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000
SELECT MAX(final_table_made) AS max_final_tables FROM poker_player WHERE earnings < 200000
SELECT name FROM people
SELECT name FROM poker_player JOIN people ON people.People_ID = poker_player.People_ID
SELECT poker_player.Name  FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings > 300000
SELECT name  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  WHERE poker_player.Earnings > 300000
SELECT people.name  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  ORDER BY poker_player.final_table_made ASC
SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id GROUP BY people.name ORDER BY COUNT(poker_player.final_table_made) ASC
SELECT birth_date  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Earnings ASC  LIMIT 1
SELECT people.Birth_Date  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Earnings ASC  LIMIT 1
SELECT poker_player.money_rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1
SELECT poker_player.money_rank  FROM poker_player  JOIN people ON poker_player.people_id = people.people_id  ORDER BY people.height DESC  LIMIT 1
SELECT avg(poker_player.Earnings) FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  WHERE people.Height > 200
SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200
SELECT name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings DESC
SELECT people.Name  FROM poker_player  INNER JOIN people ON poker_player.People_ID = people.People_ID  ORDER BY poker_player.Earnings DESC
SELECT nationality, COUNT(*)  FROM people  GROUP BY nationality
SELECT nationality, COUNT(*) FROM people GROUP BY nationality
SELECT Nationality, COUNT(*) AS Count FROM people GROUP BY Nationality ORDER BY Count DESC LIMIT 1
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
SELECT nationality FROM people GROUP BY nationality HAVING COUNT(DISTINCT People_ID) >= 2
SELECT Nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2
SELECT name, birth_date FROM people ORDER BY name COLLATE NOCASE ASC
SELECT name, birth_date FROM people ORDER BY name ASC
SELECT name  FROM people  WHERE nationality <> 'Russia'
SELECT name  FROM people  WHERE Nationality <> 'Russia'
SELECT name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
SELECT name FROM people LEFT JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.People_ID IS NULL
SELECT COUNT(DISTINCT Nationality) FROM people
SELECT COUNT(DISTINCT Nationality) FROM people
SELECT COUNT(DISTINCT state) FROM area_code_state
SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC
SELECT vote_id, phone_number, state FROM VOTES
SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE
SELECT MAX(created)  FROM VOTES  WHERE state = 'CA'
SELECT contestant_name FROM contestants WHERE contestant_name <> 'Jessie Alloway'
SELECT DISTINCT state, created FROM VOTES
SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number IN (     SELECT contestant_number     FROM votes     GROUP BY contestant_number     HAVING COUNT(*) >= 2 )
SELECT contestant_number, contestant_name  FROM contestants  JOIN votes ON contestants.contestant_number = votes.contestant_number  GROUP BY contestant_number, contestant_name  ORDER BY COUNT(votes.vote_id) ASC  LIMIT 1
SELECT count(*)  FROM VOTES  WHERE state = 'NY' OR state = 'CA'
SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)
SELECT area_code  FROM AREA_CODE_STATE  JOIN VOTES ON VOTES.state = AREA_CODE_STATE.state  GROUP BY area_code  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT created, state, phone_number FROM VOTES WHERE contestant_number = (   SELECT contestant_number   FROM CONTESTANTS   WHERE contestant_name = 'Tabatha Gehling' )
SELECT area_code  FROM AREA_CODE_STATE  WHERE state IN (     SELECT state      FROM VOTES      WHERE contestant_number IN (         SELECT contestant_number          FROM CONTESTANTS          WHERE contestant_name = 'Tabatha Gehling' OR contestant_name = 'Kelly Clauss'     )      GROUP BY state      HAVING COUNT(DISTINCT contestant_number) = 2 )
SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%'
SELECT name  FROM country  WHERE IndepYear > 1950
SELECT name FROM country WHERE IndepYear > 1950
SELECT COUNT(*) FROM country WHERE governmentform = 'Republic'
SELECT count(DISTINCT Code) FROM country WHERE governmentform = 'Republic'
SELECT 
SELECT SUM(SurfaceArea) FROM country WHERE continent = 'Caribbean'
SELECT Continent FROM country WHERE name = 'Anguilla'
SELECT Continent FROM country WHERE Name = 'Anguilla'
SELECT Region FROM country WHERE capital = (SELECT ID FROM city WHERE name = 'Kabul')
SELECT Region FROM country WHERE name = 'Kabul'
SELECT countrylanguage.Language FROM countrylanguage WHERE countrylanguage.CountryCode = 'ABW' ORDER BY countrylanguage.Percentage DESC LIMIT 1
SELECT language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba') ORDER BY Percentage DESC LIMIT 1
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'
SELECT Population, LifeExpectancy FROM country WHERE name = 'Brazil'
SELECT Region, Population FROM country WHERE name = 'Angola'
SELECT region, population  FROM country  WHERE name = 'Angola'
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Region = 'Central Africa'
SELECT name FROM country WHERE continent = 'Asia' AND lifeExpectancy IS NOT NULL ORDER BY lifeExpectancy ASC LIMIT 1
SELECT country.Name  FROM country  WHERE continent = 'Asia'  ORDER BY lifeExpectancy ASC  LIMIT 1
SELECT sum(Population), max(GNP)  FROM country  WHERE Continent = 'Asia'
SELECT sum(country.Population), max(country.GNP)  FROM country  WHERE country.Continent = 'Asia'
SELECT AVG(LifeExpectancy) FROM country WHERE GovernmentForm = 'Republic' AND Continent = 'Africa'
SELECT AVG(LifeExpectancy)  FROM country  WHERE Continent = 'Africa'  AND GovernmentForm = 'Republic'
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'
SELECT sum(population)  FROM city  WHERE district = 'Gelderland'
SELECT SUM(population) AS total_population FROM city WHERE district = 'Gelderland'
SELECT AVG(GNP), SUM(Population)  FROM country  WHERE GovernmentForm = 'US Territory'
SELECT AVG(GNP), SUM(population)  FROM country  WHERE GovernmentForm = 'US Territory'  AND Continent = 'North America'
SELECT COUNT(DISTINCT Language) FROM countrylanguage
SELECT COUNT(DISTINCT Language) AS NumberOfLanguages FROM countrylanguage
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'
SELECT count(DISTINCT GovernmentForm) FROM country WHERE continent = 'Africa'
SELECT count(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW'
SELECT count(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW'
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'
SELECT COUNT(*)  FROM countrylanguage  WHERE CountryCode = 'AFG'    AND IsOfficial = 'T'
SELECT country.Name FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY country.Name ORDER BY COUNT(countrylanguage.Language) DESC LIMIT 1
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name ORDER BY COUNT(DISTINCT countrylanguage.Language) DESC LIMIT 1
SELECT continent FROM countrylanguage GROUP BY continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1
SELECT continent, COUNT(DISTINCT countrylanguage.Language) AS language_count FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY continent ORDER BY language_count DESC LIMIT 1
SELECT count(*) FROM countrylanguage WHERE language IN ('Dutch', 'English') AND IsOfficial = 1 GROUP BY countrycode HAVING count(*) = 2
SELECT count(DISTINCT countrylanguage.CountryCode) AS num_of_nations FROM countrylanguage WHERE language IN ('Dutch', 'English')
SELECT C1.Name FROM country AS C1 JOIN countrylanguage AS CL1 ON C1.Code = CL1.CountryCode JOIN countrylanguage AS CL2 ON C1.Code = CL2.CountryCode WHERE CL1.Language = 'English' AND CL2.Language = 'French' GROUP BY C1.Name
SELECT DISTINCT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language IN ('English', 'French') GROUP BY T1.Name HAVING COUNT(DISTINCT T2.Language) = 2
SELECT T1.Name  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  WHERE T2.Language IN ('English', 'French')    AND T2.IsOfficial = 'T'  GROUP BY T1.Name  HAVING COUNT(DISTINCT T2.Language) = 2
SELECT C.Name FROM Country C JOIN CountryLanguage CL1 ON CL1.CountryCode = C.Code JOIN CountryLanguage CL2 ON CL2.CountryCode = C.Code WHERE CL1.Language = 'English' AND CL1.IsOfficial = 'T' AND CL2.Language = 'French' AND CL2.IsOfficial = 'T'
SELECT COUNT(DISTINCT continent) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Chinese');
SELECT count(DISTINCT continent) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Chinese'
SELECT DISTINCT Region FROM country WHERE CountryCode IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language IN ('English', 'Dutch')     AND IsOfficial = 'T' )
SELECT region FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language IN ('Dutch', 'English')
SELECT country.Name  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  WHERE countrylanguage.Language IN ('English', 'Dutch')  AND countrylanguage.IsOfficial = 'T'
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch') AND countrylanguage.IsOfficial = 'T'
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY countrylanguage.Language ORDER BY COUNT(*) DESC LIMIT 1
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY countrylanguage.Language ORDER BY COUNT(*) DESC LIMIT 1
SELECT language FROM countrylanguage WHERE isofficial = 'T' AND language NOT IN (     SELECT language     FROM countrylanguage     WHERE isofficial = 'F' ) GROUP BY language HAVING COUNT(DISTINCT CountryCode) = 1
SELECT language  FROM countrylanguage  WHERE isofficial = 'T'  GROUP BY language  HAVING COUNT(DISTINCT countrycode) = 1  AND MAX(isofficial) = 'T'  AND countrycode IN (     SELECT code      FROM country      WHERE governmentform = 'Republic' )
SELECT city.name  FROM city  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  JOIN country ON city.countrycode = country.code  WHERE countrylanguage.language = 'English'  GROUP BY city.name  ORDER BY city.population DESC  LIMIT 1
SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' GROUP BY city.Name ORDER BY city.Population DESC LIMIT 1
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = 'Asia' ORDER BY country.SurfaceArea DESC LIMIT 1
SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language <> 'English' AND IsOfficial = 'T')
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language <> 'English' AND IsOfficial = 'T')
SELECT SUM(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')
SELECT sum(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')
SELECT language  FROM countrylanguage  WHERE IsOfficial = 'T'  AND CountryCode = (   SELECT Code    FROM country    WHERE HeadOfState = 'Beatrix' )
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.IsOfficial = 1 AND country.Name = (SELECT country.Name FROM country WHERE country.HeadOfState = 'Beatrix')
SELECT COUNT(DISTINCT Language) FROM countrylanguage  WHERE IsOfficial = 'T'  AND CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930)
SELECT count(DISTINCT Language) AS TotalDistinctLanguages FROM countrylanguage WHERE CountryCode IN (     SELECT Code     FROM country     WHERE IndepYear < 1930 ) AND IsOfficial = 1
SELECT name  FROM country  WHERE surfacearea > (   SELECT MAX(surfacearea)    FROM country    WHERE continent = 'Europe' )
SELECT name FROM country WHERE surfacearea > (   SELECT MAX(surfacearea)   FROM country   WHERE continent = 'Europe' )
SELECT country.Name FROM country WHERE country.Continent = 'Africa' AND country.Population < (SELECT MIN(Population) FROM country WHERE continent = 'Asia')
SELECT name  FROM country  WHERE continent = 'Africa'  AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')
SELECT country.Name FROM country WHERE country.Continent = 'Asia' AND country.Population > (     SELECT MAX(Population)     FROM country     WHERE continent = 'Africa' )
SELECT country.name  FROM country  WHERE country.continent = 'Asia'  AND country.population > (SELECT MAX(population) FROM country WHERE continent = 'Africa')
SELECT country.Code FROM country WHERE country.Code NOT IN (     SELECT countrylanguage.CountryCode     FROM countrylanguage     WHERE countrylanguage.Language = 'English' )
SELECT country.Code FROM country WHERE country.Code NOT IN (   SELECT countrylanguage.CountryCode   FROM countrylanguage   WHERE countrylanguage.Language = 'English' )
SELECT country.Code FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code WHERE language <> 'English'
SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language <> 'English'
SELECT country.code  FROM country  WHERE country.code NOT IN (   SELECT countrylanguage.countrycode    FROM countrylanguage    WHERE countrylanguage.language = 'English'      AND countrylanguage.isofficial = 'T'      AND countrylanguage.percentage > 0 )  AND country.governmentform <> 'Republic'
SELECT country.Code FROM country WHERE country.Code NOT IN (   SELECT countrylanguage.CountryCode   FROM countrylanguage   WHERE countrylanguage.Language = 'English' ) AND country.GovernmentForm != 'Republic'
SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language <> 'English'
SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language <> 'English'
SELECT DISTINCT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.Continent = 'Asia'  AND countrylanguage.Language = 'Chinese'  AND countrylanguage.IsOfficial = 'T'
SELECT DISTINCT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode  WHERE country.Continent = 'Asia'  AND countrylanguage.Language = 'Chinese'  AND countrylanguage.IsOfficial = 'T'
SELECT country.name, country.indepyear, country.surfacearea FROM country ORDER BY country.population ASC LIMIT 1
SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT MIN(population) FROM country) LIMIT 1
SELECT population, name, headofstate FROM country WHERE surfacearea = (     SELECT MAX(surfacearea)     FROM country )
SELECT name, population, headofstate FROM country ORDER BY surfacearea DESC LIMIT 1
SELECT country.name, COUNT(countrylanguage.language)  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  GROUP BY country.name  HAVING COUNT(countrylanguage.language) > 2
SELECT COUNT(countrylanguage.Language), country.Name  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  GROUP BY country.Name  HAVING COUNT(countrylanguage.Language) > 2
SELECT COUNT(city.id), city.district  FROM city  WHERE city.population > (SELECT AVG(population) FROM city)  GROUP BY city.district
SELECT count(city.ID) ,  city.district  FROM city  WHERE city.population > (SELECT avg(population) FROM city)  GROUP BY city.district
SELECT governmentform, SUM(population) AS total_population FROM country GROUP BY governmentform HAVING AVG(lifeexpectancy) > 72;
SELECT governmentform, SUM(population) AS total_population FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy, SUM(Population) AS TotalPopulation, Continent FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72
SELECT country.Continent,         SUM(country.Population) AS total_population,         AVG(country.LifeExpectancy) AS average_life_expectancy  FROM country  GROUP BY country.Continent  HAVING AVG(country.LifeExpectancy) < 72
SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5
SELECT name, surfacearea  FROM country  ORDER BY surfacearea DESC  LIMIT 5
SELECT country.Name FROM country ORDER BY country.Population DESC LIMIT 3
SELECT name FROM country ORDER BY Population DESC LIMIT 3
SELECT name FROM country ORDER BY population ASC LIMIT 3
SELECT name FROM country ORDER BY population ASC LIMIT 3
SELECT count(DISTINCT Code) FROM country WHERE continent = 'Asia'
SELECT count(*) FROM country WHERE Continent = 'Asia'
SELECT name  FROM country  WHERE continent = 'Europe' AND population = 80000
SELECT name FROM country WHERE continent = 'Europe' AND population = 80000
SELECT sum(population) AS total_population, avg(surfacearea) AS average_area FROM country WHERE continent = 'North America' AND surfacearea > 3000
SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000
SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000
SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000;
SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1
SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1
SELECT T2.name, T1.language  FROM countrylanguage AS T1  JOIN country AS T2 ON T1.CountryCode = T2.Code  GROUP BY T2.name  HAVING T1.Percentage = MAX(T1.Percentage)
SELECT countrycode, language FROM countrylanguage WHERE (countrycode, percentage) IN (   SELECT countrycode, MAX(percentage)   FROM countrylanguage   GROUP BY countrycode ) GROUP BY countrycode
SELECT count(DISTINCT countrylanguage.CountryCode) AS total_countries FROM countrylanguage WHERE language = 'Spanish' AND percentage = (SELECT max(percentage) FROM countrylanguage WHERE language = 'Spanish')
SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T'
SELECT countrycode, MAX(percentage)  FROM countrylanguage  WHERE language = 'Spanish'  GROUP BY countrycode ORDER BY MAX(percentage) DESC LIMIT 1
SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = 'Spanish' GROUP BY countrylanguage.CountryCode HAVING MAX(countrylanguage.Percentage) = (   SELECT MAX(Percentage)   FROM countrylanguage   WHERE Language = 'Spanish' )
SELECT COUNT(DISTINCT Conductor_ID) FROM conductor
SELECT COUNT(*) FROM conductor
SELECT conductor.Name FROM conductor ORDER BY conductor.Age ASC
SELECT name FROM conductor ORDER BY age ASC
SELECT name FROM conductor WHERE nationality <> 'USA'
SELECT name FROM conductor WHERE nationality <> 'USA'
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC
SELECT AVG(Attendance) FROM show
SELECT avg(Attendance) FROM show
SELECT MAX(Share), MIN(Share) FROM Performance WHERE Type <> 'Live final'
SELECT max(Share), min(Share) FROM performance WHERE Type <> 'Live final';
SELECT COUNT(DISTINCT Nationality) FROM conductor
SELECT COUNT(DISTINCT Nationality) AS NumOfNationalities FROM conductor
SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC
SELECT conductor.Name  FROM conductor  ORDER BY conductor.Year_of_Work DESC
SELECT name  FROM conductor  ORDER BY year_of_work DESC  LIMIT 1
SELECT c.Name FROM conductor c GROUP BY c.Name ORDER BY COUNT(c.Year_of_Work) DESC LIMIT 1
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID
SELECT The SQL query to retrieve the names of conductors and the corresponding orchestras they have conducted would be as follows:  ```sql SELECT c.Name AS Conductor_Name, o.Orchestra AS Orchestra_Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID; ```  This query selects the conductor's name from the "conductor" table and the orchestra's name from the "orchestra" table. The JOIN condition connects the two tables based on the conductor ID.
SELECT name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID, conductor.Name HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1
SELECT conductor.Name  FROM conductor  INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID  GROUP BY conductor.Name  HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1
SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id ORDER BY COUNT(DISTINCT orchestra.orchestra_id) DESC LIMIT 1
SELECT conductor.name  FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name ORDER BY COUNT(DISTINCT orchestra.orchestra_id) DESC LIMIT 1
SELECT conductor.Name  FROM conductor  JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID  WHERE orchestra.Year_of_Founded > 2008
SELECT name FROM conductor WHERE conductor_id IN (     SELECT conductor_id     FROM orchestra     WHERE year_of_founded > 2008 )
SELECT record_company, COUNT(DISTINCT orchestra_id) FROM orchestra GROUP BY record_company
SELECT record_company, COUNT(Orchestra_ID)  FROM orchestra  GROUP BY record_company
SELECT major_record_format, COUNT(*) AS format_count FROM orchestra GROUP BY major_record_format ORDER BY format_count ASC
SELECT major_record_format, COUNT(*) AS frequency FROM orchestra GROUP BY major_record_format ORDER BY frequency DESC
SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(DISTINCT orchestra_id) DESC LIMIT 1
SELECT record_company, COUNT(orchestra_id) AS orchestra_count FROM orchestra GROUP BY record_company ORDER BY orchestra_count DESC LIMIT 1
SELECT 
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (     SELECT Orchestra_ID     FROM performance )
SELECT record_company FROM orchestra WHERE year_of_founded < 2003 OR year_of_founded > 2003
SELECT record_company  FROM orchestra WHERE orchestra_id IN (     SELECT orchestra_id FROM orchestra     WHERE year_of_founded < 2003 ) INTERSECT SELECT orchestra_id FROM orchestra WHERE year_of_founded > 2003
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'
SELECT count(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'
SELECT year_of_founded FROM orchestra GROUP BY year_of_founded HAVING COUNT(*) > 1
SELECT year_of_founded  FROM orchestra  INNER JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID GROUP BY orchestra.year_of_founded HAVING COUNT(DISTINCT performance.Performance_ID) > 1
SELECT count(*) FROM Highschooler
SELECT COUNT(*) FROM Highschooler
SELECT name, grade FROM Highschooler
SELECT name, grade FROM Highschooler
SELECT grade FROM Highschooler
SELECT grade FROM Highschooler
SELECT grade FROM Highschooler WHERE name = 'Kyle'
SELECT grade  FROM Highschooler  WHERE name = 'Kyle'
SELECT name FROM Highschooler WHERE grade = 10
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10
SELECT Highschooler.ID FROM Highschooler WHERE name = 'Kyle'
SELECT ID FROM Highschooler WHERE name = 'Kyle'
SELECT COUNT(*) FROM Highschooler WHERE grade = 9 OR grade = 10
SELECT COUNT(*) FROM Highschooler WHERE grade = 9 OR grade = 10
SELECT grade, COUNT(*)  FROM Highschooler  GROUP BY grade
SELECT grade, COUNT(ID)  FROM Highschooler  GROUP BY grade
SELECT grade, COUNT(*) AS count FROM Highschooler GROUP BY grade ORDER BY count DESC LIMIT 1
SELECT grade, COUNT(*) AS count_highschoolers FROM Highschooler GROUP BY grade ORDER BY count_highschoolers DESC LIMIT 1
SELECT Highschooler.grade  FROM Highschooler  GROUP BY grade  HAVING COUNT(*) >= 4
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4
SELECT Highschooler.ID, COUNT(friend_id)  FROM Friend  JOIN Highschooler ON Friend.student_id = Highschooler.ID  GROUP BY Highschooler.ID
SELECT student_id, COUNT(*) FROM Friend GROUP BY student_id
SELECT highschooler.name, COUNT(friend.friend_id) AS num_friends FROM highschooler JOIN friend ON highschooler.ID = friend.student_id GROUP BY highschooler.name
SELECT T1.name, COUNT(T2.friend_id)  FROM Highschooler AS T1  LEFT JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.name
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name ORDER BY COUNT(Friend.friend_id) DESC LIMIT 1
SELECT name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name HAVING COUNT(Friend.friend_id) >= 3
SELECT name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name HAVING COUNT(Friend.friend_id) >= 3
SELECT T2.name FROM Highschooler AS T1  JOIN Friend AS F ON T1.ID = F.student_id  JOIN Highschooler AS T2 ON F.friend_id = T2.ID  WHERE T1.name = 'Kyle'
SELECT T2.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id WHERE T1.name = 'Kyle'
SELECT count(*)  FROM Friend  WHERE friend_id = (   SELECT ID    FROM Highschooler    WHERE name = 'Kyle' )
SELECT count(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT Highschooler.ID  FROM Highschooler  WHERE Highschooler.ID NOT IN (SELECT DISTINCT student_id FROM Friend)
SELECT ID  FROM Highschooler  WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT DISTINCT student_id FROM Friend)
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT h1.ID FROM Highschooler AS h1 WHERE EXISTS (   SELECT *   FROM Friend AS f1   WHERE f1.student_id = h1.ID ) AND EXISTS (   SELECT *   FROM Likes AS l1   WHERE l1.liked_id = h1.ID )
SELECT Highschooler.ID FROM Friend WHERE student_id IN (SELECT student_id FROM Likes)
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id JOIN Likes AS T3 ON T1.ID = T3.liked_id
SELECT h1.name  FROM Highschooler AS h1 JOIN Friend AS f ON h1.ID = f.student_id JOIN Likes AS l ON h1.ID = l.student_id
SELECT student_id, COUNT(*) AS like_count FROM Likes GROUP BY student_id
SELECT student_id, COUNT(*) AS like_count FROM Likes GROUP BY student_id
SELECT H.name, COUNT(L.liked_id) FROM Highschooler AS H JOIN Likes AS L ON H.ID = L.student_id GROUP BY H.name
SELECT highschooler.name, count(likes.liked_id)  FROM highschooler  JOIN likes ON highschooler.ID = likes.student_id  GROUP BY highschooler.name
SELECT name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID ORDER BY COUNT(Likes.liked_id) DESC LIMIT 1
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1
SELECT h.name FROM Highschooler AS h JOIN Likes AS l ON h.ID = l.student_id GROUP BY h.name HAVING COUNT(*) >= 2
SELECT Highschooler.name FROM Highschooler  JOIN Likes ON Highschooler.ID = Likes.student_id  GROUP BY Highschooler.ID  HAVING COUNT(Likes.liked_id) >= 2
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id WHERE h.grade > 5 GROUP BY h.name HAVING count(f.friend_id) >= 2
SELECT name FROM Highschooler WHERE grade > 5 AND ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) >= 2)
SELECT COUNT(*) AS like_count FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT COUNT(*) AS num_likes FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID WHERE Highschooler.name = 'Kyle';
SELECT AVG(grade) FROM Highschooler WHERE ID IN (   SELECT DISTINCT student_id   FROM Friend ) AND ID IN (   SELECT DISTINCT student_id   FROM Likes )
SELECT AVG(grade)  FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend) GROUP BY ID
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT DISTINCT student_id FROM Friend)
SELECT min(grade)  FROM Highschooler  WHERE ID NOT IN (   SELECT student_id    FROM Friend    UNION    SELECT friend_id    FROM Friend )
SELECT state  FROM Owners  WHERE state IN (SELECT DISTINCT state FROM Professionals)
SELECT state  FROM professionals  WHERE state IN (SELECT DISTINCT state FROM owners)
SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (     SELECT professional_id     FROM Treatments     GROUP BY professional_id     HAVING count(*) > 2 )
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) > 2 )
SELECT name FROM Dogs WHERE dog_id NOT IN (     SELECT dog_id     FROM Treatments     WHERE cost_of_treatment > 1000 )
SELECT name FROM Dogs WHERE owner_id NOT IN (SELECT owner_id FROM Treatments WHERE cost_of_treatment > 1000)
SELECT owners.first_name FROM owners LEFT JOIN dogs ON owners.first_name = dogs.name WHERE dogs.name IS NULL AND owners.first_name NOT IN (   SELECT professionals.first_name   FROM professionals )
SELECT DISTINCT professionals.first_name FROM professionals LEFT JOIN dogs ON professionals.first_name = dogs.name LEFT JOIN owners ON professionals.first_name = owners.first_name WHERE dogs.name IS NULL AND owners.first_name IS NOT NULL AND professionals.first_name NOT IN (SELECT name FROM dogs)
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT owner_id, first_name, last_name FROM Owners GROUP BY owner_id, first_name, last_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT owners.owner_id, owners.first_name, owners.last_name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  GROUP BY owners.owner_id, owners.first_name, owners.last_name  ORDER BY COUNT(dogs.dog_id) DESC  LIMIT 1
SELECT professional_id, role_code, first_name  FROM Professionals  GROUP BY professional_id, role_code, first_name  HAVING COUNT(*) >= 2
SELECT professional_id, role_code, first_name  FROM Professionals  WHERE professional_id IN (SELECT professional_id                            FROM Treatments                            GROUP BY professional_id                            HAVING COUNT(*) >= 2)
SELECT breed_name FROM breeds JOIN dogs ON breeds.breed_code = dogs.breed_code GROUP BY breeds.breed_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT breed_name  FROM Breeds  GROUP BY breed_name  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT T1.owner_id, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id, T1.last_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.last_name ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1
SELECT Treatment_Types.treatment_type_description  FROM Treatment_Types  JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code  GROUP BY Treatment_Types.treatment_type_description  ORDER BY SUM(Treatments.cost_of_treatment) ASC  LIMIT 1
SELECT Treatment_Types.treatment_type_description  FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code GROUP BY Treatments.treatment_type_code, Treatment_Types.treatment_type_description ORDER BY sum(Treatments.cost_of_treatment) ASC LIMIT 1
SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id JOIN charges ON treatments.charge_id = charges.charge_id GROUP BY owners.owner_id, owners.zip_code ORDER BY SUM(charges.charge_amount) DESC LIMIT 1
SELECT owners.owner_id, owners.zip_code FROM owners INNER JOIN dogs ON owners.owner_id = dogs.owner_id INNER JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.zip_code ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1
SELECT professional_id, cell_number  FROM Professionals  GROUP BY professional_id, cell_number  HAVING COUNT(DISTINCT treatment_type_code) >= 2
SELECT professional_id, cell_number  FROM Professionals  WHERE professional_id IN (     SELECT professional_id      FROM Treatments      GROUP BY professional_id      HAVING COUNT(DISTINCT treatment_type_code) >= 2 )
SELECT T1.first_name, T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT first_name, last_name FROM Professionals WHERE professional_id IN (     SELECT DISTINCT professional_id     FROM Treatments     WHERE cost_of_treatment < (         SELECT avg(cost_of_treatment)         FROM Treatments     ) )
SELECT treatments.date_of_treatment, professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id
SELECT date_of_treatment, professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id
SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description  FROM treatments  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT cost_of_treatment, treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code
SELECT owners.first_name, owners.last_name, sizes.size_description  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  JOIN sizes ON dogs.size_code = sizes.size_code
SELECT owners.first_name, dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id
SELECT owners.first_name, dogs.name  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id
SELECT T2.name, T1.date_of_treatment FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.dog_id = T2.dog_id JOIN Breeds AS B ON T2.breed_code = B.breed_code WHERE B.breed_code = (     SELECT breed_code     FROM Breeds     ORDER BY breed_code DESC     LIMIT 1 ) ORDER BY T1.date_of_treatment ASC LIMIT 1
SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY dogs.name HAVING COUNT(DISTINCT breeds.breed_code) = (     SELECT COUNT(DISTINCT breed_code) FROM breeds ) ORDER BY COUNT(treatments.treatment_id) ASC LIMIT 1
SELECT owners.first_name, dogs.name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id WHERE owners.state = 'Virginia'
SELECT T2.first_name, T1.name  FROM Dogs AS T1  JOIN Owners AS T2 ON T1.owner_id = T2.owner_id  WHERE T2.state = 'Virginia'
SELECT T1.date_arrived, T1.date_departed  FROM Dogs AS T1  JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id
SELECT T1.date_arrived, T1.date_departed  FROM Dogs AS T1  JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id
SELECT last_name FROM Owners  WHERE owner_id = (   SELECT owner_id    FROM Dogs    ORDER BY date_of_birth ASC    LIMIT 1 )
SELECT last_name FROM owners WHERE owner_id = (     SELECT owner_id     FROM dogs     WHERE date_of_birth = (         SELECT MIN(date_of_birth)         FROM dogs     ) ) ORDER BY owner_id LIMIT 1
SELECT email_address  FROM Professionals  WHERE state = 'Hawaii' OR state = 'Wisconsin'
SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'
SELECT date_arrived, date_departed  FROM Dogs
SELECT date_arrived, date_departed FROM Dogs
SELECT COUNT(DISTINCT dog_id) FROM Treatments
SELECT COUNT(DISTINCT dog_id) FROM Treatments
SELECT COUNT(DISTINCT professional_id) FROM Professionals
SELECT COUNT(DISTINCT professional_id) AS num_professionals FROM Treatments
SELECT role_code, street, city, state  FROM Professionals  WHERE city LIKE '%West%'
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'
SELECT owners.first_name, owners.last_name, owners.email_address  FROM owners  WHERE owners.state LIKE '%North%'
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(*) AS dog_count FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT Treatments.cost_of_treatment  FROM Treatments  ORDER BY Treatments.date_of_treatment DESC  LIMIT 1
SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment DESC LIMIT 1
SELECT COUNT(*) FROM Dogs WHERE Dogs.dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT count(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs)
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs WHERE date_departed IS NULL);
SELECT COUNT(professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT count(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT Dogs.name, Dogs.age, Dogs.weight  FROM Dogs  WHERE Dogs.abandoned_yn = 1
SELECT name, age, weight  FROM Dogs  WHERE abandoned_yn = 1
SELECT AVG(age) FROM Dogs
SELECT AVG(age) FROM Dogs
SELECT MAX(age) FROM Dogs
SELECT MAX(age) FROM Dogs
SELECT charge_type, charge_amount FROM Charges
SELECT charge_type, charge_amount  FROM Charges
SELECT charge_type, max(charge_amount) FROM Charges
SELECT charge_amount  FROM Charges  ORDER BY charge_amount DESC  LIMIT 1
SELECT email_address, cell_number, home_phone FROM Professionals
SELECT email_address, cell_number, home_phone FROM Professionals
SELECT breed_name, size_description  FROM Breeds, Sizes
SELECT breed_code, size_code FROM Dogs GROUP BY breed_code, size_code
SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT COUNT(DISTINCT Singer_ID) FROM singer
SELECT COUNT(*) FROM singer
SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions ASC
SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions ASC
SELECT birth_year, citizenship FROM singer
SELECT birth_year, citizenship FROM singer
SELECT name FROM singer WHERE citizenship <> 'France'
SELECT name FROM singer WHERE citizenship <> 'French'
SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949
SELECT singer.Name FROM singer WHERE singer.Birth_Year = 1948 OR singer.Birth_Year = 1949
SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1
SELECT name  FROM singer  ORDER BY Net_Worth_Millions DESC  LIMIT 1
SELECT citizenship, COUNT(DISTINCT Singer_ID) FROM singer GROUP BY citizenship
SELECT citizenship, COUNT(*)  FROM singer  GROUP BY citizenship
SELECT citizenship, COUNT(*) AS count  FROM singer  GROUP BY citizenship  ORDER BY count DESC  LIMIT 1
SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1
SELECT citizenship, MAX(net_worth_millions)  FROM singer  GROUP BY citizenship
SELECT citizenship, MAX(Net_Worth_Millions)  FROM singer  GROUP BY citizenship
SELECT title, name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID
SELECT song.title, singer.name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID
SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000
SELECT singer.Name FROM singer JOIN song ON song.Singer_ID = singer.Singer_ID WHERE song.Sales > 300000;
SELECT name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Singer_ID, singer.Name HAVING count(song.Song_ID) > 1
SELECT name FROM singer GROUP BY name HAVING COUNT(*) > 1
SELECT singer.Name, SUM(song.Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name
SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name
SELECT name  FROM singer  WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song)
SELECT name FROM singer WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song)
SELECT DISTINCT citizenship  FROM singer  WHERE birth_year < 1945 OR birth_year > 1955
SELECT The given SQLite SQL query has a logical issue. It is checking for birth years that are both before 1945 and after 1955, which is not possible.   To fix the query and retrieve the citizenships shared by singers with a birth year before 1945 or after 1955, you can use the following SQL query:  ```sql SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 OR birth_year > 1955; ```  This query will select distinct citizenship values from the "singer" table where the birth year is either less than 1945 or greater than 1955.
SELECT count(*) FROM Other_Available_Features
SELECT feature_type_name  FROM ref_feature_types  JOIN other_available_features ON ref_feature_types.feature_type_code = other_available_features.feature_type_code WHERE other_available_features.feature_name = 'AirCon'
SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code = [property_type_code]
SELECT property_name FROM Properties WHERE (property_type_code = 'Apartment' OR property_type_code = 'House')   AND room_count > 1
