SELECT COUNT(Singer_ID) FROM singer
SELECT COUNT(*) FROM singer
SELECT name, country, age  FROM singer  ORDER BY age DESC
SELECT singer.Name, singer.Country, singer.Age FROM singer ORDER BY singer.Age DESC
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'
SELECT avg(Age), min(Age), max(Age)  FROM singer  WHERE Country = 'France'
SELECT singer.Name, singer.Song_release_year FROM singer ORDER BY singer.Age LIMIT 1
SELECT s.song_Name, s.Song_release_year FROM singer s WHERE s.Age = (SELECT MIN(Age) FROM singer)
SELECT DISTINCT Country  FROM singer  WHERE Age > 20
SELECT DISTINCT Country FROM singer WHERE Age > 20
SELECT singer.Country, COUNT(*) AS Singer_Count FROM singer GROUP BY singer.Country
SELECT country, COUNT(DISTINCT Singer_ID)  FROM singer  GROUP BY country
SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer)
SELECT s.song_Name FROM singer s WHERE s.Age > (SELECT AVG(singer.Age) FROM singer)
SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;
SELECT Location, Name  FROM stadium  WHERE Capacity BETWEEN 5000 AND 10000
SELECT max(Capacity), avg(Capacity) FROM stadium
SELECT avg(Capacity), max(Capacity) FROM stadium
SELECT name, capacity FROM stadium WHERE average = (   SELECT MAX(average)   FROM stadium )
SELECT stadium.Name, stadium.Capacity FROM stadium ORDER BY stadium.Average DESC LIMIT 1
SELECT COUNT(DISTINCT concert_ID) AS concert_count FROM concert WHERE Year IN (2014, 2015)
SELECT COUNT(*) FROM concert WHERE Year = 2014 OR Year = 2015
SELECT stadium.Name, COUNT(concert.concert_ID) FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name
SELECT stadium.Name, COUNT(concert.concert_ID) AS ConcertCount FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name
SELECT stadium.Name, stadium.Capacity  FROM stadium  JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year >= 2014 GROUP BY stadium.Name, stadium.Capacity ORDER BY COUNT(concert.Concert_ID) DESC LIMIT 1
SELECT name, capacity  FROM stadium  WHERE stadium_id = (     SELECT stadium_id      FROM concert      WHERE year > 2013      GROUP BY stadium_id      ORDER BY COUNT(*) DESC      LIMIT 1 )
SELECT Year, COUNT(*) AS Concert_Count FROM concert GROUP BY Year ORDER BY Concert_Count DESC LIMIT 1
SELECT concert.year FROM concert GROUP BY concert.year ORDER BY COUNT(*) DESC LIMIT 1
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
SELECT DISTINCT Country  FROM singer  WHERE Age > 40   UNION   SELECT DISTINCT Country  FROM singer  WHERE Age < 30
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)
SELECT name FROM stadium WHERE stadium_id NOT IN (   SELECT stadium_id   FROM concert   WHERE Year = 2014 )
SELECT concert_name, theme, COUNT(singer.Singer_ID)  FROM concert  JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID  GROUP BY concert.concert_ID
SELECT concert_name, theme, COUNT(DISTINCT singer_id)  FROM concert  JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID  GROUP BY concert_name, theme
SELECT singer.Name, COUNT(singer_in_concert.Singer_ID) AS Concert_Count FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Singer_ID
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) FROM singer_in_concert JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID GROUP BY singer.Name
SELECT T1.Name FROM singer AS T1  JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID  JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID  WHERE T3.Year = 2014
SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID WHERE T3.Year = 2014
SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%'
SELECT name, country FROM singer WHERE Song_Name LIKE '%Hey%';
SELECT name, location  FROM stadium  WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE year = 2014)    AND stadium_id IN (SELECT stadium_id FROM concert WHERE year = 2015)  GROUP BY name, location
SELECT name, location FROM stadium WHERE stadium_id IN (   SELECT stadium_id   FROM concert   WHERE year = 2014 )  AND stadium_id IN (   SELECT stadium_id   FROM concert   WHERE year = 2015 )
SELECT COUNT(DISTINCT concert_ID) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)
SELECT count(DISTINCT concert.concert_ID)  FROM concert  WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)
SELECT COUNT(*) FROM Pets WHERE weight > 10
SELECT count(*) FROM Pets WHERE weight > 10
SELECT pets.weight FROM pets WHERE pets.pet_type = 'dog' AND pets.pet_age = (     SELECT min(pets.pet_age)     FROM pets     WHERE pets.pet_type = 'dog' )
SELECT min(weight) FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT min(pet_age) FROM Pets WHERE PetType = 'dog')
SELECT MAX(weight) AS max_weight, PetType FROM Pets GROUP BY PetType
SELECT MAX(weight) AS max_weight, PetType AS pet_type FROM Pets GROUP BY PetType
SELECT count(has_pet.petid)  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  WHERE student.age > 20
SELECT COUNT(DISTINCT has_pet.petid) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20
SELECT COUNT(pets.petid) FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE student.sex = 'F'  AND pets.pettype = 'dog'
SELECT count(DISTINCT has_pet.petid) FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN student ON has_pet.stuid = student.stuid WHERE pets.pettype = 'dog' AND student.sex = 'female'
SELECT count(DISTINCT PetType) FROM Pets
SELECT count(DISTINCT PetType) FROM Pets
SELECT DISTINCT fname FROM Student WHERE StuID IN (     SELECT StuID     FROM Has_Pet     WHERE PetID IN (         SELECT PetID         FROM Pets         WHERE PetType IN ('cat', 'dog')     ) )
SELECT fname FROM Student WHERE StuID IN (     SELECT StuID     FROM Has_Pet     JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE PetType = 'cat' OR PetType = 'dog' )
SELECT DISTINCT fname FROM Student WHERE StuID IN (   SELECT StuID FROM Has_Pet   WHERE PetID IN (     SELECT PetID FROM Pets     WHERE PetType = 'cat' OR PetType = 'dog'   )   GROUP BY StuID   HAVING COUNT(DISTINCT PetID) = 2 )
SELECT fname FROM Student WHERE StuID IN (     SELECT StuID     FROM Has_Pet     INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE PetType = 'cat' ) AND StuID IN (     SELECT StuID     FROM Has_Pet     INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE PetType = 'dog' )
SELECT major, age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat')
SELECT Student.Major, Student.Age  FROM Student  WHERE Student.StuID NOT IN (   SELECT Has_Pet.StuID    FROM Has_Pet    JOIN Pets ON Has_Pet.PetID = Pets.PetID    WHERE Pets.PetType = 'cat' )
SELECT Student.StuID  FROM Student WHERE Student.StuID NOT IN (     SELECT Has_Pet.StuID      FROM Has_Pet      INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE Pets.PetType = 'cat' )
SELECT Student.StuID  FROM Student  WHERE Student.StuID NOT IN (   SELECT Has_Pet.StuID    FROM Has_Pet    JOIN Pets ON Has_Pet.PetID = Pets.PetID    WHERE Pets.PetType = 'cat' )
SELECT fname, age  FROM Student  WHERE StuID IN (   SELECT StuID    FROM Has_Pet    JOIN Pets ON Has_Pet.PetID = Pets.PetID    WHERE Pets.PetType = 'dog' )  AND StuID NOT IN (   SELECT StuID    FROM Has_Pet    JOIN Pets ON Has_Pet.PetID = Pets.PetID    WHERE Pets.PetType = 'cat' )
SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' AND student.stuid NOT IN (     SELECT student.stuid     FROM student     JOIN has_pet ON student.stuid = has_pet.stuid     JOIN pets ON has_pet.petid = pets.petid     WHERE pets.pettype = 'cat' );
SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.pet_age ASC LIMIT 1
SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.pet_age ASC LIMIT 1
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1
SELECT Pets.PetType, AVG(Pets.pet_age), MAX(Pets.pet_age) FROM Pets GROUP BY Pets.PetType
SELECT AVG(pet_age), MAX(pet_age), PetType FROM Pets GROUP BY PetType
SELECT pettype, AVG(weight)  FROM Pets  GROUP BY pettype
SELECT pets.pettype, AVG(pets.weight)  FROM pets  GROUP BY pets.pettype
SELECT fname, age  FROM Student  INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID
SELECT fname, age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)
SELECT pets.petid FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.lname = 'Smith'
SELECT petid FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE LName = 'Smith')
SELECT COUNT(DISTINCT T1.PetID) AS pet_count, T1.StuID FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID
SELECT student.StuID, COUNT(pets.PetID)  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  GROUP BY Student.StuID
SELECT fname, sex FROM Student WHERE StuID IN (   SELECT StuID   FROM Has_Pet   GROUP BY StuID   HAVING count(*) > 1 )
SELECT fname, sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING COUNT(*) > 1
SELECT student.lname FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'cat' AND pets.pet_age = 3
SELECT student.lname  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON pets.petid = has_pet.petid  WHERE pets.pettype = 'cat'  AND pets.pet_age = 3
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT count(*) FROM continents
SELECT COUNT(DISTINCT ContId) FROM continents
SELECT contid, continent, COUNT(countryid) AS country_count FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY contid, continent;
SELECT contid, continent, COUNT(countryname) AS country_count FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY contid, continent
SELECT count(DISTINCT CountryName) FROM countries
SELECT COUNT(*) FROM countries
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.Model) AS ModelCount FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.ModelId) AS ModelCount FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id
SELECT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model WHERE T1.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)
SELECT model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)
SELECT model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT model FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  WHERE Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970
SELECT Maker FROM car_makers JOIN cars_data ON car_makers.Id = cars_data.Id WHERE cars_data.Year = 1970
SELECT car_names.Make, MIN(cars_data.Year) AS ProductionYear FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_names.Make
SELECT car_makers.Maker, MIN(cars_data.Year)  FROM car_makers  JOIN car_names ON car_makers.Id = car_names.MakeId  JOIN cars_data ON car_names.MakeId = cars_data.Id  GROUP BY car_makers.Maker
SELECT DISTINCT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Year > 1980
SELECT DISTINCT car_names.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980
SELECT continents.continent, COUNT(DISTINCT car_makers.Id) AS car_maker_count  FROM continents  JOIN countries ON continents.ContId = countries.Continent  JOIN car_makers ON car_makers.Country = countries.CountryId  GROUP BY continents.continent
SELECT continents.Continent, COUNT(car_makers.Id)  FROM continents  JOIN countries ON continents.ContId = countries.Continent  JOIN car_makers ON car_makers.Country = countries.CountryId  GROUP BY continents.Continent
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1
SELECT countries.CountryName  FROM countries  JOIN car_makers ON countries.CountryId = car_makers.Country  GROUP BY countries.CountryName  ORDER BY COUNT(car_makers.Maker) DESC  LIMIT 1
SELECT COUNT(DISTINCT T3.ModelId) AS ModelCount, T1.FullName AS MakerFullName FROM car_makers AS T1 JOIN model_list AS T3 ON T1.Id = T3.Maker GROUP BY T1.FullName
SELECT COUNT(car_names.Model) AS NumModels, car_makers.Id, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_makers.Id, car_makers.FullName
SELECT cars_data.Accelerate FROM car_names INNER JOIN cars_data ON car_names.MakeId = cars_data.Id INNER JOIN model_list ON car_names.Model = model_list.Model INNER JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_names.Make = 'amc hornet'   AND car_names.Model = 'amc hornet sportabout (sw)'
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_names.Make = 'amc hornet sportabout (sw)' AND model_list.Model = 'amc hornet'
SELECT count(DISTINCT Maker) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'france')
SELECT COUNT(DISTINCT car_makers.Id) AS num_of_makers FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France'
SELECT COUNT(DISTINCT car_names.Model) FROM car_names JOIN model_list ON car_names.Model = model_list.ModelId JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'usa'
SELECT count(DISTINCT car_names.Model) FROM car_names JOIN car_makers ON car_names.MakeId = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'United States'
SELECT AVG(MPG) AS AverageMPG FROM cars_data WHERE Cylinders = 4
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4
SELECT min(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974
SELECT MIN(Weight)  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE cylinders = 8    AND year = 1974
SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker
SELECT car_makers.Maker, model_list.Model FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker
SELECT countryname, countryid  FROM countries  WHERE countryid IN (SELECT DISTINCT country FROM car_makers)
SELECT countries.CountryName, countries.CountryId FROM countries WHERE EXISTS (SELECT *               FROM car_makers               WHERE countries.CountryId = car_makers.Country)
SELECT COUNT(Id) FROM cars_data WHERE Horsepower > 150
SELECT count(*) FROM cars_data WHERE Horsepower > 150
SELECT year, AVG(weight) AS average_weight FROM cars_data GROUP BY year
SELECT avg(Weight) AS average_weight, Year FROM cars_data GROUP BY Year
SELECT DISTINCT CountryName  FROM countries  JOIN car_makers ON countries.CountryId = car_makers.Country  WHERE countries.Continent = 'Europe'  GROUP BY countries.CountryId  HAVING COUNT(DISTINCT car_makers.Id) >= 3
SELECT countries.CountryName FROM countries JOIN continents ON countries.Continent = continents.ContId JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3 WHERE continents.Continent = 'Europe';
SELECT MAX(cars_data.Horsepower) AS MaxHorsepower, car_makers.Maker AS Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3 GROUP BY car_makers.Maker
SELECT MAX(cars_data.Horsepower) AS max_horsepower, car_makers.Maker AS make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3 GROUP BY car_makers.Maker
SELECT cars_data.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model ORDER BY cars_data.MPG DESC LIMIT 1
SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId ORDER BY cars_data.MPG DESC LIMIT 1
SELECT avg(Horsepower) FROM cars_data WHERE Year < 1980
SELECT avg(Horsepower) FROM cars_data WHERE Year < 1980
SELECT AVG(cars_data.Edispl) FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.Maker = 'volvo'
SELECT avg(cars_data.Edispl)  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.Maker = 'volvo'
SELECT cylinders, MAX(accelerate)  FROM cars_data  GROUP BY cylinders
SELECT MAX(accelerate) FROM cars_data GROUP BY Cylinders
SELECT model FROM model_list GROUP BY model ORDER BY COUNT(*) DESC LIMIT 1
SELECT model FROM model_list GROUP BY model ORDER BY COUNT(DISTINCT ModelId) DESC LIMIT 1
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4
SELECT count(*)  FROM cars_data  WHERE Cylinders > 4
SELECT count(*) FROM cars_data WHERE Year = 1980
SELECT count(*) FROM cars_data WHERE Year = 1980
SELECT COUNT(DISTINCT model) FROM model_list  WHERE Maker = (   SELECT Id FROM car_makers    WHERE FullName = 'American Motor Company' )
SELECT count(model_list.Model) FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  WHERE car_makers.FullName = 'American Motor Company'
SELECT fullname, id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY fullname, id HAVING COUNT(model_list.Model) > 3
SELECT car_makers.Maker, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker, car_makers.Id HAVING COUNT(DISTINCT model_list.Model) > 3
SELECT DISTINCT model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500
SELECT The given SQLite SQL query has some issues. Let's fix them according to the instructions provided.  Fixed SQLite SQL query: ```sql SELECT DISTINCT model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500; ```  Explanation: 1) We need to join the tables using the appropriate foreign key relationships. In this case, we need to join the tables `model_list`, `car_makers`, `car_names`, and `cars_data`. 2) We use the foreign keys `model_list.Maker = car_makers.Id`, `model_list.Model = car_names.Model`, and `car_names.MakeId = cars_data.Id` to establish the necessary joins. 3) The condition `car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500` is used to filter the results based on the car maker being "General Motors" or the weight being greater than 3500. 4) Finally, we select the distinct models from the `model_list` table.  Please note that I've assumed the column `weight` is from the `cars_data` table since it is not explicitly mentioned in the available tables. If there is another table/column for weight, please let me know so I can adjust the query accordingly.
SELECT DISTINCT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000
SELECT DISTINCT Year FROM cars_data WHERE (Weight < 4000 OR Weight > 3000)
SELECT Horsepower  FROM cars_data  WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)
SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Accelerate = (   SELECT MAX(Accelerate) FROM cars_data )
SELECT cylinders FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  WHERE model_list.model = 'volvo'  AND cars_data.accelerate = (SELECT MIN(accelerate) FROM cars_data                              JOIN car_names ON cars_data.id = car_names.makeid                              JOIN model_list ON car_names.model = model_list.model                              WHERE model_list.model = 'volvo')
SELECT MIN(cars_data.Cylinders)  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.Maker = 'volvo'  ORDER BY cars_data.Accelerate  LIMIT 1
SELECT count(*) FROM cars_data WHERE accelerate > (SELECT max(Horsepower) FROM cars_data)
SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT count(DISTINCT T1.CountryId)  FROM countries AS T1  JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count(DISTINCT T2.Id) > 2
SELECT COUNT(DISTINCT Country) AS NumberOfCountries FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Maker) > 2
SELECT count(*) FROM cars_data WHERE Cylinders > 6
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6
SELECT model_list.Model FROM cars_data JOIN model_list ON cars_data.Id = model_list.MakeId WHERE cars_data.Cylinders = 4 GROUP BY model_list.Model ORDER BY cars_data.Horsepower DESC LIMIT 1
SELECT model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 4 GROUP BY model HAVING cars_data.Horsepower = MAX(cars_data.Horsepower)
SELECT car_names.makeid, car_names.make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data) AND cars_data.cylinders <= 3
SELECT car_names.MakeId, car_makers.Maker FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Horsepower > (     SELECT MIN(Horsepower) FROM cars_data ) AND cars_data.Cylinders < 4;
SELECT max(MPG) FROM cars_data WHERE Cylinders = 8 AND Year < 1980
SELECT max(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker != 'Ford Motor Company'
SELECT model FROM model_list JOIN car_names ON model_list.makeid = car_names.makeid JOIN cars_data ON cars_data.id = car_names.makeid JOIN car_makers ON car_makers.id = model_list.maker WHERE cars_data.weight < 3500 AND car_makers.maker <> 'Ford' GROUP BY model
SELECT countryname  FROM countries  WHERE countryid NOT IN (SELECT country FROM car_makers)
SELECT countryname FROM countries WHERE countryid NOT IN (SELECT country FROM car_makers)
SELECT car_makers.Id, car_makers.Maker  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  GROUP BY car_makers.Id, car_makers.Maker  HAVING COUNT(DISTINCT model_list.ModelId) >= 2  AND COUNT(DISTINCT car_makers.Id) > 3
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT model_list.ModelId) > 1 AND COUNT(DISTINCT car_names.MakeId) > 3
SELECT countryid, countryname  FROM countries  WHERE countryid IN (SELECT country                      FROM car_makers                      GROUP BY country                      HAVING COUNT(*) > 3)     OR countryid IN (SELECT countries.countryid                      FROM car_names                      JOIN model_list ON car_names.model = model_list.Model                      JOIN car_makers ON model_list.Maker = car_makers.Id                      JOIN countries ON car_makers.Country = countries.CountryId                      WHERE car_names.model = 'fiat')  GROUP BY countryid, countryname
SELECT countryid, countryname  FROM countries  JOIN car_makers ON countries.CountryId = car_makers.Country  GROUP BY countryid, countryname  HAVING COUNT(*) > 3 OR EXISTS (SELECT 1 FROM car_names JOIN model_list ON car_names.Model = model_list.ModelId WHERE car_names.Make = 'fiat' AND model_list.Maker = car_makers.Id)
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT abbreviation FROM airlines WHERE Airline = "JetBlue Airways"
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways'
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'
SELECT Airline, Abbreviation  FROM airlines  WHERE Country = 'USA'
SELECT airportcode, airportname  FROM airports  WHERE city = 'Anthony'
SELECT AirportCode, AirportName  FROM airports  WHERE City = 'Anthony'
SELECT count(DISTINCT uid) FROM airlines
SELECT count(*) FROM airlines
SELECT COUNT(*) FROM airports
SELECT count(*) FROM airports
SELECT count(*) FROM flights
SELECT count(*) AS num_flights FROM flights
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
SELECT COUNT(*) FROM airlines WHERE Country = 'USA'
SELECT COUNT(uid) FROM airlines WHERE Country = 'USA'
SELECT City, Country FROM airports WHERE AirportName = 'Alton'
SELECT City, Country FROM airports WHERE AirportName = 'Alton'
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
SELECT AirportName FROM airports WHERE City = 'Aberdeen'
SELECT AirportName FROM airports WHERE City = 'Aberdeen'
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'
SELECT count(*)  FROM flights  JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen'
SELECT COUNT(*) FROM flights  JOIN airports ON airports.AirportCode = flights.DestAirport WHERE airports.City = 'Aberdeen'
SELECT COUNT(*) FROM flights WHERE DestAirport = (   SELECT AirportCode   FROM airports   WHERE City = 'Aberdeen' )
SELECT count(*) FROM flights JOIN airports AS T1 ON flights.SourceAirport = T1.AirportCode JOIN airports AS T2 ON flights.DestAirport = T2.AirportCode WHERE T1.City = 'Aberdeen' AND T2.City = 'Ashley'
SELECT COUNT(*) FROM flights WHERE SourceAirport IN (   SELECT AirportCode FROM airports WHERE AirportName = 'Aberdeen' ) AND DestAirport IN (   SELECT AirportCode FROM airports WHERE AirportName = 'Ashley' )
SELECT count(*) FROM flights WHERE Airline = 'JetBlue Airways'
SELECT count(*) FROM flights WHERE Airline = 'JetBlue Airways'
SELECT count(*) FROM flights JOIN airlines ON flights.airline = airlines.Airline WHERE airlines.Airline = 'United Airlines' AND flights.DestAirport = 'ASY'
SELECT COUNT(*) FROM flights  JOIN airlines ON flights.Airline = airlines.Airline  WHERE airlines.Airline = 'United Airlines'  AND flights.DestAirport = 'ASY'
SELECT count(*) FROM flights JOIN airlines ON flights.airline = airlines.Airline JOIN airports ON flights.sourceairport = airports.AirportCode WHERE airports.AirportCode = 'AHD' AND airlines.Airline = 'United Airlines'
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'AHD' AND Airline = 'United Airlines'
SELECT count(*)  FROM flights  JOIN airports ON flights.destairport = airports.airportcode  JOIN airlines ON flights.airline = airlines.uid  WHERE airports.city = 'Aberdeen'  AND airlines.airline = 'United Airlines'
SELECT count(*) FROM flights JOIN airlines ON flights.airline = airlines.Airline JOIN airports ON flights.destairport = airports.AirportCode WHERE airlines.Abbreviation = 'UA' AND airports.City = 'Aberdeen';
SELECT airports.City  FROM airports  JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.City ORDER BY COUNT(flights.DestAirport) DESC LIMIT 1
SELECT airports.City  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  GROUP BY airports.City  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT airports.City  FROM airports  JOIN flights ON airports.AirportCode = flights.SourceAirport  GROUP BY airports.City  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY COUNT(flights.SourceAirport) DESC LIMIT 1
SELECT airports.AirportCode  FROM airports  JOIN flights ON flights.DestAirport = airports.AirportCode  GROUP BY airports.AirportCode  ORDER BY COUNT(flights.DestAirport) DESC  LIMIT 1
SELECT airports.AirportCode  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  GROUP BY airports.AirportCode  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT airports.AirportCode FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport GROUP BY airports.AirportCode ORDER BY COUNT(flights.FlightNo) LIMIT 1
SELECT airports.AirportCode  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  GROUP BY airports.AirportCode  ORDER BY COUNT(*) ASC  LIMIT 1
SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline ORDER BY num_flights DESC LIMIT 1
SELECT flights.Airline  FROM flights  GROUP BY flights.Airline  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT abbreviation, country FROM airlines GROUP BY abbreviation, country ORDER BY count(*) ASC LIMIT 1
SELECT abbreviation, country FROM airlines JOIN flights ON airlines.Airline = flights.Airline GROUP BY airlines.Airline ORDER BY COUNT(*) ASC LIMIT 1
SELECT DISTINCT airlines.Airline  FROM airlines  JOIN flights ON flights.Airline = airlines.uid  WHERE flights.SourceAirport = 'AHD' OR flights.DestAirport = 'AHD'
SELECT airlines.Airline FROM flights  JOIN airlines ON flights.Airline = airlines.uid  WHERE flights.SourceAirport = 'AHD'
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD'
SELECT airlines.Airline  FROM airlines  WHERE EXISTS (     SELECT *      FROM flights      JOIN airports ON flights.DestAirport = airports.AirportCode      WHERE airports.AirportCode = 'AHD' )
SELECT DISTINCT A1.airline FROM airlines A1 JOIN flights F1 ON A1.uid = F1.airline JOIN airports AP1 ON F1.sourceairport = AP1.airportcode AND AP1.airportcode = 'APG' JOIN flights F2 ON A1.uid = F2.airline JOIN airports AP2 ON F2.sourceairport = AP2.airportcode AND AP2.airportcode = 'CVO' WHERE F1.destairport = 'CVO' AND F2.destairport = 'APG'
SELECT airline FROM airlines  INNER JOIN flights ON airlines.uid = flights.Airline  WHERE flights.SourceAirport IN ('APG', 'CVO') AND flights.DestAirport IN ('APG', 'CVO')  GROUP BY airlines.airline
SELECT airlines.Airline FROM airlines WHERE EXISTS (     SELECT * FROM flights     WHERE SourceAirport = 'CVO' AND airlines.uid = flights.Airline ) AND NOT EXISTS (     SELECT * FROM flights     WHERE SourceAirport = 'APG' AND airlines.uid = flights.Airline )
SELECT airline FROM airlines WHERE uid IN (   SELECT Airline   FROM flights   WHERE SourceAirport = 'CVO' ) AND uid NOT IN (   SELECT Airline   FROM flights   WHERE SourceAirport = 'APG' )
SELECT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  GROUP BY airlines.Airline  HAVING COUNT(flights.FlightNo) >= 10
SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10
SELECT airlines.Airline FROM airlines  JOIN flights ON airlines.uid = flights.Airline  GROUP BY airlines.uid, airlines.Airline  HAVING COUNT(flights.FlightNo) < 200
SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation GROUP BY airlines.Airline HAVING COUNT(flights.FlightNo) < 200
SELECT flights.FlightNo  FROM flights  JOIN airlines ON flights.Airline = airlines.Airline  WHERE airlines.Airline = "United Airlines"
SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = 'United Airlines'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'APG'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'APG'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = "Aberdeen";
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City IN ('Aberdeen', 'Abilene')
SELECT COUNT(DISTINCT FlightNo) FROM flights WHERE DestAirport IN (     SELECT AirportCode FROM airports WHERE AirportName IN ('Aberdeen', 'Abilene') )
SELECT AirportName FROM airports WHERE AirportCode NOT IN (   SELECT SourceAirport   FROM flights ) AND AirportCode NOT IN (   SELECT DestAirport   FROM flights )
SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights) AND airportcode NOT IN (SELECT destairport FROM flights)
SELECT COUNT(Employee_ID) AS Total_Employees FROM employee
SELECT count(*) FROM employee
SELECT employee.Name  FROM employee  ORDER BY employee.Age ASC
SELECT name FROM employee ORDER BY Age ASC
SELECT city, COUNT(*) AS employee_count FROM employee GROUP BY city
SELECT employee.City, COUNT(*) FROM employee GROUP BY employee.City
SELECT employee.city  FROM employee  WHERE age < 30  GROUP BY employee.city  HAVING count(DISTINCT employee.employee_id) > 1
SELECT city  FROM employee  WHERE age < 30  GROUP BY city  HAVING count(*) > 1
SELECT COUNT(*) AS shop_count, location FROM shop GROUP BY location
SELECT shop.Location, COUNT(*) FROM shop GROUP BY shop.Location
SELECT manager_name, district FROM shop WHERE number_products = (   SELECT MAX(number_products)   FROM shop )
SELECT shop.manager_name, shop.district FROM shop WHERE shop.number_products = (     SELECT MAX(shop.number_products)     FROM shop )
SELECT MIN(Number_products), MAX(Number_products) FROM shop
SELECT MIN(Number_products), MAX(Number_products) FROM shop
SELECT shop.name, shop.location, shop.district FROM shop ORDER BY shop.number_products DESC
SELECT name, location, district FROM shop ORDER BY number_products DESC
SELECT shop.Name  FROM shop  WHERE shop.Number_products > (SELECT AVG(shop.Number_products) FROM shop)
SELECT name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.Name ORDER BY COUNT(evaluation.Employee_ID) DESC LIMIT 1
SELECT employee.name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.Employee_ID, employee.name ORDER BY COUNT(evaluation.Employee_ID) DESC LIMIT 1
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1
SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation)
SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID, shop.Name ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1
SELECT name FROM shop WHERE shop_id NOT IN (SELECT DISTINCT shop_id FROM hiring)
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
SELECT T1.Name, COUNT(T2.Employee_ID)  FROM shop AS T1  JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID  GROUP BY T1.Name
SELECT COUNT(employee.employee_id) AS num_employees, shop.name  FROM shop  JOIN hiring ON shop.shop_id = hiring.shop_id  JOIN employee ON hiring.employee_id = employee.employee_id  GROUP BY shop.name
SELECT SUM(Bonus) AS Total_Bonus FROM evaluation
SELECT SUM(Bonus) FROM evaluation
SELECT * FROM hiring
SELECT 
SELECT DISTINCT district  FROM shop  WHERE district IN (   SELECT DISTINCT district    FROM shop    WHERE number_products < 3000 )  AND district IN (   SELECT DISTINCT district    FROM shop    WHERE number_products > 10000 )
SELECT DISTINCT district  FROM shop  WHERE district IN (     SELECT district      FROM shop      WHERE number_products < 3000 ) AND district IN (     SELECT district      FROM shop      WHERE number_products > 10000 )
SELECT COUNT(DISTINCT Location) FROM shop
SELECT COUNT(DISTINCT Location) FROM shop
SELECT COUNT(*) FROM Documents
SELECT COUNT(*) FROM Documents;
SELECT documents.document_id, documents.document_name, documents.document_description FROM documents
SELECT document_id, document_name, document_description FROM Documents
SELECT document_name, template_id FROM Documents WHERE document_description LIKE '%w%';
SELECT document_name, template_id  FROM documents  WHERE document_description LIKE '%w%';
SELECT document_id, template_id, document_description  FROM documents  WHERE document_name = "Robbin CV"
SELECT document_id, template_id, document_description FROM documents WHERE document_name = 'Robbin CV'
SELECT COUNT(DISTINCT Template_ID) FROM Documents
SELECT COUNT(DISTINCT Template_ID) FROM Documents
SELECT COUNT(DISTINCT documents.document_id) FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'PPT'
SELECT COUNT(*) FROM Documents WHERE Template_ID IN (   SELECT Template_ID FROM Templates   WHERE Template_Type_Code = 'PPT' )
SELECT Templates.Template_ID, COUNT(Documents.Document_ID)  FROM Templates  JOIN Documents ON Templates.Template_ID = Documents.Template_ID  GROUP BY Templates.Template_ID
SELECT Templates.Template_ID, COUNT(Documents.Template_ID) FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1
SELECT templates.template_id, templates.template_type_code FROM templates INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id, templates.template_type_code ORDER BY COUNT(documents.document_id) DESC LIMIT 1
SELECT Templates.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1
SELECT Templates.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IS NULL
SELECT Templates.Template_ID  FROM Templates  LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID  WHERE Documents.Template_ID IS NULL
SELECT COUNT(*) FROM Templates
SELECT COUNT(*) FROM Templates
SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates
SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates
SELECT DISTINCT Template_Type_Code FROM Templates
SELECT Template_Type_Code FROM Ref_Template_Types
SELECT templates.template_id  FROM templates WHERE templates.template_type_code IN ('PP', 'PPT')
SELECT templates.Template_ID FROM templates WHERE templates.Template_Type_Code IN ('PP', 'PPT')
SELECT count(DISTINCT Template_ID) FROM Templates WHERE Template_Type_Code = 'CV'
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5;
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5
SELECT Template_Type_Code, COUNT(*) AS Num_Templates FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Template_Type_Code
SELECT ref_template_types.template_type_code, COUNT(Templates.template_id)  FROM ref_template_types  JOIN Templates ON ref_template_types.template_type_code = Templates.template_type_code  GROUP BY ref_template_types.template_type_code
SELECT template_type_code, COUNT(template_id) AS template_count FROM templates GROUP BY template_type_code ORDER BY template_count DESC LIMIT 1
SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_Type_Code ORDER BY COUNT(Templates.Template_ID) DESC LIMIT 1
SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code HAVING COUNT(Templates.Template_ID) < 3
SELECT template_type_code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY template_type_code HAVING COUNT(Templates.Template_ID) < 3
SELECT templates.version_number, templates.template_type_code FROM templates WHERE templates.version_number = (SELECT MIN(version_number) FROM templates)
SELECT templates.version_number, templates.template_type_code FROM templates ORDER BY templates.version_number ASC LIMIT 1
SELECT Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = "Data base"
SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Data base'
SELECT documents.document_name  FROM documents  JOIN templates ON documents.template_id = templates.template_id  WHERE templates.template_type_code = 'BK'
SELECT documents.document_name  FROM documents  JOIN templates ON documents.template_id = templates.template_id  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_code = 'BK'
SELECT ref_template_types.Template_Type_Code, COUNT(*) AS Number_of_Documents FROM ref_template_types JOIN templates ON ref_template_types.Template_Type_Code = templates.Template_Type_Code JOIN documents ON documents.Template_ID = templates.Template_ID GROUP BY ref_template_types.Template_Type_Code
SELECT Ref_Template_Types.Template_Type_Code, COUNT(DISTINCT Documents.Document_ID) AS Document_Count FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT Ref_Template_Types.Template_Type_Code  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  GROUP BY Ref_Template_Types.Template_Type_Code  ORDER BY COUNT(Documents.Document_ID) DESC  LIMIT 1
SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_Type_Code ORDER BY COUNT(Templates.Template_ID) DESC LIMIT 1
SELECT ref_template_types.template_type_code FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code LEFT JOIN documents ON templates.template_id = documents.template_id WHERE documents.document_id IS NULL;
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IS NULL
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
SELECT template_type_code, template_type_description  FROM Ref_Template_Types
SELECT template_type_description  FROM ref_template_types  WHERE template_type_code = "AD"
SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD'
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = "Book"
SELECT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Description = 'Book'
SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID
SELECT DISTINCT Template_Details FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
SELECT Templates.Template_ID  FROM Templates  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = "Presentation"
SELECT templates.template_id  FROM templates  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_description = 'Presentation'
SELECT COUNT(Paragraph_ID) FROM Paragraphs
SELECT COUNT(*) FROM Paragraphs;
SELECT count(*) FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show'
SELECT COUNT(*) AS paragraph_count FROM Paragraphs WHERE Document_ID = (   SELECT Document_ID   FROM Documents   WHERE Document_Name = 'Summer Show' )
SELECT Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text = 'Korea';
SELECT Paragraphs.*  FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Paragraphs.Paragraph_Text LIKE '%Korea%'
SELECT paragraph_id, paragraph_text  FROM Paragraphs WHERE document_id = (   SELECT document_id    FROM Documents    WHERE document_name = 'Welcome to NY' )
SELECT paragraph_id, paragraph_text  FROM paragraphs  WHERE document_id = (   SELECT document_id    FROM documents    WHERE document_name = 'Welcome to NY' )
SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID = (   SELECT Document_ID   FROM Documents   WHERE Document_Name = 'Customer reviews' )
SELECT Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews'
SELECT documents.document_id, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY documents.document_id
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID
SELECT document_id, document_name, COUNT(paragraph_id)  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY document_id, document_name
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name
SELECT Documents.Document_ID FROM Paragraphs GROUP BY Documents.Document_ID HAVING COUNT(Paragraphs.Paragraph_ID) >= 2
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Paragraphs.Document_ID = Documents.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(Paragraphs.Paragraph_ID) >= 2
SELECT documents.document_id, documents.document_name FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1
SELECT documents.document_id, documents.document_name FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1
SELECT documents.document_id  FROM documents  LEFT JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  ORDER BY COUNT(paragraphs.paragraph_id) ASC  LIMIT 1
SELECT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY COUNT(paragraphs.paragraph_id) ASC LIMIT 1
SELECT documents.document_id  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  HAVING COUNT(paragraphs.paragraph_id) >= 1 AND COUNT(paragraphs.paragraph_id) <= 2
SELECT documents.document_id  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  HAVING COUNT(paragraphs.paragraph_id) BETWEEN 1 AND 2
SELECT documents.document_id  FROM paragraphs  JOIN documents ON paragraphs.document_id = documents.document_id  WHERE paragraphs.paragraph_text IN ('Brazil', 'Ireland')
SELECT DISTINCT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Brazil' AND Document_ID IN (SELECT DISTINCT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Ireland')
SELECT count(Teacher_ID) FROM teacher
SELECT count(DISTINCT Teacher_ID) FROM teacher
SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC
SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC
SELECT Name, Age, Hometown FROM teacher
SELECT teacher.Age, teacher.Hometown FROM teacher
SELECT name  FROM teacher  WHERE hometown != 'Little Lever Urban District'
SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District'
SELECT teacher.Name FROM teacher WHERE teacher.Age IN (32, 33)
SELECT teacher.Name FROM teacher WHERE teacher.Age = 32 OR teacher.Age = 33
SELECT hometown FROM teacher WHERE age = (SELECT MIN(age) FROM teacher)
SELECT teacher.Hometown FROM teacher ORDER BY teacher.Age ASC LIMIT 1
SELECT teacher.Hometown, COUNT(teacher.Teacher_ID)  FROM teacher  GROUP BY teacher.Hometown
SELECT COUNT(*) AS teacher_count, hometown FROM teacher GROUP BY hometown
SELECT teacher.Hometown FROM teacher GROUP BY teacher.Hometown ORDER BY COUNT(teacher.Hometown) DESC LIMIT 1
SELECT teacher.Hometown, COUNT(*) AS Count FROM teacher GROUP BY teacher.Hometown ORDER BY Count DESC LIMIT 1;
SELECT teacher.Hometown FROM teacher GROUP BY teacher.Hometown HAVING COUNT(DISTINCT teacher.Teacher_ID) > 1
SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(DISTINCT Teacher_ID) > 1
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course.Course_ID = course_arrange.Course_ID ORDER BY teacher.Name ASC
SELECT T1.Name, T3.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID ORDER BY T1.Name ASC
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'Math'
SELECT name  FROM teacher  WHERE teacher_id IN (   SELECT teacher_id    FROM course_arrange    WHERE course_id IN (     SELECT course_id      FROM course      WHERE course = 'Math'   ) )
SELECT teacher.Name, COUNT(course_arrange.Course_ID) AS Course_Count FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name
SELECT teacher.name, COUNT(course_arrange.Course_ID) FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.name
SELECT teacher.Name  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  GROUP BY teacher.Name  HAVING COUNT(DISTINCT course_arrange.Course_ID) > 1
SELECT name  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  GROUP BY teacher.Teacher_ID, name  HAVING count(DISTINCT course_arrange.Course_ID) >= 2
SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange)
SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT DISTINCT teacher_id FROM course_arrange)
SELECT count(*) FROM visitor WHERE Age < 30
SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Level_of_membership DESC
SELECT avg(Age) FROM visitor WHERE Level_of_membership <= 4
SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Age ASC
SELECT museum_id, name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'
SELECT name FROM museum WHERE num_of_staff > (     SELECT MIN(num_of_staff)     FROM museum     WHERE open_year > 2010 )
SELECT visitor.ID, visitor.Name, visitor.Age  FROM visitor  JOIN visit ON visit.visitor_ID = visitor.ID  GROUP BY visitor.ID, visitor.Name, visitor.Age  HAVING COUNT(visit.Museum_ID) > 1
SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.ID = (   SELECT visitor_ID   FROM visit   GROUP BY visitor_ID   ORDER BY SUM(Total_spent) DESC   LIMIT 1 )
SELECT museum.Museum_ID, museum.Name FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID GROUP BY museum.Museum_ID, museum.Name ORDER BY COUNT(visit.Museum_ID) DESC LIMIT 1
SELECT name FROM museum WHERE museum.Museum_ID NOT IN (SELECT Museum_ID FROM visit)
SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID ORDER BY visit.Num_of_Ticket DESC LIMIT 1
SELECT avg(Num_of_Ticket), max(Num_of_Ticket) FROM visit
SELECT SUM(Total_spent) AS Total_Ticket_Expense FROM visit WHERE visitor_ID IN (SELECT ID FROM visitor WHERE Level_of_membership = 1)
SELECT T1.name FROM visitor AS T1 WHERE T1.ID IN (     SELECT DISTINCT T2.visitor_ID     FROM visit AS T3     JOIN museum AS T2 ON T2.Museum_ID = T3.Museum_ID     WHERE T2.Open_Year < 2009 ) AND T1.ID IN (     SELECT DISTINCT T2.visitor_ID     FROM visit AS T3     JOIN museum AS T2 ON T2.Museum_ID = T3.Museum_ID     WHERE T2.Open_Year > 2011 );
SELECT COUNT(visitor_id) FROM visit WHERE museum_id NOT IN (SELECT museum_id FROM museum WHERE open_year > 2010)
SELECT COUNT(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008
SELECT count(player_id) FROM players
SELECT count(*) FROM players
SELECT COUNT(*) AS total_matches FROM matches
SELECT COUNT(match_num) FROM matches
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SELECT avg(loser_age) AS average_loser_age, avg(winner_age) AS average_winner_age FROM matches
SELECT avg(loser_age) as average_loser_age, avg(winner_age) as average_winner_age  FROM matches
SELECT avg(winner_rank) AS average_rank FROM matches
SELECT avg(winner_rank) FROM matches
SELECT max(loser_rank) AS highest_rank FROM matches
SELECT max(loser_rank) AS best_rank_of_losers FROM matches
SELECT COUNT(DISTINCT country_code) FROM players
SELECT count(DISTINCT country_code) AS distinct_countries FROM players
SELECT COUNT(DISTINCT loser_name) FROM matches
SELECT COUNT(DISTINCT loser_name) FROM matches
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(match_num) > 10
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10
SELECT DISTINCT winner_name  FROM matches  WHERE year IN (2013, 2016) GROUP BY winner_name HAVING COUNT(DISTINCT year) = 2
SELECT DISTINCT p.first_name, p.last_name  FROM players p  WHERE p.player_id IN (     SELECT m.winner_id      FROM matches m      WHERE m.year = 2013 )  AND p.player_id IN (     SELECT m.winner_id      FROM matches m      WHERE m.year = 2016 )
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016)
SELECT country_code, first_name  FROM players  WHERE player_id IN (   SELECT winner_id    FROM matches    WHERE tourney_name = 'Australian Open'      AND winner_id IN (       SELECT winner_id        FROM matches        WHERE tourney_name = 'WTA Championships'     ) )
SELECT players.first_name, players.country_code  FROM players  JOIN matches ON players.player_id = matches.winner_id  WHERE matches.tourney_name IN ('Australian Open', 'WTA Championships')
SELECT first_name, country_code  FROM players  ORDER BY birth_date ASC  LIMIT 1
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1
SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date
SELECT concat(first_name, ' ', last_name) AS full_name  FROM players  ORDER BY birth_date, full_name
SELECT 
SELECT first_name, last_name  FROM players  WHERE hand = 'Left'  ORDER BY birth_date
SELECT players.first_name, players.country_code  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.player_id  ORDER BY COUNT(rankings.tours) DESC  LIMIT 1
SELECT first_name, country_code  FROM players  ORDER BY tours DESC  LIMIT 1
SELECT year, COUNT(*) as match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1
SELECT matches.winner_name, matches.winner_rank_points FROM matches GROUP BY matches.winner_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT matches.winner_name, MAX(rankings.ranking_points) AS rank_points FROM matches JOIN rankings ON matches.winner_id = rankings.player_id GROUP BY matches.winner_name ORDER BY rank_points DESC LIMIT 1;
SELECT matches.winner_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'Australian Open' ORDER BY players.winner_rank_points DESC LIMIT 1
SELECT matches.winner_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'Australian Open' ORDER BY players.winner_rank_points DESC LIMIT 1
SELECT winner_name, loser_name FROM matches WHERE minutes = (   SELECT MAX(minutes)    FROM matches )
SELECT matches.winner_name, matches.loser_name  FROM matches  ORDER BY matches.minutes DESC  LIMIT 1
SELECT AVG(ranking) AS average_ranking, T1.first_name  FROM players AS T1  JOIN rankings AS T2 ON T1.player_id = T2.player_id  GROUP BY T1.first_name
SELECT first_name, AVG(ranking) FROM players INNER JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, first_name
SELECT players.first_name, SUM(rankings.ranking_points)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name
SELECT players.first_name, SUM(rankings.ranking_points)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name
SELECT country_code, COUNT(DISTINCT player_id) FROM players GROUP BY country_code
SELECT country_code, COUNT(*) FROM players GROUP BY country_code
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT country_code, COUNT(*) as player_count FROM players GROUP BY country_code ORDER BY player_count DESC LIMIT 1
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(DISTINCT player_id) > 50
SELECT country_code  FROM players  GROUP BY country_code  HAVING count(DISTINCT player_id) > 50
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date
SELECT year, COUNT(*) FROM matches GROUP BY year
SELECT year, COUNT(match_num) AS match_count FROM matches GROUP BY year
SELECT players.first_name || ' ' || players.last_name AS winner_name, rankings.ranking AS winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id ORDER BY players.birth_date ASC LIMIT 3
SELECT matches.winner_name, matches.winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY matches.winner_age LIMIT 3
SELECT COUNT(DISTINCT winner_id) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = 'WTA Championships' AND players.hand = 'L';
SELECT count(DISTINCT winner_id) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = "WTA Championships" AND players.hand = "L"
SELECT players.first_name, players.country_code, players.birth_date  FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON players.player_id = matches.winner_id GROUP BY players.player_id ORDER BY rankings.ranking_points DESC LIMIT 1
SELECT players.first_name, players.country_code, players.birth_date FROM players WHERE players.player_id = (   SELECT rankings.player_id   FROM rankings   ORDER BY rankings.ranking_points DESC   LIMIT 1 )
SELECT hand, COUNT(DISTINCT player_id) FROM players GROUP BY hand
SELECT hand, COUNT(*) AS player_count FROM players GROUP BY hand
SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured'
SELECT name, tonnage FROM ship ORDER BY name DESC
SELECT ship.name FROM ship WHERE lost_in_battle IS NOT NULL
SELECT MAX(killed) AS max_death_toll, MIN(killed) AS min_death_toll FROM death
SELECT avg(injured) FROM death
SELECT killed, injured FROM death WHERE caused_by_ship_id = (   SELECT id   FROM ship   WHERE tonnage = 't' )
SELECT name, result FROM battle WHERE bulgarian_commander <> 'Boril'
SELECT battle.id, battle.name  FROM battle  JOIN ship ON battle.id = ship.lost_in_battle  WHERE ship.ship_type = 'Brig';
SELECT id, name FROM battle WHERE id IN (   SELECT caused_by_ship_id   FROM death   GROUP BY caused_by_ship_id   HAVING SUM(killed) > 10 )
SELECT ship.id, ship.name FROM ship JOIN death ON death.caused_by_ship_id = ship.id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1
SELECT name  FROM battle  WHERE bulgarian_commander = 'Kaloyan'  AND latin_commander = 'Baldwin I'
SELECT COUNT(DISTINCT result) AS num_results FROM battle
SELECT COUNT(DISTINCT battle.id) FROM battle LEFT JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.tonnage <> '225' OR ship.tonnage IS NULL
SELECT name, date FROM battle WHERE id IN (     SELECT lost_in_battle     FROM ship     WHERE name = 'Lettice' ) AND id IN (     SELECT lost_in_battle     FROM ship     WHERE name = 'HMS Atalanta' )
SELECT name, result, bulgarian_commander FROM battle WHERE NOT EXISTS (   SELECT *   FROM ship   WHERE ship.lost_in_battle = battle.id   AND ship.location = 'English Channel' )
SELECT note FROM death WHERE note LIKE '%East%'
SELECT line_1, line_2 FROM Addresses
SELECT line_1, line_2 FROM Addresses
SELECT count(*) AS total_courses FROM Courses
SELECT count(*) FROM Courses
SELECT course_description  FROM Courses  WHERE course_name = 'math'
SELECT courses.course_description  FROM courses  WHERE courses.course_name = 'math'
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
SELECT departments.department_name, departments.department_id  FROM departments  JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY departments.department_name, departments.department_id  ORDER BY COUNT(degree_programs.degree_program_id) DESC  LIMIT 1
SELECT department_name, department_id FROM Departments GROUP BY department_id ORDER BY COUNT(degree_program_id) DESC LIMIT 1
SELECT COUNT(DISTINCT department_id) FROM Departments
SELECT COUNT(DISTINCT department_id) FROM Departments
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs
SELECT count(DISTINCT degree_program_id) AS degree_count FROM Degree_Programs
SELECT COUNT(DISTINCT degree_program_id)  FROM Degree_Programs  WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering')
SELECT count(*)  FROM Degree_Programs  WHERE department_id = (   SELECT department_id    FROM Departments    WHERE department_name = 'engineering' )
SELECT section_name, section_description  FROM Sections
SELECT section_name, section_description FROM Sections
SELECT course_name, course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name, T1.course_id HAVING COUNT(*) <= 2
SELECT courses.course_name, courses.course_id  FROM courses  JOIN sections ON courses.course_id = sections.course_id  GROUP BY courses.course_name, courses.course_id  HAVING COUNT(sections.section_id) < 2
SELECT sections.section_name FROM sections ORDER BY sections.section_name DESC
SELECT section_name  FROM Sections  ORDER BY section_name DESC
SELECT Semesters.semester_name, Semesters.semester_id  FROM Semesters  JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id  GROUP BY Semesters.semester_name, Semesters.semester_id  ORDER BY COUNT(Student_Enrolment.student_id) DESC  LIMIT 1
SELECT semesters.semester_name, semesters.semester_id FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_name, semesters.semester_id ORDER BY COUNT(student_enrolment.student_enrolment_id) DESC LIMIT 1
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
SELECT first_name, middle_name, last_name, student_id FROM Students WHERE student_id IN (     SELECT student_id     FROM Student_Enrolment     GROUP BY student_id     HAVING COUNT(DISTINCT degree_program_id) = 2 )
SELECT first_name, middle_name, last_name, student_id FROM Students WHERE student_id IN (     SELECT student_id     FROM Student_Enrolment     GROUP BY student_id     HAVING COUNT(DISTINCT degree_program_id) = 2 AND COUNT(DISTINCT semester_id) = 1 )
SELECT first_name, middle_name, last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelor';
SELECT first_name, middle_name, last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelors';
SELECT degree_summary_name, COUNT(*) AS enrolment_count FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY enrolment_count DESC LIMIT 1
SELECT Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT degree_programs.degree_program_id, degree_programs.degree_summary_name  FROM degree_programs  JOIN student_enrolment      ON degree_programs.degree_program_id = student_enrolment.degree_program_id  GROUP BY degree_programs.degree_program_id, degree_programs.degree_summary_name  ORDER BY COUNT(student_enrolment.student_enrolment_id) DESC  LIMIT 1
SELECT degree_program_id, degree_summary_name FROM Degree_Programs WHERE degree_program_id IN (     SELECT degree_program_id     FROM Student_Enrolment     GROUP BY degree_program_id     HAVING COUNT(DISTINCT student_id) = (         SELECT MAX(enrollment_count)         FROM (             SELECT degree_program_id, COUNT(DISTINCT student_id) AS enrollment_count             FROM Student_Enrolment             GROUP BY degree_program_id         )     ) )
SELECT students.student_id, students.first_name, students.middle_name, students.last_name, count(student_enrolment.student_id) AS enrollment_count FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id, students.first_name, students.middle_name, students.last_name ORDER BY enrollment_count DESC LIMIT 1
SELECT first_name, middle_name, last_name, student_id, COUNT(student_enrolment_id)  FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  GROUP BY Students.student_id  HAVING COUNT(student_enrolment_id) = (   SELECT MAX(cnt)    FROM (     SELECT student_id, COUNT(student_enrolment_id) AS cnt      FROM Student_Enrolment      GROUP BY student_id   ) AS T1 )
SELECT semester_name  FROM Semesters  WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)
SELECT semester_name FROM Semesters WHERE NOT EXISTS (   SELECT semester_id   FROM Student_Enrolment   WHERE Semesters.semester_id = Student_Enrolment.semester_id )
SELECT course_name  FROM Courses  WHERE course_id IN (SELECT DISTINCT course_id FROM Student_Enrolment_Courses)
SELECT courses.course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_enrolment_courses)
SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_id ORDER BY COUNT(Student_Enrolment_Courses.student_enrolment_id) DESC LIMIT 1
SELECT students.last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id LEFT JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE addresses.state_province_county = 'North Carolina' AND student_enrolment.degree_program_id IS NULL;
SELECT last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE Addresses.state_province_county = 'North Carolina' AND NOT EXISTS (   SELECT *   FROM Student_Enrolment   WHERE Student_Enrolment.student_id = Students.student_id   )
SELECT transcripts.transcript_date, transcripts.transcript_id FROM transcripts WHERE transcripts.transcript_id IN (     SELECT transcript_contents.transcript_id     FROM transcript_contents     GROUP BY transcript_contents.transcript_id     HAVING COUNT(DISTINCT transcript_contents.student_course_id) >= 2 )
SELECT transcript_date, transcript_id  FROM Transcripts  JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id  GROUP BY transcript_id  HAVING COUNT(DISTINCT Transcript_Contents.student_course_id) >= 2
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT first_name, middle_name, last_name  FROM Students  ORDER BY date_first_registered  LIMIT 1
SELECT Students.first_name, Students.middle_name, Students.last_name  FROM Students  ORDER BY Students.date_first_registered  LIMIT 1
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered LIMIT 1
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered ASC LIMIT 1
SELECT DISTINCT first_name  FROM Students  WHERE permanent_address_id <> current_address_id
SELECT Students.first_name  FROM Students  JOIN Addresses AS perm_address ON Students.permanent_address_id = perm_address.address_id JOIN Addresses AS current_address ON Students.current_address_id = current_address.address_id WHERE perm_address.line_1 != current_address.line_1
SELECT addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3 FROM addresses JOIN students ON addresses.address_id = students.current_address_id GROUP BY addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3 ORDER BY COUNT(*) DESC LIMIT 1
SELECT addresses.address_id, addresses.line_1, addresses.line_2  FROM addresses JOIN students ON students.current_address_id = addresses.address_id GROUP BY addresses.address_id, addresses.line_1, addresses.line_2 ORDER BY COUNT(students.student_id) DESC LIMIT 1
SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts
SELECT avg(transcript_date) FROM Transcripts
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date LIMIT 1;
SELECT MIN(transcript_date), other_details FROM Transcripts
SELECT count(*) FROM Transcripts
SELECT count(*) FROM Transcripts
SELECT MAX(transcript_date) FROM Transcripts
SELECT MAX(transcript_date) FROM Transcripts
SELECT MAX(enrollment_count), student_enrolment_id FROM (     SELECT COUNT(*) AS enrollment_count, student_course_id, student_enrolment_id     FROM Student_Enrolment_Courses     GROUP BY student_course_id, student_enrolment_id ) AS subquery GROUP BY student_enrolment_id;
SELECT max(course_count), student_enrolment_id FROM (     SELECT COUNT(*) AS course_count, sec.student_enrolment_id     FROM Transcript_Contents AS tc     JOIN Student_Enrolment_Courses AS sec ON tc.student_course_id = sec.student_course_id     GROUP BY sec.student_enrolment_id ) AS subquery ORDER BY course_count DESC LIMIT 1
SELECT transcript_date, transcript_id  FROM Transcripts  GROUP BY transcript_date, transcript_id  ORDER BY COUNT(*)  LIMIT 1
SELECT transcript_date, transcript_id  FROM Transcripts  ORDER BY (SELECT COUNT(*)            FROM Transcript_Contents            WHERE Transcript_Contents.transcript_id = Transcripts.transcript_id)  LIMIT 1
SELECT DISTINCT semesters.semester_name FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name = 'Bachelor' AND semesters.semester_id IN (     SELECT semesters.semester_id     FROM semesters     JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id     JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id     JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id     WHERE degree_programs.degree_summary_name = 'Master' )
SELECT semester_id  FROM Student_Enrolment WHERE degree_program_id = 'Masters' INTERSECT SELECT semester_id  FROM Student_Enrolment WHERE degree_program_id = 'Bachelors'
SELECT COUNT(DISTINCT Students.current_address_id) FROM Students
SELECT addresses.address_id  FROM addresses  WHERE addresses.address_id IN (     SELECT students.current_address_id      FROM students      UNION      SELECT students.permanent_address_id      FROM students )
SELECT Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details FROM Students ORDER BY Students.last_name DESC, Students.first_name DESC, Students.middle_name DESC
SELECT student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details FROM students ORDER BY last_name DESC
SELECT section_name, section_description, section_id, course_id, other_details FROM Sections WHERE section_id = 'h'
SELECT section_description FROM Sections WHERE section_name = 'h'
SELECT first_name  FROM Students  WHERE cell_mobile_number = '09700166582'     OR permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti')
SELECT first_name FROM Students  WHERE permanent_address_id IN      (SELECT address_id FROM Addresses WHERE country = 'Haiti')      OR cell_mobile_number = '09700166582'
SELECT title FROM Cartoon ORDER BY title ASC
SELECT Title FROM Cartoon ORDER BY Title ASC
SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = "Ben Jones"
SELECT title FROM Cartoon WHERE Directed_by = 'Ben Jones'
SELECT count(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
SELECT COUNT(id) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
SELECT cartoon.title, cartoon.directed_by FROM cartoon ORDER BY cartoon.original_air_date
SELECT c.Title, c.Directed_by FROM Cartoon c ORDER BY c.Original_air_date
SELECT cartoon.title FROM cartoon JOIN TV_Channel ON cartoon.Channel = TV_Channel.id WHERE cartoon.directed_by IN ("Ben Jones", "Brandon Vietti")
SELECT title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'
SELECT TV_Channel.Country, COUNT(*)  FROM TV_Channel  GROUP BY TV_Channel.Country  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT TV_Channel.Country, COUNT(TV_Channel.id) AS Channel_Count FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY Channel_Count DESC LIMIT 1
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel
SELECT count(DISTINCT series_name), count(DISTINCT Content) FROM TV_Channel
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio"
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT count(DISTINCT id) FROM TV_Channel WHERE Language = 'English'
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'
SELECT tv_channel.language, COUNT(*) AS channel_count  FROM tv_channel  GROUP BY tv_channel.language  ORDER BY channel_count ASC
SELECT language, COUNT(*) AS channel_count FROM TV_Channel GROUP BY language HAVING COUNT(*) = (   SELECT MIN(cnt)   FROM (     SELECT COUNT(*) AS cnt     FROM TV_Channel     GROUP BY language   ) AS T )
SELECT TV_Channel.Language, COUNT(*)  FROM TV_Channel  GROUP BY TV_Channel.Language
SELECT TV_Channel.Language, COUNT(DISTINCT TV_Channel.id)  FROM TV_Channel  GROUP BY TV_Channel.Language
SELECT series_name FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle!'
SELECT series_name FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = "The Rise of the Blue Beetle"
SELECT cartoon.title FROM cartoon  JOIN tv_channel ON cartoon.channel = tv_channel.id  WHERE tv_channel.series_name = "Sky Radio"
SELECT title  FROM cartoon  WHERE channel = (SELECT id FROM tv_channel WHERE series_name = 'Sky Radio');
SELECT TV_series.Episode  FROM TV_series  ORDER BY TV_series.Rating
SELECT TV_series.Episode FROM TV_series ORDER BY TV_series.Rating;
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3
SELECT TV_series.Episode, TV_series.Rating  FROM TV_series  ORDER BY TV_series.Rating DESC  LIMIT 3
SELECT MIN(Share), MAX(Share) FROM TV_series
SELECT MAX(Share), MIN(Share)  FROM TV_series;
SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime"
SELECT TV_series.Weekly_Rank FROM TV_series JOIN Cartoon ON TV_series.Channel = Cartoon.Channel JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE Cartoon.Title = "A Love of a Lifetime"
SELECT Weekly_Rank  FROM TV_series  WHERE Episode = "A Love of a Lifetime"
SELECT series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = "A Love of a Lifetime"
SELECT TV_series.series_name FROM TV_series WHERE TV_series.Episode = "A Love of a Lifetime"
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"
SELECT Episode FROM TV_series  JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"
SELECT directed_by, COUNT(*)  FROM Cartoon  GROUP BY directed_by
SELECT directed_by, COUNT(id)  FROM Cartoon  GROUP BY directed_by
SELECT cartoon.production_code, tv_channel.series_name  FROM cartoon  JOIN tv_channel ON cartoon.channel = tv_channel.id  ORDER BY cartoon.original_air_date DESC  LIMIT 1
SELECT cartoon.production_code, TV_Channel.series_name AS channel FROM cartoon JOIN TV_Channel ON cartoon.channel = TV_Channel.id ORDER BY cartoon.original_air_date DESC LIMIT 1
SELECT package_option, series_name FROM TV_Channel WHERE High_definition_TV = 1
SELECT package_option, series_name  FROM TV_Channel  WHERE High_definition_TV = 1
SELECT country FROM TV_Channel WHERE id IN (   SELECT channel FROM Cartoon   WHERE written_by = 'Todd Casey' )
SELECT tv_channel.country FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.written_by = 'Todd Casey'
SELECT DISTINCT country  FROM TV_Channel  WHERE id NOT IN      (SELECT Channel      FROM Cartoon      WHERE Written_by = 'Todd Casey')
SELECT DISTINCT country  FROM tv_channel  WHERE id NOT IN (SELECT channel                   FROM cartoon                   WHERE written_by = 'Todd Casey')
SELECT series_name, Country FROM TV_Channel WHERE id IN (     SELECT Channel     FROM Cartoon     WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Michael Chang' )
SELECT series_name, country FROM TV_Channel WHERE id IN (   SELECT Channel   FROM Cartoon   WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Michael Chang' )
SELECT Pixel_aspect_ratio_PAR, Country  FROM TV_Channel  WHERE Language <> 'English'
SELECT TV_Channel.pixel_aspect_ratio_PAR, TV_Channel.Country  FROM TV_Channel  WHERE TV_Channel.Language <> 'English'
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.id HAVING COUNT(*) > 2
SELECT TV_Channel.id  FROM TV_Channel  GROUP BY TV_Channel.id  HAVING COUNT(TV_Channel.id) > 2
SELECT TV_Channel.id  FROM TV_Channel  WHERE TV_Channel.id NOT IN    (SELECT Cartoon.Channel    FROM Cartoon    WHERE Cartoon.Directed_by = 'Ben Jones')
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones')
SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')
SELECT package_option FROM TV_Channel WHERE id NOT IN (   SELECT DISTINCT Channel   FROM Cartoon   WHERE Directed_by = 'Ben Jones' )
SELECT COUNT(poker_player_id) FROM poker_player
SELECT count(*) FROM poker_player
SELECT poker_player.Earnings  FROM poker_player  ORDER BY poker_player.Earnings DESC
SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC
SELECT final_table_made, best_finish  FROM poker_player
SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player
SELECT AVG(Earnings) AS Average_Earnings FROM poker_player
SELECT AVG(Earnings) FROM poker_player
SELECT poker_player.Money_Rank FROM poker_player ORDER BY poker_player.Earnings DESC LIMIT 1
SELECT money_rank FROM poker_player WHERE earnings = (SELECT max(earnings) FROM poker_player)
SELECT COUNT(*) AS max_final_tables FROM poker_player WHERE earnings < 200000 GROUP BY Poker_Player_ID ORDER BY max_final_tables DESC LIMIT 1
SELECT MAX(Final_Table_Made) AS Max_Final_Tables FROM poker_player WHERE Earnings < 200000
SELECT name FROM people
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000
SELECT people.Name  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Final_Table_Made ASC
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made ASC
SELECT birth_date FROM people WHERE People_ID = (   SELECT People_ID   FROM poker_player   ORDER BY Earnings ASC   LIMIT 1 )
SELECT birth_date FROM people JOIN poker_player ON people.people_id = poker_player.people_id WHERE earnings = (SELECT min(earnings) FROM poker_player)
SELECT poker_player.Money_Rank  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  WHERE people.Height = (SELECT MAX(Height) FROM people)
SELECT poker_player.money_rank  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID WHERE people.height = (SELECT max(height) FROM people)
SELECT avg(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200
SELECT AVG(poker_player.Earnings) FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  WHERE people.Height > 200
SELECT name FROM people JOIN poker_player ON people.people_id = poker_player.people_id ORDER BY poker_player.earnings DESC
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC
SELECT nationality, COUNT(*)  FROM people  GROUP BY nationality
SELECT COUNT(*) as count, nationality FROM people GROUP BY nationality
SELECT Nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1
SELECT nationality, COUNT(*) as count FROM people GROUP BY nationality ORDER BY count DESC LIMIT 1
SELECT nationality FROM people GROUP BY nationality HAVING COUNT(DISTINCT People_ID) > 1
SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2
SELECT name, birth_date FROM people ORDER BY name ASC
SELECT name, birth_date FROM people ORDER BY name ASC
SELECT name FROM people WHERE Nationality != 'Russia'
SELECT name FROM people WHERE Nationality <> 'Russia'
SELECT name FROM people LEFT JOIN poker_player ON people.people_id = poker_player.people_id WHERE poker_player.people_id IS NULL
SELECT name FROM people LEFT JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.People_ID IS NULL
SELECT COUNT(DISTINCT Nationality) FROM people
SELECT count(DISTINCT Nationality) FROM people
SELECT count(DISTINCT state) FROM AREA_CODE_STATE
SELECT 
SELECT vote_id, phone_number, state FROM VOTES
SELECT MAX(area_code), MIN(area_code) FROM area_code_state
SELECT MAX(created) FROM VOTES WHERE state = 'CA'
SELECT contestant_name  FROM contestants  WHERE contestant_name <> 'Jessie Alloway'
SELECT DISTINCT state, created FROM VOTES
SELECT contestant_number, contestant_name FROM contestants JOIN votes ON contestants.contestant_number = votes.contestant_number GROUP BY contestant_number, contestant_name HAVING COUNT(*) > 1
SELECT contestant_number, contestant_name  FROM contestants  WHERE contestant_number = (   SELECT contestant_number    FROM votes    WHERE vote_id = (     SELECT MIN(vote_id)      FROM votes   ) )
SELECT COUNT(*) FROM VOTES WHERE state = 'NY' OR state = 'CA'
SELECT count(*)  FROM contestants  WHERE contestant_number NOT IN (SELECT contestant_number FROM votes)
SELECT area_code  FROM area_code_state  INNER JOIN votes ON area_code_state.state = votes.state  GROUP BY area_code  ORDER BY COUNT(votes.vote_id) DESC  LIMIT 1
SELECT created, state, phone_number  FROM VOTES  JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number  WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling'
SELECT DISTINCT area_code  FROM area_code_state  WHERE state IN (   SELECT state    FROM votes    JOIN contestants ON votes.contestant_number = contestants.contestant_number    WHERE contestant_name = 'Kelly Clauss' OR contestant_name = 'Tabatha Gehling' )
SELECT contestant_name  FROM contestants  WHERE contestant_name LIKE '%Al%'
SELECT country.Name FROM country WHERE country.IndepYear > 1950
SELECT country.Name FROM country WHERE country.IndepYear > 1950
SELECT COUNT(DISTINCT Code) FROM country WHERE GovernmentForm = 'Republic'
SELECT count(DISTINCT Code) FROM country WHERE GovernmentForm = 'Republic'
SELECT sum(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Region = 'Caribbean'
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Caribbean'
SELECT Continent FROM country WHERE name = 'Anguilla'
SELECT continent FROM country WHERE name = 'Anguilla'
SELECT country.Region FROM country INNER JOIN city ON country.Code = city.CountryCode WHERE city.Name = 'Kabul'
SELECT Region FROM country WHERE name = 'Afghanistan'
SELECT language  FROM countrylanguage  WHERE CountryCode = 'ABW'  GROUP BY language  ORDER BY MAX(Percentage) DESC  LIMIT 1
SELECT language FROM countrylanguage WHERE countrycode = (   SELECT code   FROM country   WHERE name = 'Aruba' ) AND percentage = (   SELECT MAX(percentage)   FROM countrylanguage   WHERE countrycode = (     SELECT code     FROM country     WHERE name = 'Aruba'   ) )
SELECT Population, LifeExpectancy FROM country WHERE name = 'Brazil'
SELECT population, lifeexpectancy FROM country WHERE Name = 'Brazil'
SELECT Region, Population FROM country WHERE name = 'Angola'
SELECT region, population FROM country WHERE name = 'Angola'
SELECT avg(LifeExpectancy) FROM country WHERE Region = 'Central Africa'
SELECT avg(LifeExpectancy) FROM country WHERE Region = 'Central Africa'
SELECT name  FROM country  WHERE lifeexpectancy = (   SELECT MIN(lifeexpectancy)    FROM country    WHERE continent = 'Asia' )
SELECT name  FROM country  WHERE continent = 'Asia'  AND lifeExpectancy = (     SELECT MIN(lifeExpectancy)      FROM country      WHERE continent = 'Asia' )
SELECT sum(Population), max(GNP)  FROM country  WHERE Continent = 'Asia'
SELECT 
SELECT avg(LifeExpectancy) FROM country WHERE GovernmentForm = 'Republic' AND Continent = 'Africa'
SELECT avg(LifeExpectancy) FROM country WHERE GovernmentForm = 'Republic' AND Continent = 'Africa'
SELECT sum(SurfaceArea) FROM country WHERE continent IN ('Asia', 'Europe')
SELECT sum(SurfaceArea) AS TotalSurfaceArea FROM country WHERE continent = 'Asia' OR continent = 'Europe'
SELECT sum(Population) FROM city WHERE District = 'Gelderland'
SELECT SUM(Population) FROM city WHERE District = 'Gelderland'
SELECT avg(GNP) , sum(population)  FROM country  WHERE GovernmentForm = 'US Territory'
SELECT avg(GNP) AS Mean_GNP, sum(Population) AS Total_Population FROM country WHERE GovernmentForm = 'US Territory' AND Code2 = 'US'
SELECT count(DISTINCT Language) FROM countrylanguage
SELECT COUNT(DISTINCT Language) FROM countrylanguage
SELECT COUNT(DISTINCT GovernmentForm)  FROM country  WHERE Continent = 'Africa'
SELECT COUNT(DISTINCT GovernmentForm) AS NumberOfFormsOfGovernment FROM country WHERE Continent = 'Africa'
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW'
SELECT count(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW'
SELECT count(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode = 'AFG'
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code ORDER BY COUNT(DISTINCT countrylanguage.Language) DESC LIMIT 1
SELECT name FROM country WHERE code = (   SELECT countrycode   FROM countrylanguage   GROUP BY countrycode   ORDER BY COUNT(DISTINCT language) DESC   LIMIT 1 )
SELECT continent  FROM countrylanguage  GROUP BY continent  ORDER BY COUNT(DISTINCT Language) DESC  LIMIT 1
SELECT continent  FROM countrylanguage  GROUP BY continent  ORDER BY COUNT(DISTINCT Language) DESC  LIMIT 1
SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language IN ('Dutch', 'English')
SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language IN ('Dutch', 'English')
SELECT name FROM country WHERE code IN (     SELECT countrycode     FROM countrylanguage     WHERE language IN ('English', 'French')     GROUP BY countrycode     HAVING COUNT(DISTINCT language) = 2 )
SELECT DISTINCT C1.name FROM countrylanguage AS CL1 JOIN country AS C1 ON CL1.countrycode = C1.code WHERE CL1.language IN ('English', 'French') GROUP BY C1.name HAVING COUNT(DISTINCT CL1.language) = 2
SELECT name  FROM country  WHERE code IN (   SELECT countrycode    FROM countrylanguage    WHERE language = 'English'      AND isofficial = 'T' ) AND code IN (   SELECT countrycode    FROM countrylanguage    WHERE language = 'French'      AND isofficial = 'T' )
SELECT DISTINCT T1.name  FROM countrylanguage AS T1  JOIN countrylanguage AS T2 ON T1.countrycode = T2.countrycode  WHERE (T1.language = 'English' AND T1.isofficial = 'T')    AND (T2.language = 'French' AND T2.isofficial = 'T')
SELECT count(DISTINCT country.continent)  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  WHERE countrylanguage.Language = 'Chinese'
SELECT count(DISTINCT T1.continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese'
SELECT region FROM country  WHERE code IN (SELECT countrycode                 FROM countrylanguage                 WHERE language = 'English' OR language = 'Dutch') GROUP BY region
SELECT 
SELECT country.Name  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch')  AND countrylanguage.IsOfficial = 'T'
SELECT country.Name FROM country WHERE country.Code IN (   SELECT countrylanguage.CountryCode   FROM countrylanguage   WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch')   AND countrylanguage.IsOfficial = 'T' )
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.IsOfficial = 'T'   AND country.Continent = 'Asia' GROUP BY countrylanguage.Language ORDER BY SUM(countrylanguage.Percentage) DESC LIMIT 1
SELECT language FROM countrylanguage WHERE CountryCode IN (   SELECT Code   FROM country   WHERE Continent = 'Asia' ) GROUP BY language ORDER BY COUNT(*) DESC LIMIT 1
SELECT DISTINCT language  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  WHERE country.GovernmentForm = "Republic"  GROUP BY language  HAVING COUNT(DISTINCT countrylanguage.CountryCode) = 1
SELECT language  FROM countrylanguage  WHERE IsOfficial = 'true'    AND Language IN (SELECT Language                     FROM countrylanguage                     GROUP BY Language                     HAVING COUNT(*) = 1)    AND CountryCode IN (SELECT Code                        FROM country                        WHERE GovernmentForm = 'Republic'                        GROUP BY Code                        HAVING COUNT(*) = 1)
SELECT city.name  FROM city  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE countrylanguage.language = 'English'  GROUP BY city.name  HAVING city.population = MAX(city.population)
SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' GROUP BY city.Name ORDER BY city.Population DESC LIMIT 1
SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' AND surfacearea = (   SELECT MAX(surfacearea)   FROM country   WHERE continent = 'Asia' ) ORDER BY population DESC LIMIT 1
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = 'Asia' ORDER BY country.SurfaceArea DESC LIMIT 1
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language <> 'English')
SELECT avg(country.LifeExpectancy)  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language != 'English'
SELECT SUM(Population)  FROM country  WHERE Code NOT IN (     SELECT CountryCode      FROM countrylanguage      WHERE Language = 'English' )
SELECT SUM(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English');
SELECT language  FROM countrylanguage  WHERE isofficial = 'T'  AND CountryCode = (     SELECT Code      FROM country      WHERE HeadOfState = 'Beatrix' )
SELECT language FROM countrylanguage WHERE isofficial = 'T' AND countrycode = (SELECT Code FROM country WHERE HeadOfState = 'Beatrix')
SELECT count(DISTINCT language) AS total_languages FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.IndepYear < 1930
SELECT count(DISTINCT countrylanguage.Language) AS total_languages FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.IndepYear < 1930
SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')
SELECT name FROM country WHERE SurfaceArea > (     SELECT MAX(SurfaceArea)     FROM country     WHERE Continent = 'Europe' )
SELECT name  FROM country  WHERE continent = 'Africa'  AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')
SELECT name  FROM country  WHERE continent = 'Africa'  AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')
SELECT country.Name FROM country WHERE country.Continent = 'Asia'   AND country.Population > (     SELECT MAX(population)     FROM country     WHERE continent = 'Africa'   )
SELECT name  FROM country  WHERE continent = 'Asia'    AND population > (SELECT MAX(population)                      FROM country                      WHERE continent = 'Africa')
SELECT code FROM country WHERE code NOT IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English' )
SELECT country.Code FROM country WHERE country.Code NOT IN (     SELECT countrylanguage.CountryCode     FROM countrylanguage     WHERE countrylanguage.Language = 'English' )
SELECT country.Code  FROM countrylanguage  WHERE language <> 'English'
SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language <> 'English'
SELECT countrylanguage.CountryCode FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language != 'English' AND country.GovernmentForm != 'Republic'
SELECT DISTINCT code  FROM country  WHERE code NOT IN (     SELECT countrycode      FROM countrylanguage      WHERE language = 'English' AND isofficial = 'T' )  AND governmentform <> 'Republic'
SELECT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode  WHERE country.Continent = 'Europe' AND countrylanguage.Language != 'English'
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language <> 'English'
SELECT DISTINCT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON countrylanguage.CountryCode = country.Code  WHERE country.Continent = 'Asia'    AND countrylanguage.Language = 'Chinese'    AND countrylanguage.IsOfficial = 'T'
SELECT DISTINCT city.Name  FROM city  INNER JOIN country ON city.CountryCode = country.Code  INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.Continent = 'Asia'  AND countrylanguage.Language = 'Chinese'  AND countrylanguage.IsOfficial = 'T'
SELECT name, indepyear, surfacearea FROM country WHERE population = (   SELECT min(population)   FROM country )
SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT MIN(population) FROM country)
SELECT population, name, headofstate FROM country WHERE surfacearea = (SELECT max(surfacearea) FROM country);
SELECT country.Name, country.Population, country.HeadOfState FROM country ORDER BY country.SurfaceArea DESC LIMIT 1
SELECT country.Name, COUNT(countrylanguage.Language) AS LanguageCount FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(countrylanguage.Language) >= 3
SELECT country.Name, COUNT(countrylanguage.Language) AS LanguageCount FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING LanguageCount > 2
SELECT district, COUNT(*)  FROM city  WHERE population > (SELECT AVG(population) FROM city)  GROUP BY district
SELECT district, COUNT(*) FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district
SELECT governmentform, SUM(population)  FROM country  GROUP BY governmentform  HAVING AVG(lifeexpectancy) > 72;
SELECT governmentform, SUM(population)  FROM country  WHERE lifeexpectancy > 72  GROUP BY governmentform
SELECT continent, AVG(lifeexpectancy) AS average_life_expectancy, SUM(population) AS total_population FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72
SELECT continent, SUM(population), AVG(lifeexpectancy) FROM country WHERE AVG(lifeexpectancy) < 72 GROUP BY continent
SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.SurfaceArea DESC LIMIT 5
SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5
SELECT name FROM country ORDER BY Population DESC LIMIT 3
SELECT country.Name FROM country ORDER BY country.Population DESC LIMIT 3
SELECT country.Name FROM country ORDER BY country.Population ASC LIMIT 3
SELECT 
SELECT count(DISTINCT Code) FROM country WHERE continent = 'Asia'
SELECT count(*) FROM country WHERE continent = 'Asia'
SELECT name  FROM country  WHERE continent = 'Europe' AND population = 80000
SELECT country.Name FROM country WHERE country.Continent = 'Europe' AND country.Population = 80000
SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;
SELECT sum(Population), avg(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000
SELECT city.Name  FROM city  WHERE city.Population BETWEEN 160000 AND 900000
SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000
SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1
SELECT countrylanguage.Language  FROM countrylanguage  GROUP BY countrylanguage.Language  ORDER BY COUNT(DISTINCT countrylanguage.CountryCode) DESC  LIMIT 1
SELECT country.name, countrylanguage.language  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  GROUP BY country.name  HAVING countrylanguage.percentage = (SELECT MAX(percentage)                                       FROM countrylanguage                                       WHERE countrylanguage.countrycode = country.code)
SELECT country.Code, MAX(countrylanguage.Percentage) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY country.Code
SELECT count(DISTINCT CountryCode)  FROM countrylanguage  WHERE Language = 'Spanish'  AND Percentage = (SELECT MAX(Percentage)                    FROM countrylanguage                    WHERE Language = 'Spanish')
SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T' AND Percentage > 50;
SELECT countrycode  FROM countrylanguage  WHERE language = 'Spanish'  GROUP BY countrycode  HAVING percentage = (     SELECT MAX(percentage)      FROM countrylanguage      WHERE language = 'Spanish' )
SELECT country.Code FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'Spanish' AND countrylanguage.Percentage > 50
SELECT COUNT(Conductor_ID) FROM conductor
SELECT COUNT(*) FROM conductor
SELECT conductor.Name FROM conductor ORDER BY conductor.Age ASC
SELECT name FROM conductor ORDER BY age ASC
SELECT name FROM conductor WHERE nationality <> 'USA'
SELECT name FROM conductor WHERE Nationality != 'USA'
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY Year_of_Founded DESC
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC
SELECT AVG(Attendance) AS Average_Attendance FROM show
SELECT avg(Attendance) FROM show
SELECT max(share), min(share) FROM performance WHERE type <> 'Live final'
SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM performance WHERE Type <> 'Live final'
SELECT count(DISTINCT Nationality) FROM conductor
SELECT count(DISTINCT Nationality) FROM conductor
SELECT conductor.Name  FROM conductor  ORDER BY conductor.Year_of_Work DESC
SELECT name FROM conductor ORDER BY Year_of_Work DESC
SELECT name  FROM conductor  ORDER BY Year_of_Work DESC  LIMIT 1
SELECT conductor.Name FROM conductor GROUP BY conductor.Conductor_ID ORDER BY COUNT(conductor.Year_of_Work) DESC LIMIT 1
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID
SELECT conductor.Name FROM conductor GROUP BY conductor.Name HAVING COUNT(DISTINCT conductor.Orchestra_ID) > 1
SELECT conductor.Name  FROM conductor  JOIN orchestra ON orchestra.Conductor_ID = conductor.Conductor_ID  GROUP BY conductor.Name  HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1
SELECT 
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name ORDER BY COUNT(DISTINCT orchestra.Orchestra_ID) DESC LIMIT 1
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008
SELECT record_company, COUNT(DISTINCT orchestra_id)  FROM orchestra  GROUP BY record_company
SELECT COUNT(DISTINCT T1.Orchestra_ID) AS Orchestra_Count, T1.Record_Company FROM orchestra AS T1 GROUP BY T1.Record_Company
SELECT major_record_format, COUNT(*) AS format_count FROM orchestra GROUP BY major_record_format ORDER BY format_count ASC
SELECT major_record_format, COUNT(*)  FROM orchestra  GROUP BY major_record_format  ORDER BY COUNT(*) DESC
SELECT record_company, COUNT(*) AS num_orchestras FROM orchestra GROUP BY record_company ORDER BY num_orchestras DESC LIMIT 1
SELECT record_company, COUNT(Orchestra_ID) AS Orchestra_Count FROM orchestra GROUP BY record_company ORDER BY Orchestra_Count DESC LIMIT 1
SELECT DISTINCT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
SELECT DISTINCT Record_Company  FROM orchestra  WHERE Year_of_Founded < 2003 OR Year_of_Founded > 2003
SELECT DISTINCT record_company  FROM orchestra  WHERE year_of_founded < 2003    AND record_company IN (     SELECT DISTINCT record_company      FROM orchestra      WHERE year_of_founded > 2003   )
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE major_record_format = "CD" OR major_record_format = "DVD"
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')
SELECT year_of_founded FROM orchestra GROUP BY year_of_founded HAVING COUNT(*) > 1
SELECT year_of_founded FROM orchestra INNER JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID GROUP BY orchestra.year_of_founded HAVING count(DISTINCT performance.Performance_ID) > 1
SELECT COUNT(DISTINCT ID) FROM Highschooler
SELECT COUNT(ID) FROM Highschooler
SELECT name, grade FROM Highschooler
SELECT name, grade FROM Highschooler
SELECT grade FROM Highschooler
SELECT grade, name FROM Highschooler
SELECT grade FROM Highschooler WHERE name = 'Kyle'
SELECT grade FROM Highschooler WHERE name = 'Kyle'
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.name = 'Kyle'
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.name = 'Kyle'
SELECT COUNT(ID) FROM Highschooler WHERE grade IN (9, 10)
SELECT count(DISTINCT ID) FROM Highschooler WHERE grade = 9 OR grade = 10
SELECT grade, COUNT(*) AS count FROM Highschooler GROUP BY grade
SELECT grade, COUNT(*) AS count FROM Highschooler GROUP BY grade
SELECT grade, COUNT(*) AS count FROM Highschooler GROUP BY grade ORDER BY count DESC LIMIT 1
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(DISTINCT ID) >= 4
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(DISTINCT ID) >= 4
SELECT Highschooler.ID, COUNT(Friend.friend_id) AS num_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID
SELECT student_id, COUNT(friend_id)  FROM Friend  GROUP BY student_id
SELECT T1.name, COUNT(T2.friend_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.name
SELECT Highschooler.name, COUNT(Friend.friend_id)  FROM Highschooler  JOIN Friend ON Highschooler.ID = Friend.student_id  GROUP BY Highschooler.name
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID ORDER BY COUNT(Friend.friend_id) DESC LIMIT 1
SELECT name  FROM Highschooler  JOIN Friend ON Highschooler.ID = Friend.student_id  GROUP BY Highschooler.ID  ORDER BY COUNT(Friend.friend_id) DESC  LIMIT 1
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Friend.student_id = Highschooler.ID GROUP BY Highschooler.name HAVING COUNT(Friend.friend_id) >= 3
SELECT name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name HAVING COUNT(Friend.friend_id) >= 3
SELECT T2.name  FROM Highschooler AS T1  JOIN Friend AS T2 ON T1.ID = T2.friend_id  WHERE T1.name = 'Kyle'
SELECT Friend.name FROM Highschooler  JOIN Friend ON Highschooler.ID = Friend.friend_id  WHERE Highschooler.name = 'Kyle'
SELECT count(DISTINCT friend_id)  FROM Highschooler  JOIN Friend ON Highschooler.ID = Friend.student_id  WHERE Highschooler.name = 'Kyle'
SELECT COUNT(*)  FROM Friend  WHERE student_id = (   SELECT ID    FROM Highschooler    WHERE name = 'Kyle' )
SELECT Highschooler.ID FROM Highschooler WHERE NOT EXISTS (   SELECT *   FROM Friend   WHERE Highschooler.ID = Friend.student_id )
SELECT Highschooler.ID  FROM Highschooler WHERE NOT EXISTS (     SELECT *     FROM Friend     WHERE Friend.student_id = Highschooler.ID )
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT name FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT student_id FROM Friend)
SELECT DISTINCT T1.ID FROM Highschooler AS T1 WHERE EXISTS (   SELECT *   FROM Friend AS T2   WHERE T1.ID = T2.student_id ) AND EXISTS (   SELECT *   FROM Likes AS T3   WHERE T1.ID = T3.student_id )
SELECT DISTINCT student_id FROM Friend WHERE student_id IN (     SELECT student_id     FROM Likes ) AND student_id IN (     SELECT friend_id     FROM Friend )
SELECT T1.name  FROM Highschooler AS T1  WHERE EXISTS (     SELECT *      FROM Friend AS T2      WHERE T2.student_id = T1.ID )  AND EXISTS (     SELECT *      FROM Likes AS T3      WHERE T3.liked_id = T1.ID )
SELECT DISTINCT Highschooler.name FROM Highschooler WHERE Highschooler.ID IN (SELECT friend.student_id FROM Friend) AND Highschooler.ID IN (SELECT Likes.student_id FROM Likes)
SELECT student_id, COUNT(*) AS num_likes FROM Likes GROUP BY student_id;
SELECT student_id, COUNT(*) AS like_count FROM Likes GROUP BY student_id
SELECT T1.name, COUNT(T2.*) AS num_likes FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name
SELECT T1.name, COUNT(T2.liked_id)  FROM Highschooler AS T1  JOIN Likes AS T2 ON T1.ID = T2.student_id  GROUP BY T1.name
SELECT name  FROM Highschooler  JOIN Likes ON Highschooler.ID = Likes.student_id  GROUP BY Highschooler.ID  ORDER BY COUNT(Likes.liked_id) DESC  LIMIT 1
SELECT T2.name  FROM Highschooler AS T2  JOIN Likes AS T1 ON T2.ID = T1.student_id  GROUP BY T2.ID, T2.name  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID, Highschooler.name HAVING COUNT(Likes.liked_id) >= 2
SELECT name  FROM Highschooler  JOIN Likes ON Highschooler.ID = Likes.student_id  GROUP BY Highschooler.ID, Highschooler.name  HAVING COUNT(Likes.liked_id) >= 2
SELECT name FROM Highschooler WHERE grade > 5   AND ID IN (     SELECT student_id     FROM Friend     GROUP BY student_id     HAVING COUNT(*) >= 2   )
SELECT name FROM Highschooler WHERE grade > 5   AND ID IN (     SELECT student_id     FROM Friend     GROUP BY student_id     HAVING COUNT(*) >= 2   )
SELECT count(*)  FROM Likes  WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT count(*) AS num_likes FROM Likes WHERE student_id = (     SELECT ID     FROM Highschooler     WHERE name = 'Kyle' )
SELECT AVG(grade)  FROM Highschooler  WHERE ID IN (SELECT student_id FROM Friend)
SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)
SELECT min(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT DISTINCT state  FROM Owners  WHERE state IN (SELECT DISTINCT state FROM Professionals)
SELECT owners.state FROM owners JOIN professionals ON owners.state = professionals.state WHERE owners.state IS NOT NULL AND professionals.state IS NOT NULL
SELECT AVG(age) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
SELECT AVG(dogs.age) FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (     SELECT professional_id     FROM Treatments     GROUP BY professional_id     HAVING COUNT(treatment_id) > 2 )
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) > 2 )
SELECT dogs.name FROM dogs LEFT JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.cost_of_treatment IS NULL OR treatments.cost_of_treatment <= 1000
SELECT dogs.name FROM dogs WHERE dogs.owner_id NOT IN (     SELECT treatments.owner_id     FROM treatments     WHERE treatments.cost_of_treatment > 1000 )
SELECT DISTINCT T1.first_name  FROM Owners AS T1  LEFT JOIN Dogs AS T2 ON T1.first_name = T2.name  WHERE T2.name IS NULL  UNION  SELECT DISTINCT T3.first_name  FROM Professionals AS T3  LEFT JOIN Dogs AS T4 ON T3.first_name = T4.name  WHERE T4.name IS NULL
SELECT DISTINCT first_name FROM Professionals WHERE first_name NOT IN (SELECT DISTINCT name FROM Dogs)   AND first_name NOT IN (SELECT DISTINCT first_name FROM Owners)
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1
SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id = (   SELECT owner_id   FROM Dogs   GROUP BY owner_id   ORDER BY COUNT(dog_id) DESC   LIMIT 1 )
SELECT professional_id, role_code, first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id, Professionals.role_code, Professionals.first_name HAVING COUNT(*) >= 2
SELECT professional_id, role_code, first_name FROM Professionals GROUP BY professional_id, role_code, first_name HAVING COUNT(*) >= 2
SELECT breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY breed_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT breed_name FROM breeds GROUP BY breed_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.last_name ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1
SELECT owners.owner_id, owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.cost_of_treatment = (SELECT MAX(cost_of_treatment) FROM Treatments)
SELECT Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code GROUP BY Treatments.treatment_type_code, Treatment_Types.treatment_type_description ORDER BY sum(Treatments.cost_of_treatment) LIMIT 1
SELECT treatment_type_description FROM Treatment_Types WHERE treatment_type_code = (     SELECT treatment_type_code     FROM Treatments     GROUP BY treatment_type_code     HAVING SUM(cost_of_treatment) = (         SELECT MIN(total_cost)         FROM (             SELECT treatment_type_code, SUM(cost_of_treatment) AS total_cost             FROM Treatments             GROUP BY treatment_type_code         ) AS T     ) )
SELECT Owners.owner_id, Owners.zip_code FROM Owners WHERE Owners.owner_id = (   SELECT Dogs.owner_id   FROM Dogs   JOIN Charges ON Dogs.dog_id = Charges.dog_id   GROUP BY Dogs.owner_id   ORDER BY SUM(Charges.charge_amount) DESC   LIMIT 1 )
SELECT owners.owner_id, owners.zip_code FROM owners WHERE owners.owner_id = (   SELECT dogs.owner_id   FROM dogs   JOIN treatments ON dogs.dog_id = treatments.dog_id   GROUP BY dogs.owner_id   ORDER BY SUM(treatments.cost_of_treatment) DESC   LIMIT 1 )
SELECT professional_id, cell_number FROM Professionals GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2
SELECT professional_id, cell_number  FROM Professionals  WHERE professional_id IN (SELECT professional_id                            FROM Treatments                            GROUP BY professional_id                            HAVING COUNT(DISTINCT treatment_type_code) > 1)
SELECT first_name, last_name FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments) )
SELECT first_name, last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments))
SELECT treatments.date_of_treatment, professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id
SELECT treatments.date_of_treatment, professionals.first_name  FROM treatments  JOIN professionals ON treatments.professional_id = professionals.professional_id
SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description  FROM treatments  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT cost_of_treatment, treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
SELECT owners.first_name, owners.last_name, sizes.size_description FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code
SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code
SELECT owners.first_name, dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id
SELECT dogs.name, treatments.date_of_treatment  FROM Dogs  JOIN Treatments ON Dogs.dog_id = Treatments.dog_id  WHERE Dogs.breed_code = (SELECT breed_code FROM Breeds ORDER BY breed_code LIMIT 1)
SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE dogs.breed_code IN (     SELECT breed_code     FROM breeds     GROUP BY breed_code     HAVING COUNT(*) = 1 )
SELECT owners.first_name, dogs.name  FROM dogs  JOIN owners ON dogs.owner_id = owners.owner_id  WHERE owners.state = 'Virginia'
SELECT owners.first_name, dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia'
SELECT dogs.date_arrived, dogs.date_departed  FROM dogs  JOIN treatments ON dogs.dog_id = treatments.dog_id
SELECT date_arrived, date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
SELECT last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.date_of_birth LIMIT 1
SELECT last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.date_of_birth ASC LIMIT 1
SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin')
SELECT email_address  FROM Professionals  WHERE state IN ('Hawaii', 'Wisconsin')
SELECT date_arrived, date_departed FROM Dogs
SELECT date_arrived, date_departed FROM Dogs
SELECT COUNT(DISTINCT dog_id) FROM Treatments
SELECT count(DISTINCT dog_id) FROM Treatments
SELECT COUNT(DISTINCT professional_id) FROM Treatments
SELECT count(DISTINCT professional_id) FROM Treatments
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'
SELECT first_name, last_name, email_address  FROM Owners  WHERE state LIKE '%North%'
SELECT COUNT(dog_id) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
SELECT COUNT(dog_id) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT count(DISTINCT T1.dog_id)  FROM Dogs AS T1  WHERE T1.dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT count(DISTINCT owners.owner_id) FROM owners LEFT JOIN dogs ON owners.owner_id = dogs.owner_id WHERE dogs.owner_id IS NULL
SELECT COUNT(DISTINCT T1.owner_id)  FROM Owners AS T1  WHERE T1.owner_id NOT IN (SELECT DISTINCT T2.owner_id FROM Dogs AS T2)
SELECT count(DISTINCT T1.professional_id)  FROM Professionals AS T1  WHERE T1.professional_id NOT IN (     SELECT DISTINCT T2.professional_id      FROM Treatments AS T2 )
SELECT count(professionals.professional_id)  FROM professionals  WHERE professionals.professional_id NOT IN  (SELECT DISTINCT treatments.professional_id FROM treatments)
SELECT name, age, weight  FROM Dogs  WHERE abandoned_yn = 1
SELECT dogs.name, dogs.age, dogs.weight  FROM dogs  WHERE dogs.abandoned_yn = 1
SELECT AVG(age) FROM Dogs
SELECT AVG(age) FROM Dogs
SELECT max(age) FROM Dogs
SELECT MAX(age) FROM Dogs
SELECT charge_type, charge_amount  FROM Charges
SELECT charge_type, charge_amount FROM Charges
SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1
SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1
SELECT email_address, cell_number, home_phone FROM Professionals
SELECT email_address, cell_number, home_phone FROM Professionals
SELECT breed_name, size_description FROM Breeds, Sizes
SELECT DISTINCT breed_code, size_code FROM Dogs
SELECT professionals.first_name, treatment_types.treatment_type_description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT COUNT(Singer_ID) FROM singer
SELECT COUNT(*) FROM singer
SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions ASC
SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions ASC
SELECT birth_year, citizenship FROM singer
SELECT Birth_Year, Citizenship FROM singer
SELECT name FROM singer WHERE citizenship <> "France"
SELECT name FROM singer WHERE citizenship <> 'French'
SELECT 
SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949
SELECT name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
SELECT name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
SELECT citizenship, COUNT(DISTINCT singer_id) FROM singer GROUP BY citizenship
SELECT citizenship, COUNT(DISTINCT Singer_ID)  FROM singer  GROUP BY citizenship
SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1
SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1
SELECT citizenship, MAX(net_worth_millions)  FROM singer  GROUP BY citizenship
SELECT citizenship, MAX(net_worth_millions) AS max_net_worth FROM singer GROUP BY citizenship
SELECT title, name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID
SELECT title, name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID
SELECT name  FROM singer  JOIN song ON singer.Singer_ID = song.Singer_ID  WHERE Sales > 300000;
SELECT name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000
SELECT name FROM singer INNER JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Singer_ID, singer.Name HAVING COUNT(song.Song_ID) > 1
SELECT name FROM singer GROUP BY name HAVING COUNT(*) > 1
SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name
SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name
SELECT name FROM singer LEFT JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Singer_ID IS NULL
SELECT name AS sname  FROM singer  WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
SELECT The provided SQL query has a logical issue. It is impossible for a birth year to be both before 1945 and after 1955. Therefore, there won't be any singers who satisfy this condition.  To fix the query and find the citizenship shared by singers with a birth year before 1945 or after 1955, the query can be modified as follows:  ```sql SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 OR birth_year > 1955; ```  This query will return the distinct citizenship values of singers who were born before 1945 or after 1955.
SELECT The provided SQL query has a logical issue. It is impossible for singers to have a birth year before 1945 and after 1955 at the same time. Therefore, the query will not return any results.   To fix the query and retrieve the desired information, we need to use the OR operator instead of the AND operator in the WHERE clause. Here's the fixed SQL query:  ```sql SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 OR birth_year > 1955; ```  This query will select the distinct citizenships from the "singer" table where the birth year is either before 1945 or after 1955.
SELECT COUNT(*) FROM Other_Available_Features
SELECT feature_type_name FROM ref_feature_types WHERE feature_type_code = (   SELECT feature_type_code   FROM other_available_features   WHERE feature_name = 'AirCon' )
SELECT property_type_description  FROM ref_property_types  WHERE property_type_code = (SELECT property_type_code FROM properties)
SELECT Properties.property_name  FROM Properties  WHERE (Properties.property_type_code = 'Apartment' OR Properties.property_type_code = 'House')  AND Properties.room_count > 1
