
index is 0
SELECT count(*) FROM singer
How many singers do we have?
schema_links:
How many singers do we have? | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.* | stadium : stadium.capacity , stadium.location , stadium.name , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
select count ( _ ) from _
SQL = SELECT count(*) FROM singer
natsql:
select count ( _ ) from _

SQL:
SELECT count(*) FROM singer
self correction:
SELECT count(*) FROM singer

index is 1
SELECT count(*) FROM singer
What is the total number of singers?
schema_links:
What is the total number of singers? | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.age , singer.* | stadium : stadium.capacity , stadium.highest , stadium.lowest , stadium.location , stadium.name , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct singer.singer_id ) from singer
SQL = SELECT count(DISTINCT singer_ID) FROM singer
natsql:
select count ( distinct _ ) from _ | select count ( distinct singer.singer_id ) from singer

SQL:
SELECT count(DISTINCT singer_ID) FROM singer
self correction:
SELECT COUNT(DISTINCT Singer_ID) FROM singer

index is 2
SELECT name ,  country ,  age FROM singer ORDER BY age DESC
Show name, country, age for all singers ordered by age from the oldest to the youngest.
schema_links:
Show name, country, age for all singers ordered by age from the oldest to the youngest. | singer : singer.name , singer.country , singer.age , singer.song_name , singer.is_male , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select _ from _ order by _ desc
natsql and SQL generation:
select _ , _ , _ from _ order by _ desc | select singer.name , singer.country , singer.age from singer order by singer.age desc
SQL = SELECT name ,  country ,  age FROM singer ORDER BY age DESC
natsql:
select _ , _ , _ from _ order by _ desc | select singer.name , singer.country , singer.age from singer order by singer.age desc

SQL:
SELECT name ,  country ,  age FROM singer ORDER BY age DESC
self correction:
SELECT name, country, age  FROM singer  ORDER BY age DESC

index is 3
SELECT name ,  country ,  age FROM singer ORDER BY age DESC
What are the names, countries, and ages for every singer in descending order of age?
schema_links:
What are the names, countries, and ages for every singer in descending order of age? | singer : singer.name , singer.country , singer.age , singer.song_name , singer.singer_id , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select _ from _ order by _ desc
natsql and SQL generation:
select _ , _ , _ from _ order by _ desc | select singer.name , singer.country , singer.age from singer order by singer.age desc
SQL = SELECT name ,  country ,  age FROM singer ORDER BY age DESC
natsql:
select _ , _ , _ from _ order by _ desc | select singer.name , singer.country , singer.age from singer order by singer.age desc

SQL:
SELECT name ,  country ,  age FROM singer ORDER BY age DESC
self correction:
SELECT singer.Name, singer.Country, singer.Age FROM singer ORDER BY singer.Age DESC

index is 4
SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
What is the average, minimum, and maximum age of all singers from France?
schema_links:
What is the average, minimum, and maximum age of all singers from France? | singer : singer.country ( France ) , singer.age , singer.name , singer.is_male , singer.singer_id , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select avg ( _ ) , min ( _ ) , max ( _ ) from _ where _
natsql and SQL generation:
select avg ( _ ) , min ( _ ) , max ( _ ) from _ where _ | select avg ( singer.age ) , min ( singer.age ) , max ( singer.age ) from singer where singer.country = 'France'
SQL = SELECT AVG(age) , MIN(age) , MAX(age) FROM singer WHERE country = 'France'
natsql:
select avg ( _ ) , min ( _ ) , max ( _ ) from _ where _ | select avg ( singer.age ) , min ( singer.age ) , max ( singer.age ) from singer where singer.country = 'France'

SQL:
SELECT AVG(age) , MIN(age) , MAX(age) FROM singer WHERE country = 'France'
self correction:
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'

index is 5
SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
What is the average, minimum, and maximum age for all French singers?
schema_links:
What is the average, minimum, and maximum age for all French singers? | singer : singer.country , singer.age , singer.name , singer.is_male , singer.song_name , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select avg ( _ ) , min ( _ ) , max ( _ ) from _ where _
natsql and SQL generation:
select avg ( _ ) , min ( _ ) , max ( _ ) from _ where _ | select avg ( singer.age ) , min ( singer.age ) , max ( singer.age ) from singer where singer.country = 'France'
SQL = SELECT AVG(age) , MIN(age) , MAX(age) FROM singer WHERE country = 'France'
natsql:
select avg ( _ ) , min ( _ ) , max ( _ ) from _ where _ | select avg ( singer.age ) , min ( singer.age ) , max ( singer.age ) from singer where singer.country = 'France'

SQL:
SELECT AVG(age) , MIN(age) , MAX(age) FROM singer WHERE country = 'France'
self correction:
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'

index is 6
SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1
Show the name and the release year of the song by the youngest singer.
schema_links:
Show the name and the release year of the song by the youngest singer. | singer : singer.song_name , singer.song_release_year , singer.age , singer.name , singer.singer_id , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select _ from _ order by _ asc limit _
natsql and SQL generation:
select _ , _ from _ where _ = ( select min ( _ ) from _ ) | select singer.name , singer.song_release_year from singer where singer.age = ( select min ( singer.age ) from singer )
SQL = SELECT name ,  song_release_year FROM singer WHERE age  =  (SELECT min(age) FROM singer)
natsql:
select _ , _ from _ where _ = ( select min ( _ ) from _ ) | select singer.name , singer.song_release_year from singer where singer.age = ( select min ( singer.age ) from singer )

SQL:
SELECT name ,  song_release_year FROM singer WHERE age  =  (SELECT min(age) FROM singer)
self correction:
SELECT singer.Name, singer.Song_release_year FROM singer WHERE singer.Age = (   SELECT MIN(singer.Age)   FROM singer )

index is 7
SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1
What are the names and release years for all the songs of the youngest singer?
schema_links:
What are the names and release years for all the songs of the youngest singer? | singer : singer.song_release_year , singer.song_name , singer.age , singer.name , singer.is_male , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select _ from _ order by _ asc limit _
natsql and SQL generation:
select _ , _ from _ where _ = ( select min ( _ ) from _ ) | select singer.name , singer.song_release_year from singer where singer.age = ( select min ( singer.age ) from singer )
SQL = SELECT name ,  song_release_year FROM singer WHERE age  =  (SELECT min(age) FROM singer)
natsql:
select _ , _ from _ where _ = ( select min ( _ ) from _ ) | select singer.name , singer.song_release_year from singer where singer.age = ( select min ( singer.age ) from singer )

SQL:
SELECT name ,  song_release_year FROM singer WHERE age  =  (SELECT min(age) FROM singer)
self correction:
SELECT s.name, s.song_release_year  FROM singer AS s WHERE s.age = (SELECT MIN(age) FROM singer)

index is 8
SELECT DISTINCT country FROM singer WHERE age  >  20
What are all distinct countries where singers above age 20 are from?
schema_links:
What are all distinct countries where singers above age 20 are from? | singer : singer.country , singer.age , singer.name , singer.song_name , singer.singer_id , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select distinct _ from _ where _
natsql and SQL generation:
select distinct _ from _ where @.@ > _ | select distinct singer.country from singer where singer.age > 20
SQL = SELECT DISTINCT country FROM singer WHERE age  >  20
natsql:
select distinct _ from _ where @.@ > _ | select distinct singer.country from singer where singer.age > 20

SQL:
SELECT DISTINCT country FROM singer WHERE age  >  20
self correction:
SELECT DISTINCT country FROM singer WHERE Age > 20

index is 9
SELECT DISTINCT country FROM singer WHERE age  >  20
What are  the different countries with singers above age 20?
schema_links:
What are  the different countries with singers above age 20? | singer : singer.country , singer.age , singer.name , singer.song_name , singer.is_male , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select distinct _ from _ where _
natsql and SQL generation:
select distinct _ from _ where _ | select distinct singer.country from singer where singer.age > 20
SQL = SELECT DISTINCT country FROM singer WHERE age > 20
natsql:
select distinct _ from _ where _ | select distinct singer.country from singer where singer.age > 20

SQL:
SELECT DISTINCT country FROM singer WHERE age > 20
self correction:
SELECT DISTINCT Country  FROM singer  WHERE Age > 20

index is 10
SELECT country ,  count(*) FROM singer GROUP BY country
Show all countries and the number of singers in each country.
schema_links:
Show all countries and the number of singers in each country. | singer : singer.country , singer.name , singer.song_name , singer.age , singer.is_male , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select singer.country , count ( singer.* ) from singer group by singer.country
SQL = SELECT country , COUNT(*) FROM singer GROUP BY country
natsql:
select _ , count ( _ ) from _ group by _ | select singer.country , count ( singer.* ) from singer group by singer.country

SQL:
SELECT country , COUNT(*) FROM singer GROUP BY country
self correction:
SELECT country, COUNT(*)  FROM singer  GROUP BY country

index is 11
SELECT country ,  count(*) FROM singer GROUP BY country
How many singers are from each country?
schema_links:
How many singers are from each country? | singer : singer.country , singer.singer_id , singer.name , singer.song_name , singer.age , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
select count ( * ) , _ from _ group by _ | select count ( * ) , singer.country from singer group by singer.country
SQL = SELECT COUNT(*) , country FROM singer GROUP BY country
natsql:
select count ( * ) , _ from _ group by _ | select count ( * ) , singer.country from singer group by singer.country

SQL:
SELECT COUNT(*) , country FROM singer GROUP BY country
self correction:
SELECT COUNT(*) AS Singer_Count, Country FROM singer GROUP BY Country

index is 12
SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
List all song names by singers above the average age.
schema_links:
List all song names by singers above the average age. | singer : singer.song_name , singer.age , singer.name , singer.song_release_year , singer.country , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select _ from _ where @.@ > avg ( _ )
natsql and SQL generation:
select _ from _ where _ > avg ( _ ) | select singer.song_name from singer where singer.age > avg ( singer.age )
SQL = SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
natsql:
select _ from _ where _ > avg ( _ ) | select singer.song_name from singer where singer.age > avg ( singer.age )

SQL:
SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
self correction:
SELECT song_name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)

index is 13
SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
What are all the song names by singers who are older than average?
schema_links:
What are all the song names by singers who are older than average? | singer : singer.song_name , singer.age , singer.name , singer.song_release_year , singer.country , singer.* | stadium : stadium.average , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select _ from _ where @.@ > avg ( _ )
natsql and SQL generation:
select _ from _ where @.@ > avg ( _ ) | select singer.song_name from singer where singer.age > avg ( singer.age )
SQL = SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
natsql:
select _ from _ where @.@ > avg ( _ ) | select singer.song_name from singer where singer.age > avg ( singer.age )

SQL:
SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
self correction:
SELECT s.song_Name  FROM singer s WHERE s.Age > (SELECT AVG(singer.Age) FROM singer)

index is 14
SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
Show location and name for all stadiums with a capacity between 5000 and 10000.
schema_links:
Show location and name for all stadiums with a capacity between 5000 and 10000. | stadium : stadium.name , stadium.capacity , stadium.location , stadium.highest , stadium.stadium_id , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select _ from _ where _ between _ and _
natsql and SQL generation:
select _ , _ from _ where _ between _ and _ | select stadium.location , stadium.name from stadium where stadium.capacity between 5000 and 10000
SQL = SELECT location , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
natsql:
select _ , _ from _ where _ between _ and _ | select stadium.location , stadium.name from stadium where stadium.capacity between 5000 and 10000

SQL:
SELECT location , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
self correction:
SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000

index is 15
SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
What are the locations and names of all stations with capacity between 5000 and 10000?
schema_links:
What are the locations and names of all stations with capacity between 5000 and 10000? | stadium : stadium.capacity , stadium.name , stadium.location , stadium.stadium_id , stadium.highest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select _ from _ where _ between _ and _
natsql and SQL generation:
select _ , _ from _ where _ between _ and _ | select stadium.location , stadium.name from stadium where stadium.capacity between 5000 and 10000
SQL = SELECT location ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
natsql:
select _ , _ from _ where _ between _ and _ | select stadium.location , stadium.name from stadium where stadium.capacity between 5000 and 10000

SQL:
SELECT location ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
self correction:
SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;

index is 16
select max(capacity), average from stadium
What is the maximum capacity and the average of all stadiums ?
schema_links:
What is the maximum capacity and the average of all stadiums ? | stadium : stadium.average , stadium.capacity , stadium.highest , stadium.lowest , stadium.name , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select max ( _ ) , _ from _
natsql and SQL generation:
select max ( _ ) , avg ( _ ) from _ | select max ( stadium.capacity ) , avg ( stadium.capacity ) from stadium
SQL = SELECT max(capacity) ,  avg(capacity) FROM stadium
natsql:
select max ( _ ) , avg ( _ ) from _ | select max ( stadium.capacity ) , avg ( stadium.capacity ) from stadium

SQL:
SELECT max(capacity) ,  avg(capacity) FROM stadium
self correction:
SELECT max(Capacity), avg(Capacity) FROM stadium

index is 17
select avg(capacity) ,  max(capacity) from stadium
What is the average and maximum capacities for all stadiums ?
schema_links:
What is the average and maximum capacities for all stadiums ? | stadium : stadium.capacity , stadium.average , stadium.highest , stadium.lowest , stadium.location , stadium.* | concert : concert.concert_name , concert.theme , concert.year , concert.concert_id , concert.stadium_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select avg ( _ ) , max ( _ ) from _
natsql and SQL generation:
select avg ( _ ) , max ( _ ) from _ | select avg ( stadium.capacity ) , max ( stadium.capacity ) from stadium
SQL = SELECT AVG(capacity) , MAX(capacity) FROM stadium
natsql:
select avg ( _ ) , max ( _ ) from _ | select avg ( stadium.capacity ) , max ( stadium.capacity ) from stadium

SQL:
SELECT AVG(capacity) , MAX(capacity) FROM stadium
self correction:
SELECT AVG(Capacity), MAX(Capacity) FROM stadium

index is 18
SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
What is the name and capacity for the stadium with highest average attendance?
schema_links:
What is the name and capacity for the stadium with highest average attendance? | stadium : stadium.name , stadium.capacity , stadium.average , stadium.highest , stadium.stadium_id , stadium.* | concert : concert.concert_name , concert.theme , concert.year , concert.concert_id , concert.stadium_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
select _ , max ( avg ( _ ) ) from _ group by _ | select stadium.name , stadium.capacity from stadium where stadium.average = max ( stadium.average )
SQL = SELECT name ,  capacity FROM stadium WHERE average  =  (SELECT max(average) FROM stadium)
natsql:
select _ , max ( avg ( _ ) ) from _ group by _ | select stadium.name , stadium.capacity from stadium where stadium.average = max ( stadium.average )

SQL:
SELECT name ,  capacity FROM stadium WHERE average  =  (SELECT max(average) FROM stadium)
self correction:
SELECT name, capacity  FROM stadium  WHERE average = (SELECT MAX(average) FROM stadium)

index is 19
SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
What is the name and capacity for the stadium with the highest average attendance?
schema_links:
What is the name and capacity for the stadium with the highest average attendance? | stadium : stadium.name , stadium.capacity , stadium.average , stadium.highest , stadium.stadium_id , stadium.* | concert : concert.concert_name , concert.theme , concert.year , concert.concert_id , concert.stadium_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
select _ , max ( avg ( _ ) ) from _ group by _ | select stadium.name , stadium.capacity from stadium where stadium.average = max ( stadium.average )
SQL = SELECT name ,  capacity FROM stadium WHERE average  =  (SELECT max(average) FROM stadium)
natsql:
select _ , max ( avg ( _ ) ) from _ group by _ | select stadium.name , stadium.capacity from stadium where stadium.average = max ( stadium.average )

SQL:
SELECT name ,  capacity FROM stadium WHERE average  =  (SELECT max(average) FROM stadium)
self correction:
SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium)

index is 20
SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015
How many concerts are there in year 2014 or 2015?
schema_links:
How many concerts are there in year 2014 or 2015? | concert : concert.year , concert.concert_name , concert.concert_id , concert.theme , concert.stadium_id , concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
select count ( distinct _ ) from _ where _ or _ | select count ( distinct concert.concert_id ) from concert where concert.year = 2014 or concert.year = 2015
SQL = SELECT count(DISTINCT concert_ID) FROM concert WHERE Year  =  2014 OR Year  =  2015
natsql:
select count ( distinct _ ) from _ where _ or _ | select count ( distinct concert.concert_id ) from concert where concert.year = 2014 or concert.year = 2015

SQL:
SELECT count(DISTINCT concert_ID) FROM concert WHERE Year  =  2014 OR Year  =  2015
self correction:
SELECT count(DISTINCT concert_ID) FROM concert WHERE Year IN (2014, 2015)

index is 21
SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015
How many concerts occurred in 2014 or 2015?
schema_links:
How many concerts occurred in 2014 or 2015? | concert : concert.year , concert.concert_name , concert.concert_id , concert.theme , concert.stadium_id , concert.* | stadium : stadium.capacity , stadium.location , stadium.name , stadium.highest , stadium.lowest , stadium.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
select count ( _ ) from _ where _ = _ or _ = _ | select count ( concert.concert_id ) from concert where concert.year = 2014 or concert.year = 2015
SQL = SELECT count(concert_ID) FROM concert WHERE Year = 2014 OR Year = 2015
natsql:
select count ( _ ) from _ where _ = _ or _ = _ | select count ( concert.concert_id ) from concert where concert.year = 2014 or concert.year = 2015

SQL:
SELECT count(concert_ID) FROM concert WHERE Year = 2014 OR Year = 2015
self correction:
SELECT count(concert_ID) FROM concert WHERE Year = 2014 OR Year = 2015

index is 22
SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id
Show the stadium name and the number of concerts in each stadium.
schema_links:
Show the stadium name and the number of concerts in each stadium. | stadium : stadium.name , stadium.stadium_id , stadium.capacity , stadium.location , stadium.highest , stadium.* | concert : concert.stadium_id , concert.concert_name , concert.concert_id , concert.theme , concert.year , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select stadium.name , count ( concert.concert_id ) from stadium join concert on stadium.stadium_id = concert.stadium_id group by stadium.name
SQL = SELECT stadium.name ,  COUNT (concert.concert_ID) FROM stadium JOIN concert ON stadium.stadium_ID = concert.stadium_ID GROUP BY stadium.name
natsql:
select _ , count ( _ ) from _ group by _ | select stadium.name , count ( concert.concert_id ) from stadium join concert on stadium.stadium_id = concert.stadium_id group by stadium.name

SQL:
SELECT stadium.name ,  COUNT (concert.concert_ID) FROM stadium JOIN concert ON stadium.stadium_ID = concert.stadium_ID GROUP BY stadium.name
self correction:
SELECT stadium.Name, COUNT(concert.concert_ID)  FROM stadium  JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID  GROUP BY stadium.Name

index is 23
SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id
For each stadium, how many concerts play there?
schema_links:
For each stadium, how many concerts play there? | concert : concert.stadium_id , concert.concert_name , concert.theme , concert.year , concert.concert_id , concert.* | stadium : stadium.name , stadium.stadium_id , stadium.capacity , stadium.highest , stadium.location , stadium.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select stadium.name , count ( concert.* ) from stadium join concert on stadium.stadium_id = concert.stadium_id group by stadium.name
SQL = SELECT T2.name , COUNT(T1.concert_ID) FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T2.name
natsql:
select _ , count ( _ ) from _ group by _ | select stadium.name , count ( concert.* ) from stadium join concert on stadium.stadium_id = concert.stadium_id group by stadium.name

SQL:
SELECT T2.name , COUNT(T1.concert_ID) FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T2.name
self correction:
SELECT T2.Name, COUNT(T1.concert_ID)  FROM concert AS T1  JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID  GROUP BY T2.Name

index is 24
SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1
Show the stadium name and capacity with most number of concerts in year 2014 or after.
schema_links:
Show the stadium name and capacity with most number of concerts in year 2014 or after. | stadium : stadium.name , stadium.capacity , stadium.stadium_id , stadium.location , stadium.highest , stadium.* | concert : concert.year , concert.stadium_id , concert.concert_name , concert.concert_id , concert.theme , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select _ from _ where _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
select _ , _ from _ where _.year >= _ group by _ order by count ( _ ) desc limit _ | select stadium.name , stadium.capacity from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year >= 2014 group by stadium.name , stadium.capacity order by count ( concert.concert_id ) desc limit 1
SQL = SELECT stadium.name ,  stadium.capacity FROM stadium JOIN concert ON stadium.stadium_id  =  concert.stadium_id WHERE concert.year  >=  2014 GROUP BY stadium.name ,  stadium.capacity ORDER BY count(concert.concert_id) DESC LIMIT 1
natsql:
select _ , _ from _ where _.year >= _ group by _ order by count ( _ ) desc limit _ | select stadium.name , stadium.capacity from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year >= 2014 group by stadium.name , stadium.capacity order by count ( concert.concert_id ) desc limit 1

SQL:
SELECT stadium.name ,  stadium.capacity FROM stadium JOIN concert ON stadium.stadium_id  =  concert.stadium_id WHERE concert.year  >=  2014 GROUP BY stadium.name ,  stadium.capacity ORDER BY count(concert.concert_id) DESC LIMIT 1
self correction:
SELECT stadium.name, stadium.capacity  FROM stadium  JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID  WHERE concert.Year >= 2014  GROUP BY stadium.name, stadium.capacity  ORDER BY COUNT(concert.concert_ID) DESC  LIMIT 1

index is 25
select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1
What is the name and capacity of the stadium with the most concerts after 2013 ?
schema_links:
What is the name and capacity of the stadium with the most concerts after 2013 ? | stadium : stadium.name , stadium.capacity , stadium.stadium_id , stadium.location , stadium.highest , stadium.* | concert : concert.year , concert.stadium_id , concert.concert_name , concert.concert_id , concert.theme , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select _ from _ where _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
select _ from _ where _ > _ order by _ desc limit _ | select stadium.name , stadium.capacity from stadium where concert.year > 2013 order by stadium.capacity desc limit 1
SQL = SELECT name ,  capacity FROM stadium WHERE stadium_id  =  (SELECT stadium_id FROM concert WHERE year > 2013 GROUP BY stadium_id ORDER BY COUNT(*) DESC LIMIT 1)
natsql:
select _ from _ where _ > _ order by _ desc limit _ | select stadium.name , stadium.capacity from stadium where concert.year > 2013 order by stadium.capacity desc limit 1

SQL:
SELECT name ,  capacity FROM stadium WHERE stadium_id  =  (SELECT stadium_id FROM concert WHERE year > 2013 GROUP BY stadium_id ORDER BY COUNT(*) DESC LIMIT 1)
self correction:
SELECT name, capacity  FROM stadium  WHERE stadium_id = (   SELECT stadium_id    FROM concert    WHERE year > 2013    GROUP BY stadium_id    ORDER BY COUNT(*) DESC    LIMIT 1 )

index is 26
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
Which year has most number of concerts?
schema_links:
Which year has most number of concerts? | concert : concert.year , concert.concert_name , concert.theme , concert.concert_id , concert.stadium_id , concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select concert.year from concert group by concert.year order by count ( concert.* ) desc limit 1
SQL = SELECT year FROM concert GROUP BY year ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select concert.year from concert group by concert.year order by count ( concert.* ) desc limit 1

SQL:
SELECT year FROM concert GROUP BY year ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT concert.year FROM concert GROUP BY concert.year ORDER BY COUNT(*) DESC LIMIT 1

index is 27
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
What is the year that had the most concerts?
schema_links:
What is the year that had the most concerts? | concert : concert.year , concert.concert_name , concert.concert_id , concert.theme , concert.stadium_id , concert.* | stadium : stadium.capacity , stadium.highest , stadium.lowest , stadium.location , stadium.name , stadium.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select concert.year from concert group by concert.year order by count ( concert.* ) desc limit 1
SQL = SELECT year FROM concert GROUP BY year ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select concert.year from concert group by concert.year order by count ( concert.* ) desc limit 1

SQL:
SELECT year FROM concert GROUP BY year ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1

index is 28
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
Show the stadium names without any concert.
schema_links:
Show the stadium names without any concert. | stadium : stadium.name , stadium.stadium_id , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.concert_name , concert.theme , concert.stadium_id , concert.year , concert.concert_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select _ from _ where @.@ not in _
natsql and SQL generation:
select _ from _ where @.@ not in ( select @.@ from @ ) | select stadium.name from stadium where stadium.stadium_id not in ( select concert.stadium_id from concert )
SQL = SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
natsql:
select _ from _ where @.@ not in ( select @.@ from @ ) | select stadium.name from stadium where stadium.stadium_id not in ( select concert.stadium_id from concert )

SQL:
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
self correction:
SELECT name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)

index is 29
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
What are the names of the stadiums without any concerts?
schema_links:
What are the names of the stadiums without any concerts? | stadium : stadium.name , stadium.stadium_id , stadium.capacity , stadium.location , stadium.highest , stadium.* | concert : concert.stadium_id , concert.concert_name , concert.theme , concert.year , concert.concert_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select _ from _ where @.@ not in _
natsql and SQL generation:
select _ from _ where not exists ( select _ from _ where _._ = _._ ) | select stadium.name from stadium where not exists ( select concert.stadium_id from concert where concert.stadium_id = stadium.stadium_id )
SQL = SELECT name FROM stadium WHERE NOT EXISTS (SELECT stadium_id FROM concert WHERE concert.stadium_id = stadium.stadium_id)
natsql:
select _ from _ where not exists ( select _ from _ where _._ = _._ ) | select stadium.name from stadium where not exists ( select concert.stadium_id from concert where concert.stadium_id = stadium.stadium_id )

SQL:
SELECT name FROM stadium WHERE NOT EXISTS (SELECT stadium_id FROM concert WHERE concert.stadium_id = stadium.stadium_id)
self correction:
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)

index is 30
SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30
Show countries where a singer above age 40 and a singer below 30 are from.
schema_links:
Show countries where a singer above age 40 and a singer below 30 are from. | singer : singer.country , singer.age , singer.is_male , singer.name , singer.singer_id , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select _ from _ where _
natsql and SQL generation:
select distinct _ from _ where _ or _ | select distinct singer.country from singer where singer.age > 40 or singer.age < 30
SQL = SELECT DISTINCT country FROM singer WHERE age > 40 OR age < 30
natsql:
select distinct _ from _ where _ or _ | select distinct singer.country from singer where singer.age > 40 or singer.age < 30

SQL:
SELECT DISTINCT country FROM singer WHERE age > 40 OR age < 30
self correction:
SELECT DISTINCT Country  FROM singer  WHERE Age > 40     AND Country IN (       SELECT Country        FROM singer        WHERE Age < 30    )

index is 31
SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014
Show names for all stadiums except for stadiums having a concert in year 2014.
schema_links:
Show names for all stadiums except for stadiums having a concert in year 2014. | stadium : stadium.name , stadium.stadium_id , stadium.capacity , stadium.lowest , stadium.location , stadium.* | concert : concert.year , concert.concert_name , concert.stadium_id , concert.theme , concert.concert_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select _ from _ where except_ @.@ is _ and _
natsql and SQL generation:
select distinct _ from _ where not exists ( select _ from _ where _ ) | select distinct stadium.name from stadium where not exists ( select concert.stadium_id from concert where concert.year = 2014 )
SQL = SELECT DISTINCT name FROM stadium WHERE NOT EXISTS (SELECT stadium_id FROM concert WHERE year = 2014)
natsql:
select distinct _ from _ where not exists ( select _ from _ where _ ) | select distinct stadium.name from stadium where not exists ( select concert.stadium_id from concert where concert.year = 2014 )

SQL:
SELECT DISTINCT name FROM stadium WHERE NOT EXISTS (SELECT stadium_id FROM concert WHERE year = 2014)
self correction:
SELECT DISTINCT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014)

index is 32
SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014
What are the names of all stadiums that did not have a concert in 2014?
schema_links:
What are the names of all stadiums that did not have a concert in 2014? | stadium : stadium.name , stadium.stadium_id , stadium.capacity , stadium.location , stadium.highest , stadium.* | concert : concert.year , concert.concert_name , concert.theme , concert.stadium_id , concert.concert_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select _ from _ where except_ @.@ is _ and _
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ where _ = _ ) | select stadium.name from stadium where stadium.stadium_id not in ( select concert.stadium_id from concert where concert.year = 2014 )
SQL = SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)
natsql:
select _ from _ where _ not in ( select _ from _ where _ = _ ) | select stadium.name from stadium where stadium.stadium_id not in ( select concert.stadium_id from concert where concert.year = 2014 )

SQL:
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)
self correction:
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE Year = 2014)

index is 33
SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id
Show the name and theme for all concerts and the number of singers in each concert.
schema_links:
Show the name and theme for all concerts and the number of singers in each concert. | concert : concert.concert_name , concert.theme , concert.concert_id , concert.year , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | singer : singer.name , singer.singer_id , singer.country , singer.song_name , singer.age , singer.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
select _ , _ , count ( _ ) from _ group by _ | select concert.concert_name , concert.theme , count ( singer_in_concert.singer_id ) from concert join singer_in_concert on concert.concert_id = singer_in_concert.concert_id group by concert.concert_name , concert.theme
SQL = SELECT concert_name ,  theme , count(singer_id) FROM concert JOIN singer_in_concert ON concert.concert_ID  =  singer_in_concert.concert_ID GROUP BY concert_name ,  theme
natsql:
select _ , _ , count ( _ ) from _ group by _ | select concert.concert_name , concert.theme , count ( singer_in_concert.singer_id ) from concert join singer_in_concert on concert.concert_id = singer_in_concert.concert_id group by concert.concert_name , concert.theme

SQL:
SELECT concert_name ,  theme , count(singer_id) FROM concert JOIN singer_in_concert ON concert.concert_ID  =  singer_in_concert.concert_ID GROUP BY concert_name ,  theme
self correction:
SELECT concert_name, theme, COUNT(singer_id) FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert_name, theme

index is 34
select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id
What are the names , themes , and number of singers for every concert ?
schema_links:
What are the names , themes , and number of singers for every concert ? | concert : concert.concert_name , concert.theme , concert.concert_id , concert.year , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | singer : singer.name , singer.singer_id , singer.country , singer.song_name , singer.age , singer.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
select _ , _ , count ( _ ) from _ group by _ | select concert.concert_name , concert.theme , count ( singer_in_concert.singer_id ) from concert join singer_in_concert on concert.concert_id = singer_in_concert.concert_id group by concert.concert_name , concert.theme
SQL = SELECT concert_name , theme , count(singer_id) FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert_name, theme
natsql:
select _ , _ , count ( _ ) from _ group by _ | select concert.concert_name , concert.theme , count ( singer_in_concert.singer_id ) from concert join singer_in_concert on concert.concert_id = singer_in_concert.concert_id group by concert.concert_name , concert.theme

SQL:
SELECT concert_name , theme , count(singer_id) FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert_name, theme
self correction:
SELECT concert.concert_Name, concert.Theme, COUNT(singer.Singer_ID) AS num_singers FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_Name, concert.Theme

index is 35
SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id
List singer names and number of concerts for each singer.
schema_links:
List singer names and number of concerts for each singer. | singer : singer.name , singer.singer_id , singer.song_name , singer.country , singer.age , singer.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.* | concert : concert.concert_name , concert.concert_id , concert.theme , concert.year , concert.stadium_id , concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select singer.name , count ( singer_in_concert.concert_id ) from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id group by singer.name
SQL = SELECT name ,  COUNT(concert_id) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.name
natsql:
select _ , count ( _ ) from _ group by _ | select singer.name , count ( singer_in_concert.concert_id ) from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id group by singer.name

SQL:
SELECT name ,  COUNT(concert_id) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.name
self correction:
SELECT T2.Name, COUNT(T1.concert_ID)  FROM singer_in_concert AS T1  JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Name

index is 36
SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id
What are the names of the singers and number of concerts for each person?
schema_links:
What are the names of the singers and number of concerts for each person? | singer : singer.name , singer.song_name , singer.singer_id , singer.is_male , singer.country , singer.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.* | concert : concert.concert_name , concert.theme , concert.concert_id , concert.year , concert.stadium_id , concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select singer.name , count ( singer_in_concert.* ) from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id group by singer.name
SQL = SELECT T1.name ,  COUNT(T2.*) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T1.name
natsql:
select _ , count ( _ ) from _ group by _ | select singer.name , count ( singer_in_concert.* ) from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id group by singer.name

SQL:
SELECT T1.name ,  COUNT(T2.*) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T1.name
self correction:
SELECT T1.Name, COUNT(T2.concert_ID) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name

index is 37
SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014
List all singer names in concerts in year 2014.
schema_links:
List all singer names in concerts in year 2014. | singer : singer.name , singer.song_name , singer.singer_id , singer.country , singer.age , singer.* | concert : concert.year , concert.concert_name , concert.theme , concert.concert_id , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.*
natsql:
select _ from _ where _
natsql and SQL generation:
select distinct _ from _ where _ | select distinct singer.name from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id join singer on singer_in_concert.singer_id = singer.singer_id where concert.year = 2014
SQL = SELECT DISTINCT T2.name FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id = T2.concert_id JOIN singer AS T3 ON T1.singer_id = T3.singer_id WHERE T2.year = 2014
natsql:
select distinct _ from _ where _ | select distinct singer.name from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id join singer on singer_in_concert.singer_id = singer.singer_id where concert.year = 2014

SQL:
SELECT DISTINCT T2.name FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id = T2.concert_id JOIN singer AS T3 ON T1.singer_id = T3.singer_id WHERE T2.year = 2014
self correction:
SELECT DISTINCT T3.Name  FROM singer_in_concert AS T1  JOIN concert AS T2 ON T1.concert_ID = T2.concert_ID  JOIN singer AS T3 ON T1.Singer_ID = T3.Singer_ID  WHERE T2.Year = 2014

index is 38
SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014
What are the names of the singers who performed in a concert in 2014?
schema_links:
What are the names of the singers who performed in a concert in 2014? | singer : singer.name , singer.song_name , singer.singer_id , singer.country , singer.song_release_year , singer.* | concert : concert.year , concert.concert_name , concert.theme , concert.concert_id , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.*
natsql:
select _ from _ where _
natsql and SQL generation:
select distinct _ from _ where _  | select distinct singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014
SQL = SELECT DISTINCT T1.name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID WHERE T3.Year = 2014
natsql:
select distinct _ from _ where _  | select distinct singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014

SQL:
SELECT DISTINCT T1.name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID WHERE T3.Year = 2014
self correction:
SELECT T1.Name FROM singer AS T1  JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID  JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID  WHERE T3.Year = 2014

index is 39
SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
what is the name and nation of the singer who have a song having 'Hey' in its name?
schema_links:
what is the name and nation of the singer who have a song having 'Hey' in its name? | singer : singer.song_name , singer.country , singer.name , singer.song_release_year , singer.age , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select _ from _ where _ like _
natsql and SQL generation:
select _ , _ from _ where @.@ like '%Hey%' | select singer.name , singer.country from singer where singer.song_name like '%Hey%'
SQL = SELECT name , country FROM singer WHERE song_name LIKE '%Hey%'
natsql:
select _ , _ from _ where @.@ like '%Hey%' | select singer.name , singer.country from singer where singer.song_name like '%Hey%'

SQL:
SELECT name , country FROM singer WHERE song_name LIKE '%Hey%'
self correction:
SELECT name, country FROM singer WHERE Song_Name LIKE '%Hey%'

index is 40
SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?
schema_links:
What is the name and country of origin of every singer who has a song with the word 'Hey' in its title? | singer : singer.song_name , singer.country , singer.name , singer.song_release_year , singer.is_male , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.concert_name , concert.theme , concert.year , concert.concert_id , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select _ from _ where _ like _
natsql and SQL generation:
select _ , _ from _ where @.@ like '%_%' | select singer.name , singer.country from singer where singer.song_name like '%Hey%'
SQL = SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
natsql:
select _ , _ from _ where @.@ like '%_%' | select singer.name , singer.country from singer where singer.song_name like '%Hey%'

SQL:
SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
self correction:
SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%'

index is 41
SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015
Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.
schema_links:
Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015. | concert : concert.year , concert.stadium_id , concert.concert_name , concert.theme , concert.concert_id , concert.* | stadium : stadium.name , stadium.location , stadium.stadium_id , stadium.capacity , stadium.average , stadium.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select _ from _ where _
natsql and SQL generation:
select distinct _ , _ from _ where _ in ( _ ) group by _ | select distinct stadium.name , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014 and concert.stadium_id in ( select stadium_id from concert where year = 2015 ) group by stadium.name , stadium.location
SQL = SELECT DISTINCT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014 AND T1.stadium_id IN (SELECT stadium_id FROM concert WHERE year  =  2015) GROUP BY T2.name ,  T2.location
natsql:
select distinct _ , _ from _ where _ in ( _ ) group by _ | select distinct stadium.name , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014 and concert.stadium_id in ( select stadium_id from concert where year = 2015 ) group by stadium.name , stadium.location

SQL:
SELECT DISTINCT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014 AND T1.stadium_id IN (SELECT stadium_id FROM concert WHERE year  =  2015) GROUP BY T2.name ,  T2.location
self correction:
SELECT T2.Name, T2.Location FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T1.Year = 2014 AND T1.Stadium_ID IN (     SELECT Stadium_ID     FROM concert     WHERE Year = 2015 ) GROUP BY T2.Name, T2.Location

index is 42
SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015
What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?
schema_links:
What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015? | stadium : stadium.name , stadium.location , stadium.stadium_id , stadium.capacity , stadium.highest , stadium.* | concert : concert.year , concert.stadium_id , concert.concert_id , concert.concert_name , concert.theme , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select _ from _ where _
natsql and SQL generation:
select _ , _ from _ where _ in ( _ , _ ) group by _ having count ( distinct _ ) > _ | select stadium.name , stadium.location from stadium where stadium.stadium_id in ( select concert.stadium_id from concert where concert.year in ( 2014 , 2015 ) ) group by stadium.name , stadium.location having count ( distinct concert.year ) > 1
SQL = SELECT name ,  location FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE year IN (2014, 2015)) GROUP BY name, location HAVING count(DISTINCT year)  >  1
natsql:
select _ , _ from _ where _ in ( _ , _ ) group by _ having count ( distinct _ ) > _ | select stadium.name , stadium.location from stadium where stadium.stadium_id in ( select concert.stadium_id from concert where concert.year in ( 2014 , 2015 ) ) group by stadium.name , stadium.location having count ( distinct concert.year ) > 1

SQL:
SELECT name ,  location FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE year IN (2014, 2015)) GROUP BY name, location HAVING count(DISTINCT year)  >  1
self correction:
SELECT name, location  FROM stadium  WHERE stadium_id IN (     SELECT stadium_id      FROM concert      WHERE year IN (2014, 2015) )  GROUP BY stadium_id  HAVING COUNT(DISTINCT year) > 1

index is 43
select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)
Find the number of concerts happened in the stadium with the highest capacity .
schema_links:
Find the number of concerts happened in the stadium with the highest capacity . | stadium : stadium.capacity , stadium.highest , stadium.stadium_id , stadium.name , stadium.lowest , stadium.* | concert : concert.stadium_id , concert.concert_id , concert.concert_name , concert.year , concert.theme , concert.* | singer : singer.name , singer.country , singer.song_name , singer.age , singer.singer_id , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select count ( _ ) from _ order by _ desc limit _
natsql and SQL generation:
select count ( _ ) from _ where @.@ = max ( _ ) | select count ( concert.concert_id ) from concert where concert.stadium_id = ( select stadium.stadium_id from stadium order by stadium.capacity desc limit 1 )
SQL = SELECT count(*) FROM concert WHERE stadium_id  =  (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)
natsql:
select count ( _ ) from _ where @.@ = max ( _ ) | select count ( concert.concert_id ) from concert where concert.stadium_id = ( select stadium.stadium_id from stadium order by stadium.capacity desc limit 1 )

SQL:
SELECT count(*) FROM concert WHERE stadium_id  =  (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)
self correction:
SELECT count(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)

index is 44
select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)
What are the number of concerts that occurred in the stadium with the largest capacity ?
schema_links:
What are the number of concerts that occurred in the stadium with the largest capacity ? | stadium : stadium.capacity , stadium.highest , stadium.stadium_id , stadium.name , stadium.lowest , stadium.* | concert : concert.stadium_id , concert.concert_id , concert.concert_name , concert.year , concert.theme , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql:
select count ( _ ) from _ order by _ desc limit _
natsql and SQL generation:
select count ( distinct _ ) from _ where @.@ = max ( _ ) | select count ( distinct concert.concert_id ) from concert where @.@ = max ( stadium.capacity )
SQL = SELECT count(DISTINCT concert_ID) FROM concert WHERE Stadium_ID  =  (SELECT stadium_ID FROM stadium WHERE Capacity  =  (SELECT max(Capacity) FROM stadium))
natsql:
select count ( distinct _ ) from _ where @.@ = max ( _ ) | select count ( distinct concert.concert_id ) from concert where @.@ = max ( stadium.capacity )

SQL:
SELECT count(DISTINCT concert_ID) FROM concert WHERE Stadium_ID  =  (SELECT stadium_ID FROM stadium WHERE Capacity  =  (SELECT max(Capacity) FROM stadium))
self correction:
SELECT COUNT(DISTINCT concert_ID) AS Number_of_Concerts FROM concert WHERE Stadium_ID = (   SELECT Stadium_ID   FROM stadium   WHERE Capacity = (     SELECT MAX(Capacity)     FROM stadium   ) )

index is 45
SELECT count(*) FROM pets WHERE weight  >  10
Find the number of pets whose weight is heavier than 10.
schema_links:
Find the number of pets whose weight is heavier than 10. | pets : pets.weight , pets.petid , pets.pettype , pets.pet_age , pets.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM pets WHERE weight > 10
natsql:
SELECT count(*) FROM pets WHERE weight > 10
SQL:
SELECT COUNT(*) FROM Pets WHERE weight > 10
self correction:
SELECT COUNT(DISTINCT PetID) FROM Pets WHERE weight > 10

index is 46
SELECT count(*) FROM pets WHERE weight  >  10
How many pets have a greater weight than 10?
schema_links:
How many pets have a greater weight than 10? | pets : pets.weight , pets.petid , pets.pettype , pets.pet_age , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM Pets WHERE weight > 10
natsql:
SELECT count(*) FROM Pets WHERE weight > 10
SQL:
SELECT count(*) FROM Pets WHERE weight > 10
self correction:
SELECT count(DISTINCT PetID) FROM Pets WHERE weight > 10

index is 47
SELECT weight FROM pets ORDER BY pet_age LIMIT 1
Find the weight of the youngest dog.
schema_links:
Find the weight of the youngest dog. | pets : pets.pet_age , pets.weight , pets.pettype ( dog ) , pets.petid , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql:
select _ from _ order by _ asc limit _
natsql and SQL generation:
SELECT weight FROM Pets WHERE pet_type = 'dog' ORDER BY pet_age ASC LIMIT 1
natsql:
SELECT weight FROM Pets WHERE pet_type = 'dog' ORDER BY pet_age ASC LIMIT 1
SQL:
SELECT weight FROM Pets WHERE pet_type = 'dog' ORDER BY pet_age ASC LIMIT 1
self correction:
SELECT Pets.weight  FROM Pets  JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID  JOIN Student ON Has_Pet.StuID = Student.StuID  WHERE Pets.pet_type = 'dog'  ORDER BY Pets.pet_age ASC  LIMIT 1

index is 48
SELECT weight FROM pets ORDER BY pet_age LIMIT 1
How much does the youngest dog weigh?
schema_links:
How much does the youngest dog weigh? | pets : pets.weight , pets.pet_age , pets.pettype ( dog ) , pets.petid , pets.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.*
natsql:
select _ from _ order by _ asc limit _
natsql and SQL generation:
SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1
natsql:
SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1
SQL:
SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1
self correction:
SELECT Pets.weight FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType = 'dog' ORDER BY Pets.pet_age ASC LIMIT 1

index is 49
SELECT max(weight) ,  petType FROM pets GROUP BY petType
Find the maximum weight for each type of pet. List the maximum weight and pet type.
schema_links:
Find the maximum weight for each type of pet. List the maximum weight and pet type. | pets : pets.pettype , pets.weight , pets.petid , pets.pet_age , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql:
select max ( _ ) , _ from _ group by _
natsql and SQL generation:
SELECT MAX(weight), pettype FROM pets GROUP BY pettype
natsql:
SELECT MAX(weight), pettype FROM pets GROUP BY pettype
SQL:
SELECT MAX(weight), pettype FROM pets GROUP BY pettype
self correction:
SELECT MAX(weight) AS max_weight, pettype FROM Pets GROUP BY pettype

index is 50
SELECT max(weight) ,  petType FROM pets GROUP BY petType
List the maximum weight and type for each type of pet.
schema_links:
List the maximum weight and type for each type of pet. | pets : pets.pettype , pets.weight , pets.petid , pets.pet_age , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql:
select max ( _ ) , _ from _ group by _
natsql and SQL generation:
SELECT MAX(weight), pettype FROM pets GROUP BY pettype
natsql:
SELECT MAX(weight), pettype FROM pets GROUP BY pettype
SQL:
SELECT MAX(weight), pettype FROM pets GROUP BY pettype
self correction:
SELECT MAX(weight) AS max_weight, pettype FROM Pets GROUP BY pettype

index is 51
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
Find number of pets owned by students who are older than 20.
schema_links:
Find number of pets owned by students who are older than 20. | student : student.age , student.stuid , student.advisor , student.lname , student.fname , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.pet_age , pets.petid , pets.pettype , pets.weight , pets.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT COUNT(*) FROM Has_Pet 
JOIN Student ON Has_Pet.StuID = Student.StuID 
WHERE Student.Age > 20
natsql:
SELECT COUNT(*) FROM Has_Pet 
JOIN Student ON Has_Pet.StuID = Student.StuID 
WHERE Student.Age > 20
SQL:
SELECT COUNT(*) FROM Has_Pet 
JOIN Student ON Has_Pet.StuID = Student.StuID 
WHERE Student.Age > 20
self correction:
SELECT COUNT(Has_Pet.PetID) FROM Has_Pet  JOIN Student ON Has_Pet.StuID = Student.StuID  WHERE Student.Age > 20

index is 52
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
How many pets are owned by students that have an age greater than 20?
schema_links:
How many pets are owned by students that have an age greater than 20? | student : student.age , student.stuid , student.fname , student.sex , student.major , student.* | pets : pets.pet_age , pets.petid , pets.pettype , pets.weight , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM Has_Pet
WHERE StuID IN (SELECT StuID FROM Student WHERE Age > 20)
natsql:
SELECT count(*) FROM Has_Pet
WHERE StuID IN (SELECT StuID FROM Student WHERE Age > 20)
SQL:
SELECT count(*) FROM Has_Pet
WHERE StuID IN (SELECT StuID FROM Student WHERE Age > 20)
self correction:
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20

index is 53
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'
Find the number of dog pets that are raised by female students (with sex F).
schema_links:
Find the number of dog pets that are raised by female students (with sex F). | student : student.sex , student.stuid , student.fname , student.age , student.major , student.* | pets : pets.pettype ( dog ) , pets.petid , pets.pet_age , pets.weight , pets.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT COUNT(*) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Sex = 'F' AND T3.PetType = 'dog'
natsql:
SELECT COUNT(*) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Sex = 'F' AND T3.PetType = 'dog'
SQL:
SELECT COUNT(*) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Sex = 'F' AND T3.PetType = 'dog'
self correction:
SELECT COUNT(DISTINCT T3.PetID)  FROM Student AS T1  JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID  JOIN Pets AS T3 ON T2.PetID = T3.PetID  WHERE T1.Sex = 'F'  AND T3.PetType = 'dog'

index is 54
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'
How many dog pets are raised by female students?
schema_links:
How many dog pets are raised by female students? | pets : pets.pettype ( dog ) , pets.petid , pets.pet_age , pets.weight , pets.* | student : student.sex , student.stuid , student.age , student.major , student.advisor , student.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON has_pet.stuid = student.stuid WHERE pets.pettype = 'dog' AND student.sex = 'female'
natsql:
SELECT count(*) FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON has_pet.stuid = student.stuid WHERE pets.pettype = 'dog' AND student.sex = 'female'
SQL:
SELECT count(*) FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON has_pet.stuid = student.stuid WHERE pets.pettype = 'dog' AND student.sex = 'female'
self correction:
SELECT count(DISTINCT pets.petid) FROM pets  JOIN has_pet ON pets.petid = has_pet.petid  JOIN student ON has_pet.stuid = student.stuid  WHERE pets.pettype = 'dog'  AND student.sex = 'female'

index is 55
SELECT count(DISTINCT pettype) FROM pets
Find the number of distinct type of pets.
schema_links:
Find the number of distinct type of pets. | pets : pets.pettype , pets.weight , pets.petid , pets.pet_age , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql:
select count ( distinct _ ) from _
natsql and SQL generation:
SELECT COUNT(DISTINCT pettype) FROM pets
natsql:
SELECT COUNT(DISTINCT pettype) FROM pets
SQL:
SELECT COUNT(DISTINCT pettype) FROM pets
self correction:
SELECT COUNT(DISTINCT PetType) FROM Pets

index is 56
SELECT count(DISTINCT pettype) FROM pets
How many different types of pet are there?
schema_links:
How many different types of pet are there? | pets : pets.pettype , pets.weight , pets.petid , pets.pet_age , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql:
select count ( distinct _ ) from _
natsql and SQL generation:
SELECT COUNT(DISTINCT pettype) FROM pets
natsql:
SELECT COUNT(DISTINCT pettype) FROM pets
SQL:
SELECT COUNT(DISTINCT pettype) FROM pets
self correction:
SELECT COUNT(DISTINCT PetType) FROM Pets

index is 57
SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'
Find the first name of students who have cat or dog pet.
schema_links:
Find the first name of students who have cat or dog pet. | student : student.fname , student.stuid , student.lname , student.age , student.sex , student.* | pets : pets.pettype ( cat , dog ) , pets.petid , pets.weight , pets.pet_age , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql:
select distinct _ from _ where _
natsql and SQL generation:
SELECT DISTINCT fname FROM student WHERE EXISTS (SELECT 1 FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE student.stuid = has_pet.stuid AND (pets.pettype = 'cat' OR pets.pettype = 'dog'))
natsql:
SELECT DISTINCT fname FROM student WHERE EXISTS (SELECT 1 FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE student.stuid = has_pet.stuid AND (pets.pettype = 'cat' OR pets.pettype = 'dog'))
SQL:
SELECT DISTINCT fname FROM student WHERE EXISTS (SELECT 1 FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE student.stuid = has_pet.stuid AND (pets.pettype = 'cat' OR pets.pettype = 'dog'))
self correction:
SELECT DISTINCT Student.FName  FROM Student  WHERE EXISTS (     SELECT 1      FROM Has_Pet      JOIN Pets ON Has_Pet.PetID = Pets.PetID      WHERE Student.StuID = Has_Pet.StuID      AND (Pets.PetType = 'cat' OR Pets.PetType = 'dog') )

index is 58
SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'
What are the first names of every student who has a cat or dog as a pet?
schema_links:
What are the first names of every student who has a cat or dog as a pet? | student : student.fname , student.stuid , student.lname , student.sex , student.advisor , student.* | pets : pets.pettype ( cat , dog ) , pets.petid , pets.weight , pets.pet_age , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql:
select distinct _ from _ where _
natsql and SQL generation:
SELECT DISTINCT fname FROM student JOIN has_pet ON student.StuID = has_pet.StuID JOIN pets ON has_pet.PetID = pets.PetID WHERE pets.PetType IN ('cat', 'dog')
natsql:
SELECT DISTINCT fname FROM student JOIN has_pet ON student.StuID = has_pet.StuID JOIN pets ON has_pet.PetID = pets.PetID WHERE pets.PetType IN ('cat', 'dog')
SQL:
SELECT DISTINCT fname FROM student JOIN has_pet ON student.StuID = has_pet.StuID JOIN pets ON has_pet.PetID = pets.PetID WHERE pets.PetType IN ('cat', 'dog')
self correction:
SELECT fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog')

index is 59
select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'
Find the first name of students who have both cat and dog pets .
schema_links:
Find the first name of students who have both cat and dog pets . | student : student.fname , student.stuid , student.lname , student.age , student.sex , student.* | pets : pets.pettype ( cat , dog ) , pets.petid , pets.weight , pets.pet_age , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT fname FROM student WHERE stuid IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType IN ('cat', 'dog') GROUP BY PetID HAVING COUNT(*) = 2))
natsql:
SELECT fname FROM student WHERE stuid IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType IN ('cat', 'dog') GROUP BY PetID HAVING COUNT(*) = 2))
SQL:
SELECT fname FROM student WHERE stuid IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType IN ('cat', 'dog') GROUP BY PetID HAVING COUNT(*) = 2))
self correction:
SELECT fname FROM Student WHERE StuID IN (     SELECT StuID FROM Has_Pet     WHERE PetID IN (         SELECT PetID FROM Pets         WHERE PetType IN ('cat', 'dog')         GROUP BY PetID         HAVING COUNT(*) = 2     ) )

index is 60
SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'
What are the students' first names who have both cats and dogs as pets?
schema_links:
What are the students' first names who have both cats and dogs as pets? | student : student.fname , student.lname , student.stuid , student.advisor , student.age , student.* | pets : pets.pettype ( cat , dog ) , pets.petid , pets.weight , pets.pet_age , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT fname FROM student WHERE StuID IN (
    SELECT StuID FROM Has_Pet WHERE PetID IN (
        SELECT PetID FROM Pets WHERE PetType = 'cat'
    )
) AND StuID IN (
    SELECT StuID FROM Has_Pet WHERE PetID IN (
        SELECT PetID FROM Pets WHERE PetType = 'dog'
    )
)
natsql:
SELECT fname FROM student WHERE StuID IN (
    SELECT StuID FROM Has_Pet WHERE PetID IN (
        SELECT PetID FROM Pets WHERE PetType = 'cat'
    )
) AND StuID IN (
    SELECT StuID FROM Has_Pet WHERE PetID IN (
        SELECT PetID FROM Pets WHERE PetType = 'dog'
    )
)
SQL:
SELECT fname FROM student WHERE StuID IN (
    SELECT StuID FROM Has_Pet WHERE PetID IN (
        SELECT PetID FROM Pets WHERE PetType = 'cat'
    )
) AND StuID IN (
    SELECT StuID FROM Has_Pet WHERE PetID IN (
        SELECT PetID FROM Pets WHERE PetType = 'dog'
    )
)
self correction:
SELECT fname FROM Student WHERE StuID IN (     SELECT StuID FROM Has_Pet WHERE PetID IN (         SELECT PetID FROM Pets WHERE PetType = 'cat'     ) ) AND StuID IN (     SELECT StuID FROM Has_Pet WHERE PetID IN (         SELECT PetID FROM Pets WHERE PetType = 'dog'     ) )

index is 61
SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
Find the major and age of students who do not have a cat pet.
schema_links:
Find the major and age of students who do not have a cat pet. | student : student.age , student.major , student.stuid , student.fname , student.sex , student.* | pets : pets.pettype ( cat ) , pets.pet_age , pets.petid , pets.weight , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql:
select _ from _ where @.@ not in _ and _
natsql and SQL generation:
SELECT major, age FROM student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))
natsql:
SELECT major, age FROM student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))
SQL:
SELECT major, age FROM student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))
self correction:
SELECT major, age  FROM Student  WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))

index is 62
SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
What major is every student who does not own a cat as a pet, and also how old are they?
schema_links:
What major is every student who does not own a cat as a pet, and also how old are they? | student : student.major , student.age , student.stuid , student.sex , student.advisor , student.* | pets : pets.pettype ( cat ) , pets.petid , pets.weight , pets.pet_age , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql:
select _ from _ where @.@ not in _ and _
natsql and SQL generation:
SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat')
natsql:
SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat')
SQL:
SELECT major, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat')
self correction:
SELECT major, age FROM Student WHERE StuID NOT IN (     SELECT StuID     FROM Has_Pet     JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE PetType = 'cat' )

index is 63
SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'
Find the id of students who do not have a cat pet.
schema_links:
Find the id of students who do not have a cat pet. | student : student.stuid , student.age , student.sex , student.major , student.advisor , student.* | pets : pets.pettype ( cat ) , pets.petid , pets.weight , pets.pet_age , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql:
select _ from _ where except_ @.@ is _ and _
natsql and SQL generation:
SELECT student.stuID FROM student WHERE student.stuID NOT IN (SELECT has_pet.stuID FROM has_pet JOIN pets ON has_pet.petID = pets.petID WHERE pets.petType = 'cat')
natsql:
SELECT student.stuID FROM student WHERE student.stuID NOT IN (SELECT has_pet.stuID FROM has_pet JOIN pets ON has_pet.petID = pets.petID WHERE pets.petType = 'cat')
SQL:
SELECT student.stuID FROM student WHERE student.stuID NOT IN (SELECT has_pet.stuID FROM has_pet JOIN pets ON has_pet.petID = pets.petID WHERE pets.petType = 'cat')
self correction:
SELECT student.StuID  FROM Student  WHERE student.StuID NOT IN (     SELECT Has_Pet.StuID      FROM Has_Pet      JOIN Pets ON Has_Pet.PetID = Pets.PetID      WHERE Pets.PetType = 'cat' )

index is 64
SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'
What are the ids of the students who do not own cats as pets?
schema_links:
What are the ids of the students who do not own cats as pets? | student : student.stuid , student.age , student.sex , student.major , student.advisor , student.* | pets : pets.pettype ( cat ) , pets.petid , pets.weight , pets.pet_age , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql:
select _ from _ where except_ @.@ is _ and _
natsql and SQL generation:
SELECT stuid FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat'))
natsql:
SELECT stuid FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat'))
SQL:
SELECT stuid FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat'))
self correction:
SELECT stuid FROM student WHERE stuid NOT IN (   SELECT stuid   FROM has_pet   WHERE petid IN (     SELECT petid     FROM pets     WHERE pettype = 'cat'   ) )

index is 65
SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
Find the first name and age of students who have a dog but do not have a cat as a pet.
schema_links:
Find the first name and age of students who have a dog but do not have a cat as a pet. | student : student.fname , student.age , student.stuid , student.lname , student.sex , student.* | pets : pets.pettype ( cat , dog ) , pets.petid , pets.pet_age , pets.weight , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql:
select _ from _ where _ and @.@ not in _ and _
natsql and SQL generation:
SELECT fname, age FROM student WHERE stuid IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog')) AND stuid NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))
natsql:
SELECT fname, age FROM student WHERE stuid IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog')) AND stuid NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))
SQL:
SELECT fname, age FROM student WHERE stuid IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog')) AND stuid NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))
self correction:
SELECT fname, age FROM Student WHERE StuID IN (   SELECT StuID   FROM Has_Pet   WHERE PetID IN (     SELECT PetID     FROM Pets     WHERE PetType = 'dog'   ) ) AND StuID NOT IN (   SELECT StuID   FROM Has_Pet   WHERE PetID IN (     SELECT PetID     FROM Pets     WHERE PetType = 'cat'   ) )

index is 66
SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
What is the first name of every student who has a dog but does not have a cat?
schema_links:
What is the first name of every student who has a dog but does not have a cat? | student : student.fname , student.stuid , student.lname , student.advisor , student.sex , student.* | pets : pets.pettype ( cat , dog ) , pets.petid , pets.weight , pets.pet_age , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql:
select _ from _ where _ and @.@ not in _ and _
natsql and SQL generation:
SELECT fname FROM student WHERE EXISTS (SELECT * FROM has_pet WHERE has_pet.StuID = student.StuID AND has_pet.PetID IN (SELECT PetID FROM pets WHERE PetType = 'dog')) AND NOT EXISTS (SELECT * FROM has_pet WHERE has_pet.StuID = student.StuID AND has_pet.PetID IN (SELECT PetID FROM pets WHERE PetType = 'cat'))
natsql:
SELECT fname FROM student WHERE EXISTS (SELECT * FROM has_pet WHERE has_pet.StuID = student.StuID AND has_pet.PetID IN (SELECT PetID FROM pets WHERE PetType = 'dog')) AND NOT EXISTS (SELECT * FROM has_pet WHERE has_pet.StuID = student.StuID AND has_pet.PetID IN (SELECT PetID FROM pets WHERE PetType = 'cat'))
SQL:
SELECT fname FROM student WHERE EXISTS (SELECT * FROM has_pet WHERE has_pet.StuID = student.StuID AND has_pet.PetID IN (SELECT PetID FROM pets WHERE PetType = 'dog')) AND NOT EXISTS (SELECT * FROM has_pet WHERE has_pet.StuID = student.StuID AND has_pet.PetID IN (SELECT PetID FROM pets WHERE PetType = 'cat'))
self correction:
SELECT fname FROM Student WHERE StuID IN (     SELECT StuID FROM Has_Pet     JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE PetType = 'dog' ) AND StuID NOT IN (     SELECT StuID FROM Has_Pet     JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE PetType = 'cat' )

index is 67
SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1
Find the type and weight of the youngest pet.
schema_links:
Find the type and weight of the youngest pet. | pets : pets.pettype , pets.pet_age , pets.weight , pets.petid , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql:
select _ from _ order by _ asc limit _
natsql and SQL generation:
SELECT pettype, weight FROM Pets ORDER BY pet_age ASC LIMIT 1
natsql:
SELECT pettype, weight FROM Pets ORDER BY pet_age ASC LIMIT 1
SQL:
SELECT pettype, weight FROM Pets ORDER BY pet_age ASC LIMIT 1
self correction:
SELECT Pets.PetType, Pets.weight  FROM Pets  ORDER BY Pets.pet_age ASC  LIMIT 1

index is 68
SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1
What type of pet is the youngest animal, and how much does it weigh?
schema_links:
What type of pet is the youngest animal, and how much does it weigh? | pets : pets.pettype , pets.pet_age , pets.weight , pets.petid , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql:
select _ from _ order by _ asc limit _
natsql and SQL generation:
SELECT pettype, weight FROM pets ORDER BY pet_age ASC LIMIT 1
natsql:
SELECT pettype, weight FROM pets ORDER BY pet_age ASC LIMIT 1
SQL:
SELECT pettype, weight FROM pets ORDER BY pet_age ASC LIMIT 1
self correction:
SELECT Pets.PetType, Pets.weight  FROM Pets ORDER BY Pets.pet_age ASC  LIMIT 1

index is 69
SELECT petid ,  weight FROM pets WHERE pet_age  >  1
Find the id and weight of all pets whose age is older than 1.
schema_links:
Find the id and weight of all pets whose age is older than 1. | pets : pets.petid , pets.pet_age , pets.weight , pets.pettype , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT petid, weight FROM pets WHERE pet_age > 1
natsql:
SELECT petid, weight FROM pets WHERE pet_age > 1
SQL:
SELECT petid, weight FROM pets WHERE pet_age > 1
self correction:
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1

index is 70
SELECT petid ,  weight FROM pets WHERE pet_age  >  1
What is the id and weight of every pet who is older than 1?
schema_links:
What is the id and weight of every pet who is older than 1? | pets : pets.petid , pets.pet_age , pets.weight , pets.pettype , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT petid, weight FROM Pets WHERE pet_age > 1
natsql:
SELECT petid, weight FROM Pets WHERE pet_age > 1
SQL:
SELECT petid, weight FROM Pets WHERE pet_age > 1
self correction:
SELECT Pets.PetID, Pets.weight  FROM Pets  WHERE Pets.pet_age > 1

index is 71
SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype
Find the average and maximum age for each type of pet.
schema_links:
Find the average and maximum age for each type of pet. | pets : pets.pet_age , pets.pettype , pets.weight , pets.petid , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql:
select avg ( _ ) , max ( _ ) , _ from _ group by _
natsql and SQL generation:
SELECT AVG(age), MAX(age), pettype FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID GROUP BY pettype
natsql:
SELECT AVG(age), MAX(age), pettype FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID GROUP BY pettype
SQL:
SELECT AVG(age), MAX(age), pettype FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID GROUP BY pettype
self correction:
SELECT AVG(pet_age) AS average_age, MAX(pet_age) AS maximum_age, PetType FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID GROUP BY PetType

index is 72
SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype
What is the average and maximum age for each pet type?
schema_links:
What is the average and maximum age for each pet type? | pets : pets.pet_age , pets.pettype , pets.weight , pets.petid , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql:
select avg ( _ ) , max ( _ ) , _ from _ group by _
natsql and SQL generation:
SELECT AVG(pet_age), MAX(pet_age), pet_type FROM pets GROUP BY pet_type
natsql:
SELECT AVG(pet_age), MAX(pet_age), pet_type FROM pets GROUP BY pet_type
SQL:
SELECT AVG(pet_age), MAX(pet_age), pet_type FROM pets GROUP BY pet_type
self correction:
SELECT AVG(pet_age) AS average_age, MAX(pet_age) AS maximum_age, pet_type  FROM Pets  GROUP BY pet_type

index is 73
SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype
Find the average weight for each pet type.
schema_links:
Find the average weight for each pet type. | pets : pets.pettype , pets.weight , pets.petid , pets.pet_age , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql:
select avg ( _ ) , _ from _ group by _
natsql and SQL generation:
SELECT AVG(weight), petType FROM Pets GROUP BY petType
natsql:
SELECT AVG(weight), petType FROM Pets GROUP BY petType
SQL:
SELECT AVG(weight), petType FROM Pets GROUP BY petType
self correction:
SELECT AVG(weight) AS average_weight, petType FROM Pets GROUP BY petType

index is 74
SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype
What is the average weight for each type of pet?
schema_links:
What is the average weight for each type of pet? | pets : pets.pettype , pets.weight , pets.pet_age , pets.petid , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql:
select avg ( _ ) , _ from _ group by _
natsql and SQL generation:
SELECT AVG(weight), pettype FROM Pets GROUP BY pettype
natsql:
SELECT AVG(weight), pettype FROM Pets GROUP BY pettype
SQL:
SELECT AVG(weight), pettype FROM Pets GROUP BY pettype
self correction:
SELECT AVG(weight) AS average_weight, PetType FROM Pets GROUP BY PetType

index is 75
SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid
Find the first name and age of students who have a pet.
schema_links:
Find the first name and age of students who have a pet. | student : student.fname , student.age , student.stuid , student.lname , student.sex , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.pet_age , pets.weight , pets.petid , pets.pettype , pets.*
natsql:
select distinct _ from _ where @.@ join _
natsql and SQL generation:
SELECT DISTINCT student.fname, student.age 
FROM student 
WHERE student.stuid IN (SELECT has_pet.stuid FROM has_pet)
natsql:
SELECT DISTINCT student.fname, student.age 
FROM student 
WHERE student.stuid IN (SELECT has_pet.stuid FROM has_pet)
SQL:
SELECT DISTINCT student.fname, student.age 
FROM student 
WHERE student.stuid IN (SELECT has_pet.stuid FROM has_pet)
self correction:
SELECT student.FName, student.Age  FROM Student  WHERE Student.StuID IN (SELECT Has_Pet.StuID FROM Has_Pet)

index is 76
SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid
What are the different first names and ages of the students who do have pets?
schema_links:
What are the different first names and ages of the students who do have pets? | student : student.age , student.fname , student.stuid , student.lname , student.sex , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.pet_age , pets.weight , pets.petid , pets.pettype , pets.*
natsql:
select distinct _ from _ where @.@ join _
natsql and SQL generation:
SELECT DISTINCT fname, age FROM student JOIN has_pet ON student.stuid = has_pet.stuid
natsql:
SELECT DISTINCT fname, age FROM student JOIN has_pet ON student.stuid = has_pet.stuid
SQL:
SELECT DISTINCT fname, age FROM student JOIN has_pet ON student.stuid = has_pet.stuid
self correction:
SELECT DISTINCT Fname, Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID

index is 77
SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'
Find the id of the pet owned by student whose last name is ‘Smith’.
schema_links:
Find the id of the pet owned by student whose last name is 'Smith'. | student : student.lname ( Smith ) , student.stuid , student.fname , student.age , student.sex , student.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.* | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight , pets.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT petid FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE LName = 'Smith')
natsql:
SELECT petid FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE LName = 'Smith')
SQL:
SELECT petid FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE LName = 'Smith')
self correction:
SELECT PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.LName = 'Smith'

index is 78
SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'
What is the id of the pet owned by the student whose last name is 'Smith'?
schema_links:
What is the id of the pet owned by the student whose last name is 'Smith'? | student : student.lname ( Smith ) , student.stuid , student.advisor , student.fname , student.age , student.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.* | pets : pets.petid , pets.pettype , pets.weight , pets.pet_age , pets.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT petid FROM has_pet WHERE stuid = (SELECT stuid FROM student WHERE lname = 'Smith')
natsql:
SELECT petid FROM has_pet WHERE stuid = (SELECT stuid FROM student WHERE lname = 'Smith')
SQL:
SELECT petid FROM has_pet WHERE stuid = (SELECT stuid FROM student WHERE lname = 'Smith')
self correction:
SELECT Pets.PetID FROM Has_Pet  JOIN Student ON Has_Pet.StuID = Student.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Student.LName = 'Smith'

index is 79
SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid
Find the number of pets for each student who has any pet and student id.
schema_links:
Find the number of pets for each student who has any pet and student id. | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | student : student.stuid , student.age , student.sex , student.major , student.advisor , student.* | pets : pets.petid , pets.weight , pets.pettype , pets.pet_age , pets.*
natsql:
select count ( _ ) , _ from _ group by _
natsql and SQL generation:
SELECT COUNT(petid), StuID FROM Has_Pet GROUP BY StuID
natsql:
SELECT COUNT(petid), StuID FROM Has_Pet GROUP BY StuID
SQL:
SELECT COUNT(petid), StuID FROM Has_Pet GROUP BY StuID
self correction:
SELECT COUNT(PetID) AS num_pets, StuID FROM Has_Pet GROUP BY StuID

index is 80
select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid
For students who have pets , how many pets does each student have ? list their ids instead of names .
schema_links:
For students who have pets , how many pets does each student have ? list their ids instead of names . | student : student.stuid , student.fname , student.lname , student.advisor , student.age , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight , pets.*
natsql:
select count ( _ ) , _ from _ group by _
natsql and SQL generation:
SELECT count(has_pet.petid), student.stuid FROM student JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.stuid
natsql:
SELECT count(has_pet.petid), student.stuid FROM student JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.stuid
SQL:
SELECT count(has_pet.petid), student.stuid FROM student JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.stuid
self correction:
SELECT COUNT(has_pet.petid) AS pet_count, has_pet.stuid FROM has_pet JOIN student ON student.stuid = has_pet.stuid GROUP BY has_pet.stuid

index is 81
SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1
Find the first name and gender of student who have more than one pet.
schema_links:
Find the first name and gender of student who have more than one pet. | student : student.fname , student.sex , student.stuid , student.age , student.lname , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.petid , pets.weight , pets.pettype , pets.pet_age , pets.*
natsql:
select _ from _ where count ( _ ) > _ group by _
natsql and SQL generation:
SELECT fname, sex FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING count(*) > 1)
natsql:
SELECT fname, sex FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING count(*) > 1)
SQL:
SELECT fname, sex FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING count(*) > 1)
self correction:
SELECT fname, sex  FROM student  WHERE StuID IN (   SELECT StuID    FROM Has_Pet    GROUP BY StuID    HAVING COUNT(*) > 1 )

index is 82
SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1
What is the first name and gender of the all the students who have more than one pet?
schema_links:
What is the first name and gender of the all the students who have more than one pet? | student : student.fname , student.sex , student.stuid , student.lname , student.age , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.petid , pets.pettype , pets.weight , pets.pet_age , pets.*
natsql:
select _ from _ where count ( _ ) > _ group by _
natsql and SQL generation:
SELECT fname, sex FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING count(*) > 1)
natsql:
SELECT fname, sex FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING count(*) > 1)
SQL:
SELECT fname, sex FROM student WHERE stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING count(*) > 1)
self correction:
SELECT fname, sex  FROM Student  WHERE StuID IN (   SELECT StuID    FROM Has_Pet    GROUP BY StuID    HAVING COUNT(*) > 1 )

index is 83
SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'
Find the last name of the student who has a cat that is age 3.
schema_links:
Find the last name of the student who has a cat that is age 3. | student : student.lname , student.stuid , student.fname , student.age , student.advisor , student.* | pets : pets.pet_age , pets.pettype ( cat ) , pets.petid , pets.weight , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT lname FROM student WHERE stuid IN (SELECT StuID FROM has_pet WHERE PetID IN (SELECT PetID FROM pets WHERE pettype = 'cat' AND pet_age = 3))
natsql:
SELECT lname FROM student WHERE stuid IN (SELECT StuID FROM has_pet WHERE PetID IN (SELECT PetID FROM pets WHERE pettype = 'cat' AND pet_age = 3))
SQL:
SELECT lname FROM student WHERE stuid IN (SELECT StuID FROM has_pet WHERE PetID IN (SELECT PetID FROM pets WHERE pettype = 'cat' AND pet_age = 3))
self correction:
SELECT student.lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND pets.pet_age = 3 ORDER BY student.stuid DESC LIMIT 1

index is 84
SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'
What is the last name of the student who has a cat that is 3 years old?
schema_links:
What is the last name of the student who has a cat that is 3 years old? | student : student.lname , student.stuid , student.fname , student.age , student.advisor , student.* | pets : pets.pet_age , pets.pettype ( cat ) , pets.petid , pets.weight , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT lname FROM student WHERE stuid IN (SELECT StuID FROM has_pet WHERE petid IN (SELECT PetID FROM pets WHERE pettype = 'cat' AND pet_age = 3))
natsql:
SELECT lname FROM student WHERE stuid IN (SELECT StuID FROM has_pet WHERE petid IN (SELECT PetID FROM pets WHERE pettype = 'cat' AND pet_age = 3))
SQL:
SELECT lname FROM student WHERE stuid IN (SELECT StuID FROM has_pet WHERE petid IN (SELECT PetID FROM pets WHERE pettype = 'cat' AND pet_age = 3))
self correction:
SELECT student.lname  FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND pets.pet_age = 3 LIMIT 1;

index is 85
select avg(age) from student where stuid not in (select stuid from has_pet)
Find the average age of students who do not have any pet .
schema_links:
Find the average age of students who do not have any pet . | student : student.age , student.stuid , student.sex , student.major , student.advisor , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.pet_age , pets.weight , pets.petid , pets.pettype , pets.*
natsql:
select avg ( _ ) from _ where @.@ not in _
natsql and SQL generation:
SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)
natsql:
SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)
SQL:
SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)
self correction:
SELECT avg(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)

index is 86
select avg(age) from student where stuid not in (select stuid from has_pet)
What is the average age for all students who do not own any pets ?
schema_links:
What is the average age for all students who do not own any pets ? | student : student.age , student.stuid , student.sex , student.advisor , student.lname , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.pettype , pets.pet_age , pets.weight , pets.petid , pets.*
natsql:
select avg ( _ ) from _ where @.@ not in _
natsql and SQL generation:
SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)
natsql:
SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)
SQL:
SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)
self correction:
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)

index is 87
SELECT count(*) FROM CONTINENTS;
How many continents are there?
schema_links:
How many continents are there? | continents : continents.continent , continents.contid , continents.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT count(*) FROM continents
natsql:
SELECT count(*) FROM continents
SQL:
SELECT count(*) FROM continents
self correction:
SELECT COUNT(*) FROM continents

index is 88
SELECT count(*) FROM CONTINENTS;
What is the number of continents?
schema_links:
What is the number of continents? | continents : continents.continent , continents.contid , continents.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | countries : countries.continent , countries.countryid , countries.countryname , countries.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT count(*) FROM continents
natsql:
SELECT count(*) FROM continents
SQL:
SELECT count(*) FROM continents
self correction:
SELECT count(*) FROM continents

index is 89
SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;
How many countries does each continent have? List the continent id, continent name and the number of countries.
schema_links:
How many countries does each continent have? List the continent id, continent name and the number of countries. | continents : continents.continent , continents.contid , continents.* | countries : countries.continent , countries.countryid , countries.countryname , countries.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT continents.contid, continents.continent, COUNT(countries.countryid) 
FROM continents 
JOIN countries ON continents.contid = countries.continent 
GROUP BY continents.contid, continents.continent
natsql:
SELECT continents.contid, continents.continent, COUNT(countries.countryid) 
FROM continents 
JOIN countries ON continents.contid = countries.continent 
GROUP BY continents.contid, continents.continent
SQL:
SELECT continents.contid, continents.continent, COUNT(countries.countryid) 
FROM continents 
JOIN countries ON continents.contid = countries.continent 
GROUP BY continents.contid, continents.continent
self correction:
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId)  FROM continents  JOIN countries ON continents.ContId = countries.ContinentId  GROUP BY continents.ContId, continents.Continent

index is 90
SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;
For each continent, list its id, name, and how many countries it has?
schema_links:
For each continent, list its id, name, and how many countries it has? | continents : continents.continent , continents.contid , continents.* | countries : countries.continent , countries.countryname , countries.countryid , countries.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT continent, contId, COUNT(*) AS country_count FROM continents JOIN countries ON continents.contId = countries.Continent GROUP BY continent, contId
natsql:
SELECT continent, contId, COUNT(*) AS country_count FROM continents JOIN countries ON continents.contId = countries.Continent GROUP BY continent, contId
SQL:
SELECT continent, contId, COUNT(*) AS country_count FROM continents JOIN countries ON continents.contId = countries.Continent GROUP BY continent, contId
self correction:
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS country_count  FROM continents  JOIN countries ON continents.ContId = countries.Continent  GROUP BY continents.ContId, continents.Continent

index is 91
SELECT count(*) FROM COUNTRIES;
How many countries are listed?
schema_links:
How many countries are listed? | countries : countries.countryname , countries.countryid , countries.continent , countries.* | continents : continents.continent , continents.contid , continents.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT count(*) FROM countries
natsql:
SELECT count(*) FROM countries
SQL:
SELECT count(*) FROM countries
self correction:
SELECT count(*) FROM countries

index is 92
SELECT count(*) FROM COUNTRIES;
How many countries exist?
schema_links:
How many countries exist? | countries : countries.countryname , countries.countryid , countries.continent , countries.* | continents : continents.continent , continents.contid , continents.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT count(*) FROM countries
natsql:
SELECT count(*) FROM countries
SQL:
SELECT count(*) FROM countries
self correction:
SELECT COUNT(*) FROM countries

index is 93
SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;
How many models does each car maker produce? List maker full name, id and the number.
schema_links:
How many models does each car maker produce? List maker full name, id and the number. | car_makers : car_makers.fullname , car_makers.id , car_makers.maker , car_makers.country , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT car_makers.maker, car_makers.FullName, car_makers.Id, COUNT(model_list.ModelId) AS num_models
FROM car_makers
JOIN model_list ON car_makers.Id = model_list.Maker
GROUP BY car_makers.maker, car_makers.FullName, car_makers.Id
natsql:
SELECT car_makers.maker, car_makers.FullName, car_makers.Id, COUNT(model_list.ModelId) AS num_models
FROM car_makers
JOIN model_list ON car_makers.Id = model_list.Maker
GROUP BY car_makers.maker, car_makers.FullName, car_makers.Id
SQL:
SELECT car_makers.maker, car_makers.FullName, car_makers.Id, COUNT(model_list.ModelId) AS num_models
FROM car_makers
JOIN model_list ON car_makers.Id = model_list.Maker
GROUP BY car_makers.maker, car_makers.FullName, car_makers.Id
self correction:
SELECT car_makers.maker, car_makers.FullName, car_makers.Id, COUNT(DISTINCT model_list.Model) AS num_models FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id

index is 94
SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;
What is the full name of each car maker, along with its id and how many models it produces?
schema_links:
What is the full name of each car maker, along with its id and how many models it produces? | car_makers : car_makers.fullname , car_makers.id , car_makers.maker , car_makers.country , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.makeid , car_names.model , car_names.make , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT car_makers.fullname, car_makers.id, COUNT(model_list.model) FROM car_makers
JOIN model_list ON car_makers.id = model_list.maker
GROUP BY car_makers.fullname, car_makers.id
natsql:
SELECT car_makers.fullname, car_makers.id, COUNT(model_list.model) FROM car_makers
JOIN model_list ON car_makers.id = model_list.maker
GROUP BY car_makers.fullname, car_makers.id
SQL:
SELECT car_makers.fullname, car_makers.id, COUNT(model_list.model) FROM car_makers
JOIN model_list ON car_makers.id = model_list.maker
GROUP BY car_makers.fullname, car_makers.id
self correction:
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.Model)  FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id

index is 95
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;
Which model of the car has the minimum horsepower?
schema_links:
Which model of the car has the minimum horsepower? | cars_data : cars_data.horsepower , cars_data.id , cars_data.weight , cars_data.cylinders , cars_data.accelerate , cars_data.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*
natsql:
select _ from _ order by _ asc limit _
natsql and SQL generation:
SELECT model FROM cars_data ORDER BY horsepower ASC LIMIT 1
natsql:
SELECT model FROM cars_data ORDER BY horsepower ASC LIMIT 1
SQL:
SELECT model FROM cars_data ORDER BY horsepower ASC LIMIT 1
self correction:
SELECT model FROM cars_data ORDER BY Horsepower ASC LIMIT 1

index is 96
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;
What is the model of the car with the smallest amount of horsepower?
schema_links:
What is the model of the car with the smallest amount of horsepower? | cars_data : cars_data.horsepower , cars_data.id , cars_data.cylinders , cars_data.weight , cars_data.accelerate , cars_data.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.*
natsql:
select _ from _ order by _ asc limit _
natsql and SQL generation:
SELECT model FROM cars_data ORDER BY horsepower ASC LIMIT 1
natsql:
SELECT model FROM cars_data ORDER BY horsepower ASC LIMIT 1
SQL:
SELECT model FROM cars_data ORDER BY horsepower ASC LIMIT 1
self correction:
SELECT model FROM cars_data ORDER BY Horsepower ASC LIMIT 1

index is 97
SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)
Find the model of the car whose weight is below the average weight.
schema_links:
Find the model of the car whose weight is below the average weight. | cars_data : cars_data.weight , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.accelerate , cars_data.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*
natsql:
select _ from _ where @.@ < avg ( _ )
natsql and SQL generation:
SELECT model FROM cars_data WHERE weight  <  (SELECT avg(weight) FROM cars_data)
natsql:
SELECT model FROM cars_data WHERE weight  <  (SELECT avg(weight) FROM cars_data)
SQL:
SELECT model FROM cars_data WHERE weight  <  (SELECT avg(weight) FROM cars_data)
self correction:
SELECT model FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data)

index is 98
SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)
What is the model for the car with a weight smaller than the average?
schema_links:
What is the model for the car with a weight smaller than the average? | cars_data : cars_data.weight , cars_data.id , cars_data.year , cars_data.mpg , cars_data.cylinders , cars_data.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.country , car_makers.id , car_makers.fullname , car_makers.*
natsql:
select _ from _ where @.@ < avg ( _ )
natsql and SQL generation:
SELECT model FROM model_list WHERE model_list.modelid IN (SELECT cars_data.id FROM cars_data WHERE weight < (SELECT avg(weight) FROM cars_data))
natsql:
SELECT model FROM model_list WHERE model_list.modelid IN (SELECT cars_data.id FROM cars_data WHERE weight < (SELECT avg(weight) FROM cars_data))
SQL:
SELECT model FROM model_list WHERE model_list.modelid IN (SELECT cars_data.id FROM cars_data WHERE weight < (SELECT avg(weight) FROM cars_data))
self correction:
SELECT model FROM model_list WHERE model_list.ModelId IN (     SELECT car_names.MakeId     FROM car_names     JOIN cars_data ON car_names.MakeId = cars_data.Id     WHERE cars_data.Weight < (         SELECT AVG(Weight)         FROM cars_data     ) )

index is 99
SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';
Find the name of the makers that produced some cars in the year of 1970?
schema_links:
Find the name of the makers that produced some cars in the year of 1970? | car_makers : car_makers.fullname , car_makers.maker , car_makers.country , car_makers.id , car_makers.* | cars_data : cars_data.year , cars_data.horsepower , cars_data.weight , cars_data.id , cars_data.cylinders , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*
natsql:
select distinct _ from _ where _
natsql and SQL generation:
SELECT DISTINCT maker FROM car_makers WHERE EXISTS (SELECT * FROM cars_data WHERE year = 1970)
natsql:
SELECT DISTINCT maker FROM car_makers WHERE EXISTS (SELECT * FROM cars_data WHERE year = 1970)
SQL:
SELECT DISTINCT maker FROM car_makers WHERE EXISTS (SELECT * FROM cars_data WHERE year = 1970)
self correction:
SELECT SELECT DISTINCT Maker FROM car_makers WHERE Id IN (SELECT DISTINCT car_makers.Id FROM car_makers             JOIN car_names ON car_makers.Id = car_names.MakeId             JOIN model_list ON car_names.Model = model_list.Model             JOIN cars_data ON car_names.MakeId = cars_data.Id             WHERE cars_data.Year = 1970)

index is 100
SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';
What is the name of the different car makers who produced a car in 1970?
schema_links:
What is the name of the different car makers who produced a car in 1970? | car_makers : car_makers.fullname , car_makers.maker , car_makers.country , car_makers.id , car_makers.* | cars_data : cars_data.year , cars_data.horsepower , cars_data.weight , cars_data.id , cars_data.cylinders , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*
natsql:
select distinct _ from _ where _
natsql and SQL generation:
SELECT DISTINCT maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Model WHERE cars_data.Year = 1970
natsql:
SELECT DISTINCT maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Model WHERE cars_data.Year = 1970
SQL:
SELECT DISTINCT maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Model WHERE cars_data.Year = 1970
self correction:
SELECT DISTINCT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Model WHERE cars_data.Year = 1970

index is 101
SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);
Find the make and production time of the cars that were produced in the earliest year?
schema_links:
Find the make and production time of the cars that were produced in the earliest year? | cars_data : cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql:
select _ from _ where @.@ = min ( _ )
natsql and SQL generation:
SELECT make, year FROM cars_data WHERE year = (SELECT MIN(year) FROM cars_data)
natsql:
SELECT make, year FROM cars_data WHERE year = (SELECT MIN(year) FROM cars_data)
SQL:
SELECT make, year FROM cars_data WHERE year = (SELECT MIN(year) FROM cars_data)
self correction:
SELECT car_names.Make, cars_data.Year  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data)

index is 102
SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);
What is the maker of the carr produced in the earliest year and what year was it?
schema_links:
What is the maker of the carr produced in the earliest year and what year was it? | cars_data : cars_data.year , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.cylinders , cars_data.* | car_makers : car_makers.maker , car_makers.fullname , car_makers.country , car_makers.id , car_makers.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*
natsql:
select _ from _ where @.@ = min ( _ )
natsql and SQL generation:
SELECT maker, year FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.makeid = cars_data.id WHERE year = (SELECT min(year) FROM cars_data)
natsql:
SELECT maker, year FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.makeid = cars_data.id WHERE year = (SELECT min(year) FROM cars_data)
SQL:
SELECT maker, year FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.makeid = cars_data.id WHERE year = (SELECT min(year) FROM cars_data)
self correction:
SELECT car_makers.Maker, cars_data.Year FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data)

index is 103
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;
Which distinct car models are the produced after 1980?
schema_links:
Which distinct car models are the produced after 1980? | cars_data : cars_data.year , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.cylinders , cars_data.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*
natsql:
select distinct _ from _ where _
natsql and SQL generation:
SELECT DISTINCT model FROM model_list JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Model WHERE cars_data.Year > 1980
natsql:
SELECT DISTINCT model FROM model_list JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Model WHERE cars_data.Year > 1980
SQL:
SELECT DISTINCT model FROM model_list JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Model WHERE cars_data.Year > 1980
self correction:
SELECT DISTINCT cars_data.Model  FROM cars_data  JOIN car_names ON cars_data.Model = car_names.Model  JOIN model_list ON car_names.MakeId = model_list.ModelId  WHERE cars_data.Year > 1980

index is 104
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;
What are the different models for the cards produced after 1980?
schema_links:
What are the different models for the cards produced after 1980? | cars_data : cars_data.year , cars_data.id , cars_data.cylinders , cars_data.accelerate , cars_data.horsepower , cars_data.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*
natsql:
select distinct _ from _ where _
natsql and SQL generation:
SELECT DISTINCT model FROM model_list JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Model WHERE cars_data.Year > 1980
natsql:
SELECT DISTINCT model FROM model_list JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Model WHERE cars_data.Year > 1980
SQL:
SELECT DISTINCT model FROM model_list JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Model WHERE cars_data.Year > 1980
self correction:
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Model WHERE cars_data.Year > 1980

index is 105
SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;
How many car makers are there in each continents? List the continent name and the count.
schema_links:
How many car makers are there in each continents? List the continent name and the count. | continents : continents.continent , continents.contid , continents.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | countries : countries.continent , countries.countryname , countries.countryid , countries.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT continents.continent, COUNT(car_makers.Id) FROM continents
JOIN countries ON continents.ContId = countries.Continent
JOIN car_makers ON countries.CountryId = car_makers.Country
GROUP BY continents.continent
natsql:
SELECT continents.continent, COUNT(car_makers.Id) FROM continents
JOIN countries ON continents.ContId = countries.Continent
JOIN car_makers ON countries.CountryId = car_makers.Country
GROUP BY continents.continent
SQL:
SELECT continents.continent, COUNT(car_makers.Id) FROM continents
JOIN countries ON continents.ContId = countries.Continent
JOIN car_makers ON countries.CountryId = car_makers.Country
GROUP BY continents.continent
self correction:
SELECT continents.Continent, COUNT(DISTINCT car_makers.Id) AS MakerCount FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent

index is 106
SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;
What is the name of each continent and how many car makers are there in each one?
schema_links:
What is the name of each continent and how many car makers are there in each one? | continents : continents.continent , continents.contid , continents.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | countries : countries.continent , countries.countryname , countries.countryid , countries.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT continents.continent, COUNT(car_makers.Id)
FROM continents
JOIN countries ON continents.ContId = countries.Continent
JOIN car_makers ON countries.CountryId = car_makers.Country
GROUP BY continents.continent
natsql:
SELECT continents.continent, COUNT(car_makers.Id)
FROM continents
JOIN countries ON continents.ContId = countries.Continent
JOIN car_makers ON countries.CountryId = car_makers.Country
GROUP BY continents.continent
SQL:
SELECT continents.continent, COUNT(car_makers.Id)
FROM continents
JOIN countries ON continents.ContId = countries.Continent
JOIN car_makers ON countries.CountryId = car_makers.Country
GROUP BY continents.continent
self correction:
SELECT continents.Continent, COUNT(DISTINCT car_makers.Id) FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent

index is 107
SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;
Which of the countries has the most car makers? List the country name.
schema_links:
Which of the countries has the most car makers? List the country name. | countries : countries.countryname , countries.countryid , countries.continent , countries.* | car_makers : car_makers.country , car_makers.maker , car_makers.id , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countryname ORDER BY count(car_makers.id) DESC LIMIT 1
natsql:
SELECT countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countryname ORDER BY count(car_makers.id) DESC LIMIT 1
SQL:
SELECT countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countryname ORDER BY count(car_makers.id) DESC LIMIT 1
self correction:
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1

index is 108
SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;
What is the name of the country with the most car makers?
schema_links:
What is the name of the country with the most car makers? | countries : countries.countryname , countries.countryid , countries.continent , countries.* | car_makers : car_makers.country , car_makers.id , car_makers.maker , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | continents : continents.continent , continents.contid , continents.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT countryname FROM countries GROUP BY countryname ORDER BY count(*) DESC LIMIT 1
natsql:
SELECT countryname FROM countries GROUP BY countryname ORDER BY count(*) DESC LIMIT 1
SQL:
SELECT countryname FROM countries GROUP BY countryname ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId, countries.CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1

index is 109
select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;
How many car models are produced by each maker ? Only list the count and the maker full name .
schema_links:
How many car models are produced by each maker ? Only list the count and the maker full name . | car_makers : car_makers.fullname , car_makers.maker , car_makers.id , car_makers.country , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql:
select count ( _ ) , _ from _ group by _
natsql and SQL generation:
SELECT COUNT(model_list.*) , car_makers.fullname
FROM car_makers
JOIN model_list ON car_makers.id = model_list.maker
GROUP BY car_makers.fullname
natsql:
SELECT COUNT(model_list.*) , car_makers.fullname
FROM car_makers
JOIN model_list ON car_makers.id = model_list.maker
GROUP BY car_makers.fullname
SQL:
SELECT COUNT(model_list.*) , car_makers.fullname
FROM car_makers
JOIN model_list ON car_makers.id = model_list.maker
GROUP BY car_makers.fullname
self correction:
SELECT COUNT(model_list.ModelId) AS ModelCount, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName

index is 110
SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;
What is the number of car models that are produced by each maker and what is the id and full name of each maker?
schema_links:
What is the number of car models that are produced by each maker and what is the id and full name of each maker? | car_makers : car_makers.fullname , car_makers.id , car_makers.maker , car_makers.country , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql:
select count ( _ ) , _ from _ group by _
natsql and SQL generation:
SELECT count(model_list.*) , car_makers.id , car_makers.fullname
FROM model_list
JOIN car_names ON model_list.model = car_names.model
JOIN car_makers ON car_names.makeid = car_makers.id
GROUP BY car_makers.id, car_makers.fullname
natsql:
SELECT count(model_list.*) , car_makers.id , car_makers.fullname
FROM model_list
JOIN car_names ON model_list.model = car_names.model
JOIN car_makers ON car_names.makeid = car_makers.id
GROUP BY car_makers.id, car_makers.fullname
SQL:
SELECT count(model_list.*) , car_makers.id , car_makers.fullname
FROM model_list
JOIN car_names ON model_list.model = car_names.model
JOIN car_makers ON car_names.makeid = car_makers.id
GROUP BY car_makers.id, car_makers.fullname
self correction:
SELECT count(model_list.ModelId) , car_makers.Id , car_makers.FullName FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN car_makers ON car_names.MakeId = car_makers.Id GROUP BY car_makers.Id, car_makers.FullName

index is 111
SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';
What is the accelerate of the car make amc hornet sportabout (sw)?
schema_links:
What is the accelerate of the car make amc hornet sportabout (sw)? | car_names : car_names.make ( amc hornet , amc hornet sportabout (sw) ) , car_names.model ( amc ) , car_names.makeid , car_names.* | cars_data : cars_data.accelerate , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.* | car_makers : car_makers.maker ( amc ) , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.model ( amc ) , model_list.maker , model_list.modelid , model_list.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT accelerate FROM cars_data WHERE Model = 'amc hornet sportabout (sw)'
natsql:
SELECT accelerate FROM cars_data WHERE Model = 'amc hornet sportabout (sw)'
SQL:
SELECT accelerate FROM cars_data WHERE Model = 'amc hornet sportabout (sw)'
self correction:
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'amc' AND car_makers.FullName = 'hornet sportabout (sw)'

index is 112
SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';
How much does the car accelerate that makes amc hornet sportabout (sw)?
schema_links:
How much does the car accelerate that makes amc hornet sportabout (sw)? | car_names : car_names.make ( amc hornet , amc hornet sportabout (sw) ) , car_names.model ( amc ) , car_names.makeid , car_names.* | cars_data : cars_data.accelerate , cars_data.horsepower , cars_data.id , cars_data.cylinders , cars_data.weight , cars_data.* | car_makers : car_makers.maker ( amc ) , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.model ( amc ) , model_list.maker , model_list.modelid , model_list.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT accelerate FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Make = 'amc hornet sportabout (sw)' AND Model = 'amc hornet')
natsql:
SELECT accelerate FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Make = 'amc hornet sportabout (sw)' AND Model = 'amc hornet')
SQL:
SELECT accelerate FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Make = 'amc hornet sportabout (sw)' AND Model = 'amc hornet')
self correction:
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'amc hornet sportabout (sw)'

index is 113
SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';
How many car makers are there in france?
schema_links:
How many car makers are there in france? | countries : countries.countryname ( france ) , countries.countryid , countries.continent , countries.* | car_makers : car_makers.country , car_makers.maker , car_makers.id , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | continents : continents.continent , continents.contid , continents.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'france'
natsql:
SELECT count(*) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'france'
SQL:
SELECT count(*) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'france'
self correction:
SELECT count(*) FROM car_makers  JOIN countries ON car_makers.Country = countries.CountryId  WHERE countries.CountryName = 'france'

index is 114
SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';
What is the number of makers of care in France?
schema_links:
What is the number of makers of care in France? | countries : countries.countryname ( france ) , countries.countryid , countries.continent , countries.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM car_makers WHERE country = (SELECT countryid FROM countries WHERE countryname = 'France')
natsql:
SELECT count(*) FROM car_makers WHERE country = (SELECT countryid FROM countries WHERE countryname = 'France')
SQL:
SELECT count(*) FROM car_makers WHERE country = (SELECT countryid FROM countries WHERE countryname = 'France')
self correction:
SELECT COUNT(DISTINCT Maker) FROM car_makers  WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France')

index is 115
SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';
How many car models are produced in the usa?
schema_links:
How many car models are produced in the usa? | countries : countries.countryname ( usa ) , countries.countryid , countries.continent , countries.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT COUNT(*) FROM car_makers WHERE country = 'usa'
natsql:
SELECT COUNT(*) FROM car_makers WHERE country = 'usa'
SQL:
SELECT COUNT(*) FROM car_makers WHERE country = 'usa'
self correction:
SELECT COUNT(DISTINCT car_names.Model) FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN model_list ON car_makers.Id = model_list.Maker JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'usa'

index is 116
SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';
What is the count of the car models produced in the United States?
schema_links:
What is the count of the car models produced in the United States? | countries : countries.countryname , countries.countryid , countries.continent , countries.* | car_makers : car_makers.country , car_makers.id , car_makers.maker , car_makers.fullname , car_makers.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'United States'
natsql:
SELECT count(*) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'United States'
SQL:
SELECT count(*) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'United States'
self correction:
SELECT count(DISTINCT car_names.Model) AS CarModelCount FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId WHERE countries.CountryName = 'United States'

index is 117
SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;
What is the average miles per gallon(mpg) of the cars with 4 cylinders?
schema_links:
What is the average miles per gallon(mpg) of the cars with 4 cylinders? | cars_data : cars_data.mpg , cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql:
select avg ( _ ) from _ where _
natsql and SQL generation:
SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4
natsql:
SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4
SQL:
SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4
self correction:
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4

index is 118
SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;
What is the average miles per gallon of all the cards with 4 cylinders?
schema_links:
What is the average miles per gallon of all the cards with 4 cylinders? | cars_data : cars_data.mpg , cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql:
select avg ( _ ) from _ where _
natsql and SQL generation:
SELECT avg(mpg) FROM cars_data WHERE cylinders = 4
natsql:
SELECT avg(mpg) FROM cars_data WHERE cylinders = 4
SQL:
SELECT avg(mpg) FROM cars_data WHERE cylinders = 4
self correction:
SELECT avg(MPG) FROM cars_data WHERE Cylinders = 4

index is 119
select min(weight) from cars_data where cylinders  =  8 and year  =  1974
What is the smallest weight of the car produced with 8 cylinders on 1974 ?
schema_links:
What is the smallest weight of the car produced with 8 cylinders on 1974 ? | cars_data : cars_data.weight , cars_data.cylinders , cars_data.year , cars_data.id , cars_data.horsepower , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.id , car_makers.fullname , car_makers.country , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql:
select min ( _ ) from _ where _
natsql and SQL generation:
SELECT min(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974
natsql:
SELECT min(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974
SQL:
SELECT min(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974
self correction:
SELECT min(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974

index is 120
select min(weight) from cars_data where cylinders  =  8 and year  =  1974
What is the minimum weight of the car with 8 cylinders produced in 1974 ?
schema_links:
What is the minimum weight of the car with 8 cylinders produced in 1974 ? | cars_data : cars_data.cylinders , cars_data.weight , cars_data.year , cars_data.id , cars_data.horsepower , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql:
select min ( _ ) from _ where _
natsql and SQL generation:
SELECT min(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974
natsql:
SELECT min(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974
SQL:
SELECT min(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974
self correction:
SELECT min(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974

index is 121
SELECT Maker ,  Model FROM MODEL_LIST;
What are all the makers and models?
schema_links:
What are all the makers and models? | car_makers : car_makers.maker , car_makers.fullname , car_makers.country , car_makers.id , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql:
select _ from _
natsql and SQL generation:
SELECT maker, model FROM car_makers, model_list, car_names WHERE car_makers.id = model_list.maker AND model_list.modelid = car_names.makeid
natsql:
SELECT maker, model FROM car_makers, model_list, car_names WHERE car_makers.id = model_list.maker AND model_list.modelid = car_names.makeid
SQL:
SELECT maker, model FROM car_makers, model_list, car_names WHERE car_makers.id = model_list.maker AND model_list.modelid = car_names.makeid
self correction:
SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId

index is 122
SELECT Maker ,  Model FROM MODEL_LIST;
What are the makers and models?
schema_links:
What are the makers and models? | car_makers : car_makers.maker , car_makers.country , car_makers.fullname , car_makers.id , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | countries : countries.countryname , countries.continent , countries.countryid , countries.*
natsql:
select _ from _
natsql and SQL generation:
SELECT maker, model FROM car_makers, model_list, car_names, countries
natsql:
SELECT maker, model FROM car_makers, model_list, car_names, countries
SQL:
SELECT maker, model FROM car_makers, model_list, car_names, countries
self correction:
SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN countries ON car_makers.Country = countries.CountryId

index is 123
SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;
What are the countries having at least one car maker? List name and id.
schema_links:
What are the countries having at least one car maker? List name and id. | countries : countries.countryname , countries.countryid , countries.continent , countries.* | car_makers : car_makers.maker , car_makers.country , car_makers.id , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql:
select _ from _ where count ( _ ) >= _ group by _
natsql and SQL generation:
SELECT countryName, countryId
FROM countries
WHERE countryId IN (SELECT DISTINCT country FROM car_makers)
natsql:
SELECT countryName, countryId
FROM countries
WHERE countryId IN (SELECT DISTINCT country FROM car_makers)
SQL:
SELECT countryName, countryId
FROM countries
WHERE countryId IN (SELECT DISTINCT country FROM car_makers)
self correction:
SELECT CountryName, CountryId FROM countries WHERE CountryId IN (SELECT DISTINCT Country FROM car_makers)

index is 124
SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;
What are the names and ids of all countries with at least one car maker?
schema_links:
What are the names and ids of all countries with at least one car maker? | countries : countries.countryid , countries.countryname , countries.continent , countries.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | continents : continents.continent , continents.contid , continents.*
natsql:
select _ from _ where count ( _ ) >= _ group by _
natsql and SQL generation:
SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT DISTINCT country FROM car_makers)
natsql:
SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT DISTINCT country FROM car_makers)
SQL:
SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT DISTINCT country FROM car_makers)
self correction:
SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT DISTINCT countries.countryid FROM car_makers                     JOIN countries ON car_makers.country = countries.countryid)

index is 125
SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;
What is the number of the cars with horsepower more than 150?
schema_links:
What is the number of the cars with horsepower more than 150? | cars_data : cars_data.horsepower , cars_data.id , cars_data.cylinders , cars_data.weight , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM cars_data WHERE horsepower > 150
natsql:
SELECT count(*) FROM cars_data WHERE horsepower > 150
SQL:
SELECT count(*) FROM cars_data WHERE horsepower > 150
self correction:
SELECT count(*) FROM cars_data WHERE Horsepower > 150

index is 126
SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;
What is the number of cars with a horsepower greater than 150?
schema_links:
What is the number of cars with a horsepower greater than 150? | cars_data : cars_data.horsepower , cars_data.id , cars_data.cylinders , cars_data.weight , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM cars_data WHERE horsepower > 150
natsql:
SELECT count(*) FROM cars_data WHERE horsepower > 150
SQL:
SELECT count(*) FROM cars_data WHERE horsepower > 150
self correction:
SELECT count(*) FROM cars_data WHERE Horsepower > 150

index is 127
SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;
What is the average weight of cars each year?
schema_links:
What is the average weight of cars each year? | cars_data : cars_data.weight , cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql:
select avg ( _ ) , _ from _ group by _
natsql and SQL generation:
SELECT AVG(weight), year FROM cars_data GROUP BY year
natsql:
SELECT AVG(weight), year FROM cars_data GROUP BY year
SQL:
SELECT AVG(weight), year FROM cars_data GROUP BY year
self correction:
SELECT AVG(Weight) AS Average_Weight, Year FROM cars_data GROUP BY Year

index is 128
SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;
What is the average weight and year for each year?
schema_links:
What is the average weight and year for each year? | cars_data : cars_data.weight , cars_data.year , cars_data.horsepower , cars_data.id , cars_data.cylinders , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | continents : continents.continent , continents.contid , continents.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*
natsql:
select avg ( _ ) , _ from _ group by _
natsql and SQL generation:
SELECT AVG(weight), year FROM cars_data GROUP BY year
natsql:
SELECT AVG(weight), year FROM cars_data GROUP BY year
SQL:
SELECT AVG(weight), year FROM cars_data GROUP BY year
self correction:
SELECT AVG(Weight) AS AverageWeight, Year FROM cars_data GROUP BY Year

index is 129
SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;
Which countries in europe have at least 3 car manufacturers?
schema_links:
Which countries in europe have at least 3 car manufacturers? | continents : continents.continent ( europe ) , continents.contid , continents.* | countries : countries.countryname , countries.countryid , countries.continent , countries.* | car_makers : car_makers.id , car_makers.country , car_makers.maker , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql:
select _ from _ where _ and count ( _ ) >= _ group by _
natsql and SQL generation:
SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country
WHERE countries.continent = 'Europe'
GROUP BY countries.countryname
HAVING count(car_makers.id) >= 3
natsql:
SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country
WHERE countries.continent = 'Europe'
GROUP BY countries.countryname
HAVING count(car_makers.id) >= 3
SQL:
SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country
WHERE countries.continent = 'Europe'
GROUP BY countries.countryname
HAVING count(car_makers.id) >= 3
self correction:
SELECT countries.CountryName  FROM countries  JOIN car_makers ON countries.CountryId = car_makers.Country JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'Europe' GROUP BY countries.CountryName HAVING COUNT(car_makers.Id) >= 3

index is 130
SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;
What are the names of all European countries with at least 3 manufacturers?
schema_links:
What are the names of all European countries with at least 3 manufacturers? | countries : countries.countryname , countries.countryid , countries.continent , countries.* | continents : continents.continent ( europe ) , continents.contid , continents.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*
natsql:
select _ from _ where _ and count ( _ ) >= _ group by _
natsql and SQL generation:
SELECT countryname FROM countries 
WHERE continent = 'Europe' 
AND countryid IN (
  SELECT country 
  FROM car_makers 
  GROUP BY country 
  HAVING count(*) >= 3
)
natsql:
SELECT countryname FROM countries 
WHERE continent = 'Europe' 
AND countryid IN (
  SELECT country 
  FROM car_makers 
  GROUP BY country 
  HAVING count(*) >= 3
)
SQL:
SELECT countryname FROM countries 
WHERE continent = 'Europe' 
AND countryid IN (
  SELECT country 
  FROM car_makers 
  GROUP BY country 
  HAVING count(*) >= 3
)
self correction:
SELECT countryname  FROM countries  WHERE continent = 'Europe'  AND countryid IN (   SELECT country    FROM car_makers    GROUP BY country    HAVING count(DISTINCT id) >= 3 )

index is 131
SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;
What is the maximum horsepower and the make of the car models with 3 cylinders?
schema_links:
What is the maximum horsepower and the make of the car models with 3 cylinders? | cars_data : cars_data.cylinders , cars_data.horsepower , cars_data.id , cars_data.weight , cars_data.mpg , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.*
natsql:
select _ from _ where _ order by _ desc limit _
natsql and SQL generation:
SELECT MAX(horsepower), make FROM cars_data WHERE cylinders = 3 GROUP BY make
natsql:
SELECT MAX(horsepower), make FROM cars_data WHERE cylinders = 3 GROUP BY make
SQL:
SELECT MAX(horsepower), make FROM cars_data WHERE cylinders = 3 GROUP BY make
self correction:
SELECT MAX(Horsepower), car_makers.Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3 GROUP BY car_makers.Maker

index is 132
SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;
What is the largest amount of horsepower for the models with 3 cylinders and what make is it?
schema_links:
What is the largest amount of horsepower for the models with 3 cylinders and what make is it? | cars_data : cars_data.horsepower , cars_data.cylinders , cars_data.id , cars_data.edispl , cars_data.weight , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.*
natsql:
select _ from _ where _ order by _ desc limit _
natsql and SQL generation:
SELECT horsepower, car_names.make
FROM cars_data
JOIN car_names ON cars_data.id = car_names.makeid
WHERE cylinders = 3
ORDER BY horsepower DESC
LIMIT 1
natsql:
SELECT horsepower, car_names.make
FROM cars_data
JOIN car_names ON cars_data.id = car_names.makeid
WHERE cylinders = 3
ORDER BY horsepower DESC
LIMIT 1
SQL:
SELECT horsepower, car_names.make
FROM cars_data
JOIN car_names ON cars_data.id = car_names.makeid
WHERE cylinders = 3
ORDER BY horsepower DESC
LIMIT 1
self correction:
SELECT cars_data.Horsepower, car_makers.Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3 ORDER BY cars_data.Horsepower DESC LIMIT 1

index is 133
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;
Which model saves the most gasoline? That is to say, have the maximum miles per gallon.
schema_links:
Which model saves the most gasoline? That is to say, have the maximum miles per gallon. | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | cars_data : cars_data.mpg , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT model FROM cars_data ORDER BY MPG DESC LIMIT 1
natsql:
SELECT model FROM cars_data ORDER BY MPG DESC LIMIT 1
SQL:
SELECT model FROM cars_data ORDER BY MPG DESC LIMIT 1
self correction:
SELECT cars_data.Model FROM cars_data ORDER BY cars_data.MPG DESC LIMIT 1

index is 134
select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;
What is the car model with the highest mpg ?
schema_links:
What is the car model with the highest mpg ? | cars_data : cars_data.mpg , cars_data.id , cars_data.cylinders , cars_data.year , cars_data.horsepower , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT model FROM cars_data ORDER BY mpg DESC LIMIT 1
natsql:
SELECT model FROM cars_data ORDER BY mpg DESC LIMIT 1
SQL:
SELECT model FROM cars_data ORDER BY mpg DESC LIMIT 1
self correction:
SELECT cars_data.Model FROM cars_data ORDER BY cars_data.MPG DESC LIMIT 1

index is 135
SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;
What is the average horsepower of the cars before 1980?
schema_links:
What is the average horsepower of the cars before 1980? | cars_data : cars_data.horsepower , cars_data.year , cars_data.id , cars_data.cylinders , cars_data.weight , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql:
select avg ( _ ) from _ where _
natsql and SQL generation:
SELECT AVG(horsepower) FROM cars_data WHERE year < 1980
natsql:
SELECT AVG(horsepower) FROM cars_data WHERE year < 1980
SQL:
SELECT AVG(horsepower) FROM cars_data WHERE year < 1980
self correction:
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980

index is 136
select avg(horsepower) from cars_data where year  <  1980;
What is the average horsepower for all cars produced before 1980 ?
schema_links:
What is the average horsepower for all cars produced before 1980 ? | cars_data : cars_data.horsepower , cars_data.year , cars_data.id , cars_data.cylinders , cars_data.weight , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*
natsql:
select avg ( _ ) from _ where _
natsql and SQL generation:
SELECT AVG(horsepower) FROM cars_data WHERE year < 1980
natsql:
SELECT AVG(horsepower) FROM cars_data WHERE year < 1980
SQL:
SELECT AVG(horsepower) FROM cars_data WHERE year < 1980
self correction:
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980

index is 137
SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';
What is the average edispl of the cars of model volvo?
schema_links:
What is the average edispl of the cars of model volvo? | model_list : model_list.model ( volvo ) , model_list.maker , model_list.modelid , model_list.* | cars_data : cars_data.edispl , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.* | car_names : car_names.model ( volvo ) , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.maker ( volvo ) , car_makers.fullname ( Volvo ) , car_makers.id , car_makers.country , car_makers.*
natsql:
select avg ( _ ) from _ where _
natsql and SQL generation:
SELECT AVG(edispl) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'volvo')
natsql:
SELECT AVG(edispl) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'volvo')
SQL:
SELECT AVG(edispl) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'volvo')
self correction:
SELECT AVG(Edispl)  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.Maker = 'volvo'

index is 138
SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';
What is the average edispl for all volvos?
schema_links:
What is the average edispl for all volvos? | cars_data : cars_data.edispl , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.* | car_names : car_names.model ( volvo ) , car_names.make , car_names.makeid , car_names.* | model_list : model_list.model ( volvo ) , model_list.maker , model_list.modelid , model_list.* | car_makers : car_makers.maker ( volvo ) , car_makers.id , car_makers.country , car_makers.fullname , car_makers.*
natsql:
select avg ( _ ) from _ where _
natsql and SQL generation:
SELECT avg(edispl) FROM cars_data WHERE id IN (SELECT MakeId FROM car_names WHERE Make = 'volvo')
natsql:
SELECT avg(edispl) FROM cars_data WHERE id IN (SELECT MakeId FROM car_names WHERE Make = 'volvo')
SQL:
SELECT avg(edispl) FROM cars_data WHERE id IN (SELECT MakeId FROM car_names WHERE Make = 'volvo')
self correction:
SELECT avg(Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'volvo'

index is 139
SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;
What is the maximum accelerate for different number of cylinders?
schema_links:
What is the maximum accelerate for different number of cylinders? | cars_data : cars_data.accelerate , cars_data.cylinders , cars_data.id , cars_data.year , cars_data.horsepower , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | continents : continents.continent , continents.contid , continents.*
natsql:
select max ( _ ) , _ from _ group by _
natsql and SQL generation:
SELECT max(accelerate), cylinders FROM cars_data GROUP BY cylinders
natsql:
SELECT max(accelerate), cylinders FROM cars_data GROUP BY cylinders
SQL:
SELECT max(accelerate), cylinders FROM cars_data GROUP BY cylinders
self correction:
SELECT MAX(accelerate) AS max_accelerate, cylinders FROM cars_data GROUP BY cylinders

index is 140
SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;
What is the maximum accelerate for all the different cylinders?
schema_links:
What is the maximum accelerate for all the different cylinders? | cars_data : cars_data.accelerate , cars_data.cylinders , cars_data.year , cars_data.id , cars_data.horsepower , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | continents : continents.continent , continents.contid , continents.*
natsql:
select max ( _ ) , _ from _ group by _
natsql and SQL generation:
SELECT MAX(accelerate), cylinders FROM cars_data GROUP BY cylinders
natsql:
SELECT MAX(accelerate), cylinders FROM cars_data GROUP BY cylinders
SQL:
SELECT MAX(accelerate), cylinders FROM cars_data GROUP BY cylinders
self correction:
SELECT MAX(Accelerate) AS Max_Accelerate, Cylinders FROM cars_data GROUP BY Cylinders

index is 141
SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;
Which model has the most version(make) of cars?
schema_links:
Which model has the most version(make) of cars? | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT model FROM model_list GROUP BY model ORDER BY count(*) DESC LIMIT 1
natsql:
SELECT model FROM model_list GROUP BY model ORDER BY count(*) DESC LIMIT 1
SQL:
SELECT model FROM model_list GROUP BY model ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT model, COUNT(*) AS car_count FROM model_list GROUP BY model ORDER BY car_count DESC LIMIT 1

index is 142
SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;
What model has the most different versions?
schema_links:
What model has the most different versions? | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT model FROM model_list GROUP BY model ORDER BY count(*) DESC LIMIT 1
natsql:
SELECT model FROM model_list GROUP BY model ORDER BY count(*) DESC LIMIT 1
SQL:
SELECT model FROM model_list GROUP BY model ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT model, COUNT(DISTINCT Maker) AS num_versions FROM model_list GROUP BY model ORDER BY num_versions DESC LIMIT 1

index is 143
SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;
How many cars have more than 4 cylinders?
schema_links:
How many cars have more than 4 cylinders? | cars_data : cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT COUNT(*) FROM cars_data WHERE cylinders > 4
natsql:
SELECT COUNT(*) FROM cars_data WHERE cylinders > 4
SQL:
SELECT COUNT(*) FROM cars_data WHERE cylinders > 4
self correction:
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4

index is 144
SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;
What is the number of cars with more than 4 cylinders?
schema_links:
What is the number of cars with more than 4 cylinders? | cars_data : cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT COUNT(*) FROM cars_data WHERE cylinders > 4
natsql:
SELECT COUNT(*) FROM cars_data WHERE cylinders > 4
SQL:
SELECT COUNT(*) FROM cars_data WHERE cylinders > 4
self correction:
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4

index is 145
SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;
how many cars were produced in 1980?
schema_links:
how many cars were produced in 1980? | cars_data : cars_data.year , cars_data.id , cars_data.horsepower , cars_data.cylinders , cars_data.weight , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM cars_data WHERE year = 1980
natsql:
SELECT count(*) FROM cars_data WHERE year = 1980
SQL:
SELECT count(*) FROM cars_data WHERE year = 1980
self correction:
SELECT count(*) FROM cars_data WHERE Year = 1980

index is 146
SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;
In 1980, how many cars were made?
schema_links:
In 1980, how many cars were made? | cars_data : cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.country , car_makers.id , car_makers.fullname , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM cars_data WHERE year = 1980
natsql:
SELECT count(*) FROM cars_data WHERE year = 1980
SQL:
SELECT count(*) FROM cars_data WHERE year = 1980
self correction:
SELECT count(*) FROM cars_data WHERE Year = 1980

index is 147
SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';
How many car models were produced by the maker with full name American Motor Company?
schema_links:
How many car models were produced by the maker with full name American Motor Company? | car_makers : car_makers.fullname ( American Motor Company ) , car_makers.maker , car_makers.id , car_makers.country , car_makers.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | continents : continents.continent ( america ) , continents.contid , continents.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM model_list WHERE maker = (SELECT Id FROM car_makers WHERE FullName = 'American Motor Company')
natsql:
SELECT count(*) FROM model_list WHERE maker = (SELECT Id FROM car_makers WHERE FullName = 'American Motor Company')
SQL:
SELECT count(*) FROM model_list WHERE maker = (SELECT Id FROM car_makers WHERE FullName = 'American Motor Company')
self correction:
SELECT COUNT(*) FROM model_list  WHERE Maker = (SELECT Id FROM car_makers WHERE FullName = 'American Motor Company')

index is 148
SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';
What is the number of car models created by the car maker American Motor Company?
schema_links:
What is the number of car models created by the car maker American Motor Company? | car_makers : car_makers.fullname ( American Motor Company ) , car_makers.maker , car_makers.country , car_makers.id , car_makers.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | continents : continents.continent ( america ) , continents.contid , continents.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT COUNT(*) FROM model_list WHERE maker = (SELECT id FROM car_makers WHERE fullName = 'American Motor Company')
natsql:
SELECT COUNT(*) FROM model_list WHERE maker = (SELECT id FROM car_makers WHERE fullName = 'American Motor Company')
SQL:
SELECT COUNT(*) FROM model_list WHERE maker = (SELECT id FROM car_makers WHERE fullName = 'American Motor Company')
self correction:
SELECT COUNT(*) FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE FullName = 'American Motor Company')

index is 149
SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;
Which makers designed more than 3 car models? List full name and the id.
schema_links:
Which makers designed more than 3 car models? List full name and the id. | car_makers : car_makers.fullname , car_makers.id , car_makers.maker , car_makers.country , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.* | car_names : car_names.model , car_names.makeid , car_names.make , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql:
select _ from _ where count ( _ ) > _ group by _
natsql and SQL generation:
SELECT fullname, id FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(*) > 3)
natsql:
SELECT fullname, id FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(*) > 3)
SQL:
SELECT fullname, id FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(*) > 3)
self correction:
SELECT fullname, id FROM car_makers WHERE id IN (   SELECT Maker   FROM model_list   GROUP BY Maker   HAVING COUNT(*) > 3 )

index is 150
SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;
What are the names and ids of all makers with more than 3 models?
schema_links:
What are the names and ids of all makers with more than 3 models? | car_makers : car_makers.maker , car_makers.fullname , car_makers.id , car_makers.country , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | continents : continents.continent , continents.contid , continents.*
natsql:
select _ from _ where count ( _ ) > _ group by _
natsql and SQL generation:
SELECT maker, id FROM car_makers GROUP BY maker, id HAVING count(*) > 3
natsql:
SELECT maker, id FROM car_makers GROUP BY maker, id HAVING count(*) > 3
SQL:
SELECT maker, id FROM car_makers GROUP BY maker, id HAVING count(*) > 3
self correction:
SELECT car_makers.Maker, car_makers.Id FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker, car_makers.Id  HAVING COUNT(model_list.ModelId) > 3

index is 151
SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;
Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?
schema_links:
Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500? | car_makers : car_makers.fullname ( General Motors ) , car_makers.maker , car_makers.id , car_makers.country , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | cars_data : cars_data.weight , cars_data.cylinders , cars_data.id , cars_data.mpg , cars_data.horsepower , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql:
select distinct _ from _ where _
natsql and SQL generation:
SELECT DISTINCT model FROM model_list WHERE maker = 'General Motors' OR weight > 3500
natsql:
SELECT DISTINCT model FROM model_list WHERE maker = 'General Motors' OR weight > 3500
SQL:
SELECT DISTINCT model FROM model_list WHERE maker = 'General Motors' OR weight > 3500
self correction:
SELECT DISTINCT car_names.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500

index is 152
SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;
What are the different models created by either the car maker General Motors or weighed more than 3500?
schema_links:
What are the different models created by either the car maker General Motors or weighed more than 3500? | car_makers : car_makers.fullname ( General Motors ) , car_makers.maker , car_makers.country , car_makers.id , car_makers.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | cars_data : cars_data.weight , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql:
select distinct _ from _ where _
natsql and SQL generation:
SELECT DISTINCT model FROM model_list WHERE maker = 'General Motors' OR weight > 3500
natsql:
SELECT DISTINCT model FROM model_list WHERE maker = 'General Motors' OR weight > 3500
SQL:
SELECT DISTINCT model FROM model_list WHERE maker = 'General Motors' OR weight > 3500
self correction:
SELECT DISTINCT car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.ModelId JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500

index is 153
select distinct year from cars_data where weight between 3000 and 4000;
In which years cars were produced weighing no less than 3000 and no more than 4000 ?
schema_links:
In which years cars were produced weighing no less than 3000 and no more than 4000 ? | cars_data : cars_data.weight , cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql:
select distinct _ from _ where _ between _ and _
natsql and SQL generation:
SELECT DISTINCT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000
natsql:
SELECT DISTINCT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000
SQL:
SELECT DISTINCT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000
self correction:
SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight >= 3000 AND cars_data.Weight <= 4000

index is 154
select distinct year from cars_data where weight between 3000 and 4000;
What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?
schema_links:
What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ? | cars_data : cars_data.weight , cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*
natsql:
select distinct _ from _ where _ between _ and _
natsql and SQL generation:
SELECT DISTINCT year FROM cars_data WHERE weight < 4000 AND year IN (SELECT DISTINCT year FROM cars_data WHERE weight > 3000)
natsql:
SELECT DISTINCT year FROM cars_data WHERE weight < 4000 AND year IN (SELECT DISTINCT year FROM cars_data WHERE weight > 3000)
SQL:
SELECT DISTINCT year FROM cars_data WHERE weight < 4000 AND year IN (SELECT DISTINCT year FROM cars_data WHERE weight > 3000)
self correction:
SELECT DISTINCT Year  FROM cars_data  WHERE weight < 4000     OR weight > 3000

index is 155
SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;
What is the horsepower of the car with the largest accelerate?
schema_links:
What is the horsepower of the car with the largest accelerate? | cars_data : cars_data.horsepower , cars_data.accelerate , cars_data.id , cars_data.weight , cars_data.year , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1
natsql:
SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1
SQL:
SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1
self correction:
SELECT cars_data.Horsepower  FROM cars_data  ORDER BY cars_data.Accelerate DESC  LIMIT 1

index is 156
SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;
What is the horsepower of the car with the greatest accelerate?
schema_links:
What is the horsepower of the car with the greatest accelerate? | cars_data : cars_data.accelerate , cars_data.horsepower , cars_data.id , cars_data.year , cars_data.weight , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1
natsql:
SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1
SQL:
SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1
self correction:
SELECT cars_data.Horsepower  FROM cars_data  ORDER BY cars_data.Accelerate DESC  LIMIT 1

index is 157
SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
For model volvo, how many cylinders does the car with the least accelerate have?
schema_links:
For model volvo, how many cylinders does the car with the least accelerate have? | cars_data : cars_data.accelerate , cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.* | model_list : model_list.model ( volvo ) , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model ( volvo ) , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.fullname ( Volvo ) , car_makers.maker ( volvo ) , car_makers.id , car_makers.country , car_makers.*
natsql:
select _ from _ where _ order by _ asc limit _
natsql and SQL generation:
SELECT cylinders FROM cars_data WHERE accelerate = (SELECT MIN(accelerate) FROM cars_data WHERE id = (SELECT MakeId FROM car_names WHERE model = 'volvo'))
natsql:
SELECT cylinders FROM cars_data WHERE accelerate = (SELECT MIN(accelerate) FROM cars_data WHERE id = (SELECT MakeId FROM car_names WHERE model = 'volvo'))
SQL:
SELECT cylinders FROM cars_data WHERE accelerate = (SELECT MIN(accelerate) FROM cars_data WHERE id = (SELECT MakeId FROM car_names WHERE model = 'volvo'))
self correction:
SELECT Cylinders FROM cars_data WHERE Accelerate = (   SELECT MIN(Accelerate)   FROM cars_data   WHERE Id = (     SELECT MakeId     FROM car_names     WHERE Model = 'volvo'   ) )

index is 158
SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
For a volvo model, how many cylinders does the version with least accelerate have?
schema_links:
For a volvo model, how many cylinders does the version with least accelerate have? | cars_data : cars_data.accelerate , cars_data.cylinders , cars_data.year , cars_data.id , cars_data.horsepower , cars_data.* | model_list : model_list.model ( volvo ) , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.model ( volvo ) , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.fullname ( Volvo ) , car_makers.maker ( volvo ) , car_makers.id , car_makers.country , car_makers.*
natsql:
select _ from _ where _ order by _ asc limit _
natsql and SQL generation:
SELECT cylinders FROM cars_data JOIN model_list ON cars_data.id = model_list.modelid JOIN car_names ON model_list.model = car_names.model JOIN car_makers ON car_names.makeid = car_makers.id WHERE car_makers.maker = 'volvo' ORDER BY accelerate ASC LIMIT 1
natsql:
SELECT cylinders FROM cars_data JOIN model_list ON cars_data.id = model_list.modelid JOIN car_names ON model_list.model = car_names.model JOIN car_makers ON car_names.makeid = car_makers.id WHERE car_makers.maker = 'volvo' ORDER BY accelerate ASC LIMIT 1
SQL:
SELECT cylinders FROM cars_data JOIN model_list ON cars_data.id = model_list.modelid JOIN car_names ON model_list.model = car_names.model JOIN car_makers ON car_names.makeid = car_makers.id WHERE car_makers.maker = 'volvo' ORDER BY accelerate ASC LIMIT 1
self correction:
SELECT cylinders FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON car_names.makeid = car_makers.id WHERE car_makers.maker = 'volvo' ORDER BY cars_data.accelerate ASC LIMIT 1

index is 159
SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );
How many cars have a larger accelerate than the car with the largest horsepower?
schema_links:
How many cars have a larger accelerate than the car with the largest horsepower? | cars_data : cars_data.accelerate , cars_data.horsepower , cars_data.id , cars_data.weight , cars_data.cylinders , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql:
select count ( _ ) from _ where @.@ > _ order by _ desc limit _
natsql and SQL generation:
SELECT count(*) FROM cars_data WHERE accelerate > (SELECT max(horsepower) FROM cars_data)
natsql:
SELECT count(*) FROM cars_data WHERE accelerate > (SELECT max(horsepower) FROM cars_data)
SQL:
SELECT count(*) FROM cars_data WHERE accelerate > (SELECT max(horsepower) FROM cars_data)
self correction:
SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)

index is 160
SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );
What is the number of cars with a greater accelerate than the one with the most horsepower?
schema_links:
What is the number of cars with a greater accelerate than the one with the most horsepower? | cars_data : cars_data.horsepower , cars_data.accelerate , cars_data.id , cars_data.weight , cars_data.cylinders , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql:
select count ( _ ) from _ where @.@ > _ order by _ desc limit _
natsql and SQL generation:
SELECT count(*) FROM cars_data WHERE accelerate > (SELECT max(horsepower) FROM cars_data)
natsql:
SELECT count(*) FROM cars_data WHERE accelerate > (SELECT max(horsepower) FROM cars_data)
SQL:
SELECT count(*) FROM cars_data WHERE accelerate > (SELECT max(horsepower) FROM cars_data)
self correction:
SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)

index is 161
select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2
How many countries has more than 2 car makers ?
schema_links:
How many countries has more than 2 car makers ? | countries : countries.countryid , countries.countryname , countries.continent , countries.* | car_makers : car_makers.id , car_makers.country , car_makers.maker , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql:
select count ( _ ) from _ where count ( _ ) > _
natsql and SQL generation:

natsql:

SQL:

self correction:
SELECT COUNT(DISTINCT countries.CountryId) AS CountryCount FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.CountryId HAVING COUNT(DISTINCT car_makers.Id) > 2;

index is 162
select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2
What is the number of countries with more than 2 car makers ?
schema_links:
What is the number of countries with more than 2 car makers ? | countries : countries.countryid , countries.countryname , countries.continent , countries.* | car_makers : car_makers.id , car_makers.country , car_makers.maker , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql:
select count ( _ ) from _ where count ( _ ) > _
natsql and SQL generation:
SELECT count(*) FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING count(*) > 2)
natsql:
SELECT count(*) FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING count(*) > 2)
SQL:
SELECT count(*) FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING count(*) > 2)
self correction:
SELECT count(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING count(DISTINCT car_makers.Id) > 2

index is 163
SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;
How many cars has over 6 cylinders?
schema_links:
How many cars has over 6 cylinders? | cars_data : cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM cars_data WHERE cylinders > 6
natsql:
SELECT count(*) FROM cars_data WHERE cylinders > 6
SQL:
SELECT count(*) FROM cars_data WHERE cylinders > 6
self correction:
SELECT count(*) FROM cars_data WHERE Cylinders > 6

index is 164
SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;
What is the number of carsw ith over 6 cylinders?
schema_links:
What is the number of carsw ith over 6 cylinders? | cars_data : cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM cars_data WHERE cylinders > 6
natsql:
SELECT count(*) FROM cars_data WHERE cylinders > 6
SQL:
SELECT count(*) FROM cars_data WHERE cylinders > 6
self correction:
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6

index is 165
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;
For the cars with 4 cylinders, which model has the largest horsepower?
schema_links:
For the cars with 4 cylinders, which model has the largest horsepower? | cars_data : cars_data.horsepower , cars_data.cylinders , cars_data.id , cars_data.weight , cars_data.accelerate , cars_data.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.*
natsql:
select _ from _ where _ order by _ desc limit _
natsql and SQL generation:
SELECT T3.model
FROM cars_data AS T1
JOIN car_names AS T2 ON T1.id = T2.makeid
JOIN model_list AS T3 ON T2.model = T3.model
WHERE T1.cylinders = 4
ORDER BY T1.horsepower DESC
LIMIT 1
natsql:
SELECT T3.model
FROM cars_data AS T1
JOIN car_names AS T2 ON T1.id = T2.makeid
JOIN model_list AS T3 ON T2.model = T3.model
WHERE T1.cylinders = 4
ORDER BY T1.horsepower DESC
LIMIT 1
SQL:
SELECT T3.model
FROM cars_data AS T1
JOIN car_names AS T2 ON T1.id = T2.makeid
JOIN model_list AS T3 ON T2.model = T3.model
WHERE T1.cylinders = 4
ORDER BY T1.horsepower DESC
LIMIT 1
self correction:
SELECT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model WHERE T1.Cylinders = 4 GROUP BY T3.Model ORDER BY T1.Horsepower DESC LIMIT 1

index is 166
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;
For all of the 4 cylinder cars, which model has the most horsepower?
schema_links:
For all of the 4 cylinder cars, which model has the most horsepower? | cars_data : cars_data.horsepower , cars_data.cylinders , cars_data.id , cars_data.weight , cars_data.accelerate , cars_data.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.*
natsql:
select _ from _ where _ order by _ desc limit _
natsql and SQL generation:
SELECT T3.model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.id = T2.makeid JOIN model_list AS T3 ON T2.model = T3.model JOIN car_makers AS T4 ON T3.maker = T4.id WHERE T1.cylinders = 4 ORDER BY T1.horsepower DESC LIMIT 1
natsql:
SELECT T3.model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.id = T2.makeid JOIN model_list AS T3 ON T2.model = T3.model JOIN car_makers AS T4 ON T3.maker = T4.id WHERE T1.cylinders = 4 ORDER BY T1.horsepower DESC LIMIT 1
SQL:
SELECT T3.model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.id = T2.makeid JOIN model_list AS T3 ON T2.model = T3.model JOIN car_makers AS T4 ON T3.maker = T4.id WHERE T1.cylinders = 4 ORDER BY T1.horsepower DESC LIMIT 1
self correction:
SELECT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T1.Cylinders = 4 GROUP BY T3.Model ORDER BY T1.Horsepower DESC LIMIT 1

index is 167
SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;
Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.
schema_links:
Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name. | car_names : car_names.make , car_names.makeid , car_names.model , car_names.* | cars_data : cars_data.horsepower , cars_data.cylinders , cars_data.id , cars_data.weight , cars_data.year , cars_data.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.*
natsql:
select _ from _ where _ and @.@ > min ( _ )
natsql and SQL generation:
SELECT car_names.makeid, car_names.make 
FROM car_names 
JOIN cars_data ON car_names.makeid = cars_data.id 
WHERE cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data) 
AND cars_data.cylinders <= 3
natsql:
SELECT car_names.makeid, car_names.make 
FROM car_names 
JOIN cars_data ON car_names.makeid = cars_data.id 
WHERE cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data) 
AND cars_data.cylinders <= 3
SQL:
SELECT car_names.makeid, car_names.make 
FROM car_names 
JOIN cars_data ON car_names.makeid = cars_data.id 
WHERE cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data) 
AND cars_data.cylinders <= 3
self correction:
SELECT car_names.makeid, car_names.make  FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data)  AND cars_data.cylinders <= 3

index is 168
select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;
Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?
schema_links:
Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ? | car_names : car_names.make , car_names.makeid , car_names.model , car_names.* | cars_data : cars_data.horsepower , cars_data.cylinders , cars_data.id , cars_data.weight , cars_data.mpg , cars_data.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.*
natsql:
select _ from _ where _ and @.@ > min ( _ )
natsql and SQL generation:
SELECT car_names.makeid, car_names.make FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.cylinders < 4 AND cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data)
natsql:
SELECT car_names.makeid, car_names.make FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.cylinders < 4 AND cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data)
SQL:
SELECT car_names.makeid, car_names.make FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.cylinders < 4 AND cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data)
self correction:
SELECT car_names.MakeId, car_names.Make  FROM car_names  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE cars_data.Cylinders < 4  AND cars_data.Horsepower > (   SELECT MIN(Horsepower)    FROM cars_data )

index is 169
select max(mpg) from cars_data where cylinders  =  8 or year  <  1980
What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?
schema_links:
What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ? | cars_data : cars_data.mpg , cars_data.year , cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql:
select max ( _ ) from _ where _
natsql and SQL generation:
SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980
natsql:
SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980
SQL:
SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980
self correction:
SELECT MAX(MPG) AS "Maximum MPG" FROM cars_data WHERE Cylinders = 8 AND Year < 1980

index is 170
select max(mpg) from cars_data where cylinders  =  8 or year  <  1980
What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?
schema_links:
What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ? | cars_data : cars_data.mpg , cars_data.cylinders , cars_data.year , cars_data.id , cars_data.horsepower , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql:
select max ( _ ) from _ where _
natsql and SQL generation:
SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980
natsql:
SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980
SQL:
SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980
self correction:
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980

index is 171
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';
Which models are lighter than 3500 but not built by the 'Ford Motor Company'?
schema_links:
Which models are lighter than 3500 but not built by the 'Ford Motor Company'? | car_makers : car_makers.fullname ( Ford Motor Company ) , car_makers.maker ( ford ) , car_makers.country , car_makers.id , car_makers.* | model_list : model_list.model ( ford ) , model_list.modelid , model_list.maker , model_list.* | cars_data : cars_data.weight , cars_data.horsepower , cars_data.id , cars_data.cylinders , cars_data.accelerate , cars_data.* | car_names : car_names.model ( ford ) , car_names.make , car_names.makeid , car_names.*
natsql:
select distinct _ from _ where _
natsql and SQL generation:
SELECT DISTINCT model FROM cars_data WHERE weight < 3500 AND model NOT IN (SELECT model FROM car_names WHERE make = 'Ford Motor Company')
natsql:
SELECT DISTINCT model FROM cars_data WHERE weight < 3500 AND model NOT IN (SELECT model FROM car_names WHERE make = 'Ford Motor Company')
SQL:
SELECT DISTINCT model FROM cars_data WHERE weight < 3500 AND model NOT IN (SELECT model FROM car_names WHERE make = 'Ford Motor Company')
self correction:
SELECT DISTINCT model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.ModelId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Weight < 3500 AND car_makers.FullName != 'Ford Motor Company'

index is 172
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';
What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?
schema_links:
What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company? | car_makers : car_makers.fullname ( Ford Motor Company ) , car_makers.maker ( ford ) , car_makers.country , car_makers.id , car_makers.* | model_list : model_list.model ( ford ) , model_list.modelid , model_list.maker , model_list.* | cars_data : cars_data.weight , cars_data.cylinders , cars_data.horsepower , cars_data.id , cars_data.accelerate , cars_data.* | car_names : car_names.model ( ford ) , car_names.make , car_names.makeid , car_names.*
natsql:
select distinct _ from _ where _
natsql and SQL generation:
SELECT DISTINCT model FROM car_names 
WHERE model NOT IN 
(SELECT model FROM model_list WHERE maker = 'Ford Motor Company')
AND id IN 
(SELECT id FROM cars_data WHERE weight < 3500)
natsql:
SELECT DISTINCT model FROM car_names 
WHERE model NOT IN 
(SELECT model FROM model_list WHERE maker = 'Ford Motor Company')
AND id IN 
(SELECT id FROM cars_data WHERE weight < 3500)
SQL:
SELECT DISTINCT model FROM car_names 
WHERE model NOT IN 
(SELECT model FROM model_list WHERE maker = 'Ford Motor Company')
AND id IN 
(SELECT id FROM cars_data WHERE weight < 3500)
self correction:
SELECT DISTINCT model FROM car_names JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_makers.maker != 'Ford Motor Company' AND cars_data.weight < 3500

index is 173
SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;
What are the name of the countries where there is not a single car maker?
schema_links:
What are the name of the countries where there is not a single car maker? | countries : countries.countryname , countries.countryid , countries.continent , countries.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql:
select _ from _ where except_ @.@ is _
natsql and SQL generation:
SELECT countryname FROM countries WHERE countryid NOT IN (SELECT DISTINCT country FROM car_makers)
natsql:
SELECT countryname FROM countries WHERE countryid NOT IN (SELECT DISTINCT country FROM car_makers)
SQL:
SELECT countryname FROM countries WHERE countryid NOT IN (SELECT DISTINCT country FROM car_makers)
self correction:
SELECT countryname FROM countries WHERE countryid NOT IN (   SELECT DISTINCT country   FROM car_makers )

index is 174
SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;
What are the names of the countries with no car makers?
schema_links:
What are the names of the countries with no car makers? | countries : countries.countryname , countries.countryid , countries.continent , countries.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql:
select _ from _ where except_ @.@ is _
natsql and SQL generation:
SELECT countryname FROM countries WHERE CountryId NOT IN (SELECT DISTINCT Country FROM car_makers)
natsql:
SELECT countryname FROM countries WHERE CountryId NOT IN (SELECT DISTINCT Country FROM car_makers)
SQL:
SELECT countryname FROM countries WHERE CountryId NOT IN (SELECT DISTINCT Country FROM car_makers)
self correction:
SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT DISTINCT Country FROM car_makers)

index is 175
select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;
Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .
schema_links:
Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker . | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql:
select _ from _ where count ( _ ) >= _ and count ( _ ) > _ group by _
natsql and SQL generation:
SELECT id, maker FROM car_makers 
WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(DISTINCT modelid) >= 2) 
AND id IN (SELECT maker FROM car_names GROUP BY maker HAVING COUNT(DISTINCT makeid) > 3)
natsql:
SELECT id, maker FROM car_makers 
WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(DISTINCT modelid) >= 2) 
AND id IN (SELECT maker FROM car_names GROUP BY maker HAVING COUNT(DISTINCT makeid) > 3)
SQL:
SELECT id, maker FROM car_makers 
WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING COUNT(DISTINCT modelid) >= 2) 
AND id IN (SELECT maker FROM car_names GROUP BY maker HAVING COUNT(DISTINCT makeid) > 3)
self correction:
SELECT id, maker  FROM car_makers  WHERE id IN (     SELECT maker      FROM model_list      GROUP BY maker      HAVING COUNT(DISTINCT modelid) >= 2 )  AND id IN (     SELECT maker      FROM car_names      GROUP BY maker      HAVING COUNT(DISTINCT makeid) > 3 )

index is 176
SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;
What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?
schema_links:
What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars? | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql:
select _ from _ where count ( _ ) >= _ and count ( _ ) > _ group by _
natsql and SQL generation:
SELECT car_makers.id, car_makers.maker
FROM car_makers
JOIN model_list ON car_makers.id = model_list.maker
JOIN car_names ON model_list.modelid = car_names.makeid
JOIN cars_data ON car_names.model = cars_data.id
GROUP BY car_makers.id, car_makers.maker
HAVING COUNT(DISTINCT model_list.model) >= 2 AND COUNT(DISTINCT cars_data.id) > 3
natsql:
SELECT car_makers.id, car_makers.maker
FROM car_makers
JOIN model_list ON car_makers.id = model_list.maker
JOIN car_names ON model_list.modelid = car_names.makeid
JOIN cars_data ON car_names.model = cars_data.id
GROUP BY car_makers.id, car_makers.maker
HAVING COUNT(DISTINCT model_list.model) >= 2 AND COUNT(DISTINCT cars_data.id) > 3
SQL:
SELECT car_makers.id, car_makers.maker
FROM car_makers
JOIN model_list ON car_makers.id = model_list.maker
JOIN car_names ON model_list.modelid = car_names.makeid
JOIN cars_data ON car_names.model = cars_data.id
GROUP BY car_makers.id, car_makers.maker
HAVING COUNT(DISTINCT model_list.model) >= 2 AND COUNT(DISTINCT cars_data.id) > 3
self correction:
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT model_list.ModelId) >= 2 AND COUNT(DISTINCT car_names.Model) > 3

index is 177
SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';
What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?
schema_links:
What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model? | countries : countries.countryname , countries.countryid , countries.continent , countries.* | car_makers : car_makers.fullname ( Fiat ) , car_makers.maker ( fiat ) , car_makers.id , car_makers.country , car_makers.* | model_list : model_list.model ( fiat ) , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model ( fiat ) , car_names.make , car_names.makeid , car_names.*
natsql:
select _ from _ where count ( _ ) > _ or _ group by _
natsql and SQL generation:
SELECT countryid, countryname FROM countries WHERE (SELECT COUNT(DISTINCT maker) FROM car_makers WHERE country = countries.countryid) > 3 OR countryid IN (SELECT country FROM car_makers WHERE maker = 'fiat')
natsql:
SELECT countryid, countryname FROM countries WHERE (SELECT COUNT(DISTINCT maker) FROM car_makers WHERE country = countries.countryid) > 3 OR countryid IN (SELECT country FROM car_makers WHERE maker = 'fiat')
SQL:
SELECT countryid, countryname FROM countries WHERE (SELECT COUNT(DISTINCT maker) FROM car_makers WHERE country = countries.countryid) > 3 OR countryid IN (SELECT country FROM car_makers WHERE maker = 'fiat')
self correction:
SELECT countries.CountryId, countries.CountryName  FROM countries  WHERE (SELECT COUNT(DISTINCT car_makers.Maker)         FROM car_makers         WHERE car_makers.Country = countries.CountryId) > 3     OR countries.CountryId IN (SELECT car_makers.Country                                FROM car_makers                                INNER JOIN model_list ON model_list.Maker = car_makers.Id                                INNER JOIN car_names ON car_names.Model = model_list.ModelId                                WHERE car_names.Make = 'fiat')

index is 178
select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';
What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?
schema_links:
What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ? | countries : countries.countryname , countries.countryid , countries.continent , countries.* | model_list : model_list.model ( fiat ) , model_list.maker , model_list.modelid , model_list.* | car_makers : car_makers.maker ( fiat ) , car_makers.id , car_makers.fullname ( Fiat ) , car_makers.country , car_makers.* | car_names : car_names.model ( fiat ) , car_names.make , car_names.makeid , car_names.*
natsql:
select _ from _ where count ( _ ) > _ or _ group by _
natsql and SQL generation:
SELECT countryid, countryname FROM countries WHERE countryid IN (
  SELECT country FROM car_makers WHERE maker = 'fiat'
) OR countryid IN (
  SELECT country FROM car_makers GROUP BY country HAVING count(*) > 3
)
natsql:
SELECT countryid, countryname FROM countries WHERE countryid IN (
  SELECT country FROM car_makers WHERE maker = 'fiat'
) OR countryid IN (
  SELECT country FROM car_makers GROUP BY country HAVING count(*) > 3
)
SQL:
SELECT countryid, countryname FROM countries WHERE countryid IN (
  SELECT country FROM car_makers WHERE maker = 'fiat'
) OR countryid IN (
  SELECT country FROM car_makers GROUP BY country HAVING count(*) > 3
)
self correction:
SELECT countryid, countryname  FROM countries  WHERE countryid IN (   SELECT country    FROM car_makers    WHERE maker = 'fiat' )  OR countryid IN (   SELECT country    FROM car_makers    GROUP BY country    HAVING count(DISTINCT id) > 3 )

index is 179
SELECT Country FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
Which country does Airline "JetBlue Airways" belong to?
schema_links:
Which country does Airline "JetBlue Airways" belong to? | airlines : airlines.airline ( JetBlue Airways ) , airlines.country , airlines.abbreviation ( JetBlue ) , airlines.uid , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT country FROM airlines WHERE airline = 'JetBlue Airways'
natsql:
SELECT country FROM airlines WHERE airline = 'JetBlue Airways'
SQL:
SELECT country FROM airlines WHERE airline = 'JetBlue Airways'
self correction:
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'

index is 180
SELECT Country FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
What country is Jetblue Airways affiliated with?
schema_links:
What country is Jetblue Airways affiliated with? | airlines : airlines.airline ( JetBlue Airways ) , airlines.country , airlines.abbreviation ( JetBlue ) , airlines.uid , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT country FROM airlines WHERE airline = 'JetBlue Airways'
natsql:
SELECT country FROM airlines WHERE airline = 'JetBlue Airways'
SQL:
SELECT country FROM airlines WHERE airline = 'JetBlue Airways'
self correction:
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'

index is 181
SELECT Abbreviation FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
What is the abbreviation of Airline "JetBlue Airways"?
schema_links:
What is the abbreviation of Airline "JetBlue Airways"? | airlines : airlines.abbreviation ( JetBlue ) , airlines.airline ( JetBlue Airways ) , airlines.country , airlines.uid , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'
natsql:
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'
SQL:
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'
self correction:
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'

index is 182
SELECT Abbreviation FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
Which abbreviation corresponds to Jetblue Airways?
schema_links:
Which abbreviation corresponds to Jetblue Airways? | airlines : airlines.abbreviation ( JetBlue ) , airlines.airline ( JetBlue Airways ) , airlines.country , airlines.uid , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways'
natsql:
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways'
SQL:
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways'
self correction:
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways'

index is 183
SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  "USA"
List all airline names and their abbreviations in "USA".
schema_links:
List all airline names and their abbreviations in "USA". | airlines : airlines.airline , airlines.country ( USA ) , airlines.abbreviation , airlines.uid , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'
natsql:
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'
SQL:
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'
self correction:
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'

index is 184
SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  "USA"
What are the airline names and abbreviations for airlines in the USA?
schema_links:
What are the airline names and abbreviations for airlines in the USA? | airlines : airlines.airline , airlines.country ( USA ) , airlines.abbreviation , airlines.uid , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'
natsql:
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'
SQL:
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'
self correction:
SELECT Airline, Abbreviation  FROM airlines  WHERE Country = 'USA'

index is 185
SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  "Anthony"
List the airport code and name in the city of Anthony.
schema_links:
List the airport code and name in the city of Anthony. | airports : airports.airportname ( Anthony ) , airports.city ( Anthony ) , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT airportcode, airportname FROM airports WHERE city = 'Anthony'
natsql:
SELECT airportcode, airportname FROM airports WHERE city = 'Anthony'
SQL:
SELECT airportcode, airportname FROM airports WHERE city = 'Anthony'
self correction:
SELECT airportcode, airportname  FROM airports  WHERE city = 'Anthony'

index is 186
SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  "Anthony"
Give the airport code and airport name corresonding to the city Anthony.
schema_links:
Give the airport code and airport name corresonding to the city Anthony. | airports : airports.airportname ( Anthony ) , airports.city ( Anthony ) , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT airportcode, airportname FROM airports WHERE city = 'Anthony'
natsql:
SELECT airportcode, airportname FROM airports WHERE city = 'Anthony'
SQL:
SELECT airportcode, airportname FROM airports WHERE city = 'Anthony'
self correction:
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'

index is 187
SELECT count(*) FROM AIRLINES
How many airlines do we have?
schema_links:
How many airlines do we have? | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT COUNT(*) FROM airlines
natsql:
SELECT COUNT(*) FROM airlines
SQL:
SELECT COUNT(*) FROM airlines
self correction:
SELECT COUNT(*) FROM airlines

index is 188
SELECT count(*) FROM AIRLINES
What is the total number of airlines?
schema_links:
What is the total number of airlines? | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT COUNT(*) FROM airlines
natsql:
SELECT COUNT(*) FROM airlines
SQL:
SELECT COUNT(*) FROM airlines
self correction:
SELECT COUNT(*) FROM airlines

index is 189
SELECT count(*) FROM AIRPORTS
How many airports do we have?
schema_links:
How many airports do we have? | airports : airports.airportname , airports.airportcode , airports.country , airports.city , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT COUNT(*) FROM airports
natsql:
SELECT COUNT(*) FROM airports
SQL:
SELECT COUNT(*) FROM airports
self correction:
SELECT COUNT(*) FROM airports

index is 190
SELECT count(*) FROM AIRPORTS
Return the number of  airports.
schema_links:
Return the number of  airports. | airports : airports.airportname , airports.country , airports.city , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT count(*) FROM airports
natsql:
SELECT count(*) FROM airports
SQL:
SELECT count(*) FROM airports
self correction:
SELECT COUNT(*) FROM airports

index is 191
SELECT count(*) FROM FLIGHTS
How many flights do we have?
schema_links:
How many flights do we have? | flights : flights.flightno , flights.airline , flights.destairport , flights.sourceairport , flights.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT count(*) FROM flights
natsql:
SELECT count(*) FROM flights
SQL:
SELECT count(*) FROM flights
self correction:
SELECT COUNT(*) FROM flights

index is 192
SELECT count(*) FROM FLIGHTS
Return the number of flights.
schema_links:
Return the number of flights. | flights : flights.flightno , flights.airline , flights.destairport , flights.sourceairport , flights.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT count(*) FROM flights
natsql:
SELECT count(*) FROM flights
SQL:
SELECT count(*) FROM flights
self correction:
SELECT count(*) AS flight_count FROM flights

index is 193
SELECT Airline FROM AIRLINES WHERE Abbreviation  =  "UAL"
Which airline has abbreviation 'UAL'?
schema_links:
Which airline has abbreviation 'UAL'? | airlines : airlines.abbreviation ( UAL ) , airlines.airline , airlines.country , airlines.uid , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT airline FROM airlines WHERE abbreviation = 'UAL'
natsql:
SELECT airline FROM airlines WHERE abbreviation = 'UAL'
SQL:
SELECT airline FROM airlines WHERE abbreviation = 'UAL'
self correction:
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'

index is 194
SELECT Airline FROM AIRLINES WHERE Abbreviation  =  "UAL"
Give the airline with abbreviation 'UAL'.
schema_links:
Give the airline with abbreviation 'UAL'. | airlines : airlines.abbreviation ( UAL ) , airlines.airline , airlines.country , airlines.uid , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT airline FROM airlines WHERE abbreviation = 'UAL'
natsql:
SELECT airline FROM airlines WHERE abbreviation = 'UAL'
SQL:
SELECT airline FROM airlines WHERE abbreviation = 'UAL'
self correction:
SELECT Abbreviation FROM airlines WHERE Abbreviation = 'UAL'

index is 195
SELECT count(*) FROM AIRLINES WHERE Country  =  "USA"
How many airlines are from USA?
schema_links:
How many airlines are from USA? | airlines : airlines.country ( USA ) , airlines.airline , airlines.uid , airlines.abbreviation , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM airlines WHERE country = 'USA'
natsql:
SELECT count(*) FROM airlines WHERE country = 'USA'
SQL:
SELECT count(*) FROM airlines WHERE country = 'USA'
self correction:
SELECT COUNT(*) FROM airlines WHERE Country = 'USA'

index is 196
SELECT count(*) FROM AIRLINES WHERE Country  =  "USA"
Return the number of airlines in the USA.
schema_links:
Return the number of airlines in the USA. | airlines : airlines.country ( USA ) , airlines.airline , airlines.uid , airlines.abbreviation , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM airlines WHERE country = 'USA'
natsql:
SELECT count(*) FROM airlines WHERE country = 'USA'
SQL:
SELECT count(*) FROM airlines WHERE country = 'USA'
self correction:
SELECT COUNT(*) FROM airlines WHERE Country = 'USA'

index is 197
SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"
Which city and country is the Alton airport at?
schema_links:
Which city and country is the Alton airport at? | airports : airports.city ( Alton ) , airports.country , airports.airportname ( Alton ) , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT city, country FROM airports WHERE airportname = 'Alton'
natsql:
SELECT city, country FROM airports WHERE airportname = 'Alton'
SQL:
SELECT city, country FROM airports WHERE airportname = 'Alton'
self correction:
SELECT City, Country FROM airports WHERE AirportName = 'Alton';

index is 198
SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"
Give the city and country for the Alton airport.
schema_links:
Give the city and country for the Alton airport. | airports : airports.city ( Alton ) , airports.country , airports.airportname ( Alton ) , airports.countryabbrev , airports.airportcode , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT city, country FROM airports WHERE airportname = 'Alton'
natsql:
SELECT city, country FROM airports WHERE airportname = 'Alton'
SQL:
SELECT city, country FROM airports WHERE airportname = 'Alton'
self correction:
SELECT City, Country FROM airports WHERE AirportName = 'Alton';

index is 199
SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  "AKO"
What is the airport name for airport 'AKO'?
schema_links:
What is the airport name for airport 'AKO'? | airports : airports.airportcode ( AKO ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | flights : flights.sourceairport ( AKO ) , flights.destairport ( AKO ) , flights.airline , flights.flightno , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT airportname FROM airports WHERE airportcode = 'AKO'
natsql:
SELECT airportname FROM airports WHERE airportcode = 'AKO'
SQL:
SELECT airportname FROM airports WHERE airportcode = 'AKO'
self correction:
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'

index is 200
SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  "AKO"
Return the name of the airport with code 'AKO'.
schema_links:
Return the name of the airport with code 'AKO'. | airports : airports.airportcode ( AKO ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | flights : flights.sourceairport ( AKO ) , flights.destairport ( AKO ) , flights.airline , flights.flightno , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT airportname FROM airports WHERE airportcode = 'AKO'
natsql:
SELECT airportname FROM airports WHERE airportcode = 'AKO'
SQL:
SELECT airportname FROM airports WHERE airportcode = 'AKO'
self correction:
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'

index is 201
SELECT AirportName FROM AIRPORTS WHERE City = "Aberdeen"
What are airport names at City 'Aberdeen'?
schema_links:
What are airport names at City 'Aberdeen'? | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT AirportName FROM airports WHERE City = 'Aberdeen'
natsql:
SELECT AirportName FROM airports WHERE City = 'Aberdeen'
SQL:
SELECT AirportName FROM airports WHERE City = 'Aberdeen'
self correction:
SELECT AirportName  FROM airports  WHERE City = 'Aberdeen'

index is 202
SELECT AirportName FROM AIRPORTS WHERE City = "Aberdeen"
What are the names of airports in Aberdeen?
schema_links:
What are the names of airports in Aberdeen? | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT airportname FROM airports WHERE city = 'Aberdeen'
natsql:
SELECT airportname FROM airports WHERE city = 'Aberdeen'
SQL:
SELECT airportname FROM airports WHERE city = 'Aberdeen'
self correction:
SELECT AirportName FROM airports WHERE City = 'Aberdeen'

index is 203
SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  "APG"
How many flights depart from 'APG'?
schema_links:
How many flights depart from 'APG'? | flights : flights.sourceairport ( APG ) , flights.destairport ( APG ) , flights.flightno , flights.airline , flights.* | airports : airports.airportcode ( APG ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'
natsql:
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'
SQL:
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'
self correction:
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'

index is 204
SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  "APG"
Count the number of flights departing from 'APG'.
schema_links:
Count the number of flights departing from 'APG'. | flights : flights.sourceairport ( APG ) , flights.destairport ( APG ) , flights.flightno , flights.airline , flights.* | airports : airports.airportcode ( APG ) , airports.city , airports.airportname , airports.country , airports.countryabbrev , airports.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM flights WHERE SourceAirport = 'APG'
natsql:
SELECT count(*) FROM flights WHERE SourceAirport = 'APG'
SQL:
SELECT count(*) FROM flights WHERE SourceAirport = 'APG'
self correction:
SELECT count(*) FROM flights WHERE SourceAirport = 'APG'

index is 205
SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"
How many flights have destination ATO?
schema_links:
How many flights have destination ATO? | flights : flights.destairport ( ATO ) , flights.sourceairport ( ATO ) , flights.airline , flights.flightno , flights.* | airports : airports.airportcode ( ATO ) , airports.city , airports.country , airports.airportname , airports.countryabbrev , airports.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'
natsql:
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'
SQL:
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'
self correction:
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'

index is 206
SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"
Count the number of flights into ATO.
schema_links:
Count the number of flights into ATO. | flights : flights.sourceairport ( ATO ) , flights.destairport ( ATO ) , flights.flightno , flights.airline , flights.* | airports : airports.airportcode ( ATO ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM flights WHERE DestAirport = 'ATO'
natsql:
SELECT count(*) FROM flights WHERE DestAirport = 'ATO'
SQL:
SELECT count(*) FROM flights WHERE DestAirport = 'ATO'
self correction:
SELECT count(*) FROM flights WHERE DestAirport = 'ATO'

index is 207
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
How many flights depart from City Aberdeen?
schema_links:
How many flights depart from City Aberdeen? | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.destairport , flights.flightno , flights.sourceairport , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
natsql:
SELECT count(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
SQL:
SELECT count(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
self correction:
SELECT count(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'

index is 208
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Return the number of flights departing from Aberdeen.
schema_links:
Return the number of flights departing from Aberdeen. | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.flightno , flights.sourceairport , flights.destairport , flights.airline , flights.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM flights WHERE sourceairport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
natsql:
SELECT count(*) FROM flights WHERE sourceairport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
SQL:
SELECT count(*) FROM flights WHERE sourceairport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
self correction:
SELECT count(*)  FROM flights  WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')

index is 209
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
How many flights arriving in Aberdeen city?
schema_links:
How many flights arriving in Aberdeen city? | airports : airports.city ( Aberdeen ) , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev , airports.* | flights : flights.flightno , flights.destairport , flights.sourceairport , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
natsql:
SELECT count(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
SQL:
SELECT count(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
self correction:
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'

index is 210
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Return the number of flights arriving in Aberdeen.
schema_links:
Return the number of flights arriving in Aberdeen. | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.flightno , flights.sourceairport , flights.destairport , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM flights WHERE destairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen')
natsql:
SELECT count(*) FROM flights WHERE destairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen')
SQL:
SELECT count(*) FROM flights WHERE destairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen')
self correction:
SELECT count(*)  FROM flights  WHERE destairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen')

index is 211
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"
How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?
schema_links:
How many flights depart from City 'Aberdeen' and have destination City 'Ashley'? | airports : airports.city ( Aberdeen , Ashley ) , airports.airportname ( Ashley ) , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.destairport , flights.sourceairport , flights.flightno , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley'
natsql:
SELECT count(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley'
SQL:
SELECT count(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley'
self correction:
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN airports AS dest ON flights.DestAirport = dest.AirportCode WHERE airports.City = 'Aberdeen' AND dest.City = 'Ashley'

index is 212
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"
How many flights fly from Aberdeen to Ashley?
schema_links:
How many flights fly from Aberdeen to Ashley? | airports : airports.city ( Aberdeen , Ashley ) , airports.airportname ( Ashley ) , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.destairport , flights.sourceairport , flights.flightno , flights.airline , flights.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM flights WHERE sourceairport = 'Aberdeen' AND destairport = 'Ashley'
natsql:
SELECT count(*) FROM flights WHERE sourceairport = 'Aberdeen' AND destairport = 'Ashley'
SQL:
SELECT count(*) FROM flights WHERE sourceairport = 'Aberdeen' AND destairport = 'Ashley'
self correction:
SELECT count(*) FROM flights  JOIN airports ON flights.sourceairport = airports.AirportCode JOIN airports AS a2 ON flights.destairport = a2.AirportCode WHERE airports.City = 'Aberdeen' AND a2.City = 'Ashley'

index is 213
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"
How many flights does airline 'JetBlue Airways' have?
schema_links:
How many flights does airline 'JetBlue Airways' have? | airlines : airlines.airline ( JetBlue Airways ) , airlines.abbreviation ( JetBlue ) , airlines.uid , airlines.country , airlines.* | flights : flights.airline , flights.flightno , flights.destairport , flights.sourceairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM flights WHERE airline = 'JetBlue Airways'
natsql:
SELECT count(*) FROM flights WHERE airline = 'JetBlue Airways'
SQL:
SELECT count(*) FROM flights WHERE airline = 'JetBlue Airways'
self correction:
SELECT count(*) FROM flights WHERE Airline = 'JetBlue Airways'

index is 214
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"
Give the number of Jetblue Airways flights.
schema_links:
Give the number of Jetblue Airways flights. | airlines : airlines.airline ( JetBlue Airways ) , airlines.abbreviation ( JetBlue ) , airlines.uid , airlines.country , airlines.* | flights : flights.flightno , flights.airline , flights.destairport , flights.sourceairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways'
natsql:
SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways'
SQL:
SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways'
self correction:
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue Airways'

index is 215
SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"
How many 'United Airlines' flights go to Airport 'ASY'?
schema_links:
How many 'United Airlines' flights go to Airport 'ASY'? | airlines : airlines.airline ( United Airlines ) , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.destairport ( ASY ) , flights.sourceairport ( ASY ) , flights.airline , flights.flightno , flights.* | airports : airports.airportcode ( ASY ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND DestAirport = 'ASY'
natsql:
SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND DestAirport = 'ASY'
SQL:
SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND DestAirport = 'ASY'
self correction:
SELECT COUNT(*)  FROM flights  JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = 'United Airlines'  AND flights.DestAirport = 'ASY'

index is 216
SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"
Count the number of United Airlines flights arriving in ASY Airport.
schema_links:
Count the number of United Airlines flights arriving in ASY Airport. | airlines : airlines.airline ( United Airlines ) , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.destairport ( ASY ) , flights.sourceairport ( ASY ) , flights.airline , flights.flightno , flights.* | airports : airports.airportcode ( ASY ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM flights WHERE destairport = 'ASY' AND airline = 'United Airlines'
natsql:
SELECT count(*) FROM flights WHERE destairport = 'ASY' AND airline = 'United Airlines'
SQL:
SELECT count(*) FROM flights WHERE destairport = 'ASY' AND airline = 'United Airlines'
self correction:
SELECT count(*)  FROM flights  WHERE DestAirport = 'ASY'  AND Airline = 'United Airlines'

index is 217
SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"
How many 'United Airlines' flights depart from Airport 'AHD'?
schema_links:
How many 'United Airlines' flights depart from Airport 'AHD'? | airlines : airlines.airline ( United Airlines ) , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | airports : airports.airportcode ( AHD ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | flights : flights.sourceairport ( AHD ) , flights.destairport ( AHD ) , flights.airline , flights.flightno , flights.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM flights WHERE sourceairport = 'AHD' AND airline = 'United Airlines'
natsql:
SELECT count(*) FROM flights WHERE sourceairport = 'AHD' AND airline = 'United Airlines'
SQL:
SELECT count(*) FROM flights WHERE sourceairport = 'AHD' AND airline = 'United Airlines'
self correction:
SELECT count(*)  FROM flights  JOIN airlines ON flights.airline = airlines.uid  JOIN airports ON flights.sourceairport = airports.AirportCode  WHERE airports.AirportCode = 'AHD'    AND airlines.Airline = 'United Airlines'

index is 218
SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"
Return the number of United Airlines flights leaving from AHD Airport.
schema_links:
Return the number of United Airlines flights leaving from AHD Airport. | airlines : airlines.airline ( United Airlines ) , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.sourceairport ( AHD ) , flights.destairport ( AHD ) , flights.airline , flights.flightno , flights.* | airports : airports.airportcode ( AHD ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM flights WHERE airline = 'United Airlines' AND sourceairport = 'AHD'
natsql:
SELECT count(*) FROM flights WHERE airline = 'United Airlines' AND sourceairport = 'AHD'
SQL:
SELECT count(*) FROM flights WHERE airline = 'United Airlines' AND sourceairport = 'AHD'
self correction:
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD'

index is 219
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"
How many United Airlines flights go to City 'Aberdeen'?
schema_links:
How many United Airlines flights go to City 'Aberdeen'? | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | airlines : airlines.airline ( United Airlines ) , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.destairport , flights.airline , flights.flightno , flights.sourceairport , flights.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM flights WHERE airline = 'United Airlines' AND destairport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
natsql:
SELECT count(*) FROM flights WHERE airline = 'United Airlines' AND destairport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
SQL:
SELECT count(*) FROM flights WHERE airline = 'United Airlines' AND destairport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
self correction:
SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.Airline JOIN airports ON flights.destairport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen'

index is 220
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"
Count the number of United Airlines flights that arrive in Aberdeen.
schema_links:
Count the number of United Airlines flights that arrive in Aberdeen. | airlines : airlines.airline ( United Airlines ) , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.sourceairport , flights.destairport , flights.flightno , flights.airline , flights.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'Aberdeen'
natsql:
SELECT count(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'Aberdeen'
SQL:
SELECT count(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'Aberdeen'
self correction:
SELECT count(*) FROM flights JOIN airlines ON flights.airline = airlines.Abbreviation JOIN airports ON flights.destairport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen';

index is 221
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
Which city has most number of arriving flights?
schema_links:
Which city has most number of arriving flights? | airports : airports.city , airports.airportname , airports.country , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.sourceairport , flights.destairport , flights.flightno , flights.airline , flights.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT city FROM airports GROUP BY city ORDER BY count(*) DESC LIMIT 1
natsql:
SELECT city FROM airports GROUP BY city ORDER BY count(*) DESC LIMIT 1
SQL:
SELECT city FROM airports GROUP BY city ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT airports.City FROM airports JOIN flights ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1

index is 222
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
Which city has the most frequent destination airport?
schema_links:
Which city has the most frequent destination airport? | flights : flights.destairport , flights.flightno , flights.airline , flights.sourceairport , flights.* | airports : airports.city , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT city FROM airports GROUP BY city ORDER BY COUNT(DestAirport) DESC LIMIT 1
natsql:
SELECT city FROM airports GROUP BY city ORDER BY COUNT(DestAirport) DESC LIMIT 1
SQL:
SELECT city FROM airports GROUP BY city ORDER BY COUNT(DestAirport) DESC LIMIT 1
self correction:
SELECT airports.City  FROM airports  INNER JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.City  ORDER BY COUNT(flights.DestAirport) DESC  LIMIT 1

index is 223
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
Which city has most number of departing flights?
schema_links:
Which city has most number of departing flights? | airports : airports.city , airports.airportname , airports.country , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.destairport , flights.flightno , flights.sourceairport , flights.airline , flights.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT city FROM airports GROUP BY city ORDER BY COUNT(*) DESC LIMIT 1
natsql:
SELECT city FROM airports GROUP BY city ORDER BY COUNT(*) DESC LIMIT 1
SQL:
SELECT city FROM airports GROUP BY city ORDER BY COUNT(*) DESC LIMIT 1
self correction:
SELECT airports.City  FROM airports  JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City  ORDER BY COUNT(*) DESC  LIMIT 1

index is 224
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
Which city is the most frequent source airport?
schema_links:
Which city is the most frequent source airport? | airports : airports.city , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.sourceairport , flights.flightno , flights.airline , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql:
select _ from _ where @.@ join _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT city 
FROM airports 
JOIN flights ON airports.airportcode = flights.sourceairport 
GROUP BY city 
ORDER BY COUNT(*) DESC 
LIMIT 1
natsql:
SELECT city 
FROM airports 
JOIN flights ON airports.airportcode = flights.sourceairport 
GROUP BY city 
ORDER BY COUNT(*) DESC 
LIMIT 1
SQL:
SELECT city 
FROM airports 
JOIN flights ON airports.airportcode = flights.sourceairport 
GROUP BY city 
ORDER BY COUNT(*) DESC 
LIMIT 1
self correction:
SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1

index is 225
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
What is the code of airport that has the highest number of flights?
schema_links:
What is the code of airport that has the highest number of flights? | flights : flights.sourceairport , flights.flightno , flights.destairport , flights.airline , flights.* | airports : airports.airportcode , airports.airportname , airports.country , airports.city , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT AirportCode FROM airports GROUP BY AirportCode ORDER BY count(*) DESC LIMIT 1
natsql:
SELECT AirportCode FROM airports GROUP BY AirportCode ORDER BY count(*) DESC LIMIT 1
SQL:
SELECT AirportCode FROM airports GROUP BY AirportCode ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT AirportCode FROM airports GROUP BY AirportCode ORDER BY COUNT(*) DESC LIMIT 1

index is 226
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
What is the airport code of the airport with the most flights?
schema_links:
What is the airport code of the airport with the most flights? | flights : flights.sourceairport , flights.destairport , flights.flightno , flights.airline , flights.* | airports : airports.airportcode , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT airportcode FROM flights GROUP BY destairport ORDER BY count(*) DESC LIMIT 1
natsql:
SELECT airportcode FROM flights GROUP BY destairport ORDER BY count(*) DESC LIMIT 1
SQL:
SELECT airportcode FROM flights GROUP BY destairport ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT airports.AirportCode  FROM flights  GROUP BY flights.DestAirport  ORDER BY COUNT(*) DESC  LIMIT 1

index is 227
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
What is the code of airport that has fewest number of flights?
schema_links:
What is the code of airport that has fewest number of flights? | flights : flights.flightno , flights.sourceairport , flights.destairport , flights.airline , flights.* | airports : airports.airportcode , airports.airportname , airports.country , airports.city , airports.countryabbrev , airports.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql:
select _ from _ group by _ order by count ( _ ) asc limit _
natsql and SQL generation:
SELECT AirportCode FROM flights GROUP BY SourceAirport, DestAirport ORDER BY count(*) ASC LIMIT 1
natsql:
SELECT AirportCode FROM flights GROUP BY SourceAirport, DestAirport ORDER BY count(*) ASC LIMIT 1
SQL:
SELECT AirportCode FROM flights GROUP BY SourceAirport, DestAirport ORDER BY count(*) ASC LIMIT 1
self correction:
SELECT airports.AirportCode FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.AirportCode ORDER BY count(*) ASC LIMIT 1

index is 228
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
Give the code of the airport with the least flights.
schema_links:
Give the code of the airport with the least flights. | flights : flights.sourceairport , flights.destairport , flights.flightno , flights.airline , flights.* | airports : airports.airportcode , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql:
select _ from _ group by _ order by count ( _ ) asc limit _
natsql and SQL generation:
SELECT AirportCode FROM flights GROUP BY SourceAirport, DestAirport ORDER BY count(*) ASC LIMIT 1
natsql:
SELECT AirportCode FROM flights GROUP BY SourceAirport, DestAirport ORDER BY count(*) ASC LIMIT 1
SQL:
SELECT AirportCode FROM flights GROUP BY SourceAirport, DestAirport ORDER BY count(*) ASC LIMIT 1
self correction:
SELECT airports.AirportCode  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  GROUP BY flights.DestAirport  ORDER BY COUNT(*) ASC  LIMIT 1

index is 229
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1
Which airline has most number of flights?
schema_links:
Which airline has most number of flights? | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.airline , flights.flightno , flights.destairport , flights.sourceairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT airline FROM flights GROUP BY airline ORDER BY count(*) DESC LIMIT 1
natsql:
SELECT airline FROM flights GROUP BY airline ORDER BY count(*) DESC LIMIT 1
SQL:
SELECT airline FROM flights GROUP BY airline ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT airline, COUNT(*) AS flight_count FROM flights GROUP BY airline ORDER BY flight_count DESC LIMIT 1

index is 230
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1
What airline serves the most flights?
schema_links:
What airline serves the most flights? | airlines : airlines.airline , airlines.uid , airlines.abbreviation , airlines.country , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.airportname , airports.country , airports.airportcode , airports.countryabbrev , airports.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT airline FROM flights GROUP BY airline ORDER BY count(*) DESC LIMIT 1
natsql:
SELECT airline FROM flights GROUP BY airline ORDER BY count(*) DESC LIMIT 1
SQL:
SELECT airline FROM flights GROUP BY airline ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT airline, COUNT(*) AS flight_count FROM flights GROUP BY airline ORDER BY flight_count DESC LIMIT 1

index is 231
SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1
Find the abbreviation and country of the airline that has fewest number of flights?
schema_links:
Find the abbreviation and country of the airline that has fewest number of flights? | airlines : airlines.abbreviation , airlines.country , airlines.airline , airlines.uid , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql:
select _ from _ group by _ order by count ( _ ) asc limit _
natsql and SQL generation:
SELECT abbreviation, country FROM airlines GROUP BY abbreviation, country ORDER BY count(*) ASC LIMIT 1
natsql:
SELECT abbreviation, country FROM airlines GROUP BY abbreviation, country ORDER BY count(*) ASC LIMIT 1
SQL:
SELECT abbreviation, country FROM airlines GROUP BY abbreviation, country ORDER BY count(*) ASC LIMIT 1
self correction:
SELECT abbreviation, country FROM airlines GROUP BY abbreviation, country ORDER BY count(*) ASC LIMIT 1

index is 232
SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1
What is the abbreviation of the airilne has the fewest flights and what country is it in?
schema_links:
What is the abbreviation of the airilne has the fewest flights and what country is it in? | airlines : airlines.abbreviation , airlines.country , airlines.airline , airlines.uid , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev , airports.*
natsql:
select _ from _ group by _ order by count ( _ ) asc limit _
natsql and SQL generation:
SELECT abbreviation, country FROM airlines GROUP BY abbreviation, country ORDER BY count(*) ASC LIMIT 1
natsql:
SELECT abbreviation, country FROM airlines GROUP BY abbreviation, country ORDER BY count(*) ASC LIMIT 1
SQL:
SELECT abbreviation, country FROM airlines GROUP BY abbreviation, country ORDER BY count(*) ASC LIMIT 1
self correction:
SELECT abbreviation, country FROM airlines GROUP BY abbreviation, country ORDER BY COUNT(*) ASC LIMIT 1

index is 233
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"
What are airlines that have some flight departing from airport 'AHD'?
schema_links:
What are airlines that have some flight departing from airport 'AHD'? | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.sourceairport ( AHD ) , flights.destairport ( AHD ) , flights.airline , flights.flightno , flights.* | airports : airports.airportcode ( AHD ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT DISTINCT airline FROM airlines WHERE EXISTS (SELECT * FROM flights WHERE sourceairport = 'AHD' AND airlines.uid = flights.airline)
natsql:
SELECT DISTINCT airline FROM airlines WHERE EXISTS (SELECT * FROM flights WHERE sourceairport = 'AHD' AND airlines.uid = flights.airline)
SQL:
SELECT DISTINCT airline FROM airlines WHERE EXISTS (SELECT * FROM flights WHERE sourceairport = 'AHD' AND airlines.uid = flights.airline)
self correction:
SELECT DISTINCT Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD'

index is 234
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"
Which airlines have a flight with source airport AHD?
schema_links:
Which airlines have a flight with source airport AHD? | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.sourceairport ( AHD ) , flights.airline , flights.destairport ( AHD ) , flights.flightno , flights.* | airports : airports.airportcode ( AHD ) , airports.city , airports.country , airports.airportname , airports.countryabbrev , airports.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT Airline FROM flights WHERE SourceAirport = 'AHD'
natsql:
SELECT Airline FROM flights WHERE SourceAirport = 'AHD'
SQL:
SELECT Airline FROM flights WHERE SourceAirport = 'AHD'
self correction:
SELECT Airline FROM flights WHERE SourceAirport = 'AHD';

index is 235
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"
What are airlines that have flights arriving at airport 'AHD'?
schema_links:
What are airlines that have flights arriving at airport 'AHD'? | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.sourceairport ( AHD ) , flights.destairport ( AHD ) , flights.airline , flights.flightno , flights.* | airports : airports.airportcode ( AHD ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.airline WHERE flights.destairport = 'AHD'
natsql:
SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.airline WHERE flights.destairport = 'AHD'
SQL:
SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.airline WHERE flights.destairport = 'AHD'
self correction:
SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD'

index is 236
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"
Which airlines have a flight with destination airport AHD?
schema_links:
Which airlines have a flight with destination airport AHD? | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.destairport ( AHD ) , flights.airline , flights.flightno , flights.sourceairport ( AHD ) , flights.* | airports : airports.airportcode ( AHD ) , airports.city , airports.country , airports.airportname , airports.countryabbrev , airports.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT airline FROM flights WHERE destairport = 'AHD'
natsql:
SELECT airline FROM flights WHERE destairport = 'AHD'
SQL:
SELECT airline FROM flights WHERE destairport = 'AHD'
self correction:
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD'

index is 237
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
Find all airlines that have flights from both airports 'APG' and 'CVO'.
schema_links:
Find all airlines that have flights from both airports 'APG' and 'CVO'. | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | airports : airports.airportcode ( APG , CVO ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | flights : flights.sourceairport ( APG , CVO ) , flights.airline , flights.destairport ( APG , CVO ) , flights.flightno , flights.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT DISTINCT A1.airline FROM airlines A1, flights F1, airports AP1, airports AP2, flights F2, airlines A2 WHERE A1.uid = F1.airline AND F1.sourceairport = AP1.airportcode AND AP1.airportcode = 'APG' AND F1.destairport = AP2.airportcode AND AP2.airportcode = 'CVO' AND A2.uid = F2.airline AND F2.sourceairport = AP1.airportcode AND F2.destairport = AP2.airportcode
natsql:
SELECT DISTINCT A1.airline FROM airlines A1, flights F1, airports AP1, airports AP2, flights F2, airlines A2 WHERE A1.uid = F1.airline AND F1.sourceairport = AP1.airportcode AND AP1.airportcode = 'APG' AND F1.destairport = AP2.airportcode AND AP2.airportcode = 'CVO' AND A2.uid = F2.airline AND F2.sourceairport = AP1.airportcode AND F2.destairport = AP2.airportcode
SQL:
SELECT DISTINCT A1.airline FROM airlines A1, flights F1, airports AP1, airports AP2, flights F2, airlines A2 WHERE A1.uid = F1.airline AND F1.sourceairport = AP1.airportcode AND AP1.airportcode = 'APG' AND F1.destairport = AP2.airportcode AND AP2.airportcode = 'CVO' AND A2.uid = F2.airline AND F2.sourceairport = AP1.airportcode AND F2.destairport = AP2.airportcode
self correction:
SELECT DISTINCT A1.Airline FROM airlines A1 JOIN flights F1 ON A1.uid = F1.Airline JOIN airports AP1 ON F1.SourceAirport = AP1.AirportCode JOIN airports AP2 ON F1.DestAirport = AP2.AirportCode WHERE AP1.AirportCode = 'APG' AND AP2.AirportCode = 'CVO'

index is 238
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
Which airlines have departing flights from both APG and CVO airports?
schema_links:
Which airlines have departing flights from both APG and CVO airports? | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.sourceairport ( APG , CVO ) , flights.airline , flights.destairport ( APG , CVO ) , flights.flightno , flights.* | airports : airports.airportcode ( APG , CVO ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT DISTINCT airline FROM airlines WHERE EXISTS (SELECT * FROM flights WHERE airline = airlines.airline AND sourceairport = 'APG') AND EXISTS (SELECT * FROM flights WHERE airline = airlines.airline AND sourceairport = 'CVO')
natsql:
SELECT DISTINCT airline FROM airlines WHERE EXISTS (SELECT * FROM flights WHERE airline = airlines.airline AND sourceairport = 'APG') AND EXISTS (SELECT * FROM flights WHERE airline = airlines.airline AND sourceairport = 'CVO')
SQL:
SELECT DISTINCT airline FROM airlines WHERE EXISTS (SELECT * FROM flights WHERE airline = airlines.airline AND sourceairport = 'APG') AND EXISTS (SELECT * FROM flights WHERE airline = airlines.airline AND sourceairport = 'CVO')
self correction:
SELECT airline FROM airlines WHERE airline IN (     SELECT airline     FROM flights     WHERE sourceairport = 'APG' ) AND airline IN (     SELECT airline     FROM flights     WHERE sourceairport = 'CVO' );

index is 239
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"
Find all airlines that have flights from airport 'CVO' but not from 'APG'.
schema_links:
Find all airlines that have flights from airport 'CVO' but not from 'APG'. | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.sourceairport ( APG , CVO ) , flights.airline , flights.destairport ( APG , CVO ) , flights.flightno , flights.* | airports : airports.airportcode ( APG , CVO ) , airports.airportname , airports.country , airports.city , airports.countryabbrev , airports.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT airline FROM airlines WHERE airline IN (SELECT airline FROM flights WHERE sourceairport = 'CVO') AND airline NOT IN (SELECT airline FROM flights WHERE sourceairport = 'APG')
natsql:
SELECT airline FROM airlines WHERE airline IN (SELECT airline FROM flights WHERE sourceairport = 'CVO') AND airline NOT IN (SELECT airline FROM flights WHERE sourceairport = 'APG')
SQL:
SELECT airline FROM airlines WHERE airline IN (SELECT airline FROM flights WHERE sourceairport = 'CVO') AND airline NOT IN (SELECT airline FROM flights WHERE sourceairport = 'APG')
self correction:
SELECT airline  FROM airlines  WHERE uid IN (SELECT Airline                FROM flights                WHERE SourceAirport = 'CVO')    AND uid NOT IN (SELECT Airline                    FROM flights                    WHERE SourceAirport = 'APG')

index is 240
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"
Which airlines have departures from CVO but not from APG airports?
schema_links:
Which airlines have departures from CVO but not from APG airports? | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | airports : airports.airportcode ( APG , CVO ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | flights : flights.sourceairport ( APG , CVO ) , flights.destairport ( APG , CVO ) , flights.airline , flights.flightno , flights.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT airline FROM airlines WHERE uid IN (SELECT uid FROM flights WHERE SourceAirport = 'CVO') AND uid NOT IN (SELECT uid FROM flights WHERE SourceAirport = 'APG')
natsql:
SELECT airline FROM airlines WHERE uid IN (SELECT uid FROM flights WHERE SourceAirport = 'CVO') AND uid NOT IN (SELECT uid FROM flights WHERE SourceAirport = 'APG')
SQL:
SELECT airline FROM airlines WHERE uid IN (SELECT uid FROM flights WHERE SourceAirport = 'CVO') AND uid NOT IN (SELECT uid FROM flights WHERE SourceAirport = 'APG')
self correction:
SELECT airline  FROM airlines  WHERE uid IN (   SELECT uid    FROM flights    WHERE SourceAirport = 'CVO' )  AND airline NOT IN (   SELECT DISTINCT airline    FROM flights    JOIN airports ON flights.DestAirport = airports.AirportCode    WHERE airports.AirportCode = 'APG' )

index is 241
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10
Find all airlines that have at least 10 flights.
schema_links:
Find all airlines that have at least 10 flights. | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.airline , airlines.uid , airlines.abbreviation , airlines.country , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql:
select _ from _ where count ( _ ) > _ group by _
natsql and SQL generation:
SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) > 10
natsql:
SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) > 10
SQL:
SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) > 10
self correction:
SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10

index is 242
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10
Which airlines have at least 10 flights?
schema_links:
Which airlines have at least 10 flights? | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.airline , airlines.uid , airlines.abbreviation , airlines.country , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql:
select _ from _ where count ( _ ) > _ group by _
natsql and SQL generation:
SELECT airline FROM flights GROUP BY airline HAVING count(*) > 10
natsql:
SELECT airline FROM flights GROUP BY airline HAVING count(*) > 10
SQL:
SELECT airline FROM flights GROUP BY airline HAVING count(*) > 10
self correction:
SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10

index is 243
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200
Find all airlines that have fewer than 200 flights.
schema_links:
Find all airlines that have fewer than 200 flights. | flights : flights.airline , flights.flightno , flights.destairport , flights.sourceairport , flights.* | airlines : airlines.airline , airlines.uid , airlines.abbreviation , airlines.country , airlines.* | airports : airports.city , airports.airportcode , airports.country , airports.airportname , airports.countryabbrev , airports.*
natsql:
select _ from _ where count ( _ ) < _ group by _
natsql and SQL generation:
SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200
natsql:
SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200
SQL:
SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200
self correction:
SELECT airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline GROUP BY airline  HAVING COUNT(*) < 200

index is 244
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200
Which airlines have less than 200 flights?
schema_links:
Which airlines have less than 200 flights? | airlines : airlines.airline , airlines.uid , airlines.abbreviation , airlines.country , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql:
select _ from _ where count ( _ ) < _ group by _
natsql and SQL generation:
SELECT airline FROM flights GROUP BY airline HAVING count(*) < 200
natsql:
SELECT airline FROM flights GROUP BY airline HAVING count(*) < 200
SQL:
SELECT airline FROM flights GROUP BY airline HAVING count(*) < 200
self correction:
SELECT airlines.Airline  FROM airlines  INNER JOIN flights ON airlines.uid = flights.Airline  GROUP BY airlines.Airline  HAVING count(*) < 200

index is 245
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"
What are flight numbers of Airline "United Airlines"?
schema_links:
What are flight numbers of Airline "United Airlines"? | airlines : airlines.airline ( United Airlines ) , airlines.country , airlines.uid , airlines.abbreviation , airlines.* | flights : flights.flightno , flights.airline , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT flightno FROM flights WHERE airline = 'United Airlines'
natsql:
SELECT flightno FROM flights WHERE airline = 'United Airlines'
SQL:
SELECT flightno FROM flights WHERE airline = 'United Airlines'
self correction:
SELECT flights.FlightNo FROM flights  JOIN airlines ON flights.Airline = airlines.Abbreviation  WHERE airlines.Airline = 'United Airlines'

index is 246
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"
Which flight numbers correspond to United Airlines flights?
schema_links:
Which flight numbers correspond to United Airlines flights? | airlines : airlines.airline ( United Airlines ) , airlines.country , airlines.uid , airlines.abbreviation , airlines.* | flights : flights.flightno , flights.airline , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT flightno FROM flights WHERE airline = 'United Airlines'
natsql:
SELECT flightno FROM flights WHERE airline = 'United Airlines'
SQL:
SELECT flightno FROM flights WHERE airline = 'United Airlines'
self correction:
SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = 'United Airlines'

index is 247
SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"
What are flight numbers of flights departing from Airport "APG"?
schema_links:
What are flight numbers of flights departing from Airport "APG"? | flights : flights.flightno , flights.sourceairport ( APG ) , flights.destairport ( APG ) , flights.airline , flights.* | airports : airports.airportcode ( APG ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT flightno FROM flights WHERE sourceairport = 'APG'
natsql:
SELECT flightno FROM flights WHERE sourceairport = 'APG'
SQL:
SELECT flightno FROM flights WHERE sourceairport = 'APG'
self correction:
SELECT flights.FlightNo  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.AirportCode = 'APG'

index is 248
SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"
Give the flight numbers of flights leaving from APG.
schema_links:
Give the flight numbers of flights leaving from APG. | flights : flights.flightno , flights.sourceairport ( APG ) , flights.destairport ( APG ) , flights.airline , flights.* | airports : airports.airportcode ( APG ) , airports.city , airports.country , airports.airportname , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT flightno FROM flights WHERE sourceairport = 'APG'
natsql:
SELECT flightno FROM flights WHERE sourceairport = 'APG'
SQL:
SELECT flightno FROM flights WHERE sourceairport = 'APG'
self correction:
SELECT flights.FlightNo  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.AirportCode = 'APG'

index is 249
SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"
What are flight numbers of flights arriving at Airport "APG"?
schema_links:
What are flight numbers of flights arriving at Airport "APG"? | flights : flights.flightno , flights.destairport ( APG ) , flights.sourceairport ( APG ) , flights.airline , flights.* | airports : airports.airportcode ( APG ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT flightno FROM flights WHERE destairport = 'APG'
natsql:
SELECT flightno FROM flights WHERE destairport = 'APG'
SQL:
SELECT flightno FROM flights WHERE destairport = 'APG'
self correction:
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG'

index is 250
SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"
Give the flight numbers of flights landing at APG.
schema_links:
Give the flight numbers of flights landing at APG. | flights : flights.flightno , flights.sourceairport ( APG ) , flights.destairport ( APG ) , flights.airline , flights.* | airports : airports.airportcode ( APG ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT flightno FROM flights WHERE destairport = 'APG'
natsql:
SELECT flightno FROM flights WHERE destairport = 'APG'
SQL:
SELECT flightno FROM flights WHERE destairport = 'APG'
self correction:
SELECT FlightNo  FROM flights  WHERE DestAirport = 'APG'

index is 251
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
What are flight numbers of flights departing from City "Aberdeen "?
schema_links:
What are flight numbers of flights departing from City "Aberdeen "? | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.flightno , flights.airline , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT flightno FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen')
natsql:
SELECT flightno FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen')
SQL:
SELECT flightno FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen')
self correction:
SELECT flights.FlightNo  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen'

index is 252
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Give the flight numbers of flights leaving from Aberdeen.
schema_links:
Give the flight numbers of flights leaving from Aberdeen. | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.flightno , flights.sourceairport , flights.destairport , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT flightno FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen')
natsql:
SELECT flightno FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen')
SQL:
SELECT flightno FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen')
self correction:
SELECT flights.FlightNo  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';

index is 253
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
What are flight numbers of flights arriving at City "Aberdeen"?
schema_links:
What are flight numbers of flights arriving at City "Aberdeen"? | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.flightno , flights.destairport , flights.airline , flights.sourceairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT flightno FROM flights WHERE destairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen')
natsql:
SELECT flightno FROM flights WHERE destairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen')
SQL:
SELECT flightno FROM flights WHERE destairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen')
self correction:
SELECT flights.flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'

index is 254
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Give the flight numbers of flights arriving in Aberdeen.
schema_links:
Give the flight numbers of flights arriving in Aberdeen. | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.flightno , flights.sourceairport , flights.destairport , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT flightno FROM flights WHERE destairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen')
natsql:
SELECT flightno FROM flights WHERE destairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen')
SQL:
SELECT flightno FROM flights WHERE destairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen')
self correction:
SELECT flights.FlightNo  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen'

index is 255
SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"
Find the number of flights landing in the city of Aberdeen or Abilene.
schema_links:
Find the number of flights landing in the city of Aberdeen or Abilene. | airports : airports.city ( Aberdeen , Abilene ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.destairport , flights.flightno , flights.sourceairport , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen' OR City = 'Abilene')
natsql:
SELECT count(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen' OR City = 'Abilene')
SQL:
SELECT count(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen' OR City = 'Abilene')
self correction:
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen' OR airports.City = 'Abilene'

index is 256
SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"
How many flights land in Aberdeen or Abilene?
schema_links:
How many flights land in Aberdeen or Abilene? | airports : airports.city ( Aberdeen , Abilene ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.destairport , flights.flightno , flights.airline , flights.sourceairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT COUNT(*) FROM flights WHERE destAirport IN ('Aberdeen', 'Abilene')
natsql:
SELECT COUNT(*) FROM flights WHERE destAirport IN ('Aberdeen', 'Abilene')
SQL:
SELECT COUNT(*) FROM flights WHERE destAirport IN ('Aberdeen', 'Abilene')
self correction:
SELECT COUNT(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City IN ('Aberdeen', 'Abilene'))

index is 257
SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
Find the name of airports which do not have any flight in and out.
schema_links:
Find the name of airports which do not have any flight in and out. | airports : airports.airportname , airports.airportcode , airports.country , airports.city , airports.countryabbrev , airports.* | flights : flights.sourceairport , flights.destairport , flights.flightno , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql:
select _ from _ where @.@ not in _ and @.@ not in _
natsql and SQL generation:
SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights) AND airportcode NOT IN (SELECT destairport FROM flights)
natsql:
SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights) AND airportcode NOT IN (SELECT destairport FROM flights)
SQL:
SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights) AND airportcode NOT IN (SELECT destairport FROM flights)
self correction:
SELECT AirportName  FROM airports  WHERE AirportCode NOT IN (   SELECT SourceAirport    FROM flights )  AND AirportCode NOT IN (   SELECT DestAirport    FROM flights )

index is 258
SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
Which airports do not have departing or arriving flights?
schema_links:
Which airports do not have departing or arriving flights? | airports : airports.airportname , airports.country , airports.airportcode , airports.city , airports.countryabbrev , airports.* | flights : flights.destairport , flights.sourceairport , flights.flightno , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql:
select _ from _ where @.@ not in _ and @.@ not in _
natsql and SQL generation:
SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights)
natsql:
SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights)
SQL:
SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights)
self correction:
SELECT AirportName  FROM airports  LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport WHERE flights.SourceAirport IS NULL AND flights.DestAirport IS NULL

index is 259
SELECT count(*) FROM employee
How many employees are there?
schema_links:
How many employees are there? | employee : employee.employee_id , employee.name , employee.age , employee.city , employee.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT count(*) FROM employee
natsql:
SELECT count(*) FROM employee
SQL:
SELECT count(*) FROM employee
self correction:
SELECT COUNT(*) FROM employee

index is 260
SELECT count(*) FROM employee
Count the number of employees
schema_links:
Count the number of employees | employee : employee.employee_id , employee.name , employee.age , employee.city , employee.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT count(*) FROM employee
natsql:
SELECT count(*) FROM employee
SQL:
SELECT count(*) FROM employee
self correction:
SELECT count(Employee_ID) FROM employee

index is 261
SELECT name FROM employee ORDER BY age
Sort employee names by their age in ascending order.
schema_links:
Sort employee names by their age in ascending order. | employee : employee.name , employee.age , employee.employee_id , employee.city , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql:
select _ from _ order by _ asc
natsql and SQL generation:
SELECT name FROM employee ORDER BY age ASC
natsql:
SELECT name FROM employee ORDER BY age ASC
SQL:
SELECT name FROM employee ORDER BY age ASC
self correction:
SELECT employee.Name  FROM employee  ORDER BY employee.Age ASC

index is 262
SELECT name FROM employee ORDER BY age
List the names of employees and sort in ascending order of age.
schema_links:
List the names of employees and sort in ascending order of age. | employee : employee.name , employee.age , employee.employee_id , employee.city , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql:
select _ from _ order by _ asc
natsql and SQL generation:
SELECT name FROM employee ORDER BY age ASC
natsql:
SELECT name FROM employee ORDER BY age ASC
SQL:
SELECT name FROM employee ORDER BY age ASC
self correction:
SELECT employee.Name FROM employee ORDER BY employee.Age ASC

index is 263
SELECT count(*) ,  city FROM employee GROUP BY city
What is the number of employees from each city?
schema_links:
What is the number of employees from each city? | employee : employee.city , employee.employee_id , employee.name , employee.age , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql:
select count ( _ ) , _ from _ group by _
natsql and SQL generation:
SELECT COUNT(employee_id), city FROM employee GROUP BY city
natsql:
SELECT COUNT(employee_id), city FROM employee GROUP BY city
SQL:
SELECT COUNT(employee_id), city FROM employee GROUP BY city
self correction:
SELECT COUNT(Employee_ID) AS Employee_Count, City FROM employee GROUP BY City

index is 264
SELECT count(*) ,  city FROM employee GROUP BY city
Count the number of employees for each city.
schema_links:
Count the number of employees for each city. | employee : employee.city , employee.employee_id , employee.name , employee.age , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql:
select count ( _ ) , _ from _ group by _
natsql and SQL generation:
SELECT COUNT(employee_id), city FROM employee GROUP BY city
natsql:
SELECT COUNT(employee_id), city FROM employee GROUP BY city
SQL:
SELECT COUNT(employee_id), city FROM employee GROUP BY city
self correction:
SELECT COUNT(Employee_ID), City FROM employee GROUP BY City

index is 265
SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1
Which cities do more than one employee under age 30 come from?
schema_links:
Which cities do more than one employee under age 30 come from? | employee : employee.age , employee.city , employee.employee_id , employee.name , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*
natsql:
select _ from _ where _ and count ( _ ) > _ group by _
natsql and SQL generation:
SELECT city
FROM employee
WHERE age < 30
GROUP BY city
HAVING count(*) > 1
natsql:
SELECT city
FROM employee
WHERE age < 30
GROUP BY city
HAVING count(*) > 1
SQL:
SELECT city
FROM employee
WHERE age < 30
GROUP BY city
HAVING count(*) > 1
self correction:
SELECT employee.city FROM employee WHERE employee.age < 30 GROUP BY employee.city HAVING COUNT(DISTINCT employee.employee_ID) > 1

index is 266
SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1
Find the cities that have more than one employee under age 30.
schema_links:
Find the cities that have more than one employee under age 30. | employee : employee.age , employee.city , employee.employee_id , employee.name , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql:
select _ from _ where _ and count ( _ ) > _ group by _
natsql and SQL generation:
SELECT city
FROM employee
WHERE age < 30
GROUP BY city
HAVING count(*) > 1
natsql:
SELECT city
FROM employee
WHERE age < 30
GROUP BY city
HAVING count(*) > 1
SQL:
SELECT city
FROM employee
WHERE age < 30
GROUP BY city
HAVING count(*) > 1
self correction:
SELECT employee.City FROM employee WHERE employee.Age < 30 GROUP BY employee.City HAVING count(*) > 1

index is 267
SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION
Find the number of shops in each location.
schema_links:
Find the number of shops in each location. | shop : shop.location , shop.name , shop.district , shop.shop_id , shop.number_products , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*
natsql:
select count ( _ ) , _ from _ group by _
natsql and SQL generation:
SELECT COUNT(*) ,  location FROM shop GROUP BY location
natsql:
SELECT COUNT(*) ,  location FROM shop GROUP BY location
SQL:
SELECT COUNT(*) ,  location FROM shop GROUP BY location
self correction:
SELECT COUNT(*) AS shop_count, location FROM shop GROUP BY location

index is 268
SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION
How many shops are there in each location?
schema_links:
How many shops are there in each location? | shop : shop.location , shop.shop_id , shop.name , shop.district , shop.number_products , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*
natsql:
select count ( _ ) , _ from _ group by _
natsql and SQL generation:
SELECT COUNT(shop_id), location FROM shop GROUP BY location
natsql:
SELECT COUNT(shop_id), location FROM shop GROUP BY location
SQL:
SELECT COUNT(shop_id), location FROM shop GROUP BY location
self correction:
SELECT COUNT(Shop_ID) AS Shop_Count, Location FROM shop GROUP BY Location

index is 269
SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1
Find the manager name and district of the shop whose number of products is the largest.
schema_links:
Find the manager name and district of the shop whose number of products is the largest. | shop : shop.manager_name , shop.number_products , shop.district , shop.name , shop.shop_id , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT manager_name, district FROM shop ORDER BY number_products DESC LIMIT 1
natsql:
SELECT manager_name, district FROM shop ORDER BY number_products DESC LIMIT 1
SQL:
SELECT manager_name, district FROM shop ORDER BY number_products DESC LIMIT 1
self correction:
SELECT manager_name, district FROM shop ORDER BY number_products DESC LIMIT 1

index is 270
SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1
What are the manager name and district of the shop that sells the largest number of products?
schema_links:
What are the manager name and district of the shop that sells the largest number of products? | shop : shop.number_products , shop.manager_name , shop.district , shop.name , shop.shop_id , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT manager_name, district FROM shop ORDER BY number_products DESC LIMIT 1
natsql:
SELECT manager_name, district FROM shop ORDER BY number_products DESC LIMIT 1
SQL:
SELECT manager_name, district FROM shop ORDER BY number_products DESC LIMIT 1
self correction:
SELECT manager_name, district FROM shop ORDER BY number_products DESC LIMIT 1

index is 271
SELECT min(Number_products) ,  max(Number_products) FROM shop
find the minimum and maximum number of products of all stores.
schema_links:
find the minimum and maximum number of products of all stores. | shop : shop.number_products , shop.shop_id , shop.name , shop.district , shop.location , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql:
select min ( _ ) , max ( _ ) from _
natsql and SQL generation:
SELECT MIN(number_products), MAX(number_products) FROM shop
natsql:
SELECT MIN(number_products), MAX(number_products) FROM shop
SQL:
SELECT MIN(number_products), MAX(number_products) FROM shop
self correction:
SELECT MIN(Number_products), MAX(Number_products) FROM shop

index is 272
SELECT min(Number_products) ,  max(Number_products) FROM shop
What are the minimum and maximum number of products across all the shops?
schema_links:
What are the minimum and maximum number of products across all the shops? | shop : shop.number_products , shop.shop_id , shop.name , shop.location , shop.district , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*
natsql:
select min ( _ ) , max ( _ ) from _
natsql and SQL generation:
SELECT min(number_products), max(number_products) FROM shop
natsql:
SELECT min(number_products), max(number_products) FROM shop
SQL:
SELECT min(number_products), max(number_products) FROM shop
self correction:
SELECT MIN(Number_products), MAX(Number_products) FROM shop

index is 273
SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC
Return the name, location and district of all shops in descending order of number of products.
schema_links:
Return the name, location and district of all shops in descending order of number of products. | shop : shop.number_products , shop.name , shop.location , shop.district , shop.shop_id , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql:
select _ from _ order by _ desc
natsql and SQL generation:
SELECT name, location, district FROM shop ORDER BY number_products DESC
natsql:
SELECT name, location, district FROM shop ORDER BY number_products DESC
SQL:
SELECT name, location, district FROM shop ORDER BY number_products DESC
self correction:
SELECT name, location, district FROM shop ORDER BY number_products DESC

index is 274
SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC
Sort all the shops by number products in descending order, and return the name, location and district of each shop.
schema_links:
Sort all the shops by number products in descending order, and return the name, location and district of each shop. | shop : shop.number_products , shop.name , shop.location , shop.district , shop.shop_id , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql:
select _ from _ order by _ desc
natsql and SQL generation:
SELECT name, location, district FROM shop ORDER BY number_products DESC
natsql:
SELECT name, location, district FROM shop ORDER BY number_products DESC
SQL:
SELECT name, location, district FROM shop ORDER BY number_products DESC
self correction:
SELECT shop.name, shop.location, shop.district FROM shop ORDER BY shop.number_products DESC

index is 275
SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
Find the names of stores whose number products is more than the average number of products.
schema_links:
Find the names of stores whose number products is more than the average number of products. | shop : shop.number_products , shop.name , shop.shop_id , shop.location , shop.manager_name , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql:
select _ from _ where @.@ > avg ( _ )
natsql and SQL generation:
SELECT name FROM shop WHERE number_products > (SELECT avg(number_products) FROM shop)
natsql:
SELECT name FROM shop WHERE number_products > (SELECT avg(number_products) FROM shop)
SQL:
SELECT name FROM shop WHERE number_products > (SELECT avg(number_products) FROM shop)
self correction:
SELECT shop.Name FROM shop WHERE shop.Number_products > (SELECT AVG(Number_products) FROM shop)

index is 276
SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
Which shops' number products is above the average? Give me the shop names.
schema_links:
Which shops' number products is above the average? Give me the shop names. | shop : shop.number_products , shop.name , shop.shop_id , shop.location , shop.district , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*
natsql:
select _ from _ where @.@ > avg ( _ )
natsql and SQL generation:
SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)
natsql:
SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)
SQL:
SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)
self correction:
SELECT name  FROM shop  WHERE Number_products > (     SELECT AVG(Number_products)      FROM shop )

index is 277
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1
find the name of employee who was awarded the most times in the evaluation.
schema_links:
find the name of employee who was awarded the most times in the evaluation. | employee : employee.name , employee.employee_id , employee.age , employee.city , employee.* | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus , evaluation.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT T1.name
FROM employee AS T1
JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID
GROUP BY T1.name
ORDER BY count(*) DESC
LIMIT 1
natsql:
SELECT T1.name
FROM employee AS T1
JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID
GROUP BY T1.name
ORDER BY count(*) DESC
LIMIT 1
SQL:
SELECT T1.name
FROM employee AS T1
JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID
GROUP BY T1.name
ORDER BY count(*) DESC
LIMIT 1
self correction:
SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Employee_ID, T1.Name ORDER BY COUNT(*) DESC LIMIT 1

index is 278
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1
Which employee received the most awards in evaluations? Give me the employee name.
schema_links:
Which employee received the most awards in evaluations? Give me the employee name. | employee : employee.name , employee.employee_id , employee.age , employee.city , employee.* | evaluation : evaluation.year_awarded , evaluation.employee_id , evaluation.bonus , evaluation.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT employee.name FROM evaluation JOIN employee ON evaluation.employee_id = employee.employee_id GROUP BY evaluation.employee_id ORDER BY count(*) DESC LIMIT 1
natsql:
SELECT employee.name FROM evaluation JOIN employee ON evaluation.employee_id = employee.employee_id GROUP BY evaluation.employee_id ORDER BY count(*) DESC LIMIT 1
SQL:
SELECT employee.name FROM evaluation JOIN employee ON evaluation.employee_id = employee.employee_id GROUP BY evaluation.employee_id ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT employee.Name FROM evaluation JOIN employee ON evaluation.Employee_ID = employee.Employee_ID GROUP BY evaluation.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1

index is 279
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1
Find the name of the employee who got the highest one time bonus.
schema_links:
Find the name of the employee who got the highest one time bonus. | employee : employee.name , employee.employee_id , employee.age , employee.city , employee.* | evaluation : evaluation.bonus , evaluation.year_awarded , evaluation.employee_id , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT name FROM employee ORDER BY bonus DESC LIMIT 1
natsql:
SELECT name FROM employee ORDER BY bonus DESC LIMIT 1
SQL:
SELECT name FROM employee ORDER BY bonus DESC LIMIT 1
self correction:
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1

index is 280
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1
Which employee received the biggest bonus? Give me the employee name.
schema_links:
Which employee received the biggest bonus? Give me the employee name. | employee : employee.name , employee.employee_id , employee.age , employee.city , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT name FROM employee ORDER BY bonus DESC LIMIT 1
natsql:
SELECT name FROM employee ORDER BY bonus DESC LIMIT 1
SQL:
SELECT name FROM employee ORDER BY bonus DESC LIMIT 1
self correction:
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1

index is 281
SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
Find the names of employees who never won any award in the evaluation.
schema_links:
Find the names of employees who never won any award in the evaluation. | employee : employee.name , employee.employee_id , employee.age , employee.city , employee.* | evaluation : evaluation.year_awarded , evaluation.bonus , evaluation.employee_id , evaluation.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*
natsql:
select _ from _ where @.@ not in _
natsql and SQL generation:
SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation)
natsql:
SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation)
SQL:
SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation)
self correction:
SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)

index is 282
SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
What are the names of the employees who never received any evaluation?
schema_links:
What are the names of the employees who never received any evaluation? | employee : employee.name , employee.employee_id , employee.age , employee.city , employee.* | evaluation : evaluation.employee_id , evaluation.bonus , evaluation.year_awarded , evaluation.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.*
natsql:
select _ from _ where @.@ not in _
natsql and SQL generation:
SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation)
natsql:
SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation)
SQL:
SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation)
self correction:
SELECT name FROM employee WHERE employee_id NOT IN (   SELECT employee_id FROM evaluation )

index is 283
SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1
What is the name of the shop that is hiring the largest number of employees?
schema_links:
What is the name of the shop that is hiring the largest number of employees? | shop : shop.name , shop.shop_id , shop.manager_name , shop.location , shop.district , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT name FROM shop GROUP BY name ORDER BY COUNT(*) DESC LIMIT 1
natsql:
SELECT name FROM shop GROUP BY name ORDER BY COUNT(*) DESC LIMIT 1
SQL:
SELECT name FROM shop GROUP BY name ORDER BY COUNT(*) DESC LIMIT 1
self correction:
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1

index is 284
SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1
Which shop has the most employees? Give me the shop name.
schema_links:
Which shop has the most employees? Give me the shop name. | shop : shop.name , shop.shop_id , shop.manager_name , shop.location , shop.district , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | employee : employee.employee_id , employee.name , employee.age , employee.city , employee.* | evaluation : evaluation.employee_id , evaluation.bonus , evaluation.year_awarded , evaluation.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT name FROM shop GROUP BY name ORDER BY count(*) DESC LIMIT 1
natsql:
SELECT name FROM shop GROUP BY name ORDER BY count(*) DESC LIMIT 1
SQL:
SELECT name FROM shop GROUP BY name ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1

index is 285
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
Find the name of the shops that do not hire any employee.
schema_links:
Find the name of the shops that do not hire any employee. | shop : shop.name , shop.shop_id , shop.location , shop.manager_name , shop.district , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql:
select _ from _ where @.@ not in _
natsql and SQL generation:
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
natsql:
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
SQL:
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
self correction:
SELECT name  FROM shop  WHERE shop_id NOT IN (SELECT DISTINCT shop_id FROM hiring)

index is 286
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
Which shops run with no employees? Find the shop names
schema_links:
Which shops run with no employees? Find the shop names | shop : shop.name , shop.shop_id , shop.location , shop.district , shop.manager_name , shop.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.* | employee : employee.employee_id , employee.name , employee.age , employee.city , employee.* | evaluation : evaluation.employee_id , evaluation.bonus , evaluation.year_awarded , evaluation.*
natsql:
select _ from _ where @.@ not in _
natsql and SQL generation:
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
natsql:
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
SQL:
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
self correction:
SELECT name FROM shop LEFT JOIN hiring ON shop.shop_id = hiring.shop_id WHERE hiring.shop_id IS NULL

index is 287
SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name
Find the number of employees hired in each shop; show the shop name as well.
schema_links:
Find the number of employees hired in each shop; show the shop name as well. | shop : shop.name , shop.manager_name , shop.shop_id , shop.location , shop.district , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql:
select count ( _ ) , _ from _ group by _
natsql and SQL generation:
SELECT COUNT(employee.Employee_ID), shop.name
FROM employee
JOIN hiring ON employee.Employee_ID = hiring.Employee_ID
JOIN shop ON hiring.Shop_ID = shop.Shop_ID
GROUP BY shop.name
natsql:
SELECT COUNT(employee.Employee_ID), shop.name
FROM employee
JOIN hiring ON employee.Employee_ID = hiring.Employee_ID
JOIN shop ON hiring.Shop_ID = shop.Shop_ID
GROUP BY shop.name
SQL:
SELECT COUNT(employee.Employee_ID), shop.name
FROM employee
JOIN hiring ON employee.Employee_ID = hiring.Employee_ID
JOIN shop ON hiring.Shop_ID = shop.Shop_ID
GROUP BY shop.name
self correction:
SELECT COUNT(employee.Employee_ID) AS num_employees, shop.Name FROM employee JOIN hiring ON employee.Employee_ID = hiring.Employee_ID JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY shop.Name

index is 288
SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name
For each shop, return the number of employees working there and the name of the shop.
schema_links:
For each shop, return the number of employees working there and the name of the shop. | shop : shop.name , shop.shop_id , shop.manager_name , shop.location , shop.district , shop.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.* | employee : employee.employee_id , employee.name , employee.age , employee.city , employee.* | evaluation : evaluation.employee_id , evaluation.bonus , evaluation.year_awarded , evaluation.*
natsql:
select count ( _ ) , _ from _ group by _
natsql and SQL generation:
SELECT COUNT(*) ,  shop.name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID JOIN employee ON hiring.Employee_ID = employee.Employee_ID GROUP BY shop.name
natsql:
SELECT COUNT(*) ,  shop.name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID JOIN employee ON hiring.Employee_ID = employee.Employee_ID GROUP BY shop.name
SQL:
SELECT COUNT(*) ,  shop.name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID JOIN employee ON hiring.Employee_ID = employee.Employee_ID GROUP BY shop.name
self correction:
SELECT COUNT(employee.Employee_ID) AS num_employees, shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID JOIN employee ON hiring.Employee_ID = employee.Employee_ID GROUP BY shop.Name

index is 289
SELECT sum(bonus) FROM evaluation
What is total bonus given in all evaluations?
schema_links:
What is total bonus given in all evaluations? | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*
natsql:
select sum ( _ ) from _
natsql and SQL generation:
SELECT sum(bonus) FROM evaluation
natsql:
SELECT sum(bonus) FROM evaluation
SQL:
SELECT sum(bonus) FROM evaluation
self correction:
SELECT SUM(Bonus) AS TotalBonus FROM evaluation

index is 290
SELECT sum(bonus) FROM evaluation
Find the total amount of bonus given in all the evaluations.
schema_links:
Find the total amount of bonus given in all the evaluations. | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*
natsql:
select sum ( _ ) from _
natsql and SQL generation:
SELECT sum(bonus) FROM evaluation
natsql:
SELECT sum(bonus) FROM evaluation
SQL:
SELECT sum(bonus) FROM evaluation
self correction:
SELECT SUM(Bonus) AS Total_Bonus FROM evaluation

index is 291
SELECT * FROM hiring
Give me all the information about hiring.
schema_links:
Give me all the information about hiring. | hiring : hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.shop_id , hiring.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql:
select _ from _
natsql and SQL generation:
SELECT * FROM hiring
natsql:
SELECT * FROM hiring
SQL:
SELECT * FROM hiring
self correction:
SELECT hiring.* FROM hiring

index is 292
SELECT * FROM hiring
What is all the information about hiring?
schema_links:
What is all the information about hiring? | hiring : hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.shop_id , hiring.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql:
select _ from _
natsql and SQL generation:
SELECT * FROM hiring
natsql:
SELECT * FROM hiring
SQL:
SELECT * FROM hiring
self correction:
SELECT hiring.* FROM hiring

index is 293
SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000
Which district has both stores with less than 3000 products and stores with more than 10000 products?
schema_links:
Which district has both stores with less than 3000 products and stores with more than 10000 products? | shop : shop.number_products , shop.district , shop.name , shop.shop_id , shop.location , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT district FROM shop WHERE number_products < 3000 AND district IN (SELECT district FROM shop WHERE number_products > 10000)
natsql:
SELECT district FROM shop WHERE number_products < 3000 AND district IN (SELECT district FROM shop WHERE number_products > 10000)
SQL:
SELECT district FROM shop WHERE number_products < 3000 AND district IN (SELECT district FROM shop WHERE number_products > 10000)
self correction:
SELECT DISTINCT district  FROM shop  WHERE number_products < 3000  AND district IN (SELECT DISTINCT district FROM shop WHERE number_products > 10000)

index is 294
SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000
Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.
schema_links:
Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products. | shop : shop.number_products , shop.district , shop.name , shop.shop_id , shop.location , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT DISTINCT district
FROM shop
WHERE shop.number_products < 3000 AND shop.district IN (
    SELECT DISTINCT district
    FROM shop
    WHERE shop.number_products > 10000
)
natsql:
SELECT DISTINCT district
FROM shop
WHERE shop.number_products < 3000 AND shop.district IN (
    SELECT DISTINCT district
    FROM shop
    WHERE shop.number_products > 10000
)
SQL:
SELECT DISTINCT district
FROM shop
WHERE shop.number_products < 3000 AND shop.district IN (
    SELECT DISTINCT district
    FROM shop
    WHERE shop.number_products > 10000
)
self correction:
SELECT DISTINCT district FROM shop WHERE shop.number_products < 3000 AND shop.district IN (     SELECT DISTINCT district     FROM shop     WHERE shop.number_products > 10000 ) 

index is 295
SELECT count(DISTINCT LOCATION) FROM shop
How many different store locations are there?
schema_links:
How many different store locations are there? | shop : shop.location , shop.name , shop.shop_id , shop.district , shop.number_products , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql:
select count ( distinct _ ) from _
natsql and SQL generation:
SELECT COUNT(DISTINCT location) FROM shop
natsql:
SELECT COUNT(DISTINCT location) FROM shop
SQL:
SELECT COUNT(DISTINCT location) FROM shop
self correction:
SELECT COUNT(DISTINCT Location) FROM shop

index is 296
SELECT count(DISTINCT LOCATION) FROM shop
Count the number of distinct store locations.
schema_links:
Count the number of distinct store locations. | shop : shop.location , shop.name , shop.shop_id , shop.district , shop.manager_name , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql:
select count ( distinct _ ) from _
natsql and SQL generation:
SELECT COUNT(DISTINCT location) FROM shop
natsql:
SELECT COUNT(DISTINCT location) FROM shop
SQL:
SELECT COUNT(DISTINCT location) FROM shop
self correction:
SELECT COUNT(DISTINCT Location) FROM shop

index is 297
SELECT count(*) FROM Documents
How many documents do we have?
schema_links:
How many documents do we have? | documents : documents.document_name , documents.document_id , documents.document_description , documents.template_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT count(*) FROM documents
natsql:
SELECT count(*) FROM documents
SQL:
SELECT count(*) FROM documents
self correction:
SELECT count(*) FROM Documents

index is 298
SELECT count(*) FROM Documents
Count the number of documents.
schema_links:
Count the number of documents. | documents : documents.document_name , documents.document_id , documents.document_description , documents.template_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT count(*) FROM Documents
natsql:
SELECT count(*) FROM Documents
SQL:
SELECT count(*) FROM Documents
self correction:
SELECT COUNT(*) FROM Documents

index is 299
SELECT document_id ,  document_name ,  document_description FROM Documents
List document IDs, document names, and document descriptions for all documents.
schema_links:
List document IDs, document names, and document descriptions for all documents. | documents : documents.document_name , documents.document_description , documents.document_id , documents.template_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ from _
natsql and SQL generation:
SELECT document_id, document_name, document_description FROM documents
natsql:
SELECT document_id, document_name, document_description FROM documents
SQL:
SELECT document_id, document_name, document_description FROM documents
self correction:
SELECT document_id, document_name, document_description FROM documents

index is 300
SELECT document_id ,  document_name ,  document_description FROM Documents
What are the ids, names, and descriptions for all documents?
schema_links:
What are the ids, names, and descriptions for all documents? | documents : documents.document_name , documents.document_id , documents.document_description , documents.template_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ from _
natsql and SQL generation:
SELECT document_id, document_name, document_description FROM documents
natsql:
SELECT document_id, document_name, document_description FROM documents
SQL:
SELECT document_id, document_name, document_description FROM documents
self correction:
SELECT document_id, document_name, document_description  FROM Documents

index is 301
SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE "%w%"
What is the document name and template id for document with description with the letter 'w' in it?
schema_links:
What is the document name and template id for document with description with the letter 'w' in it? | documents : documents.document_name , documents.document_description , documents.document_id , documents.template_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql:
select _ from _ where _ like _
natsql and SQL generation:
SELECT document_name, template_id FROM Documents WHERE document_description LIKE '%w%'
natsql:
SELECT document_name, template_id FROM Documents WHERE document_description LIKE '%w%'
SQL:
SELECT document_name, template_id FROM Documents WHERE document_description LIKE '%w%'
self correction:
SELECT document_name, template_id FROM Documents WHERE document_description LIKE '%w%';

index is 302
SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE "%w%"
Return the names and template ids for documents that contain the letter w in their description.
schema_links:
Return the names and template ids for documents that contain the letter w in their description. | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ from _ where _ like _
natsql and SQL generation:
SELECT document_name, template_id FROM Documents WHERE Document_Description LIKE '%w%'
natsql:
SELECT document_name, template_id FROM Documents WHERE Document_Description LIKE '%w%'
SQL:
SELECT document_name, template_id FROM Documents WHERE Document_Description LIKE '%w%'
self correction:
SELECT document_name, template_id  FROM Documents  WHERE Document_Description LIKE '%w%'

index is 303
SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  "Robbin CV"
What is the document id, template id and description for document named "Robbin CV"?
schema_links:
What is the document id, template id and description for document named "Robbin CV"? | documents : documents.document_id , documents.document_name ( Robbin CV ) , documents.document_description , documents.template_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_description ( CV ) , ref_template_types.template_type_code ( CV ) , ref_template_types.* | templates : templates.template_type_code ( CV ) , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT document_id, template_id, document_description FROM documents WHERE document_name = "Robbin CV"
natsql:
SELECT document_id, template_id, document_description FROM documents WHERE document_name = "Robbin CV"
SQL:
SELECT document_id, template_id, document_description FROM documents WHERE document_name = "Robbin CV"
self correction:
SELECT documents.Document_ID, documents.Template_ID, documents.Document_Description FROM documents WHERE documents.Document_Name = "Robbin CV"

index is 304
SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  "Robbin CV"
Return the document id, template id, and description for the document with the name Robbin CV.
schema_links:
Return the document id, template id, and description for the document with the name Robbin CV. | documents : documents.document_id , documents.document_name ( Robbin CV ) , documents.document_description , documents.template_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code ( CV ) , ref_template_types.template_type_description ( CV ) , ref_template_types.* | templates : templates.template_type_code ( CV ) , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT document_id, template_id, document_description 
FROM documents 
WHERE document_name = 'Robbin CV'
natsql:
SELECT document_id, template_id, document_description 
FROM documents 
WHERE document_name = 'Robbin CV'
SQL:
SELECT document_id, template_id, document_description 
FROM documents 
WHERE document_name = 'Robbin CV'
self correction:
SELECT documents.Document_ID, documents.Template_ID, documents.Document_Description  FROM documents  WHERE documents.Document_Name = 'Robbin CV'

index is 305
SELECT count(DISTINCT template_id) FROM Documents
How many different templates do all document use?
schema_links:
How many different templates do all document use? | templates : templates.template_id , templates.template_details , templates.template_type_code , templates.version_number , templates.date_effective_to , templates.* | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select count ( distinct _ ) from _
natsql and SQL generation:
SELECT COUNT(DISTINCT template_id) FROM documents
natsql:
SELECT COUNT(DISTINCT template_id) FROM documents
SQL:
SELECT COUNT(DISTINCT template_id) FROM documents
self correction:
SELECT COUNT(DISTINCT Template_ID) FROM Documents

index is 306
SELECT count(DISTINCT template_id) FROM Documents
Count the number of different templates used for documents.
schema_links:
Count the number of different templates used for documents. | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_to , templates.template_details , templates.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select count ( distinct _ ) from _
natsql and SQL generation:
SELECT COUNT(DISTINCT template_id) FROM documents
natsql:
SELECT COUNT(DISTINCT template_id) FROM documents
SQL:
SELECT COUNT(DISTINCT template_id) FROM documents
self correction:
SELECT COUNT(DISTINCT Template_ID) FROM Documents

index is 307
SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'
How many documents are using the template with type code 'PPT'?
schema_links:
How many documents are using the template with type code 'PPT'? | templates : templates.template_type_code ( PPT ) , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code ( PPT ) , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT COUNT(*) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'PPT')
natsql:
SELECT COUNT(*) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'PPT')
SQL:
SELECT COUNT(*) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'PPT')
self correction:
SELECT COUNT(DISTINCT Document_ID) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT')

index is 308
SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'
Count the number of documents that use the PPT template type.
schema_links:
Count the number of documents that use the PPT template type. | templates : templates.template_type_code ( PPT ) , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code ( PPT ) , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'PPT')
natsql:
SELECT count(*) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'PPT')
SQL:
SELECT count(*) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'PPT')
self correction:
SELECT COUNT(*) AS Document_Count FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT')

index is 309
SELECT template_id ,  count(*) FROM Documents GROUP BY template_id
Show all template ids and number of documents using each template.
schema_links:
Show all template ids and number of documents using each template. | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT template_id, COUNT(document_id) FROM documents GROUP BY template_id
natsql:
SELECT template_id, COUNT(document_id) FROM documents GROUP BY template_id
SQL:
SELECT template_id, COUNT(document_id) FROM documents GROUP BY template_id
self correction:
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID

index is 310
SELECT template_id ,  count(*) FROM Documents GROUP BY template_id
What are all different template ids used for documents, and how many times were each of them used?
schema_links:
What are all different template ids used for documents, and how many times were each of them used? | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT template_id, COUNT(template_id) FROM documents GROUP BY template_id
natsql:
SELECT template_id, COUNT(template_id) FROM documents GROUP BY template_id
SQL:
SELECT template_id, COUNT(template_id) FROM documents GROUP BY template_id
self correction:
SELECT Documents.Template_ID, COUNT(Documents.Template_ID)  FROM Documents  GROUP BY Documents.Template_ID

index is 311
SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1
What is the id and type code for the template used by the most documents?
schema_links:
What is the id and type code for the template used by the most documents? | templates : templates.template_type_code , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_to , templates.* | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT template_id, template_type_code 
FROM documents 
GROUP BY template_id, template_type_code 
ORDER BY COUNT(*) DESC 
LIMIT 1
natsql:
SELECT template_id, template_type_code 
FROM documents 
GROUP BY template_id, template_type_code 
ORDER BY COUNT(*) DESC 
LIMIT 1
SQL:
SELECT template_id, template_type_code 
FROM documents 
GROUP BY template_id, template_type_code 
ORDER BY COUNT(*) DESC 
LIMIT 1
self correction:
SELECT Templates.Template_ID, Templates.Template_Type_Code  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  GROUP BY Templates.Template_ID, Templates.Template_Type_Code  ORDER BY COUNT(Documents.Document_ID) DESC  LIMIT 1

index is 312
SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1
Return the id and type code of the template that is used for the greatest number of documents.
schema_links:
Return the id and type code of the template that is used for the greatest number of documents. | templates : templates.template_type_code , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT template_id, template_type_code 
FROM documents 
GROUP BY template_id, template_type_code 
ORDER BY COUNT(*) DESC 
LIMIT 1
natsql:
SELECT template_id, template_type_code 
FROM documents 
GROUP BY template_id, template_type_code 
ORDER BY COUNT(*) DESC 
LIMIT 1
SQL:
SELECT template_id, template_type_code 
FROM documents 
GROUP BY template_id, template_type_code 
ORDER BY COUNT(*) DESC 
LIMIT 1
self correction:
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1

index is 313
SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1
Show ids for all templates that are used by more than one document.
schema_links:
Show ids for all templates that are used by more than one document. | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.template_type_code , templates.date_effective_to , templates.template_details , templates.version_number , templates.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ from _ where count ( _ ) > _ group by _
natsql and SQL generation:
SELECT template_id FROM documents GROUP BY template_id HAVING count(*) > 1
natsql:
SELECT template_id FROM documents GROUP BY template_id HAVING count(*) > 1
SQL:
SELECT template_id FROM documents GROUP BY template_id HAVING count(*) > 1
self correction:
SELECT Templates.Template_ID FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1

index is 314
SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1
What are the template ids of any templates used in more than a single document?
schema_links:
What are the template ids of any templates used in more than a single document? | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | templates : templates.template_id , templates.template_type_code , templates.date_effective_to , templates.version_number , templates.date_effective_from , templates.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ from _ where count ( _ ) > _ group by _
natsql and SQL generation:
SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(*) > 1
natsql:
SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(*) > 1
SQL:
SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(*) > 1
self correction:
SELECT Templates.Template_ID  FROM Templates  JOIN Documents ON Documents.Template_ID = Templates.Template_ID  GROUP BY Templates.Template_ID  HAVING COUNT(DISTINCT Documents.Document_ID) > 1

index is 315
SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
Show ids for all templates not used by any document.
schema_links:
Show ids for all templates not used by any document. | templates : templates.template_id , templates.template_type_code , templates.date_effective_to , templates.template_details , templates.version_number , templates.* | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ from _ where except_ @.@ is _
natsql and SQL generation:
SELECT template_id FROM templates WHERE template_id NOT IN (SELECT template_id FROM documents)
natsql:
SELECT template_id FROM templates WHERE template_id NOT IN (SELECT template_id FROM documents)
SQL:
SELECT template_id FROM templates WHERE template_id NOT IN (SELECT template_id FROM documents)
self correction:
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Template_ID IS NULL;

index is 316
SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
What are the ids for templates that are not used in any documents?
schema_links:
What are the ids for templates that are not used in any documents? | templates : templates.template_id , templates.template_type_code , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ from _ where except_ @.@ is _
natsql and SQL generation:
SELECT template_id FROM templates WHERE template_id NOT IN (SELECT template_id FROM documents)
natsql:
SELECT template_id FROM templates WHERE template_id NOT IN (SELECT template_id FROM documents)
SQL:
SELECT template_id FROM templates WHERE template_id NOT IN (SELECT template_id FROM documents)
self correction:
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Template_ID IS NULL

index is 317
SELECT count(*) FROM Templates
How many templates do we have?
schema_links:
How many templates do we have? | templates : templates.template_details , templates.template_id , templates.template_type_code , templates.version_number , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT COUNT(*) FROM Templates
natsql:
SELECT COUNT(*) FROM Templates
SQL:
SELECT COUNT(*) FROM Templates
self correction:
SELECT COUNT(*) FROM Templates

index is 318
SELECT count(*) FROM Templates
Count the number of templates.
schema_links:
Count the number of templates. | templates : templates.template_details , templates.template_id , templates.template_type_code , templates.version_number , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT COUNT(*) FROM Templates
natsql:
SELECT COUNT(*) FROM Templates
SQL:
SELECT COUNT(*) FROM Templates
self correction:
SELECT COUNT(Template_ID) FROM Templates

index is 319
SELECT template_id ,  version_number ,  template_type_code FROM Templates
Show template ids, version numbers, and template type codes for all templates.
schema_links:
Show template ids, version numbers, and template type codes for all templates. | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ from _
natsql and SQL generation:
SELECT template_id, version_number, template_type_code FROM templates
natsql:
SELECT template_id, version_number, template_type_code FROM templates
SQL:
SELECT template_id, version_number, template_type_code FROM templates
self correction:
SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates

index is 320
SELECT template_id ,  version_number ,  template_type_code FROM Templates
What are the ids, version numbers, and type codes for each template?
schema_links:
What are the ids, version numbers, and type codes for each template? | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ from _
natsql and SQL generation:
SELECT template_id, version_number, template_type_code FROM templates
natsql:
SELECT template_id, version_number, template_type_code FROM templates
SQL:
SELECT template_id, version_number, template_type_code FROM templates
self correction:
SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates

index is 321
SELECT DISTINCT template_type_code FROM Templates
Show all distinct template type codes for all templates.
schema_links:
Show all distinct template type codes for all templates. | templates : templates.template_type_code , templates.template_details , templates.template_id , templates.version_number , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select distinct _ from _
natsql and SQL generation:
SELECT DISTINCT template_type_code FROM templates
natsql:
SELECT DISTINCT template_type_code FROM templates
SQL:
SELECT DISTINCT template_type_code FROM templates
self correction:
SELECT DISTINCT Template_Type_Code FROM Templates

index is 322
SELECT DISTINCT template_type_code FROM Templates
What are the different template type codes?
schema_links:
What are the different template type codes? | templates : templates.template_type_code , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql:
select distinct _ from _
natsql and SQL generation:
SELECT DISTINCT template_type_code FROM ref_template_types
natsql:
SELECT DISTINCT template_type_code FROM ref_template_types
SQL:
SELECT DISTINCT template_type_code FROM ref_template_types
self correction:
SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types

index is 323
SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"
What are the ids of templates with template type code PP or PPT?
schema_links:
What are the ids of templates with template type code PP or PPT? | templates : templates.template_type_code ( PP , PPT ) , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code ( PP , PPT ) , ref_template_types.template_type_description , ref_template_types.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT template_id FROM templates WHERE template_type_code IN ('PP', 'PPT')
natsql:
SELECT template_id FROM templates WHERE template_type_code IN ('PP', 'PPT')
SQL:
SELECT template_id FROM templates WHERE template_type_code IN ('PP', 'PPT')
self correction:
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Templates.Template_Type_Code IN ('PP', 'PPT')

index is 324
SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"
Return the ids of templates that have the code PP or PPT.
schema_links:
Return the ids of templates that have the code PP or PPT. | templates : templates.template_id , templates.template_type_code ( PP , PPT ) , templates.version_number , templates.date_effective_to , templates.template_details , templates.* | ref_template_types : ref_template_types.template_type_code ( PP , PPT ) , ref_template_types.template_type_description , ref_template_types.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT template_id FROM templates WHERE template_type_code IN ('PP', 'PPT')
natsql:
SELECT template_id FROM templates WHERE template_type_code IN ('PP', 'PPT')
SQL:
SELECT template_id FROM templates WHERE template_type_code IN ('PP', 'PPT')
self correction:
SELECT templates.Template_ID FROM templates WHERE templates.Template_Type_Code IN ('PP', 'PPT')

index is 325
SELECT count(*) FROM Templates WHERE template_type_code  =  "CV"
How many templates have template type code CV?
schema_links:
How many templates have template type code CV? | templates : templates.template_type_code ( CV ) , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code ( CV ) , ref_template_types.template_type_description ( CV ) , ref_template_types.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV'
natsql:
SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV'
SQL:
SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV'
self correction:
SELECT COUNT(DISTINCT Template_ID) FROM Templates WHERE Template_Type_Code = 'CV'

index is 326
SELECT count(*) FROM Templates WHERE template_type_code  =  "CV"
Count the number of templates of the type CV.
schema_links:
Count the number of templates of the type CV. | templates : templates.template_type_code ( CV ) , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code ( CV ) , ref_template_types.template_type_description ( CV ) , ref_template_types.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM Templates WHERE Template_Type_Code = 'CV'
natsql:
SELECT count(*) FROM Templates WHERE Template_Type_Code = 'CV'
SQL:
SELECT count(*) FROM Templates WHERE Template_Type_Code = 'CV'
self correction:
SELECT COUNT(*) FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'CV'

index is 327
SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5
What is the version number and template type code for the template with version number later than 5?
schema_links:
What is the version number and template type code for the template with version number later than 5? | templates : templates.version_number , templates.template_type_code , templates.template_details , templates.template_id , templates.date_effective_to , templates.* | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT version_number, template_type_code 
FROM Templates 
WHERE version_number > 5
natsql:
SELECT version_number, template_type_code 
FROM Templates 
WHERE version_number > 5
SQL:
SELECT version_number, template_type_code 
FROM Templates 
WHERE version_number > 5
self correction:
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5

index is 328
SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5
Return the version numbers and template type codes of templates with a version number greater than 5.
schema_links:
Return the version numbers and template type codes of templates with a version number greater than 5. | templates : templates.version_number , templates.template_type_code , templates.template_details , templates.template_id , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT version_number, template_type_code FROM templates WHERE version_number > 5
natsql:
SELECT version_number, template_type_code FROM templates WHERE version_number > 5
SQL:
SELECT version_number, template_type_code FROM templates WHERE version_number > 5
self correction:
SELECT templates.version_number, templates.template_type_code FROM templates WHERE templates.version_number > 5

index is 329
SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code
Show all template type codes and number of templates for each.
schema_links:
Show all template type codes and number of templates for each. | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT template_type_code, COUNT(*) FROM templates GROUP BY template_type_code
natsql:
SELECT template_type_code, COUNT(*) FROM templates GROUP BY template_type_code
SQL:
SELECT template_type_code, COUNT(*) FROM templates GROUP BY template_type_code
self correction:
SELECT Ref_Template_Types.Template_Type_Code, COUNT(*)  FROM Templates  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  GROUP BY Ref_Template_Types.Template_Type_Code

index is 330
SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code
What are the different template type codes, and how many templates correspond to each?
schema_links:
What are the different template type codes, and how many templates correspond to each? | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT template_type_code, COUNT(*) FROM templates GROUP BY template_type_code
natsql:
SELECT template_type_code, COUNT(*) FROM templates GROUP BY template_type_code
SQL:
SELECT template_type_code, COUNT(*) FROM templates GROUP BY template_type_code
self correction:
SELECT Ref_Template_Types.Template_Type_Code, COUNT(*)  FROM Templates  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code

index is 331
SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
Which template type code has most number of templates?
schema_links:
Which template type code has most number of templates? | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_description , documents.document_id , documents.template_id , documents.document_name , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT template_type_code 
FROM templates 
GROUP BY template_type_code 
ORDER BY count(*) DESC 
LIMIT 1
natsql:
SELECT template_type_code 
FROM templates 
GROUP BY template_type_code 
ORDER BY count(*) DESC 
LIMIT 1
SQL:
SELECT template_type_code 
FROM templates 
GROUP BY template_type_code 
ORDER BY count(*) DESC 
LIMIT 1
self correction:
SELECT Ref_Template_Types.Template_Type_Code  FROM Templates  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  GROUP BY Ref_Template_Types.Template_Type_Code  ORDER BY COUNT(Templates.Template_ID) DESC  LIMIT 1

index is 332
SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
Return the type code of the template type that the most templates belong to.
schema_links:
Return the type code of the template type that the most templates belong to. | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT template_type_code 
FROM templates 
GROUP BY template_type_code 
ORDER BY COUNT(*) DESC 
LIMIT 1
natsql:
SELECT template_type_code 
FROM templates 
GROUP BY template_type_code 
ORDER BY COUNT(*) DESC 
LIMIT 1
SQL:
SELECT template_type_code 
FROM templates 
GROUP BY template_type_code 
ORDER BY COUNT(*) DESC 
LIMIT 1
self correction:
SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_Type_Code ORDER BY COUNT(Templates.Template_ID) DESC LIMIT 1

index is 333
SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
Show all template type codes with less than three templates.
schema_links:
Show all template type codes with less than three templates. | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ from _ where count ( _ ) < _ group by _
natsql and SQL generation:
SELECT template_type_code FROM ref_template_types GROUP BY template_type_code HAVING count(*) < 3
natsql:
SELECT template_type_code FROM ref_template_types GROUP BY template_type_code HAVING count(*) < 3
SQL:
SELECT template_type_code FROM ref_template_types GROUP BY template_type_code HAVING count(*) < 3
self correction:
SELECT template_type_code  FROM Ref_Template_Types  JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code  GROUP BY Ref_Template_Types.Template_Type_Code  HAVING COUNT(Templates.Template_ID) < 3

index is 334
SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
What are the codes of template types that have fewer than 3 templates?
schema_links:
What are the codes of template types that have fewer than 3 templates? | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql:
select _ from _ where count ( _ ) < _ group by _
natsql and SQL generation:
SELECT template_type_code FROM ref_template_types GROUP BY template_type_code HAVING count(*) < 3
natsql:
SELECT template_type_code FROM ref_template_types GROUP BY template_type_code HAVING count(*) < 3
SQL:
SELECT template_type_code FROM ref_template_types GROUP BY template_type_code HAVING count(*) < 3
self correction:
SELECT template_type_code  FROM ref_template_types  JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  GROUP BY template_type_code  HAVING count(templates.template_id) < 3

index is 335
SELECT min(Version_Number) ,  template_type_code FROM Templates
What the smallest version number and its template type code?
schema_links:
What the smallest version number and its template type code? | templates : templates.template_type_code , templates.version_number , templates.template_id , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select min ( _ ) , _ from _
natsql and SQL generation:
SELECT min(version_number), template_type_code FROM templates
natsql:
SELECT min(version_number), template_type_code FROM templates
SQL:
SELECT min(version_number), template_type_code FROM templates
self correction:
SELECT MIN(Version_Number) AS smallest_version_number, Template_Type_Code FROM Templates GROUP BY Template_Type_Code

index is 336
SELECT min(Version_Number) ,  template_type_code FROM Templates
Return the lowest version number, along with its corresponding template type code.
schema_links:
Return the lowest version number, along with its corresponding template type code. | templates : templates.version_number , templates.template_type_code , templates.template_id , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select min ( _ ) , _ from _
natsql and SQL generation:
SELECT MIN(version_number), template_type_code FROM templates
natsql:
SELECT MIN(version_number), template_type_code FROM templates
SQL:
SELECT MIN(version_number), template_type_code FROM templates
self correction:
SELECT MIN(Version_Number) AS Lowest_Version_Number, Template_Type_Code FROM Templates GROUP BY Template_Type_Code

index is 337
SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  "Data base"
What is the template type code of the template used by document with the name "Data base"?
schema_links:
What is the template type code of the template used by document with the name "Data base"? | templates : templates.template_type_code , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_to , templates.* | documents : documents.document_name ( Data base ) , documents.template_id , documents.document_description , documents.document_id , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT template_type_code FROM documents WHERE document_name = "Data base"
natsql:
SELECT template_type_code FROM documents WHERE document_name = "Data base"
SQL:
SELECT template_type_code FROM documents WHERE document_name = "Data base"
self correction:
SELECT Templates.Template_Type_Code  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  WHERE Documents.Document_Name = "Data base"

index is 338
SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  "Data base"
Return the template type code of the template that is used by a document named Data base.
schema_links:
Return the template type code of the template that is used by a document named Data base. | templates : templates.template_type_code , templates.template_details , templates.template_id , templates.date_effective_to , templates.version_number , templates.* | documents : documents.document_name ( Data base ) , documents.template_id , documents.document_description , documents.document_id , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT template_type_code FROM documents WHERE document_name = 'Data base'
natsql:
SELECT template_type_code FROM documents WHERE document_name = 'Data base'
SQL:
SELECT template_type_code FROM documents WHERE document_name = 'Data base'
self correction:
SELECT Ref_Template_Types.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Documents.Document_Name = 'Data base'

index is 339
SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"
Show all document names using templates with template type code BK.
schema_links:
Show all document names using templates with template type code BK. | templates : templates.template_type_code ( BK ) , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_name , documents.template_id , documents.document_description , documents.document_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code ( BK ) , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT document_name FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'BK')
natsql:
SELECT document_name FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'BK')
SQL:
SELECT document_name FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'BK')
self correction:
SELECT documents.document_name  FROM documents  JOIN templates ON documents.template_id = templates.template_id  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_code = 'BK'

index is 340
SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"
What are the names of documents that use templates with the code BK?
schema_links:
What are the names of documents that use templates with the code BK? | documents : documents.document_name , documents.document_description , documents.document_id , documents.template_id , documents.other_details , documents.* | templates : templates.template_type_code ( BK ) , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code ( BK ) , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT document_name FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'BK')
natsql:
SELECT document_name FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'BK')
SQL:
SELECT document_name FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'BK')
self correction:
SELECT document_name FROM documents WHERE template_id IN (     SELECT template_id     FROM templates     WHERE template_type_code = 'BK' )

index is 341
SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code
Show all template type codes and the number of documents using each type.
schema_links:
Show all template type codes and the number of documents using each type. | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT template_type_code, COUNT(*) FROM documents GROUP BY template_type_code
natsql:
SELECT template_type_code, COUNT(*) FROM documents GROUP BY template_type_code
SQL:
SELECT template_type_code, COUNT(*) FROM documents GROUP BY template_type_code
self correction:
SELECT Ref_Template_Types.Template_Type_Code, COUNT(*)  FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code;

index is 342
SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code
What are the different template type codes, and how many documents use each type?
schema_links:
What are the different template type codes, and how many documents use each type? | templates : templates.template_type_code , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | documents : documents.document_name , documents.template_id , documents.document_description , documents.document_id , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT template_type_code, COUNT(*) FROM documents GROUP BY template_type_code
natsql:
SELECT template_type_code, COUNT(*) FROM documents GROUP BY template_type_code
SQL:
SELECT template_type_code, COUNT(*) FROM documents GROUP BY template_type_code
self correction:
SELECT Ref_Template_Types.Template_Type_Code, COUNT(DISTINCT Documents.Document_ID)  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  GROUP BY Ref_Template_Types.Template_Type_Code

index is 343
SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1
Which template type code is used by most number of documents?
schema_links:
Which template type code is used by most number of documents? | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT template_type_code FROM documents GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1
natsql:
SELECT template_type_code FROM documents GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1
SQL:
SELECT template_type_code FROM documents GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1
self correction:
SELECT Ref_Template_Types.Template_Type_Code  FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1

index is 344
SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1
Return the code of the template type that is most commonly used in documents.
schema_links:
Return the code of the template type that is most commonly used in documents. | templates : templates.template_type_code , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_to , templates.* | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT template_type_code 
FROM documents 
GROUP BY template_type_code 
ORDER BY COUNT(*) DESC 
LIMIT 1
natsql:
SELECT template_type_code 
FROM documents 
GROUP BY template_type_code 
ORDER BY COUNT(*) DESC 
LIMIT 1
SQL:
SELECT template_type_code 
FROM documents 
GROUP BY template_type_code 
ORDER BY COUNT(*) DESC 
LIMIT 1
self correction:
SELECT Ref_Template_Types.Template_Type_Code  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  GROUP BY Ref_Template_Types.Template_Type_Code  ORDER BY COUNT(*) DESC  LIMIT 1

index is 345
SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
Show all template type codes that are not used by any document.
schema_links:
Show all template type codes that are not used by any document. | templates : templates.template_type_code , templates.template_id , templates.date_effective_to , templates.template_details , templates.version_number , templates.* | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql:
select _ from _ where except_ @.@ is _
natsql and SQL generation:
SELECT template_type_code 
FROM ref_template_types 
WHERE template_type_code NOT IN (SELECT template_type_code FROM documents)
natsql:
SELECT template_type_code 
FROM ref_template_types 
WHERE template_type_code NOT IN (SELECT template_type_code FROM documents)
SQL:
SELECT template_type_code 
FROM ref_template_types 
WHERE template_type_code NOT IN (SELECT template_type_code FROM documents)
self correction:
SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN (SELECT DISTINCT template_type_code FROM templates)

index is 346
SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
What are the codes of template types that are not used for any document?
schema_links:
What are the codes of template types that are not used for any document? | templates : templates.template_type_code , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql:
select _ from _ where except_ @.@ is _
natsql and SQL generation:
SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (SELECT template_type_code FROM templates)
natsql:
SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (SELECT template_type_code FROM templates)
SQL:
SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (SELECT template_type_code FROM templates)
self correction:
SELECT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Code NOT IN      (SELECT Template_Type_Code      FROM Templates)

index is 347
SELECT template_type_code ,  template_type_description FROM Ref_template_types
Show all template type codes and descriptions.
schema_links:
Show all template type codes and descriptions. | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql:
select _ from _
natsql and SQL generation:
SELECT template_type_code, template_type_description FROM ref_template_types
natsql:
SELECT template_type_code, template_type_description FROM ref_template_types
SQL:
SELECT template_type_code, template_type_description FROM ref_template_types
self correction:
SELECT template_type_code, template_type_description FROM Ref_Template_Types

index is 348
SELECT template_type_code ,  template_type_description FROM Ref_template_types
What are the type codes and descriptions for all template types?
schema_links:
What are the type codes and descriptions for all template types? | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql:
select _ from _
natsql and SQL generation:
SELECT template_type_code, template_type_description FROM ref_template_types
natsql:
SELECT template_type_code, template_type_description FROM ref_template_types
SQL:
SELECT template_type_code, template_type_description FROM ref_template_types
self correction:
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types

index is 349
SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"
What is the template type descriptions for template type code "AD".
schema_links:
What is the template type descriptions for template type code "AD". | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code ( AD ) , ref_template_types.* | templates : templates.template_type_code ( AD ) , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT template_type_description FROM ref_template_types WHERE template_type_code = "AD"
natsql:
SELECT template_type_description FROM ref_template_types WHERE template_type_code = "AD"
SQL:
SELECT template_type_description FROM ref_template_types WHERE template_type_code = "AD"
self correction:
SELECT template_type_description  FROM ref_template_types  WHERE template_type_code = "AD"

index is 350
SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"
Return the template type description of the template type with the code AD.
schema_links:
Return the template type description of the template type with the code AD. | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code ( AD ) , ref_template_types.* | templates : templates.template_type_code ( AD ) , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD'
natsql:
SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD'
SQL:
SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD'
self correction:
SELECT template_type_description  FROM ref_template_types  WHERE template_type_code = 'AD'

index is 351
SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book"
What is the template type code for template type description "Book".
schema_links:
What is the template type code for template type description "Book". | ref_template_types : ref_template_types.template_type_description ( Book ) , ref_template_types.template_type_code , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_name , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'
natsql:
SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'
SQL:
SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'
self correction:
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'

index is 352
SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book"
Return the type code of the template type with the description "Book".
schema_links:
Return the type code of the template type with the description "Book". | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description ( Book ) , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_description , documents.document_id , documents.template_id , documents.document_name , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'
natsql:
SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'
SQL:
SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'
self correction:
SELECT template_type_code  FROM Ref_Template_Types  WHERE template_type_description = 'Book'

index is 353
SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID
What are the distinct template type descriptions for the templates ever used by any document?
schema_links:
What are the distinct template type descriptions for the templates ever used by any document? | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code , ref_template_types.* | templates : templates.template_id , templates.template_type_code , templates.version_number , templates.date_effective_to , templates.template_details , templates.* | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql:
select distinct _ from _ where @.@ join _
natsql and SQL generation:
SELECT DISTINCT T1.template_type_description 
FROM ref_template_types AS T1 
JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code 
JOIN documents AS T3 ON T2.template_id = T3.template_id 
JOIN paragraphs AS T4 ON T3.document_id = T4.document_id
natsql:
SELECT DISTINCT T1.template_type_description 
FROM ref_template_types AS T1 
JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code 
JOIN documents AS T3 ON T2.template_id = T3.template_id 
JOIN paragraphs AS T4 ON T3.document_id = T4.document_id
SQL:
SELECT DISTINCT T1.template_type_description 
FROM ref_template_types AS T1 
JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code 
JOIN documents AS T3 ON T2.template_id = T3.template_id 
JOIN paragraphs AS T4 ON T3.document_id = T4.document_id
self correction:
SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID JOIN Paragraphs AS T4 ON T3.Document_ID = T4.Document_ID

index is 354
SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID
Return the different descriptions for templates that have been used in a document.
schema_links:
Return the different descriptions for templates that have been used in a document. | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code , ref_template_types.* | documents : documents.document_description , documents.template_id , documents.document_name , documents.document_id , documents.other_details , documents.* | templates : templates.template_id , templates.template_type_code , templates.template_details , templates.version_number , templates.date_effective_to , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql:
select distinct _ from _ where @.@ join _
natsql and SQL generation:
SELECT DISTINCT ref_template_types.template_type_description FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id
natsql:
SELECT DISTINCT ref_template_types.template_type_description FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id
SQL:
SELECT DISTINCT ref_template_types.template_type_description FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id
self correction:
SELECT ref_template_types.template_type_description FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY ref_template_types.template_type_description

index is 355
SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  "Presentation"
What are the template ids with template type description "Presentation".
schema_links:
What are the template ids with template type description "Presentation". | ref_template_types : ref_template_types.template_type_description ( Presentation ) , ref_template_types.template_type_code , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_details , templates.template_type_code , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT template_id FROM templates WHERE template_type_code = (SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Presentation')
natsql:
SELECT template_id FROM templates WHERE template_type_code = (SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Presentation')
SQL:
SELECT template_id FROM templates WHERE template_type_code = (SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Presentation')
self correction:
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation'

index is 356
SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  "Presentation"
Return the ids corresponding to templates with the description 'Presentation'.
schema_links:
Return the ids corresponding to templates with the description 'Presentation'. | ref_template_types : ref_template_types.template_type_description ( Presentation ) , ref_template_types.template_type_code , ref_template_types.* | templates : templates.template_id , templates.template_details , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT template_id FROM templates WHERE template_details = 'Presentation'
natsql:
SELECT template_id FROM templates WHERE template_details = 'Presentation'
SQL:
SELECT template_id FROM templates WHERE template_details = 'Presentation'
self correction:
SELECT template_id FROM templates WHERE template_type_code IN (SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Presentation')

index is 357
SELECT count(*) FROM Paragraphs
How many paragraphs in total?
schema_links:
How many paragraphs in total? | paragraphs : paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.document_id , paragraphs.other_details , paragraphs.* | documents : documents.document_name , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT count(*) FROM paragraphs
natsql:
SELECT count(*) FROM paragraphs
SQL:
SELECT count(*) FROM paragraphs
self correction:
SELECT COUNT(*) FROM Paragraphs

index is 358
SELECT count(*) FROM Paragraphs
Count the number of paragraphs.
schema_links:
Count the number of paragraphs. | paragraphs : paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.document_id , paragraphs.other_details , paragraphs.* | documents : documents.document_name , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT count(*) FROM paragraphs
natsql:
SELECT count(*) FROM paragraphs
SQL:
SELECT count(*) FROM paragraphs
self correction:
SELECT COUNT(*) FROM Paragraphs;

index is 359
SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'
How many paragraphs for the document with name 'Summer Show'?
schema_links:
How many paragraphs for the document with name 'Summer Show'? | documents : documents.document_name ( Summer Show ) , documents.document_id , documents.document_description , documents.template_id , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show')
natsql:
SELECT count(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show')
SQL:
SELECT count(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show')
self correction:
SELECT COUNT(*) AS paragraph_count  FROM Paragraphs  WHERE Document_ID = (   SELECT Document_ID    FROM Documents    WHERE Document_Name = 'Summer Show' )

index is 360
SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'
Count the number of paragraphs in the document named 'Summer Show'.
schema_links:
Count the number of paragraphs in the document named 'Summer Show'. | documents : documents.document_name ( Summer Show ) , documents.document_id , documents.document_description , documents.template_id , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show')
natsql:
SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show')
SQL:
SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show')
self correction:
SELECT COUNT(*) FROM Paragraphs  WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show')

index is 361
select other_details from paragraphs where paragraph_text like 'korea'
Show paragraph details for paragraph with text 'Korea ' .
schema_links:
Show paragraph details for paragraph with text 'Korea ' . | paragraphs : paragraphs.paragraph_text ( Korea ) , paragraphs.other_details , paragraphs.paragraph_id , paragraphs.document_id , paragraphs.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ from _ where _ like _
natsql and SQL generation:
SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Korea%'
natsql:
SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Korea%'
SQL:
SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Korea%'
self correction:
SELECT Paragraph_Text FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'

index is 362
select other_details from paragraphs where paragraph_text like 'korea'
What are the details for the paragraph that includes the text 'Korea ' ?
schema_links:
What are the details for the paragraph that includes the text 'Korea ' ? | paragraphs : paragraphs.paragraph_text ( Korea ) , paragraphs.other_details , paragraphs.paragraph_id , paragraphs.document_id , paragraphs.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ from _ where _ like _
natsql and SQL generation:
SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Korea%'
natsql:
SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Korea%'
SQL:
SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Korea%'
self correction:
SELECT Paragraphs.* FROM Paragraphs WHERE Paragraphs.Paragraph_Text LIKE '%Korea%'

index is 363
SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'
Show all paragraph ids and texts for the document with name 'Welcome to NY'.
schema_links:
Show all paragraph ids and texts for the document with name 'Welcome to NY'. | documents : documents.document_name ( Welcome to NY ) , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.document_id , paragraphs.other_details , paragraphs.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT paragraph_id, paragraph_text FROM paragraphs WHERE document_id IN (SELECT document_id FROM documents WHERE document_name = 'Welcome to NY')
natsql:
SELECT paragraph_id, paragraph_text FROM paragraphs WHERE document_id IN (SELECT document_id FROM documents WHERE document_name = 'Welcome to NY')
SQL:
SELECT paragraph_id, paragraph_text FROM paragraphs WHERE document_id IN (SELECT document_id FROM documents WHERE document_name = 'Welcome to NY')
self correction:
SELECT paragraph_id, paragraph_text  FROM paragraphs  WHERE document_id = (     SELECT document_id      FROM documents      WHERE document_name = 'Welcome to NY' )

index is 364
SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'
What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?
schema_links:
What are the ids and texts of paragraphs in the document titled 'Welcome to NY'? | paragraphs : paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.document_id , paragraphs.other_details , paragraphs.* | documents : documents.document_name ( Welcome to NY ) , documents.document_id , documents.document_description , documents.template_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT paragraph_id, paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Welcome to NY')
natsql:
SELECT paragraph_id, paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Welcome to NY')
SQL:
SELECT paragraph_id, paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Welcome to NY')
self correction:
SELECT paragraph_id, paragraph_text  FROM Paragraphs  WHERE document_id = (SELECT document_id                       FROM Documents                       WHERE document_name = 'Welcome to NY')

index is 365
SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Customer reviews"
Show all paragraph texts for the document "Customer reviews".
schema_links:
Show all paragraph texts for the document "Customer reviews". | documents : documents.document_name ( Customer reviews ) , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_text , paragraphs.document_id , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer reviews')
natsql:
SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer reviews')
SQL:
SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer reviews')
self correction:
SELECT Paragraph_Text  FROM Paragraphs  WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Customer reviews')

index is 366
SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Customer reviews"
What are the paragraph texts for the document with the name 'Customer reviews'?
schema_links:
What are the paragraph texts for the document with the name 'Customer reviews'? | documents : documents.document_name ( Customer reviews ) , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_text , paragraphs.document_id , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer reviews')
natsql:
SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer reviews')
SQL:
SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer reviews')
self correction:
SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID = (   SELECT Document_ID   FROM Documents   WHERE Document_Name = 'Customer reviews' )

index is 367
SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
Show all document ids and the number of paragraphs in each document. Order by document id.
schema_links:
Show all document ids and the number of paragraphs in each document. Order by document id. | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ , count ( _ ) from _ group by _ order by _ asc
natsql and SQL generation:
SELECT document_id, COUNT(paragraph_id) FROM paragraphs GROUP BY document_id ORDER BY document_id ASC
natsql:
SELECT document_id, COUNT(paragraph_id) FROM paragraphs GROUP BY document_id ORDER BY document_id ASC
SQL:
SELECT document_id, COUNT(paragraph_id) FROM paragraphs GROUP BY document_id ORDER BY document_id ASC
self correction:
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Paragraph_Count FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID ASC

index is 368
SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.
schema_links:
Return the different document ids along with the number of paragraphs corresponding to each, ordered by id. | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ , count ( _ ) from _ group by _ order by _ asc
natsql and SQL generation:
SELECT document_id, COUNT(paragraph_id) FROM paragraphs GROUP BY document_id ORDER BY document_id ASC
natsql:
SELECT document_id, COUNT(paragraph_id) FROM paragraphs GROUP BY document_id ORDER BY document_id ASC
SQL:
SELECT document_id, COUNT(paragraph_id) FROM paragraphs GROUP BY document_id ORDER BY document_id ASC
self correction:
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID)  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID  ORDER BY Documents.Document_ID ASC

index is 369
SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id
Show all document ids, names and the number of paragraphs in each document.
schema_links:
Show all document ids, names and the number of paragraphs in each document. | documents : documents.document_name , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT document_id, document_name, COUNT(paragraph_id) FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY document_id, document_name
natsql:
SELECT document_id, document_name, COUNT(paragraph_id) FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY document_id, document_name
SQL:
SELECT document_id, document_name, COUNT(paragraph_id) FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY document_id, document_name
self correction:
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id)  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id, documents.document_name

index is 370
SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id
What are the ids and names of each document, as well as the number of paragraphs in each?
schema_links:
What are the ids and names of each document, as well as the number of paragraphs in each? | documents : documents.document_id , documents.document_name , documents.template_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | templates : templates.version_number , templates.template_id , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id)
FROM documents
JOIN paragraphs ON documents.document_id = paragraphs.document_id
GROUP BY documents.document_id, documents.document_name
natsql:
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id)
FROM documents
JOIN paragraphs ON documents.document_id = paragraphs.document_id
GROUP BY documents.document_id, documents.document_name
SQL:
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id)
FROM documents
JOIN paragraphs ON documents.document_id = paragraphs.document_id
GROUP BY documents.document_id, documents.document_name
self correction:
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS paragraph_count FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name

index is 371
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
List all document ids with at least two paragraphs.
schema_links:
List all document ids with at least two paragraphs. | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | documents : documents.document_name , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ from _ where count ( _ ) >= _ group by _
natsql and SQL generation:
SELECT document_id FROM paragraphs GROUP BY document_id HAVING count(*) >= 2
natsql:
SELECT document_id FROM paragraphs GROUP BY document_id HAVING count(*) >= 2
SQL:
SELECT document_id FROM paragraphs GROUP BY document_id HAVING count(*) >= 2
self correction:
SELECT Documents.Document_ID FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(*) >= 2

index is 372
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
What are the ids of documents that have 2 or more paragraphs?
schema_links:
What are the ids of documents that have 2 or more paragraphs? | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | documents : documents.document_id , documents.document_name , documents.template_id , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ from _ where count ( _ ) >= _ group by _
natsql and SQL generation:
SELECT document_id FROM paragraphs GROUP BY document_id HAVING count(*) >= 2
natsql:
SELECT document_id FROM paragraphs GROUP BY document_id HAVING count(*) >= 2
SQL:
SELECT document_id FROM paragraphs GROUP BY document_id HAVING count(*) >= 2
self correction:
SELECT Documents.Document_ID  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID  HAVING COUNT(*) >= 2

index is 373
SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1
What is the document id and name with greatest number of paragraphs?
schema_links:
What is the document id and name with greatest number of paragraphs? | paragraphs : paragraphs.document_id , paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | documents : documents.document_name , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT document_id, document_name FROM documents GROUP BY document_id, document_name ORDER BY COUNT(paragraph_id) DESC LIMIT 1
natsql:
SELECT document_id, document_name FROM documents GROUP BY document_id, document_name ORDER BY COUNT(paragraph_id) DESC LIMIT 1
SQL:
SELECT document_id, document_name FROM documents GROUP BY document_id, document_name ORDER BY COUNT(paragraph_id) DESC LIMIT 1
self correction:
SELECT documents.document_id, documents.document_name  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id, documents.document_name  ORDER BY COUNT(paragraphs.paragraph_id) DESC  LIMIT 1

index is 374
SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1
Return the id and name of the document with the most paragraphs.
schema_links:
Return the id and name of the document with the most paragraphs. | documents : documents.document_id , documents.document_name , documents.template_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT document_id, document_name FROM documents GROUP BY document_id, document_name ORDER BY count(*) DESC LIMIT 1
natsql:
SELECT document_id, document_name FROM documents GROUP BY document_id, document_name ORDER BY count(*) DESC LIMIT 1
SQL:
SELECT document_id, document_name FROM documents GROUP BY document_id, document_name ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT documents.document_id, documents.document_name FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1

index is 375
SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
What is the document id with least number of paragraphs?
schema_links:
What is the document id with least number of paragraphs? | paragraphs : paragraphs.document_id , paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | documents : documents.document_name , documents.document_description , documents.template_id , documents.document_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ from _ group by _ order by count ( _ ) asc limit _
natsql and SQL generation:
SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
natsql:
SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
SQL:
SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
self correction:
SELECT Documents.Document_ID  FROM    Paragraphs  JOIN    Documents ON Paragraphs.Document_ID = Documents.Document_ID  GROUP BY    Documents.Document_ID  ORDER BY    COUNT(*) ASC  LIMIT 1

index is 376
SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
Return the id of the document with the fewest paragraphs.
schema_links:
Return the id of the document with the fewest paragraphs. | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | documents : documents.document_id , documents.document_name , documents.document_description , documents.template_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ from _ group by _ order by count ( _ ) asc limit _
natsql and SQL generation:
SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
natsql:
SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
SQL:
SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
self correction:
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY COUNT(Paragraphs.Paragraph_ID) ASC LIMIT 1

index is 377
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2
What is the document id with 1 to 2 paragraphs?
schema_links:
What is the document id with 1 to 2 paragraphs? | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | documents : documents.document_name , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ from _ where count ( _ ) between _ and _ group by _
natsql and SQL generation:
SELECT document_id
FROM paragraphs
GROUP BY document_id
HAVING COUNT(paragraph_id) BETWEEN 1 AND 2
natsql:
SELECT document_id
FROM paragraphs
GROUP BY document_id
HAVING COUNT(paragraph_id) BETWEEN 1 AND 2
SQL:
SELECT document_id
FROM paragraphs
GROUP BY document_id
HAVING COUNT(paragraph_id) BETWEEN 1 AND 2
self correction:
SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(paragraph_id) BETWEEN 1 AND 2

index is 378
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2
Give the ids of documents that have between one and two paragraphs.
schema_links:
Give the ids of documents that have between one and two paragraphs. | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | documents : documents.document_id , documents.document_name , documents.document_description , documents.template_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ from _ where count ( _ ) between _ and _ group by _
natsql and SQL generation:
SELECT document_id FROM paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2
natsql:
SELECT document_id FROM paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2
SQL:
SELECT document_id FROM paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2
self correction:
SELECT Documents.Document_ID FROM Paragraphs GROUP BY Documents.Document_ID HAVING COUNT(*) BETWEEN 1 AND 2

index is 379
SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'
Show the document id with paragraph text 'Brazil' and 'Ireland'.
schema_links:
Show the document id with paragraph text 'Brazil' and 'Ireland'. | paragraphs : paragraphs.paragraph_text ( Brazil , Ireland ) , paragraphs.document_id , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | documents : documents.document_name , documents.document_description , documents.document_id , documents.template_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT document_id FROM paragraphs WHERE paragraph_text IN ('Brazil', 'Ireland')
natsql:
SELECT document_id FROM paragraphs WHERE paragraph_text IN ('Brazil', 'Ireland')
SQL:
SELECT document_id FROM paragraphs WHERE paragraph_text IN ('Brazil', 'Ireland')
self correction:
SELECT document_id  FROM paragraphs  WHERE paragraph_text IN ('Brazil', 'Ireland');

index is 380
SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'
What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?
schema_links:
What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'? | paragraphs : paragraphs.paragraph_text ( Brazil , Ireland ) , paragraphs.document_id , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT document_id FROM paragraphs WHERE paragraph_text = 'Brazil' AND document_id IN (SELECT document_id FROM paragraphs WHERE paragraph_text = 'Ireland')
natsql:
SELECT document_id FROM paragraphs WHERE paragraph_text = 'Brazil' AND document_id IN (SELECT document_id FROM paragraphs WHERE paragraph_text = 'Ireland')
SQL:
SELECT document_id FROM paragraphs WHERE paragraph_text = 'Brazil' AND document_id IN (SELECT document_id FROM paragraphs WHERE paragraph_text = 'Ireland')
self correction:
SELECT document_id FROM paragraphs WHERE paragraph_text = 'Brazil'   AND document_id IN (     SELECT document_id     FROM paragraphs     WHERE paragraph_text = 'Ireland'   )

index is 381
SELECT count(*) FROM teacher
How many teachers are there?
schema_links:
How many teachers are there? | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown , teacher.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT count(*) FROM teacher
natsql:
SELECT count(*) FROM teacher
SQL:
SELECT count(*) FROM teacher
self correction:
SELECT count(Teacher_ID) FROM teacher

index is 382
SELECT count(*) FROM teacher
What is the total count of teachers?
schema_links:
What is the total count of teachers? | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown , teacher.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT count(*) FROM teacher
natsql:
SELECT count(*) FROM teacher
SQL:
SELECT count(*) FROM teacher
self correction:
SELECT count(*) FROM teacher

index is 383
SELECT Name FROM teacher ORDER BY Age ASC
List the names of teachers in ascending order of age.
schema_links:
List the names of teachers in ascending order of age. | teacher : teacher.name , teacher.age , teacher.teacher_id , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql:
select _ from _ order by _ asc
natsql and SQL generation:
SELECT name FROM teacher ORDER BY age ASC
natsql:
SELECT name FROM teacher ORDER BY age ASC
SQL:
SELECT name FROM teacher ORDER BY age ASC
self correction:
SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC

index is 384
SELECT Name FROM teacher ORDER BY Age ASC
What are the names of the teachers ordered by ascending age?
schema_links:
What are the names of the teachers ordered by ascending age? | teacher : teacher.name , teacher.age , teacher.teacher_id , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql:
select _ from _ order by _ asc
natsql and SQL generation:
SELECT name FROM teacher ORDER BY age ASC
natsql:
SELECT name FROM teacher ORDER BY age ASC
SQL:
SELECT name FROM teacher ORDER BY age ASC
self correction:
SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC

index is 385
SELECT Age ,  Hometown FROM teacher
What are the age and hometown of teachers?
schema_links:
What are the age and hometown of teachers? | teacher : teacher.age , teacher.hometown , teacher.name , teacher.teacher_id , teacher.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*
natsql:
select _ from _
natsql and SQL generation:
SELECT age, hometown FROM teacher
natsql:
SELECT age, hometown FROM teacher
SQL:
SELECT age, hometown FROM teacher
self correction:
SELECT age, hometown FROM teacher

index is 386
SELECT Age ,  Hometown FROM teacher
What is the age and hometown of every teacher?
schema_links:
What is the age and hometown of every teacher? | teacher : teacher.age , teacher.hometown , teacher.name , teacher.teacher_id , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql:
select _ from _
natsql and SQL generation:
SELECT age, hometown FROM teacher
natsql:
SELECT age, hometown FROM teacher
SQL:
SELECT age, hometown FROM teacher
self correction:
SELECT teacher.Age, teacher.Hometown FROM teacher

index is 387
select name from teacher where hometown != "little lever urban district"
List the name of teachers whose hometown is not `` Little Lever Urban District '' .
schema_links:
List the name of teachers whose hometown is not `` Little Lever Urban District '' . | teacher : teacher.hometown ( Little Lever Urban District ) , teacher.name , teacher.teacher_id , teacher.age , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District'
natsql:
SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District'
SQL:
SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District'
self correction:
SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'

index is 388
select name from teacher where hometown != "little lever urban district"
What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?
schema_links:
What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ? | teacher : teacher.hometown ( Little Lever Urban District ) , teacher.name , teacher.teacher_id , teacher.age , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District'
natsql:
SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District'
SQL:
SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District'
self correction:
SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'

index is 389
SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33
Show the name of teachers aged either 32 or 33?
schema_links:
Show the name of teachers aged either 32 or 33? | teacher : teacher.name , teacher.age , teacher.teacher_id , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT name FROM teacher WHERE age = 32 OR age = 33
natsql:
SELECT name FROM teacher WHERE age = 32 OR age = 33
SQL:
SELECT name FROM teacher WHERE age = 32 OR age = 33
self correction:
SELECT teacher.Name FROM teacher WHERE teacher.Age IN (32, 33)

index is 390
SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33
What are the names of the teachers who are aged either 32 or 33?
schema_links:
What are the names of the teachers who are aged either 32 or 33? | teacher : teacher.name , teacher.age , teacher.teacher_id , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT name FROM teacher WHERE age = 32 OR age = 33
natsql:
SELECT name FROM teacher WHERE age = 32 OR age = 33
SQL:
SELECT name FROM teacher WHERE age = 32 OR age = 33
self correction:
SELECT teacher.Name FROM teacher WHERE teacher.Age IN (32, 33)

index is 391
SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
What is the hometown of the youngest teacher?
schema_links:
What is the hometown of the youngest teacher? | teacher : teacher.hometown , teacher.age , teacher.name , teacher.teacher_id , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql:
select _ from _ order by _ asc limit _
natsql and SQL generation:
SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1
natsql:
SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1
SQL:
SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1
self correction:
SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1

index is 392
SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
Where is the youngest teacher from?
schema_links:
Where is the youngest teacher from? | teacher : teacher.age , teacher.hometown , teacher.name , teacher.teacher_id , teacher.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*
natsql:
select _ from _ order by _ asc limit _
natsql and SQL generation:
SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1
natsql:
SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1
SQL:
SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1
self correction:
SELECT teacher.Hometown FROM teacher ORDER BY teacher.Age ASC LIMIT 1

index is 393
SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown
Show different hometown of teachers and the number of teachers from each hometown.
schema_links:
Show different hometown of teachers and the number of teachers from each hometown. | teacher : teacher.hometown , teacher.name , teacher.age , teacher.teacher_id , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT hometown, COUNT(*) FROM teacher GROUP BY hometown
natsql:
SELECT hometown, COUNT(*) FROM teacher GROUP BY hometown
SQL:
SELECT hometown, COUNT(*) FROM teacher GROUP BY hometown
self correction:
SELECT hometown, COUNT(DISTINCT teacher.Teacher_ID) FROM teacher GROUP BY hometown

index is 394
SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown
For each hometown, how many teachers are there?
schema_links:
For each hometown, how many teachers are there? | teacher : teacher.hometown , teacher.name , teacher.age , teacher.teacher_id , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT hometown, COUNT(*) FROM teacher GROUP BY hometown
natsql:
SELECT hometown, COUNT(*) FROM teacher GROUP BY hometown
SQL:
SELECT hometown, COUNT(*) FROM teacher GROUP BY hometown
self correction:
SELECT hometown, COUNT(*) FROM teacher GROUP BY hometown

index is 395
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
List the most common hometown of teachers.
schema_links:
List the most common hometown of teachers. | teacher : teacher.hometown , teacher.name , teacher.age , teacher.teacher_id , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1
natsql:
SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1
SQL:
SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1
self correction:
SELECT teacher.hometown  FROM teacher  GROUP BY teacher.hometown  ORDER BY COUNT(*) DESC  LIMIT 1

index is 396
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
What is the most commmon hometowns for teachers?
schema_links:
What is the most commmon hometowns for teachers? | teacher : teacher.hometown , teacher.name , teacher.teacher_id , teacher.age , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1
natsql:
SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1
SQL:
SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1
self correction:
SELECT teacher.hometown FROM teacher GROUP BY teacher.hometown ORDER BY COUNT(*) DESC LIMIT 1

index is 397
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2
Show the hometowns shared by at least two teachers.
schema_links:
Show the hometowns shared by at least two teachers. | teacher : teacher.hometown , teacher.teacher_id , teacher.name , teacher.age , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql:
select _ from _ where count ( _ ) >= _ group by _
natsql and SQL generation:
SELECT hometown FROM teacher GROUP BY hometown HAVING count(*) >= 2
natsql:
SELECT hometown FROM teacher GROUP BY hometown HAVING count(*) >= 2
SQL:
SELECT hometown FROM teacher GROUP BY hometown HAVING count(*) >= 2
self correction:
SELECT teacher.Hometown FROM teacher GROUP BY teacher.Hometown HAVING COUNT(DISTINCT teacher.Teacher_ID) >= 2

index is 398
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2
What are the towns from which at least two teachers come from?
schema_links:
What are the towns from which at least two teachers come from? | teacher : teacher.hometown , teacher.name , teacher.teacher_id , teacher.age , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql:
select _ from _ where count ( _ ) >= _ group by _
natsql and SQL generation:
SELECT hometown FROM teacher GROUP BY hometown HAVING count(*) >= 2
natsql:
SELECT hometown FROM teacher GROUP BY hometown HAVING count(*) >= 2
SQL:
SELECT hometown FROM teacher GROUP BY hometown HAVING count(*) >= 2
self correction:
SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(DISTINCT Teacher_ID) >= 2

index is 399
SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID
Show names of teachers and the courses they are arranged to teach.
schema_links:
Show names of teachers and the courses they are arranged to teach. | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.teacher_id , course_arrange.course_id , course_arrange.grade , course_arrange.*
natsql:
select _ from _
natsql and SQL generation:
SELECT teacher.name, course.course
FROM teacher
JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id
JOIN course ON course_arrange.course_id = course.course_id
natsql:
SELECT teacher.name, course.course
FROM teacher
JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id
JOIN course ON course_arrange.course_id = course.course_id
SQL:
SELECT teacher.name, course.course
FROM teacher
JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id
JOIN course ON course_arrange.course_id = course.course_id
self correction:
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID

index is 400
SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID
What is the name of each teacher and what course they teach?
schema_links:
What is the name of each teacher and what course they teach? | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql:
select _ from _
natsql and SQL generation:
SELECT name, course
FROM teacher
JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id
JOIN course ON course_arrange.course_id = course.course_id
natsql:
SELECT name, course
FROM teacher
JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id
JOIN course ON course_arrange.course_id = course.course_id
SQL:
SELECT name, course
FROM teacher
JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id
JOIN course ON course_arrange.course_id = course.course_id
self correction:
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID

index is 401
SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name
Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.
schema_links:
Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name. | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course_arrange : course_arrange.teacher_id , course_arrange.course_id , course_arrange.grade , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*
natsql:
select _ from _ order by _ asc
natsql and SQL generation:
SELECT name FROM teacher ORDER BY name ASC
natsql:
SELECT name FROM teacher ORDER BY name ASC
SQL:
SELECT name FROM teacher ORDER BY name ASC
self correction:
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course.Course_ID = course_arrange.Course_ID ORDER BY teacher.Name ASC

index is 402
SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name
What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?
schema_links:
What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher? | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.teacher_id , course_arrange.grade , course_arrange.course_id , course_arrange.*
natsql:
select _ from _ order by _ asc
natsql and SQL generation:
SELECT name, course
FROM teacher
JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id
JOIN course ON course_arrange.course_id = course.course_id
ORDER BY name ASC
natsql:
SELECT name, course
FROM teacher
JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id
JOIN course ON course_arrange.course_id = course.course_id
ORDER BY name ASC
SQL:
SELECT name, course
FROM teacher
JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id
JOIN course ON course_arrange.course_id = course.course_id
ORDER BY name ASC
self correction:
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC

index is 403
SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "Math"
Show the name of the teacher for the math course.
schema_links:
Show the name of the teacher for the math course. | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course : course.course ( Math ) , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade , course_arrange.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT T1.name
FROM teacher AS T1
JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id
JOIN course AS T3 ON T2.course_id = T3.course_id
WHERE T3.course = 'Math'
natsql:
SELECT T1.name
FROM teacher AS T1
JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id
JOIN course AS T3 ON T2.course_id = T3.course_id
WHERE T3.course = 'Math'
SQL:
SELECT T1.name
FROM teacher AS T1
JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id
JOIN course AS T3 ON T2.course_id = T3.course_id
WHERE T3.course = 'Math'
self correction:
SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID WHERE T3.Course = 'Math'

index is 404
SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "Math"
What are the names of the people who teach math courses?
schema_links:
What are the names of the people who teach math courses? | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course : course.course ( Math ) , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id WHERE course.course = 'Math'
natsql:
SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id WHERE course.course = 'Math'
SQL:
SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id WHERE course.course = 'Math'
self correction:
SELECT teacher.Name  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  JOIN course ON course_arrange.Course_ID = course.Course_ID  WHERE course.Course = 'Math'

index is 405
SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name
Show names of teachers and the number of courses they teach.
schema_links:
Show names of teachers and the number of courses they teach. | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.teacher_id , course_arrange.course_id , course_arrange.grade , course_arrange.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT T1.name, COUNT(T2.course_id) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.name
natsql:
SELECT T1.name, COUNT(T2.course_id) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.name
SQL:
SELECT T1.name, COUNT(T2.course_id) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.name
self correction:
SELECT T1.Name, COUNT(T2.Course_ID)  FROM teacher AS T1  JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID  GROUP BY T1.Name

index is 406
SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name
What are the names of the teachers and how many courses do they teach?
schema_links:
What are the names of the teachers and how many courses do they teach? | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.teacher_id , course_arrange.grade , course_arrange.course_id , course_arrange.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT teacher.name, COUNT(course_arrange.course_id) FROM teacher
JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id
GROUP BY teacher.name
natsql:
SELECT teacher.name, COUNT(course_arrange.course_id) FROM teacher
JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id
GROUP BY teacher.name
SQL:
SELECT teacher.name, COUNT(course_arrange.course_id) FROM teacher
JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id
GROUP BY teacher.name
self correction:
SELECT teacher.Name, COUNT(course_arrange.Course_ID) AS course_count FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name

index is 407
SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2
Show names of teachers that teach at least two courses.
schema_links:
Show names of teachers that teach at least two courses. | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course_arrange : course_arrange.teacher_id , course_arrange.grade , course_arrange.course_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*
natsql:
select _ from _ where count ( _ ) >= _ group by _
natsql and SQL generation:
SELECT name FROM teacher GROUP BY name HAVING count(*) >= 2
natsql:
SELECT name FROM teacher GROUP BY name HAVING count(*) >= 2
SQL:
SELECT name FROM teacher GROUP BY name HAVING count(*) >= 2
self correction:
SELECT name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID HAVING count(DISTINCT course_arrange.Course_ID) >= 2

index is 408
SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2
What are the names of the teachers who teach at least two courses?
schema_links:
What are the names of the teachers who teach at least two courses? | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course_arrange : course_arrange.teacher_id , course_arrange.grade , course_arrange.course_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*
natsql:
select _ from _ where count ( _ ) >= _ group by _
natsql and SQL generation:
SELECT name FROM teacher GROUP BY name HAVING count(*) >= 2
natsql:
SELECT name FROM teacher GROUP BY name HAVING count(*) >= 2
SQL:
SELECT name FROM teacher GROUP BY name HAVING count(*) >= 2
self correction:
SELECT teacher.Name  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  GROUP BY teacher.Name  HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2

index is 409
SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
List the names of teachers who have not been arranged to teach courses.
schema_links:
List the names of teachers who have not been arranged to teach courses. | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course_arrange : course_arrange.teacher_id , course_arrange.grade , course_arrange.course_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*
natsql:
select _ from _ where @.@ not in _
natsql and SQL generation:
SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange)
natsql:
SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange)
SQL:
SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange)
self correction:
SELECT name  FROM teacher  WHERE Teacher_ID NOT IN (     SELECT Teacher_ID      FROM course_arrange )

index is 410
SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
What are the names of the teachers whose courses have not been arranged?
schema_links:
What are the names of the teachers whose courses have not been arranged? | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course_arrange : course_arrange.teacher_id , course_arrange.grade , course_arrange.course_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*
natsql:
select _ from _ where @.@ not in _
natsql and SQL generation:
SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange)
natsql:
SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange)
SQL:
SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange)
self correction:
SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT DISTINCT teacher_id FROM course_arrange)

index is 411
SELECT count(*) FROM visitor WHERE age  <  30
How many visitors below age 30 are there?
schema_links:
How many visitors below age 30 are there? | visitor : visitor.age , visitor.name , visitor.level_of_membership , visitor.id , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM visitor WHERE age < 30
natsql:
SELECT count(*) FROM visitor WHERE age < 30
SQL:
SELECT count(*) FROM visitor WHERE age < 30
self correction:
SELECT count(*) FROM visitor WHERE Age < 30

index is 412
SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC
Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.
schema_links:
Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low. | visitor : visitor.level_of_membership , visitor.name , visitor.id , visitor.age , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.*
natsql:
select _ from _ where _ order by _ desc
natsql and SQL generation:
SELECT name FROM visitor WHERE level_of_membership > 4 ORDER BY level_of_membership DESC
natsql:
SELECT name FROM visitor WHERE level_of_membership > 4 ORDER BY level_of_membership DESC
SQL:
SELECT name FROM visitor WHERE level_of_membership > 4 ORDER BY level_of_membership DESC
self correction:
SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Level_of_membership DESC

index is 413
SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4
What is the average age of the visitors whose membership level is not higher than 4?
schema_links:
What is the average age of the visitors whose membership level is not higher than 4? | visitor : visitor.level_of_membership , visitor.age , visitor.name , visitor.id , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.*
natsql:
select avg ( _ ) from _ where _
natsql and SQL generation:
SELECT avg(age) FROM visitor WHERE level_of_membership <= 4
natsql:
SELECT avg(age) FROM visitor WHERE level_of_membership <= 4
SQL:
SELECT avg(age) FROM visitor WHERE level_of_membership <= 4
self correction:
SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4

index is 414
SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC
Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.
schema_links:
Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young. | visitor : visitor.level_of_membership , visitor.name , visitor.age , visitor.id , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.*
natsql:
select _ from _ where _ order by _ desc
natsql and SQL generation:
SELECT name, level_of_membership FROM visitor WHERE level_of_membership > 4 ORDER BY age DESC
natsql:
SELECT name, level_of_membership FROM visitor WHERE level_of_membership > 4 ORDER BY age DESC
SQL:
SELECT name, level_of_membership FROM visitor WHERE level_of_membership > 4 ORDER BY age DESC
self correction:
SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Age DESC

index is 415
SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1
Find the id and name of the museum that has the most staff members?
schema_links:
Find the id and name of the museum that has the most staff members? | museum : museum.museum_id , museum.num_of_staff , museum.name , museum.open_year , museum.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1
natsql:
SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1
SQL:
SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1
self correction:
SELECT museum_id, name  FROM museum  ORDER BY Num_of_Staff DESC  LIMIT 1

index is 416
SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009
Find the average number of staff working for the museums that were open before 2009.
schema_links:
Find the average number of staff working for the museums that were open before 2009. | museum : museum.num_of_staff , museum.open_year , museum.museum_id , museum.name , museum.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.*
natsql:
select avg ( _ ) from _ where _
natsql and SQL generation:
SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009
natsql:
SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009
SQL:
SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009
self correction:
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009

index is 417
SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'
What are the opening year and staff number of the museum named Plaza Museum?
schema_links:
What are the opening year and staff number of the museum named Plaza Museum? | museum : museum.name ( Plaza Museum ) , museum.num_of_staff , museum.open_year , museum.museum_id , museum.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT open_year, num_of_staff FROM museum WHERE name = 'Plaza Museum'
natsql:
SELECT open_year, num_of_staff FROM museum WHERE name = 'Plaza Museum'
SQL:
SELECT open_year, num_of_staff FROM museum WHERE name = 'Plaza Museum'
self correction:
SELECT open_year, num_of_staff FROM museum WHERE Name = 'Plaza Museum'

index is 418
SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)
find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.
schema_links:
find the names of museums which have more staff than the minimum staff number of all museums opened after 2010. | museum : museum.num_of_staff , museum.open_year , museum.name , museum.museum_id , museum.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.*
natsql:
select _ from _ where @.@ > min ( _ ) and _
natsql and SQL generation:
SELECT name FROM museum WHERE num_of_staff > (SELECT min(num_of_staff) FROM museum WHERE open_year > 2010)
natsql:
SELECT name FROM museum WHERE num_of_staff > (SELECT min(num_of_staff) FROM museum WHERE open_year > 2010)
SQL:
SELECT name FROM museum WHERE num_of_staff > (SELECT min(num_of_staff) FROM museum WHERE open_year > 2010)
self correction:
SELECT name  FROM museum  WHERE num_of_staff > (SELECT MIN(num_of_staff) FROM museum WHERE open_year > 2010)

index is 419
SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1
find the id, name and age for visitors who visited some museums more than once.
schema_links:
find the id, name and age for visitors who visited some museums more than once. | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.* | visit : visit.visitor_id , visit.museum_id , visit.total_spent , visit.num_of_ticket , visit.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.*
natsql:
select _ from _ where count ( _ ) > _ group by _
natsql and SQL generation:
SELECT visitor.id, visitor.name, visitor.age 
FROM visitor 
JOIN visit ON visitor.id = visit.visitor_id 
GROUP BY visitor.id, visitor.name, visitor.age 
HAVING COUNT(*) > 1
natsql:
SELECT visitor.id, visitor.name, visitor.age 
FROM visitor 
JOIN visit ON visitor.id = visit.visitor_id 
GROUP BY visitor.id, visitor.name, visitor.age 
HAVING COUNT(*) > 1
SQL:
SELECT visitor.id, visitor.name, visitor.age 
FROM visitor 
JOIN visit ON visitor.id = visit.visitor_id 
GROUP BY visitor.id, visitor.name, visitor.age 
HAVING COUNT(*) > 1
self correction:
SELECT visitor.ID, visitor.Name, visitor.Age  FROM visitor  JOIN visit ON visitor.ID = visit.visitor_ID  GROUP BY visitor.ID, visitor.Name, visitor.Age  HAVING COUNT(*) > 1

index is 420
SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1
What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?
schema_links:
What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets? | visitor : visitor.level_of_membership , visitor.id , visitor.name , visitor.age , visitor.* | visit : visit.total_spent , visit.visitor_id , visit.museum_id , visit.num_of_ticket , visit.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.*
natsql:
select _ from _ group by _ order by sum ( _ ) desc limit _
natsql and SQL generation:
SELECT visitor.id, visitor.name, visitor.level_of_membership
FROM visitor
JOIN visit ON visitor.id = visit.visitor_id
GROUP BY visitor.id, visitor.name, visitor.level_of_membership
ORDER BY sum(visit.total_spent) DESC
LIMIT 1
natsql:
SELECT visitor.id, visitor.name, visitor.level_of_membership
FROM visitor
JOIN visit ON visitor.id = visit.visitor_id
GROUP BY visitor.id, visitor.name, visitor.level_of_membership
ORDER BY sum(visit.total_spent) DESC
LIMIT 1
SQL:
SELECT visitor.id, visitor.name, visitor.level_of_membership
FROM visitor
JOIN visit ON visitor.id = visit.visitor_id
GROUP BY visitor.id, visitor.name, visitor.level_of_membership
ORDER BY sum(visit.total_spent) DESC
LIMIT 1
self correction:
SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID, visitor.Name, visitor.Level_of_membership ORDER BY SUM(visit.Total_spent) DESC LIMIT 1

index is 421
SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1
What are the id and name of the museum visited most times?
schema_links:
What are the id and name of the museum visited most times? | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year , museum.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT museum_id, name FROM museum GROUP BY museum_id, name ORDER BY COUNT(*) DESC LIMIT 1
natsql:
SELECT museum_id, name FROM museum GROUP BY museum_id, name ORDER BY COUNT(*) DESC LIMIT 1
SQL:
SELECT museum_id, name FROM museum GROUP BY museum_id, name ORDER BY COUNT(*) DESC LIMIT 1
self correction:
SELECT museum_id, name  FROM museum  GROUP BY museum_id, name  ORDER BY COUNT(*) DESC  LIMIT 1

index is 422
SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)
What is the name of the museum that had no visitor yet?
schema_links:
What is the name of the museum that had no visitor yet? | museum : museum.name , museum.museum_id , museum.open_year , museum.num_of_staff , museum.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.*
natsql:
select _ from _ where @.@ not in _
natsql and SQL generation:
SELECT name FROM museum WHERE museum_id NOT IN (SELECT museum_id FROM visit)
natsql:
SELECT name FROM museum WHERE museum_id NOT IN (SELECT museum_id FROM visit)
SQL:
SELECT name FROM museum WHERE museum_id NOT IN (SELECT museum_id FROM visit)
self correction:
SELECT name  FROM museum  WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)

index is 423
SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1
Find the name and age of the visitor who bought the most tickets at once.
schema_links:
Find the name and age of the visitor who bought the most tickets at once. | visitor : visitor.age , visitor.name , visitor.id , visitor.level_of_membership , visitor.* | visit : visit.visitor_id , visit.num_of_ticket , visit.museum_id , visit.total_spent , visit.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT name, age FROM visitor ORDER BY num_of_ticket DESC LIMIT 1
natsql:
SELECT name, age FROM visitor ORDER BY num_of_ticket DESC LIMIT 1
SQL:
SELECT name, age FROM visitor ORDER BY num_of_ticket DESC LIMIT 1
self correction:
SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.Name, visitor.Age ORDER BY visit.Num_of_Ticket DESC LIMIT 1

index is 424
SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit
What are the average and maximum number of tickets bought in all visits?
schema_links:
What are the average and maximum number of tickets bought in all visits? | visit : visit.num_of_ticket , visit.museum_id , visit.visitor_id , visit.total_spent , visit.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.*
natsql:
select avg ( _ ) , max ( _ ) from _
natsql and SQL generation:
SELECT AVG(num_of_ticket), MAX(num_of_ticket) FROM visit
natsql:
SELECT AVG(num_of_ticket), MAX(num_of_ticket) FROM visit
SQL:
SELECT AVG(num_of_ticket), MAX(num_of_ticket) FROM visit
self correction:
SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit

index is 425
SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1
What is the total ticket expense of the visitors whose membership level is 1?
schema_links:
What is the total ticket expense of the visitors whose membership level is 1? | visitor : visitor.level_of_membership , visitor.name , visitor.id , visitor.age , visitor.* | visit : visit.total_spent , visit.visitor_id , visit.num_of_ticket , visit.museum_id , visit.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.*
natsql:
select sum ( _ ) from _ where _
natsql and SQL generation:
SELECT sum(total_spent) FROM visit WHERE visitor_id IN (SELECT id FROM visitor WHERE level_of_membership = 1)
natsql:
SELECT sum(total_spent) FROM visit WHERE visitor_id IN (SELECT id FROM visitor WHERE level_of_membership = 1)
SQL:
SELECT sum(total_spent) FROM visit WHERE visitor_id IN (SELECT id FROM visitor WHERE level_of_membership = 1)
self correction:
SELECT SUM(Total_spent) AS Total_Expense FROM visit WHERE visitor_ID IN (SELECT ID FROM visitor WHERE Level_of_membership = 1)

index is 426
SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011
What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?
schema_links:
What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011? | museum : museum.open_year , museum.name , museum.museum_id , museum.num_of_staff , museum.* | visitor : visitor.name , visitor.id , visitor.age , visitor.level_of_membership , visitor.* | visit : visit.visitor_id , visit.museum_id , visit.total_spent , visit.num_of_ticket , visit.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT T2.name
FROM visitor AS T2
WHERE EXISTS (
  SELECT *
  FROM visit AS T1
  JOIN museum AS T3 ON T1.museum_id = T3.museum_id
  WHERE T1.visitor_id = T2.id
    AND (T3.open_year < 2009 OR T3.open_year > 2011)
  GROUP BY T1.visitor_id
  HAVING COUNT(DISTINCT T3.open_year) > 1
)
natsql:
SELECT T2.name
FROM visitor AS T2
WHERE EXISTS (
  SELECT *
  FROM visit AS T1
  JOIN museum AS T3 ON T1.museum_id = T3.museum_id
  WHERE T1.visitor_id = T2.id
    AND (T3.open_year < 2009 OR T3.open_year > 2011)
  GROUP BY T1.visitor_id
  HAVING COUNT(DISTINCT T3.open_year) > 1
)
SQL:
SELECT T2.name
FROM visitor AS T2
WHERE EXISTS (
  SELECT *
  FROM visit AS T1
  JOIN museum AS T3 ON T1.museum_id = T3.museum_id
  WHERE T1.visitor_id = T2.id
    AND (T3.open_year < 2009 OR T3.open_year > 2011)
  GROUP BY T1.visitor_id
  HAVING COUNT(DISTINCT T3.open_year) > 1
)
self correction:
SELECT T2.Name FROM visitor AS T2 WHERE EXISTS (   SELECT T1.visitor_id   FROM visit AS T1   JOIN museum AS T3 ON T1.Museum_ID = T3.Museum_ID   WHERE T1.visitor_ID = T2.ID     AND (T3.Open_Year < 2009 OR T3.Open_Year > 2011)   GROUP BY T1.visitor_ID   HAVING COUNT(DISTINCT T3.Open_Year) > 1 )

index is 427
SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)
Find the number of visitors who did not visit any museum opened after 2010.
schema_links:
Find the number of visitors who did not visit any museum opened after 2010. | museum : museum.open_year , museum.name , museum.museum_id , museum.num_of_staff , museum.* | visit : visit.visitor_id , visit.museum_id , visit.num_of_ticket , visit.total_spent , visit.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.*
natsql:
select count ( _ ) from _ where @.@ not in _ and _
natsql and SQL generation:
SELECT count(visitor_ID) FROM visit WHERE Museum_ID NOT IN (SELECT Museum_ID FROM museum WHERE Open_Year > 2010)
natsql:
SELECT count(visitor_ID) FROM visit WHERE Museum_ID NOT IN (SELECT Museum_ID FROM museum WHERE Open_Year > 2010)
SQL:
SELECT count(visitor_ID) FROM visit WHERE Museum_ID NOT IN (SELECT Museum_ID FROM museum WHERE Open_Year > 2010)
self correction:
SELECT COUNT(DISTINCT visitor_ID) FROM visit WHERE Museum_ID NOT IN (SELECT Museum_ID FROM museum WHERE Open_Year > 2010)

index is 428
SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008
How many museums were opened after 2013 or before 2008?
schema_links:
How many museums were opened after 2013 or before 2008? | museum : museum.open_year , museum.museum_id , museum.name , museum.num_of_staff , museum.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM museum WHERE open_year > 2013 OR open_year < 2008
natsql:
SELECT count(*) FROM museum WHERE open_year > 2013 OR open_year < 2008
SQL:
SELECT count(*) FROM museum WHERE open_year > 2013 OR open_year < 2008
self correction:
SELECT count(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008

index is 429
SELECT count(*) FROM players
Find the total number of players.
schema_links:
Find the total number of players. | players : players.player_id , players.first_name , players.hand , players.last_name , players.birth_date , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.round , matches.loser_name , matches.match_num , matches.minutes , matches.score , matches.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT COUNT(*) FROM players
natsql:
SELECT COUNT(*) FROM players
SQL:
SELECT COUNT(*) FROM players
self correction:
SELECT COUNT(DISTINCT player_id) FROM players

index is 430
SELECT count(*) FROM players
How many players are there?
schema_links:
How many players are there? | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.round , matches.score , matches.match_num , matches.minutes , matches.surface , matches.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT count(*) FROM players
natsql:
SELECT count(*) FROM players
SQL:
SELECT count(*) FROM players
self correction:
SELECT count(player_id) FROM players

index is 431
SELECT count(*) FROM matches
Find the total number of matches.
schema_links:
Find the total number of matches. | matches : matches.match_num , matches.loser_name , matches.minutes , matches.round , matches.score , matches.* | players : players.player_id , players.first_name , players.hand , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT count(*) FROM matches
natsql:
SELECT count(*) FROM matches
SQL:
SELECT count(*) FROM matches
self correction:
SELECT count(*) FROM matches

index is 432
SELECT count(*) FROM matches
Count the number of matches.
schema_links:
Count the number of matches. | matches : matches.match_num , matches.loser_name , matches.loser_hand , matches.loser_id , matches.minutes , matches.* | players : players.player_id , players.first_name , players.hand , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT COUNT(*) FROM matches
natsql:
SELECT COUNT(*) FROM matches
SQL:
SELECT COUNT(*) FROM matches
self correction:
SELECT COUNT(*) FROM matches

index is 433
SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
List the first name and birth date of all players from the country with code USA.
schema_links:
List the first name and birth date of all players from the country with code USA. | players : players.first_name , players.birth_date , players.country_code ( USA ) , players.last_name ( Date ) , players.player_id , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.loser_ioc ( USA ) , matches.winner_ioc ( USA ) , matches.minutes , matches.round , matches.score , matches.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
natsql:
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SQL:
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
self correction:
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'

index is 434
SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
What are the first names and birth dates of players from the USA?
schema_links:
What are the first names and birth dates of players from the USA? | players : players.first_name , players.birth_date , players.country_code ( USA ) , players.player_id , players.hand , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.loser_ioc ( USA ) , matches.winner_ioc ( USA ) , matches.round , matches.score , matches.match_num , matches.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
natsql:
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SQL:
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
self correction:
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'

index is 435
SELECT avg(loser_age) ,  avg(winner_age) FROM matches
Find the average age of losers and winners of all matches.
schema_links:
Find the average age of losers and winners of all matches. | matches : matches.loser_age , matches.winner_age , matches.loser_name , matches.winner_entry , matches.loser_entry , matches.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql:
select avg ( _ ) , avg ( _ ) from _
natsql and SQL generation:
SELECT AVG(loser_age), AVG(winner_age) FROM matches
natsql:
SELECT AVG(loser_age), AVG(winner_age) FROM matches
SQL:
SELECT AVG(loser_age), AVG(winner_age) FROM matches
self correction:
SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches

index is 436
SELECT avg(loser_age) ,  avg(winner_age) FROM matches
What are the average ages of losers and winners across matches?
schema_links:
What are the average ages of losers and winners across matches? | matches : matches.loser_age , matches.winner_age , matches.loser_name , matches.loser_entry , matches.winner_entry , matches.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.tours , rankings.ranking_date , rankings.player_id , rankings.ranking_points , rankings.*
natsql:
select avg ( _ ) , avg ( _ ) from _
natsql and SQL generation:
SELECT AVG(loser_age), AVG(winner_age) FROM matches
natsql:
SELECT AVG(loser_age), AVG(winner_age) FROM matches
SQL:
SELECT AVG(loser_age), AVG(winner_age) FROM matches
self correction:
SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches

index is 437
SELECT avg(winner_rank) FROM matches
Find the average rank of winners in all matches.
schema_links:
Find the average rank of winners in all matches. | matches : matches.winner_rank , matches.winner_rank_points , matches.match_num , matches.winner_name , matches.winner_seed , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.ranking_date , rankings.* | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.*
natsql:
select avg ( _ ) from _
natsql and SQL generation:
SELECT AVG(winner_rank) FROM matches
natsql:
SELECT AVG(winner_rank) FROM matches
SQL:
SELECT AVG(winner_rank) FROM matches
self correction:
SELECT AVG(winner_rank) FROM matches

index is 438
SELECT avg(winner_rank) FROM matches
What is the average rank for winners in all matches?
schema_links:
What is the average rank for winners in all matches? | matches : matches.winner_rank , matches.winner_rank_points , matches.winner_id , matches.winner_name , matches.match_num , matches.* | rankings : rankings.ranking , rankings.ranking_points , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.*
natsql:
select avg ( _ ) from _
natsql and SQL generation:
SELECT AVG(winner_rank) FROM matches
natsql:
SELECT AVG(winner_rank) FROM matches
SQL:
SELECT AVG(winner_rank) FROM matches
self correction:
SELECT AVG(winner_rank) AS average_rank FROM matches

index is 439
SELECT min(loser_rank) FROM matches
Find the highest rank of losers in all matches.
schema_links:
Find the highest rank of losers in all matches. | matches : matches.loser_rank , matches.loser_rank_points , matches.loser_name , matches.loser_id , matches.loser_entry , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.*
natsql:
select min ( _ ) from _
natsql and SQL generation:
SELECT MAX(loser_rank) FROM matches
natsql:
SELECT MAX(loser_rank) FROM matches
SQL:
SELECT MAX(loser_rank) FROM matches
self correction:
SELECT MAX(loser_rank) AS highest_rank_of_losers FROM matches

index is 440
SELECT min(loser_rank) FROM matches
What is the best rank of losers across all matches?
schema_links:
What is the best rank of losers across all matches? | matches : matches.loser_rank , matches.loser_rank_points , matches.loser_name , matches.best_of , matches.loser_id , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.ranking_date , rankings.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.*
natsql:
select min ( _ ) from _
natsql and SQL generation:
SELECT MIN(loser_rank) FROM matches
natsql:
SELECT MIN(loser_rank) FROM matches
SQL:
SELECT MIN(loser_rank) FROM matches
self correction:
SELECT MIN(loser_rank) AS best_rank FROM matches

index is 441
SELECT count(DISTINCT country_code) FROM players
find the number of distinct country codes of all players.
schema_links:
find the number of distinct country codes of all players. | players : players.country_code , players.player_id , players.hand , players.first_name , players.last_name , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*
natsql:
select count ( distinct _ ) from _
natsql and SQL generation:
SELECT COUNT(DISTINCT country_code) FROM players
natsql:
SELECT COUNT(DISTINCT country_code) FROM players
SQL:
SELECT COUNT(DISTINCT country_code) FROM players
self correction:
SELECT COUNT(DISTINCT country_code) AS distinct_country_codes FROM players

index is 442
SELECT count(DISTINCT country_code) FROM players
How many distinct countries do players come from?
schema_links:
How many distinct countries do players come from? | players : players.country_code , players.player_id , players.hand , players.birth_date , players.first_name , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*
natsql:
select count ( distinct _ ) from _
natsql and SQL generation:
SELECT COUNT(DISTINCT country_code) FROM players
natsql:
SELECT COUNT(DISTINCT country_code) FROM players
SQL:
SELECT COUNT(DISTINCT country_code) FROM players
self correction:
SELECT COUNT(DISTINCT country_code) AS distinct_countries FROM players

index is 443
SELECT count(DISTINCT loser_name) FROM matches
Find the number of distinct name of losers.
schema_links:
Find the number of distinct name of losers. | matches : matches.loser_name , matches.loser_rank , matches.loser_id , matches.loser_seed , matches.round , matches.* | players : players.last_name , players.hand , players.player_id , players.first_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql:
select count ( distinct _ ) from _
natsql and SQL generation:
SELECT count(DISTINCT loser_name) FROM matches
natsql:
SELECT count(DISTINCT loser_name) FROM matches
SQL:
SELECT count(DISTINCT loser_name) FROM matches
self correction:
SELECT count(DISTINCT loser_name) FROM matches

index is 444
SELECT count(DISTINCT loser_name) FROM matches
How many different loser names are there?
schema_links:
How many different loser names are there? | matches : matches.loser_name , matches.loser_rank , matches.round , matches.score , matches.loser_entry , matches.* | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.tours , rankings.ranking_date , rankings.player_id , rankings.ranking_points , rankings.*
natsql:
select count ( distinct _ ) from _
natsql and SQL generation:
SELECT count(DISTINCT loser_name) FROM matches
natsql:
SELECT count(DISTINCT loser_name) FROM matches
SQL:
SELECT count(DISTINCT loser_name) FROM matches
self correction:
SELECT count(DISTINCT loser_name) FROM matches

index is 445
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10
Find the name of tourney that has more than 10 matches.
schema_links:
Find the name of tourney that has more than 10 matches. | matches : matches.tourney_id , matches.tourney_name , matches.tourney_level , matches.match_num , matches.tourney_date , matches.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql:
select _ from _ where count ( _ ) > _ group by _
natsql and SQL generation:
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10
natsql:
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10
SQL:
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10
self correction:
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10

index is 446
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10
What are the names of tournaments that have more than 10 matches?
schema_links:
What are the names of tournaments that have more than 10 matches? | matches : matches.tourney_name , matches.tourney_id , matches.tourney_level , matches.match_num , matches.tourney_date , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | players : players.player_id , players.first_name , players.hand , players.last_name , players.birth_date , players.*
natsql:
select _ from _ where count ( _ ) > _ group by _
natsql and SQL generation:
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10
natsql:
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10
SQL:
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10
self correction:
SELECT tourney_name  FROM matches  GROUP BY tourney_name  HAVING COUNT(*) > 10

index is 447
SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016
List the names of all winners who played in both 2013 and 2016.
schema_links:
List the names of all winners who played in both 2013 and 2016. | matches : matches.winner_name , matches.year , matches.winner_id , matches.winner_rank , matches.tourney_id , matches.* | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT DISTINCT winner_name FROM matches WHERE year = 2013 AND winner_name IN (SELECT DISTINCT winner_name FROM matches WHERE year = 2016)
natsql:
SELECT DISTINCT winner_name FROM matches WHERE year = 2013 AND winner_name IN (SELECT DISTINCT winner_name FROM matches WHERE year = 2016)
SQL:
SELECT DISTINCT winner_name FROM matches WHERE year = 2013 AND winner_name IN (SELECT DISTINCT winner_name FROM matches WHERE year = 2016)
self correction:
SELECT winner_name FROM matches WHERE year = 2013 AND winner_name IN (     SELECT winner_name     FROM matches     WHERE year = 2016 )

index is 448
SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016
What are the names of players who won in both 2013 and 2016?
schema_links:
What are the names of players who won in both 2013 and 2016? | matches : matches.winner_name , matches.year , matches.winner_rank , matches.winner_id , matches.round , matches.* | players : players.first_name , players.last_name , players.player_id , players.hand , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT DISTINCT T2.first_name, T2.last_name 
FROM players AS T2 
WHERE EXISTS (
    SELECT * FROM matches AS T1 
    WHERE T1.winner_id = T2.player_id AND (T1.year = 2013 OR T1.year = 2016)
)
natsql:
SELECT DISTINCT T2.first_name, T2.last_name 
FROM players AS T2 
WHERE EXISTS (
    SELECT * FROM matches AS T1 
    WHERE T1.winner_id = T2.player_id AND (T1.year = 2013 OR T1.year = 2016)
)
SQL:
SELECT DISTINCT T2.first_name, T2.last_name 
FROM players AS T2 
WHERE EXISTS (
    SELECT * FROM matches AS T1 
    WHERE T1.winner_id = T2.player_id AND (T1.year = 2013 OR T1.year = 2016)
)
self correction:
SELECT T2.first_name, T2.last_name FROM players AS T2 WHERE EXISTS (     SELECT * FROM matches AS T1     WHERE T1.winner_id = T2.player_id AND T1.year IN (2013, 2016) )

index is 449
SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016
List the number of all matches who played in years of 2013 or 2016.
schema_links:
List the number of all matches who played in years of 2013 or 2016. | matches : matches.year , matches.match_num , matches.loser_name , matches.score , matches.tourney_date , matches.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016
natsql:
SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016
SQL:
SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016
self correction:
SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016

index is 450
SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016
How many matches were played in 2013 or 2016?
schema_links:
How many matches were played in 2013 or 2016? | matches : matches.year , matches.match_num , matches.loser_name , matches.minutes , matches.round , matches.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016
natsql:
SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016
SQL:
SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016
self correction:
SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016

index is 451
SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'
What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?
schema_links:
What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open? | players : players.first_name , players.country_code , players.player_id , players.hand , players.last_name , players.* | matches : matches.tourney_name ( Australian Open , WTA Championships ) , matches.winner_name , matches.winner_age , matches.round , matches.score , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT players.country_code, players.first_name
FROM players
WHERE players.player_id IN (
    SELECT winner_id
    FROM matches
    WHERE tourney_name = 'WTA Championships'
) AND players.player_id IN (
    SELECT winner_id
    FROM matches
    WHERE tourney_name = 'Australian Open'
)
natsql:
SELECT players.country_code, players.first_name
FROM players
WHERE players.player_id IN (
    SELECT winner_id
    FROM matches
    WHERE tourney_name = 'WTA Championships'
) AND players.player_id IN (
    SELECT winner_id
    FROM matches
    WHERE tourney_name = 'Australian Open'
)
SQL:
SELECT players.country_code, players.first_name
FROM players
WHERE players.player_id IN (
    SELECT winner_id
    FROM matches
    WHERE tourney_name = 'WTA Championships'
) AND players.player_id IN (
    SELECT winner_id
    FROM matches
    WHERE tourney_name = 'Australian Open'
)
self correction:
SELECT players.country_code, players.first_name FROM players WHERE players.player_id IN (     SELECT winner_id     FROM matches     WHERE tourney_name = 'WTA Championships'     GROUP BY winner_id     HAVING COUNT(DISTINCT tourney_name) = 2 ) AND players.player_id IN (     SELECT winner_id     FROM matches     WHERE tourney_name = 'Australian Open'     GROUP BY winner_id     HAVING COUNT(DISTINCT tourney_name) = 2 )

index is 452
SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'
What are the first names and country codes for players who won both the WTA Championships and the Australian Open?
schema_links:
What are the first names and country codes for players who won both the WTA Championships and the Australian Open? | players : players.first_name , players.country_code , players.player_id , players.last_name , players.hand , players.* | matches : matches.tourney_name ( Australian Open , WTA Championships ) , matches.winner_name , matches.winner_age , matches.year , matches.round , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT first_name, country_code FROM players WHERE player_id IN (
  SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open'
) AND player_id IN (
  SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships'
)
natsql:
SELECT first_name, country_code FROM players WHERE player_id IN (
  SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open'
) AND player_id IN (
  SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships'
)
SQL:
SELECT first_name, country_code FROM players WHERE player_id IN (
  SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open'
) AND player_id IN (
  SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships'
)
self correction:
SELECT players.first_name, players.country_code  FROM players  JOIN matches AS match1 ON players.player_id = match1.winner_id  JOIN matches AS match2 ON players.player_id = match2.winner_id  WHERE match1.tourney_name = 'Australian Open'  AND match2.tourney_name = 'WTA Championships'

index is 453
SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1
Find the first name and country code of the oldest player.
schema_links:
Find the first name and country code of the oldest player. | players : players.country_code , players.first_name , players.birth_date , players.player_id , players.last_name , players.* | matches : matches.loser_age , matches.round , matches.winner_age , matches.loser_name , matches.match_num , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql:
select _ from _ order by _ asc limit _
natsql and SQL generation:
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1
natsql:
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1
SQL:
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1
self correction:
SELECT players.first_name, players.country_code  FROM players  ORDER BY players.birth_date ASC  LIMIT 1

index is 454
SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1
What is the first name and country code of the oldest player?
schema_links:
What is the first name and country code of the oldest player? | players : players.country_code , players.first_name , players.birth_date , players.player_id , players.last_name , players.* | matches : matches.loser_age , matches.winner_age , matches.round , matches.score , matches.loser_name , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql:
select _ from _ order by _ asc limit _
natsql and SQL generation:
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1
natsql:
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1
SQL:
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1
self correction:
SELECT players.first_name, players.country_code  FROM players  ORDER BY players.birth_date ASC  LIMIT 1

index is 455
SELECT first_name ,  last_name FROM players ORDER BY birth_date
List the first and last name of all players in the order of birth date.
schema_links:
List the first and last name of all players in the order of birth date. | players : players.last_name ( Date , Last ) , players.birth_date , players.first_name , players.player_id , players.hand , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.*
natsql:
select _ from _ order by _ asc
natsql and SQL generation:
SELECT first_name, last_name FROM players ORDER BY birth_date ASC
natsql:
SELECT first_name, last_name FROM players ORDER BY birth_date ASC
SQL:
SELECT first_name, last_name FROM players ORDER BY birth_date ASC
self correction:
SELECT first_name, last_name  FROM players  ORDER BY birth_date ASC

index is 456
SELECT first_name ,  last_name FROM players ORDER BY birth_date
What are the full names of all players, sorted by birth date?
schema_links:
What are the full names of all players, sorted by birth date? | players : players.birth_date , players.first_name , players.last_name ( Date ) , players.player_id , players.hand , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.score , matches.loser_name , matches.match_num , matches.minutes , matches.round , matches.*
natsql:
select _ from _ order by _ asc
natsql and SQL generation:
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players ORDER BY birth_date ASC
natsql:
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players ORDER BY birth_date ASC
SQL:
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players ORDER BY birth_date ASC
self correction:
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players ORDER BY birth_date ASC

index is 457
SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
List the first and last name of all players who are left / L hand in the order of birth date.
schema_links:
List the first and last name of all players who are left / L hand in the order of birth date. | players : players.last_name ( Date , Last ) , players.first_name , players.birth_date , players.hand , players.player_id , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.*
natsql:
select _ from _ where _ order by _ asc
natsql and SQL generation:
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC
natsql:
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC
SQL:
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC
self correction:
SELECT first_name, last_name  FROM players  WHERE hand = 'L'  ORDER BY birth_date;

index is 458
SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
What are the full names of all left handed players, in order of birth date?
schema_links:
What are the full names of all left handed players, in order of birth date? | players : players.birth_date , players.first_name , players.hand , players.last_name ( Date ) , players.player_id , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.round , matches.match_num , matches.minutes , matches.score , matches.surface , matches.*
natsql:
select _ from _ where _ order by _ asc
natsql and SQL generation:
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players WHERE hand = 'left' ORDER BY birth_date ASC
natsql:
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players WHERE hand = 'left' ORDER BY birth_date ASC
SQL:
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players WHERE hand = 'left' ORDER BY birth_date ASC
self correction:
SELECT CONCAT(first_name, ' ', last_name) AS full_name  FROM players  WHERE hand = 'left'  ORDER BY birth_date ASC

index is 459
SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1
Find the first name and country code of the player who did the most number of tours.
schema_links:
Find the first name and country code of the player who did the most number of tours. | players : players.first_name , players.country_code , players.player_id , players.last_name , players.hand , players.* | rankings : rankings.tours , rankings.player_id , rankings.ranking , rankings.ranking_points , rankings.ranking_date , rankings.* | matches : matches.score , matches.match_num , matches.minutes , matches.round , matches.surface , matches.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT first_name, country_code FROM players ORDER BY tours DESC LIMIT 1
natsql:
SELECT first_name, country_code FROM players ORDER BY tours DESC LIMIT 1
SQL:
SELECT first_name, country_code FROM players ORDER BY tours DESC LIMIT 1
self correction:
SELECT first_name, country_code  FROM players  INNER JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.player_id  ORDER BY COUNT(rankings.tours) DESC  LIMIT 1

index is 460
SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1
What is the first name and country code of the player with the most tours?
schema_links:
What is the first name and country code of the player with the most tours? | rankings : rankings.tours , rankings.player_id , rankings.ranking , rankings.ranking_points , rankings.ranking_date , rankings.* | players : players.first_name , players.country_code , players.player_id , players.last_name , players.hand , players.* | matches : matches.round , matches.score , matches.match_num , matches.minutes , matches.surface , matches.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT first_name, country_code FROM players ORDER BY tours DESC LIMIT 1
natsql:
SELECT first_name, country_code FROM players ORDER BY tours DESC LIMIT 1
SQL:
SELECT first_name, country_code FROM players ORDER BY tours DESC LIMIT 1
self correction:
SELECT players.first_name, players.country_code  FROM players  INNER JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.player_id  ORDER BY COUNT(rankings.tours) DESC  LIMIT 1

index is 461
SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
Find the year that has the most number of matches.
schema_links:
Find the year that has the most number of matches. | matches : matches.year , matches.match_num , matches.loser_name , matches.round , matches.score , matches.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1
natsql:
SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1
SQL:
SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1

index is 462
SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
Which year had the most matches?
schema_links:
Which year had the most matches? | matches : matches.year , matches.match_num , matches.loser_name , matches.minutes , matches.round , matches.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:

natsql:

SQL:

self correction:
SELECT The SQLite SQL query to determine which year had the most matches would be as follows:  ```sql SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1; ```  Explanation: - The query selects the "year" column from the "matches" table. - It uses the COUNT(*) function to count the number of matches for each year. - The results are grouped by the "year" column using the GROUP BY clause. - The results are then ordered in descending order based on the match count using the ORDER BY clause. - Finally, the LIMIT 1 clause is used to retrieve only the year with the highest match count.

index is 463
SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1
Find the name and rank points of the winner who won the most times.
schema_links:
Find the name and rank points of the winner who won the most times. | matches : matches.winner_rank_points , matches.winner_name , matches.winner_rank , matches.winner_id , matches.winner_seed , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.ranking_date , rankings.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT winner_name, winner_rank_points
FROM matches
GROUP BY winner_name, winner_rank_points
ORDER BY count(*) DESC
LIMIT 1
natsql:
SELECT winner_name, winner_rank_points
FROM matches
GROUP BY winner_name, winner_rank_points
ORDER BY count(*) DESC
LIMIT 1
SQL:
SELECT winner_name, winner_rank_points
FROM matches
GROUP BY winner_name, winner_rank_points
ORDER BY count(*) DESC
LIMIT 1
self correction:
SELECT matches.winner_name, SUM(matches.winner_rank_points) AS total_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY matches.winner_name ORDER BY COUNT(*) DESC LIMIT 1

index is 464
SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1
What is the name of the winner who has won the most matches, and how many rank points does this player have?
schema_links:
What is the name of the winner who has won the most matches, and how many rank points does this player have? | matches : matches.winner_name , matches.winner_rank_points , matches.winner_rank , matches.winner_id , matches.loser_name , matches.* | rankings : rankings.ranking_points , rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.* | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT winner_name, MAX(winner_rank_points) AS max_rank_points 
FROM matches 
GROUP BY winner_name 
ORDER BY COUNT(*) DESC 
LIMIT 1
natsql:
SELECT winner_name, MAX(winner_rank_points) AS max_rank_points 
FROM matches 
GROUP BY winner_name 
ORDER BY COUNT(*) DESC 
LIMIT 1
SQL:
SELECT winner_name, MAX(winner_rank_points) AS max_rank_points 
FROM matches 
GROUP BY winner_name 
ORDER BY COUNT(*) DESC 
LIMIT 1
self correction:
SELECT winner_name, MAX(winner_rank_points) AS max_rank_points  FROM matches  JOIN players ON matches.winner_id = players.player_id GROUP BY winner_name  ORDER BY COUNT(*) DESC  LIMIT 1

index is 465
SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.
schema_links:
Find the name of the winner who has the highest rank points and participated in the Australian Open tourney. | matches : matches.tourney_name ( Australian Open ) , matches.winner_rank_points , matches.winner_name , matches.tourney_id , matches.winner_rank , matches.* | rankings : rankings.ranking_points , rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.* | players : players.player_id , players.first_name , players.hand , players.last_name , players.birth_date , players.*
natsql:
select _ from _ where _ order by _ desc limit _
natsql and SQL generation:
SELECT winner_name 
FROM matches 
WHERE tourney_name = 'Australian Open' 
ORDER BY winner_rank_points DESC 
LIMIT 1
natsql:
SELECT winner_name 
FROM matches 
WHERE tourney_name = 'Australian Open' 
ORDER BY winner_rank_points DESC 
LIMIT 1
SQL:
SELECT winner_name 
FROM matches 
WHERE tourney_name = 'Australian Open' 
ORDER BY winner_rank_points DESC 
LIMIT 1
self correction:
SELECT matches.winner_name  FROM matches  JOIN players ON matches.winner_id = players.player_id  WHERE matches.tourney_name = 'Australian Open'  ORDER BY matches.winner_rank_points DESC  LIMIT 1

index is 466
SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
What is the name of the winner with the most rank points who participated in the Australian Open tournament?
schema_links:
What is the name of the winner with the most rank points who participated in the Australian Open tournament? | matches : matches.tourney_name ( Australian Open ) , matches.winner_rank_points , matches.winner_name , matches.winner_rank , matches.tourney_id , matches.* | rankings : rankings.ranking_points , rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.* | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.*
natsql:
select _ from _ where _ order by _ desc limit _
natsql and SQL generation:
SELECT winner_name
FROM matches
WHERE tourney_name = 'Australian Open'
ORDER BY winner_rank_points DESC
LIMIT 1
natsql:
SELECT winner_name
FROM matches
WHERE tourney_name = 'Australian Open'
ORDER BY winner_rank_points DESC
LIMIT 1
SQL:
SELECT winner_name
FROM matches
WHERE tourney_name = 'Australian Open'
ORDER BY winner_rank_points DESC
LIMIT 1
self correction:
SELECT matches.winner_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'Australian Open' ORDER BY matches.winner_rank_points DESC LIMIT 1

index is 467
SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1
find the names of loser and winner who played in the match with greatest number of minutes.
schema_links:
find the names of loser and winner who played in the match with greatest number of minutes. | matches : matches.loser_name , matches.minutes , matches.match_num , matches.winner_name , matches.loser_id , matches.* | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC LIMIT 1
natsql:
SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC LIMIT 1
SQL:
SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC LIMIT 1
self correction:
SELECT matches.winner_name, matches.loser_name FROM matches ORDER BY minutes DESC LIMIT 1

index is 468
SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1
What are the names of the winner and loser who played in the longest match?
schema_links:
What are the names of the winner and loser who played in the longest match? | matches : matches.minutes , matches.loser_name , matches.winner_name , matches.round , matches.match_num , matches.* | players : players.first_name , players.last_name , players.hand , players.player_id , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC LIMIT 1
natsql:
SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC LIMIT 1
SQL:
SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC LIMIT 1
self correction:
SELECT matches.winner_name, matches.loser_name  FROM matches  ORDER BY matches.minutes DESC  LIMIT 1

index is 469
SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
Find the average ranking for each player and their first name.
schema_links:
Find the average ranking for each player and their first name. | rankings : rankings.ranking , rankings.ranking_points , rankings.player_id , rankings.ranking_date , rankings.tours , rankings.* | players : players.first_name , players.player_id , players.last_name , players.hand , players.birth_date , players.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*
natsql:
select avg ( _ ) , _ from _ group by _
natsql and SQL generation:
SELECT AVG(ranking) ,  T2.first_name FROM rankings AS T1 JOIN players AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.first_name
natsql:
SELECT AVG(ranking) ,  T2.first_name FROM rankings AS T1 JOIN players AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.first_name
SQL:
SELECT AVG(ranking) ,  T2.first_name FROM rankings AS T1 JOIN players AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.first_name
self correction:
SELECT AVG(T1.ranking) AS average_ranking, T2.first_name  FROM rankings AS T1  JOIN players AS T2 ON T1.player_id = T2.player_id  GROUP BY T2.first_name

index is 470
SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
What are the first names of all players, and their average rankings?
schema_links:
What are the first names of all players, and their average rankings? | players : players.first_name , players.player_id , players.last_name , players.hand , players.birth_date , players.* | rankings : rankings.ranking , rankings.ranking_points , rankings.player_id , rankings.ranking_date , rankings.tours , rankings.* | matches : matches.loser_rank , matches.minutes , matches.round , matches.score , matches.surface , matches.*
natsql:
select avg ( _ ) , _ from _ group by _
natsql and SQL generation:
SELECT first_name, AVG(ranking) FROM players GROUP BY first_name
natsql:
SELECT first_name, AVG(ranking) FROM players GROUP BY first_name
SQL:
SELECT first_name, AVG(ranking) FROM players GROUP BY first_name
self correction:
SELECT players.first_name, AVG(rankings.ranking)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name

index is 471
SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
Find the total ranking points for each player and their first name.
schema_links:
Find the total ranking points for each player and their first name. | players : players.first_name , players.player_id , players.last_name , players.hand , players.birth_date , players.* | rankings : rankings.ranking_points , rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*
natsql:
select sum ( _ ) , _ from _ group by _
natsql and SQL generation:
SELECT sum(ranking_points), players.first_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name
natsql:
SELECT sum(ranking_points), players.first_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name
SQL:
SELECT sum(ranking_points), players.first_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name
self correction:
SELECT SUM(rankings.ranking_points) AS total_ranking_points, players.first_name FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.player_id, players.first_name

index is 472
SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
What are the first names of all players, and their total ranking points?
schema_links:
What are the first names of all players, and their total ranking points? | players : players.first_name , players.player_id , players.last_name , players.hand , players.birth_date , players.* | rankings : rankings.ranking_points , rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*
natsql:
select sum ( _ ) , _ from _ group by _
natsql and SQL generation:
SELECT first_name, sum(ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name
natsql:
SELECT first_name, sum(ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name
SQL:
SELECT first_name, sum(ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name
self correction:
SELECT players.first_name, sum(rankings.ranking_points)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name

index is 473
SELECT count(*) ,  country_code FROM players GROUP BY country_code
find the number of players for each country.
schema_links:
find the number of players for each country. | players : players.country_code , players.player_id , players.first_name , players.last_name , players.hand , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*
natsql:
select count ( _ ) , _ from _ group by _
natsql and SQL generation:
SELECT country_code, COUNT(player_id) FROM players GROUP BY country_code
natsql:
SELECT country_code, COUNT(player_id) FROM players GROUP BY country_code
SQL:
SELECT country_code, COUNT(player_id) FROM players GROUP BY country_code
self correction:
SELECT country_code, COUNT(DISTINCT player_id) FROM players GROUP BY country_code

index is 474
SELECT count(*) ,  country_code FROM players GROUP BY country_code
How many players are from each country?
schema_links:
How many players are from each country? | players : players.country_code , players.player_id , players.hand , players.first_name , players.last_name , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*
natsql:
select count ( _ ) , _ from _ group by _
natsql and SQL generation:
SELECT COUNT(*) , country_code FROM players GROUP BY country_code
natsql:
SELECT COUNT(*) , country_code FROM players GROUP BY country_code
SQL:
SELECT COUNT(*) , country_code FROM players GROUP BY country_code
self correction:
SELECT COUNT(*) AS player_count, country_code FROM players GROUP BY country_code

index is 475
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
find the code of the country where has the greatest number of players.
schema_links:
find the code of the country where has the greatest number of players. | players : players.country_code , players.player_id , players.hand , players.first_name , players.last_name , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
natsql:
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
SQL:
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1

index is 476
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
What is the code of the country with the most players?
schema_links:
What is the code of the country with the most players? | players : players.country_code , players.player_id , players.hand , players.first_name , players.last_name , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.round , matches.score , matches.match_num , matches.minutes , matches.surface , matches.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1
natsql:
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1
SQL:
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1
self correction:
SELECT country_code, COUNT(*) AS player_count FROM players GROUP BY country_code ORDER BY player_count DESC LIMIT 1

index is 477
SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50
Find the codes of countries that have more than 50 players.
schema_links:
Find the codes of countries that have more than 50 players. | players : players.country_code , players.player_id , players.hand , players.first_name , players.last_name , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*
natsql:
select _ from _ where count ( _ ) > _ group by _
natsql and SQL generation:
SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50
natsql:
SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50
SQL:
SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50
self correction:
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(DISTINCT player_id) > 50

index is 478
SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50
What are the codes of countries with more than 50 players?
schema_links:
What are the codes of countries with more than 50 players? | players : players.country_code , players.player_id , players.hand , players.first_name , players.last_name , players.* | rankings : rankings.player_id , rankings.ranking , rankings.ranking_points , rankings.tours , rankings.ranking_date , rankings.* | matches : matches.round , matches.score , matches.match_num , matches.minutes , matches.surface , matches.*
natsql:
select _ from _ where count ( _ ) > _ group by _
natsql and SQL generation:
SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50
natsql:
SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50
SQL:
SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50
self correction:
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50

index is 479
SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date
Find the total number of tours for each ranking date.
schema_links:
Find the total number of tours for each ranking date. | rankings : rankings.ranking_date , rankings.tours , rankings.ranking , rankings.ranking_points , rankings.player_id , rankings.* | players : players.last_name ( Date ) , players.player_id , players.hand , players.first_name , players.birth_date , players.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*
natsql:
select sum ( _ ) , _ from _ group by _
natsql and SQL generation:
SELECT ranking_date, sum(tours) FROM rankings GROUP BY ranking_date
natsql:
SELECT ranking_date, sum(tours) FROM rankings GROUP BY ranking_date
SQL:
SELECT ranking_date, sum(tours) FROM rankings GROUP BY ranking_date
self correction:
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date

index is 480
SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date
How many total tours were there for each ranking date?
schema_links:
How many total tours were there for each ranking date? | rankings : rankings.ranking_date , rankings.tours , rankings.ranking , rankings.ranking_points , rankings.player_id , rankings.* | players : players.last_name ( Date ) , players.hand , players.player_id , players.first_name , players.birth_date , players.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*
natsql:
select sum ( _ ) , _ from _ group by _
natsql and SQL generation:
SELECT SUM(tours), ranking_date FROM rankings GROUP BY ranking_date
natsql:
SELECT SUM(tours), ranking_date FROM rankings GROUP BY ranking_date
SQL:
SELECT SUM(tours), ranking_date FROM rankings GROUP BY ranking_date
self correction:
SELECT SUM(tours) AS total_tours, ranking_date FROM rankings GROUP BY ranking_date

index is 481
SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR
Find the number of matches happened in each year.
schema_links:
Find the number of matches happened in each year. | matches : matches.year , matches.match_num , matches.loser_name , matches.round , matches.score , matches.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql:
select count ( _ ) , _ from _ group by _
natsql and SQL generation:
SELECT COUNT(*) ,  year FROM matches GROUP BY year
natsql:
SELECT COUNT(*) ,  year FROM matches GROUP BY year
SQL:
SELECT COUNT(*) ,  year FROM matches GROUP BY year
self correction:
SELECT COUNT(*) AS match_count, year FROM matches GROUP BY year

index is 482
SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR
How many matches were played in each year?
schema_links:
How many matches were played in each year? | matches : matches.year , matches.match_num , matches.loser_name , matches.minutes , matches.round , matches.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql:
select count ( _ ) , _ from _ group by _
natsql and SQL generation:
SELECT COUNT(*) ,  year FROM matches GROUP BY year
natsql:
SELECT COUNT(*) ,  year FROM matches GROUP BY year
SQL:
SELECT COUNT(*) ,  year FROM matches GROUP BY year
self correction:
SELECT COUNT(*) AS match_count, year  FROM matches  GROUP BY year

index is 483
SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3
Find the name and rank of the 3 youngest winners across all matches.
schema_links:
Find the name and rank of the 3 youngest winners across all matches. | matches : matches.winner_name , matches.winner_rank , matches.winner_age , matches.year , matches.loser_age , matches.* | players : players.birth_date , players.player_id , players.first_name , players.last_name , players.hand , players.* | rankings : rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.ranking_date , rankings.*
natsql:
select distinct _ from _ order by _ asc limit _
natsql and SQL generation:
SELECT DISTINCT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3
natsql:
SELECT DISTINCT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3
SQL:
SELECT DISTINCT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3
self correction:
SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY players.birth_date DESC LIMIT 3

index is 484
SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3
What are the names and ranks of the three youngest winners across all matches?
schema_links:
What are the names and ranks of the three youngest winners across all matches? | matches : matches.winner_name , matches.winner_rank , matches.winner_age , matches.year , matches.loser_age , matches.* | players : players.birth_date , players.player_id , players.first_name , players.hand , players.last_name , players.* | rankings : rankings.ranking , rankings.ranking_points , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.*
natsql:
select distinct _ from _ order by _ asc limit _
natsql and SQL generation:
SELECT DISTINCT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3
natsql:
SELECT DISTINCT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3
SQL:
SELECT DISTINCT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3
self correction:
SELECT DISTINCT winner_name, winner_rank  FROM matches  JOIN players ON matches.winner_id = players.player_id ORDER BY players.birth_date ASC  LIMIT 3

index is 485
SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'
How many different winners both participated in the WTA Championships and were left handed?
schema_links:
How many different winners both participated in the WTA Championships and were left handed? | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.* | matches : matches.tourney_name ( WTA Championships ) , matches.winner_hand , matches.winner_entry , matches.winner_id , matches.winner_name , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql:
select count ( distinct _ ) from _ where _
natsql and SQL generation:
SELECT count(DISTINCT T1.winner_id) FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.tourney_name = 'WTA Championships' AND T2.hand = 'L'
natsql:
SELECT count(DISTINCT T1.winner_id) FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.tourney_name = 'WTA Championships' AND T2.hand = 'L'
SQL:
SELECT count(DISTINCT T1.winner_id) FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.tourney_name = 'WTA Championships' AND T2.hand = 'L'
self correction:
SELECT count(DISTINCT T1.winner_id)  FROM matches AS T1  JOIN players AS T2 ON T1.winner_id = T2.player_id  WHERE T1.tourney_name = 'WTA Championships'  AND T2.hand = 'L'

index is 486
SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'
Find the number of left handed winners who participated in the WTA Championships.
schema_links:
Find the number of left handed winners who participated in the WTA Championships. | players : players.hand , players.player_id , players.first_name , players.birth_date , players.last_name , players.* | matches : matches.tourney_name ( WTA Championships ) , matches.winner_hand , matches.tourney_id , matches.loser_hand , matches.winner_id , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql:
select count ( distinct _ ) from _ where _
natsql and SQL generation:
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'
natsql:
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'
SQL:
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'
self correction:
SELECT COUNT(DISTINCT winner_id) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = 'WTA Championships' AND players.hand = 'L'

index is 487
SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
Find the first name, country code and birth date of the winner who has the highest rank points in all matches.
schema_links:
Find the first name, country code and birth date of the winner who has the highest rank points in all matches. | players : players.first_name , players.birth_date , players.country_code , players.last_name ( Date ) , players.player_id , players.* | matches : matches.winner_rank_points , matches.winner_name , matches.winner_rank , matches.winner_hand , matches.loser_rank_points , matches.* | rankings : rankings.ranking_points , rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT first_name, country_code, birth_date
FROM players
WHERE player_id = (
    SELECT winner_id
    FROM matches
    ORDER BY winner_rank_points DESC
    LIMIT 1
)
natsql:
SELECT first_name, country_code, birth_date
FROM players
WHERE player_id = (
    SELECT winner_id
    FROM matches
    ORDER BY winner_rank_points DESC
    LIMIT 1
)
SQL:
SELECT first_name, country_code, birth_date
FROM players
WHERE player_id = (
    SELECT winner_id
    FROM matches
    ORDER BY winner_rank_points DESC
    LIMIT 1
)
self correction:
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY matches.winner_rank_points DESC LIMIT 1

index is 488
SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
What is the first name, country code, and birth date of the player with the most winner rank points across all matches?
schema_links:
What is the first name, country code, and birth date of the player with the most winner rank points across all matches? | players : players.first_name , players.birth_date , players.country_code , players.player_id , players.last_name ( Date ) , players.* | matches : matches.winner_rank_points , matches.match_num , matches.winner_rank , matches.loser_rank , matches.loser_rank_points , matches.* | rankings : rankings.ranking_points , rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT first_name, country_code, birth_date
FROM players
ORDER BY (SELECT MAX(winner_rank_points) FROM matches) DESC
LIMIT 1
natsql:
SELECT first_name, country_code, birth_date
FROM players
ORDER BY (SELECT MAX(winner_rank_points) FROM matches) DESC
LIMIT 1
SQL:
SELECT first_name, country_code, birth_date
FROM players
ORDER BY (SELECT MAX(winner_rank_points) FROM matches) DESC
LIMIT 1
self correction:
SELECT players.first_name, players.country_code, players.birth_date FROM players INNER JOIN matches ON players.player_id = matches.winner_id GROUP BY players.player_id ORDER BY MAX(matches.winner_rank_points) DESC LIMIT 1

index is 489
SELECT count(*) ,  hand FROM players GROUP BY hand
Find the number of players for each hand type.
schema_links:
Find the number of players for each hand type. | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.tours , rankings.ranking_date , rankings.player_id , rankings.ranking_points , rankings.* | matches : matches.loser_hand , matches.minutes , matches.round , matches.score , matches.surface , matches.*
natsql:
select count ( _ ) , _ from _ group by _
natsql and SQL generation:
SELECT COUNT(hand), hand FROM players GROUP BY hand
natsql:
SELECT COUNT(hand), hand FROM players GROUP BY hand
SQL:
SELECT COUNT(hand), hand FROM players GROUP BY hand
self correction:
SELECT COUNT(*) AS player_count, hand  FROM players  GROUP BY hand

index is 490
SELECT count(*) ,  hand FROM players GROUP BY hand
How many players are there for each hand type?
schema_links:
How many players are there for each hand type? | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.loser_hand , matches.minutes , matches.round , matches.score , matches.surface , matches.*
natsql:
select count ( _ ) , _ from _ group by _
natsql and SQL generation:
SELECT COUNT(*) ,  hand FROM players GROUP BY hand
natsql:
SELECT COUNT(*) ,  hand FROM players GROUP BY hand
SQL:
SELECT COUNT(*) ,  hand FROM players GROUP BY hand
self correction:
SELECT COUNT(*) AS player_count, hand  FROM players  GROUP BY hand

index is 491
SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'
How many ships ended up being 'Captured'?
schema_links:
How many ships ended up being 'Captured'? | ship : ship.disposition_of_ship ( Captured ) , ship.id , ship.name , ship.ship_type , ship.location , ship.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.* | battle : battle.id , battle.name , battle.date , battle.result , battle.bulgarian_commander , battle.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'
natsql:
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'
SQL:
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'
self correction:
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'

index is 492
SELECT name ,  tonnage FROM ship ORDER BY name DESC
List the name and tonnage ordered by in descending alphaetical order for the names.
schema_links:
List the name and tonnage ordered by in descending alphaetical order for the names. | ship : ship.tonnage , ship.name , ship.id , ship.ship_type , ship.location , ship.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.* | battle : battle.id , battle.name , battle.date , battle.result , battle.bulgarian_commander , battle.*
natsql:
select _ from _ order by _ desc
natsql and SQL generation:
SELECT name, tonnage FROM ship ORDER BY name DESC
natsql:
SELECT name, tonnage FROM ship ORDER BY name DESC
SQL:
SELECT name, tonnage FROM ship ORDER BY name DESC
self correction:
SELECT name, tonnage  FROM ship  ORDER BY name DESC, tonnage DESC

index is 493
SELECT name ,  date FROM battle
List the name, date and result of each battle.
schema_links:
List the name, date and result of each battle. | battle : battle.name , battle.date , battle.result , battle.id , battle.bulgarian_commander , battle.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.* | ship : ship.id , ship.name , ship.location , ship.lost_in_battle , ship.tonnage , ship.*
natsql:
select _ from _
natsql and SQL generation:
SELECT name, date, result FROM battle
natsql:
SELECT name, date, result FROM battle
SQL:
SELECT name, date, result FROM battle
self correction:
SELECT name, date, result FROM battle

index is 494
SELECT max(killed) ,  min(killed) FROM death
What is maximum and minimum death toll caused each time?
schema_links:
What is maximum and minimum death toll caused each time? | death : death.killed , death.caused_by_ship_id , death.id , death.note , death.injured , death.* | battle : battle.id , battle.name , battle.date , battle.result , battle.bulgarian_commander , battle.* | ship : ship.name , ship.id , ship.ship_type , ship.location , ship.lost_in_battle , ship.*
natsql:
select max ( _ ) , min ( _ ) from _
natsql and SQL generation:
SELECT MAX(killed), MIN(killed) FROM death
natsql:
SELECT MAX(killed), MIN(killed) FROM death
SQL:
SELECT MAX(killed), MIN(killed) FROM death
self correction:
SELECT MAX(killed) AS maximum_death_toll, MIN(killed) AS minimum_death_toll FROM death

index is 495
SELECT avg(injured) FROM death
What is the average number of injuries caused each time?
schema_links:
What is the average number of injuries caused each time? | death : death.injured , death.id , death.caused_by_ship_id , death.note , death.killed , death.* | battle : battle.result , battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.* | ship : ship.lost_in_battle , ship.id , ship.name , ship.ship_type , ship.location , ship.*
natsql:
select avg ( _ ) from _
natsql and SQL generation:
SELECT AVG(injured) FROM death
natsql:
SELECT AVG(injured) FROM death
SQL:
SELECT AVG(injured) FROM death
self correction:
SELECT AVG(injured) AS average_injuries FROM death

index is 496
SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'
What are the death and injury situations caused by the ship with tonnage 't'?
schema_links:
What are the death and injury situations caused by the ship with tonnage 't'? | ship : ship.tonnage , ship.name , ship.id , ship.location , ship.lost_in_battle , ship.* | death : death.injured , death.killed , death.caused_by_ship_id , death.id , death.note , death.* | battle : battle.id , battle.name , battle.date , battle.result , battle.bulgarian_commander , battle.*
natsql:
select _ from _ where _
natsql and SQL generation:
Since there is no specific query provided for this question, I cannot generate the SQL query. Please provide more information or a specific query for me to assist you further.
natsql:
Since there is no specific query provided for this question, I cannot generate the SQL query. Please provide more information or a specific query for me to assist you further.
SQL:
Since there is no specific query provided for this question, I cannot generate the SQL query. Please provide more information or a specific query for me to assist you further.
self correction:
SELECT I apologize for the confusion, but it seems that the provided question is incomplete. In order to generate a valid SQL query, I need more specific information or a complete query to work with. Please provide the necessary details or a specific query so that I can assist you further.

index is 497
SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'
What are the name and results of the battles when the bulgarian commander is not 'Boril'
schema_links:
What are the name and results of the battles when the bulgarian commander is not 'Boril' | battle : battle.bulgarian_commander ( Boril ) , battle.name , battle.result , battle.id , battle.date , battle.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.* | ship : ship.id , ship.name , ship.location , ship.lost_in_battle , ship.tonnage , ship.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril'
natsql:
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril'
SQL:
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril'
self correction:
SELECT name, result FROM battle WHERE bulgarian_commander <> 'Boril'

index is 498
SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'
What are the different ids and names of the battles that lost any 'Brig' type shipes?
schema_links:
What are the different ids and names of the battles that lost any 'Brig' type shipes? | battle : battle.name , battle.id , battle.result , battle.date , battle.bulgarian_commander , battle.* | ship : ship.ship_type ( Brig ) , ship.lost_in_battle , ship.name , ship.id , ship.location , ship.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.*
natsql:
select distinct _ from _ where _
natsql and SQL generation:
SELECT DISTINCT battle.id, battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig'
natsql:
SELECT DISTINCT battle.id, battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig'
SQL:
SELECT DISTINCT battle.id, battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig'
self correction:
SELECT battle.id, battle.name  FROM battle  JOIN ship ON battle.id = ship.lost_in_battle  WHERE ship.ship_type = 'Brig'

index is 499
SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10
What are the ids and names of the battles that led to more than 10 people killed in total.
schema_links:
What are the ids and names of the battles that led to more than 10 people killed in total. | battle : battle.id , battle.name , battle.result , battle.date , battle.bulgarian_commander , battle.* | death : death.killed , death.caused_by_ship_id , death.id , death.note , death.injured , death.* | ship : ship.name , ship.id , ship.location , ship.lost_in_battle , ship.tonnage , ship.*
natsql:
select _ from _ where sum ( _ ) > _ group by _
natsql and SQL generation:
SELECT id, name FROM battle GROUP BY id, name HAVING sum(killed) > 10
natsql:
SELECT id, name FROM battle GROUP BY id, name HAVING sum(killed) > 10
SQL:
SELECT id, name FROM battle GROUP BY id, name HAVING sum(killed) > 10
self correction:
SELECT battle.id, battle.name  FROM battle  JOIN ship ON ship.lost_in_battle = battle.id  JOIN death ON death.caused_by_ship_id = ship.id  GROUP BY battle.id, battle.name  HAVING SUM(death.killed) > 10

index is 500
SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1
What is the ship id and name that caused most total injuries?
schema_links:
What is the ship id and name that caused most total injuries? | ship : ship.name , ship.id , ship.ship_type , ship.lost_in_battle , ship.location , ship.* | death : death.injured , death.caused_by_ship_id , death.id , death.killed , death.note , death.* | battle : battle.id , battle.name , battle.date , battle.result , battle.bulgarian_commander , battle.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT id, name FROM ship GROUP BY id, name ORDER BY sum(injured) DESC LIMIT 1
natsql:
SELECT id, name FROM ship GROUP BY id, name ORDER BY sum(injured) DESC LIMIT 1
SQL:
SELECT id, name FROM ship GROUP BY id, name ORDER BY sum(injured) DESC LIMIT 1
self correction:
SELECT ship.id, ship.name  FROM ship JOIN death ON death.caused_by_ship_id = ship.id GROUP BY ship.id, ship.name  ORDER BY sum(death.injured) DESC  LIMIT 1

index is 501
SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'
What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?
schema_links:
What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'? | battle : battle.bulgarian_commander ( Kaloyan ) , battle.latin_commander ( Baldwin I ) , battle.name , battle.result , battle.id , battle.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.* | ship : ship.id , ship.name , ship.location , ship.lost_in_battle , ship.tonnage , ship.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'
natsql:
SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'
SQL:
SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'
self correction:
SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'

index is 502
SELECT count(DISTINCT RESULT) FROM battle
How many different results are there for the battles?
schema_links:
How many different results are there for the battles? | battle : battle.result , battle.name , battle.id , battle.date , battle.bulgarian_commander , battle.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.* | ship : ship.id , ship.name , ship.location , ship.lost_in_battle , ship.tonnage , ship.*
natsql:
select count ( distinct _ ) from _
natsql and SQL generation:
SELECT count(DISTINCT result) FROM battle
natsql:
SELECT count(DISTINCT result) FROM battle
SQL:
SELECT count(DISTINCT result) FROM battle
self correction:
SELECT count(DISTINCT result) FROM battle

index is 503
SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );
How many battles did not lose any ship with tonnage '225'?
schema_links:
How many battles did not lose any ship with tonnage '225'? | ship : ship.tonnage , ship.lost_in_battle , ship.id , ship.name , ship.location , ship.* | battle : battle.result , battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.*
natsql:
select count ( _ ) from _ where @.@ not in _ and _
natsql and SQL generation:
SELECT count(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225') AND result <> 'lost'
natsql:
SELECT count(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225') AND result <> 'lost'
SQL:
SELECT count(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225') AND result <> 'lost'
self correction:
SELECT count(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225') AND result <> 'lost'

index is 504
SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'
List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'
schema_links:
List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta' | battle : battle.name , battle.date , battle.result , battle.id , battle.bulgarian_commander , battle.* | ship : ship.name ( HMS Atalanta , Lettice ) , ship.lost_in_battle , ship.id , ship.ship_type , ship.location , ship.* | death : death.killed , death.id , death.note , death.injured , death.caused_by_ship_id , death.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT name, date FROM battle WHERE (name = 'Lettice' OR name = 'HMS Atalanta') AND (lost_in_battle = id)
natsql:
SELECT name, date FROM battle WHERE (name = 'Lettice' OR name = 'HMS Atalanta') AND (lost_in_battle = id)
SQL:
SELECT name, date FROM battle WHERE (name = 'Lettice' OR name = 'HMS Atalanta') AND (lost_in_battle = id)
self correction:
SELECT name, date  FROM battle  WHERE id IN (   SELECT lost_in_battle    FROM ship    WHERE name = 'Lettice' OR name = 'HMS Atalanta' )

index is 505
SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'
Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.
schema_links:
Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'. | ship : ship.location ( English Channel ) , ship.lost_in_battle , ship.name , ship.id , ship.ship_type , ship.* | battle : battle.bulgarian_commander , battle.name , battle.result , battle.id , battle.date , battle.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.*
natsql:
select _ from _ where except_ @.@ is _ and _
natsql and SQL generation:
SELECT name, result, bulgarian_commander
FROM battle
WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel')
natsql:
SELECT name, result, bulgarian_commander
FROM battle
WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel')
SQL:
SELECT name, result, bulgarian_commander
FROM battle
WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel')
self correction:
SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel')

index is 506
SELECT note FROM death WHERE note LIKE '%East%'
What are the notes of the death events which has substring 'East'?
schema_links:
What are the notes of the death events which has substring 'East'? | death : death.note , death.killed , death.caused_by_ship_id , death.id , death.injured , death.* | battle : battle.id , battle.name , battle.date , battle.result , battle.bulgarian_commander , battle.* | ship : ship.name , ship.id , ship.ship_type , ship.location , ship.lost_in_battle , ship.*
natsql:
select _ from _ where _ like _
natsql and SQL generation:
SELECT note FROM death WHERE note LIKE '%East%'
natsql:
SELECT note FROM death WHERE note LIKE '%East%'
SQL:
SELECT note FROM death WHERE note LIKE '%East%'
self correction:
SELECT note FROM death WHERE note LIKE '%East%'

index is 507
SELECT line_1 ,  line_2 FROM addresses
what are all the addresses including line 1 and line 2?
schema_links:
what are all the addresses including line 1 and line 2? | addresses : addresses.line_1 , addresses.line_2 , addresses.other_address_details , addresses.address_id , addresses.line_3 , addresses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | students : students.email_address , students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.* | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.*
natsql:
select _ from _
natsql and SQL generation:
SELECT line_1, line_2 FROM addresses
natsql:
SELECT line_1, line_2 FROM addresses
SQL:
SELECT line_1, line_2 FROM addresses
self correction:
SELECT line_1, line_2 FROM Addresses

index is 508
SELECT line_1 ,  line_2 FROM addresses
What is the first and second line for all addresses?
schema_links:
What is the first and second line for all addresses? | addresses : addresses.line_2 , addresses.line_1 , addresses.address_id , addresses.line_3 , addresses.city , addresses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.* | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.*
natsql:
select _ from _
natsql and SQL generation:
SELECT line_1, line_2 FROM addresses
natsql:
SELECT line_1, line_2 FROM addresses
SQL:
SELECT line_1, line_2 FROM addresses
self correction:
SELECT line_1, line_2 FROM Addresses

index is 509
SELECT count(*) FROM Courses
How many courses in total are listed?
schema_links:
How many courses in total are listed? | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details , sections.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT count(*) FROM courses
natsql:
SELECT count(*) FROM courses
SQL:
SELECT count(*) FROM courses
self correction:
SELECT count(*) FROM Courses

index is 510
SELECT count(*) FROM Courses
How many courses are there?
schema_links:
How many courses are there? | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | sections : sections.course_id , sections.section_id , sections.section_name , sections.section_description , sections.other_details , sections.* | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT count(*) FROM courses
natsql:
SELECT count(*) FROM courses
SQL:
SELECT count(*) FROM courses
self correction:
SELECT count(*) FROM Courses

index is 511
SELECT course_description FROM Courses WHERE course_name  =  'math'
How is the math course described?
schema_links:
How is the math course described? | courses : courses.course_name ( math ) , courses.course_description , courses.course_id , courses.other_details , courses.* | departments : departments.department_name ( math ) , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.* | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details , sections.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT course_description FROM Courses WHERE course_name = 'math'
natsql:
SELECT course_description FROM Courses WHERE course_name = 'math'
SQL:
SELECT course_description FROM Courses WHERE course_name = 'math'
self correction:
SELECT course_description  FROM Courses  WHERE course_name = 'math'

index is 512
SELECT course_description FROM Courses WHERE course_name  =  'math'
What are the descriptions for all the math courses?
schema_links:
What are the descriptions for all the math courses? | courses : courses.course_description , courses.course_name ( math ) , courses.course_id , courses.other_details , courses.* | departments : departments.department_name ( math ) , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.* | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details , sections.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT course_description FROM Courses WHERE course_name LIKE '%math%'
natsql:
SELECT course_description FROM Courses WHERE course_name LIKE '%math%'
SQL:
SELECT course_description FROM Courses WHERE course_name LIKE '%math%'
self correction:
SELECT course_description FROM Courses WHERE course_name LIKE '%math%'

index is 513
SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'
What is the zip code of the address in the city Port Chelsea?
schema_links:
What is the zip code of the address in the city Port Chelsea? | addresses : addresses.city ( Port Chelsea ) , addresses.zip_postcode , addresses.address_id , addresses.country , addresses.line_1 , addresses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'
natsql:
SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'
SQL:
SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'
self correction:
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'

index is 514
SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'
What is the zip code for Port Chelsea?
schema_links:
What is the zip code for Port Chelsea? | addresses : addresses.city ( Port Chelsea ) , addresses.zip_postcode , addresses.country , addresses.address_id , addresses.line_1 , addresses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.* | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'
natsql:
SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'
SQL:
SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'
self correction:
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'

index is 515
SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1
Which department offers the most number of degrees? List department name and id.
schema_links:
Which department offers the most number of degrees? List department name and id. | degree_programs : degree_programs.department_id , degree_programs.degree_program_id , degree_programs.degree_summary_description , degree_programs.degree_summary_name , degree_programs.other_details , degree_programs.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | addresses : addresses.line_2 , addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT department_name, department_id
FROM degree_programs
GROUP BY department_id
ORDER BY COUNT(*) DESC
LIMIT 1
natsql:
SELECT department_name, department_id
FROM degree_programs
GROUP BY department_id
ORDER BY COUNT(*) DESC
LIMIT 1
SQL:
SELECT department_name, department_id
FROM degree_programs
GROUP BY department_id
ORDER BY COUNT(*) DESC
LIMIT 1
self correction:
SELECT department_name, department_id FROM Departments JOIN Degree_Programs ON Degree_Programs.department_id = Departments.department_id GROUP BY department_name, department_id ORDER BY COUNT(Degree_Programs.degree_program_id) DESC LIMIT 1

index is 516
select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1
What is the name and id of the department with the most number of degrees ?
schema_links:
What is the name and id of the department with the most number of degrees ? | degree_programs : degree_programs.department_id , degree_programs.degree_program_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.* | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT department_name, department_id
FROM departments
GROUP BY department_name, department_id
ORDER BY COUNT(*) DESC
LIMIT 1
natsql:
SELECT department_name, department_id
FROM departments
GROUP BY department_name, department_id
ORDER BY COUNT(*) DESC
LIMIT 1
SQL:
SELECT department_name, department_id
FROM departments
GROUP BY department_name, department_id
ORDER BY COUNT(*) DESC
LIMIT 1
self correction:
SELECT departments.department_name, departments.department_id FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY departments.department_name, departments.department_id ORDER BY COUNT(degree_programs.degree_program_id) DESC LIMIT 1

index is 517
SELECT count(DISTINCT department_id) FROM Degree_Programs
How many departments offer any degree?
schema_links:
How many departments offer any degree? | degree_programs : degree_programs.department_id , degree_programs.degree_program_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | courses : courses.course_name , courses.course_description , courses.course_id , courses.other_details , courses.* | sections : sections.section_name , sections.section_id , sections.course_id , sections.section_description , sections.other_details , sections.*
natsql:
select count ( distinct _ ) from _
natsql and SQL generation:
SELECT COUNT(DISTINCT department_id) FROM degree_programs
natsql:
SELECT COUNT(DISTINCT department_id) FROM degree_programs
SQL:
SELECT COUNT(DISTINCT department_id) FROM degree_programs
self correction:
SELECT COUNT(DISTINCT department_id) FROM Departments

index is 518
SELECT count(DISTINCT department_id) FROM Degree_Programs
How many different departments offer degrees?
schema_links:
How many different departments offer degrees? | degree_programs : degree_programs.department_id , degree_programs.degree_program_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | sections : sections.section_name , sections.section_id , sections.course_id , sections.section_description , sections.other_details , sections.*
natsql:
select count ( distinct _ ) from _
natsql and SQL generation:
SELECT count(DISTINCT department_id) FROM degree_programs
natsql:
SELECT count(DISTINCT department_id) FROM degree_programs
SQL:
SELECT count(DISTINCT department_id) FROM degree_programs
self correction:
SELECT COUNT(DISTINCT department_id) FROM Departments

index is 519
SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs
How many different degree names are offered?
schema_links:
How many different degree names are offered? | degree_programs : degree_programs.degree_summary_name , degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | student_enrolment : student_enrolment.degree_program_id , student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | courses : courses.course_name , courses.course_description , courses.course_id , courses.other_details , courses.* | sections : sections.section_name , sections.section_id , sections.course_id , sections.section_description , sections.other_details , sections.*
natsql:
select count ( distinct _ ) from _
natsql and SQL generation:
SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs
natsql:
SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs
SQL:
SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs
self correction:
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs

index is 520
SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs
How many different degrees are offered?
schema_links:
How many different degrees are offered? | degree_programs : degree_programs.degree_summary_name , degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | student_enrolment : student_enrolment.degree_program_id , student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | sections : sections.section_name , sections.course_id , sections.section_description , sections.section_id , sections.other_details , sections.* | courses : courses.course_name , courses.course_description , courses.course_id , courses.other_details , courses.*
natsql:
select count ( distinct _ ) from _
natsql and SQL generation:
SELECT COUNT(DISTINCT degree_program_id) FROM Degree_Programs
natsql:
SELECT COUNT(DISTINCT degree_program_id) FROM Degree_Programs
SQL:
SELECT COUNT(DISTINCT degree_program_id) FROM Degree_Programs
self correction:
SELECT COUNT(DISTINCT degree_program_id) AS degree_count FROM Degree_Programs

index is 521
SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'
How many degrees does the engineering department offer?
schema_links:
How many degrees does the engineering department offer? | degree_programs : degree_programs.department_id , degree_programs.degree_program_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | addresses : addresses.line_2 , addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering')
natsql:
SELECT count(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering')
SQL:
SELECT count(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering')
self correction:
SELECT count(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering')

index is 522
SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'
How many degrees does the engineering department have?
schema_links:
How many degrees does the engineering department have? | degree_programs : degree_programs.department_id , degree_programs.degree_program_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.line_2 , addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.* | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering')
natsql:
SELECT count(*) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering')
SQL:
SELECT count(*) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering')
self correction:
SELECT count(*)  FROM Degree_Programs  WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering')

index is 523
SELECT section_name ,  section_description FROM Sections
What are the names and descriptions of all the sections?
schema_links:
What are the names and descriptions of all the sections? | sections : sections.section_description , sections.section_name , sections.section_id , sections.course_id , sections.other_details , sections.* | courses : courses.course_description , courses.course_name , courses.course_id , courses.other_details , courses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.*
natsql:
select _ from _
natsql and SQL generation:
SELECT section_description, section_name FROM sections
natsql:
SELECT section_description, section_name FROM sections
SQL:
SELECT section_description, section_name FROM sections
self correction:
SELECT section_name, section_description FROM Sections

index is 524
SELECT section_name ,  section_description FROM Sections
What are the names and descriptions for all the sections?
schema_links:
What are the names and descriptions for all the sections? | sections : sections.section_description , sections.section_name , sections.section_id , sections.course_id , sections.other_details , sections.* | courses : courses.course_name , courses.course_description , courses.course_id , courses.other_details , courses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.*
natsql:
select _ from _
natsql and SQL generation:
SELECT section_name, section_description FROM sections
natsql:
SELECT section_name, section_description FROM sections
SQL:
SELECT section_name, section_description FROM sections
self correction:
SELECT section_name, section_description FROM Sections

index is 525
SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2
What are the names and id of courses having at most 2 sections?
schema_links:
What are the names and id of courses having at most 2 sections? | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.* | sections : sections.course_id , sections.section_id , sections.section_name , sections.section_description , sections.other_details , sections.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.*
natsql:
select _ from _ where count ( _ ) <= _ group by _
natsql and SQL generation:
SELECT courses.course_name, courses.course_id 
FROM courses 
JOIN sections ON courses.course_id = sections.course_id 
GROUP BY courses.course_id 
HAVING count(sections.section_id) <= 2
natsql:
SELECT courses.course_name, courses.course_id 
FROM courses 
JOIN sections ON courses.course_id = sections.course_id 
GROUP BY courses.course_id 
HAVING count(sections.section_id) <= 2
SQL:
SELECT courses.course_name, courses.course_id 
FROM courses 
JOIN sections ON courses.course_id = sections.course_id 
GROUP BY courses.course_id 
HAVING count(sections.section_id) <= 2
self correction:
SELECT courses.course_name, courses.course_id FROM courses JOIN sections ON courses.course_id = sections.course_id GROUP BY courses.course_name, courses.course_id HAVING count(sections.section_id) <= 2

index is 526
SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2
What are the names and ids of every course with less than 2 sections?
schema_links:
What are the names and ids of every course with less than 2 sections? | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | sections : sections.course_id , sections.section_id , sections.section_name , sections.section_description , sections.other_details , sections.* | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.*
natsql:
select _ from _ where count ( _ ) <= _ group by _
natsql and SQL generation:
SELECT course_name, course_id FROM courses GROUP BY course_name, course_id HAVING count(*) < 2
natsql:
SELECT course_name, course_id FROM courses GROUP BY course_name, course_id HAVING count(*) < 2
SQL:
SELECT course_name, course_id FROM courses GROUP BY course_name, course_id HAVING count(*) < 2
self correction:
SELECT courses.course_name, courses.course_id FROM courses LEFT JOIN sections ON courses.course_id = sections.course_id GROUP BY courses.course_name, courses.course_id HAVING COUNT(sections.section_id) < 2

index is 527
SELECT section_name FROM Sections ORDER BY section_name DESC
List the section_name in reversed lexicographical order.
schema_links:
List the section_name in reversed lexicographical order. | sections : sections.section_name , sections.section_description , sections.section_id , sections.course_id , sections.other_details , sections.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql:
select _ from _ order by _ desc
natsql and SQL generation:
SELECT section_name FROM sections ORDER BY section_name DESC
natsql:
SELECT section_name FROM sections ORDER BY section_name DESC
SQL:
SELECT section_name FROM sections ORDER BY section_name DESC
self correction:
SELECT sections.section_name FROM sections ORDER BY sections.section_name DESC

index is 528
SELECT section_name FROM Sections ORDER BY section_name DESC
What are the names of the sections in reverse alphabetical order?
schema_links:
What are the names of the sections in reverse alphabetical order? | sections : sections.section_name , sections.section_description , sections.section_id , sections.course_id , sections.other_details , sections.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql:
select _ from _ order by _ desc
natsql and SQL generation:
SELECT section_name FROM sections ORDER BY section_name DESC
natsql:
SELECT section_name FROM sections ORDER BY section_name DESC
SQL:
SELECT section_name FROM sections ORDER BY section_name DESC
self correction:
SELECT section_name FROM Sections ORDER BY section_name DESC

index is 529
SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1
What is the semester which most student registered in? Show both the name and the id.
schema_links:
What is the semester which most student registered in? Show both the name and the id. | semesters : semesters.semester_name , semesters.semester_id , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment : student_enrolment.semester_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.degree_program_id , student_enrolment.other_details , student_enrolment.* | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.* | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.*
natsql:
select _ from _ where @.@ join _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT semesters.semester_name, semesters.semester_id
FROM semesters
JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id
GROUP BY semesters.semester_id
ORDER BY count(*) DESC
LIMIT 1
natsql:
SELECT semesters.semester_name, semesters.semester_id
FROM semesters
JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id
GROUP BY semesters.semester_id
ORDER BY count(*) DESC
LIMIT 1
SQL:
SELECT semesters.semester_name, semesters.semester_id
FROM semesters
JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id
GROUP BY semesters.semester_id
ORDER BY count(*) DESC
LIMIT 1
self correction:
SELECT semesters.semester_name, semesters.semester_id FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id, semesters.semester_name ORDER BY count(*) DESC LIMIT 1

index is 530
SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1
For each semester, what is the name and id of the one with the most students registered?
schema_links:
For each semester, what is the name and id of the one with the most students registered? | semesters : semesters.semester_name , semesters.semester_id , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment : student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.other_details , student_enrolment.* | students : students.student_id , students.first_name , students.current_address_id , students.permanent_address_id , students.middle_name , students.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.*
natsql:
select _ from _ where @.@ join _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT T1.semester_name, T1.semester_id
FROM semesters AS T1
JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id
GROUP BY T1.semester_name, T1.semester_id
ORDER BY count(*) DESC
LIMIT 1
natsql:
SELECT T1.semester_name, T1.semester_id
FROM semesters AS T1
JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id
GROUP BY T1.semester_name, T1.semester_id
ORDER BY count(*) DESC
LIMIT 1
SQL:
SELECT T1.semester_name, T1.semester_id
FROM semesters AS T1
JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id
GROUP BY T1.semester_name, T1.semester_id
ORDER BY count(*) DESC
LIMIT 1
self correction:
SELECT T1.semester_name, T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY COUNT(*) DESC LIMIT 1

index is 531
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
What is the description of the department whose name has the substring the computer?
schema_links:
What is the description of the department whose name has the substring the computer? | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.line_2 , addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.* | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql:
select _ from _ where _ like _
natsql and SQL generation:
SELECT department_description FROM departments WHERE department_name LIKE '%computer%'
natsql:
SELECT department_description FROM departments WHERE department_name LIKE '%computer%'
SQL:
SELECT department_description FROM departments WHERE department_name LIKE '%computer%'
self correction:
SELECT department_description FROM departments WHERE department_name LIKE '%computer%'

index is 532
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
What is the department description for the one whose name has the word computer?
schema_links:
What is the department description for the one whose name has the word computer? | departments : departments.department_description , departments.department_name , departments.department_id , departments.other_details , departments.* | students : students.first_name , students.last_name , students.middle_name , students.email_address , students.student_id , students.* | addresses : addresses.line_2 , addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql:
select _ from _ where _ like _
natsql and SQL generation:
SELECT department_description FROM departments WHERE department_name LIKE '%computer%'
natsql:
SELECT department_description FROM departments WHERE department_name LIKE '%computer%'
SQL:
SELECT department_description FROM departments WHERE department_name LIKE '%computer%'
self correction:
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'

index is 533
SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.
schema_links:
Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id. | students : students.first_name , students.middle_name , students.last_name , students.student_id , students.permanent_address_id , students.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.semester_id , student_enrolment.degree_program_id , student_enrolment.student_id , student_enrolment.other_details , student_enrolment.* | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.* | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.*
natsql:
select _ from _ where count ( _ ) = _ group by _
natsql and SQL generation:
SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id
FROM students AS T1
JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id
GROUP BY T1.student_id
HAVING COUNT(DISTINCT T2.degree_program_id) = 2
AND COUNT(DISTINCT T2.semester_id) = 1
natsql:
SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id
FROM students AS T1
JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id
GROUP BY T1.student_id
HAVING COUNT(DISTINCT T2.degree_program_id) = 2
AND COUNT(DISTINCT T2.semester_id) = 1
SQL:
SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id
FROM students AS T1
JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id
GROUP BY T1.student_id
HAVING COUNT(DISTINCT T2.degree_program_id) = 2
AND COUNT(DISTINCT T2.semester_id) = 1
self correction:
SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id, T1.first_name, T1.middle_name, T1.last_name HAVING COUNT(DISTINCT T2.degree_program_id) = 2 AND COUNT(DISTINCT T2.semester_id) = 1

index is 534
SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?
schema_links:
What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester? | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.degree_program_id , student_enrolment.other_details , student_enrolment.* | students : students.first_name , students.last_name , students.middle_name , students.student_id , students.email_address , students.* | semesters : semesters.semester_name , semesters.semester_id , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*
natsql:
select _ from _ where count ( _ ) = _ group by _
natsql and SQL generation:
SELECT T2.first_name, T2.middle_name, T2.last_name, T2.student_id FROM student_enrolment AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(DISTINCT T1.degree_program_id) = 2 AND count(DISTINCT T1.semester_id) = 1
natsql:
SELECT T2.first_name, T2.middle_name, T2.last_name, T2.student_id FROM student_enrolment AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(DISTINCT T1.degree_program_id) = 2 AND count(DISTINCT T1.semester_id) = 1
SQL:
SELECT T2.first_name, T2.middle_name, T2.last_name, T2.student_id FROM student_enrolment AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(DISTINCT T1.degree_program_id) = 2 AND count(DISTINCT T1.semester_id) = 1
self correction:
SELECT T2.first_name, T2.middle_name, T2.last_name, T2.student_id FROM Student_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING COUNT(DISTINCT T1.degree_program_id) = 2 AND COUNT(DISTINCT T1.semester_id) = 1

index is 535
SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'
Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.
schema_links:
Who is enrolled in a Bachelor degree program? List the first name, middle name, last name. | students : students.first_name , students.middle_name , students.last_name , students.student_id , students.email_address , students.* | degree_programs : degree_programs.degree_summary_name ( Bachelor ) , degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.*
natsql:
select distinct _ from _ where _
natsql and SQL generation:
SELECT DISTINCT students.first_name, students.middle_name, students.last_name FROM students 
JOIN student_enrolment ON students.student_id = student_enrolment.student_id 
JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id 
WHERE degree_programs.degree_summary_name = 'Bachelor'
natsql:
SELECT DISTINCT students.first_name, students.middle_name, students.last_name FROM students 
JOIN student_enrolment ON students.student_id = student_enrolment.student_id 
JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id 
WHERE degree_programs.degree_summary_name = 'Bachelor'
SQL:
SELECT DISTINCT students.first_name, students.middle_name, students.last_name FROM students 
JOIN student_enrolment ON students.student_id = student_enrolment.student_id 
JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id 
WHERE degree_programs.degree_summary_name = 'Bachelor'
self correction:
SELECT students.first_name, students.middle_name, students.last_name  FROM students  JOIN student_enrolment ON students.student_id = student_enrolment.student_id  JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  JOIN departments ON degree_programs.department_id = departments.department_id  WHERE departments.degree_summary_name = 'Bachelor';

index is 536
SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'
What are the first, middle, and last names for everybody enrolled in a Bachelors program?
schema_links:
What are the first, middle, and last names for everybody enrolled in a Bachelors program? | students : students.last_name , students.first_name , students.middle_name , students.student_id , students.email_address , students.* | student_enrolment : student_enrolment.degree_program_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | degree_programs : degree_programs.degree_summary_name , degree_programs.department_id , degree_programs.degree_summary_description , degree_programs.degree_program_id , degree_programs.other_details , degree_programs.* | courses : courses.course_name , courses.course_description , courses.course_id , courses.other_details , courses.*
natsql:
select distinct _ from _ where _
natsql and SQL generation:
SELECT DISTINCT first_name, middle_name, last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_name = 'Bachelors'
natsql:
SELECT DISTINCT first_name, middle_name, last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_name = 'Bachelors'
SQL:
SELECT DISTINCT first_name, middle_name, last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_name = 'Bachelors'
self correction:
SELECT first_name, middle_name, last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelors'

index is 537
SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1
Find the kind of program which most number of students are enrolled in?
schema_links:
Find the kind of program which most number of students are enrolled in? | student_enrolment : student_enrolment.degree_program_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | degree_programs : degree_programs.degree_summary_name , degree_programs.degree_program_id , degree_programs.degree_summary_description , degree_programs.department_id , degree_programs.other_details , degree_programs.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | sections : sections.section_name , sections.course_id , sections.section_description , sections.section_id , sections.other_details , sections.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1
natsql:
SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1
SQL:
SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1
self correction:
SELECT degree_program_id, COUNT(*) AS enrolment_count FROM Student_Enrolment GROUP BY degree_program_id ORDER BY enrolment_count DESC LIMIT 1

index is 538
SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1
What is the degree summary name that has the most number of students enrolled?
schema_links:
What is the degree summary name that has the most number of students enrolled? | degree_programs : degree_programs.degree_summary_name , degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | student_enrolment : student_enrolment.degree_program_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | courses : courses.course_name , courses.course_description , courses.course_id , courses.other_details , courses.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT degree_summary_name FROM degree_programs GROUP BY degree_summary_name ORDER BY count(*) DESC LIMIT 1
natsql:
SELECT degree_summary_name FROM degree_programs GROUP BY degree_summary_name ORDER BY count(*) DESC LIMIT 1
SQL:
SELECT degree_summary_name FROM degree_programs GROUP BY degree_summary_name ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT degree_summary_name, COUNT(*) AS num_students_enrolled FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY num_students_enrolled DESC LIMIT 1

index is 539
SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1
Find the program which most number of students are enrolled in. List both the id and the summary.
schema_links:
Find the program which most number of students are enrolled in. List both the id and the summary. | student_enrolment : student_enrolment.degree_program_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | degree_programs : degree_programs.degree_summary_name , degree_programs.degree_program_id , degree_programs.degree_summary_description , degree_programs.department_id , degree_programs.other_details , degree_programs.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | addresses : addresses.line_2 , addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT T2.degree_program_id, T2.degree_summary_name
FROM student_enrolment AS T1
JOIN degree_programs AS T2 ON T1.degree_program_id = T2.degree_program_id
GROUP BY T1.degree_program_id, T2.degree_summary_name
ORDER BY count(T1.student_enrolment_id) DESC
LIMIT 1
natsql:
SELECT T2.degree_program_id, T2.degree_summary_name
FROM student_enrolment AS T1
JOIN degree_programs AS T2 ON T1.degree_program_id = T2.degree_program_id
GROUP BY T1.degree_program_id, T2.degree_summary_name
ORDER BY count(T1.student_enrolment_id) DESC
LIMIT 1
SQL:
SELECT T2.degree_program_id, T2.degree_summary_name
FROM student_enrolment AS T1
JOIN degree_programs AS T2 ON T1.degree_program_id = T2.degree_program_id
GROUP BY T1.degree_program_id, T2.degree_summary_name
ORDER BY count(T1.student_enrolment_id) DESC
LIMIT 1
self correction:
SELECT degree_programs.degree_program_id, degree_programs.degree_summary_name FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY student_enrolment.degree_program_id, degree_programs.degree_summary_name ORDER BY COUNT(student_enrolment.student_enrolment_id) DESC LIMIT 1

index is 540
SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1
What is the program id and the summary of the degree that has the most students enrolled?
schema_links:
What is the program id and the summary of the degree that has the most students enrolled? | degree_programs : degree_programs.degree_summary_name , degree_programs.degree_program_id , degree_programs.degree_summary_description , degree_programs.department_id , degree_programs.other_details , degree_programs.* | student_enrolment : student_enrolment.degree_program_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT degree_program_id, degree_summary_name FROM degree_programs GROUP BY degree_program_id, degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1
natsql:
SELECT degree_program_id, degree_summary_name FROM degree_programs GROUP BY degree_program_id, degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1
SQL:
SELECT degree_program_id, degree_summary_name FROM degree_programs GROUP BY degree_program_id, degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1
self correction:
SELECT degree_program_id, degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1

index is 541
SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.
schema_links:
Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id. | students : students.first_name , students.last_name , students.middle_name , students.student_id , students.email_address , students.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.* | addresses : addresses.line_2 , addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.*
natsql:
select _ , count ( _ ) , _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, count(T3.student_enrolment_id) AS num_enrollments
FROM students AS T1
JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id
JOIN student_enrolment_courses AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id
GROUP BY T1.student_id
ORDER BY num_enrollments DESC
LIMIT 1
natsql:
SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, count(T3.student_enrolment_id) AS num_enrollments
FROM students AS T1
JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id
JOIN student_enrolment_courses AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id
GROUP BY T1.student_id
ORDER BY num_enrollments DESC
LIMIT 1
SQL:
SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, count(T3.student_enrolment_id) AS num_enrollments
FROM students AS T1
JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id
JOIN student_enrolment_courses AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id
GROUP BY T1.student_id
ORDER BY num_enrollments DESC
LIMIT 1
self correction:
SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(T2.student_enrolment_id) AS num_enrollments FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id, T1.first_name, T1.middle_name, T1.last_name ORDER BY num_enrollments DESC LIMIT 1

index is 542
SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?
schema_links:
What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program? | students : students.first_name , students.last_name , students.middle_name , students.student_id , students.cell_mobile_number , students.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.* | addresses : addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.country , addresses.*
natsql:
select _ , count ( _ ) , _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT first_name, middle_name, last_name, student_id, COUNT(*) AS enrollment_count
FROM students
JOIN student_enrolment ON students.student_id = student_enrolment.student_id
GROUP BY students.student_id
ORDER BY enrollment_count DESC
LIMIT 1
natsql:
SELECT first_name, middle_name, last_name, student_id, COUNT(*) AS enrollment_count
FROM students
JOIN student_enrolment ON students.student_id = student_enrolment.student_id
GROUP BY students.student_id
ORDER BY enrollment_count DESC
LIMIT 1
SQL:
SELECT first_name, middle_name, last_name, student_id, COUNT(*) AS enrollment_count
FROM students
JOIN student_enrolment ON students.student_id = student_enrolment.student_id
GROUP BY students.student_id
ORDER BY enrollment_count DESC
LIMIT 1
self correction:
SELECT students.first_name, students.middle_name, students.last_name, students.student_id, COUNT(*) AS enrollment_count FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id ORDER BY enrollment_count DESC LIMIT 1

index is 543
SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )
Which semesters do not have any student enrolled? List the semester name.
schema_links:
Which semesters do not have any student enrolled? List the semester name. | semesters : semesters.semester_name , semesters.semester_description , semesters.semester_id , semesters.other_details , semesters.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.degree_program_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | courses : courses.course_name , courses.course_description , courses.course_id , courses.other_details , courses.*
natsql:
select _ from _ where @.@ not in _
natsql and SQL generation:
SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment)
natsql:
SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment)
SQL:
SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment)
self correction:
SELECT semester_name  FROM semesters  WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment)

index is 544
SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )
What is the name of the semester with no students enrolled?
schema_links:
What is the name of the semester with no students enrolled? | semesters : semesters.semester_name , semesters.semester_id , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.degree_program_id , student_enrolment.other_details , student_enrolment.* | courses : courses.course_name , courses.course_description , courses.course_id , courses.other_details , courses.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.*
natsql:
select _ from _ where @.@ not in _
natsql and SQL generation:
SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT DISTINCT semester_id FROM student_enrolment)
natsql:
SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT DISTINCT semester_id FROM student_enrolment)
SQL:
SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT DISTINCT semester_id FROM student_enrolment)
self correction:
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT DISTINCT semester_id FROM Student_Enrolment)

index is 545
SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id
What are all the course names of the courses which ever have students enrolled in?
schema_links:
What are all the course names of the courses which ever have students enrolled in? | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.*
natsql:
select distinct _ from _ where @.@ join _
natsql and SQL generation:
SELECT DISTINCT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses)
natsql:
SELECT DISTINCT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses)
SQL:
SELECT DISTINCT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses)
self correction:
SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses)

index is 546
SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id
What are the names of all courses that have some students enrolled?
schema_links:
What are the names of all courses that have some students enrolled? | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.*
natsql:
select distinct _ from _ where @.@ join _
natsql and SQL generation:
SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id
natsql:
SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id
SQL:
SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id
self correction:
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id;

index is 547
SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1
What's the name of the course with most number of enrollments?
schema_links:
What's the name of the course with most number of enrollments? | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT course_name FROM courses GROUP BY course_name ORDER BY count(*) DESC LIMIT 1
natsql:
SELECT course_name FROM courses GROUP BY course_name ORDER BY count(*) DESC LIMIT 1
SQL:
SELECT course_name FROM courses GROUP BY course_name ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY course_name ORDER BY COUNT(*) DESC LIMIT 1

index is 548
SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1
What is the name of the course with the most students enrolled?
schema_links:
What is the name of the course with the most students enrolled? | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT course_name FROM courses 
GROUP BY course_name 
ORDER BY COUNT(*) DESC 
LIMIT 1
natsql:
SELECT course_name FROM courses 
GROUP BY course_name 
ORDER BY COUNT(*) DESC 
LIMIT 1
SQL:
SELECT course_name FROM courses 
GROUP BY course_name 
ORDER BY COUNT(*) DESC 
LIMIT 1
self correction:
SELECT course_name  FROM Courses  JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id  GROUP BY Courses.course_name  ORDER BY COUNT(*) DESC  LIMIT 1

index is 549
SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.
schema_links:
Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program. | students : students.last_name , students.date_first_registered , students.current_address_id , students.student_id , students.date_left , students.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | addresses : addresses.state_province_county , addresses.address_id , addresses.city , addresses.country , addresses.line_1 , addresses.* | degree_programs : degree_programs.degree_summary_description , degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.other_details , degree_programs.*
natsql:
select _ from _ where _ except_ @.@ join _
natsql and SQL generation:
SELECT last_name FROM students WHERE state_province_county = 'North Carolina' AND student_id NOT IN (SELECT student_id FROM student_enrolment)
natsql:
SELECT last_name FROM students WHERE state_province_county = 'North Carolina' AND student_id NOT IN (SELECT student_id FROM student_enrolment)
SQL:
SELECT last_name FROM students WHERE state_province_county = 'North Carolina' AND student_id NOT IN (SELECT student_id FROM student_enrolment)
self correction:
SELECT last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE Addresses.state_province_county = 'North Carolina' AND Students.student_id NOT IN (     SELECT student_id     FROM Student_Enrolment )

index is 550
SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
What are the last name of the students who live in North Carolina but have not registered in any degree programs?
schema_links:
What are the last name of the students who live in North Carolina but have not registered in any degree programs? | students : students.last_name , students.date_first_registered , students.student_id , students.date_left , students.first_name , students.* | addresses : addresses.state_province_county , addresses.country , addresses.address_id , addresses.city , addresses.zip_postcode , addresses.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | degree_programs : degree_programs.degree_summary_description , degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.other_details , degree_programs.*
natsql:
select _ from _ where _ except_ @.@ join _
natsql and SQL generation:
SELECT last_name FROM students WHERE students.student_id NOT IN (SELECT student_enrolment.student_id FROM student_enrolment) AND addresses.state_province_county = 'North Carolina'
natsql:
SELECT last_name FROM students WHERE students.student_id NOT IN (SELECT student_enrolment.student_id FROM student_enrolment) AND addresses.state_province_county = 'North Carolina'
SQL:
SELECT last_name FROM students WHERE students.student_id NOT IN (SELECT student_enrolment.student_id FROM student_enrolment) AND addresses.state_province_county = 'North Carolina'
self correction:
SELECT students.last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id WHERE students.student_id NOT IN (     SELECT student_enrolment.student_id     FROM student_enrolment ) AND addresses.state_province_county = 'North Carolina'

index is 551
SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2
Show the date and id of the transcript with at least 2 course results.
schema_links:
Show the date and id of the transcript with at least 2 course results. | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details , transcripts.* | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id , transcript_contents.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | courses : courses.course_name , courses.course_description , courses.course_id , courses.other_details , courses.*
natsql:
select _ from _ where count ( _ ) >= _ group by _
natsql and SQL generation:
SELECT transcript_date, transcript_id FROM transcripts GROUP BY transcript_id HAVING count(*) >= 2
natsql:
SELECT transcript_date, transcript_id FROM transcripts GROUP BY transcript_id HAVING count(*) >= 2
SQL:
SELECT transcript_date, transcript_id FROM transcripts GROUP BY transcript_id HAVING count(*) >= 2
self correction:
SELECT transcript_date, transcript_id  FROM Transcripts  JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id  JOIN Student_Enrolment_Courses ON Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  GROUP BY Transcripts.transcript_id  HAVING COUNT(*) >= 2

index is 552
SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2
What is the date and id of the transcript with at least 2 courses listed?
schema_links:
What is the date and id of the transcript with at least 2 courses listed? | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id , transcript_contents.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql:
select _ from _ where count ( _ ) >= _ group by _
natsql and SQL generation:
SELECT transcript_date, transcript_id FROM transcripts GROUP BY transcript_id HAVING count(*) >= 2
natsql:
SELECT transcript_date, transcript_id FROM transcripts GROUP BY transcript_id HAVING count(*) >= 2
SQL:
SELECT transcript_date, transcript_id FROM transcripts GROUP BY transcript_id HAVING count(*) >= 2
self correction:
SELECT transcript_date, transcript_id FROM Transcripts JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id JOIN Student_Enrolment_Courses ON Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id GROUP BY transcript_id HAVING COUNT(DISTINCT Student_Enrolment_Courses.course_id) >= 2;

index is 553
SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'
What is the phone number of the man with the first name Timmothy and the last name Ward?
schema_links:
What is the phone number of the man with the first name Timmothy and the last name Ward? | students : students.first_name ( Timmothy ) , students.last_name ( Ward ) , students.cell_mobile_number , students.student_id , students.middle_name , students.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
natsql:
SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SQL:
SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
self correction:
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'

index is 554
select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'
What is the mobile phone number of the student named Timmothy Ward ?
schema_links:
What is the mobile phone number of the student named Timmothy Ward ? | students : students.first_name ( Timmothy ) , students.cell_mobile_number , students.last_name ( Ward ) , students.student_id , students.middle_name , students.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.* | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
natsql:
SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SQL:
SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
self correction:
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'

index is 555
SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
Who is the first student to register? List the first name, middle name and last name.
schema_links:
Who is the first student to register? List the first name, middle name and last name. | students : students.last_name , students.first_name , students.middle_name , students.date_first_registered , students.student_id , students.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details , student_enrolment.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.*
natsql:
select _ from _ order by _ asc limit _
natsql and SQL generation:
SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered ASC LIMIT 1
natsql:
SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered ASC LIMIT 1
SQL:
SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered ASC LIMIT 1
self correction:
SELECT Students.first_name, Students.middle_name, Students.last_name  FROM Students  ORDER BY Students.date_first_registered ASC  LIMIT 1

index is 556
SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
What is the first, middle, and last name of the first student to register?
schema_links:
What is the first, middle, and last name of the first student to register? | students : students.last_name , students.first_name , students.middle_name , students.date_first_registered , students.student_id , students.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.*
natsql:
select _ from _ order by _ asc limit _
natsql and SQL generation:
SELECT first_name, middle_name, last_name
FROM students
ORDER BY date_first_registered
LIMIT 1
natsql:
SELECT first_name, middle_name, last_name
FROM students
ORDER BY date_first_registered
LIMIT 1
SQL:
SELECT first_name, middle_name, last_name
FROM students
ORDER BY date_first_registered
LIMIT 1
self correction:
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered LIMIT 1

index is 557
SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1
Who is the earliest graduate of the school? List the first name, middle name and last name.
schema_links:
Who is the earliest graduate of the school? List the first name, middle name and last name. | students : students.first_name , students.middle_name , students.last_name , students.date_first_registered , students.date_left , students.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.* | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.*
natsql:
select _ from _ order by _ asc limit _
natsql and SQL generation:
SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered ASC LIMIT 1
natsql:
SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered ASC LIMIT 1
SQL:
SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered ASC LIMIT 1
self correction:
SELECT Students.first_name, Students.middle_name, Students.last_name  FROM Students  ORDER BY Students.date_first_registered ASC  LIMIT 1

index is 558
SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1
What is the first, middle, and last name of the earliest school graduate?
schema_links:
What is the first, middle, and last name of the earliest school graduate? | students : students.last_name , students.first_name , students.middle_name , students.date_first_registered , students.date_left , students.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql:
select _ from _ order by _ asc limit _
natsql and SQL generation:
SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered ASC LIMIT 1
natsql:
SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered ASC LIMIT 1
SQL:
SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered ASC LIMIT 1
self correction:
SELECT Students.first_name, Students.middle_name, Students.last_name  FROM Students  ORDER BY Students.date_first_registered ASC  LIMIT 1

index is 559
SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
Whose permanent address is different from his or her current address? List his or her first name.
schema_links:
Whose permanent address is different from his or her current address? List his or her first name. | students : students.first_name , students.permanent_address_id , students.current_address_id , students.student_id , students.last_name , students.* | addresses : addresses.address_id , addresses.country , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT first_name FROM students WHERE permanent_address_id <> current_address_id
natsql:
SELECT first_name FROM students WHERE permanent_address_id <> current_address_id
SQL:
SELECT first_name FROM students WHERE permanent_address_id <> current_address_id
self correction:
SELECT first_name  FROM Students  WHERE permanent_address_id <> current_address_id

index is 560
SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
What is the first name of the student whose permanent address is different from his or her current one?
schema_links:
What is the first name of the student whose permanent address is different from his or her current one? | students : students.first_name , students.permanent_address_id , students.current_address_id , students.student_id , students.last_name , students.* | addresses : addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT first_name FROM students WHERE permanent_address_id != current_address_id
natsql:
SELECT first_name FROM students WHERE permanent_address_id != current_address_id
SQL:
SELECT first_name FROM students WHERE permanent_address_id != current_address_id
self correction:
SELECT Students.first_name  FROM Students  JOIN Addresses AS permanent ON Students.permanent_address_id = permanent.address_id  JOIN Addresses AS current ON Students.current_address_id = current.address_id  WHERE permanent.line_1 != current.line_1

index is 561
SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
Which address holds the most number of students currently? List the address id and all lines.
schema_links:
Which address holds the most number of students currently? List the address id and all lines. | students : students.current_address_id , students.permanent_address_id , students.student_id , students.date_first_registered , students.date_left , students.* | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.other_address_details , addresses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT address_id, line_1, line_2, line_3
FROM addresses
GROUP BY address_id, line_1, line_2, line_3
ORDER BY COUNT(*) DESC
LIMIT 1
natsql:
SELECT address_id, line_1, line_2, line_3
FROM addresses
GROUP BY address_id, line_1, line_2, line_3
ORDER BY COUNT(*) DESC
LIMIT 1
SQL:
SELECT address_id, line_1, line_2, line_3
FROM addresses
GROUP BY address_id, line_1, line_2, line_3
ORDER BY COUNT(*) DESC
LIMIT 1
self correction:
SELECT addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3 FROM addresses JOIN students ON students.current_address_id = addresses.address_id GROUP BY addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3 ORDER BY COUNT(*) DESC LIMIT 1

index is 562
SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
What is the id, line 1, and line 2 of the address with the most students?
schema_links:
What is the id, line 1, and line 2 of the address with the most students? | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.* | students : students.current_address_id , students.permanent_address_id , students.student_id , students.date_left , students.other_student_details , students.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT address_id, line_1, line_2 FROM addresses GROUP BY address_id, line_1, line_2 ORDER BY count(*) DESC LIMIT 1
natsql:
SELECT address_id, line_1, line_2 FROM addresses GROUP BY address_id, line_1, line_2 ORDER BY count(*) DESC LIMIT 1
SQL:
SELECT address_id, line_1, line_2 FROM addresses GROUP BY address_id, line_1, line_2 ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses JOIN students ON students.current_address_id = addresses.address_id GROUP BY addresses.address_id, addresses.line_1, addresses.line_2 ORDER BY COUNT(*) DESC LIMIT 1

index is 563
SELECT avg(transcript_date) FROM Transcripts
On average, when were the transcripts printed?
schema_links:
On average, when were the transcripts printed? | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.*
natsql:
select avg ( _ ) from _
natsql and SQL generation:
SELECT AVG(transcript_date) FROM transcripts
natsql:
SELECT AVG(transcript_date) FROM transcripts
SQL:
SELECT AVG(transcript_date) FROM transcripts
self correction:
SELECT AVG(transcript_date) FROM Transcripts

index is 564
SELECT avg(transcript_date) FROM Transcripts
What is the average transcript date?
schema_links:
What is the average transcript date? | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.* | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id , transcript_contents.*
natsql:
select avg ( _ ) from _
natsql and SQL generation:
SELECT AVG(transcript_date) FROM transcripts
natsql:
SELECT AVG(transcript_date) FROM transcripts
SQL:
SELECT AVG(transcript_date) FROM transcripts
self correction:
SELECT AVG(transcript_date) FROM Transcripts

index is 565
SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
When is the first transcript released? List the date and details.
schema_links:
When is the first transcript released? List the date and details. | transcripts : transcripts.transcript_date , transcripts.other_details , transcripts.transcript_id , transcripts.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.*
natsql:
select _ from _ order by _ asc limit _
natsql and SQL generation:
SELECT transcript_date, other_details FROM transcripts ORDER BY transcript_date ASC LIMIT 1
natsql:
SELECT transcript_date, other_details FROM transcripts ORDER BY transcript_date ASC LIMIT 1
SQL:
SELECT transcript_date, other_details FROM transcripts ORDER BY transcript_date ASC LIMIT 1
self correction:
SELECT transcript_date, other_details  FROM Transcripts  ORDER BY transcript_date ASC  LIMIT 1

index is 566
SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
What is the earliest date of a transcript release, and what details can you tell me?
schema_links:
What is the earliest date of a transcript release, and what details can you tell me? | transcripts : transcripts.transcript_date , transcripts.other_details , transcripts.transcript_id , transcripts.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.* | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.*
natsql:
select _ from _ order by _ asc limit _
natsql and SQL generation:
SELECT transcript_date, other_details FROM transcripts ORDER BY transcript_date ASC LIMIT 1
natsql:
SELECT transcript_date, other_details FROM transcripts ORDER BY transcript_date ASC LIMIT 1
SQL:
SELECT transcript_date, other_details FROM transcripts ORDER BY transcript_date ASC LIMIT 1
self correction:
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1

index is 567
SELECT count(*) FROM Transcripts
How many transcripts are released?
schema_links:
How many transcripts are released? | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details , transcripts.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT count(*) FROM transcripts
natsql:
SELECT count(*) FROM transcripts
SQL:
SELECT count(*) FROM transcripts
self correction:
SELECT count(*) FROM Transcripts

index is 568
SELECT count(*) FROM Transcripts
How many transcripts are listed?
schema_links:
How many transcripts are listed? | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details , transcripts.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT count(*) FROM transcripts
natsql:
SELECT count(*) FROM transcripts
SQL:
SELECT count(*) FROM transcripts
self correction:
SELECT count(*) FROM Transcripts

index is 569
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
What is the last transcript release date?
schema_links:
What is the last transcript release date? | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1
natsql:
SELECT transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1
SQL:
SELECT transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1
self correction:
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1

index is 570
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
When was the last transcript released?
schema_links:
When was the last transcript released? | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id , transcript_contents.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1
natsql:
SELECT transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1
SQL:
SELECT transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1
self correction:
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1

index is 571
SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.
schema_links:
How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id. | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.* | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details , transcripts.* | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id , transcript_contents.*
natsql:
select count ( _ ) , _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT count(*) ,  student_course_id FROM transcript_contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
natsql:
SELECT count(*) ,  student_course_id FROM transcript_contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
SQL:
SELECT count(*) ,  student_course_id FROM transcript_contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT COUNT(*) AS enrollment_count, student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY enrollment_count DESC LIMIT 1

index is 572
SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?
schema_links:
What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id? | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id , transcript_contents.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details , transcripts.*
natsql:
select count ( _ ) , _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT COUNT(course_id), course_id FROM student_enrolment_courses GROUP BY course_id ORDER BY COUNT(course_id) DESC LIMIT 1
natsql:
SELECT COUNT(course_id), course_id FROM student_enrolment_courses GROUP BY course_id ORDER BY COUNT(course_id) DESC LIMIT 1
SQL:
SELECT COUNT(course_id), course_id FROM student_enrolment_courses GROUP BY course_id ORDER BY COUNT(course_id) DESC LIMIT 1
self correction:
SELECT MAX(count), course_id FROM (   SELECT COUNT(course_id) as count, course_id   FROM Student_Enrolment_Courses   GROUP BY course_id ) as counts ORDER BY count DESC LIMIT 1

index is 573
SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1
Show the date of the transcript which shows the least number of results, also list the id.
schema_links:
Show the date of the transcript which shows the least number of results, also list the id. | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id , transcript_contents.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.*
natsql:
select _ from _ group by _ order by count ( _ ) asc limit _
natsql and SQL generation:
SELECT transcript_date, transcript_id 
FROM transcripts 
GROUP BY transcript_date, transcript_id 
ORDER BY count(*) ASC 
LIMIT 1
natsql:
SELECT transcript_date, transcript_id 
FROM transcripts 
GROUP BY transcript_date, transcript_id 
ORDER BY count(*) ASC 
LIMIT 1
SQL:
SELECT transcript_date, transcript_id 
FROM transcripts 
GROUP BY transcript_date, transcript_id 
ORDER BY count(*) ASC 
LIMIT 1
self correction:
SELECT transcript_date, transcript_id FROM Transcripts GROUP BY transcript_date, transcript_id ORDER BY COUNT(*) ASC LIMIT 1

index is 574
SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1
What is the date and id of the transcript with the least number of results?
schema_links:
What is the date and id of the transcript with the least number of results? | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id , transcript_contents.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.semester_id , student_enrolment.degree_program_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*
natsql:
select _ from _ group by _ order by count ( _ ) asc limit _
natsql and SQL generation:
SELECT transcript_date, transcript_id FROM transcripts GROUP BY transcript_date, transcript_id ORDER BY count(*) ASC LIMIT 1
natsql:
SELECT transcript_date, transcript_id FROM transcripts GROUP BY transcript_date, transcript_id ORDER BY count(*) ASC LIMIT 1
SQL:
SELECT transcript_date, transcript_id FROM transcripts GROUP BY transcript_date, transcript_id ORDER BY count(*) ASC LIMIT 1
self correction:
SELECT transcript_date, transcript_id FROM Transcripts GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1

index is 575
SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
Find the semester when both Master students and Bachelor students got enrolled in.
schema_links:
Find the semester when both Master students and Bachelor students got enrolled in. | student_enrolment : student_enrolment.semester_id , student_enrolment.degree_program_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.other_details , student_enrolment.* | degree_programs : degree_programs.degree_summary_name ( Bachelor , Master ) , degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | semesters : semesters.semester_name , semesters.semester_id , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*
natsql:
select distinct _ from _ where _
natsql and SQL generation:
SELECT DISTINCT T3.semester_name
FROM student_enrolment AS T1
JOIN degree_programs AS T2 ON T1.degree_program_id = T2.degree_program_id
JOIN semesters AS T3 ON T1.semester_id = T3.semester_id
WHERE T2.degree_summary_name IN ('Bachelor', 'Master')
GROUP BY T3.semester_name
HAVING COUNT(DISTINCT T2.degree_summary_name) = 2
natsql:
SELECT DISTINCT T3.semester_name
FROM student_enrolment AS T1
JOIN degree_programs AS T2 ON T1.degree_program_id = T2.degree_program_id
JOIN semesters AS T3 ON T1.semester_id = T3.semester_id
WHERE T2.degree_summary_name IN ('Bachelor', 'Master')
GROUP BY T3.semester_name
HAVING COUNT(DISTINCT T2.degree_summary_name) = 2
SQL:
SELECT DISTINCT T3.semester_name
FROM student_enrolment AS T1
JOIN degree_programs AS T2 ON T1.degree_program_id = T2.degree_program_id
JOIN semesters AS T3 ON T1.semester_id = T3.semester_id
WHERE T2.degree_summary_name IN ('Bachelor', 'Master')
GROUP BY T3.semester_name
HAVING COUNT(DISTINCT T2.degree_summary_name) = 2
self correction:
SELECT T3.semester_name FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id JOIN Semesters AS T3 ON T1.semester_id = T3.semester_id WHERE T2.degree_summary_name IN ('Bachelor', 'Master') GROUP BY T3.semester_name HAVING COUNT(DISTINCT T2.degree_summary_name) = 2

index is 576
SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
What is the id of the semester that had both Masters and Bachelors students enrolled?
schema_links:
What is the id of the semester that had both Masters and Bachelors students enrolled? | student_enrolment : student_enrolment.semester_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.degree_program_id , student_enrolment.other_details , student_enrolment.* | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | courses : courses.course_name , courses.course_description , courses.course_id , courses.other_details , courses.*
natsql:
select distinct _ from _ where _
natsql and SQL generation:
SELECT DISTINCT T1.semester_id
FROM student_enrolment AS T1
JOIN student_enrolment_courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id
JOIN courses AS T3 ON T2.course_id = T3.course_id
JOIN degree_programs AS T4 ON T1.degree_program_id = T4.degree_program_id
WHERE T4.degree_summary_name = 'Masters'
AND T4.degree_summary_name = 'Bachelors'
natsql:
SELECT DISTINCT T1.semester_id
FROM student_enrolment AS T1
JOIN student_enrolment_courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id
JOIN courses AS T3 ON T2.course_id = T3.course_id
JOIN degree_programs AS T4 ON T1.degree_program_id = T4.degree_program_id
WHERE T4.degree_summary_name = 'Masters'
AND T4.degree_summary_name = 'Bachelors'
SQL:
SELECT DISTINCT T1.semester_id
FROM student_enrolment AS T1
JOIN student_enrolment_courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id
JOIN courses AS T3 ON T2.course_id = T3.course_id
JOIN degree_programs AS T4 ON T1.degree_program_id = T4.degree_program_id
WHERE T4.degree_summary_name = 'Masters'
AND T4.degree_summary_name = 'Bachelors'
self correction:
SELECT T1.semester_id FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id JOIN Courses AS T3 ON T2.course_id = T3.course_id JOIN Degree_Programs AS T4 ON T1.degree_program_id = T4.degree_program_id WHERE T4.degree_summary_name IN ('Masters', 'Bachelors') GROUP BY T1.semester_id HAVING COUNT(DISTINCT T4.degree_summary_name) = 2

index is 577
SELECT count(DISTINCT current_address_id) FROM Students
How many different addresses do the students currently live?
schema_links:
How many different addresses do the students currently live? | students : students.current_address_id , students.student_id , students.first_name , students.permanent_address_id , students.last_name , students.* | addresses : addresses.address_id , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.*
natsql:
select count ( distinct _ ) from _
natsql and SQL generation:
SELECT count(DISTINCT students.current_address_id) FROM students
natsql:
SELECT count(DISTINCT students.current_address_id) FROM students
SQL:
SELECT count(DISTINCT students.current_address_id) FROM students
self correction:
SELECT count(DISTINCT students.current_address_id) AS total_addresses FROM students

index is 578
SELECT count(DISTINCT current_address_id) FROM Students
What are the different addresses that have students living there?
schema_links:
What are the different addresses that have students living there? | students : students.current_address_id , students.permanent_address_id , students.email_address , students.student_id , students.first_name , students.* | addresses : addresses.address_id , addresses.other_address_details , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.*
natsql:
select count ( distinct _ ) from _
natsql and SQL generation:
SELECT COUNT(DISTINCT address_id) FROM addresses
natsql:
SELECT COUNT(DISTINCT address_id) FROM addresses
SQL:
SELECT COUNT(DISTINCT address_id) FROM addresses
self correction:
SELECT DISTINCT address_id FROM Addresses JOIN Students ON Students.current_address_id = Addresses.address_id OR Students.permanent_address_id = Addresses.address_id

index is 579
SELECT other_student_details FROM Students ORDER BY other_student_details DESC
List all the student details in reversed lexicographical order.
schema_links:
List all the student details in reversed lexicographical order. | students : students.other_student_details , students.email_address , students.student_id , students.first_name , students.date_left , students.* | addresses : addresses.line_2 , addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details , sections.*
natsql:
select _ from _ order by _ desc
natsql and SQL generation:
SELECT * FROM students ORDER BY student_id DESC
natsql:
SELECT * FROM students ORDER BY student_id DESC
SQL:
SELECT * FROM students ORDER BY student_id DESC
self correction:
SELECT Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details  FROM Students  ORDER BY Students.last_name DESC, Students.first_name DESC, Students.middle_name DESC

index is 580
SELECT other_student_details FROM Students ORDER BY other_student_details DESC
What other details can you tell me about students in reverse alphabetical order?
schema_links:
What other details can you tell me about students in reverse alphabetical order? | students : students.other_student_details , students.first_name , students.last_name , students.student_id , students.email_address , students.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.* | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.*
natsql:
select _ from _ order by _ desc
natsql and SQL generation:
SELECT * FROM students ORDER BY last_name DESC
natsql:
SELECT * FROM students ORDER BY last_name DESC
SQL:
SELECT * FROM students ORDER BY last_name DESC
self correction:
SELECT student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details FROM students ORDER BY last_name DESC

index is 581
SELECT section_description FROM Sections WHERE section_name  =  'h'
Describe the section h.
schema_links:
Describe the section h. | sections : sections.section_name , sections.section_description , sections.section_id , sections.course_id , sections.other_details , sections.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql:
select _ from _ where _
natsql and SQL generation:
DESCRIBE sections;
natsql:
DESCRIBE sections;
SQL:
DESCRIBE sections;
self correction:
SELECT The "DESCRIBE" statement is not supported in SQLite. To describe the structure of a table in SQLite, you can use the following SQL query:  ```sql PRAGMA table_info(Sections); ```  This query will provide information about the columns in the "Sections" table, including the column names, data types, and other details.

index is 582
SELECT section_description FROM Sections WHERE section_name  =  'h'
What is the description for the section named h?
schema_links:
What is the description for the section named h? | sections : sections.section_name , sections.section_description , sections.section_id , sections.course_id , sections.other_details , sections.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | courses : courses.course_description , courses.course_id , courses.course_name , courses.other_details , courses.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT section_description FROM sections WHERE section_name = 'h'
natsql:
SELECT section_description FROM sections WHERE section_name = 'h'
SQL:
SELECT section_description FROM sections WHERE section_name = 'h'
self correction:
SELECT section_description FROM Sections WHERE section_name = 'h'

index is 583
select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'
Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .
schema_links:
Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 . | students : students.first_name , students.cell_mobile_number , students.permanent_address_id , students.student_id , students.date_first_registered , students.* | addresses : addresses.country ( Haiti ) , addresses.address_id , addresses.city , addresses.line_1 , addresses.line_2 , addresses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT first_name FROM students WHERE addresses.country = 'Haiti' OR cell_mobile_number = '09700166582'
natsql:
SELECT first_name FROM students WHERE addresses.country = 'Haiti' OR cell_mobile_number = '09700166582'
SQL:
SELECT first_name FROM students WHERE addresses.country = 'Haiti' OR cell_mobile_number = '09700166582'
self correction:
SELECT Students.first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'

index is 584
select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'
What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?
schema_links:
What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ? | students : students.first_name , students.cell_mobile_number , students.permanent_address_id , students.student_id , students.date_first_registered , students.* | addresses : addresses.country ( Haiti ) , addresses.address_id , addresses.city , addresses.line_1 , addresses.line_2 , addresses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT first_name FROM students WHERE addresses.country = 'Haiti' OR cell_mobile_number = '09700166582'
natsql:
SELECT first_name FROM students WHERE addresses.country = 'Haiti' OR cell_mobile_number = '09700166582'
SQL:
SELECT first_name FROM students WHERE addresses.country = 'Haiti' OR cell_mobile_number = '09700166582'
self correction:
SELECT first_name FROM Students  JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'

index is 585
SELECT Title FROM Cartoon ORDER BY title
List the title of all cartoons in alphabetical order.
schema_links:
List the title of all cartoons in alphabetical order. | cartoon : cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.directed_by , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql:
select _ from _ order by _ asc
natsql and SQL generation:
SELECT title FROM cartoon ORDER BY title ASC
natsql:
SELECT title FROM cartoon ORDER BY title ASC
SQL:
SELECT title FROM cartoon ORDER BY title ASC
self correction:
SELECT Cartoon.Title FROM Cartoon ORDER BY Cartoon.Title ASC

index is 586
SELECT Title FROM Cartoon ORDER BY title
What are the titles of the cartoons sorted alphabetically?
schema_links:
What are the titles of the cartoons sorted alphabetically? | cartoon : cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.production_code , cartoon.* | tv_series : tv_series.episode , tv_series.id , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql:
select _ from _ order by _ asc
natsql and SQL generation:
SELECT title FROM Cartoon ORDER BY title ASC
natsql:
SELECT title FROM Cartoon ORDER BY title ASC
SQL:
SELECT title FROM Cartoon ORDER BY title ASC
self correction:
SELECT title FROM Cartoon ORDER BY Title ASC

index is 587
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";
List all cartoon directed by "Ben Jones".
schema_links:
List all cartoon directed by "Ben Jones". | cartoon : cartoon.directed_by ( Ben Jones ) , cartoon.title , cartoon.id , cartoon.written_by , cartoon.channel , cartoon.* | tv_series : tv_series.episode , tv_series.id , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT title FROM Cartoon WHERE directed_by = 'Ben Jones'
natsql:
SELECT title FROM Cartoon WHERE directed_by = 'Ben Jones'
SQL:
SELECT title FROM Cartoon WHERE directed_by = 'Ben Jones'
self correction:
SELECT title FROM Cartoon WHERE Directed_by = 'Ben Jones'

index is 588
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";
What are the names of all cartoons directed by Ben Jones?
schema_links:
What are the names of all cartoons directed by Ben Jones? | cartoon : cartoon.directed_by ( Ben Jones ) , cartoon.title , cartoon.id , cartoon.channel , cartoon.written_by , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT title FROM Cartoon WHERE Directed_by = 'Ben Jones'
natsql:
SELECT title FROM Cartoon WHERE Directed_by = 'Ben Jones'
SQL:
SELECT title FROM Cartoon WHERE Directed_by = 'Ben Jones'
self correction:
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'

index is 589
SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
How many cartoons were written by "Joseph Kuhr"?
schema_links:
How many cartoons were written by "Joseph Kuhr"? | cartoon : cartoon.written_by ( Joseph Kuhr ) , cartoon.title , cartoon.id , cartoon.channel , cartoon.directed_by , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM Cartoon WHERE written_by = 'Joseph Kuhr'
natsql:
SELECT count(*) FROM Cartoon WHERE written_by = 'Joseph Kuhr'
SQL:
SELECT count(*) FROM Cartoon WHERE written_by = 'Joseph Kuhr'
self correction:
SELECT count(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'

index is 590
SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
What is the number of cartoones written by Joseph Kuhr?
schema_links:
What is the number of cartoones written by Joseph Kuhr? | cartoon : cartoon.written_by ( Joseph Kuhr ) , cartoon.title , cartoon.id , cartoon.channel , cartoon.directed_by , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
natsql:
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
SQL:
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
self correction:
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'

index is 591
SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date
list all cartoon titles and their directors ordered by their air date
schema_links:
list all cartoon titles and their directors ordered by their air date | cartoon : cartoon.directed_by , cartoon.original_air_date , cartoon.title , cartoon.id , cartoon.written_by , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql:
select _ from _ order by _ asc
natsql and SQL generation:
SELECT title, directed_by FROM cartoon ORDER BY original_air_date ASC
natsql:
SELECT title, directed_by FROM cartoon ORDER BY original_air_date ASC
SQL:
SELECT title, directed_by FROM cartoon ORDER BY original_air_date ASC
self correction:
SELECT cartoon.title, cartoon.directed_by FROM cartoon JOIN TV_Channel ON cartoon.channel = TV_Channel.id ORDER BY cartoon.original_air_date ASC

index is 592
SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date
What is the name and directors of all the cartoons that are ordered by air date?
schema_links:
What is the name and directors of all the cartoons that are ordered by air date? | cartoon : cartoon.directed_by , cartoon.original_air_date , cartoon.title , cartoon.id , cartoon.channel , cartoon.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql:
select _ from _ order by _ asc
natsql and SQL generation:
SELECT title, directed_by FROM Cartoon ORDER BY original_air_date ASC
natsql:
SELECT title, directed_by FROM Cartoon ORDER BY original_air_date ASC
SQL:
SELECT title, directed_by FROM Cartoon ORDER BY original_air_date ASC
self correction:
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon ORDER BY Cartoon.Original_air_date ASC

index is 593
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
List the title of all cartoon directed by "Ben Jones" or "Brandon Vietti".
schema_links:
List the title of all cartoon directed by "Ben Jones" or "Brandon Vietti". | cartoon : cartoon.directed_by ( Ben Jones , Brandon Vietti ) , cartoon.title , cartoon.id , cartoon.channel , cartoon.written_by , cartoon.* | tv_series : tv_series.episode , tv_series.id , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT title FROM Cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti'
natsql:
SELECT title FROM Cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti'
SQL:
SELECT title FROM Cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti'
self correction:
SELECT title FROM Cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti'

index is 594
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?
schema_links:
What are the titles of all cartoons directed by Ben Jones or Brandon Vietti? | cartoon : cartoon.directed_by ( Ben Jones , Brandon Vietti ) , cartoon.title , cartoon.id , cartoon.channel , cartoon.written_by , cartoon.* | tv_series : tv_series.episode , tv_series.id , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT title FROM Cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti'
natsql:
SELECT title FROM Cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti'
SQL:
SELECT title FROM Cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti'
self correction:
SELECT title FROM Cartoon WHERE directed_by IN ('Ben Jones', 'Brandon Vietti')

index is 595
SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;
Which country has the most of TV Channels? List the country and number of TV Channels it has.
schema_links:
Which country has the most of TV Channels? List the country and number of TV Channels it has. | tv_channel : tv_channel.country , tv_channel.id , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql:
select _ , count ( _ ) from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT country, COUNT(*) FROM TV_Channel GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1
natsql:
SELECT country, COUNT(*) FROM TV_Channel GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1
SQL:
SELECT country, COUNT(*) FROM TV_Channel GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1
self correction:
SELECT country, COUNT(*)  FROM TV_Channel  GROUP BY country  ORDER BY COUNT(*) DESC  LIMIT 1

index is 596
SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;
What is the country with the most number of TV Channels and how many does it have?
schema_links:
What is the country with the most number of TV Channels and how many does it have? | tv_channel : tv_channel.country , tv_channel.id , tv_channel.content , tv_channel.language , tv_channel.series_name , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql:
select _ , count ( _ ) from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT country, COUNT(*) FROM TV_Channel GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1
natsql:
SELECT country, COUNT(*) FROM TV_Channel GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1
SQL:
SELECT country, COUNT(*) FROM TV_Channel GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1
self correction:
SELECT TV_Channel.Country, COUNT(*) AS Channel_Count  FROM TV_Channel  GROUP BY TV_Channel.Country  ORDER BY Channel_Count DESC  LIMIT 1

index is 597
SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;
List the number of different series names and contents in the TV Channel table.
schema_links:
List the number of different series names and contents in the TV Channel table. | tv_channel : tv_channel.series_name , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.episode , tv_series.id , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql:
select count ( distinct _ ) , count ( distinct _ ) from _
natsql and SQL generation:
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM TV_Channel
natsql:
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM TV_Channel
SQL:
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM TV_Channel
self correction:
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel

index is 598
SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;
How many different series and contents are listed in the TV Channel table?
schema_links:
How many different series and contents are listed in the TV Channel table? | tv_channel : tv_channel.content , tv_channel.series_name , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.air_date , tv_series.share , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql:
select count ( distinct _ ) , count ( distinct _ ) from _
natsql and SQL generation:
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM TV_Channel
natsql:
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM TV_Channel
SQL:
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM TV_Channel
self correction:
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel

index is 599
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
What is the content of TV Channel with serial name "Sky Radio"?
schema_links:
What is the content of TV Channel with serial name "Sky Radio"? | tv_channel : tv_channel.series_name ( Sky Radio ) , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.episode , tv_series.id , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT content FROM TV_Channel WHERE series_name = "Sky Radio"
natsql:
SELECT content FROM TV_Channel WHERE series_name = "Sky Radio"
SQL:
SELECT content FROM TV_Channel WHERE series_name = "Sky Radio"
self correction:
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio"

index is 600
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
What is the content of the series Sky Radio?
schema_links:
What is the content of the series Sky Radio? | tv_channel : tv_channel.series_name ( Sky Radio ) , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.episode , tv_series.id , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT content FROM TV_Channel WHERE series_name = 'Sky Radio'
natsql:
SELECT content FROM TV_Channel WHERE series_name = 'Sky Radio'
SQL:
SELECT content FROM TV_Channel WHERE series_name = 'Sky Radio'
self correction:
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'

index is 601
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
What is the Package Option of TV Channel with serial name "Sky Radio"?
schema_links:
What is the Package Option of TV Channel with serial name "Sky Radio"? | tv_channel : tv_channel.series_name ( Sky Radio ) , tv_channel.package_option ( Option ) , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'
natsql:
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'
SQL:
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'
self correction:
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'

index is 602
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
What are the Package Options of the TV Channels whose series names are Sky Radio?
schema_links:
What are the Package Options of the TV Channels whose series names are Sky Radio? | tv_channel : tv_channel.series_name ( Sky Radio ) , tv_channel.package_option ( Option ) , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.* | tv_series : tv_series.rating , tv_series.id , tv_series.episode , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT Package_Option
FROM TV_Channel
WHERE series_name = 'Sky Radio'
natsql:
SELECT Package_Option
FROM TV_Channel
WHERE series_name = 'Sky Radio'
SQL:
SELECT Package_Option
FROM TV_Channel
WHERE series_name = 'Sky Radio'
self correction:
SELECT Package_Option FROM TV_Channel JOIN TV_series ON TV_series.Channel = TV_Channel.id WHERE TV_series.series_name = 'Sky Radio'

index is 603
SELECT count(*) FROM TV_Channel WHERE LANGUAGE = "English";
How many TV Channel using language English?
schema_links:
How many TV Channel using language English? | tv_channel : tv_channel.language ( English ) , tv_channel.id , tv_channel.country , tv_channel.content , tv_channel.series_name , tv_channel.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM TV_Channel WHERE language = 'English'
natsql:
SELECT count(*) FROM TV_Channel WHERE language = 'English'
SQL:
SELECT count(*) FROM TV_Channel WHERE language = 'English'
self correction:
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'

index is 604
SELECT count(*) FROM TV_Channel WHERE LANGUAGE = "English";
How many TV Channels use the English language?
schema_links:
How many TV Channels use the English language? | tv_channel : tv_channel.language ( English ) , tv_channel.id , tv_channel.country , tv_channel.content , tv_channel.series_name , tv_channel.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM TV_Channel WHERE language = 'English'
natsql:
SELECT count(*) FROM TV_Channel WHERE language = 'English'
SQL:
SELECT count(*) FROM TV_Channel WHERE language = 'English'
self correction:
SELECT COUNT(DISTINCT id) FROM TV_Channel WHERE Language = 'English'

index is 605
SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
List the language used least number of TV Channel. List language and number of TV Channel.
schema_links:
List the language used least number of TV Channel. List language and number of TV Channel. | tv_channel : tv_channel.language , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.series_name , tv_channel.* | tv_series : tv_series.rating , tv_series.id , tv_series.episode , tv_series.air_date , tv_series.share , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql:
select _ , count ( _ ) from _ group by _ order by count ( _ ) asc limit _
natsql and SQL generation:
SELECT language, count(*) FROM TV_Channel GROUP BY language ORDER BY count(*) ASC LIMIT 1
natsql:
SELECT language, count(*) FROM TV_Channel GROUP BY language ORDER BY count(*) ASC LIMIT 1
SQL:
SELECT language, count(*) FROM TV_Channel GROUP BY language ORDER BY count(*) ASC LIMIT 1
self correction:
SELECT TV_Channel.Language, COUNT(*) AS channel_count FROM TV_Channel GROUP BY TV_Channel.Language ORDER BY channel_count ASC LIMIT 1

index is 606
SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
What are the languages used by the least number of TV Channels and how many channels use it?
schema_links:
What are the languages used by the least number of TV Channels and how many channels use it? | tv_channel : tv_channel.language , tv_channel.id , tv_channel.country , tv_channel.content , tv_channel.series_name , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql:
select _ , count ( _ ) from _ group by _ order by count ( _ ) asc limit _
natsql and SQL generation:
SELECT language, COUNT(*) FROM TV_Channel GROUP BY language ORDER BY COUNT(*) ASC LIMIT 1
natsql:
SELECT language, COUNT(*) FROM TV_Channel GROUP BY language ORDER BY COUNT(*) ASC LIMIT 1
SQL:
SELECT language, COUNT(*) FROM TV_Channel GROUP BY language ORDER BY COUNT(*) ASC LIMIT 1
self correction:
SELECT TV_Channel.Language, COUNT(*) AS channel_count  FROM TV_Channel  GROUP BY TV_Channel.Language  ORDER BY channel_count ASC  LIMIT 1

index is 607
SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE
List each language and the number of TV Channels using it.
schema_links:
List each language and the number of TV Channels using it. | tv_channel : tv_channel.language , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.series_name , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT language, COUNT(*) FROM TV_Channel GROUP BY language
natsql:
SELECT language, COUNT(*) FROM TV_Channel GROUP BY language
SQL:
SELECT language, COUNT(*) FROM TV_Channel GROUP BY language
self correction:
SELECT TV_Channel.Language, COUNT(*)  FROM TV_Channel  GROUP BY TV_Channel.Language

index is 608
SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE
For each language, list the number of TV Channels that use it.
schema_links:
For each language, list the number of TV Channels that use it. | tv_channel : tv_channel.language , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.series_name , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT language, COUNT(*) FROM TV_Channel GROUP BY language
natsql:
SELECT language, COUNT(*) FROM TV_Channel GROUP BY language
SQL:
SELECT language, COUNT(*) FROM TV_Channel GROUP BY language
self correction:
SELECT TV_Channel.Language, COUNT(DISTINCT TV_Channel.id) AS Channel_Count FROM TV_Channel GROUP BY TV_Channel.Language

index is 609
SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!";
What is the TV Channel that shows the cartoon "The Rise of the Blue Beetle!"? List the TV Channel's series name.
schema_links:
What is the TV Channel that shows the cartoon "The Rise of the Blue Beetle!"? List the TV Channel's series name. | tv_channel : tv_channel.series_name , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | cartoon : cartoon.title ( The Rise of the Blue Beetle! ) , cartoon.channel , cartoon.id , cartoon.directed_by , cartoon.written_by , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.channel , tv_series.air_date , tv_series.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON Cartoon.channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle!'
natsql:
SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON Cartoon.channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle!'
SQL:
SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON Cartoon.channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle!'
self correction:
SELECT TV_Channel.series_name  FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Title = 'The Rise of the Blue Beetle!';

index is 610
SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!";
What is the series name of the TV Channel that shows the cartoon "The Rise of the Blue Beetle"?
schema_links:
What is the series name of the TV Channel that shows the cartoon "The Rise of the Blue Beetle"? | tv_channel : tv_channel.series_name , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | cartoon : cartoon.title ( The Rise of the Blue Beetle! ) , cartoon.channel , cartoon.id , cartoon.directed_by , cartoon.written_by , cartoon.* | tv_series : tv_series.episode , tv_series.channel , tv_series.id , tv_series.rating , tv_series.air_date , tv_series.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT series_name FROM TV_Channel WHERE id = (SELECT channel FROM Cartoon WHERE title = 'The Rise of the Blue Beetle')
natsql:
SELECT series_name FROM TV_Channel WHERE id = (SELECT channel FROM Cartoon WHERE title = 'The Rise of the Blue Beetle')
SQL:
SELECT series_name FROM TV_Channel WHERE id = (SELECT channel FROM Cartoon WHERE title = 'The Rise of the Blue Beetle')
self correction:
SELECT series_name FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle'

index is 611
SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
List the title of all  Cartoons showed on TV Channel with series name "Sky Radio".
schema_links:
List the title of all  Cartoons showed on TV Channel with series name "Sky Radio". | tv_channel : tv_channel.series_name ( Sky Radio ) , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | cartoon : cartoon.title , cartoon.channel , cartoon.id , cartoon.production_code , cartoon.directed_by , cartoon.* | tv_series : tv_series.episode , tv_series.id , tv_series.rating , tv_series.share , tv_series.channel , tv_series.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT title FROM Cartoon WHERE channel IN (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio')
natsql:
SELECT title FROM Cartoon WHERE channel IN (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio')
SQL:
SELECT title FROM Cartoon WHERE channel IN (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio')
self correction:
SELECT title FROM Cartoon WHERE channel IN (   SELECT id   FROM TV_Channel   WHERE series_name = 'Sky Radio' )

index is 612
SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
What is the title of all the cartools that are on the TV Channel with the series name "Sky Radio"?
schema_links:
What is the title of all the cartools that are on the TV Channel with the series name "Sky Radio"? | tv_channel : tv_channel.series_name ( Sky Radio ) , tv_channel.content , tv_channel.id , tv_channel.language , tv_channel.country , tv_channel.* | cartoon : cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.directed_by , cartoon.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.air_date , tv_series.share , tv_series.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT title FROM Cartoon WHERE channel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio')
natsql:
SELECT title FROM Cartoon WHERE channel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio')
SQL:
SELECT title FROM Cartoon WHERE channel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio')
self correction:
SELECT title FROM Cartoon WHERE channel = (     SELECT id     FROM TV_Channel     WHERE series_name = 'Sky Radio' )

index is 613
SELECT Episode FROM TV_series ORDER BY rating
List the Episode of all TV series sorted by rating.
schema_links:
List the Episode of all TV series sorted by rating. | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql:
select _ from _ order by _ asc
natsql and SQL generation:
SELECT Episode FROM TV_series ORDER BY Rating ASC
natsql:
SELECT Episode FROM TV_series ORDER BY Rating ASC
SQL:
SELECT Episode FROM TV_series ORDER BY Rating ASC
self correction:
SELECT TV_series.Episode FROM TV_series ORDER BY TV_series.Rating ASC

index is 614
SELECT Episode FROM TV_series ORDER BY rating
What are all of the episodes ordered by ratings?
schema_links:
What are all of the episodes ordered by ratings? | tv_series : tv_series.episode , tv_series.rating , tv_series.channel , tv_series.id , tv_series.air_date , tv_series.* | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql:
select _ from _ order by _ asc
natsql and SQL generation:
SELECT * FROM tv_series ORDER BY rating ASC
natsql:
SELECT * FROM tv_series ORDER BY rating ASC
SQL:
SELECT * FROM tv_series ORDER BY rating ASC
self correction:
SELECT TV_series.*  FROM TV_series  ORDER BY Rating DESC

index is 615
SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
List top 3 highest Rating  TV series. List the TV series's Episode and Rating.
schema_links:
List top 3 highest Rating  TV series. List the TV series's Episode and Rating. | tv_series : tv_series.rating , tv_series.episode , tv_series.id , tv_series.air_date , tv_series.share , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT episode, rating FROM TV_series ORDER BY rating DESC LIMIT 3
natsql:
SELECT episode, rating FROM TV_series ORDER BY rating DESC LIMIT 3
SQL:
SELECT episode, rating FROM TV_series ORDER BY rating DESC LIMIT 3
self correction:
SELECT TV_series.Episode, TV_series.Rating  FROM TV_series  ORDER BY TV_series.Rating DESC  LIMIT 3

index is 616
SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
What are 3 most highly rated episodes in the TV series table and what were those ratings?
schema_links:
What are 3 most highly rated episodes in the TV series table and what were those ratings? | tv_series : tv_series.rating , tv_series.episode , tv_series.id , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT episode, rating FROM TV_series ORDER BY rating DESC LIMIT 3
natsql:
SELECT episode, rating FROM TV_series ORDER BY rating DESC LIMIT 3
SQL:
SELECT episode, rating FROM TV_series ORDER BY rating DESC LIMIT 3
self correction:
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3

index is 617
SELECT max(SHARE) , min(SHARE) FROM TV_series;
What is minimum and maximum share of TV series?
schema_links:
What is minimum and maximum share of TV series? | tv_series : tv_series.share , tv_series.episode , tv_series.rating , tv_series.id , tv_series.18_49_rating_share , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql:
select max ( _ ) , min ( _ ) from _
natsql and SQL generation:
SELECT max(share), min(share) FROM TV_series
natsql:
SELECT max(share), min(share) FROM TV_series
SQL:
SELECT max(share), min(share) FROM TV_series
self correction:
SELECT MAX(Share), MIN(Share) FROM TV_series

index is 618
SELECT max(SHARE) , min(SHARE) FROM TV_series;
What is the maximum and minimum share for the TV series?
schema_links:
What is the maximum and minimum share for the TV series? | tv_series : tv_series.share , tv_series.episode , tv_series.18_49_rating_share , tv_series.id , tv_series.rating , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.* | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.*
natsql:
select max ( _ ) , min ( _ ) from _
natsql and SQL generation:
SELECT MAX(share), MIN(share) FROM TV_series
natsql:
SELECT MAX(share), MIN(share) FROM TV_series
SQL:
SELECT MAX(share), MIN(share) FROM TV_series
self correction:
SELECT MAX(Share) AS Maximum_Share, MIN(Share) AS Minimum_Share FROM TV_series

index is 619
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
What is the air date of TV series with Episode "A Love of a Lifetime"?
schema_links:
What is the air date of TV series with Episode "A Love of a Lifetime"? | tv_series : tv_series.episode ( A Love of a Lifetime ) , tv_series.air_date , tv_series.rating , tv_series.id , tv_series.share , tv_series.* | cartoon : cartoon.title , cartoon.id , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT air_date FROM TV_series WHERE Episode = "A Love of a Lifetime"
natsql:
SELECT air_date FROM TV_series WHERE Episode = "A Love of a Lifetime"
SQL:
SELECT air_date FROM TV_series WHERE Episode = "A Love of a Lifetime"
self correction:
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime"

index is 620
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
When did the episode "A Love of a Lifetime" air?
schema_links:
When did the episode "A Love of a Lifetime" air? | tv_series : tv_series.episode ( A Love of a Lifetime ) , tv_series.air_date , tv_series.rating , tv_series.id , tv_series.share , tv_series.* | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT air_date FROM TV_series WHERE episode = 'A Love of a Lifetime'
natsql:
SELECT air_date FROM TV_series WHERE episode = 'A Love of a Lifetime'
SQL:
SELECT air_date FROM TV_series WHERE episode = 'A Love of a Lifetime'
self correction:
SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'

index is 621
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
What is Weekly Rank of TV series with Episode "A Love of a Lifetime"?
schema_links:
What is Weekly Rank of TV series with Episode "A Love of a Lifetime"? | tv_series : tv_series.episode ( A Love of a Lifetime ) , tv_series.weekly_rank , tv_series.rating , tv_series.id , tv_series.share , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime"
natsql:
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime"
SQL:
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime"
self correction:
SELECT TV_series.Weekly_Rank  FROM TV_series  JOIN Cartoon ON TV_series.Channel = Cartoon.Channel  JOIN TV_Channel ON TV_series.Channel = TV_Channel.id  WHERE Cartoon.Title = "A Love of a Lifetime"

index is 622
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
What is the weekly rank for the episode "A Love of a Lifetime"?
schema_links:
What is the weekly rank for the episode "A Love of a Lifetime"? | tv_series : tv_series.episode ( A Love of a Lifetime ) , tv_series.weekly_rank , tv_series.rating , tv_series.id , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT weekly_rank FROM TV_series WHERE episode = "A Love of a Lifetime"
natsql:
SELECT weekly_rank FROM TV_series WHERE episode = "A Love of a Lifetime"
SQL:
SELECT weekly_rank FROM TV_series WHERE episode = "A Love of a Lifetime"
self correction:
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime"

index is 623
SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";
What is the TV Channel of TV series with Episode "A Love of a Lifetime"? List the TV Channel's series name.
schema_links:
What is the TV Channel of TV series with Episode "A Love of a Lifetime"? List the TV Channel's series name. | tv_channel : tv_channel.series_name , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.episode ( A Love of a Lifetime ) , tv_series.channel , tv_series.rating , tv_series.id , tv_series.share , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT TV_Channel.series_name
FROM TV_Channel
JOIN TV_series ON TV_Channel.id = TV_series.Channel
WHERE TV_series.Episode = "A Love of a Lifetime"
natsql:
SELECT TV_Channel.series_name
FROM TV_Channel
JOIN TV_series ON TV_Channel.id = TV_series.Channel
WHERE TV_series.Episode = "A Love of a Lifetime"
SQL:
SELECT TV_Channel.series_name
FROM TV_Channel
JOIN TV_series ON TV_Channel.id = TV_series.Channel
WHERE TV_series.Episode = "A Love of a Lifetime"
self correction:
SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = "A Love of a Lifetime"

index is 624
SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";
What is the name of the series that has the episode "A Love of a Lifetime"?
schema_links:
What is the name of the series that has the episode "A Love of a Lifetime"? | tv_series : tv_series.episode ( A Love of a Lifetime ) , tv_series.rating , tv_series.id , tv_series.channel , tv_series.share , tv_series.* | tv_channel : tv_channel.series_name , tv_channel.id , tv_channel.language , tv_channel.content , tv_channel.country , tv_channel.* | cartoon : cartoon.title , cartoon.id , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT series_name FROM TV_series WHERE episode = 'A Love of a Lifetime'
natsql:
SELECT series_name FROM TV_series WHERE episode = 'A Love of a Lifetime'
SQL:
SELECT series_name FROM TV_series WHERE episode = 'A Love of a Lifetime'
self correction:
SELECT series_name FROM TV_series WHERE Episode = 'A Love of a Lifetime'

index is 625
SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
List the Episode of all  TV series showed on TV Channel with series name "Sky Radio".
schema_links:
List the Episode of all  TV series showed on TV Channel with series name "Sky Radio". | tv_channel : tv_channel.series_name ( Sky Radio ) , tv_channel.id , tv_channel.content , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.episode , tv_series.id , tv_series.rating , tv_series.channel , tv_series.share , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT episode FROM tv_series WHERE channel = (SELECT id FROM tv_channel WHERE series_name = 'Sky Radio')
natsql:
SELECT episode FROM tv_series WHERE channel = (SELECT id FROM tv_channel WHERE series_name = 'Sky Radio')
SQL:
SELECT episode FROM tv_series WHERE channel = (SELECT id FROM tv_channel WHERE series_name = 'Sky Radio')
self correction:
SELECT Episode  FROM TV_series  WHERE Channel = (   SELECT id    FROM TV_Channel    WHERE series_name = 'Sky Radio' )

index is 626
SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
What is the episode for the TV series named "Sky Radio"?
schema_links:
What is the episode for the TV series named "Sky Radio"? | tv_channel : tv_channel.series_name ( Sky Radio ) , tv_channel.content , tv_channel.language , tv_channel.id , tv_channel.country , tv_channel.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.air_date , tv_series.share , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT episode FROM TV_series WHERE series_name = "Sky Radio"
natsql:
SELECT episode FROM TV_series WHERE series_name = "Sky Radio"
SQL:
SELECT episode FROM TV_series WHERE series_name = "Sky Radio"
self correction:
SELECT Episode FROM TV_series WHERE series_name = "Sky Radio"

index is 627
SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by
Find the number of cartoons directed by each of the listed directors.
schema_links:
Find the number of cartoons directed by each of the listed directors. | cartoon : cartoon.directed_by , cartoon.title , cartoon.id , cartoon.production_code , cartoon.channel , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql:
select count ( _ ) , _ from _ group by _
natsql and SQL generation:
SELECT count(*) ,  directed_by FROM cartoon GROUP BY directed_by
natsql:
SELECT count(*) ,  directed_by FROM cartoon GROUP BY directed_by
SQL:
SELECT count(*) ,  directed_by FROM cartoon GROUP BY directed_by
self correction:
SELECT COUNT(*) as num_cartoons, directed_by FROM cartoon GROUP BY directed_by

index is 628
SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by
How many cartoons did each director create?
schema_links:
How many cartoons did each director create? | cartoon : cartoon.directed_by , cartoon.title , cartoon.id , cartoon.production_code , cartoon.channel , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql:
select count ( _ ) , _ from _ group by _
natsql and SQL generation:
SELECT count(id), directed_by FROM Cartoon GROUP BY directed_by
natsql:
SELECT count(id), directed_by FROM Cartoon GROUP BY directed_by
SQL:
SELECT count(id), directed_by FROM Cartoon GROUP BY directed_by
self correction:
SELECT COUNT(id), directed_by  FROM Cartoon  GROUP BY directed_by

index is 629
select production_code ,  channel from cartoon order by original_air_date desc limit 1
Find the production code and channel of the most recently aired cartoon .
schema_links:
Find the production code and channel of the most recently aired cartoon . | cartoon : cartoon.production_code , cartoon.original_air_date , cartoon.channel , cartoon.title , cartoon.id , cartoon.* | tv_series : tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.id , tv_series.share , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT production_code, channel FROM Cartoon ORDER BY original_air_date DESC LIMIT 1
natsql:
SELECT production_code, channel FROM Cartoon ORDER BY original_air_date DESC LIMIT 1
SQL:
SELECT production_code, channel FROM Cartoon ORDER BY original_air_date DESC LIMIT 1
self correction:
SELECT production_code, Cartoon.channel FROM Cartoon INNER JOIN TV_Channel ON Cartoon.channel = TV_Channel.id ORDER BY Cartoon.original_air_date DESC LIMIT 1

index is 630
select production_code ,  channel from cartoon order by original_air_date desc limit 1
What is the produdction code and channel of the most recent cartoon ?
schema_links:
What is the produdction code and channel of the most recent cartoon ? | cartoon : cartoon.production_code , cartoon.channel , cartoon.original_air_date , cartoon.title , cartoon.id , cartoon.* | tv_series : tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.id , tv_series.share , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT production_code, channel 
FROM Cartoon 
ORDER BY original_air_date DESC 
LIMIT 1
natsql:
SELECT production_code, channel 
FROM Cartoon 
ORDER BY original_air_date DESC 
LIMIT 1
SQL:
SELECT production_code, channel 
FROM Cartoon 
ORDER BY original_air_date DESC 
LIMIT 1
self correction:
SELECT Cartoon.production_code, TV_Channel.series_name FROM Cartoon JOIN TV_Channel ON Cartoon.channel = TV_Channel.id ORDER BY Cartoon.original_air_date DESC LIMIT 1

index is 631
SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"
Find the package choice and series name of the TV channel that has high definition TV.
schema_links:
Find the package choice and series name of the TV channel that has high definition TV. | tv_channel : tv_channel.series_name , tv_channel.hight_definition_tv , tv_channel.package_option , tv_channel.content , tv_channel.id , tv_channel.* | tv_series : tv_series.rating , tv_series.id , tv_series.episode , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT package_option, series_name FROM TV_Channel WHERE Hight_definition_TV = true
natsql:
SELECT package_option, series_name FROM TV_Channel WHERE Hight_definition_TV = true
SQL:
SELECT package_option, series_name FROM TV_Channel WHERE Hight_definition_TV = true
self correction:
SELECT package_option, series_name  FROM TV_Channel  WHERE High_definition_TV = 1

index is 632
SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"
What are the package options and the name of the series for the TV Channel that supports high definition TV?
schema_links:
What are the package options and the name of the series for the TV Channel that supports high definition TV? | tv_channel : tv_channel.package_option ( Option ) , tv_channel.series_name , tv_channel.hight_definition_tv , tv_channel.id , tv_channel.content , tv_channel.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT package_option, series_name FROM TV_Channel WHERE Hight_definition_TV = true
natsql:
SELECT package_option, series_name FROM TV_Channel WHERE Hight_definition_TV = true
SQL:
SELECT package_option, series_name FROM TV_Channel WHERE Hight_definition_TV = true
self correction:
SELECT package_option, series_name  FROM TV_Channel  WHERE High_definition_TV = true

index is 633
SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
which countries' tv channels are playing some cartoon written by Todd Casey?
schema_links:
which countries' tv channels are playing some cartoon written by Todd Casey? | tv_channel : tv_channel.country , tv_channel.content , tv_channel.language , tv_channel.id , tv_channel.series_name , tv_channel.* | cartoon : cartoon.written_by ( Todd Casey ) , cartoon.title , cartoon.channel , cartoon.id , cartoon.directed_by , cartoon.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.air_date , tv_series.share , tv_series.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT DISTINCT TV_Channel.country FROM TV_Channel WHERE TV_Channel.id IN (SELECT Cartoon.channel FROM Cartoon WHERE Cartoon.written_by = 'Todd Casey')
natsql:
SELECT DISTINCT TV_Channel.country FROM TV_Channel WHERE TV_Channel.id IN (SELECT Cartoon.channel FROM Cartoon WHERE Cartoon.written_by = 'Todd Casey')
SQL:
SELECT DISTINCT TV_Channel.country FROM TV_Channel WHERE TV_Channel.id IN (SELECT Cartoon.channel FROM Cartoon WHERE Cartoon.written_by = 'Todd Casey')
self correction:
SELECT TV_Channel.Country FROM TV_Channel INNER JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';

index is 634
SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
What are the countries that have cartoons on TV that were written by Todd Casey?
schema_links:
What are the countries that have cartoons on TV that were written by Todd Casey? | cartoon : cartoon.written_by ( Todd Casey ) , cartoon.title , cartoon.id , cartoon.channel , cartoon.directed_by , cartoon.* | tv_channel : tv_channel.country , tv_channel.content , tv_channel.language , tv_channel.id , tv_channel.series_name , tv_channel.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.air_date , tv_series.share , tv_series.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT DISTINCT country FROM TV_Channel WHERE series_name IN (SELECT Title FROM Cartoon WHERE Written_by = 'Todd Casey')
natsql:
SELECT DISTINCT country FROM TV_Channel WHERE series_name IN (SELECT Title FROM Cartoon WHERE Written_by = 'Todd Casey')
SQL:
SELECT DISTINCT country FROM TV_Channel WHERE series_name IN (SELECT Title FROM Cartoon WHERE Written_by = 'Todd Casey')
self correction:
SELECT country FROM TV_Channel WHERE id IN (   SELECT DISTINCT Channel   FROM Cartoon   WHERE Written_by = 'Todd Casey' )

index is 635
SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
which countries' tv channels are not playing any cartoon written by Todd Casey?
schema_links:
which countries' tv channels are not playing any cartoon written by Todd Casey? | cartoon : cartoon.written_by ( Todd Casey ) , cartoon.title , cartoon.id , cartoon.channel , cartoon.directed_by , cartoon.* | tv_channel : tv_channel.country , tv_channel.content , tv_channel.language , tv_channel.id , tv_channel.series_name , tv_channel.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.air_date , tv_series.share , tv_series.*
natsql:
select _ from _ where except_ @.@ is _ and _
natsql and SQL generation:
SELECT country FROM TV_Channel WHERE country NOT IN (SELECT DISTINCT Country FROM Cartoon WHERE Written_by = 'Todd Casey')
natsql:
SELECT country FROM TV_Channel WHERE country NOT IN (SELECT DISTINCT Country FROM Cartoon WHERE Written_by = 'Todd Casey')
SQL:
SELECT country FROM TV_Channel WHERE country NOT IN (SELECT DISTINCT Country FROM Cartoon WHERE Written_by = 'Todd Casey')
self correction:
SELECT country FROM TV_Channel WHERE id NOT IN (   SELECT DISTINCT Channel   FROM Cartoon   WHERE Written_by = 'Todd Casey' )

index is 636
SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
What are the countries that are not playing cartoons written by Todd Casey?
schema_links:
What are the countries that are not playing cartoons written by Todd Casey? | cartoon : cartoon.written_by ( Todd Casey ) , cartoon.title , cartoon.channel , cartoon.id , cartoon.directed_by , cartoon.* | tv_channel : tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.id , tv_channel.series_name , tv_channel.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.air_date , tv_series.share , tv_series.*
natsql:
select _ from _ where except_ @.@ is _ and _
natsql and SQL generation:
SELECT DISTINCT country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')
natsql:
SELECT DISTINCT country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')
SQL:
SELECT DISTINCT country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')
self correction:
SELECT DISTINCT Country  FROM TV_Channel  WHERE id NOT IN (SELECT Channel                   FROM Cartoon                   WHERE Written_by = 'Todd Casey')

index is 637
SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?
schema_links:
Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang? | tv_channel : tv_channel.series_name , tv_channel.country , tv_channel.id , tv_channel.language , tv_channel.content , tv_channel.* | cartoon : cartoon.directed_by ( Ben Jones , Michael Chang ) , cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.* | tv_series : tv_series.episode , tv_series.rating , tv_series.channel , tv_series.id , tv_series.air_date , tv_series.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT TV_Channel.series_name, TV_Channel.country 
FROM TV_Channel 
WHERE TV_Channel.id IN (
  SELECT Cartoon.channel 
  FROM Cartoon 
  WHERE Cartoon.directed_by IN ('Ben Jones', 'Michael Chang')
)
natsql:
SELECT TV_Channel.series_name, TV_Channel.country 
FROM TV_Channel 
WHERE TV_Channel.id IN (
  SELECT Cartoon.channel 
  FROM Cartoon 
  WHERE Cartoon.directed_by IN ('Ben Jones', 'Michael Chang')
)
SQL:
SELECT TV_Channel.series_name, TV_Channel.country 
FROM TV_Channel 
WHERE TV_Channel.id IN (
  SELECT Cartoon.channel 
  FROM Cartoon 
  WHERE Cartoon.directed_by IN ('Ben Jones', 'Michael Chang')
)
self correction:
SELECT TV_Channel.series_name, TV_Channel.country  FROM TV_Channel  JOIN Cartoon ON Cartoon.channel = TV_Channel.id WHERE Cartoon.directed_by IN ('Ben Jones', 'Michael Chang')

index is 638
SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?
schema_links:
What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang? | tv_channel : tv_channel.series_name , tv_channel.country , tv_channel.content , tv_channel.id , tv_channel.language , tv_channel.* | cartoon : cartoon.directed_by ( Ben Jones , Michael Chang ) , cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.channel , tv_series.air_date , tv_series.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT series_name, country 
FROM TV_Channel 
WHERE id IN (
    SELECT DISTINCT Channel 
    FROM Cartoon 
    WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Michael Chang'
)
natsql:
SELECT series_name, country 
FROM TV_Channel 
WHERE id IN (
    SELECT DISTINCT Channel 
    FROM Cartoon 
    WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Michael Chang'
)
SQL:
SELECT series_name, country 
FROM TV_Channel 
WHERE id IN (
    SELECT DISTINCT Channel 
    FROM Cartoon 
    WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Michael Chang'
)
self correction:
SELECT series_name, Country FROM TV_Channel WHERE id IN (     SELECT DISTINCT Channel     FROM Cartoon     WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Michael Chang' )

index is 639
SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'
find the pixel aspect ratio and nation of the tv channels that do not use English.
schema_links:
find the pixel aspect ratio and nation of the tv channels that do not use English. | tv_channel : tv_channel.language ( English ) , tv_channel.pixel_aspect_ratio_par , tv_channel.country , tv_channel.id , tv_channel.content , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> 'English'
natsql:
SELECT pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> 'English'
SQL:
SELECT pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> 'English'
self correction:
SELECT TV_Channel.pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language <> 'English'

index is 640
SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'
What is the pixel aspect ratio and country of origin for all TV channels that do not use English?
schema_links:
What is the pixel aspect ratio and country of origin for all TV channels that do not use English? | tv_channel : tv_channel.language ( English ) , tv_channel.pixel_aspect_ratio_par , tv_channel.country , tv_channel.id , tv_channel.content , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT pixel_aspect_ratio_PAR, country FROM TV_Channel WHERE language <> 'English'
natsql:
SELECT pixel_aspect_ratio_PAR, country FROM TV_Channel WHERE language <> 'English'
SQL:
SELECT pixel_aspect_ratio_PAR, country FROM TV_Channel WHERE language <> 'English'
self correction:
SELECT pixel_aspect_ratio_PAR, Country  FROM TV_Channel  WHERE Language <> 'English'

index is 641
SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2
find id of the tv channels that from the countries where have more than two tv channels.
schema_links:
find id of the tv channels that from the countries where have more than two tv channels. | tv_channel : tv_channel.id , tv_channel.country , tv_channel.content , tv_channel.language , tv_channel.series_name , tv_channel.* | tv_series : tv_series.rating , tv_series.id , tv_series.episode , tv_series.air_date , tv_series.share , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql:
select _ from _ where count ( _ ) > _ group by _
natsql and SQL generation:
SELECT id FROM TV_Channel GROUP BY country HAVING COUNT(*) > 2
natsql:
SELECT id FROM TV_Channel GROUP BY country HAVING COUNT(*) > 2
SQL:
SELECT id FROM TV_Channel GROUP BY country HAVING COUNT(*) > 2
self correction:
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.Country HAVING COUNT(*) > 2

index is 642
SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2
What are the ids of all tv channels that have more than 2 TV channels?
schema_links:
What are the ids of all tv channels that have more than 2 TV channels? | tv_channel : tv_channel.id , tv_channel.content , tv_channel.country , tv_channel.language , tv_channel.series_name , tv_channel.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql:
select _ from _ where count ( _ ) > _ group by _
natsql and SQL generation:
SELECT id FROM TV_Channel GROUP BY id HAVING count(*) > 2
natsql:
SELECT id FROM TV_Channel GROUP BY id HAVING count(*) > 2
SQL:
SELECT id FROM TV_Channel GROUP BY id HAVING count(*) > 2
self correction:
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.id HAVING COUNT(*) > 2

index is 643
SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'
find the id of tv channels that do not play any cartoon directed by Ben Jones.
schema_links:
find the id of tv channels that do not play any cartoon directed by Ben Jones. | cartoon : cartoon.directed_by ( Ben Jones ) , cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.* | tv_channel : tv_channel.id , tv_channel.content , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.channel , tv_series.air_date , tv_series.*
natsql:
select _ from _ where except_ @.@ is _ and _
natsql and SQL generation:
SELECT id FROM TV_Channel WHERE id NOT IN (SELECT channel FROM Cartoon WHERE Directed_by = 'Ben Jones')
natsql:
SELECT id FROM TV_Channel WHERE id NOT IN (SELECT channel FROM Cartoon WHERE Directed_by = 'Ben Jones')
SQL:
SELECT id FROM TV_Channel WHERE id NOT IN (SELECT channel FROM Cartoon WHERE Directed_by = 'Ben Jones')
self correction:
SELECT TV_Channel.id  FROM TV_Channel  WHERE TV_Channel.id NOT IN (   SELECT Cartoon.Channel    FROM Cartoon    WHERE Cartoon.Directed_by = 'Ben Jones' )

index is 644
SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'
What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?
schema_links:
What are the ids of the TV channels that do not have any cartoons directed by Ben Jones? | cartoon : cartoon.directed_by ( Ben Jones ) , cartoon.id , cartoon.title , cartoon.channel , cartoon.written_by , cartoon.* | tv_channel : tv_channel.id , tv_channel.content , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.air_date , tv_series.share , tv_series.*
natsql:
select _ from _ where except_ @.@ is _ and _
natsql and SQL generation:
SELECT id FROM TV_Channel WHERE id NOT IN (SELECT channel FROM Cartoon WHERE directed_by = 'Ben Jones')
natsql:
SELECT id FROM TV_Channel WHERE id NOT IN (SELECT channel FROM Cartoon WHERE directed_by = 'Ben Jones')
SQL:
SELECT id FROM TV_Channel WHERE id NOT IN (SELECT channel FROM Cartoon WHERE directed_by = 'Ben Jones')
self correction:
SELECT TV_Channel.id FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.directed_by <> 'Ben Jones' OR Cartoon.directed_by IS NULL

index is 645
SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')
find the package option of the tv channel that do not have any cartoon directed by Ben Jones.
schema_links:
find the package option of the tv channel that do not have any cartoon directed by Ben Jones. | tv_channel : tv_channel.package_option ( Option ) , tv_channel.content , tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.* | cartoon : cartoon.directed_by ( Ben Jones ) , cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.* | tv_series : tv_series.episode , tv_series.id , tv_series.rating , tv_series.share , tv_series.channel , tv_series.*
natsql:
select _ from _ where @.@ not in _ and _
natsql and SQL generation:
SELECT package_option
FROM TV_Channel
WHERE id NOT IN (SELECT channel
                 FROM Cartoon
                 WHERE Directed_by = 'Ben Jones')
natsql:
SELECT package_option
FROM TV_Channel
WHERE id NOT IN (SELECT channel
                 FROM Cartoon
                 WHERE Directed_by = 'Ben Jones')
SQL:
SELECT package_option
FROM TV_Channel
WHERE id NOT IN (SELECT channel
                 FROM Cartoon
                 WHERE Directed_by = 'Ben Jones')
self correction:
SELECT TV_Channel.package_option FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT Cartoon.Channel                              FROM Cartoon                              WHERE Cartoon.Directed_by = 'Ben Jones')

index is 646
SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')
What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?
schema_links:
What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones? | cartoon : cartoon.directed_by ( Ben Jones ) , cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.* | tv_channel : tv_channel.package_option ( Option ) , tv_channel.content , tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.air_date , tv_series.share , tv_series.*
natsql:
select _ from _ where @.@ not in _ and _
natsql and SQL generation:
SELECT package_option
FROM TV_Channel
WHERE id NOT IN (
    SELECT DISTINCT Channel
    FROM Cartoon
    WHERE Directed_by = 'Ben Jones'
)
natsql:
SELECT package_option
FROM TV_Channel
WHERE id NOT IN (
    SELECT DISTINCT Channel
    FROM Cartoon
    WHERE Directed_by = 'Ben Jones'
)
SQL:
SELECT package_option
FROM TV_Channel
WHERE id NOT IN (
    SELECT DISTINCT Channel
    FROM Cartoon
    WHERE Directed_by = 'Ben Jones'
)
self correction:
SELECT Package_Option FROM TV_Channel WHERE id NOT IN (     SELECT DISTINCT Channel     FROM Cartoon     WHERE Directed_by = 'Ben Jones' )

index is 647
SELECT count(*) FROM poker_player
How many poker players are there?
schema_links:
How many poker players are there? | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.best_finish , poker_player.money_rank , poker_player.earnings , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT count(*) FROM poker_player
natsql:
SELECT count(*) FROM poker_player
SQL:
SELECT count(*) FROM poker_player
self correction:
SELECT COUNT(*) FROM poker_player

index is 648
SELECT count(*) FROM poker_player
Count the number of poker players.
schema_links:
Count the number of poker players. | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.earnings , poker_player.final_table_made , poker_player.best_finish , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT count(*) FROM poker_player
natsql:
SELECT count(*) FROM poker_player
SQL:
SELECT count(*) FROM poker_player
self correction:
SELECT count(*) FROM poker_player

index is 649
SELECT Earnings FROM poker_player ORDER BY Earnings DESC
List the earnings of poker players in descending order.
schema_links:
List the earnings of poker players in descending order. | poker_player : poker_player.earnings , poker_player.money_rank , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql:
select _ from _ order by _ desc
natsql and SQL generation:
SELECT earnings FROM poker_player ORDER BY earnings DESC
natsql:
SELECT earnings FROM poker_player ORDER BY earnings DESC
SQL:
SELECT earnings FROM poker_player ORDER BY earnings DESC
self correction:
SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC

index is 650
SELECT Earnings FROM poker_player ORDER BY Earnings DESC
What are the earnings of poker players, ordered descending by value?
schema_links:
What are the earnings of poker players, ordered descending by value? | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql:
select _ from _ order by _ desc
natsql and SQL generation:
SELECT earnings FROM poker_player ORDER BY earnings DESC
natsql:
SELECT earnings FROM poker_player ORDER BY earnings DESC
SQL:
SELECT earnings FROM poker_player ORDER BY earnings DESC
self correction:
SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC

index is 651
SELECT Final_Table_Made ,  Best_Finish FROM poker_player
List the final tables made and the best finishes of poker players.
schema_links:
List the final tables made and the best finishes of poker players. | poker_player : poker_player.final_table_made , poker_player.best_finish , poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql:
select _ from _
natsql and SQL generation:
SELECT final_table_made, best_finish FROM poker_player
natsql:
SELECT final_table_made, best_finish FROM poker_player
SQL:
SELECT final_table_made, best_finish FROM poker_player
self correction:
SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player

index is 652
SELECT Final_Table_Made ,  Best_Finish FROM poker_player
What are the final tables made and best finishes for all poker players?
schema_links:
What are the final tables made and best finishes for all poker players? | poker_player : poker_player.final_table_made , poker_player.best_finish , poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql:
select _ from _
natsql and SQL generation:
SELECT final_table_made, best_finish FROM poker_player
natsql:
SELECT final_table_made, best_finish FROM poker_player
SQL:
SELECT final_table_made, best_finish FROM poker_player
self correction:
SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player

index is 653
SELECT avg(Earnings) FROM poker_player
What is the average earnings of poker players?
schema_links:
What is the average earnings of poker players? | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql:
select avg ( _ ) from _
natsql and SQL generation:
SELECT AVG(earnings) FROM poker_player
natsql:
SELECT AVG(earnings) FROM poker_player
SQL:
SELECT AVG(earnings) FROM poker_player
self correction:
SELECT AVG(Earnings) FROM poker_player

index is 654
SELECT avg(Earnings) FROM poker_player
Return the average earnings across all poker players.
schema_links:
Return the average earnings across all poker players. | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql:
select avg ( _ ) from _
natsql and SQL generation:
SELECT AVG(earnings) FROM poker_player
natsql:
SELECT AVG(earnings) FROM poker_player
SQL:
SELECT AVG(earnings) FROM poker_player
self correction:
SELECT AVG(Earnings) FROM poker_player

index is 655
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
What is the money rank of the poker player with the highest earnings?
schema_links:
What is the money rank of the poker player with the highest earnings? | poker_player : poker_player.money_rank , poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1
natsql:
SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1
SQL:
SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1
self correction:
SELECT poker_player.money_rank  FROM poker_player  INNER JOIN people ON poker_player.People_ID = people.People_ID  ORDER BY poker_player.Earnings DESC  LIMIT 1

index is 656
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
Return the money rank of the player with the greatest earnings.
schema_links:
Return the money rank of the player with the greatest earnings. | poker_player : poker_player.money_rank , poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1
natsql:
SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1
SQL:
SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1
self correction:
SELECT poker_player.money_rank  FROM poker_player  ORDER BY poker_player.earnings DESC  LIMIT 1

index is 657
SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000
What is the maximum number of final tables made among poker players with earnings less than 200000?
schema_links:
What is the maximum number of final tables made among poker players with earnings less than 200000? | poker_player : poker_player.final_table_made , poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.best_finish , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql:
select max ( _ ) from _ where _
natsql and SQL generation:
SELECT max(final_table_made) FROM poker_player WHERE earnings < 200000
natsql:
SELECT max(final_table_made) FROM poker_player WHERE earnings < 200000
SQL:
SELECT max(final_table_made) FROM poker_player WHERE earnings < 200000
self correction:
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000

index is 658
SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000
Return the maximum final tables made across all poker players who have earnings below 200000.
schema_links:
Return the maximum final tables made across all poker players who have earnings below 200000. | poker_player : poker_player.final_table_made , poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.best_finish , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql:
select max ( _ ) from _ where _
natsql and SQL generation:
SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000
natsql:
SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000
SQL:
SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000
self correction:
SELECT MAX(final_table_made) AS max_final_tables FROM poker_player WHERE earnings < 200000

index is 659
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID
What are the names of poker players?
schema_links:
What are the names of poker players? | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.best_finish , poker_player.money_rank , poker_player.*
natsql:
select _ from _ where @.@ join _
natsql and SQL generation:
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID
natsql:
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID
SQL:
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID
self correction:
SELECT name FROM people

index is 660
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID
Return the names of all the poker players.
schema_links:
Return the names of all the poker players. | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.best_finish , poker_player.earnings , poker_player.final_table_made , poker_player.*
natsql:
select _ from _ where @.@ join _
natsql and SQL generation:
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID
natsql:
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID
SQL:
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID
self correction:
SELECT name FROM poker_player JOIN people ON people.People_ID = poker_player.People_ID

index is 661
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000
What are the names of poker players whose earnings is higher than 300000?
schema_links:
What are the names of poker players whose earnings is higher than 300000? | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT name FROM poker_player WHERE earnings > 300000
natsql:
SELECT name FROM poker_player WHERE earnings > 300000
SQL:
SELECT name FROM poker_player WHERE earnings > 300000
self correction:
SELECT poker_player.Name  FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings > 300000

index is 662
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000
Give the names of poker players who have earnings above 300000.
schema_links:
Give the names of poker players who have earnings above 300000. | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE earnings > 300000
natsql:
SELECT name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE earnings > 300000
SQL:
SELECT name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE earnings > 300000
self correction:
SELECT name  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  WHERE poker_player.Earnings > 300000

index is 663
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made
List the names of poker players ordered by the final tables made in ascending order.
schema_links:
List the names of poker players ordered by the final tables made in ascending order. | poker_player : poker_player.final_table_made , poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.best_finish , poker_player.* | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.*
natsql:
select _ from _ order by _ asc
natsql and SQL generation:
SELECT name FROM poker_player ORDER BY final_table_made ASC
natsql:
SELECT name FROM poker_player ORDER BY final_table_made ASC
SQL:
SELECT name FROM poker_player ORDER BY final_table_made ASC
self correction:
SELECT people.name  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  ORDER BY poker_player.final_table_made ASC

index is 664
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made
What are the names of poker players, ordered ascending by the number of final tables they have made?
schema_links:
What are the names of poker players, ordered ascending by the number of final tables they have made? | poker_player : poker_player.final_table_made , poker_player.poker_player_id , poker_player.people_id , poker_player.earnings , poker_player.best_finish , poker_player.* | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.*
natsql:
select _ from _ order by _ asc
natsql and SQL generation:
SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY final_table_made ASC
natsql:
SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY final_table_made ASC
SQL:
SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY final_table_made ASC
self correction:
SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id GROUP BY people.name ORDER BY COUNT(poker_player.final_table_made) ASC

index is 665
SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1
What is the birth date of the poker player with the lowest earnings?
schema_links:
What is the birth date of the poker player with the lowest earnings? | people : people.birth_date , people.name , people.nationality , people.height , people.people_id , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql:
select _ from _ order by _ asc limit _
natsql and SQL generation:
SELECT birth_date FROM people ORDER BY earnings ASC LIMIT 1
natsql:
SELECT birth_date FROM people ORDER BY earnings ASC LIMIT 1
SQL:
SELECT birth_date FROM people ORDER BY earnings ASC LIMIT 1
self correction:
SELECT birth_date  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Earnings ASC  LIMIT 1

index is 666
SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1
Return the birth date of the poker player with the lowest earnings.
schema_links:
Return the birth date of the poker player with the lowest earnings. | people : people.birth_date , people.name , people.nationality , people.height , people.people_id , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql:
select _ from _ order by _ asc limit _
natsql and SQL generation:
SELECT birth_date FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY earnings ASC LIMIT 1
natsql:
SELECT birth_date FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY earnings ASC LIMIT 1
SQL:
SELECT birth_date FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY earnings ASC LIMIT 1
self correction:
SELECT people.Birth_Date  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Earnings ASC  LIMIT 1

index is 667
SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1
What is the money rank of the tallest poker player?
schema_links:
What is the money rank of the tallest poker player? | poker_player : poker_player.money_rank , poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.* | people : people.height , people.name , people.nationality , people.people_id , people.birth_date , people.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT money_rank FROM poker_player 
JOIN people ON poker_player.people_id = people.people_id
ORDER BY height DESC
LIMIT 1
natsql:
SELECT money_rank FROM poker_player 
JOIN people ON poker_player.people_id = people.people_id
ORDER BY height DESC
LIMIT 1
SQL:
SELECT money_rank FROM poker_player 
JOIN people ON poker_player.people_id = people.people_id
ORDER BY height DESC
LIMIT 1
self correction:
SELECT poker_player.money_rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1

index is 668
SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1
Return the money rank of the poker player with the greatest height.
schema_links:
Return the money rank of the poker player with the greatest height. | poker_player : poker_player.money_rank , poker_player.people_id , poker_player.earnings , poker_player.poker_player_id , poker_player.final_table_made , poker_player.* | people : people.height , people.name , people.people_id , people.nationality , people.birth_date , people.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT money_rank FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY height DESC LIMIT 1
natsql:
SELECT money_rank FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY height DESC LIMIT 1
SQL:
SELECT money_rank FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY height DESC LIMIT 1
self correction:
SELECT poker_player.money_rank  FROM poker_player  JOIN people ON poker_player.people_id = people.people_id  ORDER BY people.height DESC  LIMIT 1

index is 669
SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200
What is the average earnings of poker players with height higher than 200?
schema_links:
What is the average earnings of poker players with height higher than 200? | people : people.height , people.name , people.people_id , people.nationality , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql:
select avg ( _ ) from _ where _
natsql and SQL generation:
SELECT avg(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200
natsql:
SELECT avg(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200
SQL:
SELECT avg(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200
self correction:
SELECT avg(poker_player.Earnings) FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  WHERE people.Height > 200

index is 670
SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200
Give average earnings of poker players who are taller than 200.
schema_links:
Give average earnings of poker players who are taller than 200. | people : people.height , people.name , people.people_id , people.nationality , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql:
select avg ( _ ) from _ where _
natsql and SQL generation:
SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200
natsql:
SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200
SQL:
SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200
self correction:
SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200

index is 671
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC
What are the names of poker players in descending order of earnings?
schema_links:
What are the names of poker players in descending order of earnings? | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql:
select _ from _ order by _ desc
natsql and SQL generation:
SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY earnings DESC
natsql:
SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY earnings DESC
SQL:
SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY earnings DESC
self correction:
SELECT name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings DESC

index is 672
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC
Return the names of poker players sorted by their earnings descending.
schema_links:
Return the names of poker players sorted by their earnings descending. | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql:
select _ from _ order by _ desc
natsql and SQL generation:
SELECT name FROM poker_player INNER JOIN people ON poker_player.People_ID = people.People_ID ORDER BY earnings DESC
natsql:
SELECT name FROM poker_player INNER JOIN people ON poker_player.People_ID = people.People_ID ORDER BY earnings DESC
SQL:
SELECT name FROM poker_player INNER JOIN people ON poker_player.People_ID = people.People_ID ORDER BY earnings DESC
self correction:
SELECT people.Name  FROM poker_player  INNER JOIN people ON poker_player.People_ID = people.People_ID  ORDER BY poker_player.Earnings DESC

index is 673
SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality
What are different nationalities of people and the corresponding number of people from each nation?
schema_links:
What are different nationalities of people and the corresponding number of people from each nation? | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT nationality, COUNT(*) FROM people GROUP BY nationality
natsql:
SELECT nationality, COUNT(*) FROM people GROUP BY nationality
SQL:
SELECT nationality, COUNT(*) FROM people GROUP BY nationality
self correction:
SELECT nationality, COUNT(*)  FROM people  GROUP BY nationality

index is 674
SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality
How many people are there of each nationality?
schema_links:
How many people are there of each nationality? | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT nationality, COUNT(*) FROM people GROUP BY nationality
natsql:
SELECT nationality, COUNT(*) FROM people GROUP BY nationality
SQL:
SELECT nationality, COUNT(*) FROM people GROUP BY nationality
self correction:
SELECT nationality, COUNT(*) FROM people GROUP BY nationality

index is 675
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
What is the most common nationality of people?
schema_links:
What is the most common nationality of people? | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1
natsql:
SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1
SQL:
SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1
self correction:
SELECT Nationality, COUNT(*) AS Count FROM people GROUP BY Nationality ORDER BY Count DESC LIMIT 1

index is 676
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
Give the nationality that is most common across all people.
schema_links:
Give the nationality that is most common across all people. | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT nationality FROM people GROUP BY nationality ORDER BY count(*) DESC LIMIT 1
natsql:
SELECT nationality FROM people GROUP BY nationality ORDER BY count(*) DESC LIMIT 1
SQL:
SELECT nationality FROM people GROUP BY nationality ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1

index is 677
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2
What are the nationalities that are shared by at least two people?
schema_links:
What are the nationalities that are shared by at least two people? | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql:
select _ from _ where count ( _ ) >= _ group by _
natsql and SQL generation:
SELECT nationality FROM people GROUP BY nationality HAVING count(*) >= 2
natsql:
SELECT nationality FROM people GROUP BY nationality HAVING count(*) >= 2
SQL:
SELECT nationality FROM people GROUP BY nationality HAVING count(*) >= 2
self correction:
SELECT nationality FROM people GROUP BY nationality HAVING COUNT(DISTINCT People_ID) >= 2

index is 678
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2
Return the nationalities for which there are two or more people.
schema_links:
Return the nationalities for which there are two or more people. | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql:
select _ from _ where count ( _ ) >= _ group by _
natsql and SQL generation:
SELECT nationality FROM people GROUP BY nationality HAVING count(*) >= 2
natsql:
SELECT nationality FROM people GROUP BY nationality HAVING count(*) >= 2
SQL:
SELECT nationality FROM people GROUP BY nationality HAVING count(*) >= 2
self correction:
SELECT Nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2

index is 679
SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC
List the names and birth dates of people in ascending alphabetical order of name.
schema_links:
List the names and birth dates of people in ascending alphabetical order of name. | people : people.birth_date , people.name , people.nationality , people.height , people.people_id , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql:
select _ from _ order by _ asc
natsql and SQL generation:
SELECT name, birth_date FROM people ORDER BY name ASC
natsql:
SELECT name, birth_date FROM people ORDER BY name ASC
SQL:
SELECT name, birth_date FROM people ORDER BY name ASC
self correction:
SELECT name, birth_date FROM people ORDER BY name COLLATE NOCASE ASC

index is 680
SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC
What are the names and birth dates of people, ordered by their names in alphabetical order?
schema_links:
What are the names and birth dates of people, ordered by their names in alphabetical order? | people : people.birth_date , people.name , people.nationality , people.height , people.people_id , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql:
select _ from _ order by _ asc
natsql and SQL generation:
SELECT name, birth_date FROM people ORDER BY name ASC
natsql:
SELECT name, birth_date FROM people ORDER BY name ASC
SQL:
SELECT name, birth_date FROM people ORDER BY name ASC
self correction:
SELECT name, birth_date FROM people ORDER BY name ASC

index is 681
SELECT Name FROM people WHERE Nationality != "Russia"
Show names of people whose nationality is not "Russia".
schema_links:
Show names of people whose nationality is not "Russia". | people : people.nationality ( Russia ) , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT name FROM people WHERE nationality != 'Russia'
natsql:
SELECT name FROM people WHERE nationality != 'Russia'
SQL:
SELECT name FROM people WHERE nationality != 'Russia'
self correction:
SELECT name  FROM people  WHERE nationality <> 'Russia'

index is 682
SELECT Name FROM people WHERE Nationality != "Russia"
What are the names of people who are not from Russia?
schema_links:
What are the names of people who are not from Russia? | people : people.nationality ( Russia ) , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT name FROM people WHERE nationality <> 'Russia'
natsql:
SELECT name FROM people WHERE nationality <> 'Russia'
SQL:
SELECT name FROM people WHERE nationality <> 'Russia'
self correction:
SELECT name  FROM people  WHERE Nationality <> 'Russia'

index is 683
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
List the names of people that are not poker players.
schema_links:
List the names of people that are not poker players. | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.poker_player_id , poker_player.earnings , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql:
select _ from _ where @.@ not in _
natsql and SQL generation:
SELECT name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
natsql:
SELECT name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
SQL:
SELECT name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
self correction:
SELECT name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)

index is 684
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
What are the names of people who do not play poker?
schema_links:
What are the names of people who do not play poker? | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.poker_player_id , poker_player.earnings , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql:
select _ from _ where @.@ not in _
natsql and SQL generation:
SELECT name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
natsql:
SELECT name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
SQL:
SELECT name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
self correction:
SELECT name FROM people LEFT JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.People_ID IS NULL

index is 685
SELECT count(DISTINCT Nationality) FROM people
How many distinct nationalities are there?
schema_links:
How many distinct nationalities are there? | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql:
select count ( distinct _ ) from _
natsql and SQL generation:
SELECT COUNT(DISTINCT nationality) FROM people
natsql:
SELECT COUNT(DISTINCT nationality) FROM people
SQL:
SELECT COUNT(DISTINCT nationality) FROM people
self correction:
SELECT COUNT(DISTINCT Nationality) FROM people

index is 686
SELECT count(DISTINCT Nationality) FROM people
Count the number of different nationalities.
schema_links:
Count the number of different nationalities. | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql:
select count ( distinct _ ) from _
natsql and SQL generation:
SELECT COUNT(DISTINCT nationality) FROM people
natsql:
SELECT COUNT(DISTINCT nationality) FROM people
SQL:
SELECT COUNT(DISTINCT nationality) FROM people
self correction:
SELECT COUNT(DISTINCT Nationality) FROM people

index is 687
SELECT count(*) FROM area_code_state
How many states are there?
schema_links:
How many states are there? | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.* | votes : votes.state , votes.created , votes.vote_id , votes.phone_number , votes.contestant_number , votes.* | contestants : contestants.contestant_number , contestants.contestant_name , contestants.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT COUNT(*) FROM area_code_state
natsql:
SELECT COUNT(*) FROM area_code_state
SQL:
SELECT COUNT(*) FROM area_code_state
self correction:
SELECT COUNT(DISTINCT state) FROM area_code_state

index is 688
SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC
List the contestant numbers and names, ordered by contestant name descending.
schema_links:
List the contestant numbers and names, ordered by contestant name descending. | contestants : contestants.contestant_name , contestants.contestant_number , contestants.* | votes : votes.state , votes.created , votes.vote_id , votes.phone_number , votes.contestant_number , votes.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.*
natsql:
select _ from _ order by _ desc
natsql and SQL generation:
SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC
natsql:
SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC
SQL:
SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC
self correction:
SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC

index is 689
SELECT vote_id ,  phone_number ,  state FROM votes
List the vote ids, phone numbers and states of all votes.
schema_links:
List the vote ids, phone numbers and states of all votes. | votes : votes.vote_id , votes.phone_number , votes.state , votes.created , votes.contestant_number , votes.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.* | contestants : contestants.contestant_number , contestants.contestant_name , contestants.*
natsql:
select _ from _
natsql and SQL generation:
SELECT vote_id, phone_number, state FROM votes
natsql:
SELECT vote_id, phone_number, state FROM votes
SQL:
SELECT vote_id, phone_number, state FROM votes
self correction:
SELECT vote_id, phone_number, state FROM VOTES

index is 690
SELECT max(area_code) ,  min(area_code) FROM area_code_state
What are the maximum and minimum values of area codes?
schema_links:
What are the maximum and minimum values of area codes? | area_code_state : area_code_state.area_code , area_code_state.state , area_code_state.* | votes : votes.state , votes.created , votes.vote_id , votes.phone_number , votes.contestant_number , votes.* | contestants : contestants.contestant_number , contestants.contestant_name , contestants.*
natsql:
select max ( _ ) , min ( _ ) from _
natsql and SQL generation:
SELECT MAX(area_code), MIN(area_code) FROM AREA_CODE_STATE
natsql:
SELECT MAX(area_code), MIN(area_code) FROM AREA_CODE_STATE
SQL:
SELECT MAX(area_code), MIN(area_code) FROM AREA_CODE_STATE
self correction:
SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE

index is 691
SELECT max(created) FROM votes WHERE state  =  'CA'
What is last date created of votes from the state 'CA'?
schema_links:
What is last date created of votes from the state 'CA'? | votes : votes.created , votes.state ( CA ) , votes.vote_id , votes.phone_number , votes.contestant_number , votes.* | area_code_state : area_code_state.state ( CA ) , area_code_state.area_code , area_code_state.* | contestants : contestants.contestant_number , contestants.contestant_name , contestants.*
natsql:
select max ( _ ) from _ where _
natsql and SQL generation:
SELECT MAX(created) FROM votes WHERE state = 'CA'
natsql:
SELECT MAX(created) FROM votes WHERE state = 'CA'
SQL:
SELECT MAX(created) FROM votes WHERE state = 'CA'
self correction:
SELECT MAX(created)  FROM VOTES  WHERE state = 'CA'

index is 692
SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'
What are the names of the contestants whose names are not 'Jessie Alloway'
schema_links:
What are the names of the contestants whose names are not 'Jessie Alloway' | contestants : contestants.contestant_name ( Jessie Alloway ) , contestants.contestant_number , contestants.* | votes : votes.state , votes.created , votes.vote_id , votes.phone_number , votes.contestant_number , votes.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'
natsql:
SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'
SQL:
SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'
self correction:
SELECT contestant_name FROM contestants WHERE contestant_name <> 'Jessie Alloway'

index is 693
SELECT DISTINCT state ,  created FROM votes
What are the distinct states and create time of all votes?
schema_links:
What are the distinct states and create time of all votes? | votes : votes.state , votes.created , votes.vote_id , votes.phone_number , votes.contestant_number , votes.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.* | contestants : contestants.contestant_number , contestants.contestant_name , contestants.*
natsql:
select distinct _ from _
natsql and SQL generation:
SELECT DISTINCT state, created FROM votes
natsql:
SELECT DISTINCT state, created FROM votes
SQL:
SELECT DISTINCT state, created FROM votes
self correction:
SELECT DISTINCT state, created FROM VOTES

index is 694
SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2
What are the contestant numbers and names of the contestants who had at least two votes?
schema_links:
What are the contestant numbers and names of the contestants who had at least two votes? | contestants : contestants.contestant_name , contestants.contestant_number , contestants.* | votes : votes.contestant_number , votes.created , votes.state , votes.vote_id , votes.phone_number , votes.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.*
natsql:
select _ from _ where count ( _ ) >= _ group by _
natsql and SQL generation:
SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number IN (SELECT contestant_number FROM votes GROUP BY contestant_number HAVING COUNT(*) >= 2)
natsql:
SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number IN (SELECT contestant_number FROM votes GROUP BY contestant_number HAVING COUNT(*) >= 2)
SQL:
SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number IN (SELECT contestant_number FROM votes GROUP BY contestant_number HAVING COUNT(*) >= 2)
self correction:
SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number IN (     SELECT contestant_number     FROM votes     GROUP BY contestant_number     HAVING COUNT(*) >= 2 )

index is 695
SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1
Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?
schema_links:
Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes? | contestants : contestants.contestant_number , contestants.contestant_name , contestants.* | votes : votes.contestant_number , votes.created , votes.state , votes.vote_id , votes.phone_number , votes.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.*
natsql:
select _ from _ group by _ order by count ( _ ) asc limit _
natsql and SQL generation:
SELECT contestant_number, contestant_name FROM contestants JOIN votes ON contestants.contestant_number = votes.contestant_number GROUP BY contestant_number, contestant_name ORDER BY count(votes.vote_id) ASC LIMIT 1
natsql:
SELECT contestant_number, contestant_name FROM contestants JOIN votes ON contestants.contestant_number = votes.contestant_number GROUP BY contestant_number, contestant_name ORDER BY count(votes.vote_id) ASC LIMIT 1
SQL:
SELECT contestant_number, contestant_name FROM contestants JOIN votes ON contestants.contestant_number = votes.contestant_number GROUP BY contestant_number, contestant_name ORDER BY count(votes.vote_id) ASC LIMIT 1
self correction:
SELECT contestant_number, contestant_name  FROM contestants  JOIN votes ON contestants.contestant_number = votes.contestant_number  GROUP BY contestant_number, contestant_name  ORDER BY COUNT(votes.vote_id) ASC  LIMIT 1

index is 696
SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'
What are the number of votes from state 'NY' or 'CA'?
schema_links:
What are the number of votes from state 'NY' or 'CA'? | area_code_state : area_code_state.state ( CA , NY ) , area_code_state.area_code , area_code_state.* | votes : votes.state ( CA , NY ) , votes.created , votes.vote_id , votes.phone_number , votes.contestant_number , votes.* | contestants : contestants.contestant_number , contestants.contestant_name , contestants.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM votes WHERE state = 'NY' OR state = 'CA'
natsql:
SELECT count(*) FROM votes WHERE state = 'NY' OR state = 'CA'
SQL:
SELECT count(*) FROM votes WHERE state = 'NY' OR state = 'CA'
self correction:
SELECT count(*)  FROM VOTES  WHERE state = 'NY' OR state = 'CA'

index is 697
SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )
How many contestants did not get voted?
schema_links:
How many contestants did not get voted? | contestants : contestants.contestant_name , contestants.contestant_number , contestants.* | votes : votes.contestant_number , votes.vote_id , votes.state , votes.created , votes.phone_number , votes.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.*
natsql:
select count ( _ ) from _ where @.@ not in _
natsql and SQL generation:
SELECT count(*) FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes)
natsql:
SELECT count(*) FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes)
SQL:
SELECT count(*) FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes)
self correction:
SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)

index is 698
SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1
What is the area code in which the most voters voted?
schema_links:
What is the area code in which the most voters voted? | votes : votes.created , votes.vote_id , votes.state , votes.phone_number , votes.contestant_number , votes.* | area_code_state : area_code_state.area_code , area_code_state.state , area_code_state.* | contestants : contestants.contestant_name , contestants.contestant_number , contestants.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT state FROM VOTES GROUP BY state ORDER BY count(*) DESC LIMIT 1
natsql:
SELECT state FROM VOTES GROUP BY state ORDER BY count(*) DESC LIMIT 1
SQL:
SELECT state FROM VOTES GROUP BY state ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT area_code  FROM AREA_CODE_STATE  JOIN VOTES ON VOTES.state = AREA_CODE_STATE.state  GROUP BY area_code  ORDER BY COUNT(*) DESC  LIMIT 1

index is 699
SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'
What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?
schema_links:
What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'? | votes : votes.phone_number , votes.state , votes.created , votes.vote_id , votes.contestant_number , votes.* | contestants : contestants.contestant_name ( Tabatha Gehling ) , contestants.contestant_number , contestants.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT created, state, phone_number FROM votes WHERE contestant_number = (SELECT contestant_number FROM contestants WHERE contestant_name = 'Tabatha Gehling')
natsql:
SELECT created, state, phone_number FROM votes WHERE contestant_number = (SELECT contestant_number FROM contestants WHERE contestant_name = 'Tabatha Gehling')
SQL:
SELECT created, state, phone_number FROM votes WHERE contestant_number = (SELECT contestant_number FROM contestants WHERE contestant_name = 'Tabatha Gehling')
self correction:
SELECT created, state, phone_number FROM VOTES WHERE contestant_number = (   SELECT contestant_number   FROM CONTESTANTS   WHERE contestant_name = 'Tabatha Gehling' )

index is 700
SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'
List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.
schema_links:
List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'. | contestants : contestants.contestant_name ( Kelly Clauss , Tabatha Gehling ) , contestants.contestant_number , contestants.* | votes : votes.created , votes.vote_id , votes.state , votes.phone_number , votes.contestant_number , votes.* | area_code_state : area_code_state.area_code , area_code_state.state , area_code_state.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT area_code FROM AREA_CODE_STATE WHERE state IN (SELECT state FROM VOTES WHERE contestant_number IN (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling' OR contestant_name = 'Kelly Clauss') GROUP BY state HAVING COUNT(DISTINCT contestant_number) = 2)
natsql:
SELECT area_code FROM AREA_CODE_STATE WHERE state IN (SELECT state FROM VOTES WHERE contestant_number IN (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling' OR contestant_name = 'Kelly Clauss') GROUP BY state HAVING COUNT(DISTINCT contestant_number) = 2)
SQL:
SELECT area_code FROM AREA_CODE_STATE WHERE state IN (SELECT state FROM VOTES WHERE contestant_number IN (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling' OR contestant_name = 'Kelly Clauss') GROUP BY state HAVING COUNT(DISTINCT contestant_number) = 2)
self correction:
SELECT area_code  FROM AREA_CODE_STATE  WHERE state IN (     SELECT state      FROM VOTES      WHERE contestant_number IN (         SELECT contestant_number          FROM CONTESTANTS          WHERE contestant_name = 'Tabatha Gehling' OR contestant_name = 'Kelly Clauss'     )      GROUP BY state      HAVING COUNT(DISTINCT contestant_number) = 2 )

index is 701
select contestant_name from contestants where contestant_name like "%al%"
Return the names of the contestants whose names contain the substring 'Al' .
schema_links:
Return the names of the contestants whose names contain the substring 'Al' . | contestants : contestants.contestant_name , contestants.contestant_number , contestants.* | area_code_state : area_code_state.state ( AL ) , area_code_state.area_code , area_code_state.* | votes : votes.state , votes.created , votes.vote_id , votes.phone_number , votes.contestant_number , votes.*
natsql:
select _ from _ where _ like _
natsql and SQL generation:
SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%'
natsql:
SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%'
SQL:
SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%'
self correction:
SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%'

index is 702
SELECT Name FROM country WHERE IndepYear  >  1950
What are the names of all the countries that became independent after 1950?
schema_links:
What are the names of all the countries that became independent after 1950? | country : country.indepyear , country.name , country.localname , country.code , country.continent , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT name FROM country WHERE IndepYear > 1950
natsql:
SELECT name FROM country WHERE IndepYear > 1950
SQL:
SELECT name FROM country WHERE IndepYear > 1950
self correction:
SELECT name  FROM country  WHERE IndepYear > 1950

index is 703
SELECT Name FROM country WHERE IndepYear  >  1950
Give the names of the nations that were founded after 1950.
schema_links:
Give the names of the nations that were founded after 1950. | country : country.indepyear , country.name , country.localname , country.continent , country.region , country.* | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT name FROM country WHERE indepyear > 1950
natsql:
SELECT name FROM country WHERE indepyear > 1950
SQL:
SELECT name FROM country WHERE indepyear > 1950
self correction:
SELECT name FROM country WHERE IndepYear > 1950

index is 704
SELECT count(*) FROM country WHERE GovernmentForm  =  "Republic"
How many countries have a republic as their form of government?
schema_links:
How many countries have a republic as their form of government? | country : country.governmentform ( Republic ) , country.name , country.code , country.continent , country.region , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM country WHERE governmentform = 'Republic'
natsql:
SELECT count(*) FROM country WHERE governmentform = 'Republic'
SQL:
SELECT count(*) FROM country WHERE governmentform = 'Republic'
self correction:
SELECT COUNT(*) FROM country WHERE governmentform = 'Republic'

index is 705
SELECT count(*) FROM country WHERE GovernmentForm  =  "Republic"
How many countries have governments that are republics?
schema_links:
How many countries have governments that are republics? | country : country.governmentform ( Republic ) , country.name , country.code , country.continent , country.region , country.* | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM country WHERE governmentform = 'Republic'
natsql:
SELECT count(*) FROM country WHERE governmentform = 'Republic'
SQL:
SELECT count(*) FROM country WHERE governmentform = 'Republic'
self correction:
SELECT count(DISTINCT Code) FROM country WHERE governmentform = 'Republic'

index is 706
SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"
What is the total surface area of the countries in the Caribbean region?
schema_links:
What is the total surface area of the countries in the Caribbean region? | country : country.surfacearea , country.region ( Caribbean ) , country.name , country.code , country.continent , country.* | countrylanguage : countrylanguage.language ( Caribbean ) , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql:
select sum ( _ ) from _ where _
natsql and SQL generation:
SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean'
natsql:
SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean'
SQL:
SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean'
self correction:
SELECT 

index is 707
SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"
How much surface area do the countires in the Carribean cover together?
schema_links:
How much surface area do the countires in the Carribean cover together? | country : country.surfacearea , country.continent , country.region , country.name , country.code , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql:
select sum ( _ ) from _ where _
natsql and SQL generation:
SELECT sum(surfacearea) FROM country WHERE continent = 'Carribean'
natsql:
SELECT sum(surfacearea) FROM country WHERE continent = 'Carribean'
SQL:
SELECT sum(surfacearea) FROM country WHERE continent = 'Carribean'
self correction:
SELECT SUM(SurfaceArea) FROM country WHERE continent = 'Caribbean'

index is 708
SELECT Continent FROM country WHERE Name  =  "Anguilla"
Which continent is Anguilla in?
schema_links:
Which continent is Anguilla in? | country : country.continent , country.name ( Anguilla ) , country.localname ( Anguilla ) , country.region , country.surfacearea , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT continent FROM country WHERE name = 'Anguilla'
natsql:
SELECT continent FROM country WHERE name = 'Anguilla'
SQL:
SELECT continent FROM country WHERE name = 'Anguilla'
self correction:
SELECT Continent FROM country WHERE name = 'Anguilla'

index is 709
SELECT Continent FROM country WHERE Name  =  "Anguilla"
What is the continent name which Anguilla belongs to?
schema_links:
What is the continent name which Anguilla belongs to? | country : country.name ( Anguilla ) , country.continent , country.localname ( Anguilla ) , country.region , country.population , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT continent FROM country WHERE name = 'Anguilla'
natsql:
SELECT continent FROM country WHERE name = 'Anguilla'
SQL:
SELECT continent FROM country WHERE name = 'Anguilla'
self correction:
SELECT Continent FROM country WHERE Name = 'Anguilla'

index is 710
SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"
Which region is the city Kabul located in?
schema_links:
Which region is the city Kabul located in? | city : city.name ( Kabul ) , city.district , city.countrycode , city.population , city.id , city.* | country : country.region , country.continent , country.population , country.code , country.name , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT region FROM country WHERE name = 'Kabul'
natsql:
SELECT region FROM country WHERE name = 'Kabul'
SQL:
SELECT region FROM country WHERE name = 'Kabul'
self correction:
SELECT Region FROM country WHERE capital = (SELECT ID FROM city WHERE name = 'Kabul')

index is 711
SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"
What region is Kabul in?
schema_links:
What region is Kabul in? | country : country.region , country.name , country.population , country.capital , country.code , country.* | city : city.name ( Kabul ) , city.district , city.population , city.id , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT region FROM country WHERE name = 'Kabul'
natsql:
SELECT region FROM country WHERE name = 'Kabul'
SQL:
SELECT region FROM country WHERE name = 'Kabul'
self correction:
SELECT Region FROM country WHERE name = 'Kabul'

index is 712
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1
Which language is the most popular in Aruba?
schema_links:
Which language is the most popular in Aruba? | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.* | country : country.name ( Aruba ) , country.localname ( Aruba ) , country.population , country.continent , country.region , country.* | city : city.name , city.population , city.id , city.countrycode , city.district , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ where _ order by _ desc limit _
natsql and SQL generation:
SELECT language FROM countrylanguage WHERE CountryCode = 'ABW' ORDER BY percentage DESC LIMIT 1
natsql:
SELECT language FROM countrylanguage WHERE CountryCode = 'ABW' ORDER BY percentage DESC LIMIT 1
SQL:
SELECT language FROM countrylanguage WHERE CountryCode = 'ABW' ORDER BY percentage DESC LIMIT 1
self correction:
SELECT countrylanguage.Language FROM countrylanguage WHERE countrylanguage.CountryCode = 'ABW' ORDER BY countrylanguage.Percentage DESC LIMIT 1

index is 713
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1
What language is predominantly spoken in Aruba?
schema_links:
What language is predominantly spoken in Aruba? | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | country : country.name ( Aruba ) , country.localname ( Aruba ) , country.continent , country.region , country.population , country.* | city : city.name , city.id , city.countrycode , city.district , city.population , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ where _ order by _ desc limit _
natsql and SQL generation:
SELECT language
FROM countrylanguage
WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba')
ORDER BY percentage DESC
LIMIT 1
natsql:
SELECT language
FROM countrylanguage
WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba')
ORDER BY percentage DESC
LIMIT 1
SQL:
SELECT language
FROM countrylanguage
WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba')
ORDER BY percentage DESC
LIMIT 1
self correction:
SELECT language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba') ORDER BY Percentage DESC LIMIT 1

index is 714
SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"
What are the population and life expectancies in Brazil?
schema_links:
What are the population and life expectancies in Brazil? | country : country.name ( Brazil ) , country.lifeexpectancy , country.population , country.continent , country.region , country.* | city : city.population , city.id , city.name , city.district , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil'
natsql:
SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil'
SQL:
SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil'
self correction:
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'

index is 715
SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"
Give me Brazil’s population and life expectancies.
schema_links:
Give me Brazil's population and life expectancies. | country : country.name ( Brazil ) , country.lifeexpectancy , country.population , country.code , country.continent , country.* | city : city.population , city.id , city.name , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil'
natsql:
SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil'
SQL:
SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil'
self correction:
SELECT Population, LifeExpectancy FROM country WHERE name = 'Brazil'

index is 716
SELECT Population ,  Region FROM country WHERE Name  =  "Angola"
What are the region and population of Angola?
schema_links:
What are the region and population of Angola? | country : country.name ( Angola ) , country.region , country.population , country.localname ( Angola ) , country.code , country.* | city : city.population , city.name , city.id , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT region, population FROM country WHERE name = 'Angola'
natsql:
SELECT region, population FROM country WHERE name = 'Angola'
SQL:
SELECT region, population FROM country WHERE name = 'Angola'
self correction:
SELECT Region, Population FROM country WHERE name = 'Angola'

index is 717
SELECT Population ,  Region FROM country WHERE Name  =  "Angola"
What region does Angola belong to and what is its population?
schema_links:
What region does Angola belong to and what is its population? | country : country.region , country.population , country.name ( Angola ) , country.localname ( Angola ) , country.continent , country.* | city : city.population , city.name , city.district , city.id , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT region, population FROM country WHERE name = 'Angola'
natsql:
SELECT region, population FROM country WHERE name = 'Angola'
SQL:
SELECT region, population FROM country WHERE name = 'Angola'
self correction:
SELECT region, population  FROM country  WHERE name = 'Angola'

index is 718
SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"
What is the average expected life expectancy for countries in the region of Central Africa?
schema_links:
What is the average expected life expectancy for countries in the region of Central Africa? | country : country.region ( Central Africa ) , country.lifeexpectancy , country.continent ( Africa ) , country.name , country.surfacearea , country.* | city : city.district ( Central ) , city.id , city.name , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql:
select avg ( _ ) from _ where _
natsql and SQL generation:
SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa'
natsql:
SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa'
SQL:
SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa'
self correction:
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'

index is 719
SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"
How long is the people’s average life expectancy in Central Africa?
schema_links:
How long is the people's average life expectancy in Central Africa? | country : country.region ( Central Africa ) , country.lifeexpectancy , country.continent ( Africa ) , country.name , country.population , country.* | city : city.district ( Central ) , city.id , city.name , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql:
select avg ( _ ) from _ where _
natsql and SQL generation:
SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa' AND continent = 'Africa'
natsql:
SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa' AND continent = 'Africa'
SQL:
SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa' AND continent = 'Africa'
self correction:
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Region = 'Central Africa'

index is 720
SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1
What is the name of country that has the shortest life expectancy in Asia?
schema_links:
What is the name of country that has the shortest life expectancy in Asia? | country : country.continent ( Asia ) , country.lifeexpectancy , country.name , country.region , country.code , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql:
select _ from _ where _ order by _ asc limit _
natsql and SQL generation:
SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeExpectancy ASC LIMIT 1
natsql:
SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeExpectancy ASC LIMIT 1
SQL:
SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeExpectancy ASC LIMIT 1
self correction:
SELECT name FROM country WHERE continent = 'Asia' AND lifeExpectancy IS NOT NULL ORDER BY lifeExpectancy ASC LIMIT 1

index is 721
SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1
Give the name of the country in Asia with the lowest life expectancy.
schema_links:
Give the name of the country in Asia with the lowest life expectancy. | country : country.continent ( Asia ) , country.lifeexpectancy , country.name , country.region , country.code , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql:
select _ from _ where _ order by _ asc limit _
natsql and SQL generation:
SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeExpectancy ASC LIMIT 1
natsql:
SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeExpectancy ASC LIMIT 1
SQL:
SELECT name FROM country WHERE continent = 'Asia' ORDER BY lifeExpectancy ASC LIMIT 1
self correction:
SELECT country.Name  FROM country  WHERE continent = 'Asia'  ORDER BY lifeExpectancy ASC  LIMIT 1

index is 722
SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"
What is the total population and maximum GNP in Asia?
schema_links:
What is the total population and maximum GNP in Asia? | country : country.continent ( Asia ) , country.gnp , country.population , country.region , country.name , country.* | city : city.population , city.id , city.name , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql:
select sum ( _ ) , max ( _ ) from _ where _
natsql and SQL generation:
SELECT sum(population), max(GNP) FROM country WHERE continent = 'Asia'
natsql:
SELECT sum(population), max(GNP) FROM country WHERE continent = 'Asia'
SQL:
SELECT sum(population), max(GNP) FROM country WHERE continent = 'Asia'
self correction:
SELECT sum(Population), max(GNP)  FROM country  WHERE Continent = 'Asia'

index is 723
SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"
How many people live in Asia, and what is the largest GNP among them?
schema_links:
How many people live in Asia, and what is the largest GNP among them? | country : country.continent ( Asia ) , country.gnp , country.population , country.name , country.region , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select sum ( _ ) , max ( _ ) from _ where _
natsql and SQL generation:
SELECT sum(population), max(GNP) FROM country WHERE continent = 'Asia'
natsql:
SELECT sum(population), max(GNP) FROM country WHERE continent = 'Asia'
SQL:
SELECT sum(population), max(GNP) FROM country WHERE continent = 'Asia'
self correction:
SELECT sum(country.Population), max(country.GNP)  FROM country  WHERE country.Continent = 'Asia'

index is 724
SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"
What is the average life expectancy in African countries that are republics?
schema_links:
What is the average life expectancy in African countries that are republics? | country : country.lifeexpectancy , country.governmentform ( Republic ) , country.continent ( Africa ) , country.name , country.region , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql:
select avg ( _ ) from _ where _
natsql and SQL generation:
SELECT AVG(lifeexpectancy) FROM country WHERE governmentform = 'Republic' AND continent = 'Africa'
natsql:
SELECT AVG(lifeexpectancy) FROM country WHERE governmentform = 'Republic' AND continent = 'Africa'
SQL:
SELECT AVG(lifeexpectancy) FROM country WHERE governmentform = 'Republic' AND continent = 'Africa'
self correction:
SELECT AVG(LifeExpectancy) FROM country WHERE GovernmentForm = 'Republic' AND Continent = 'Africa'

index is 725
SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"
Give the average life expectancy for countries in Africa which are republics?
schema_links:
Give the average life expectancy for countries in Africa which are republics? | country : country.lifeexpectancy , country.governmentform ( Republic ) , country.continent ( Africa ) , country.name , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql:
select avg ( _ ) from _ where _
natsql and SQL generation:
SELECT AVG(lifeexpectancy) FROM country WHERE governmentform = 'Republic' AND continent = 'Africa'
natsql:
SELECT AVG(lifeexpectancy) FROM country WHERE governmentform = 'Republic' AND continent = 'Africa'
SQL:
SELECT AVG(lifeexpectancy) FROM country WHERE governmentform = 'Republic' AND continent = 'Africa'
self correction:
SELECT AVG(LifeExpectancy)  FROM country  WHERE Continent = 'Africa'  AND GovernmentForm = 'Republic'

index is 726
SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"
What is the total surface area of the continents Asia and Europe?
schema_links:
What is the total surface area of the continents Asia and Europe? | country : country.continent ( Asia , Europe ) , country.surfacearea , country.name , country.code , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql:
select sum ( _ ) from _ where _
natsql and SQL generation:
SELECT sum(surfacearea) FROM country WHERE continent = 'Asia' OR continent = 'Europe'
natsql:
SELECT sum(surfacearea) FROM country WHERE continent = 'Asia' OR continent = 'Europe'
SQL:
SELECT sum(surfacearea) FROM country WHERE continent = 'Asia' OR continent = 'Europe'
self correction:
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')

index is 727
SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"
Give the total surface area covered by countries in Asia or Europe.
schema_links:
Give the total surface area covered by countries in Asia or Europe. | country : country.continent ( Asia , Europe ) , country.surfacearea , country.name , country.code , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql:
select sum ( _ ) from _ where _
natsql and SQL generation:
SELECT SUM(surfacearea) FROM country WHERE continent = 'Asia' OR continent = 'Europe'
natsql:
SELECT SUM(surfacearea) FROM country WHERE continent = 'Asia' OR continent = 'Europe'
SQL:
SELECT SUM(surfacearea) FROM country WHERE continent = 'Asia' OR continent = 'Europe'
self correction:
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'

index is 728
SELECT sum(Population) FROM city WHERE District  =  "Gelderland"
How many people live in Gelderland district?
schema_links:
How many people live in Gelderland district? | city : city.district ( Gelderland ) , city.population , city.name , city.id , city.countrycode , city.* | country : country.population , country.name , country.region , country.code , country.continent , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql:
select sum ( _ ) from _ where _
natsql and SQL generation:
SELECT sum(population) FROM city WHERE district = 'Gelderland'
natsql:
SELECT sum(population) FROM city WHERE district = 'Gelderland'
SQL:
SELECT sum(population) FROM city WHERE district = 'Gelderland'
self correction:
SELECT sum(population)  FROM city  WHERE district = 'Gelderland'

index is 729
SELECT sum(Population) FROM city WHERE District  =  "Gelderland"
What is the total population of Gelderland district?
schema_links:
What is the total population of Gelderland district? | city : city.district ( Gelderland ) , city.population , city.name , city.id , city.countrycode , city.* | country : country.name , country.population , country.continent , country.region , country.code , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql:
select sum ( _ ) from _ where _
natsql and SQL generation:
SELECT sum(population) FROM city WHERE district = 'Gelderland'
natsql:
SELECT sum(population) FROM city WHERE district = 'Gelderland'
SQL:
SELECT sum(population) FROM city WHERE district = 'Gelderland'
self correction:
SELECT SUM(population) AS total_population FROM city WHERE district = 'Gelderland'

index is 730
SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"
What is the average GNP and total population in all nations whose government is US territory?
schema_links:
What is the average GNP and total population in all nations whose government is US territory? | country : country.gnp , country.governmentform ( US Territory ) , country.population , country.name , country.code2 ( US ) , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.population , city.id , city.name , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select avg ( _ ) , sum ( _ ) from _ where _
natsql and SQL generation:
SELECT AVG(GNP), SUM(population) FROM country WHERE governmentform = 'US Territory'
natsql:
SELECT AVG(GNP), SUM(population) FROM country WHERE governmentform = 'US Territory'
SQL:
SELECT AVG(GNP), SUM(population) FROM country WHERE governmentform = 'US Territory'
self correction:
SELECT AVG(GNP), SUM(Population)  FROM country  WHERE GovernmentForm = 'US Territory'

index is 731
SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"
Give the mean GNP and total population of nations which are considered US territory.
schema_links:
Give the mean GNP and total population of nations which are considered US territory. | country : country.gnp , country.governmentform ( US Territory ) , country.population , country.code2 ( US ) , country.name , country.* | city : city.population , city.id , city.name , city.district , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select avg ( _ ) , sum ( _ ) from _ where _
natsql and SQL generation:
SELECT AVG(GNP), SUM(population) FROM country WHERE governmentform = 'US Territory' AND code2 = 'US'
natsql:
SELECT AVG(GNP), SUM(population) FROM country WHERE governmentform = 'US Territory' AND code2 = 'US'
SQL:
SELECT AVG(GNP), SUM(population) FROM country WHERE governmentform = 'US Territory' AND code2 = 'US'
self correction:
SELECT AVG(GNP), SUM(population)  FROM country  WHERE GovernmentForm = 'US Territory'  AND Continent = 'North America'

index is 732
SELECT count(DISTINCT LANGUAGE) FROM countrylanguage
How many unique languages are spoken in the world?
schema_links:
How many unique languages are spoken in the world? | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.name , country.code , country.continent , country.region , country.population , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select count ( distinct _ ) from _
natsql and SQL generation:
SELECT COUNT(DISTINCT language) FROM countrylanguage
natsql:
SELECT COUNT(DISTINCT language) FROM countrylanguage
SQL:
SELECT COUNT(DISTINCT language) FROM countrylanguage
self correction:
SELECT COUNT(DISTINCT Language) FROM countrylanguage

index is 733
SELECT count(DISTINCT LANGUAGE) FROM countrylanguage
What is the number of distinct languages used around the world?
schema_links:
What is the number of distinct languages used around the world? | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | country : country.name , country.region , country.code , country.continent , country.population , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select count ( distinct _ ) from _
natsql and SQL generation:
SELECT count(DISTINCT language) FROM countrylanguage
natsql:
SELECT count(DISTINCT language) FROM countrylanguage
SQL:
SELECT count(DISTINCT language) FROM countrylanguage
self correction:
SELECT COUNT(DISTINCT Language) AS NumberOfLanguages FROM countrylanguage

index is 734
SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa"
How many type of governments are in Africa?
schema_links:
How many type of governments are in Africa? | country : country.continent ( Africa ) , country.governmentform , country.name , country.region , country.headofstate , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select count ( distinct _ ) from _ where _
natsql and SQL generation:
SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa'
natsql:
SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa'
SQL:
SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa'
self correction:
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'

index is 735
SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa"
How many different forms of governments are there in Africa?
schema_links:
How many different forms of governments are there in Africa? | country : country.continent ( Africa ) , country.governmentform , country.name , country.code , country.region , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select count ( distinct _ ) from _ where _
natsql and SQL generation:
SELECT count(DISTINCT governmentform) FROM country WHERE continent = 'Africa'
natsql:
SELECT count(DISTINCT governmentform) FROM country WHERE continent = 'Africa'
SQL:
SELECT count(DISTINCT governmentform) FROM country WHERE continent = 'Africa'
self correction:
SELECT count(DISTINCT GovernmentForm) FROM country WHERE continent = 'Africa'

index is 736
SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"
What is the total number of languages used in Aruba?
schema_links:
What is the total number of languages used in Aruba? | country : country.name ( Aruba ) , country.localname ( Aruba ) , country.continent , country.region , country.population , country.* | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | city : city.id , city.name , city.countrycode , city.district , city.population , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(language) FROM countrylanguage WHERE CountryCode = 'ABW'
natsql:
SELECT count(language) FROM countrylanguage WHERE CountryCode = 'ABW'
SQL:
SELECT count(language) FROM countrylanguage WHERE CountryCode = 'ABW'
self correction:
SELECT count(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW'

index is 737
SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"
How many languages are spoken in Aruba?
schema_links:
How many languages are spoken in Aruba? | country : country.name ( Aruba ) , country.localname ( Aruba ) , country.continent , country.region , country.population , country.* | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | city : city.name , city.id , city.countrycode , city.district , city.population , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(language) FROM countrylanguage WHERE CountryCode = 'ABW'
natsql:
SELECT count(language) FROM countrylanguage WHERE CountryCode = 'ABW'
SQL:
SELECT count(language) FROM countrylanguage WHERE CountryCode = 'ABW'
self correction:
SELECT count(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW'

index is 738
SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"
How many official languages does Afghanistan have?
schema_links:
How many official languages does Afghanistan have? | country : country.name ( Afghanistan ) , country.continent , country.region , country.population , country.code , country.* | countrylanguage : countrylanguage.isofficial , countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = true
natsql:
SELECT count(*) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = true
SQL:
SELECT count(*) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = true
self correction:
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'

index is 739
SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"
How many official languages are spoken in Afghanistan?
schema_links:
How many official languages are spoken in Afghanistan? | country : country.name ( Afghanistan ) , country.continent , country.region , country.code , country.surfacearea , country.* | countrylanguage : countrylanguage.isofficial , countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'
natsql:
SELECT count(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'
SQL:
SELECT count(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'
self correction:
SELECT COUNT(*)  FROM countrylanguage  WHERE CountryCode = 'AFG'    AND IsOfficial = 'T'

index is 740
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
What is name of the country that speaks the largest number of languages?
schema_links:
What is name of the country that speaks the largest number of languages? | country : country.name , country.continent , country.population , country.localname , country.code , country.* | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT name FROM country GROUP BY name ORDER BY COUNT(*) DESC LIMIT 1
natsql:
SELECT name FROM country GROUP BY name ORDER BY COUNT(*) DESC LIMIT 1
SQL:
SELECT name FROM country GROUP BY name ORDER BY COUNT(*) DESC LIMIT 1
self correction:
SELECT country.Name FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY country.Name ORDER BY COUNT(countrylanguage.Language) DESC LIMIT 1

index is 741
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
Give the name of the nation that uses the greatest amount of languages.
schema_links:
Give the name of the nation that uses the greatest amount of languages. | country : country.name , country.localname , country.continent , country.headofstate , country.code , country.* | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT name FROM country GROUP BY name ORDER BY count(*) DESC LIMIT 1
natsql:
SELECT name FROM country GROUP BY name ORDER BY count(*) DESC LIMIT 1
SQL:
SELECT name FROM country GROUP BY name ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name ORDER BY COUNT(DISTINCT countrylanguage.Language) DESC LIMIT 1

index is 742
SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1
Which continent has the most diverse languages?
schema_links:
Which continent has the most diverse languages? | country : country.continent , country.name , country.code , country.region , country.surfacearea , country.* | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT continent FROM countrylanguage GROUP BY continent ORDER BY COUNT(DISTINCT language) DESC LIMIT 1
natsql:
SELECT continent FROM countrylanguage GROUP BY continent ORDER BY COUNT(DISTINCT language) DESC LIMIT 1
SQL:
SELECT continent FROM countrylanguage GROUP BY continent ORDER BY COUNT(DISTINCT language) DESC LIMIT 1
self correction:
SELECT continent FROM countrylanguage GROUP BY continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1

index is 743
SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1
Which continent speaks the most languages?
schema_links:
Which continent speaks the most languages? | country : country.continent , country.name , country.code , country.region , country.surfacearea , country.* | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT continent FROM country GROUP BY continent ORDER BY count(*) DESC LIMIT 1
natsql:
SELECT continent FROM country GROUP BY continent ORDER BY count(*) DESC LIMIT 1
SQL:
SELECT continent FROM country GROUP BY continent ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT continent, COUNT(DISTINCT countrylanguage.Language) AS language_count FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY continent ORDER BY language_count DESC LIMIT 1

index is 744
SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
How many countries speak both English and Dutch?
schema_links:
How many countries speak both English and Dutch? | countrylanguage : countrylanguage.language ( Dutch , English ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.name , country.code , country.continent , country.region , country.population , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM countrylanguage WHERE language IN ('Dutch', 'English') GROUP BY countrycode HAVING count(*) = 2
natsql:
SELECT count(*) FROM countrylanguage WHERE language IN ('Dutch', 'English') GROUP BY countrycode HAVING count(*) = 2
SQL:
SELECT count(*) FROM countrylanguage WHERE language IN ('Dutch', 'English') GROUP BY countrycode HAVING count(*) = 2
self correction:
SELECT count(*) FROM countrylanguage WHERE language IN ('Dutch', 'English') AND IsOfficial = 1 GROUP BY countrycode HAVING count(*) = 2

index is 745
SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
What is the number of nations that use English and Dutch?
schema_links:
What is the number of nations that use English and Dutch? | countrylanguage : countrylanguage.language ( Dutch , English ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.name , country.code , country.continent , country.region , country.population , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM countrylanguage WHERE language IN ('Dutch', 'English')
natsql:
SELECT count(*) FROM countrylanguage WHERE language IN ('Dutch', 'English')
SQL:
SELECT count(*) FROM countrylanguage WHERE language IN ('Dutch', 'English')
self correction:
SELECT count(DISTINCT countrylanguage.CountryCode) AS num_of_nations FROM countrylanguage WHERE language IN ('Dutch', 'English')

index is 746
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
What are the names of nations speak both English and French?
schema_links:
What are the names of nations speak both English and French? | countrylanguage : countrylanguage.language ( English , French ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.name , country.localname , country.continent , country.region , country.code , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT C1.name
FROM country AS C1
JOIN countrylanguage AS CL1 ON C1.code = CL1.countrycode
JOIN countrylanguage AS CL2 ON C1.code = CL2.countrycode
WHERE CL1.language = 'English' AND CL2.language = 'French'
natsql:
SELECT C1.name
FROM country AS C1
JOIN countrylanguage AS CL1 ON C1.code = CL1.countrycode
JOIN countrylanguage AS CL2 ON C1.code = CL2.countrycode
WHERE CL1.language = 'English' AND CL2.language = 'French'
SQL:
SELECT C1.name
FROM country AS C1
JOIN countrylanguage AS CL1 ON C1.code = CL1.countrycode
JOIN countrylanguage AS CL2 ON C1.code = CL2.countrycode
WHERE CL1.language = 'English' AND CL2.language = 'French'
self correction:
SELECT C1.Name FROM country AS C1 JOIN countrylanguage AS CL1 ON C1.Code = CL1.CountryCode JOIN countrylanguage AS CL2 ON C1.Code = CL2.CountryCode WHERE CL1.Language = 'English' AND CL2.Language = 'French' GROUP BY C1.Name

index is 747
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
Give the names of nations that speak both English and French.
schema_links:
Give the names of nations that speak both English and French. | countrylanguage : countrylanguage.language ( English , French ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.name , country.localname , country.code , country.continent , country.region , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT DISTINCT T1.name
FROM country AS T1
JOIN countrylanguage AS T2 ON T1.code = T2.countrycode
WHERE T2.language IN ('English', 'French')
GROUP BY T1.name
HAVING COUNT(DISTINCT T2.language) = 2
natsql:
SELECT DISTINCT T1.name
FROM country AS T1
JOIN countrylanguage AS T2 ON T1.code = T2.countrycode
WHERE T2.language IN ('English', 'French')
GROUP BY T1.name
HAVING COUNT(DISTINCT T2.language) = 2
SQL:
SELECT DISTINCT T1.name
FROM country AS T1
JOIN countrylanguage AS T2 ON T1.code = T2.countrycode
WHERE T2.language IN ('English', 'French')
GROUP BY T1.name
HAVING COUNT(DISTINCT T2.language) = 2
self correction:
SELECT DISTINCT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language IN ('English', 'French') GROUP BY T1.Name HAVING COUNT(DISTINCT T2.Language) = 2

index is 748
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
What are the names of nations where both English and French are official languages?
schema_links:
What are the names of nations where both English and French are official languages? | countrylanguage : countrylanguage.language ( English , French ) , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | country : country.name , country.localname , country.continent , country.region , country.code , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT T1.name 
FROM country AS T1 
JOIN countrylanguage AS T2 ON T1.code = T2.countrycode 
WHERE T2.language IN ('English', 'French') 
  AND T2.isofficial = 'T' 
GROUP BY T1.name 
HAVING COUNT(DISTINCT T2.language) = 2
natsql:
SELECT T1.name 
FROM country AS T1 
JOIN countrylanguage AS T2 ON T1.code = T2.countrycode 
WHERE T2.language IN ('English', 'French') 
  AND T2.isofficial = 'T' 
GROUP BY T1.name 
HAVING COUNT(DISTINCT T2.language) = 2
SQL:
SELECT T1.name 
FROM country AS T1 
JOIN countrylanguage AS T2 ON T1.code = T2.countrycode 
WHERE T2.language IN ('English', 'French') 
  AND T2.isofficial = 'T' 
GROUP BY T1.name 
HAVING COUNT(DISTINCT T2.language) = 2
self correction:
SELECT T1.Name  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  WHERE T2.Language IN ('English', 'French')    AND T2.IsOfficial = 'T'  GROUP BY T1.Name  HAVING COUNT(DISTINCT T2.Language) = 2

index is 749
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
Give the names of countries with English and French as official languages.
schema_links:
Give the names of countries with English and French as official languages. | countrylanguage : countrylanguage.language ( English , French ) , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | country : country.name , country.continent , country.region , country.localname , country.code , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT C.name
FROM country C
WHERE EXISTS (
    SELECT 1
    FROM countrylanguage CL1
    WHERE CL1.CountryCode = C.Code AND CL1.Language = 'English' AND CL1.IsOfficial = 'T'
)
AND EXISTS (
    SELECT 1
    FROM countrylanguage CL2
    WHERE CL2.CountryCode = C.Code AND CL2.Language = 'French' AND CL2.IsOfficial = 'T'
)
natsql:
SELECT C.name
FROM country C
WHERE EXISTS (
    SELECT 1
    FROM countrylanguage CL1
    WHERE CL1.CountryCode = C.Code AND CL1.Language = 'English' AND CL1.IsOfficial = 'T'
)
AND EXISTS (
    SELECT 1
    FROM countrylanguage CL2
    WHERE CL2.CountryCode = C.Code AND CL2.Language = 'French' AND CL2.IsOfficial = 'T'
)
SQL:
SELECT C.name
FROM country C
WHERE EXISTS (
    SELECT 1
    FROM countrylanguage CL1
    WHERE CL1.CountryCode = C.Code AND CL1.Language = 'English' AND CL1.IsOfficial = 'T'
)
AND EXISTS (
    SELECT 1
    FROM countrylanguage CL2
    WHERE CL2.CountryCode = C.Code AND CL2.Language = 'French' AND CL2.IsOfficial = 'T'
)
self correction:
SELECT C.Name FROM Country C JOIN CountryLanguage CL1 ON CL1.CountryCode = C.Code JOIN CountryLanguage CL2 ON CL2.CountryCode = C.Code WHERE CL1.Language = 'English' AND CL1.IsOfficial = 'T' AND CL2.Language = 'French' AND CL2.IsOfficial = 'T'

index is 750
SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"
What is the number of distinct continents where Chinese is spoken?
schema_links:
What is the number of distinct continents where Chinese is spoken? | countrylanguage : countrylanguage.language ( Chinese ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.continent , country.name , country.region , country.code , country.surfacearea , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select count ( distinct _ ) from _ where _
natsql and SQL generation:
SELECT count(DISTINCT continent) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Chinese')
natsql:
SELECT count(DISTINCT continent) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Chinese')
SQL:
SELECT count(DISTINCT continent) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Chinese')
self correction:
SELECT COUNT(DISTINCT continent) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Chinese');

index is 751
SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"
How many continents speak Chinese?
schema_links:
How many continents speak Chinese? | countrylanguage : countrylanguage.language ( Chinese ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.continent , country.code , country.name , country.region , country.surfacearea , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select count ( distinct _ ) from _ where _
natsql and SQL generation:
SELECT count(DISTINCT continent) FROM country WHERE Language = 'Chinese'
natsql:
SELECT count(DISTINCT continent) FROM country WHERE Language = 'Chinese'
SQL:
SELECT count(DISTINCT continent) FROM country WHERE Language = 'Chinese'
self correction:
SELECT count(DISTINCT continent) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Chinese'

index is 752
SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
What are the regions that use English or Dutch?
schema_links:
What are the regions that use English or Dutch? | countrylanguage : countrylanguage.language ( Dutch , English ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.region , country.continent , country.name , country.population , country.code , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select distinct _ from _ where _
natsql and SQL generation:
SELECT DISTINCT region FROM country WHERE region = 'English' OR region = 'Dutch'
natsql:
SELECT DISTINCT region FROM country WHERE region = 'English' OR region = 'Dutch'
SQL:
SELECT DISTINCT region FROM country WHERE region = 'English' OR region = 'Dutch'
self correction:
SELECT DISTINCT Region FROM country WHERE CountryCode IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language IN ('English', 'Dutch')     AND IsOfficial = 'T' )

index is 753
SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
Which regions speak Dutch or English?
schema_links:
Which regions speak Dutch or English? | country : country.region , country.continent , country.name , country.localname , country.population , country.* | countrylanguage : countrylanguage.language ( Dutch , English ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select distinct _ from _ where _
natsql and SQL generation:
SELECT DISTINCT region FROM country WHERE countrylanguage.language IN ('Dutch', 'English')
natsql:
SELECT DISTINCT region FROM country WHERE countrylanguage.language IN ('Dutch', 'English')
SQL:
SELECT DISTINCT region FROM country WHERE countrylanguage.language IN ('Dutch', 'English')
self correction:
SELECT region FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language IN ('Dutch', 'English')

index is 754
select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "english" and isofficial  =  "t" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "dutch" and isofficial  =  "t"
What are the countries where either English or Dutch is the official language ?
schema_links:
What are the countries where either English or Dutch is the official language ? | countrylanguage : countrylanguage.language ( Dutch , English ) , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | country : country.name , country.localname , country.continent , country.code , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.name , city.id , city.district , city.population , city.countrycode , city.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT country.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.language IN ('English', 'Dutch') AND countrylanguage.isofficial = 'T'
natsql:
SELECT country.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.language IN ('English', 'Dutch') AND countrylanguage.isofficial = 'T'
SQL:
SELECT country.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.language IN ('English', 'Dutch') AND countrylanguage.isofficial = 'T'
self correction:
SELECT country.Name  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  WHERE countrylanguage.Language IN ('English', 'Dutch')  AND countrylanguage.IsOfficial = 'T'

index is 755
SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND IsOfficial  =  "T" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch" AND IsOfficial  =  "T"
Which countries have either English or Dutch as an official language?
schema_links:
Which countries have either English or Dutch as an official language? | countrylanguage : countrylanguage.language ( Dutch , English ) , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | country : country.name , country.localname , country.continent , country.code , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language IN ('English', 'Dutch') AND countrylanguage.isofficial = 'T'
natsql:
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language IN ('English', 'Dutch') AND countrylanguage.isofficial = 'T'
SQL:
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language IN ('English', 'Dutch') AND countrylanguage.isofficial = 'T'
self correction:
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch') AND countrylanguage.IsOfficial = 'T'

index is 756
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1
Which language is the most popular on the Asian continent?
schema_links:
Which language is the most popular on the Asian continent? | country : country.continent ( Asia ) , country.region , country.name , country.population , country.code , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ where _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT language
FROM countrylanguage
WHERE countrycode IN (
    SELECT code
    FROM country
    WHERE continent = 'Asia'
)
GROUP BY language
ORDER BY COUNT(*) DESC
LIMIT 1
natsql:
SELECT language
FROM countrylanguage
WHERE countrycode IN (
    SELECT code
    FROM country
    WHERE continent = 'Asia'
)
GROUP BY language
ORDER BY COUNT(*) DESC
LIMIT 1
SQL:
SELECT language
FROM countrylanguage
WHERE countrycode IN (
    SELECT code
    FROM country
    WHERE continent = 'Asia'
)
GROUP BY language
ORDER BY COUNT(*) DESC
LIMIT 1
self correction:
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY countrylanguage.Language ORDER BY COUNT(*) DESC LIMIT 1

index is 757
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1
What is the language that is used by the largest number of Asian nations?
schema_links:
What is the language that is used by the largest number of Asian nations? | country : country.continent ( Asia ) , country.name , country.region , country.code , country.population , country.* | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql:
select _ from _ where _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT language
FROM countrylanguage
WHERE countrycode IN (
    SELECT code
    FROM country
    WHERE continent = 'Asia'
)
GROUP BY language
ORDER BY COUNT(*) DESC
LIMIT 1
natsql:
SELECT language
FROM countrylanguage
WHERE countrycode IN (
    SELECT code
    FROM country
    WHERE continent = 'Asia'
)
GROUP BY language
ORDER BY COUNT(*) DESC
LIMIT 1
SQL:
SELECT language
FROM countrylanguage
WHERE countrycode IN (
    SELECT code
    FROM country
    WHERE continent = 'Asia'
)
GROUP BY language
ORDER BY COUNT(*) DESC
LIMIT 1
self correction:
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY countrylanguage.Language ORDER BY COUNT(*) DESC LIMIT 1

index is 758
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1
Which languages are spoken by only one country in republic governments?
schema_links:
Which languages are spoken by only one country in republic governments? | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.governmentform ( Republic ) , country.name , country.code , country.continent , country.region , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ where _ and count ( _ ) = _ group by _
natsql and SQL generation:
SELECT language
FROM countrylanguage
WHERE isofficial = 'T' AND language NOT IN (
    SELECT language
    FROM countrylanguage
    WHERE isofficial = 'F'
)
GROUP BY language
HAVING count(*) = 1
natsql:
SELECT language
FROM countrylanguage
WHERE isofficial = 'T' AND language NOT IN (
    SELECT language
    FROM countrylanguage
    WHERE isofficial = 'F'
)
GROUP BY language
HAVING count(*) = 1
SQL:
SELECT language
FROM countrylanguage
WHERE isofficial = 'T' AND language NOT IN (
    SELECT language
    FROM countrylanguage
    WHERE isofficial = 'F'
)
GROUP BY language
HAVING count(*) = 1
self correction:
SELECT language FROM countrylanguage WHERE isofficial = 'T' AND language NOT IN (     SELECT language     FROM countrylanguage     WHERE isofficial = 'F' ) GROUP BY language HAVING COUNT(DISTINCT CountryCode) = 1

index is 759
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1
What languages are only used by a single country with a republic government?
schema_links:
What languages are only used by a single country with a republic government? | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | country : country.governmentform ( Republic ) , country.name , country.region , country.code , country.continent , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ where _ and count ( _ ) = _ group by _
natsql and SQL generation:
SELECT language 
FROM countrylanguage 
WHERE isofficial = 'T' 
GROUP BY language 
HAVING COUNT(countrycode) = 1 
AND MAX(isofficial) = 'T' 
AND MAX(governmentform) = 'Republic'
natsql:
SELECT language 
FROM countrylanguage 
WHERE isofficial = 'T' 
GROUP BY language 
HAVING COUNT(countrycode) = 1 
AND MAX(isofficial) = 'T' 
AND MAX(governmentform) = 'Republic'
SQL:
SELECT language 
FROM countrylanguage 
WHERE isofficial = 'T' 
GROUP BY language 
HAVING COUNT(countrycode) = 1 
AND MAX(isofficial) = 'T' 
AND MAX(governmentform) = 'Republic'
self correction:
SELECT language  FROM countrylanguage  WHERE isofficial = 'T'  GROUP BY language  HAVING COUNT(DISTINCT countrycode) = 1  AND MAX(isofficial) = 'T'  AND countrycode IN (     SELECT code      FROM country      WHERE governmentform = 'Republic' )

index is 760
SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1
Find the city with the largest population that uses English.
schema_links:
Find the city with the largest population that uses English. | city : city.name , city.population , city.id , city.district , city.countrycode , city.* | countrylanguage : countrylanguage.language ( English ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.name , country.population , country.code , country.continent , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ where _ order by _ desc limit _
natsql and SQL generation:
SELECT city.name FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode JOIN country ON city.countrycode = country.code WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1
natsql:
SELECT city.name FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode JOIN country ON city.countrycode = country.code WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1
SQL:
SELECT city.name FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode JOIN country ON city.countrycode = country.code WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1
self correction:
SELECT city.name  FROM city  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  JOIN country ON city.countrycode = country.code  WHERE countrylanguage.language = 'English'  GROUP BY city.name  ORDER BY city.population DESC  LIMIT 1

index is 761
SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1
What is the most populace city that speaks English?
schema_links:
What is the most populace city that speaks English? | countrylanguage : countrylanguage.language ( English ) , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | city : city.population , city.name , city.id , city.district , city.countrycode , city.* | country : country.name , country.region , country.population , country.code , country.continent , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ where _ order by _ desc limit _
natsql and SQL generation:
SELECT city.name
FROM city
JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode
WHERE countrylanguage.language = 'English'
ORDER BY city.population DESC
LIMIT 1
natsql:
SELECT city.name
FROM city
JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode
WHERE countrylanguage.language = 'English'
ORDER BY city.population DESC
LIMIT 1
SQL:
SELECT city.name
FROM city
JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode
WHERE countrylanguage.language = 'English'
ORDER BY city.population DESC
LIMIT 1
self correction:
SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' GROUP BY city.Name ORDER BY city.Population DESC LIMIT 1

index is 762
SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1
Find the name, population and expected life length of asian country with the largest area?
schema_links:
Find the name, population and expected life length of asian country with the largest area? | country : country.continent ( Asia ) , country.lifeexpectancy , country.name , country.surfacearea , country.population , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ where _ order by _ desc limit _
natsql and SQL generation:
SELECT name, population, lifeexpectancy
FROM country
WHERE continent = 'Asia'
ORDER BY surfacearea DESC
LIMIT 1
natsql:
SELECT name, population, lifeexpectancy
FROM country
WHERE continent = 'Asia'
ORDER BY surfacearea DESC
LIMIT 1
SQL:
SELECT name, population, lifeexpectancy
FROM country
WHERE continent = 'Asia'
ORDER BY surfacearea DESC
LIMIT 1
self correction:
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = 'Asia' ORDER BY country.SurfaceArea DESC LIMIT 1

index is 763
SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1
What are the name, population, and life expectancy of the largest Asian country by land?
schema_links:
What are the name, population, and life expectancy of the largest Asian country by land? | country : country.continent ( Asia ) , country.lifeexpectancy , country.name , country.population , country.surfacearea , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ where _ order by _ desc limit _
natsql and SQL generation:
SELECT name, population, lifeexpectancy
FROM country
WHERE continent = 'Asia'
ORDER BY surfacearea DESC
LIMIT 1
natsql:
SELECT name, population, lifeexpectancy
FROM country
WHERE continent = 'Asia'
ORDER BY surfacearea DESC
LIMIT 1
SQL:
SELECT name, population, lifeexpectancy
FROM country
WHERE continent = 'Asia'
ORDER BY surfacearea DESC
LIMIT 1
self correction:
SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1

index is 764
SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
What is average life expectancy in the countries where English is not the official language?
schema_links:
What is average life expectancy in the countries where English is not the official language? | countrylanguage : countrylanguage.language ( English ) , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | country : country.lifeexpectancy , country.name , country.code , country.continent , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql:
select avg ( _ ) from _ where @.@ not in _ and _ and _
natsql and SQL generation:
SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')
natsql:
SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')
SQL:
SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')
self correction:
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language <> 'English' AND IsOfficial = 'T')

index is 765
SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
Give the mean life expectancy of countries in which English is not the official language.
schema_links:
Give the mean life expectancy of countries in which English is not the official language. | countrylanguage : countrylanguage.language ( English ) , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | country : country.lifeexpectancy , country.name , country.code , country.continent , country.region , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select avg ( _ ) from _ where @.@ not in _ and _ and _
natsql and SQL generation:
SELECT avg(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')
natsql:
SELECT avg(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')
SQL:
SELECT avg(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')
self correction:
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language <> 'English' AND IsOfficial = 'T')

index is 766
SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")
What is the total number of people living in the nations that do not use English?
schema_links:
What is the total number of people living in the nations that do not use English? | countrylanguage : countrylanguage.language ( English ) , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | country : country.population , country.name , country.localname , country.code , country.continent , country.* | city : city.name , city.population , city.id , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select sum ( _ ) from _ where @.@ not in _ and _
natsql and SQL generation:
SELECT sum(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')
natsql:
SELECT sum(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')
SQL:
SELECT sum(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')
self correction:
SELECT SUM(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')

index is 767
SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")
How many people live in countries that do not speak English?
schema_links:
How many people live in countries that do not speak English? | countrylanguage : countrylanguage.language ( English ) , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | country : country.population , country.name , country.code , country.continent , country.region , country.* | city : city.population , city.id , city.name , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select sum ( _ ) from _ where @.@ not in _ and _
natsql and SQL generation:
SELECT sum(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')
natsql:
SELECT sum(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')
SQL:
SELECT sum(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')
self correction:
SELECT sum(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')

index is 768
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"
What is the official language spoken in the country whose head of state is Beatrix?
schema_links:
What is the official language spoken in the country whose head of state is Beatrix? | countrylanguage : countrylanguage.isofficial , countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.* | country : country.headofstate ( Beatrix ) , country.name , country.region , country.population , country.code , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT language FROM countrylanguage WHERE isofficial = 'T' AND countrycode = (SELECT code FROM country WHERE headofstate = 'Beatrix')
natsql:
SELECT language FROM countrylanguage WHERE isofficial = 'T' AND countrycode = (SELECT code FROM country WHERE headofstate = 'Beatrix')
SQL:
SELECT language FROM countrylanguage WHERE isofficial = 'T' AND countrycode = (SELECT code FROM country WHERE headofstate = 'Beatrix')
self correction:
SELECT language  FROM countrylanguage  WHERE IsOfficial = 'T'  AND CountryCode = (   SELECT Code    FROM country    WHERE HeadOfState = 'Beatrix' )

index is 769
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"
What is the official language used in the country the name of whose head of state is Beatrix.
schema_links:
What is the official language used in the country the name of whose head of state is Beatrix. | countrylanguage : countrylanguage.isofficial , countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.* | country : country.headofstate ( Beatrix ) , country.name , country.continent , country.population , country.code , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT language FROM countrylanguage WHERE isofficial = true AND countrycode = (SELECT code FROM country WHERE headofstate = 'Beatrix')
natsql:
SELECT language FROM countrylanguage WHERE isofficial = true AND countrycode = (SELECT code FROM country WHERE headofstate = 'Beatrix')
SQL:
SELECT language FROM countrylanguage WHERE isofficial = true AND countrycode = (SELECT code FROM country WHERE headofstate = 'Beatrix')
self correction:
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.IsOfficial = 1 AND country.Name = (SELECT country.Name FROM country WHERE country.HeadOfState = 'Beatrix')

index is 770
SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"
What is the total number of unique official languages spoken in the countries that are founded before 1930?
schema_links:
What is the total number of unique official languages spoken in the countries that are founded before 1930? | countrylanguage : countrylanguage.isofficial , countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | country : country.indepyear , country.name , country.continent , country.population , country.headofstate , country.* | city : city.id , city.name , city.countrycode , city.district , city.population , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select count ( distinct _ ) from _ where _
natsql and SQL generation:
SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE language IS OFFICIAL AND countrycode IN (SELECT code FROM country WHERE indepyear < 1930)
natsql:
SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE language IS OFFICIAL AND countrycode IN (SELECT code FROM country WHERE indepyear < 1930)
SQL:
SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE language IS OFFICIAL AND countrycode IN (SELECT code FROM country WHERE indepyear < 1930)
self correction:
SELECT COUNT(DISTINCT Language) FROM countrylanguage  WHERE IsOfficial = 'T'  AND CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930)

index is 771
SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"
For the countries founded before 1930, what is the total number of distinct official languages?
schema_links:
For the countries founded before 1930, what is the total number of distinct official languages? | country : country.indepyear , country.name , country.continent , country.code , country.localname , country.* | countrylanguage : countrylanguage.isofficial , countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.id , city.name , city.countrycode , city.district , city.population , city.*
natsql:
select count ( distinct _ ) from _ where _
natsql and SQL generation:
SELECT count(DISTINCT language) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE indepyear < 1930) AND isofficial = true
natsql:
SELECT count(DISTINCT language) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE indepyear < 1930) AND isofficial = true
SQL:
SELECT count(DISTINCT language) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE indepyear < 1930) AND isofficial = true
self correction:
SELECT count(DISTINCT Language) AS TotalDistinctLanguages FROM countrylanguage WHERE CountryCode IN (     SELECT Code     FROM country     WHERE IndepYear < 1930 ) AND IsOfficial = 1

index is 772
SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")
What are the countries that have greater surface area than any country in Europe?
schema_links:
What are the countries that have greater surface area than any country in Europe? | country : country.continent ( Europe ) , country.surfacearea , country.name , country.localname , country.region , country.* | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql:
select _ from _ where @.@ > min ( _ ) and _
natsql and SQL generation:
SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')
natsql:
SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')
SQL:
SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')
self correction:
SELECT name  FROM country  WHERE surfacearea > (   SELECT MAX(surfacearea)    FROM country    WHERE continent = 'Europe' )

index is 773
SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")
Which countries have greater area than that of any country in Europe?
schema_links:
Which countries have greater area than that of any country in Europe? | country : country.continent ( Europe ) , country.surfacearea , country.name , country.localname , country.region , country.* | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql:
select _ from _ where @.@ > min ( _ ) and _
natsql and SQL generation:
SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')
natsql:
SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')
SQL:
SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')
self correction:
SELECT name FROM country WHERE surfacearea > (   SELECT MAX(surfacearea)   FROM country   WHERE continent = 'Europe' )

index is 774
SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  "Asia")
What are the African countries that have a  population less than any country in Asia?
schema_links:
What are the African countries that have a  population less than any country in Asia? | country : country.continent ( Africa , Asia ) , country.name , country.population , country.localname , country.code , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ where _ and @.@ < max ( _ ) and _
natsql and SQL generation:
SELECT country.name 
FROM country 
WHERE country.continent = 'Africa' 
AND country.population < (SELECT MAX(population) FROM country WHERE continent = 'Asia')
natsql:
SELECT country.name 
FROM country 
WHERE country.continent = 'Africa' 
AND country.population < (SELECT MAX(population) FROM country WHERE continent = 'Asia')
SQL:
SELECT country.name 
FROM country 
WHERE country.continent = 'Africa' 
AND country.population < (SELECT MAX(population) FROM country WHERE continent = 'Asia')
self correction:
SELECT country.Name FROM country WHERE country.Continent = 'Africa' AND country.Population < (SELECT MIN(Population) FROM country WHERE continent = 'Asia')

index is 775
SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  "Asia")
Which African countries have a smaller population than that of any country in Asia?
schema_links:
Which African countries have a smaller population than that of any country in Asia? | country : country.continent ( Africa , Asia ) , country.population , country.name , country.code , country.region , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ where _ and @.@ < min ( _ ) and _
natsql and SQL generation:
SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT min(population) FROM country WHERE continent = 'Asia')
natsql:
SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT min(population) FROM country WHERE continent = 'Asia')
SQL:
SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT min(population) FROM country WHERE continent = 'Asia')
self correction:
SELECT name  FROM country  WHERE continent = 'Africa'  AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')

index is 776
SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  "Africa")
Which Asian countries have a population that is larger than any country in Africa?
schema_links:
Which Asian countries have a population that is larger than any country in Africa? | country : country.continent ( Africa , Asia ) , country.population , country.name , country.region , country.code , country.* | city : city.population , city.id , city.name , city.district , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ where _ and @.@ > max ( _ ) and _
natsql and SQL generation:
SELECT country.name FROM country WHERE country.continent = 'Asia' AND country.population > (SELECT max(population) FROM country WHERE continent = 'Africa')
natsql:
SELECT country.name FROM country WHERE country.continent = 'Asia' AND country.population > (SELECT max(population) FROM country WHERE continent = 'Africa')
SQL:
SELECT country.name FROM country WHERE country.continent = 'Asia' AND country.population > (SELECT max(population) FROM country WHERE continent = 'Africa')
self correction:
SELECT country.Name FROM country WHERE country.Continent = 'Asia' AND country.Population > (     SELECT MAX(Population)     FROM country     WHERE continent = 'Africa' )

index is 777
SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  "Africa")
What are the Asian countries which have a population larger than that of any country in Africa?
schema_links:
What are the Asian countries which have a population larger than that of any country in Africa? | country : country.continent ( Africa , Asia ) , country.name , country.population , country.region , country.localname , country.* | city : city.population , city.id , city.name , city.district , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ where _ and @.@ > min ( _ ) and _
natsql and SQL generation:
SELECT country.name 
FROM country 
WHERE country.continent IN ('Africa', 'Asia') 
AND country.population > (SELECT MIN(population) FROM country WHERE continent = 'Africa')
natsql:
SELECT country.name 
FROM country 
WHERE country.continent IN ('Africa', 'Asia') 
AND country.population > (SELECT MIN(population) FROM country WHERE continent = 'Africa')
SQL:
SELECT country.name 
FROM country 
WHERE country.continent IN ('Africa', 'Asia') 
AND country.population > (SELECT MIN(population) FROM country WHERE continent = 'Africa')
self correction:
SELECT country.name  FROM country  WHERE country.continent = 'Asia'  AND country.population > (SELECT MAX(population) FROM country WHERE continent = 'Africa')

index is 778
SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
What are the country codes for countries that do not speak English?
schema_links:
What are the country codes for countries that do not speak English? | countrylanguage : countrylanguage.language ( English ) , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | country : country.name , country.code , country.continent , country.region , country.population , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ where except_ @.@ is _ and _
natsql and SQL generation:
SELECT country.Code
FROM country
WHERE country.Code NOT IN (
    SELECT countrylanguage.CountryCode
    FROM countrylanguage
    WHERE countrylanguage.Language = 'English'
)
natsql:
SELECT country.Code
FROM country
WHERE country.Code NOT IN (
    SELECT countrylanguage.CountryCode
    FROM countrylanguage
    WHERE countrylanguage.Language = 'English'
)
SQL:
SELECT country.Code
FROM country
WHERE country.Code NOT IN (
    SELECT countrylanguage.CountryCode
    FROM countrylanguage
    WHERE countrylanguage.Language = 'English'
)
self correction:
SELECT country.Code FROM country WHERE country.Code NOT IN (     SELECT countrylanguage.CountryCode     FROM countrylanguage     WHERE countrylanguage.Language = 'English' )

index is 779
SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
Return the country codes for countries that do not speak English.
schema_links:
Return the country codes for countries that do not speak English. | countrylanguage : countrylanguage.language ( English ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.name , country.code , country.region , country.population , country.localname , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ where except_ @.@ is _ and _
natsql and SQL generation:
SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')
natsql:
SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')
SQL:
SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')
self correction:
SELECT country.Code FROM country WHERE country.Code NOT IN (   SELECT countrylanguage.CountryCode   FROM countrylanguage   WHERE countrylanguage.Language = 'English' )

index is 780
SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"
What are the country codes of countries where people use languages other than English?
schema_links:
What are the country codes of countries where people use languages other than English? | countrylanguage : countrylanguage.language ( English ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.name , country.code , country.continent , country.region , country.population , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select distinct _ from _ where _
natsql and SQL generation:
SELECT DISTINCT countrycode FROM countrylanguage WHERE language <> 'English'
natsql:
SELECT DISTINCT countrycode FROM countrylanguage WHERE language <> 'English'
SQL:
SELECT DISTINCT countrycode FROM countrylanguage WHERE language <> 'English'
self correction:
SELECT country.Code FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code WHERE language <> 'English'

index is 781
SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"
Give the country codes for countries in which people speak langauges that are not English.
schema_links:
Give the country codes for countries in which people speak langauges that are not English. | countrylanguage : countrylanguage.language ( English ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.name , country.code , country.continent , country.region , country.population , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select distinct _ from _ where _
natsql and SQL generation:
SELECT DISTINCT countrycode FROM countrylanguage WHERE language <> 'English'
natsql:
SELECT DISTINCT countrycode FROM countrylanguage WHERE language <> 'English'
SQL:
SELECT DISTINCT countrycode FROM countrylanguage WHERE language <> 'English'
self correction:
SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language <> 'English'

index is 782
SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
What are the codes of the countries that do not speak English and whose government forms are not Republic?
schema_links:
What are the codes of the countries that do not speak English and whose government forms are not Republic? | countrylanguage : countrylanguage.language ( English ) , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | country : country.governmentform ( Republic ) , country.code , country.name , country.population , country.localname , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT country.code FROM country WHERE country.code NOT IN (SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = 'English' AND countrylanguage.isofficial = 'T' AND countrylanguage.percentage > 0) AND country.governmentform <> 'Republic'
natsql:
SELECT country.code FROM country WHERE country.code NOT IN (SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = 'English' AND countrylanguage.isofficial = 'T' AND countrylanguage.percentage > 0) AND country.governmentform <> 'Republic'
SQL:
SELECT country.code FROM country WHERE country.code NOT IN (SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = 'English' AND countrylanguage.isofficial = 'T' AND countrylanguage.percentage > 0) AND country.governmentform <> 'Republic'
self correction:
SELECT country.code  FROM country  WHERE country.code NOT IN (   SELECT countrylanguage.countrycode    FROM countrylanguage    WHERE countrylanguage.language = 'English'      AND countrylanguage.isofficial = 'T'      AND countrylanguage.percentage > 0 )  AND country.governmentform <> 'Republic'

index is 783
SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
Return the codes of countries that do not speak English and do not have Republics for governments.
schema_links:
Return the codes of countries that do not speak English and do not have Republics for governments. | countrylanguage : countrylanguage.language ( English ) , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | country : country.governmentform ( Republic ) , country.code , country.name , country.localname , country.continent , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT country.code FROM country WHERE country.code NOT IN (SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = 'English') AND country.governmentform != 'Republic'
natsql:
SELECT country.code FROM country WHERE country.code NOT IN (SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = 'English') AND country.governmentform != 'Republic'
SQL:
SELECT country.code FROM country WHERE country.code NOT IN (SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = 'English') AND country.governmentform != 'Republic'
self correction:
SELECT country.Code FROM country WHERE country.Code NOT IN (   SELECT countrylanguage.CountryCode   FROM countrylanguage   WHERE countrylanguage.Language = 'English' ) AND country.GovernmentForm != 'Republic'

index is 784
SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
Which cities are in European countries where English is not the official language?
schema_links:
Which cities are in European countries where English is not the official language? | country : country.continent ( Europe ) , country.name , country.code , country.region , country.population , country.* | city : city.name , city.id , city.countrycode , city.district , city.population , city.* | countrylanguage : countrylanguage.language ( English ) , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select distinct _ from _ where _ and @.@ not in _ and _ and _
natsql and SQL generation:
SELECT DISTINCT city.name 
FROM city 
JOIN country ON city.countrycode = country.code 
JOIN countrylanguage ON country.code = countrylanguage.countrycode 
WHERE country.continent = 'Europe' 
AND countrylanguage.language != 'English'
natsql:
SELECT DISTINCT city.name 
FROM city 
JOIN country ON city.countrycode = country.code 
JOIN countrylanguage ON country.code = countrylanguage.countrycode 
WHERE country.continent = 'Europe' 
AND countrylanguage.language != 'English'
SQL:
SELECT DISTINCT city.name 
FROM city 
JOIN country ON city.countrycode = country.code 
JOIN countrylanguage ON country.code = countrylanguage.countrycode 
WHERE country.continent = 'Europe' 
AND countrylanguage.language != 'English'
self correction:
SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language <> 'English'

index is 785
SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
What are the names of cities in Europe for which English is not the official language?
schema_links:
What are the names of cities in Europe for which English is not the official language? | country : country.continent ( Europe ) , country.name , country.region , country.code , country.population , country.* | countrylanguage : countrylanguage.language ( English ) , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | city : city.name , city.id , city.countrycode , city.district , city.population , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select distinct _ from _ where _ and @.@ not in _ and _ and _
natsql and SQL generation:
SELECT DISTINCT city.name
FROM city
JOIN country ON city.countrycode = country.code
JOIN countrylanguage ON country.code = countrylanguage.countrycode
WHERE country.continent = 'Europe'
AND countrylanguage.language <> 'English'
natsql:
SELECT DISTINCT city.name
FROM city
JOIN country ON city.countrycode = country.code
JOIN countrylanguage ON country.code = countrylanguage.countrycode
WHERE country.continent = 'Europe'
AND countrylanguage.language <> 'English'
SQL:
SELECT DISTINCT city.name
FROM city
JOIN country ON city.countrycode = country.code
JOIN countrylanguage ON country.code = countrylanguage.countrycode
WHERE country.continent = 'Europe'
AND countrylanguage.language <> 'English'
self correction:
SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language <> 'English'

index is 786
select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  "asia"
Which unique cities are in Asian countries where Chinese is the official language ?
schema_links:
Which unique cities are in Asian countries where Chinese is the official language ? | city : city.name , city.id , city.countrycode , city.district , city.population , city.* | country : country.continent ( Asia ) , country.name , country.code , country.region , country.population , country.* | countrylanguage : countrylanguage.language ( Chinese ) , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select distinct _ from _ where _
natsql and SQL generation:
SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'
natsql:
SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'
SQL:
SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'
self correction:
SELECT DISTINCT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.Continent = 'Asia'  AND countrylanguage.Language = 'Chinese'  AND countrylanguage.IsOfficial = 'T'

index is 787
SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  "Asia"
Return the different names of cities that are in Asia and for which Chinese is the official language.
schema_links:
Return the different names of cities that are in Asia and for which Chinese is the official language. | country : country.continent ( Asia ) , country.region , country.name , country.code , country.population , country.* | countrylanguage : countrylanguage.language ( Chinese ) , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | city : city.name , city.id , city.countrycode , city.district , city.population , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select distinct _ from _ where _
natsql and SQL generation:
SELECT DISTINCT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
natsql:
SELECT DISTINCT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
SQL:
SELECT DISTINCT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
self correction:
SELECT DISTINCT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode  WHERE country.Continent = 'Asia'  AND countrylanguage.Language = 'Chinese'  AND countrylanguage.IsOfficial = 'T'

index is 788
SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1
What are the name, independence year, and surface area of the country with the smallest population?
schema_links:
What are the name, independence year, and surface area of the country with the smallest population? | country : country.surfacearea , country.indepyear , country.name , country.population , country.localname , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.name ( Independence ) , city.population , city.id , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ order by _ asc limit _
natsql and SQL generation:
SELECT name, indepyear, surfacearea
FROM country
ORDER BY population ASC
LIMIT 1
natsql:
SELECT name, indepyear, surfacearea
FROM country
ORDER BY population ASC
LIMIT 1
SQL:
SELECT name, indepyear, surfacearea
FROM country
ORDER BY population ASC
LIMIT 1
self correction:
SELECT country.name, country.indepyear, country.surfacearea FROM country ORDER BY country.population ASC LIMIT 1

index is 789
SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1
Give the name, year of independence, and surface area of the country that has the lowest population.
schema_links:
Give the name, year of independence, and surface area of the country that has the lowest population. | country : country.surfacearea , country.indepyear , country.name , country.population , country.localname , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.name ( Independence ) , city.id , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ order by _ asc limit _
natsql and SQL generation:
SELECT name, indepyear, surfacearea
FROM country
ORDER BY population ASC
LIMIT 1
natsql:
SELECT name, indepyear, surfacearea
FROM country
ORDER BY population ASC
LIMIT 1
SQL:
SELECT name, indepyear, surfacearea
FROM country
ORDER BY population ASC
LIMIT 1
self correction:
SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT MIN(population) FROM country) LIMIT 1

index is 790
SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
What are the population, name and leader of the country with the largest area?
schema_links:
What are the population, name and leader of the country with the largest area? | country : country.surfacearea , country.name , country.population , country.headofstate , country.localname , country.* | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | city : city.population , city.name , city.id , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT population, name, headofstate FROM country ORDER BY surfacearea DESC LIMIT 1
natsql:
SELECT population, name, headofstate FROM country ORDER BY surfacearea DESC LIMIT 1
SQL:
SELECT population, name, headofstate FROM country ORDER BY surfacearea DESC LIMIT 1
self correction:
SELECT population, name, headofstate FROM country WHERE surfacearea = (     SELECT MAX(surfacearea)     FROM country )

index is 791
SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
Give the name, population, and head of state for the country that has the largest area.
schema_links:
Give the name, population, and head of state for the country that has the largest area. | country : country.headofstate , country.surfacearea , country.name , country.population , country.continent , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.population , city.id , city.name , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT name, population, headofstate
FROM country
ORDER BY surfacearea DESC
LIMIT 1
natsql:
SELECT name, population, headofstate
FROM country
ORDER BY surfacearea DESC
LIMIT 1
SQL:
SELECT name, population, headofstate
FROM country
ORDER BY surfacearea DESC
LIMIT 1
self correction:
SELECT name, population, headofstate FROM country ORDER BY surfacearea DESC LIMIT 1

index is 792
SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2
Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.
schema_links:
Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages. | country : country.name , country.code , country.continent , country.population , country.localname , country.* | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql:
select count ( _ ) , _ from _ where count ( _ ) > _ group by _
natsql and SQL generation:
SELECT country.name, COUNT(countrylanguage.language) 
FROM country 
JOIN countrylanguage ON country.code = countrylanguage.countrycode 
GROUP BY country.code 
HAVING COUNT(countrylanguage.language) > 2
natsql:
SELECT country.name, COUNT(countrylanguage.language) 
FROM country 
JOIN countrylanguage ON country.code = countrylanguage.countrycode 
GROUP BY country.code 
HAVING COUNT(countrylanguage.language) > 2
SQL:
SELECT country.name, COUNT(countrylanguage.language) 
FROM country 
JOIN countrylanguage ON country.code = countrylanguage.countrycode 
GROUP BY country.code 
HAVING COUNT(countrylanguage.language) > 2
self correction:
SELECT country.name, COUNT(countrylanguage.language)  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  GROUP BY country.name  HAVING COUNT(countrylanguage.language) > 2

index is 793
SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2
What are the names of countries that speak more than 2 languages, as well as how many languages they speak?
schema_links:
What are the names of countries that speak more than 2 languages, as well as how many languages they speak? | country : country.name , country.localname , country.code , country.population , country.headofstate , country.* | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql:
select count ( _ ) , _ from _ where count ( _ ) > _ group by _
natsql and SQL generation:
SELECT COUNT(language), country.name 
FROM countrylanguage 
JOIN country ON countrylanguage.countrycode = country.code 
GROUP BY country.name 
HAVING COUNT(language) > 2
natsql:
SELECT COUNT(language), country.name 
FROM countrylanguage 
JOIN country ON countrylanguage.countrycode = country.code 
GROUP BY country.name 
HAVING COUNT(language) > 2
SQL:
SELECT COUNT(language), country.name 
FROM countrylanguage 
JOIN country ON countrylanguage.countrycode = country.code 
GROUP BY country.name 
HAVING COUNT(language) > 2
self correction:
SELECT COUNT(countrylanguage.Language), country.Name  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  GROUP BY country.Name  HAVING COUNT(countrylanguage.Language) > 2

index is 794
SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District
Find the number of cities in each district whose population is greater than the average population of cities?
schema_links:
Find the number of cities in each district whose population is greater than the average population of cities? | city : city.district , city.population , city.id , city.name , city.countrycode , city.* | country : country.name , country.code , country.continent , country.region , country.population , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql:
select count ( _ ) , _ from _ where @.@ > avg ( _ ) group by _
natsql and SQL generation:
SELECT COUNT(city.id), city.district 
FROM city 
WHERE city.population > (SELECT AVG(population) FROM city) 
GROUP BY city.district
natsql:
SELECT COUNT(city.id), city.district 
FROM city 
WHERE city.population > (SELECT AVG(population) FROM city) 
GROUP BY city.district
SQL:
SELECT COUNT(city.id), city.district 
FROM city 
WHERE city.population > (SELECT AVG(population) FROM city) 
GROUP BY city.district
self correction:
SELECT COUNT(city.id), city.district  FROM city  WHERE city.population > (SELECT AVG(population) FROM city)  GROUP BY city.district

index is 795
SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District
How many cities in each district have a population that is above the average population across all cities?
schema_links:
How many cities in each district have a population that is above the average population across all cities? | city : city.district , city.population , city.id , city.name , city.countrycode , city.* | country : country.name , country.population , country.code , country.continent , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql:
select count ( _ ) , _ from _ where @.@ > avg ( _ ) group by _
natsql and SQL generation:
SELECT count(city.*) ,  city.district FROM city WHERE population  >  (SELECT avg(population) FROM city) GROUP BY city.district
natsql:
SELECT count(city.*) ,  city.district FROM city WHERE population  >  (SELECT avg(population) FROM city) GROUP BY city.district
SQL:
SELECT count(city.*) ,  city.district FROM city WHERE population  >  (SELECT avg(population) FROM city) GROUP BY city.district
self correction:
SELECT count(city.ID) ,  city.district  FROM city  WHERE city.population > (SELECT avg(population) FROM city)  GROUP BY city.district

index is 796
SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72
Find the government form name and total population for each government form whose average life expectancy is longer than 72.
schema_links:
Find the government form name and total population for each government form whose average life expectancy is longer than 72. | country : country.lifeexpectancy , country.governmentform , country.name , country.population , country.localname , country.* | city : city.name , city.population , city.id , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql:
select sum ( _ ) , _ from _ where avg ( _ ) > _ group by _
natsql and SQL generation:
SELECT governmentform, SUM(population) FROM country GROUP BY governmentform HAVING AVG(lifeexpectancy) > 72
natsql:
SELECT governmentform, SUM(population) FROM country GROUP BY governmentform HAVING AVG(lifeexpectancy) > 72
SQL:
SELECT governmentform, SUM(population) FROM country GROUP BY governmentform HAVING AVG(lifeexpectancy) > 72
self correction:
SELECT governmentform, SUM(population) AS total_population FROM country GROUP BY governmentform HAVING AVG(lifeexpectancy) > 72;

index is 797
SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72
What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?
schema_links:
What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72? | country : country.lifeexpectancy , country.governmentform , country.population , country.name , country.headofstate , country.* | city : city.population , city.name , city.id , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql:
select sum ( _ ) , _ from _ where avg ( _ ) > _ group by _
natsql and SQL generation:
SELECT sum(population), governmentform FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform
natsql:
SELECT sum(population), governmentform FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform
SQL:
SELECT sum(population), governmentform FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform
self correction:
SELECT governmentform, SUM(population) AS total_population FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform

index is 798
SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72
Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?
schema_links:
Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72? | country : country.lifeexpectancy , country.continent , country.population , country.name , country.region , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql:
select sum ( _ ) , avg ( _ ) , _ from _ where avg ( _ ) < _ group by _
natsql and SQL generation:
SELECT AVG(lifeexpectancy), SUM(population), continent FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72
natsql:
SELECT AVG(lifeexpectancy), SUM(population), continent FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72
SQL:
SELECT AVG(lifeexpectancy), SUM(population), continent FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72
self correction:
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy, SUM(Population) AS TotalPopulation, Continent FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72

index is 799
SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72
What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?
schema_links:
What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72? | country : country.lifeexpectancy , country.continent , country.population , country.name , country.region , country.* | city : city.population , city.id , city.name , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql:
select sum ( _ ) , avg ( _ ) , _ from _ where avg ( _ ) < _ group by _
natsql and SQL generation:
SELECT continent, sum(population), avg(lifeexpectancy) FROM country GROUP BY continent HAVING avg(lifeexpectancy) < 72
natsql:
SELECT continent, sum(population), avg(lifeexpectancy) FROM country GROUP BY continent HAVING avg(lifeexpectancy) < 72
SQL:
SELECT continent, sum(population), avg(lifeexpectancy) FROM country GROUP BY continent HAVING avg(lifeexpectancy) < 72
self correction:
SELECT country.Continent,         SUM(country.Population) AS total_population,         AVG(country.LifeExpectancy) AS average_life_expectancy  FROM country  GROUP BY country.Continent  HAVING AVG(country.LifeExpectancy) < 72

index is 800
SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
What are the names and areas of countries with the top 5 largest area?
schema_links:
What are the names and areas of countries with the top 5 largest area? | country : country.surfacearea , country.name , country.region , country.population , country.continent , country.* | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.name , city.id , city.district , city.population , city.countrycode , city.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5
natsql:
SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5
SQL:
SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5
self correction:
SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5

index is 801
SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
Return the names and surface areas of the 5 largest countries.
schema_links:
Return the names and surface areas of the 5 largest countries. | country : country.surfacearea , country.name , country.population , country.continent , country.region , country.* | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5
natsql:
SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5
SQL:
SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5
self correction:
SELECT name, surfacearea  FROM country  ORDER BY surfacearea DESC  LIMIT 5

index is 802
SELECT Name FROM country ORDER BY Population DESC LIMIT 3
What are names of countries with the top 3 largest population?
schema_links:
What are names of countries with the top 3 largest population? | country : country.name , country.population , country.localname , country.continent , country.region , country.* | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | city : city.population , city.id , city.name , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT name FROM country ORDER BY population DESC LIMIT 3
natsql:
SELECT name FROM country ORDER BY population DESC LIMIT 3
SQL:
SELECT name FROM country ORDER BY population DESC LIMIT 3
self correction:
SELECT country.Name FROM country ORDER BY country.Population DESC LIMIT 3

index is 803
SELECT Name FROM country ORDER BY Population DESC LIMIT 3
Return the names of the 3 most populated countries.
schema_links:
Return the names of the 3 most populated countries. | country : country.name , country.population , country.localname , country.continent , country.region , country.* | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | city : city.population , city.id , city.name , city.countrycode , city.district , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT name FROM country ORDER BY population DESC LIMIT 3
natsql:
SELECT name FROM country ORDER BY population DESC LIMIT 3
SQL:
SELECT name FROM country ORDER BY population DESC LIMIT 3
self correction:
SELECT name FROM country ORDER BY Population DESC LIMIT 3

index is 804
SELECT Name FROM country ORDER BY Population ASC LIMIT 3
What are the names of the nations with the 3 lowest populations?
schema_links:
What are the names of the nations with the 3 lowest populations? | country : country.name , country.population , country.localname , country.continent , country.region , country.* | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | city : city.population , city.id , city.name , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ order by _ asc limit _
natsql and SQL generation:
SELECT name FROM country ORDER BY population ASC LIMIT 3
natsql:
SELECT name FROM country ORDER BY population ASC LIMIT 3
SQL:
SELECT name FROM country ORDER BY population ASC LIMIT 3
self correction:
SELECT name FROM country ORDER BY population ASC LIMIT 3

index is 805
SELECT Name FROM country ORDER BY Population ASC LIMIT 3
Return the names of the 3 countries with the fewest people.
schema_links:
Return the names of the 3 countries with the fewest people. | country : country.name , country.population , country.localname , country.continent , country.region , country.* | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | city : city.population , city.id , city.name , city.countrycode , city.district , city.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.*
natsql:
select _ from _ order by _ asc limit _
natsql and SQL generation:
SELECT name FROM country ORDER BY population ASC LIMIT 3
natsql:
SELECT name FROM country ORDER BY population ASC LIMIT 3
SQL:
SELECT name FROM country ORDER BY population ASC LIMIT 3
self correction:
SELECT name FROM country ORDER BY population ASC LIMIT 3

index is 806
SELECT count(*) FROM country WHERE continent  =  "Asia"
how many countries are in Asia?
schema_links:
how many countries are in Asia? | country : country.continent ( Asia ) , country.name , country.region , country.population , country.code , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM country WHERE continent = 'Asia'
natsql:
SELECT count(*) FROM country WHERE continent = 'Asia'
SQL:
SELECT count(*) FROM country WHERE continent = 'Asia'
self correction:
SELECT count(DISTINCT Code) FROM country WHERE continent = 'Asia'

index is 807
SELECT count(*) FROM country WHERE continent  =  "Asia"
Count the number of countries in Asia.
schema_links:
Count the number of countries in Asia. | country : country.continent ( Asia ) , country.name , country.region , country.population , country.code , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM country WHERE continent = 'Asia'
natsql:
SELECT count(*) FROM country WHERE continent = 'Asia'
SQL:
SELECT count(*) FROM country WHERE continent = 'Asia'
self correction:
SELECT count(*) FROM country WHERE Continent = 'Asia'

index is 808
SELECT Name FROM country WHERE continent  =  "Europe" AND Population  =  "80000"
What are the names of the countries that are in the continent of Europe and have a population of 80000?
schema_links:
What are the names of the countries that are in the continent of Europe and have a population of 80000? | country : country.continent ( Europe ) , country.name , country.population , country.region , country.surfacearea , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.population , city.id , city.name , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT name FROM country WHERE continent = 'Europe' AND population = 80000
natsql:
SELECT name FROM country WHERE continent = 'Europe' AND population = 80000
SQL:
SELECT name FROM country WHERE continent = 'Europe' AND population = 80000
self correction:
SELECT name  FROM country  WHERE continent = 'Europe' AND population = 80000

index is 809
SELECT Name FROM country WHERE continent  =  "Europe" AND Population  =  "80000"
Give the names of countries that are in Europe and have a population equal to 80000.
schema_links:
Give the names of countries that are in Europe and have a population equal to 80000. | country : country.continent ( Europe ) , country.name , country.population , country.code , country.region , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT name FROM country WHERE continent = 'Europe' AND population = 80000
natsql:
SELECT name FROM country WHERE continent = 'Europe' AND population = 80000
SQL:
SELECT name FROM country WHERE continent = 'Europe' AND population = 80000
self correction:
SELECT name FROM country WHERE continent = 'Europe' AND population = 80000

index is 810
select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000
What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?
schema_links:
What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ? | country : country.continent ( North America ) , country.surfacearea , country.population , country.region ( North America ) , country.name , country.* | city : city.population , city.id , city.name , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql:
select sum ( _ ) , avg ( _ ) from _ where _
natsql and SQL generation:
SELECT sum(population), avg(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000
natsql:
SELECT sum(population), avg(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000
SQL:
SELECT sum(population), avg(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000
self correction:
SELECT sum(population) AS total_population, avg(surfacearea) AS average_area FROM country WHERE continent = 'North America' AND surfacearea > 3000

index is 811
select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000
Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .
schema_links:
Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 . | country : country.surfacearea , country.continent ( North America ) , country.population , country.region ( North America ) , country.name , country.* | city : city.population , city.id , city.name , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql:
select sum ( _ ) , avg ( _ ) from _ where _
natsql and SQL generation:
SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000
natsql:
SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000
SQL:
SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000
self correction:
SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000

index is 812
SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000
What are the cities whose population is between 160000 and 900000?
schema_links:
What are the cities whose population is between 160000 and 900000? | city : city.name , city.population , city.id , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | country : country.name , country.code , country.continent , country.region , country.population , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql:
select _ from _ where _ between _ and _
natsql and SQL generation:
SELECT name FROM city WHERE population BETWEEN 160000 AND 900000
natsql:
SELECT name FROM city WHERE population BETWEEN 160000 AND 900000
SQL:
SELECT name FROM city WHERE population BETWEEN 160000 AND 900000
self correction:
SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000

index is 813
select name from city where population between 160000 and 900000
Return the names of cities that have a population between 160000 and 900000 .
schema_links:
Return the names of cities that have a population between 160000 and 900000 . | city : city.name , city.population , city.id , city.district , city.countrycode , city.* | country : country.name , country.code , country.continent , country.region , country.population , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql:
select _ from _ where _ between _ and _
natsql and SQL generation:

natsql:

SQL:

self correction:
SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000;

index is 814
SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1
Which language is spoken by the largest number of countries?
schema_links:
Which language is spoken by the largest number of countries? | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | country : country.name , country.region , country.population , country.code , country.continent , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT language FROM countrylanguage GROUP BY language ORDER BY count(*) DESC LIMIT 1
natsql:
SELECT language FROM countrylanguage GROUP BY language ORDER BY count(*) DESC LIMIT 1
SQL:
SELECT language FROM countrylanguage GROUP BY language ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1

index is 815
SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1
Give the language that is spoken in the most countries.
schema_links:
Give the language that is spoken in the most countries. | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | country : country.name , country.region , country.population , country.headofstate , country.code , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT language FROM countrylanguage GROUP BY language ORDER BY count(*) DESC LIMIT 1
natsql:
SELECT language FROM countrylanguage GROUP BY language ORDER BY count(*) DESC LIMIT 1
SQL:
SELECT language FROM countrylanguage GROUP BY language ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1

index is 816
SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
What is the language spoken by the largest percentage of people in each country?
schema_links:
What is the language spoken by the largest percentage of people in each country? | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | country : country.name , country.localname , country.continent , country.population , country.code , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql:
select _ , max ( _ ) from _ group by _
natsql and SQL generation:
SELECT T2.name, T1.language 
FROM countrylanguage AS T1 
JOIN country AS T2 ON T1.countrycode = T2.code 
GROUP BY T2.name 
HAVING T1.percentage = MAX(T1.percentage)
natsql:
SELECT T2.name, T1.language 
FROM countrylanguage AS T1 
JOIN country AS T2 ON T1.countrycode = T2.code 
GROUP BY T2.name 
HAVING T1.percentage = MAX(T1.percentage)
SQL:
SELECT T2.name, T1.language 
FROM countrylanguage AS T1 
JOIN country AS T2 ON T1.countrycode = T2.code 
GROUP BY T2.name 
HAVING T1.percentage = MAX(T1.percentage)
self correction:
SELECT T2.name, T1.language  FROM countrylanguage AS T1  JOIN country AS T2 ON T1.CountryCode = T2.Code  GROUP BY T2.name  HAVING T1.Percentage = MAX(T1.Percentage)

index is 817
SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?
schema_links:
What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each? | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.name , country.localname , country.code , country.continent , country.population , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ , max ( _ ) from _ group by _
natsql and SQL generation:
SELECT countrycode, language
FROM countrylanguage
WHERE percentage = (
  SELECT MAX(percentage)
  FROM countrylanguage
  WHERE countrycode = countrylanguage.countrycode
)
GROUP BY countrycode
natsql:
SELECT countrycode, language
FROM countrylanguage
WHERE percentage = (
  SELECT MAX(percentage)
  FROM countrylanguage
  WHERE countrycode = countrylanguage.countrycode
)
GROUP BY countrycode
SQL:
SELECT countrycode, language
FROM countrylanguage
WHERE percentage = (
  SELECT MAX(percentage)
  FROM countrylanguage
  WHERE countrycode = countrylanguage.countrycode
)
GROUP BY countrycode
self correction:
SELECT countrycode, language FROM countrylanguage WHERE (countrycode, percentage) IN (   SELECT countrycode, MAX(percentage)   FROM countrylanguage   GROUP BY countrycode ) GROUP BY countrycode

index is 818
SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
What is the total number of countries where Spanish is spoken by the largest percentage of people?
schema_links:
What is the total number of countries where Spanish is spoken by the largest percentage of people? | countrylanguage : countrylanguage.language ( Spanish ) , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | country : country.name , country.population , country.code , country.continent , country.region , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select count ( _ ) , max ( _ ) from _ where _ group by _
natsql and SQL generation:
SELECT count(*) , max(percentage) FROM countrylanguage WHERE language = 'Spanish' GROUP BY language
natsql:
SELECT count(*) , max(percentage) FROM countrylanguage WHERE language = 'Spanish' GROUP BY language
SQL:
SELECT count(*) , max(percentage) FROM countrylanguage WHERE language = 'Spanish' GROUP BY language
self correction:
SELECT count(DISTINCT countrylanguage.CountryCode) AS total_countries FROM countrylanguage WHERE language = 'Spanish' AND percentage = (SELECT max(percentage) FROM countrylanguage WHERE language = 'Spanish')

index is 819
SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
Count the number of countries for which Spanish is the predominantly spoken language.
schema_links:
Count the number of countries for which Spanish is the predominantly spoken language. | countrylanguage : countrylanguage.language ( Spanish ) , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | country : country.name , country.region , country.population , country.code , country.continent , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select count ( _ ) , max ( _ ) from _ where _ group by _
natsql and SQL generation:
SELECT count(*) ,  max(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T' GROUP BY Language
natsql:
SELECT count(*) ,  max(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T' GROUP BY Language
SQL:
SELECT count(*) ,  max(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T' GROUP BY Language
self correction:
SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T'

index is 820
SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
What are the codes of countries where Spanish is spoken by the largest percentage of people?
schema_links:
What are the codes of countries where Spanish is spoken by the largest percentage of people? | countrylanguage : countrylanguage.language ( Spanish ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.name , country.population , country.code , country.continent , country.region , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ , max ( _ ) from _ where _ group by _
natsql and SQL generation:
SELECT countrycode, MAX(percentage) FROM countrylanguage WHERE language = 'Spanish' GROUP BY countrycode
natsql:
SELECT countrycode, MAX(percentage) FROM countrylanguage WHERE language = 'Spanish' GROUP BY countrycode
SQL:
SELECT countrycode, MAX(percentage) FROM countrylanguage WHERE language = 'Spanish' GROUP BY countrycode
self correction:
SELECT countrycode, MAX(percentage)  FROM countrylanguage  WHERE language = 'Spanish'  GROUP BY countrycode ORDER BY MAX(percentage) DESC LIMIT 1

index is 821
SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
Return the codes of countries for which Spanish is the predominantly spoken language.
schema_links:
Return the codes of countries for which Spanish is the predominantly spoken language. | countrylanguage : countrylanguage.language ( Spanish ) , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | country : country.name , country.code , country.continent , country.region , country.population , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql:
select _ , max ( _ ) from _ where _ group by _
natsql and SQL generation:
SELECT countrylanguage.countrycode, MAX(countrylanguage.percentage) FROM countrylanguage WHERE countrylanguage.language = 'Spanish' GROUP BY countrylanguage.countrycode
natsql:
SELECT countrylanguage.countrycode, MAX(countrylanguage.percentage) FROM countrylanguage WHERE countrylanguage.language = 'Spanish' GROUP BY countrylanguage.countrycode
SQL:
SELECT countrylanguage.countrycode, MAX(countrylanguage.percentage) FROM countrylanguage WHERE countrylanguage.language = 'Spanish' GROUP BY countrylanguage.countrycode
self correction:
SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = 'Spanish' GROUP BY countrylanguage.CountryCode HAVING MAX(countrylanguage.Percentage) = (   SELECT MAX(Percentage)   FROM countrylanguage   WHERE Language = 'Spanish' )

index is 822
SELECT count(*) FROM conductor
How many conductors are there?
schema_links:
How many conductors are there? | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work , conductor.* | performance : performance.official_ratings_(millions) , performance.type , performance.date , performance.share , performance.performance_id , performance.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT COUNT(*) FROM conductor
natsql:
SELECT COUNT(*) FROM conductor
SQL:
SELECT COUNT(*) FROM conductor
self correction:
SELECT COUNT(DISTINCT Conductor_ID) FROM conductor

index is 823
SELECT count(*) FROM conductor
Count the number of conductors.
schema_links:
Count the number of conductors. | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work , conductor.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT count(*) FROM conductor
natsql:
SELECT count(*) FROM conductor
SQL:
SELECT count(*) FROM conductor
self correction:
SELECT COUNT(*) FROM conductor

index is 824
SELECT Name FROM conductor ORDER BY Age ASC
List the names of conductors in ascending order of age.
schema_links:
List the names of conductors in ascending order of age. | conductor : conductor.name , conductor.age , conductor.conductor_id , conductor.nationality , conductor.year_of_work , conductor.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql:
select _ from _ order by _ asc
natsql and SQL generation:
SELECT name FROM conductor ORDER BY age ASC
natsql:
SELECT name FROM conductor ORDER BY age ASC
SQL:
SELECT name FROM conductor ORDER BY age ASC
self correction:
SELECT conductor.Name FROM conductor ORDER BY conductor.Age ASC

index is 825
SELECT Name FROM conductor ORDER BY Age ASC
What are the names of conductors, ordered by age?
schema_links:
What are the names of conductors, ordered by age? | conductor : conductor.name , conductor.age , conductor.conductor_id , conductor.nationality , conductor.year_of_work , conductor.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | performance : performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.performance_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql:
select _ from _ order by _ asc
natsql and SQL generation:
SELECT name FROM conductor ORDER BY age ASC
natsql:
SELECT name FROM conductor ORDER BY age ASC
SQL:
SELECT name FROM conductor ORDER BY age ASC
self correction:
SELECT name FROM conductor ORDER BY age ASC

index is 826
SELECT Name FROM conductor WHERE Nationality != 'USA'
What are the names of conductors whose nationalities are not "USA"?
schema_links:
What are the names of conductors whose nationalities are not "USA"? | conductor : conductor.nationality ( USA ) , conductor.name , conductor.conductor_id , conductor.age , conductor.year_of_work , conductor.* | performance : performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.performance_id , performance.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT name FROM conductor WHERE nationality <> "USA"
natsql:
SELECT name FROM conductor WHERE nationality <> "USA"
SQL:
SELECT name FROM conductor WHERE nationality <> "USA"
self correction:
SELECT name FROM conductor WHERE nationality <> 'USA'

index is 827
SELECT Name FROM conductor WHERE Nationality != 'USA'
Return the names of conductors that do not have the nationality "USA".
schema_links:
Return the names of conductors that do not have the nationality "USA". | conductor : conductor.nationality ( USA ) , conductor.name , conductor.conductor_id , conductor.age , conductor.year_of_work , conductor.* | performance : performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.performance_id , performance.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT name FROM conductor WHERE nationality != 'USA'
natsql:
SELECT name FROM conductor WHERE nationality != 'USA'
SQL:
SELECT name FROM conductor WHERE nationality != 'USA'
self correction:
SELECT name FROM conductor WHERE nationality <> 'USA'

index is 828
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
What are the record companies of orchestras in descending order of years in which they were founded?
schema_links:
What are the record companies of orchestras in descending order of years in which they were founded? | orchestra : orchestra.record_company , orchestra.year_of_founded , orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.* | performance : performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.performance_id , performance.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql:
select _ from _ order by _ desc
natsql and SQL generation:
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC
natsql:
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC
SQL:
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC
self correction:
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC

index is 829
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
Return the record companies of orchestras, sorted descending by the years in which they were founded.
schema_links:
Return the record companies of orchestras, sorted descending by the years in which they were founded. | orchestra : orchestra.record_company , orchestra.year_of_founded , orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql:
select _ from _ order by _ desc
natsql and SQL generation:
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC
natsql:
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC
SQL:
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC
self correction:
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC

index is 830
SELECT avg(Attendance) FROM SHOW
What is the average attendance of shows?
schema_links:
What is the average attendance of shows? | show : show.attendance , show.show_id , show.performance_id , show.result , show.if_first_show , show.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.*
natsql:
select avg ( _ ) from _
natsql and SQL generation:
SELECT AVG(attendance) FROM show
natsql:
SELECT AVG(attendance) FROM show
SQL:
SELECT AVG(attendance) FROM show
self correction:
SELECT AVG(Attendance) FROM show

index is 831
SELECT avg(Attendance) FROM SHOW
Return the average attendance across all shows.
schema_links:
Return the average attendance across all shows. | show : show.attendance , show.show_id , show.result , show.performance_id , show.if_first_show , show.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.*
natsql:
select avg ( _ ) from _
natsql and SQL generation:
SELECT avg(attendance) FROM show
natsql:
SELECT avg(attendance) FROM show
SQL:
SELECT avg(attendance) FROM show
self correction:
SELECT avg(Attendance) FROM show

index is 832
SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"
What are the maximum and minimum share of performances whose type is not "Live final".
schema_links:
What are the maximum and minimum share of performances whose type is not "Live final". | performance : performance.type ( Live final ) , performance.share , performance.performance_id , performance.orchestra_id , performance.date , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.*
natsql:
select max ( _ ) , min ( _ ) from _ where _
natsql and SQL generation:
SELECT max(share), min(share) FROM performance WHERE type != 'Live final'
natsql:
SELECT max(share), min(share) FROM performance WHERE type != 'Live final'
SQL:
SELECT max(share), min(share) FROM performance WHERE type != 'Live final'
self correction:
SELECT MAX(Share), MIN(Share) FROM Performance WHERE Type <> 'Live final'

index is 833
SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"
Return the maximum and minimum shares for performances that do not have the type "Live final".
schema_links:
Return the maximum and minimum shares for performances that do not have the type "Live final". | performance : performance.type ( Live final ) , performance.share , performance.performance_id , performance.date , performance.orchestra_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.*
natsql:
select max ( _ ) , min ( _ ) from _ where _
natsql and SQL generation:
SELECT max(share), min(share) FROM performance WHERE type <> "Live final"
natsql:
SELECT max(share), min(share) FROM performance WHERE type <> "Live final"
SQL:
SELECT max(share), min(share) FROM performance WHERE type <> "Live final"
self correction:
SELECT max(Share), min(Share) FROM performance WHERE Type <> 'Live final';

index is 834
SELECT count(DISTINCT Nationality) FROM conductor
How many different nationalities do conductors have?
schema_links:
How many different nationalities do conductors have? | conductor : conductor.nationality , conductor.conductor_id , conductor.name , conductor.age , conductor.year_of_work , conductor.* | performance : performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.performance_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.*
natsql:
select count ( distinct _ ) from _
natsql and SQL generation:
SELECT count(DISTINCT nationality) FROM conductor
natsql:
SELECT count(DISTINCT nationality) FROM conductor
SQL:
SELECT count(DISTINCT nationality) FROM conductor
self correction:
SELECT COUNT(DISTINCT Nationality) FROM conductor

index is 835
SELECT count(DISTINCT Nationality) FROM conductor
Count the number of different nationalities of conductors.
schema_links:
Count the number of different nationalities of conductors. | conductor : conductor.nationality , conductor.conductor_id , conductor.name , conductor.age , conductor.year_of_work , conductor.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.*
natsql:
select count ( distinct _ ) from _
natsql and SQL generation:
SELECT COUNT(DISTINCT nationality) FROM conductor
natsql:
SELECT COUNT(DISTINCT nationality) FROM conductor
SQL:
SELECT COUNT(DISTINCT nationality) FROM conductor
self correction:
SELECT COUNT(DISTINCT Nationality) AS NumOfNationalities FROM conductor

index is 836
SELECT Name FROM conductor ORDER BY Year_of_Work DESC
List names of conductors in descending order of years of work.
schema_links:
List names of conductors in descending order of years of work. | conductor : conductor.year_of_work , conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql:
select _ from _ order by _ desc
natsql and SQL generation:
SELECT name FROM conductor ORDER BY year_of_work DESC
natsql:
SELECT name FROM conductor ORDER BY year_of_work DESC
SQL:
SELECT name FROM conductor ORDER BY year_of_work DESC
self correction:
SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC

index is 837
SELECT Name FROM conductor ORDER BY Year_of_Work DESC
What are the names of conductors, sorted descending by the number of years they have worked?
schema_links:
What are the names of conductors, sorted descending by the number of years they have worked? | conductor : conductor.year_of_work , conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | performance : performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.performance_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql:
select _ from _ order by _ desc
natsql and SQL generation:
SELECT name FROM conductor ORDER BY year_of_work DESC
natsql:
SELECT name FROM conductor ORDER BY year_of_work DESC
SQL:
SELECT name FROM conductor ORDER BY year_of_work DESC
self correction:
SELECT conductor.Name  FROM conductor  ORDER BY conductor.Year_of_Work DESC

index is 838
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
List the name of the conductor with the most years of work.
schema_links:
List the name of the conductor with the most years of work. | conductor : conductor.year_of_work , conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1
natsql:
SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1
SQL:
SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1
self correction:
SELECT name  FROM conductor  ORDER BY year_of_work DESC  LIMIT 1

index is 839
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
What is the name of the conductor who has worked the greatest number of years?
schema_links:
What is the name of the conductor who has worked the greatest number of years? | conductor : conductor.year_of_work , conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.* | orchestra : orchestra.orchestra , orchestra.conductor_id , orchestra.orchestra_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | performance : performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.performance_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1
natsql:
SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1
SQL:
SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1
self correction:
SELECT c.Name FROM conductor c GROUP BY c.Name ORDER BY COUNT(c.Year_of_Work) DESC LIMIT 1

index is 840
SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID
Show the names of conductors and the orchestras they have conducted.
schema_links:
Show the names of conductors and the orchestras they have conducted. | conductor : conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.year_of_work , conductor.* | orchestra : orchestra.orchestra , orchestra.conductor_id , orchestra.orchestra_id , orchestra.year_of_founded , orchestra.record_company , orchestra.* | performance : performance.orchestra_id , performance.type , performance.date , performance.share , performance.performance_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql:
select _ from _
natsql and SQL generation:
SELECT conductor.name, orchestra.orchestra
FROM conductor
JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id
natsql:
SELECT conductor.name, orchestra.orchestra
FROM conductor
JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id
SQL:
SELECT conductor.name, orchestra.orchestra
FROM conductor
JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id
self correction:
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID

index is 841
SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID
What are the names of conductors as well as the corresonding orchestras that they have conducted?
schema_links:
What are the names of conductors as well as the corresonding orchestras that they have conducted? | conductor : conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.year_of_work , conductor.* | orchestra : orchestra.orchestra , orchestra.conductor_id , orchestra.orchestra_id , orchestra.year_of_founded , orchestra.record_company , orchestra.* | performance : performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql:
select _ from _
natsql and SQL generation:
Since the provided question is not related to the previously mentioned tables and schema, the generated SQL query will be different. However, without additional information about the schema and tables related to the question, it is not possible to generate a specific SQL query. Please provide more details about the relevant tables and columns, and I will be happy to help you generate the SQL query.
natsql:
Since the provided question is not related to the previously mentioned tables and schema, the generated SQL query will be different. However, without additional information about the schema and tables related to the question, it is not possible to generate a specific SQL query. Please provide more details about the relevant tables and columns, and I will be happy to help you generate the SQL query.
SQL:
Since the provided question is not related to the previously mentioned tables and schema, the generated SQL query will be different. However, without additional information about the schema and tables related to the question, it is not possible to generate a specific SQL query. Please provide more details about the relevant tables and columns, and I will be happy to help you generate the SQL query.
self correction:
SELECT The SQL query to retrieve the names of conductors and the corresponding orchestras they have conducted would be as follows:  ```sql SELECT c.Name AS Conductor_Name, o.Orchestra AS Orchestra_Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID; ```  This query selects the conductor's name from the "conductor" table and the orchestra's name from the "orchestra" table. The JOIN condition connects the two tables based on the conductor ID.

index is 842
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1
Show the names of conductors that have conducted more than one orchestras.
schema_links:
Show the names of conductors that have conducted more than one orchestras. | conductor : conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.year_of_work , conductor.* | orchestra : orchestra.conductor_id , orchestra.orchestra , orchestra.orchestra_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | performance : performance.orchestra_id , performance.type , performance.date , performance.share , performance.performance_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql:
select _ from _ where count ( _ ) > _ group by _
natsql and SQL generation:
SELECT name FROM conductor GROUP BY name HAVING count(orchestra_id) > 1
natsql:
SELECT name FROM conductor GROUP BY name HAVING count(orchestra_id) > 1
SQL:
SELECT name FROM conductor GROUP BY name HAVING count(orchestra_id) > 1
self correction:
SELECT name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID, conductor.Name HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1

index is 843
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1
What are the names of conductors who have conducted at more than one orchestra?
schema_links:
What are the names of conductors who have conducted at more than one orchestra? | conductor : conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.year_of_work , conductor.* | orchestra : orchestra.conductor_id , orchestra.orchestra , orchestra.orchestra_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | performance : performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql:
select _ from _ where count ( _ ) > _ group by _
natsql and SQL generation:
SELECT name FROM conductor GROUP BY name HAVING count(*) > 1
natsql:
SELECT name FROM conductor GROUP BY name HAVING count(*) > 1
SQL:
SELECT name FROM conductor GROUP BY name HAVING count(*) > 1
self correction:
SELECT conductor.Name  FROM conductor  INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID  GROUP BY conductor.Name  HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1

index is 844
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1
Show the name of the conductor that has conducted the most number of orchestras.
schema_links:
Show the name of the conductor that has conducted the most number of orchestras. | conductor : conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.year_of_work , conductor.* | orchestra : orchestra.conductor_id , orchestra.orchestra , orchestra.orchestra_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | performance : performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT name 
FROM conductor 
GROUP BY conductor_id 
ORDER BY count(orchestra_id) DESC 
LIMIT 1
natsql:
SELECT name 
FROM conductor 
GROUP BY conductor_id 
ORDER BY count(orchestra_id) DESC 
LIMIT 1
SQL:
SELECT name 
FROM conductor 
GROUP BY conductor_id 
ORDER BY count(orchestra_id) DESC 
LIMIT 1
self correction:
SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id ORDER BY COUNT(DISTINCT orchestra.orchestra_id) DESC LIMIT 1

index is 845
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1
What is the name of the conductor who has conducted the most orchestras?
schema_links:
What is the name of the conductor who has conducted the most orchestras? | conductor : conductor.name , conductor.conductor_id , conductor.age , conductor.year_of_work , conductor.nationality , conductor.* | orchestra : orchestra.conductor_id , orchestra.orchestra , orchestra.orchestra_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | performance : performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT name FROM conductor GROUP BY name ORDER BY count(orchestra_id) DESC LIMIT 1
natsql:
SELECT name FROM conductor GROUP BY name ORDER BY count(orchestra_id) DESC LIMIT 1
SQL:
SELECT name FROM conductor GROUP BY name ORDER BY count(orchestra_id) DESC LIMIT 1
self correction:
SELECT conductor.name  FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name ORDER BY COUNT(DISTINCT orchestra.orchestra_id) DESC LIMIT 1

index is 846
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008
Please show the name of the conductor that has conducted orchestras founded after 2008.
schema_links:
Please show the name of the conductor that has conducted orchestras founded after 2008. | conductor : conductor.name , conductor.conductor_id , conductor.age , conductor.year_of_work , conductor.nationality , conductor.* | orchestra : orchestra.year_of_founded , orchestra.orchestra , orchestra.conductor_id , orchestra.orchestra_id , orchestra.record_company , orchestra.* | performance : performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT conductor.name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008
natsql:
SELECT conductor.name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008
SQL:
SELECT conductor.name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008
self correction:
SELECT conductor.Name  FROM conductor  JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID  WHERE orchestra.Year_of_Founded > 2008

index is 847
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008
What are the names of conductors who have conducted orchestras founded after the year 2008?
schema_links:
What are the names of conductors who have conducted orchestras founded after the year 2008? | conductor : conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.year_of_work , conductor.* | orchestra : orchestra.year_of_founded , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.orchestra_id , orchestra.* | performance : performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT name FROM conductor WHERE conductor_id IN (SELECT conductor_id FROM orchestra WHERE year_of_founded > 2008)
natsql:
SELECT name FROM conductor WHERE conductor_id IN (SELECT conductor_id FROM orchestra WHERE year_of_founded > 2008)
SQL:
SELECT name FROM conductor WHERE conductor_id IN (SELECT conductor_id FROM orchestra WHERE year_of_founded > 2008)
self correction:
SELECT name FROM conductor WHERE conductor_id IN (     SELECT conductor_id     FROM orchestra     WHERE year_of_founded > 2008 )

index is 848
SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company
Please show the different record companies and the corresponding number of orchestras.
schema_links:
Please show the different record companies and the corresponding number of orchestras. | orchestra : orchestra.record_company , orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.year_of_founded , orchestra.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT record_company, COUNT(orchestra_id) FROM orchestra GROUP BY record_company
natsql:
SELECT record_company, COUNT(orchestra_id) FROM orchestra GROUP BY record_company
SQL:
SELECT record_company, COUNT(orchestra_id) FROM orchestra GROUP BY record_company
self correction:
SELECT record_company, COUNT(DISTINCT orchestra_id) FROM orchestra GROUP BY record_company

index is 849
SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company
How many orchestras does each record company manage?
schema_links:
How many orchestras does each record company manage? | orchestra : orchestra.record_company , orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.year_of_founded , orchestra.* | performance : performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.performance_id , performance.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT record_company, COUNT(orchestra_id) FROM orchestra GROUP BY record_company
natsql:
SELECT record_company, COUNT(orchestra_id) FROM orchestra GROUP BY record_company
SQL:
SELECT record_company, COUNT(orchestra_id) FROM orchestra GROUP BY record_company
self correction:
SELECT record_company, COUNT(Orchestra_ID)  FROM orchestra  GROUP BY record_company

index is 850
SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
Please show the record formats of orchestras in ascending order of count.
schema_links:
Please show the record formats of orchestras in ascending order of count. | orchestra : orchestra.major_record_format , orchestra.orchestra , orchestra.record_company , orchestra.orchestra_id , orchestra.conductor_id , orchestra.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql:
select _ from _ group by _ order by count ( _ ) asc
natsql and SQL generation:
SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY count(*) ASC
natsql:
SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY count(*) ASC
SQL:
SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY count(*) ASC
self correction:
SELECT major_record_format, COUNT(*) AS format_count FROM orchestra GROUP BY major_record_format ORDER BY format_count ASC

index is 851
SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
What are the major record formats of orchestras, sorted by their frequency?
schema_links:
What are the major record formats of orchestras, sorted by their frequency? | orchestra : orchestra.major_record_format , orchestra.orchestra , orchestra.orchestra_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | performance : performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.*
natsql:
select _ from _ group by _ order by count ( _ ) asc
natsql and SQL generation:
SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY COUNT(*) ASC
natsql:
SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY COUNT(*) ASC
SQL:
SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY COUNT(*) ASC
self correction:
SELECT major_record_format, COUNT(*) AS frequency FROM orchestra GROUP BY major_record_format ORDER BY frequency DESC

index is 852
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
List the record company shared by the most number of orchestras.
schema_links:
List the record company shared by the most number of orchestras. | orchestra : orchestra.record_company , orchestra.orchestra , orchestra.year_of_founded , orchestra.orchestra_id , orchestra.conductor_id , orchestra.* | performance : performance.orchestra_id , performance.type , performance.date , performance.share , performance.performance_id , performance.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT record_company 
FROM orchestra 
GROUP BY record_company 
ORDER BY COUNT(orchestra_id) DESC 
LIMIT 1
natsql:
SELECT record_company 
FROM orchestra 
GROUP BY record_company 
ORDER BY COUNT(orchestra_id) DESC 
LIMIT 1
SQL:
SELECT record_company 
FROM orchestra 
GROUP BY record_company 
ORDER BY COUNT(orchestra_id) DESC 
LIMIT 1
self correction:
SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(DISTINCT orchestra_id) DESC LIMIT 1

index is 853
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
What is the record company used by the greatest number of orchestras?
schema_links:
What is the record company used by the greatest number of orchestras? | orchestra : orchestra.record_company , orchestra.orchestra , orchestra.year_of_founded , orchestra.orchestra_id , orchestra.conductor_id , orchestra.* | performance : performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT record_company FROM orchestra GROUP BY record_company ORDER BY count(orchestra_id) DESC LIMIT 1
natsql:
SELECT record_company FROM orchestra GROUP BY record_company ORDER BY count(orchestra_id) DESC LIMIT 1
SQL:
SELECT record_company FROM orchestra GROUP BY record_company ORDER BY count(orchestra_id) DESC LIMIT 1
self correction:
SELECT record_company, COUNT(orchestra_id) AS orchestra_count FROM orchestra GROUP BY record_company ORDER BY orchestra_count DESC LIMIT 1

index is 854
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
List the names of orchestras that have no performance.
schema_links:
List the names of orchestras that have no performance. | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.year_of_founded , orchestra.record_company , orchestra.conductor_id , orchestra.* | performance : performance.orchestra_id , performance.date , performance.type , performance.share , performance.performance_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.*
natsql:
select _ from _ where @.@ not in _
natsql and SQL generation:
SELECT orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
natsql:
SELECT orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
SQL:
SELECT orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
self correction:
SELECT 

index is 855
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
What are the orchestras that do not have any performances?
schema_links:
What are the orchestras that do not have any performances? | orchestra : orchestra.orchestra , orchestra.year_of_founded , orchestra.orchestra_id , orchestra.record_company , orchestra.conductor_id , orchestra.* | performance : performance.orchestra_id , performance.date , performance.type , performance.share , performance.performance_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.*
natsql:
select _ from _ where @.@ not in _
natsql and SQL generation:
SELECT orchestra 
FROM orchestra 
WHERE Orchestra_ID NOT IN (
    SELECT Orchestra_ID 
    FROM performance
)
natsql:
SELECT orchestra 
FROM orchestra 
WHERE Orchestra_ID NOT IN (
    SELECT Orchestra_ID 
    FROM performance
)
SQL:
SELECT orchestra 
FROM orchestra 
WHERE Orchestra_ID NOT IN (
    SELECT Orchestra_ID 
    FROM performance
)
self correction:
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (     SELECT Orchestra_ID     FROM performance )

index is 856
SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003
Show the record companies shared by orchestras founded before 2003 and after 2003.
schema_links:
Show the record companies shared by orchestras founded before 2003 and after 2003. | orchestra : orchestra.record_company , orchestra.year_of_founded , orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.* | performance : performance.orchestra_id , performance.type , performance.date , performance.share , performance.performance_id , performance.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT record_company FROM orchestra WHERE year_of_founded < 2003 OR year_of_founded > 2003
natsql:
SELECT record_company FROM orchestra WHERE year_of_founded < 2003 OR year_of_founded > 2003
SQL:
SELECT record_company FROM orchestra WHERE year_of_founded < 2003 OR year_of_founded > 2003
self correction:
SELECT record_company FROM orchestra WHERE year_of_founded < 2003 OR year_of_founded > 2003

index is 857
SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003
What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?
schema_links:
What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003? | orchestra : orchestra.record_company , orchestra.year_of_founded , orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.* | performance : performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT record_company FROM orchestra
WHERE orchestra_id IN (
    SELECT orchestra_id FROM orchestra
    WHERE year_of_founded < 2003
)
AND orchestra_id IN (
    SELECT orchestra_id FROM orchestra
    WHERE year_of_founded > 2003
)
natsql:
SELECT record_company FROM orchestra
WHERE orchestra_id IN (
    SELECT orchestra_id FROM orchestra
    WHERE year_of_founded < 2003
)
AND orchestra_id IN (
    SELECT orchestra_id FROM orchestra
    WHERE year_of_founded > 2003
)
SQL:
SELECT record_company FROM orchestra
WHERE orchestra_id IN (
    SELECT orchestra_id FROM orchestra
    WHERE year_of_founded < 2003
)
AND orchestra_id IN (
    SELECT orchestra_id FROM orchestra
    WHERE year_of_founded > 2003
)
self correction:
SELECT record_company  FROM orchestra WHERE orchestra_id IN (     SELECT orchestra_id FROM orchestra     WHERE year_of_founded < 2003 ) INTERSECT SELECT orchestra_id FROM orchestra WHERE year_of_founded > 2003

index is 858
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"
Find the number of orchestras whose record format is "CD" or "DVD".
schema_links:
Find the number of orchestras whose record format is "CD" or "DVD". | orchestra : orchestra.major_record_format ( CD , DVD ) , orchestra.orchestra , orchestra.record_company , orchestra.orchestra_id , orchestra.conductor_id , orchestra.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM orchestra WHERE major_record_format = 'CD' OR major_record_format = 'DVD'
natsql:
SELECT count(*) FROM orchestra WHERE major_record_format = 'CD' OR major_record_format = 'DVD'
SQL:
SELECT count(*) FROM orchestra WHERE major_record_format = 'CD' OR major_record_format = 'DVD'
self correction:
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'

index is 859
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"
Count the number of orchestras that have CD or DVD as their record format.
schema_links:
Count the number of orchestras that have CD or DVD as their record format. | orchestra : orchestra.major_record_format ( CD , DVD ) , orchestra.orchestra , orchestra.record_company , orchestra.orchestra_id , orchestra.conductor_id , orchestra.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM orchestra WHERE major_record_format = 'CD' OR major_record_format = 'DVD'
natsql:
SELECT count(*) FROM orchestra WHERE major_record_format = 'CD' OR major_record_format = 'DVD'
SQL:
SELECT count(*) FROM orchestra WHERE major_record_format = 'CD' OR major_record_format = 'DVD'
self correction:
SELECT count(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'

index is 860
SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1
Show the years in which orchestras that have given more than one performance are founded.
schema_links:
Show the years in which orchestras that have given more than one performance are founded. | orchestra : orchestra.year_of_founded , orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.* | performance : performance.orchestra_id , performance.performance_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.* | show : show.performance_id , show.result , show.attendance , show.show_id , show.if_first_show , show.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.*
natsql:
select _ from _ where count ( _ ) > _ group by _
natsql and SQL generation:
SELECT year_of_founded FROM orchestra GROUP BY year_of_founded HAVING count(*) > 1
natsql:
SELECT year_of_founded FROM orchestra GROUP BY year_of_founded HAVING count(*) > 1
SQL:
SELECT year_of_founded FROM orchestra GROUP BY year_of_founded HAVING count(*) > 1
self correction:
SELECT year_of_founded FROM orchestra GROUP BY year_of_founded HAVING COUNT(*) > 1

index is 861
SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1
What are years of founding for orchestras that have had more than a single performance?
schema_links:
What are years of founding for orchestras that have had more than a single performance? | performance : performance.orchestra_id , performance.performance_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.* | orchestra : orchestra.year_of_founded , orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.* | show : show.performance_id , show.result , show.attendance , show.show_id , show.if_first_show , show.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.*
natsql:
select _ from _ where count ( _ ) > _ group by _
natsql and SQL generation:
SELECT year_of_founded FROM orchestra GROUP BY year_of_founded HAVING count(*) > 1
natsql:
SELECT year_of_founded FROM orchestra GROUP BY year_of_founded HAVING count(*) > 1
SQL:
SELECT year_of_founded FROM orchestra GROUP BY year_of_founded HAVING count(*) > 1
self correction:
SELECT year_of_founded  FROM orchestra  INNER JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID GROUP BY orchestra.year_of_founded HAVING COUNT(DISTINCT performance.Performance_ID) > 1

index is 862
SELECT count(*) FROM Highschooler
How many high schoolers are there?
schema_links:
How many high schoolers are there? | highschooler : highschooler.id , highschooler.grade , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT count(*) FROM highschooler
natsql:
SELECT count(*) FROM highschooler
SQL:
SELECT count(*) FROM highschooler
self correction:
SELECT count(*) FROM Highschooler

index is 863
SELECT count(*) FROM Highschooler
Count the number of high schoolers.
schema_links:
Count the number of high schoolers. | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT count(*) FROM highschooler
natsql:
SELECT count(*) FROM highschooler
SQL:
SELECT count(*) FROM highschooler
self correction:
SELECT COUNT(*) FROM Highschooler

index is 864
SELECT name ,  grade FROM Highschooler
Show the names and grades of each high schooler.
schema_links:
Show the names and grades of each high schooler. | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select _ from _
natsql and SQL generation:
SELECT name, grade FROM highschooler
natsql:
SELECT name, grade FROM highschooler
SQL:
SELECT name, grade FROM highschooler
self correction:
SELECT name, grade FROM Highschooler

index is 865
SELECT name ,  grade FROM Highschooler
What are the names and grades for each high schooler?
schema_links:
What are the names and grades for each high schooler? | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select _ from _
natsql and SQL generation:
SELECT name, grade FROM highschooler
natsql:
SELECT name, grade FROM highschooler
SQL:
SELECT name, grade FROM highschooler
self correction:
SELECT name, grade FROM Highschooler

index is 866
SELECT grade FROM Highschooler
Show all the grades of the high schoolers.
schema_links:
Show all the grades of the high schoolers. | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select _ from _
natsql and SQL generation:
SELECT * FROM highschooler
natsql:
SELECT * FROM highschooler
SQL:
SELECT * FROM highschooler
self correction:
SELECT grade FROM Highschooler

index is 867
SELECT grade FROM Highschooler
What is the grade of each high schooler?
schema_links:
What is the grade of each high schooler? | highschooler : highschooler.grade , highschooler.name , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select _ from _
natsql and SQL generation:
SELECT grade FROM highschooler
natsql:
SELECT grade FROM highschooler
SQL:
SELECT grade FROM highschooler
self correction:
SELECT grade FROM Highschooler

index is 868
SELECT grade FROM Highschooler WHERE name  =  "Kyle"
What grade is Kyle in?
schema_links:
What grade is Kyle in? | highschooler : highschooler.name ( Kyle ) , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT grade FROM Highschooler WHERE name = 'Kyle'
natsql:
SELECT grade FROM Highschooler WHERE name = 'Kyle'
SQL:
SELECT grade FROM Highschooler WHERE name = 'Kyle'
self correction:
SELECT grade FROM Highschooler WHERE name = 'Kyle'

index is 869
SELECT grade FROM Highschooler WHERE name  =  "Kyle"
Return the grade for the high schooler named Kyle.
schema_links:
Return the grade for the high schooler named Kyle. | highschooler : highschooler.name ( Kyle ) , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT grade FROM highschooler WHERE name = 'Kyle'
natsql:
SELECT grade FROM highschooler WHERE name = 'Kyle'
SQL:
SELECT grade FROM highschooler WHERE name = 'Kyle'
self correction:
SELECT grade  FROM Highschooler  WHERE name = 'Kyle'

index is 870
SELECT name FROM Highschooler WHERE grade  =  10
Show the names of all high schoolers in grade 10.
schema_links:
Show the names of all high schoolers in grade 10. | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT name FROM Highschooler WHERE grade = 10
natsql:
SELECT name FROM Highschooler WHERE grade = 10
SQL:
SELECT name FROM Highschooler WHERE grade = 10
self correction:
SELECT name FROM Highschooler WHERE grade = 10

index is 871
SELECT name FROM Highschooler WHERE grade  =  10
What are the names of all high schoolers in grade 10?
schema_links:
What are the names of all high schoolers in grade 10? | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT name FROM highschooler WHERE grade = 10
natsql:
SELECT name FROM highschooler WHERE grade = 10
SQL:
SELECT name FROM highschooler WHERE grade = 10
self correction:
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10

index is 872
SELECT ID FROM Highschooler WHERE name  =  "Kyle"
Show the ID of the high schooler named Kyle.
schema_links:
Show the ID of the high schooler named Kyle. | highschooler : highschooler.name ( Kyle ) , highschooler.id , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT ID FROM Highschooler WHERE name = 'Kyle'
natsql:
SELECT ID FROM Highschooler WHERE name = 'Kyle'
SQL:
SELECT ID FROM Highschooler WHERE name = 'Kyle'
self correction:
SELECT Highschooler.ID FROM Highschooler WHERE name = 'Kyle'

index is 873
SELECT ID FROM Highschooler WHERE name  =  "Kyle"
What is Kyle's id?
schema_links:
What is Kyle's id? | highschooler : highschooler.name ( Kyle ) , highschooler.id , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT ID FROM Highschooler WHERE name = 'Kyle'
natsql:
SELECT ID FROM Highschooler WHERE name = 'Kyle'
SQL:
SELECT ID FROM Highschooler WHERE name = 'Kyle'
self correction:
SELECT ID FROM Highschooler WHERE name = 'Kyle'

index is 874
SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10
How many high schoolers are there in grade 9 or 10?
schema_links:
How many high schoolers are there in grade 9 or 10? | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | likes : likes.student_id , likes.liked_id , likes.* | friend : friend.student_id , friend.friend_id , friend.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM Highschooler WHERE grade = 9 OR grade = 10
natsql:
SELECT count(*) FROM Highschooler WHERE grade = 9 OR grade = 10
SQL:
SELECT count(*) FROM Highschooler WHERE grade = 9 OR grade = 10
self correction:
SELECT COUNT(*) FROM Highschooler WHERE grade = 9 OR grade = 10

index is 875
SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10
Count the number of high schoolers in grades 9 or 10.
schema_links:
Count the number of high schoolers in grades 9 or 10. | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT COUNT(*) FROM Highschooler WHERE grade = 9 OR grade = 10
natsql:
SELECT COUNT(*) FROM Highschooler WHERE grade = 9 OR grade = 10
SQL:
SELECT COUNT(*) FROM Highschooler WHERE grade = 9 OR grade = 10
self correction:
SELECT COUNT(*) FROM Highschooler WHERE grade = 9 OR grade = 10

index is 876
SELECT grade ,  count(*) FROM Highschooler GROUP BY grade
Show the number of high schoolers for each grade.
schema_links:
Show the number of high schoolers for each grade. | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT grade, COUNT(*) FROM highschooler GROUP BY grade
natsql:
SELECT grade, COUNT(*) FROM highschooler GROUP BY grade
SQL:
SELECT grade, COUNT(*) FROM highschooler GROUP BY grade
self correction:
SELECT grade, COUNT(*)  FROM Highschooler  GROUP BY grade

index is 877
SELECT grade ,  count(*) FROM Highschooler GROUP BY grade
How many high schoolers are in each grade?
schema_links:
How many high schoolers are in each grade? | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade
natsql:
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade
SQL:
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade
self correction:
SELECT grade, COUNT(ID)  FROM Highschooler  GROUP BY grade

index is 878
SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
Which grade has the most high schoolers?
schema_links:
Which grade has the most high schoolers? | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT grade FROM highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
natsql:
SELECT grade FROM highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
SQL:
SELECT grade FROM highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT grade, COUNT(*) AS count FROM Highschooler GROUP BY grade ORDER BY count DESC LIMIT 1

index is 879
SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
Return the grade that has the greatest number of high schoolers.
schema_links:
Return the grade that has the greatest number of high schoolers. | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT grade FROM highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
natsql:
SELECT grade FROM highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
SQL:
SELECT grade FROM highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT grade, COUNT(*) AS count_highschoolers FROM Highschooler GROUP BY grade ORDER BY count_highschoolers DESC LIMIT 1

index is 880
SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4
Show me all grades that have at least 4 students.
schema_links:
Show me all grades that have at least 4 students. | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select _ from _ where count ( _ ) >= _ group by _
natsql and SQL generation:
SELECT grade FROM takes GROUP BY grade HAVING COUNT(*) >= 4
natsql:
SELECT grade FROM takes GROUP BY grade HAVING COUNT(*) >= 4
SQL:
SELECT grade FROM takes GROUP BY grade HAVING COUNT(*) >= 4
self correction:
SELECT Highschooler.grade  FROM Highschooler  GROUP BY grade  HAVING COUNT(*) >= 4

index is 881
SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4
Which grades have 4 or more high schoolers?
schema_links:
Which grades have 4 or more high schoolers? | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select _ from _ where count ( _ ) >= _ group by _
natsql and SQL generation:
SELECT grade FROM highschooler GROUP BY grade HAVING count(*) >= 4
natsql:
SELECT grade FROM highschooler GROUP BY grade HAVING count(*) >= 4
SQL:
SELECT grade FROM highschooler GROUP BY grade HAVING count(*) >= 4
self correction:
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4

index is 882
SELECT student_id ,  count(*) FROM Friend GROUP BY student_id
Show the student IDs and numbers of friends corresponding to each.
schema_links:
Show the student IDs and numbers of friends corresponding to each. | friend : friend.student_id , friend.friend_id , friend.* | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT student_id, COUNT(friend_id) FROM Friend GROUP BY student_id
natsql:
SELECT student_id, COUNT(friend_id) FROM Friend GROUP BY student_id
SQL:
SELECT student_id, COUNT(friend_id) FROM Friend GROUP BY student_id
self correction:
SELECT Highschooler.ID, COUNT(friend_id)  FROM Friend  JOIN Highschooler ON Friend.student_id = Highschooler.ID  GROUP BY Highschooler.ID

index is 883
SELECT student_id ,  count(*) FROM Friend GROUP BY student_id
How many friends does each student have?
schema_links:
How many friends does each student have? | friend : friend.student_id , friend.friend_id , friend.* | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT student_id, COUNT(friend_id) FROM Friend GROUP BY student_id
natsql:
SELECT student_id, COUNT(friend_id) FROM Friend GROUP BY student_id
SQL:
SELECT student_id, COUNT(friend_id) FROM Friend GROUP BY student_id
self correction:
SELECT student_id, COUNT(*) FROM Friend GROUP BY student_id

index is 884
SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
Show the names of high school students and their corresponding number of friends.
schema_links:
Show the names of high school students and their corresponding number of friends. | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT highschooler.name, count(friend.student_id)
FROM highschooler
JOIN friend ON highschooler.id = friend.student_id
GROUP BY highschooler.name
natsql:
SELECT highschooler.name, count(friend.student_id)
FROM highschooler
JOIN friend ON highschooler.id = friend.student_id
GROUP BY highschooler.name
SQL:
SELECT highschooler.name, count(friend.student_id)
FROM highschooler
JOIN friend ON highschooler.id = friend.student_id
GROUP BY highschooler.name
self correction:
SELECT highschooler.name, COUNT(friend.friend_id) AS num_friends FROM highschooler JOIN friend ON highschooler.ID = friend.student_id GROUP BY highschooler.name

index is 885
SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
What are the names of the high schoolers and how many friends does each have?
schema_links:
What are the names of the high schoolers and how many friends does each have? | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT T1.name, count(T2.student_id) FROM highschooler AS T1 LEFT JOIN friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.name
natsql:
SELECT T1.name, count(T2.student_id) FROM highschooler AS T1 LEFT JOIN friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.name
SQL:
SELECT T1.name, count(T2.student_id) FROM highschooler AS T1 LEFT JOIN friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.name
self correction:
SELECT T1.name, COUNT(T2.friend_id)  FROM Highschooler AS T1  LEFT JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.name

index is 886
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
What is the name of the high schooler who has the greatest number of friends?
schema_links:
What is the name of the high schooler who has the greatest number of friends? | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT name FROM Highschooler GROUP BY name ORDER BY count(*) DESC LIMIT 1
natsql:
SELECT name FROM Highschooler GROUP BY name ORDER BY count(*) DESC LIMIT 1
SQL:
SELECT name FROM Highschooler GROUP BY name ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name ORDER BY COUNT(Friend.friend_id) DESC LIMIT 1

index is 887
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Return the name of the high school student with the most friends.
schema_links:
Return the name of the high school student with the most friends. | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT name FROM Highschooler GROUP BY name ORDER BY count(*) DESC LIMIT 1
natsql:
SELECT name FROM Highschooler GROUP BY name ORDER BY count(*) DESC LIMIT 1
SQL:
SELECT name FROM Highschooler GROUP BY name ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID ORDER BY COUNT(*) DESC LIMIT 1

index is 888
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3
Show the names of high schoolers who have at least 3 friends.
schema_links:
Show the names of high schoolers who have at least 3 friends. | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select _ from _ where count ( _ ) >= _ group by _
natsql and SQL generation:
SELECT name FROM Highschooler GROUP BY name HAVING COUNT(*) >= 3
natsql:
SELECT name FROM Highschooler GROUP BY name HAVING COUNT(*) >= 3
SQL:
SELECT name FROM Highschooler GROUP BY name HAVING COUNT(*) >= 3
self correction:
SELECT name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name HAVING COUNT(Friend.friend_id) >= 3

index is 889
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3
What are the names of high schoolers who have 3 or more friends?
schema_links:
What are the names of high schoolers who have 3 or more friends? | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select _ from _ where count ( _ ) >= _ group by _
natsql and SQL generation:
SELECT name FROM Highschooler GROUP BY name HAVING count(*) >= 3
natsql:
SELECT name FROM Highschooler GROUP BY name HAVING count(*) >= 3
SQL:
SELECT name FROM Highschooler GROUP BY name HAVING count(*) >= 3
self correction:
SELECT name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name HAVING COUNT(Friend.friend_id) >= 3

index is 890
SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"
Show the names of all of the high schooler Kyle's friends.
schema_links:
Show the names of all of the high schooler Kyle's friends. | highschooler : highschooler.name ( Kyle ) , highschooler.id , highschooler.grade , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select _ from _ where @.@ = _ and _
natsql and SQL generation:
SELECT T2.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.name = 'Kyle'
natsql:
SELECT T2.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.name = 'Kyle'
SQL:
SELECT T2.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.name = 'Kyle'
self correction:
SELECT T2.name FROM Highschooler AS T1  JOIN Friend AS F ON T1.ID = F.student_id  JOIN Highschooler AS T2 ON F.friend_id = T2.ID  WHERE T1.name = 'Kyle'

index is 891
SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"
Return the names of friends of the high school student Kyle.
schema_links:
Return the names of friends of the high school student Kyle. | highschooler : highschooler.name ( Kyle ) , highschooler.id , highschooler.grade , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select _ from _ where @.@ = _ and _
natsql and SQL generation:
SELECT T2.name
FROM Highschooler AS T1
JOIN Friend AS T2 ON T1.ID = T2.student_id
WHERE T1.name = 'Kyle'
natsql:
SELECT T2.name
FROM Highschooler AS T1
JOIN Friend AS T2 ON T1.ID = T2.student_id
WHERE T1.name = 'Kyle'
SQL:
SELECT T2.name
FROM Highschooler AS T1
JOIN Friend AS T2 ON T1.ID = T2.student_id
WHERE T1.name = 'Kyle'
self correction:
SELECT T2.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id WHERE T1.name = 'Kyle'

index is 892
SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
How many friends does the high school student Kyle have?
schema_links:
How many friends does the high school student Kyle have? | highschooler : highschooler.name ( Kyle ) , highschooler.id , highschooler.grade , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
natsql:
SELECT count(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SQL:
SELECT count(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
self correction:
SELECT count(*)  FROM Friend  WHERE friend_id = (   SELECT ID    FROM Highschooler    WHERE name = 'Kyle' )

index is 893
SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
Count the number of friends Kyle has.
schema_links:
Count the number of friends Kyle has. | highschooler : highschooler.name ( Kyle ) , highschooler.id , highschooler.grade , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')
natsql:
SELECT count(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')
SQL:
SELECT count(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')
self correction:
SELECT count(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')

index is 894
SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend
Show ids of all students who do not have any friends.
schema_links:
Show ids of all students who do not have any friends. | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select _ from _ where except_ @.@ is _
natsql and SQL generation:
SELECT ID FROM student WHERE ID NOT IN (SELECT DISTINCT student_id FROM Friend)
natsql:
SELECT ID FROM student WHERE ID NOT IN (SELECT DISTINCT student_id FROM Friend)
SQL:
SELECT ID FROM student WHERE ID NOT IN (SELECT DISTINCT student_id FROM Friend)
self correction:
SELECT Highschooler.ID  FROM Highschooler  WHERE Highschooler.ID NOT IN (SELECT DISTINCT student_id FROM Friend)

index is 895
SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend
What are the ids of high school students who do not have friends?
schema_links:
What are the ids of high school students who do not have friends? | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select _ from _ where except_ @.@ is _
natsql and SQL generation:
SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
natsql:
SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SQL:
SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
self correction:
SELECT ID  FROM Highschooler  WHERE ID NOT IN (SELECT student_id FROM Friend)

index is 896
SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id
Show names of all high school students who do not have any friends.
schema_links:
Show names of all high school students who do not have any friends. | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select _ from _ where except_ @.@ is _
natsql and SQL generation:
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT DISTINCT student_id FROM Friend)
natsql:
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT DISTINCT student_id FROM Friend)
SQL:
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT DISTINCT student_id FROM Friend)
self correction:
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT DISTINCT student_id FROM Friend)

index is 897
SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id
What are the names of students who have no friends?
schema_links:
What are the names of students who have no friends? | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select _ from _ where except_ @.@ is _
natsql and SQL generation:
SELECT name FROM Highschooler WHERE id NOT IN (SELECT student_id FROM Friend)
natsql:
SELECT name FROM Highschooler WHERE id NOT IN (SELECT student_id FROM Friend)
SQL:
SELECT name FROM Highschooler WHERE id NOT IN (SELECT student_id FROM Friend)
self correction:
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)

index is 898
SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes
Show the ids of high schoolers who have friends and are also liked by someone else.
schema_links:
Show the ids of high schoolers who have friends and are also liked by someone else. | likes : likes.student_id , likes.liked_id , likes.* | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.*
natsql:
select _ from _ where intersect_ @.@ is _
natsql and SQL generation:
SELECT h1.ID
FROM Highschooler AS h1
WHERE EXISTS (
  SELECT *
  FROM Friend AS f1
  WHERE f1.student_id = h1.ID
) AND EXISTS (
  SELECT *
  FROM Likes AS l1
  WHERE l1.student_id = h1.ID
)
natsql:
SELECT h1.ID
FROM Highschooler AS h1
WHERE EXISTS (
  SELECT *
  FROM Friend AS f1
  WHERE f1.student_id = h1.ID
) AND EXISTS (
  SELECT *
  FROM Likes AS l1
  WHERE l1.student_id = h1.ID
)
SQL:
SELECT h1.ID
FROM Highschooler AS h1
WHERE EXISTS (
  SELECT *
  FROM Friend AS f1
  WHERE f1.student_id = h1.ID
) AND EXISTS (
  SELECT *
  FROM Likes AS l1
  WHERE l1.student_id = h1.ID
)
self correction:
SELECT h1.ID FROM Highschooler AS h1 WHERE EXISTS (   SELECT *   FROM Friend AS f1   WHERE f1.student_id = h1.ID ) AND EXISTS (   SELECT *   FROM Likes AS l1   WHERE l1.liked_id = h1.ID )

index is 899
SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes
What are the ids of students who both have friends and are liked?
schema_links:
What are the ids of students who both have friends and are liked? | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.* | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.*
natsql:
select _ from _ where intersect_ @.@ is _
natsql and SQL generation:
SELECT student_id FROM Friend WHERE student_id IN (SELECT student_id FROM Likes)
natsql:
SELECT student_id FROM Friend WHERE student_id IN (SELECT student_id FROM Likes)
SQL:
SELECT student_id FROM Friend WHERE student_id IN (SELECT student_id FROM Likes)
self correction:
SELECT Highschooler.ID FROM Friend WHERE student_id IN (SELECT student_id FROM Likes)

index is 900
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id
Show name of all students who have some friends and also are liked by someone else.
schema_links:
Show name of all students who have some friends and also are liked by someone else. | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | likes : likes.liked_id , likes.student_id , likes.* | friend : friend.friend_id , friend.student_id , friend.*
natsql:
select _ from _ where @.@ join _ and @.@ = _
natsql and SQL generation:
SELECT T1.name
FROM highschooler AS T1
JOIN friend AS T2 ON T1.id = T2.student_id
JOIN likes AS T3 ON T1.id = T3.student_id
natsql:
SELECT T1.name
FROM highschooler AS T1
JOIN friend AS T2 ON T1.id = T2.student_id
JOIN likes AS T3 ON T1.id = T3.student_id
SQL:
SELECT T1.name
FROM highschooler AS T1
JOIN friend AS T2 ON T1.id = T2.student_id
JOIN likes AS T3 ON T1.id = T3.student_id
self correction:
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id JOIN Likes AS T3 ON T1.ID = T3.liked_id

index is 901
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id
What are the names of high schoolers who both have friends and are liked?
schema_links:
What are the names of high schoolers who both have friends and are liked? | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.liked_id , likes.student_id , likes.*
natsql:
select _ from _ where @.@ join _ and @.@ = _
natsql and SQL generation:
SELECT h1.name 
FROM Highschooler AS h1, Friend AS f, Likes AS l 
WHERE h1.ID = f.student_id AND h1.ID = l.student_id
natsql:
SELECT h1.name 
FROM Highschooler AS h1, Friend AS f, Likes AS l 
WHERE h1.ID = f.student_id AND h1.ID = l.student_id
SQL:
SELECT h1.name 
FROM Highschooler AS h1, Friend AS f, Likes AS l 
WHERE h1.ID = f.student_id AND h1.ID = l.student_id
self correction:
SELECT h1.name  FROM Highschooler AS h1 JOIN Friend AS f ON h1.ID = f.student_id JOIN Likes AS l ON h1.ID = l.student_id

index is 902
SELECT student_id ,  count(*) FROM Likes GROUP BY student_id
Count the number of likes for each student id.
schema_links:
Count the number of likes for each student id. | likes : likes.student_id , likes.liked_id , likes.* | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT student_id, COUNT(*) FROM Likes GROUP BY student_id
natsql:
SELECT student_id, COUNT(*) FROM Likes GROUP BY student_id
SQL:
SELECT student_id, COUNT(*) FROM Likes GROUP BY student_id
self correction:
SELECT student_id, COUNT(*) AS like_count FROM Likes GROUP BY student_id

index is 903
SELECT student_id ,  count(*) FROM Likes GROUP BY student_id
How many likes correspond to each student id?
schema_links:
How many likes correspond to each student id? | likes : likes.student_id , likes.liked_id , likes.* | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT student_id, COUNT(*) FROM Likes GROUP BY student_id
natsql:
SELECT student_id, COUNT(*) FROM Likes GROUP BY student_id
SQL:
SELECT student_id, COUNT(*) FROM Likes GROUP BY student_id
self correction:
SELECT student_id, COUNT(*) AS like_count FROM Likes GROUP BY student_id

index is 904
SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
Show the names of high schoolers who have likes, and numbers of likes for each.
schema_links:
Show the names of high schoolers who have likes, and numbers of likes for each. | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | likes : likes.liked_id , likes.student_id , likes.* | friend : friend.student_id , friend.friend_id , friend.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT H.name, count(L.liked_id) FROM Highschooler AS H JOIN Likes AS L ON H.ID = L.student_id GROUP BY H.name
natsql:
SELECT H.name, count(L.liked_id) FROM Highschooler AS H JOIN Likes AS L ON H.ID = L.student_id GROUP BY H.name
SQL:
SELECT H.name, count(L.liked_id) FROM Highschooler AS H JOIN Likes AS L ON H.ID = L.student_id GROUP BY H.name
self correction:
SELECT H.name, COUNT(L.liked_id) FROM Highschooler AS H JOIN Likes AS L ON H.ID = L.student_id GROUP BY H.name

index is 905
SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
What are the names of high schoolers who have likes, and how many likes does each have?
schema_links:
What are the names of high schoolers who have likes, and how many likes does each have? | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | likes : likes.student_id , likes.liked_id , likes.* | friend : friend.student_id , friend.friend_id , friend.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT highschooler.name, count(likes.liked_id) FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name
natsql:
SELECT highschooler.name, count(likes.liked_id) FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name
SQL:
SELECT highschooler.name, count(likes.liked_id) FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name
self correction:
SELECT highschooler.name, count(likes.liked_id)  FROM highschooler  JOIN likes ON highschooler.ID = likes.student_id  GROUP BY highschooler.name

index is 906
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
What is the name of the high schooler who has the greatest number of likes?
schema_links:
What is the name of the high schooler who has the greatest number of likes? | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | likes : likes.student_id , likes.liked_id , likes.* | friend : friend.student_id , friend.friend_id , friend.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT name FROM Highschooler GROUP BY name ORDER BY count(*) DESC LIMIT 1
natsql:
SELECT name FROM Highschooler GROUP BY name ORDER BY count(*) DESC LIMIT 1
SQL:
SELECT name FROM Highschooler GROUP BY name ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID ORDER BY COUNT(Likes.liked_id) DESC LIMIT 1

index is 907
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Give the name of the student with the most likes.
schema_links:
Give the name of the student with the most likes. | likes : likes.student_id , likes.liked_id , likes.* | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT T2.name 
FROM highschooler AS T1 
JOIN likes AS T2 ON T1.id = T2.student_id 
GROUP BY T2.name 
ORDER BY count(*) DESC 
LIMIT 1
natsql:
SELECT T2.name 
FROM highschooler AS T1 
JOIN likes AS T2 ON T1.id = T2.student_id 
GROUP BY T2.name 
ORDER BY count(*) DESC 
LIMIT 1
SQL:
SELECT T2.name 
FROM highschooler AS T1 
JOIN likes AS T2 ON T1.id = T2.student_id 
GROUP BY T2.name 
ORDER BY count(*) DESC 
LIMIT 1
self correction:
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1

index is 908
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2
Show the names of students who have at least 2 likes.
schema_links:
Show the names of students who have at least 2 likes. | likes : likes.student_id , likes.liked_id , likes.* | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.*
natsql:
select _ from _ where count ( _ ) >= _ group by _
natsql and SQL generation:
SELECT h.name FROM highschooler AS h JOIN likes AS l ON h.id = l.student_id GROUP BY h.name HAVING count(*) >= 2
natsql:
SELECT h.name FROM highschooler AS h JOIN likes AS l ON h.id = l.student_id GROUP BY h.name HAVING count(*) >= 2
SQL:
SELECT h.name FROM highschooler AS h JOIN likes AS l ON h.id = l.student_id GROUP BY h.name HAVING count(*) >= 2
self correction:
SELECT h.name FROM Highschooler AS h JOIN Likes AS l ON h.ID = l.student_id GROUP BY h.name HAVING COUNT(*) >= 2

index is 909
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2
What are the names of students who have 2 or more likes?
schema_links:
What are the names of students who have 2 or more likes? | likes : likes.student_id , likes.liked_id , likes.* | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.*
natsql:
select _ from _ where count ( _ ) >= _ group by _
natsql and SQL generation:
SELECT name FROM Highschooler WHERE (SELECT count(*) FROM Likes WHERE student_id = Highschooler.ID) >= 2
natsql:
SELECT name FROM Highschooler WHERE (SELECT count(*) FROM Likes WHERE student_id = Highschooler.ID) >= 2
SQL:
SELECT name FROM Highschooler WHERE (SELECT count(*) FROM Likes WHERE student_id = Highschooler.ID) >= 2
self correction:
SELECT Highschooler.name FROM Highschooler  JOIN Likes ON Highschooler.ID = Likes.student_id  GROUP BY Highschooler.ID  HAVING COUNT(Likes.liked_id) >= 2

index is 910
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2
Show the names of students who have a grade higher than 5 and have at least 2 friends.
schema_links:
Show the names of students who have a grade higher than 5 and have at least 2 friends. | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select _ from _ where _ and count ( _ ) >= _ group by _
natsql and SQL generation:
SELECT h.name
FROM highschooler h
JOIN friend f ON h.id = f.student_id
WHERE h.grade > 5
GROUP BY h.id
HAVING count(f.friend_id) >= 2
natsql:
SELECT h.name
FROM highschooler h
JOIN friend f ON h.id = f.student_id
WHERE h.grade > 5
GROUP BY h.id
HAVING count(f.friend_id) >= 2
SQL:
SELECT h.name
FROM highschooler h
JOIN friend f ON h.id = f.student_id
WHERE h.grade > 5
GROUP BY h.id
HAVING count(f.friend_id) >= 2
self correction:
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id WHERE h.grade > 5 GROUP BY h.name HAVING count(f.friend_id) >= 2

index is 911
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2
What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?
schema_links:
What are the names of high schoolers who have a grade of over 5 and have 2 or more friends? | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select _ from _ where _ and count ( _ ) >= _ group by _
natsql and SQL generation:
SELECT name FROM Highschooler WHERE grade > 5 AND id IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) >= 2)
natsql:
SELECT name FROM Highschooler WHERE grade > 5 AND id IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) >= 2)
SQL:
SELECT name FROM Highschooler WHERE grade > 5 AND id IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) >= 2)
self correction:
SELECT name FROM Highschooler WHERE grade > 5 AND ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) >= 2)

index is 912
SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
How many likes does Kyle have?
schema_links:
How many likes does Kyle have? | highschooler : highschooler.name ( Kyle ) , highschooler.id , highschooler.grade , highschooler.* | likes : likes.liked_id , likes.student_id , likes.* | friend : friend.student_id , friend.friend_id , friend.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:
SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
natsql:
SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SQL:
SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
self correction:
SELECT COUNT(*) AS like_count FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')

index is 913
SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
Return the number of likes that the high schooler named Kyle has.
schema_links:
Return the number of likes that the high schooler named Kyle has. | highschooler : highschooler.name ( Kyle ) , highschooler.id , highschooler.grade , highschooler.* | likes : likes.liked_id , likes.student_id , likes.* | friend : friend.student_id , friend.friend_id , friend.*
natsql:
select count ( _ ) from _ where _
natsql and SQL generation:

natsql:

SQL:

self correction:
SELECT COUNT(*) AS num_likes FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID WHERE Highschooler.name = 'Kyle';

index is 914
SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
Find the average grade of all students who have some friends.
schema_links:
Find the average grade of all students who have some friends. | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select avg ( _ ) from _ where @.@ in _ and @.@ join _
natsql and SQL generation:
SELECT AVG(grade) FROM takes WHERE ID IN (SELECT DISTINCT student_id FROM Friend) AND ID IN (SELECT DISTINCT student_id FROM Likes)
natsql:
SELECT AVG(grade) FROM takes WHERE ID IN (SELECT DISTINCT student_id FROM Friend) AND ID IN (SELECT DISTINCT student_id FROM Likes)
SQL:
SELECT AVG(grade) FROM takes WHERE ID IN (SELECT DISTINCT student_id FROM Friend) AND ID IN (SELECT DISTINCT student_id FROM Likes)
self correction:
SELECT AVG(grade) FROM Highschooler WHERE ID IN (   SELECT DISTINCT student_id   FROM Friend ) AND ID IN (   SELECT DISTINCT student_id   FROM Likes )

index is 915
SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
What is the average grade of students who have friends?
schema_links:
What is the average grade of students who have friends? | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select avg ( _ ) from _ where @.@ in _ and @.@ join _
natsql and SQL generation:
SELECT AVG(grade) FROM takes WHERE ID IN (SELECT student_id FROM Friend) AND ID = friend_id
natsql:
SELECT AVG(grade) FROM takes WHERE ID IN (SELECT student_id FROM Friend) AND ID = friend_id
SQL:
SELECT AVG(grade) FROM takes WHERE ID IN (SELECT student_id FROM Friend) AND ID = friend_id
self correction:
SELECT AVG(grade)  FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend) GROUP BY ID

index is 916
SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
Find the minimum grade of students who have no friends.
schema_links:
Find the minimum grade of students who have no friends. | highschooler : highschooler.grade , highschooler.name , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select min ( _ ) from _ where @.@ not in _ and @.@ join _
natsql and SQL generation:
SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT DISTINCT student_id FROM friend)
natsql:
SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT DISTINCT student_id FROM friend)
SQL:
SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT DISTINCT student_id FROM friend)
self correction:
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT DISTINCT student_id FROM Friend)

index is 917
SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
What is the lowest grade of students who do not have any friends?
schema_links:
What is the lowest grade of students who do not have any friends? | highschooler : highschooler.grade , highschooler.name , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql:
select min ( _ ) from _ where @.@ not in _ and @.@ join _
natsql and SQL generation:
SELECT min(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)
natsql:
SELECT min(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)
SQL:
SELECT min(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)
self correction:
SELECT min(grade)  FROM Highschooler  WHERE ID NOT IN (   SELECT student_id    FROM Friend    UNION    SELECT friend_id    FROM Friend )

index is 918
SELECT state FROM Owners INTERSECT SELECT state FROM Professionals
Which states have both owners and professionals living there?
schema_links:
Which states have both owners and professionals living there? | professionals : professionals.state , professionals.professional_id , professionals.role_code , professionals.street , professionals.city , professionals.* | owners : owners.state , owners.owner_id , owners.first_name , owners.email_address , owners.last_name , owners.* | dogs : dogs.owner_id , dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.* | breeds : breeds.breed_code , breeds.breed_name , breeds.*
natsql:
select _ from _ where intersect_ @.@ is _
natsql and SQL generation:
SELECT state FROM owners WHERE state IN (SELECT state FROM professionals)
natsql:
SELECT state FROM owners WHERE state IN (SELECT state FROM professionals)
SQL:
SELECT state FROM owners WHERE state IN (SELECT state FROM professionals)
self correction:
SELECT state  FROM Owners  WHERE state IN (SELECT DISTINCT state FROM Professionals)

index is 919
SELECT state FROM Owners INTERSECT SELECT state FROM Professionals
Find the states where both owners and professionals live.
schema_links:
Find the states where both owners and professionals live. | professionals : professionals.state , professionals.professional_id , professionals.role_code , professionals.street , professionals.city , professionals.* | owners : owners.state , owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | breeds : breeds.breed_code , breeds.breed_name , breeds.*
natsql:
select _ from _ where intersect_ @.@ is _
natsql and SQL generation:
SELECT state FROM professionals WHERE state IN (SELECT state FROM owners)
natsql:
SELECT state FROM professionals WHERE state IN (SELECT state FROM owners)
SQL:
SELECT state FROM professionals WHERE state IN (SELECT state FROM owners)
self correction:
SELECT state  FROM professionals  WHERE state IN (SELECT DISTINCT state FROM owners)

index is 920
SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )
What is the average age of the dogs who have gone through any treatments?
schema_links:
What is the average age of the dogs who have gone through any treatments? | dogs : dogs.age , dogs.dog_id , dogs.name , dogs.owner_id , dogs.breed_code , dogs.* | treatments : treatments.dog_id , treatments.date_of_treatment , treatments.treatment_id , treatments.professional_id , treatments.treatment_type_code , treatments.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | owners : owners.street , owners.city , owners.state , owners.cell_number , owners.owner_id , owners.*
natsql:
select avg ( _ ) from _ where @.@ in _
natsql and SQL generation:
SELECT AVG(age) FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)
natsql:
SELECT AVG(age) FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)
SQL:
SELECT AVG(age) FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)
self correction:
SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)

index is 921
SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )
Find the average age of the dogs who went through treatments.
schema_links:
Find the average age of the dogs who went through treatments. | dogs : dogs.age , dogs.dog_id , dogs.name , dogs.breed_code , dogs.owner_id , dogs.* | treatments : treatments.dog_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.treatment_id , treatments.professional_id , treatments.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description , treatment_types.*
natsql:
select avg ( _ ) from _ where @.@ in _
natsql and SQL generation:
SELECT AVG(age) FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)
natsql:
SELECT AVG(age) FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)
SQL:
SELECT AVG(age) FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)
self correction:
SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)

index is 922
SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.
schema_links:
Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone. | professionals : professionals.state ( Indiana ) , professionals.last_name , professionals.cell_number , professionals.professional_id , professionals.home_phone , professionals.* | treatments : treatments.professional_id , treatments.treatment_id , treatments.treatment_type_code , treatments.dog_id , treatments.date_of_treatment , treatments.* | owners : owners.state ( Indiana ) , owners.street , owners.city , owners.cell_number , owners.owner_id , owners.* | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description , treatment_types.*
natsql:
select _ from _ where _ or count ( _ ) > _
natsql and SQL generation:
SELECT professional_id, last_name, cell_number
FROM professionals
WHERE state = 'Indiana' OR professional_id IN (
    SELECT professional_id
    FROM treatments
    GROUP BY professional_id
    HAVING count(*) > 2
)
natsql:
SELECT professional_id, last_name, cell_number
FROM professionals
WHERE state = 'Indiana' OR professional_id IN (
    SELECT professional_id
    FROM treatments
    GROUP BY professional_id
    HAVING count(*) > 2
)
SQL:
SELECT professional_id, last_name, cell_number
FROM professionals
WHERE state = 'Indiana' OR professional_id IN (
    SELECT professional_id
    FROM treatments
    GROUP BY professional_id
    HAVING count(*) > 2
)
self correction:
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (     SELECT professional_id     FROM Treatments     GROUP BY professional_id     HAVING count(*) > 2 )

index is 923
SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.
schema_links:
Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments. | professionals : professionals.state ( Indiana ) , professionals.professional_id , professionals.last_name , professionals.cell_number , professionals.home_phone , professionals.* | treatments : treatments.professional_id , treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.* | owners : owners.state ( Indiana ) , owners.first_name , owners.last_name , owners.street , owners.city , owners.* | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description , treatment_types.*
natsql:
select _ from _ where _ or count ( _ ) > _
natsql and SQL generation:
SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) > 2)
natsql:
SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) > 2)
SQL:
SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) > 2)
self correction:
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) > 2 )

index is 924
select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )
Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .
schema_links:
Which dogs have not cost their owner more than 1000 for treatment ? List the dog names . | dogs : dogs.name , dogs.owner_id , dogs.dog_id , dogs.breed_code , dogs.date_adopted , dogs.* | treatments : treatments.cost_of_treatment , treatments.treatment_type_code , treatments.treatment_id , treatments.dog_id , treatments.date_of_treatment , treatments.* | owners : owners.owner_id , owners.first_name , owners.street , owners.city , owners.state , owners.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*
natsql:
select _ from _ where @.@ not in _ and sum ( _ ) > _
natsql and SQL generation:
SELECT name FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments WHERE cost_of_treatment > 1000)
natsql:
SELECT name FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments WHERE cost_of_treatment > 1000)
SQL:
SELECT name FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments WHERE cost_of_treatment > 1000)
self correction:
SELECT name FROM Dogs WHERE dog_id NOT IN (     SELECT dog_id     FROM Treatments     WHERE cost_of_treatment > 1000 )

index is 925
select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )
What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?
schema_links:
What are the names of the dogs for which the owner has not spend more than 1000 for treatment ? | dogs : dogs.name , dogs.owner_id , dogs.dog_id , dogs.breed_code , dogs.age , dogs.* | treatments : treatments.cost_of_treatment , treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.* | owners : owners.owner_id , owners.first_name , owners.street , owners.city , owners.state , owners.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*
natsql:
select _ from _ where @.@ not in _ and sum ( _ ) > _
natsql and SQL generation:
SELECT name FROM dogs WHERE owner_id NOT IN (SELECT owner_id FROM treatments WHERE cost_of_treatment > 1000)
natsql:
SELECT name FROM dogs WHERE owner_id NOT IN (SELECT owner_id FROM treatments WHERE cost_of_treatment > 1000)
SQL:
SELECT name FROM dogs WHERE owner_id NOT IN (SELECT owner_id FROM treatments WHERE cost_of_treatment > 1000)
self correction:
SELECT name FROM Dogs WHERE owner_id NOT IN (SELECT owner_id FROM Treatments WHERE cost_of_treatment > 1000)

index is 926
SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs
Which first names are used for professionals or owners but are not used as dog names?
schema_links:
Which first names are used for professionals or owners but are not used as dog names? | professionals : professionals.first_name , professionals.professional_id , professionals.role_code , professionals.last_name , professionals.home_phone , professionals.* | dogs : dogs.name , dogs.dog_id , dogs.owner_id , dogs.age , dogs.gender , dogs.* | owners : owners.first_name , owners.owner_id , owners.email_address , owners.home_phone , owners.cell_number , owners.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*
natsql:
select _ from _ where except_ @.@ is _
natsql and SQL generation:
SELECT professionals.first_name FROM professionals
WHERE professionals.first_name NOT IN (SELECT dogs.name FROM dogs)
AND professionals.first_name NOT IN (SELECT owners.first_name FROM owners)
natsql:
SELECT professionals.first_name FROM professionals
WHERE professionals.first_name NOT IN (SELECT dogs.name FROM dogs)
AND professionals.first_name NOT IN (SELECT owners.first_name FROM owners)
SQL:
SELECT professionals.first_name FROM professionals
WHERE professionals.first_name NOT IN (SELECT dogs.name FROM dogs)
AND professionals.first_name NOT IN (SELECT owners.first_name FROM owners)
self correction:
SELECT owners.first_name FROM owners LEFT JOIN dogs ON owners.first_name = dogs.name WHERE dogs.name IS NULL AND owners.first_name NOT IN (   SELECT professionals.first_name   FROM professionals )

index is 927
SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs
Find the first names that are used for professionals or owners but are not used as dog names.
schema_links:
Find the first names that are used for professionals or owners but are not used as dog names. | professionals : professionals.first_name , professionals.professional_id , professionals.role_code , professionals.street , professionals.city , professionals.* | dogs : dogs.name , dogs.dog_id , dogs.owner_id , dogs.age , dogs.gender , dogs.* | owners : owners.first_name , owners.owner_id , owners.last_name , owners.street , owners.city , owners.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*
natsql:
select _ from _ where except_ @.@ is _
natsql and SQL generation:
SELECT DISTINCT professionals.first_name
FROM professionals
LEFT JOIN dogs ON professionals.first_name = dogs.name
LEFT JOIN owners ON professionals.first_name = owners.first_name
WHERE dogs.name IS NULL AND owners.first_name IS NOT NULL
natsql:
SELECT DISTINCT professionals.first_name
FROM professionals
LEFT JOIN dogs ON professionals.first_name = dogs.name
LEFT JOIN owners ON professionals.first_name = owners.first_name
WHERE dogs.name IS NULL AND owners.first_name IS NOT NULL
SQL:
SELECT DISTINCT professionals.first_name
FROM professionals
LEFT JOIN dogs ON professionals.first_name = dogs.name
LEFT JOIN owners ON professionals.first_name = owners.first_name
WHERE dogs.name IS NULL AND owners.first_name IS NOT NULL
self correction:
SELECT DISTINCT professionals.first_name FROM professionals LEFT JOIN dogs ON professionals.first_name = dogs.name LEFT JOIN owners ON professionals.first_name = owners.first_name WHERE dogs.name IS NULL AND owners.first_name IS NOT NULL AND professionals.first_name NOT IN (SELECT name FROM dogs)

index is 928
SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
Which professional did not operate any treatment on dogs? List the professional's id, role and email.
schema_links:
Which professional did not operate any treatment on dogs? List the professional's id, role and email. | professionals : professionals.professional_id , professionals.email_address , professionals.role_code , professionals.first_name , professionals.street , professionals.* | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.email_address , owners.owner_id , owners.*
natsql:
select _ from _ where except_ @.@ is _
natsql and SQL generation:
SELECT professional_id, role_code, email_address FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments)
natsql:
SELECT professional_id, role_code, email_address FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments)
SQL:
SELECT professional_id, role_code, email_address FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments)
self correction:
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)

index is 929
SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
Give me the id, role and email of the professionals who did not perform any treatment on dogs.
schema_links:
Give me the id, role and email of the professionals who did not perform any treatment on dogs. | professionals : professionals.professional_id , professionals.email_address , professionals.role_code , professionals.street , professionals.city , professionals.* | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.cost_of_treatment , treatments.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.email_address , owners.owner_id , owners.*
natsql:
select _ from _ where except_ @.@ is _
natsql and SQL generation:
SELECT professional_id, role_code, email_address
FROM professionals
WHERE professional_id NOT IN (SELECT professional_id FROM treatments)
natsql:
SELECT professional_id, role_code, email_address
FROM professionals
WHERE professional_id NOT IN (SELECT professional_id FROM treatments)
SQL:
SELECT professional_id, role_code, email_address
FROM professionals
WHERE professional_id NOT IN (SELECT professional_id FROM treatments)
self correction:
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)

index is 930
SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
Which owner owns the most dogs? List the owner id, first name and last name.
schema_links:
Which owner owns the most dogs? List the owner id, first name and last name. | owners : owners.first_name , owners.last_name , owners.owner_id , owners.email_address , owners.home_phone , owners.* | dogs : dogs.owner_id , dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.* | breeds : breeds.breed_code , breeds.breed_name , breeds.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT owner_id, first_name, last_name FROM owners GROUP BY owner_id, first_name, last_name ORDER BY count(*) DESC LIMIT 1
natsql:
SELECT owner_id, first_name, last_name FROM owners GROUP BY owner_id, first_name, last_name ORDER BY count(*) DESC LIMIT 1
SQL:
SELECT owner_id, first_name, last_name FROM owners GROUP BY owner_id, first_name, last_name ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT owner_id, first_name, last_name FROM Owners GROUP BY owner_id, first_name, last_name ORDER BY COUNT(*) DESC LIMIT 1

index is 931
SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
Return the owner id, first name and last name of the owner who has the most dogs.
schema_links:
Return the owner id, first name and last name of the owner who has the most dogs. | owners : owners.first_name , owners.last_name , owners.owner_id , owners.email_address , owners.home_phone , owners.* | dogs : dogs.owner_id , dogs.dog_id , dogs.name , dogs.age , dogs.gender , dogs.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT owner_id, first_name, last_name FROM owners GROUP BY owner_id, first_name, last_name ORDER BY count(*) DESC LIMIT 1
natsql:
SELECT owner_id, first_name, last_name FROM owners GROUP BY owner_id, first_name, last_name ORDER BY count(*) DESC LIMIT 1
SQL:
SELECT owner_id, first_name, last_name FROM owners GROUP BY owner_id, first_name, last_name ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT owners.owner_id, owners.first_name, owners.last_name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  GROUP BY owners.owner_id, owners.first_name, owners.last_name  ORDER BY COUNT(dogs.dog_id) DESC  LIMIT 1

index is 932
SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
Which professionals have done at least two treatments? List the professional's id, role, and first name.
schema_links:
Which professionals have done at least two treatments? List the professional's id, role, and first name. | professionals : professionals.professional_id , professionals.first_name , professionals.role_code , professionals.street , professionals.city , professionals.* | treatments : treatments.professional_id , treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.* | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description , treatment_types.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*
natsql:
select _ from _ where count ( _ ) >= _ group by _
natsql and SQL generation:
SELECT professional_id, role_code, first_name FROM professionals GROUP BY professional_id, role_code, first_name HAVING count(*) >= 2
natsql:
SELECT professional_id, role_code, first_name FROM professionals GROUP BY professional_id, role_code, first_name HAVING count(*) >= 2
SQL:
SELECT professional_id, role_code, first_name FROM professionals GROUP BY professional_id, role_code, first_name HAVING count(*) >= 2
self correction:
SELECT professional_id, role_code, first_name  FROM Professionals  GROUP BY professional_id, role_code, first_name  HAVING COUNT(*) >= 2

index is 933
SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
What are the id, role, and first name of the professionals who have performed two or more treatments?
schema_links:
What are the id, role, and first name of the professionals who have performed two or more treatments? | professionals : professionals.professional_id , professionals.first_name , professionals.role_code , professionals.street , professionals.city , professionals.* | treatments : treatments.professional_id , treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.* | owners : owners.first_name , owners.street , owners.city , owners.state , owners.owner_id , owners.* | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description , treatment_types.*
natsql:
select _ from _ where count ( _ ) >= _ group by _
natsql and SQL generation:
SELECT professional_id, role_code, first_name 
FROM professionals 
WHERE professional_id IN (SELECT professional_id 
                          FROM treatments 
                          GROUP BY professional_id 
                          HAVING COUNT(*) >= 2)
natsql:
SELECT professional_id, role_code, first_name 
FROM professionals 
WHERE professional_id IN (SELECT professional_id 
                          FROM treatments 
                          GROUP BY professional_id 
                          HAVING COUNT(*) >= 2)
SQL:
SELECT professional_id, role_code, first_name 
FROM professionals 
WHERE professional_id IN (SELECT professional_id 
                          FROM treatments 
                          GROUP BY professional_id 
                          HAVING COUNT(*) >= 2)
self correction:
SELECT professional_id, role_code, first_name  FROM Professionals  WHERE professional_id IN (SELECT professional_id                            FROM Treatments                            GROUP BY professional_id                            HAVING COUNT(*) >= 2)

index is 934
SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1
What is the name of the breed with the most dogs?
schema_links:
What is the name of the breed with the most dogs? | breeds : breeds.breed_name , breeds.breed_code , breeds.* | dogs : dogs.breed_code , dogs.owner_id , dogs.name , dogs.dog_id , dogs.size_code , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT breed_name FROM breeds GROUP BY breed_name ORDER BY count(*) DESC LIMIT 1
natsql:
SELECT breed_name FROM breeds GROUP BY breed_name ORDER BY count(*) DESC LIMIT 1
SQL:
SELECT breed_name FROM breeds GROUP BY breed_name ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT breed_name FROM breeds JOIN dogs ON breeds.breed_code = dogs.breed_code GROUP BY breeds.breed_name ORDER BY COUNT(*) DESC LIMIT 1

index is 935
SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1
Which breed do the most dogs have? Give me the breed name.
schema_links:
Which breed do the most dogs have? Give me the breed name. | breeds : breeds.breed_name , breeds.breed_code , breeds.* | dogs : dogs.breed_code , dogs.owner_id , dogs.dog_id , dogs.name , dogs.age , dogs.* | owners : owners.street , owners.city , owners.state , owners.cell_number , owners.owner_id , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT breed_name FROM Breeds GROUP BY breed_name ORDER BY count(*) DESC LIMIT 1
natsql:
SELECT breed_name FROM Breeds GROUP BY breed_name ORDER BY count(*) DESC LIMIT 1
SQL:
SELECT breed_name FROM Breeds GROUP BY breed_name ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT breed_name  FROM Breeds  GROUP BY breed_name  ORDER BY COUNT(*) DESC  LIMIT 1

index is 936
SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.
schema_links:
Which owner has paid for the most treatments on his or her dogs? List the owner id and last name. | owners : owners.owner_id , owners.last_name , owners.first_name , owners.email_address , owners.cell_number , owners.* | treatments : treatments.cost_of_treatment , treatments.dog_id , treatments.treatment_id , treatments.professional_id , treatments.treatment_type_code , treatments.* | dogs : dogs.owner_id , dogs.name , dogs.dog_id , dogs.breed_code , dogs.age , dogs.* | treatment_types : treatment_types.treatment_type_description , treatment_types.treatment_type_code , treatment_types.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT T1.owner_id, T1.last_name
FROM owners AS T1
JOIN dogs AS T2 ON T1.owner_id = T2.owner_id
JOIN treatments AS T3 ON T2.dog_id = T3.dog_id
GROUP BY T1.owner_id, T1.last_name
ORDER BY count(*) DESC
LIMIT 1
natsql:
SELECT T1.owner_id, T1.last_name
FROM owners AS T1
JOIN dogs AS T2 ON T1.owner_id = T2.owner_id
JOIN treatments AS T3 ON T2.dog_id = T3.dog_id
GROUP BY T1.owner_id, T1.last_name
ORDER BY count(*) DESC
LIMIT 1
SQL:
SELECT T1.owner_id, T1.last_name
FROM owners AS T1
JOIN dogs AS T2 ON T1.owner_id = T2.owner_id
JOIN treatments AS T3 ON T2.dog_id = T3.dog_id
GROUP BY T1.owner_id, T1.last_name
ORDER BY count(*) DESC
LIMIT 1
self correction:
SELECT T1.owner_id, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id, T1.last_name ORDER BY COUNT(*) DESC LIMIT 1

index is 937
SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.
schema_links:
Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs. | owners : owners.last_name , owners.owner_id , owners.first_name , owners.email_address , owners.home_phone , owners.* | treatments : treatments.cost_of_treatment , treatments.dog_id , treatments.treatment_id , treatments.professional_id , treatments.treatment_type_code , treatments.* | dogs : dogs.owner_id , dogs.dog_id , dogs.name , dogs.breed_code , dogs.age , dogs.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT T1.owner_id, T1.last_name
FROM owners AS T1
JOIN dogs AS T2 ON T1.owner_id = T2.owner_id
JOIN treatments AS T3 ON T2.dog_id = T3.dog_id
GROUP BY T1.owner_id, T1.last_name
ORDER BY SUM(T3.cost_of_treatment) DESC
LIMIT 1
natsql:
SELECT T1.owner_id, T1.last_name
FROM owners AS T1
JOIN dogs AS T2 ON T1.owner_id = T2.owner_id
JOIN treatments AS T3 ON T2.dog_id = T3.dog_id
GROUP BY T1.owner_id, T1.last_name
ORDER BY SUM(T3.cost_of_treatment) DESC
LIMIT 1
SQL:
SELECT T1.owner_id, T1.last_name
FROM owners AS T1
JOIN dogs AS T2 ON T1.owner_id = T2.owner_id
JOIN treatments AS T3 ON T2.dog_id = T3.dog_id
GROUP BY T1.owner_id, T1.last_name
ORDER BY SUM(T3.cost_of_treatment) DESC
LIMIT 1
self correction:
SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.last_name ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1

index is 938
SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1
What is the description of the treatment type that costs the least money in total?
schema_links:
What is the description of the treatment type that costs the least money in total? | treatments : treatments.cost_of_treatment , treatments.treatment_type_code , treatments.date_of_treatment , treatments.treatment_id , treatments.dog_id , treatments.* | treatment_types : treatment_types.treatment_type_description , treatment_types.treatment_type_code , treatment_types.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*
natsql:
select _ from _ group by _ order by sum ( _ ) asc limit _
natsql and SQL generation:
SELECT treatment_type_description 
FROM treatment_types 
JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code 
GROUP BY treatment_types.treatment_type_description 
ORDER BY sum(cost_of_treatment) ASC 
LIMIT 1
natsql:
SELECT treatment_type_description 
FROM treatment_types 
JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code 
GROUP BY treatment_types.treatment_type_description 
ORDER BY sum(cost_of_treatment) ASC 
LIMIT 1
SQL:
SELECT treatment_type_description 
FROM treatment_types 
JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code 
GROUP BY treatment_types.treatment_type_description 
ORDER BY sum(cost_of_treatment) ASC 
LIMIT 1
self correction:
SELECT Treatment_Types.treatment_type_description  FROM Treatment_Types  JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code  GROUP BY Treatment_Types.treatment_type_description  ORDER BY SUM(Treatments.cost_of_treatment) ASC  LIMIT 1

index is 939
SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1
Give me the description of the treatment type whose total cost is the lowest.
schema_links:
Give me the description of the treatment type whose total cost is the lowest. | treatments : treatments.cost_of_treatment , treatments.treatment_type_code , treatments.treatment_id , treatments.date_of_treatment , treatments.dog_id , treatments.* | treatment_types : treatment_types.treatment_type_description , treatment_types.treatment_type_code , treatment_types.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*
natsql:
select _ from _ group by _ order by sum ( _ ) asc limit _
natsql and SQL generation:
SELECT treatment_type_description FROM treatment_types GROUP BY treatment_type_description ORDER BY sum(cost_of_treatment) ASC LIMIT 1
natsql:
SELECT treatment_type_description FROM treatment_types GROUP BY treatment_type_description ORDER BY sum(cost_of_treatment) ASC LIMIT 1
SQL:
SELECT treatment_type_description FROM treatment_types GROUP BY treatment_type_description ORDER BY sum(cost_of_treatment) ASC LIMIT 1
self correction:
SELECT Treatment_Types.treatment_type_description  FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code GROUP BY Treatments.treatment_type_code, Treatment_Types.treatment_type_description ORDER BY sum(Treatments.cost_of_treatment) ASC LIMIT 1

index is 940
SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1
Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.
schema_links:
Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code. | dogs : dogs.owner_id , dogs.date_adopted , dogs.name , dogs.dog_id , dogs.weight , dogs.* | charges : charges.charge_amount , charges.charge_type , charges.charge_id , charges.* | owners : owners.zip_code , owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*
natsql:
select _ from _ group by _ order by sum ( _ ) desc limit _
natsql and SQL generation:
SELECT owner_id, zip_code
FROM owners
JOIN dogs ON owners.owner_id = dogs.owner_id
JOIN treatments ON dogs.dog_id = treatments.dog_id
JOIN charges ON treatments.charge_id = charges.charge_id
GROUP BY owners.owner_id, owners.zip_code
ORDER BY SUM(charges.charge_amount) DESC
LIMIT 1
natsql:
SELECT owner_id, zip_code
FROM owners
JOIN dogs ON owners.owner_id = dogs.owner_id
JOIN treatments ON dogs.dog_id = treatments.dog_id
JOIN charges ON treatments.charge_id = charges.charge_id
GROUP BY owners.owner_id, owners.zip_code
ORDER BY SUM(charges.charge_amount) DESC
LIMIT 1
SQL:
SELECT owner_id, zip_code
FROM owners
JOIN dogs ON owners.owner_id = dogs.owner_id
JOIN treatments ON dogs.dog_id = treatments.dog_id
JOIN charges ON treatments.charge_id = charges.charge_id
GROUP BY owners.owner_id, owners.zip_code
ORDER BY SUM(charges.charge_amount) DESC
LIMIT 1
self correction:
SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id JOIN charges ON treatments.charge_id = charges.charge_id GROUP BY owners.owner_id, owners.zip_code ORDER BY SUM(charges.charge_amount) DESC LIMIT 1

index is 941
SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1
Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.
schema_links:
Find the owner id and zip code of the owner who spent the most money in total for his or her dogs. | dogs : dogs.owner_id , dogs.date_adopted , dogs.name , dogs.dog_id , dogs.breed_code , dogs.* | owners : owners.zip_code , owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.* | treatments : treatments.cost_of_treatment , treatments.dog_id , treatments.treatment_id , treatments.professional_id , treatments.treatment_type_code , treatments.* | charges : charges.charge_amount , charges.charge_type , charges.charge_id , charges.*
natsql:
select _ from _ group by _ order by sum ( _ ) desc limit _
natsql and SQL generation:
SELECT owner_id, zip_code FROM owners 
WHERE owner_id IN (SELECT owner_id FROM dogs GROUP BY owner_id 
                   ORDER BY SUM(cost_of_treatment) DESC LIMIT 1)
natsql:
SELECT owner_id, zip_code FROM owners 
WHERE owner_id IN (SELECT owner_id FROM dogs GROUP BY owner_id 
                   ORDER BY SUM(cost_of_treatment) DESC LIMIT 1)
SQL:
SELECT owner_id, zip_code FROM owners 
WHERE owner_id IN (SELECT owner_id FROM dogs GROUP BY owner_id 
                   ORDER BY SUM(cost_of_treatment) DESC LIMIT 1)
self correction:
SELECT owners.owner_id, owners.zip_code FROM owners INNER JOIN dogs ON owners.owner_id = dogs.owner_id INNER JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.zip_code ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1

index is 942
SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
Which professionals have done at least two types of treatments? List the professional id and cell phone.
schema_links:
Which professionals have done at least two types of treatments? List the professional id and cell phone. | professionals : professionals.professional_id , professionals.cell_number , professionals.home_phone , professionals.role_code , professionals.first_name , professionals.* | treatments : treatments.professional_id , treatments.treatment_type_code , treatments.treatment_id , treatments.dog_id , treatments.date_of_treatment , treatments.* | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description , treatment_types.* | owners : owners.street , owners.city , owners.state , owners.cell_number , owners.owner_id , owners.*
natsql:
select _ from _ where count ( _ ) >= _ group by _
natsql and SQL generation:
SELECT professional_id, cell_number FROM professionals GROUP BY professional_id, cell_number HAVING count(DISTINCT treatment_type_code) >= 2
natsql:
SELECT professional_id, cell_number FROM professionals GROUP BY professional_id, cell_number HAVING count(DISTINCT treatment_type_code) >= 2
SQL:
SELECT professional_id, cell_number FROM professionals GROUP BY professional_id, cell_number HAVING count(DISTINCT treatment_type_code) >= 2
self correction:
SELECT professional_id, cell_number  FROM Professionals  GROUP BY professional_id, cell_number  HAVING COUNT(DISTINCT treatment_type_code) >= 2

index is 943
SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
Find the id and cell phone of the professionals who operate two or more types of treatments.
schema_links:
Find the id and cell phone of the professionals who operate two or more types of treatments. | professionals : professionals.professional_id , professionals.cell_number , professionals.home_phone , professionals.role_code , professionals.first_name , professionals.* | treatments : treatments.professional_id , treatments.treatment_type_code , treatments.treatment_id , treatments.dog_id , treatments.date_of_treatment , treatments.* | treatment_types : treatment_types.treatment_type_description , treatment_types.treatment_type_code , treatment_types.* | owners : owners.street , owners.city , owners.state , owners.home_phone , owners.cell_number , owners.*
natsql:
select _ from _ where count ( _ ) >= _ group by _
natsql and SQL generation:
SELECT professional_id, cell_number 
FROM Professionals 
WHERE professional_id IN (
    SELECT professional_id 
    FROM Treatments 
    GROUP BY professional_id 
    HAVING COUNT(DISTINCT treatment_type_code) >= 2
)
natsql:
SELECT professional_id, cell_number 
FROM Professionals 
WHERE professional_id IN (
    SELECT professional_id 
    FROM Treatments 
    GROUP BY professional_id 
    HAVING COUNT(DISTINCT treatment_type_code) >= 2
)
SQL:
SELECT professional_id, cell_number 
FROM Professionals 
WHERE professional_id IN (
    SELECT professional_id 
    FROM Treatments 
    GROUP BY professional_id 
    HAVING COUNT(DISTINCT treatment_type_code) >= 2
)
self correction:
SELECT professional_id, cell_number  FROM Professionals  WHERE professional_id IN (     SELECT professional_id      FROM Treatments      GROUP BY professional_id      HAVING COUNT(DISTINCT treatment_type_code) >= 2 )

index is 944
SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )
What are the first name and last name of the professionals who have done treatment with cost below average?
schema_links:
What are the first name and last name of the professionals who have done treatment with cost below average? | professionals : professionals.last_name , professionals.first_name , professionals.role_code , professionals.professional_id , professionals.street , professionals.* | treatments : treatments.cost_of_treatment , treatments.professional_id , treatments.treatment_type_code , treatments.treatment_id , treatments.dog_id , treatments.* | owners : owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.*
natsql:
select distinct _ from _ where @.@ < avg ( _ )
natsql and SQL generation:
SELECT DISTINCT T1.first_name, T1.last_name FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.cost_of_treatment < (SELECT avg(cost_of_treatment) FROM treatments)
natsql:
SELECT DISTINCT T1.first_name, T1.last_name FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.cost_of_treatment < (SELECT avg(cost_of_treatment) FROM treatments)
SQL:
SELECT DISTINCT T1.first_name, T1.last_name FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.cost_of_treatment < (SELECT avg(cost_of_treatment) FROM treatments)
self correction:
SELECT T1.first_name, T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)

index is 945
SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )
Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.
schema_links:
Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names. | professionals : professionals.first_name , professionals.last_name , professionals.professional_id , professionals.role_code , professionals.street , professionals.* | treatments : treatments.cost_of_treatment , treatments.professional_id , treatments.treatment_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.* | owners : owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.* | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description , treatment_types.*
natsql:
select distinct _ from _ where @.@ < avg ( _ )
natsql and SQL generation:
SELECT DISTINCT first_name, last_name FROM professionals WHERE cost_of_treatment < (SELECT avg(cost_of_treatment) FROM treatments)
natsql:
SELECT DISTINCT first_name, last_name FROM professionals WHERE cost_of_treatment < (SELECT avg(cost_of_treatment) FROM treatments)
SQL:
SELECT DISTINCT first_name, last_name FROM professionals WHERE cost_of_treatment < (SELECT avg(cost_of_treatment) FROM treatments)
self correction:
SELECT first_name, last_name FROM Professionals WHERE professional_id IN (     SELECT DISTINCT professional_id     FROM Treatments     WHERE cost_of_treatment < (         SELECT avg(cost_of_treatment)         FROM Treatments     ) )

index is 946
SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id
List the date of each treatment, together with the first name of the professional who operated it.
schema_links:
List the date of each treatment, together with the first name of the professional who operated it. | treatments : treatments.date_of_treatment , treatments.professional_id , treatments.treatment_id , treatments.treatment_type_code , treatments.dog_id , treatments.* | professionals : professionals.first_name , professionals.professional_id , professionals.role_code , professionals.street , professionals.city , professionals.* | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description , treatment_types.* | owners : owners.first_name , owners.street , owners.city , owners.state , owners.owner_id , owners.*
natsql:
select _ from _
natsql and SQL generation:
SELECT treatments.date_of_treatment, professionals.first_name
FROM treatments
JOIN professionals ON treatments.professional_id = professionals.professional_id
natsql:
SELECT treatments.date_of_treatment, professionals.first_name
FROM treatments
JOIN professionals ON treatments.professional_id = professionals.professional_id
SQL:
SELECT treatments.date_of_treatment, professionals.first_name
FROM treatments
JOIN professionals ON treatments.professional_id = professionals.professional_id
self correction:
SELECT treatments.date_of_treatment, professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id

index is 947
SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id
What are the date and the operating professional's first name of each treatment?
schema_links:
What are the date and the operating professional's first name of each treatment? | treatments : treatments.date_of_treatment , treatments.professional_id , treatments.treatment_id , treatments.treatment_type_code , treatments.dog_id , treatments.* | professionals : professionals.first_name , professionals.role_code , professionals.professional_id , professionals.street , professionals.city , professionals.* | treatment_types : treatment_types.treatment_type_description , treatment_types.treatment_type_code , treatment_types.* | owners : owners.first_name , owners.street , owners.city , owners.state , owners.cell_number , owners.*
natsql:
select _ from _
natsql and SQL generation:
SELECT date_of_treatment, professionals.first_name
FROM treatments
JOIN professionals ON treatments.professional_id = professionals.professional_id
natsql:
SELECT date_of_treatment, professionals.first_name
FROM treatments
JOIN professionals ON treatments.professional_id = professionals.professional_id
SQL:
SELECT date_of_treatment, professionals.first_name
FROM treatments
JOIN professionals ON treatments.professional_id = professionals.professional_id
self correction:
SELECT date_of_treatment, professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id

index is 948
SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code
List the cost of each treatment and the corresponding treatment type description.
schema_links:
List the cost of each treatment and the corresponding treatment type description. | treatments : treatments.cost_of_treatment , treatments.treatment_type_code , treatments.treatment_id , treatments.dog_id , treatments.date_of_treatment , treatments.* | treatment_types : treatment_types.treatment_type_description , treatment_types.treatment_type_code , treatment_types.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*
natsql:
select _ from _
natsql and SQL generation:
SELECT cost_of_treatment, treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
natsql:
SELECT cost_of_treatment, treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
SQL:
SELECT cost_of_treatment, treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
self correction:
SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description  FROM treatments  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code

index is 949
SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code
What are the cost and treatment type description of each treatment?
schema_links:
What are the cost and treatment type description of each treatment? | treatments : treatments.cost_of_treatment , treatments.treatment_type_code , treatments.treatment_id , treatments.dog_id , treatments.date_of_treatment , treatments.* | treatment_types : treatment_types.treatment_type_description , treatment_types.treatment_type_code , treatment_types.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*
natsql:
select _ from _
natsql and SQL generation:
SELECT cost_of_treatment, treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
natsql:
SELECT cost_of_treatment, treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
SQL:
SELECT cost_of_treatment, treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
self correction:
SELECT cost_of_treatment, treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code

index is 950
SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
List each owner's first name, last name, and the size of his for her dog.
schema_links:
List each owner's first name, last name, and the size of his for her dog. | owners : owners.first_name , owners.last_name , owners.owner_id , owners.email_address , owners.state , owners.* | dogs : dogs.size_code , dogs.owner_id , dogs.name , dogs.breed_code , dogs.dog_id , dogs.* | sizes : sizes.size_description , sizes.size_code , sizes.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*
natsql:
select _ from _
natsql and SQL generation:
SELECT owners.first_name, owners.last_name, sizes.size_description
FROM owners
JOIN dogs ON owners.owner_id = dogs.owner_id
JOIN sizes ON dogs.size_code = sizes.size_code
natsql:
SELECT owners.first_name, owners.last_name, sizes.size_description
FROM owners
JOIN dogs ON owners.owner_id = dogs.owner_id
JOIN sizes ON dogs.size_code = sizes.size_code
SQL:
SELECT owners.first_name, owners.last_name, sizes.size_description
FROM owners
JOIN dogs ON owners.owner_id = dogs.owner_id
JOIN sizes ON dogs.size_code = sizes.size_code
self correction:
SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code

index is 951
SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
What are each owner's first name, last name, and the size of their dog?
schema_links:
What are each owner's first name, last name, and the size of their dog? | owners : owners.last_name , owners.first_name , owners.email_address , owners.owner_id , owners.home_phone , owners.* | dogs : dogs.size_code , dogs.name , dogs.owner_id , dogs.breed_code , dogs.gender , dogs.* | sizes : sizes.size_description , sizes.size_code , sizes.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*
natsql:
select _ from _
natsql and SQL generation:
SELECT owners.first_name, owners.last_name, sizes.size_description 
FROM owners 
JOIN dogs ON owners.owner_id = dogs.owner_id 
JOIN sizes ON dogs.size_code = sizes.size_code
natsql:
SELECT owners.first_name, owners.last_name, sizes.size_description 
FROM owners 
JOIN dogs ON owners.owner_id = dogs.owner_id 
JOIN sizes ON dogs.size_code = sizes.size_code
SQL:
SELECT owners.first_name, owners.last_name, sizes.size_description 
FROM owners 
JOIN dogs ON owners.owner_id = dogs.owner_id 
JOIN sizes ON dogs.size_code = sizes.size_code
self correction:
SELECT owners.first_name, owners.last_name, sizes.size_description  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  JOIN sizes ON dogs.size_code = sizes.size_code

index is 952
SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
List pairs of the owner's first name and the dogs's name.
schema_links:
List pairs of the owner's first name and the dogs's name. | dogs : dogs.name , dogs.owner_id , dogs.dog_id , dogs.age , dogs.gender , dogs.* | owners : owners.first_name , owners.owner_id , owners.last_name , owners.email_address , owners.home_phone , owners.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql:
select _ from _
natsql and SQL generation:
SELECT owners.first_name, dogs.name
FROM owners
JOIN dogs ON owners.owner_id = dogs.owner_id
natsql:
SELECT owners.first_name, dogs.name
FROM owners
JOIN dogs ON owners.owner_id = dogs.owner_id
SQL:
SELECT owners.first_name, dogs.name
FROM owners
JOIN dogs ON owners.owner_id = dogs.owner_id
self correction:
SELECT owners.first_name, dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id

index is 953
SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
What are each owner's first name and their dogs's name?
schema_links:
What are each owner's first name and their dogs's name? | dogs : dogs.name , dogs.owner_id , dogs.dog_id , dogs.age , dogs.gender , dogs.* | owners : owners.first_name , owners.owner_id , owners.last_name , owners.email_address , owners.state , owners.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql:
select _ from _
natsql and SQL generation:
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id
natsql:
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id
SQL:
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id
self correction:
SELECT owners.first_name, dogs.name  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id

index is 954
SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )
List the names of the dogs of the rarest breed and the treatment dates of them.
schema_links:
List the names of the dogs of the rarest breed and the treatment dates of them. | treatments : treatments.date_of_treatment , treatments.dog_id , treatments.treatment_id , treatments.treatment_type_code , treatments.cost_of_treatment , treatments.* | dogs : dogs.name , dogs.breed_code , dogs.dog_id , dogs.owner_id , dogs.date_arrived , dogs.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*
natsql:
select _ from _ where @.@ = _ order by count ( _ ) asc limit _
natsql and SQL generation:
SELECT T2.name, T1.date_of_treatment
FROM treatments AS T1
JOIN dogs AS T2 ON T1.dog_id = T2.dog_id
WHERE T2.breed_code = (
    SELECT breed_code
    FROM breeds
    ORDER BY breed_code
    LIMIT 1
)
ORDER BY COUNT(*) ASC
LIMIT 1
natsql:
SELECT T2.name, T1.date_of_treatment
FROM treatments AS T1
JOIN dogs AS T2 ON T1.dog_id = T2.dog_id
WHERE T2.breed_code = (
    SELECT breed_code
    FROM breeds
    ORDER BY breed_code
    LIMIT 1
)
ORDER BY COUNT(*) ASC
LIMIT 1
SQL:
SELECT T2.name, T1.date_of_treatment
FROM treatments AS T1
JOIN dogs AS T2 ON T1.dog_id = T2.dog_id
WHERE T2.breed_code = (
    SELECT breed_code
    FROM breeds
    ORDER BY breed_code
    LIMIT 1
)
ORDER BY COUNT(*) ASC
LIMIT 1
self correction:
SELECT T2.name, T1.date_of_treatment FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.dog_id = T2.dog_id JOIN Breeds AS B ON T2.breed_code = B.breed_code WHERE B.breed_code = (     SELECT breed_code     FROM Breeds     ORDER BY breed_code DESC     LIMIT 1 ) ORDER BY T1.date_of_treatment ASC LIMIT 1

index is 955
SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )
Which dogs are of the rarest breed? Show their names and treatment dates.
schema_links:
Which dogs are of the rarest breed? Show their names and treatment dates. | dogs : dogs.name , dogs.breed_code , dogs.date_adopted , dogs.date_arrived , dogs.date_departed , dogs.* | treatments : treatments.date_of_treatment , treatments.treatment_id , treatments.cost_of_treatment , treatments.treatment_type_code , treatments.dog_id , treatments.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | owners : owners.street , owners.city , owners.state , owners.cell_number , owners.owner_id , owners.*
natsql:
select _ from _ where @.@ = _ order by count ( _ ) asc limit _
natsql and SQL generation:
SELECT dogs.name, treatments.date_of_treatment
FROM dogs
JOIN breeds ON dogs.breed_code = breeds.breed_code
JOIN treatments ON dogs.dog_id = treatments.dog_id
GROUP BY dogs.name
HAVING COUNT(DISTINCT breeds.breed_code) = (
    SELECT COUNT(DISTINCT breed_code) FROM breeds
)
ORDER BY COUNT(treatments.treatment_id) ASC
LIMIT 1
natsql:
SELECT dogs.name, treatments.date_of_treatment
FROM dogs
JOIN breeds ON dogs.breed_code = breeds.breed_code
JOIN treatments ON dogs.dog_id = treatments.dog_id
GROUP BY dogs.name
HAVING COUNT(DISTINCT breeds.breed_code) = (
    SELECT COUNT(DISTINCT breed_code) FROM breeds
)
ORDER BY COUNT(treatments.treatment_id) ASC
LIMIT 1
SQL:
SELECT dogs.name, treatments.date_of_treatment
FROM dogs
JOIN breeds ON dogs.breed_code = breeds.breed_code
JOIN treatments ON dogs.dog_id = treatments.dog_id
GROUP BY dogs.name
HAVING COUNT(DISTINCT breeds.breed_code) = (
    SELECT COUNT(DISTINCT breed_code) FROM breeds
)
ORDER BY COUNT(treatments.treatment_id) ASC
LIMIT 1
self correction:
SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY dogs.name HAVING COUNT(DISTINCT breeds.breed_code) = (     SELECT COUNT(DISTINCT breed_code) FROM breeds ) ORDER BY COUNT(treatments.treatment_id) ASC LIMIT 1

index is 956
SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'
Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.
schema_links:
Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name. | dogs : dogs.name , dogs.owner_id , dogs.dog_id , dogs.breed_code , dogs.age , dogs.* | owners : owners.state ( Virginia ) , owners.first_name , owners.owner_id , owners.last_name , owners.email_address , owners.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT owners.first_name, dogs.name
FROM dogs
JOIN owners ON dogs.owner_id = owners.owner_id
WHERE owners.state = 'Virginia'
natsql:
SELECT owners.first_name, dogs.name
FROM dogs
JOIN owners ON dogs.owner_id = owners.owner_id
WHERE owners.state = 'Virginia'
SQL:
SELECT owners.first_name, dogs.name
FROM dogs
JOIN owners ON dogs.owner_id = owners.owner_id
WHERE owners.state = 'Virginia'
self correction:
SELECT owners.first_name, dogs.name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id WHERE owners.state = 'Virginia'

index is 957
SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'
Find the first names of owners living in Virginia and the names of dogs they own.
schema_links:
Find the first names of owners living in Virginia and the names of dogs they own. | dogs : dogs.name , dogs.owner_id , dogs.dog_id , dogs.age , dogs.gender , dogs.* | owners : owners.state ( Virginia ) , owners.first_name , owners.owner_id , owners.last_name , owners.email_address , owners.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT T2.first_name, T1.name 
FROM dogs AS T1 
JOIN owners AS T2 ON T1.owner_id = T2.owner_id 
WHERE T2.state = 'Virginia'
natsql:
SELECT T2.first_name, T1.name 
FROM dogs AS T1 
JOIN owners AS T2 ON T1.owner_id = T2.owner_id 
WHERE T2.state = 'Virginia'
SQL:
SELECT T2.first_name, T1.name 
FROM dogs AS T1 
JOIN owners AS T2 ON T1.owner_id = T2.owner_id 
WHERE T2.state = 'Virginia'
self correction:
SELECT T2.first_name, T1.name  FROM Dogs AS T1  JOIN Owners AS T2 ON T1.owner_id = T2.owner_id  WHERE T2.state = 'Virginia'

index is 958
SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id
What are the arriving date and the departing date of the dogs who have gone through a treatment?
schema_links:
What are the arriving date and the departing date of the dogs who have gone through a treatment? | dogs : dogs.date_arrived , dogs.date_departed , dogs.date_adopted , dogs.dog_id , dogs.name , dogs.* | treatments : treatments.dog_id , treatments.date_of_treatment , treatments.treatment_id , treatments.treatment_type_code , treatments.cost_of_treatment , treatments.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*
natsql:
select distinct _ from _ where @.@ join _
natsql and SQL generation:
SELECT DISTINCT T1.date_arrived, T1.date_departed FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id = T2.dog_id
natsql:
SELECT DISTINCT T1.date_arrived, T1.date_departed FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id = T2.dog_id
SQL:
SELECT DISTINCT T1.date_arrived, T1.date_departed FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id = T2.dog_id
self correction:
SELECT T1.date_arrived, T1.date_departed  FROM Dogs AS T1  JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id

index is 959
SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id
Find the arriving date and the departing date of the dogs that received a treatment.
schema_links:
Find the arriving date and the departing date of the dogs that received a treatment. | dogs : dogs.date_arrived , dogs.date_departed , dogs.date_adopted , dogs.dog_id , dogs.name , dogs.* | treatments : treatments.dog_id , treatments.date_of_treatment , treatments.treatment_id , treatments.treatment_type_code , treatments.professional_id , treatments.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | breeds : breeds.breed_code , breeds.breed_name , breeds.*
natsql:
select distinct _ from _ where @.@ join _
natsql and SQL generation:
SELECT DISTINCT T1.date_arrived, T1.date_departed 
FROM dogs AS T1 
JOIN treatments AS T2 ON T1.dog_id = T2.dog_id
natsql:
SELECT DISTINCT T1.date_arrived, T1.date_departed 
FROM dogs AS T1 
JOIN treatments AS T2 ON T1.dog_id = T2.dog_id
SQL:
SELECT DISTINCT T1.date_arrived, T1.date_departed 
FROM dogs AS T1 
JOIN treatments AS T2 ON T1.dog_id = T2.dog_id
self correction:
SELECT T1.date_arrived, T1.date_departed  FROM Dogs AS T1  JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id

index is 960
SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )
List the last name of the owner owning the youngest dog.
schema_links:
List the last name of the owner owning the youngest dog. | dogs : dogs.age , dogs.date_of_birth , dogs.owner_id , dogs.name , dogs.dog_id , dogs.* | owners : owners.last_name , owners.first_name , owners.owner_id , owners.email_address , owners.cell_number , owners.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql:
select _ from _ where @.@ = max ( _ )
natsql and SQL generation:
SELECT last_name FROM owners WHERE owner_id = (SELECT owner_id FROM dogs ORDER BY date_of_birth ASC LIMIT 1)
natsql:
SELECT last_name FROM owners WHERE owner_id = (SELECT owner_id FROM dogs ORDER BY date_of_birth ASC LIMIT 1)
SQL:
SELECT last_name FROM owners WHERE owner_id = (SELECT owner_id FROM dogs ORDER BY date_of_birth ASC LIMIT 1)
self correction:
SELECT last_name FROM Owners  WHERE owner_id = (   SELECT owner_id    FROM Dogs    ORDER BY date_of_birth ASC    LIMIT 1 )

index is 961
SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )
Who owns the youngest dog? Give me his or her last name.
schema_links:
Who owns the youngest dog? Give me his or her last name. | dogs : dogs.age , dogs.name , dogs.date_of_birth , dogs.owner_id , dogs.dog_id , dogs.* | owners : owners.last_name , owners.first_name , owners.email_address , owners.owner_id , owners.cell_number , owners.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql:
select _ from _ where @.@ = max ( _ )
natsql and SQL generation:
SELECT last_name
FROM owners
WHERE owner_id = (
    SELECT owner_id
    FROM dogs
    WHERE date_of_birth = (
        SELECT MIN(date_of_birth)
        FROM dogs
    )
)
natsql:
SELECT last_name
FROM owners
WHERE owner_id = (
    SELECT owner_id
    FROM dogs
    WHERE date_of_birth = (
        SELECT MIN(date_of_birth)
        FROM dogs
    )
)
SQL:
SELECT last_name
FROM owners
WHERE owner_id = (
    SELECT owner_id
    FROM dogs
    WHERE date_of_birth = (
        SELECT MIN(date_of_birth)
        FROM dogs
    )
)
self correction:
SELECT last_name FROM owners WHERE owner_id = (     SELECT owner_id     FROM dogs     WHERE date_of_birth = (         SELECT MIN(date_of_birth)         FROM dogs     ) ) ORDER BY owner_id LIMIT 1

index is 962
SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'
List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.
schema_links:
List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin. | professionals : professionals.state ( Hawaii , Wisconsin ) , professionals.email_address , professionals.professional_id , professionals.role_code , professionals.first_name , professionals.* | owners : owners.state ( Wisconsin ) , owners.email_address , owners.street , owners.city , owners.owner_id , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | breeds : breeds.breed_code , breeds.breed_name , breeds.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'
natsql:
SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'
SQL:
SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'
self correction:
SELECT email_address  FROM Professionals  WHERE state = 'Hawaii' OR state = 'Wisconsin'

index is 963
SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'
What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?
schema_links:
What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin? | professionals : professionals.state ( Hawaii , Wisconsin ) , professionals.email_address , professionals.role_code , professionals.professional_id , professionals.first_name , professionals.* | owners : owners.state ( Wisconsin ) , owners.email_address , owners.first_name , owners.street , owners.city , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | breeds : breeds.breed_code , breeds.breed_name , breeds.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'
natsql:
SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'
SQL:
SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'
self correction:
SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'

index is 964
SELECT date_arrived ,  date_departed FROM Dogs
What are the arriving date and the departing date of all the dogs?
schema_links:
What are the arriving date and the departing date of all the dogs? | dogs : dogs.date_arrived , dogs.date_departed , dogs.name , dogs.date_adopted , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.cell_number , owners.owner_id , owners.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql:
select _ from _
natsql and SQL generation:
SELECT date_arrived, date_departed FROM Dogs
natsql:
SELECT date_arrived, date_departed FROM Dogs
SQL:
SELECT date_arrived, date_departed FROM Dogs
self correction:
SELECT date_arrived, date_departed  FROM Dogs

index is 965
SELECT date_arrived ,  date_departed FROM Dogs
List the arrival date and the departure date for all the dogs.
schema_links:
List the arrival date and the departure date for all the dogs. | dogs : dogs.date_arrived , dogs.date_departed , dogs.name , dogs.date_adopted , dogs.dog_id , dogs.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql:
select _ from _
natsql and SQL generation:
SELECT date_arrived, date_departed FROM Dogs
natsql:
SELECT date_arrived, date_departed FROM Dogs
SQL:
SELECT date_arrived, date_departed FROM Dogs
self correction:
SELECT date_arrived, date_departed FROM Dogs

index is 966
SELECT count(DISTINCT dog_id) FROM Treatments
How many dogs went through any treatments?
schema_links:
How many dogs went through any treatments? | treatments : treatments.dog_id , treatments.treatment_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.professional_id , treatments.* | dogs : dogs.owner_id , dogs.breed_code , dogs.dog_id , dogs.size_code , dogs.name , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | breeds : breeds.breed_code , breeds.breed_name , breeds.*
natsql:
select count ( distinct _ ) from _
natsql and SQL generation:
SELECT count(DISTINCT dog_id) FROM treatments
natsql:
SELECT count(DISTINCT dog_id) FROM treatments
SQL:
SELECT count(DISTINCT dog_id) FROM treatments
self correction:
SELECT COUNT(DISTINCT dog_id) FROM Treatments

index is 967
SELECT count(DISTINCT dog_id) FROM Treatments
Count the number of dogs that went through a treatment.
schema_links:
Count the number of dogs that went through a treatment. | treatments : treatments.dog_id , treatments.treatment_id , treatments.treatment_type_code , treatments.professional_id , treatments.date_of_treatment , treatments.* | dogs : dogs.owner_id , dogs.dog_id , dogs.breed_code , dogs.name , dogs.age , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description , treatment_types.*
natsql:
select count ( distinct _ ) from _
natsql and SQL generation:
SELECT count(DISTINCT dog_id) FROM treatments
natsql:
SELECT count(DISTINCT dog_id) FROM treatments
SQL:
SELECT count(DISTINCT dog_id) FROM treatments
self correction:
SELECT COUNT(DISTINCT dog_id) FROM Treatments

index is 968
SELECT count(DISTINCT professional_id) FROM Treatments
How many professionals have performed any treatment to dogs?
schema_links:
How many professionals have performed any treatment to dogs? | treatments : treatments.professional_id , treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.* | professionals : professionals.role_code , professionals.professional_id , professionals.street , professionals.city , professionals.state , professionals.* | dogs : dogs.owner_id , dogs.name , dogs.dog_id , dogs.breed_code , dogs.age , dogs.* | owners : owners.street , owners.city , owners.state , owners.cell_number , owners.owner_id , owners.*
natsql:
select count ( distinct _ ) from _
natsql and SQL generation:
SELECT count(DISTINCT professional_id) FROM treatments
natsql:
SELECT count(DISTINCT professional_id) FROM treatments
SQL:
SELECT count(DISTINCT professional_id) FROM treatments
self correction:
SELECT COUNT(DISTINCT professional_id) FROM Professionals

index is 969
SELECT count(DISTINCT professional_id) FROM Treatments
Find the number of professionals who have ever treated dogs.
schema_links:
Find the number of professionals who have ever treated dogs. | treatments : treatments.professional_id , treatments.dog_id , treatments.treatment_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.* | professionals : professionals.professional_id , professionals.role_code , professionals.street , professionals.city , professionals.state , professionals.* | dogs : dogs.name , dogs.dog_id , dogs.owner_id , dogs.breed_code , dogs.age , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*
natsql:
select count ( distinct _ ) from _
natsql and SQL generation:
SELECT count(DISTINCT professional_id) FROM treatments
natsql:
SELECT count(DISTINCT professional_id) FROM treatments
SQL:
SELECT count(DISTINCT professional_id) FROM treatments
self correction:
SELECT COUNT(DISTINCT professional_id) AS num_professionals FROM Treatments

index is 970
SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'
Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.
schema_links:
Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state. | professionals : professionals.city , professionals.state , professionals.street , professionals.role_code , professionals.first_name , professionals.* | owners : owners.state , owners.street , owners.city , owners.cell_number , owners.owner_id , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.*
natsql:
select _ from _ where _ like _
natsql and SQL generation:
SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%'
natsql:
SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%'
SQL:
SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%'
self correction:
SELECT role_code, street, city, state  FROM Professionals  WHERE city LIKE '%West%'

index is 971
SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'
Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.
schema_links:
Find the role, street, city and state of the professionals living in a city that contains the substring 'West'. | professionals : professionals.state , professionals.street , professionals.city , professionals.role_code , professionals.professional_id , professionals.* | owners : owners.street , owners.city , owners.state , owners.cell_number , owners.owner_id , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | breeds : breeds.breed_code , breeds.breed_name , breeds.*
natsql:
select _ from _ where _ like _
natsql and SQL generation:
SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%'
natsql:
SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%'
SQL:
SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%'
self correction:
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'

index is 972
SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'
Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.
schema_links:
Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email. | owners : owners.first_name , owners.last_name , owners.email_address , owners.state , owners.owner_id , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.* | breeds : breeds.breed_code , breeds.breed_name , breeds.*
natsql:
select _ from _ where _ like _
natsql and SQL generation:
SELECT first_name, last_name, email_address 
FROM owners 
WHERE state LIKE '%North%'
natsql:
SELECT first_name, last_name, email_address 
FROM owners 
WHERE state LIKE '%North%'
SQL:
SELECT first_name, last_name, email_address 
FROM owners 
WHERE state LIKE '%North%'
self correction:
SELECT owners.first_name, owners.last_name, owners.email_address  FROM owners  WHERE owners.state LIKE '%North%'

index is 973
SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'
Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.
schema_links:
Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'. | owners : owners.first_name , owners.last_name , owners.email_address , owners.state , owners.owner_id , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | professionals : professionals.street , professionals.city , professionals.state , professionals.email_address , professionals.professional_id , professionals.* | breeds : breeds.breed_code , breeds.breed_name , breeds.*
natsql:
select _ from _ where _ like _
natsql and SQL generation:
SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%'
natsql:
SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%'
SQL:
SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%'
self correction:
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'

index is 974
SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )
How many dogs have an age below the average?
schema_links:
How many dogs have an age below the average? | dogs : dogs.age , dogs.breed_code , dogs.dog_id , dogs.owner_id , dogs.name , dogs.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql:
select count ( _ ) from _ where @.@ < avg ( _ )
natsql and SQL generation:
SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)
natsql:
SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)
SQL:
SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)
self correction:
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)

index is 975
SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )
Count the number of dogs of an age below the average.
schema_links:
Count the number of dogs of an age below the average. | dogs : dogs.age , dogs.dog_id , dogs.owner_id , dogs.breed_code , dogs.name , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql:
select count ( _ ) from _ where @.@ < avg ( _ )
natsql and SQL generation:
SELECT count(*) FROM dogs WHERE age < (SELECT avg(age) FROM dogs)
natsql:
SELECT count(*) FROM dogs WHERE age < (SELECT avg(age) FROM dogs)
SQL:
SELECT count(*) FROM dogs WHERE age < (SELECT avg(age) FROM dogs)
self correction:
SELECT COUNT(*) AS dog_count FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)

index is 976
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
How much does the most recent treatment cost?
schema_links:
How much does the most recent treatment cost? | treatments : treatments.date_of_treatment , treatments.cost_of_treatment , treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.* | dogs : dogs.owner_id , dogs.breed_code , dogs.name , dogs.age , dogs.gender , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description , treatment_types.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1
natsql:
SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1
SQL:
SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1
self correction:
SELECT Treatments.cost_of_treatment  FROM Treatments  ORDER BY Treatments.date_of_treatment DESC  LIMIT 1

index is 977
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
Show me the cost of the most recently performed treatment.
schema_links:
Show me the cost of the most recently performed treatment. | treatments : treatments.cost_of_treatment , treatments.date_of_treatment , treatments.treatment_id , treatments.treatment_type_code , treatments.dog_id , treatments.* | dogs : dogs.owner_id , dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description , treatment_types.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1
natsql:
SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1
SQL:
SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1
self correction:
SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment DESC LIMIT 1

index is 978
SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )
How many dogs have not gone through any treatment?
schema_links:
How many dogs have not gone through any treatment? | dogs : dogs.dog_id , dogs.owner_id , dogs.breed_code , dogs.name , dogs.date_adopted , dogs.* | treatments : treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.professional_id , treatments.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*
natsql:
select count ( _ ) from _ where @.@ not in _
natsql and SQL generation:
SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)
natsql:
SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)
SQL:
SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)
self correction:
SELECT COUNT(*) FROM Dogs WHERE Dogs.dog_id NOT IN (SELECT dog_id FROM Treatments)

index is 979
select count(*) from dogs where dog_id not in ( select dog_id from treatments )
Tell me the number of dogs that have not received any treatment .
schema_links:
Tell me the number of dogs that have not received any treatment . | dogs : dogs.dog_id , dogs.owner_id , dogs.breed_code , dogs.name , dogs.abandoned_yn , dogs.* | treatments : treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment , treatments.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*
natsql:
select count ( _ ) from _ where @.@ not in _
natsql and SQL generation:
SELECT count(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)
natsql:
SELECT count(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)
SQL:
SELECT count(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)
self correction:
SELECT count(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)

index is 980
SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )
How many owners temporarily do not have any dogs?
schema_links:
How many owners temporarily do not have any dogs? | owners : owners.owner_id , owners.home_phone , owners.cell_number , owners.first_name , owners.email_address , owners.* | dogs : dogs.owner_id , dogs.dog_id , dogs.breed_code , dogs.name , dogs.age , dogs.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | professionals : professionals.street , professionals.city , professionals.state , professionals.cell_number , professionals.professional_id , professionals.*
natsql:
select count ( _ ) from _ where @.@ not in _
natsql and SQL generation:
SELECT COUNT(*) FROM owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM dogs)
natsql:
SELECT COUNT(*) FROM owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM dogs)
SQL:
SELECT COUNT(*) FROM owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM dogs)
self correction:
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs)

index is 981
SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )
Find the number of owners who do not own any dogs at this moment.
schema_links:
Find the number of owners who do not own any dogs at this moment. | owners : owners.owner_id , owners.first_name , owners.cell_number , owners.last_name , owners.street , owners.* | dogs : dogs.owner_id , dogs.date_adopted , dogs.date_departed , dogs.dog_id , dogs.abandoned_yn , dogs.* | breeds : breeds.breed_code , breeds.breed_name , breeds.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql:
select count ( _ ) from _ where @.@ not in _
natsql and SQL generation:
SELECT count(*) FROM owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM dogs WHERE date_departed IS NULL)
natsql:
SELECT count(*) FROM owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM dogs WHERE date_departed IS NULL)
SQL:
SELECT count(*) FROM owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM dogs WHERE date_departed IS NULL)
self correction:
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs WHERE date_departed IS NULL);

index is 982
SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )
How many professionals did not operate any treatment on dogs?
schema_links:
How many professionals did not operate any treatment on dogs? | professionals : professionals.professional_id , professionals.role_code , professionals.home_phone , professionals.cell_number , professionals.street , professionals.* | treatments : treatments.professional_id , treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.* | dogs : dogs.dog_id , dogs.owner_id , dogs.breed_code , dogs.name , dogs.age , dogs.* | owners : owners.street , owners.city , owners.state , owners.cell_number , owners.owner_id , owners.*
natsql:
select count ( _ ) from _ where @.@ not in _
natsql and SQL generation:
SELECT count(professional_id) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments)
natsql:
SELECT count(professional_id) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments)
SQL:
SELECT count(professional_id) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments)
self correction:
SELECT COUNT(professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)

index is 983
SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )
Find the number of professionals who have not treated any dogs.
schema_links:
Find the number of professionals who have not treated any dogs. | professionals : professionals.professional_id , professionals.role_code , professionals.street , professionals.city , professionals.state , professionals.* | treatments : treatments.professional_id , treatments.treatment_id , treatments.treatment_type_code , treatments.dog_id , treatments.date_of_treatment , treatments.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.*
natsql:
select count ( _ ) from _ where @.@ not in _
natsql and SQL generation:
SELECT count(*) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments)
natsql:
SELECT count(*) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments)
SQL:
SELECT count(*) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments)
self correction:
SELECT count(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)

index is 984
SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1
List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.
schema_links:
List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no. | dogs : dogs.abandoned_yn , dogs.name , dogs.age , dogs.weight , dogs.dog_id , dogs.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | owners : owners.street , owners.city , owners.state , owners.cell_number , owners.owner_id , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1
natsql:
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1
SQL:
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1
self correction:
SELECT Dogs.name, Dogs.age, Dogs.weight  FROM Dogs  WHERE Dogs.abandoned_yn = 1

index is 985
SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1
What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.
schema_links:
What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables. | dogs : dogs.abandoned_yn , dogs.name , dogs.age , dogs.weight , dogs.dog_id , dogs.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1
natsql:
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1
SQL:
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1
self correction:
SELECT name, age, weight  FROM Dogs  WHERE abandoned_yn = 1

index is 986
SELECT avg(age) FROM Dogs
What is the average age of all the dogs?
schema_links:
What is the average age of all the dogs? | dogs : dogs.age , dogs.breed_code , dogs.name , dogs.dog_id , dogs.owner_id , dogs.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql:
select avg ( _ ) from _
natsql and SQL generation:
SELECT AVG(age) FROM dogs
natsql:
SELECT AVG(age) FROM dogs
SQL:
SELECT AVG(age) FROM dogs
self correction:
SELECT AVG(age) FROM Dogs

index is 987
SELECT avg(age) FROM Dogs
Compute the average age of all the dogs.
schema_links:
Compute the average age of all the dogs. | dogs : dogs.age , dogs.breed_code , dogs.name , dogs.dog_id , dogs.owner_id , dogs.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql:
select avg ( _ ) from _
natsql and SQL generation:
SELECT AVG(age) FROM dogs
natsql:
SELECT AVG(age) FROM dogs
SQL:
SELECT AVG(age) FROM dogs
self correction:
SELECT AVG(age) FROM Dogs

index is 988
SELECT max(age) FROM Dogs
What is the age of the oldest dog?
schema_links:
What is the age of the oldest dog? | dogs : dogs.age , dogs.name , dogs.breed_code , dogs.date_of_birth , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.cell_number , owners.owner_id , owners.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql:
select max ( _ ) from _
natsql and SQL generation:
SELECT MAX(age) FROM dogs
natsql:
SELECT MAX(age) FROM dogs
SQL:
SELECT MAX(age) FROM dogs
self correction:
SELECT MAX(age) FROM Dogs

index is 989
SELECT max(age) FROM Dogs
Tell me the age of the oldest dog.
schema_links:
Tell me the age of the oldest dog. | dogs : dogs.age , dogs.name , dogs.breed_code , dogs.date_of_birth , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.cell_number , owners.owner_id , owners.* | breeds : breeds.breed_code , breeds.breed_name , breeds.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql:
select max ( _ ) from _
natsql and SQL generation:
SELECT MAX(age) FROM dogs
natsql:
SELECT MAX(age) FROM dogs
SQL:
SELECT MAX(age) FROM dogs
self correction:
SELECT MAX(age) FROM Dogs

index is 990
SELECT charge_type ,  charge_amount FROM Charges
How much does each charge type costs? List both charge type and amount.
schema_links:
How much does each charge type costs? List both charge type and amount. | charges : charges.charge_type , charges.charge_amount , charges.charge_id , charges.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql:
select _ from _
natsql and SQL generation:
SELECT charge_type, charge_amount FROM charges
natsql:
SELECT charge_type, charge_amount FROM charges
SQL:
SELECT charge_type, charge_amount FROM charges
self correction:
SELECT charge_type, charge_amount FROM Charges

index is 991
SELECT charge_type ,  charge_amount FROM Charges
List each charge type and its amount.
schema_links:
List each charge type and its amount. | charges : charges.charge_type , charges.charge_amount , charges.charge_id , charges.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql:
select _ from _
natsql and SQL generation:
SELECT charge_type, charge_amount FROM charges
natsql:
SELECT charge_type, charge_amount FROM charges
SQL:
SELECT charge_type, charge_amount FROM charges
self correction:
SELECT charge_type, charge_amount  FROM Charges

index is 992
SELECT max(charge_amount) FROM Charges
How much does the most expensive charge type costs?
schema_links:
How much does the most expensive charge type costs? | charges : charges.charge_type , charges.charge_amount , charges.charge_id , charges.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | dogs : dogs.owner_id , dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql:
select max ( _ ) from _
natsql and SQL generation:
SELECT max(charge_amount) FROM Charges
natsql:
SELECT max(charge_amount) FROM Charges
SQL:
SELECT max(charge_amount) FROM Charges
self correction:
SELECT charge_type, max(charge_amount) FROM Charges

index is 993
SELECT max(charge_amount) FROM Charges
What is the charge amount of the most expensive charge type?
schema_links:
What is the charge amount of the most expensive charge type? | charges : charges.charge_type , charges.charge_amount , charges.charge_id , charges.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql:
select max ( _ ) from _
natsql and SQL generation:
SELECT MAX(charge_amount) FROM charges
natsql:
SELECT MAX(charge_amount) FROM charges
SQL:
SELECT MAX(charge_amount) FROM charges
self correction:
SELECT charge_amount  FROM Charges  ORDER BY charge_amount DESC  LIMIT 1

index is 994
SELECT email_address ,  cell_number ,  home_phone FROM professionals
List the email, cell phone and home phone of all the professionals.
schema_links:
List the email, cell phone and home phone of all the professionals. | professionals : professionals.home_phone , professionals.email_address , professionals.cell_number , professionals.professional_id , professionals.role_code , professionals.* | owners : owners.first_name , owners.street , owners.city , owners.state , owners.email_address , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | breeds : breeds.breed_code , breeds.breed_name , breeds.*
natsql:
select _ from _
natsql and SQL generation:
SELECT email_address, cell_number, home_phone FROM professionals
natsql:
SELECT email_address, cell_number, home_phone FROM professionals
SQL:
SELECT email_address, cell_number, home_phone FROM professionals
self correction:
SELECT email_address, cell_number, home_phone FROM Professionals

index is 995
SELECT email_address ,  cell_number ,  home_phone FROM professionals
What are the email, cell phone and home phone of each professional?
schema_links:
What are the email, cell phone and home phone of each professional? | professionals : professionals.home_phone , professionals.email_address , professionals.cell_number , professionals.professional_id , professionals.role_code , professionals.* | owners : owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | breeds : breeds.breed_code , breeds.breed_name , breeds.*
natsql:
select _ from _
natsql and SQL generation:
SELECT email_address, cell_number, home_phone FROM professionals
natsql:
SELECT email_address, cell_number, home_phone FROM professionals
SQL:
SELECT email_address, cell_number, home_phone FROM professionals
self correction:
SELECT email_address, cell_number, home_phone FROM Professionals

index is 996
SELECT DISTINCT breed_code ,  size_code FROM dogs
What are all the possible breed type and size type combinations?
schema_links:
What are all the possible breed type and size type combinations? | sizes : sizes.size_description , sizes.size_code , sizes.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | dogs : dogs.breed_code , dogs.size_code , dogs.name , dogs.dog_id , dogs.owner_id , dogs.* | treatment_types : treatment_types.treatment_type_description , treatment_types.treatment_type_code , treatment_types.*
natsql:
select distinct _ from _
natsql and SQL generation:
SELECT DISTINCT breed_name, size_description FROM breeds, sizes
natsql:
SELECT DISTINCT breed_name, size_description FROM breeds, sizes
SQL:
SELECT DISTINCT breed_name, size_description FROM breeds, sizes
self correction:
SELECT breed_name, size_description  FROM Breeds, Sizes

index is 997
SELECT DISTINCT breed_code ,  size_code FROM dogs
Find the distinct breed type and size type combinations for dogs.
schema_links:
Find the distinct breed type and size type combinations for dogs. | dogs : dogs.breed_code , dogs.size_code , dogs.name , dogs.dog_id , dogs.age , dogs.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | sizes : sizes.size_description , sizes.size_code , sizes.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*
natsql:
select distinct _ from _
natsql and SQL generation:
SELECT DISTINCT breed_code, size_code FROM Dogs
natsql:
SELECT DISTINCT breed_code, size_code FROM Dogs
SQL:
SELECT DISTINCT breed_code, size_code FROM Dogs
self correction:
SELECT breed_code, size_code FROM Dogs GROUP BY breed_code, size_code

index is 998
SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code
List the first name of all the professionals along with the description of the treatment they have done.
schema_links:
List the first name of all the professionals along with the description of the treatment they have done. | professionals : professionals.first_name , professionals.professional_id , professionals.role_code , professionals.street , professionals.city , professionals.* | treatment_types : treatment_types.treatment_type_description , treatment_types.treatment_type_code , treatment_types.* | treatments : treatments.cost_of_treatment , treatments.professional_id , treatments.treatment_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.* | owners : owners.first_name , owners.street , owners.city , owners.state , owners.owner_id , owners.*
natsql:
select distinct _ from _
natsql and SQL generation:
SELECT DISTINCT professionals.first_name, treatment_types.treatment_type_description
FROM professionals
JOIN treatments ON professionals.professional_id = treatments.professional_id
JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
natsql:
SELECT DISTINCT professionals.first_name, treatment_types.treatment_type_description
FROM professionals
JOIN treatments ON professionals.professional_id = treatments.professional_id
JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
SQL:
SELECT DISTINCT professionals.first_name, treatment_types.treatment_type_description
FROM professionals
JOIN treatments ON professionals.professional_id = treatments.professional_id
JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
self correction:
SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code

index is 999
SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code
What are each professional's first name and description of the treatment they have performed?
schema_links:
What are each professional's first name and description of the treatment they have performed? | professionals : professionals.first_name , professionals.role_code , professionals.professional_id , professionals.last_name , professionals.email_address , professionals.* | treatment_types : treatment_types.treatment_type_description , treatment_types.treatment_type_code , treatment_types.* | treatments : treatments.cost_of_treatment , treatments.treatment_type_code , treatments.professional_id , treatments.date_of_treatment , treatments.treatment_id , treatments.* | owners : owners.first_name , owners.street , owners.city , owners.state , owners.home_phone , owners.*
natsql:
select distinct _ from _
natsql and SQL generation:
SELECT DISTINCT professionals.first_name, treatments.treatment_type_description
FROM professionals
JOIN treatments ON professionals.professional_id = treatments.professional_id
natsql:
SELECT DISTINCT professionals.first_name, treatments.treatment_type_description
FROM professionals
JOIN treatments ON professionals.professional_id = treatments.professional_id
SQL:
SELECT DISTINCT professionals.first_name, treatments.treatment_type_description
FROM professionals
JOIN treatments ON professionals.professional_id = treatments.professional_id
self correction:
SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code

index is 1000
SELECT count(*) FROM singer
How many singers are there?
schema_links:
How many singers are there? | singer : singer.singer_id , singer.name , singer.net_worth_millions , singer.citizenship , singer.birth_year , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT COUNT(*) FROM singer
natsql:
SELECT COUNT(*) FROM singer
SQL:
SELECT COUNT(*) FROM singer
self correction:
SELECT COUNT(DISTINCT Singer_ID) FROM singer

index is 1001
SELECT count(*) FROM singer
What is the count of singers?
schema_links:
What is the count of singers? | singer : singer.net_worth_millions , singer.singer_id , singer.name , singer.citizenship , singer.birth_year , singer.* | song : song.title , song.singer_id , song.sales , song.song_id , song.highest_position , song.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT count(*) FROM singer
natsql:
SELECT count(*) FROM singer
SQL:
SELECT count(*) FROM singer
self correction:
SELECT COUNT(*) FROM singer

index is 1002
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
List the name of singers in ascending order of net worth.
schema_links:
List the name of singers in ascending order of net worth. | singer : singer.net_worth_millions , singer.name , singer.citizenship , singer.singer_id , singer.birth_year , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql:
select _ from _ order by _ asc
natsql and SQL generation:
SELECT name FROM singer ORDER BY net_worth_millions ASC
natsql:
SELECT name FROM singer ORDER BY net_worth_millions ASC
SQL:
SELECT name FROM singer ORDER BY net_worth_millions ASC
self correction:
SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions ASC

index is 1003
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
What are the names of singers ordered by ascending net worth?
schema_links:
What are the names of singers ordered by ascending net worth? | singer : singer.net_worth_millions , singer.name , singer.singer_id , singer.citizenship , singer.birth_year , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql:
select _ from _ order by _ asc
natsql and SQL generation:
SELECT name FROM singer ORDER BY net_worth_millions ASC
natsql:
SELECT name FROM singer ORDER BY net_worth_millions ASC
SQL:
SELECT name FROM singer ORDER BY net_worth_millions ASC
self correction:
SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions ASC

index is 1004
SELECT Birth_Year ,  Citizenship FROM singer
What are the birth year and citizenship of singers?
schema_links:
What are the birth year and citizenship of singers? | singer : singer.birth_year , singer.citizenship , singer.name , singer.net_worth_millions , singer.singer_id , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql:
select _ from _
natsql and SQL generation:
SELECT birth_year, citizenship FROM singer
natsql:
SELECT birth_year, citizenship FROM singer
SQL:
SELECT birth_year, citizenship FROM singer
self correction:
SELECT birth_year, citizenship FROM singer

index is 1005
SELECT Birth_Year ,  Citizenship FROM singer
What are the birth years and citizenships of the singers?
schema_links:
What are the birth years and citizenships of the singers? | singer : singer.birth_year , singer.citizenship , singer.name , singer.singer_id , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql:
select _ from _
natsql and SQL generation:
SELECT birth_year, citizenship FROM singer
natsql:
SELECT birth_year, citizenship FROM singer
SQL:
SELECT birth_year, citizenship FROM singer
self correction:
SELECT birth_year, citizenship FROM singer

index is 1006
SELECT Name FROM singer WHERE Citizenship != "France"
List the name of singers whose citizenship is not "France".
schema_links:
List the name of singers whose citizenship is not "France". | singer : singer.citizenship ( France ) , singer.name , singer.singer_id , singer.birth_year , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT name FROM singer WHERE citizenship <> "France"
natsql:
SELECT name FROM singer WHERE citizenship <> "France"
SQL:
SELECT name FROM singer WHERE citizenship <> "France"
self correction:
SELECT name FROM singer WHERE citizenship <> 'France'

index is 1007
SELECT Name FROM singer WHERE Citizenship != "France"
What are the names of the singers who are not French citizens?
schema_links:
What are the names of the singers who are not French citizens? | singer : singer.name , singer.citizenship , singer.singer_id , singer.birth_year , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT name FROM singer WHERE citizenship <> 'French'
natsql:
SELECT name FROM singer WHERE citizenship <> 'French'
SQL:
SELECT name FROM singer WHERE citizenship <> 'French'
self correction:
SELECT name FROM singer WHERE citizenship <> 'French'

index is 1008
SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949
Show the name of singers whose birth year is either 1948 or 1949?
schema_links:
Show the name of singers whose birth year is either 1948 or 1949? | singer : singer.birth_year , singer.name , singer.singer_id , singer.citizenship , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949
natsql:
SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949
SQL:
SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949
self correction:
SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949

index is 1009
SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949
What are the names of the singers whose birth years are either 1948 or 1949?
schema_links:
What are the names of the singers whose birth years are either 1948 or 1949? | singer : singer.birth_year , singer.name , singer.singer_id , singer.citizenship , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949
natsql:
SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949
SQL:
SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949
self correction:
SELECT singer.Name FROM singer WHERE singer.Birth_Year = 1948 OR singer.Birth_Year = 1949

index is 1010
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
What is the name of the singer with the largest net worth?
schema_links:
What is the name of the singer with the largest net worth? | singer : singer.net_worth_millions , singer.name , singer.singer_id , singer.citizenship , singer.birth_year , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1
natsql:
SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1
SQL:
SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1
self correction:
SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1

index is 1011
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
What is the name of the singer who is worth the most?
schema_links:
What is the name of the singer who is worth the most? | singer : singer.net_worth_millions , singer.name , singer.singer_id , singer.citizenship , singer.birth_year , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql:
select _ from _ order by _ desc limit _
natsql and SQL generation:
SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1
natsql:
SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1
SQL:
SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1
self correction:
SELECT name  FROM singer  ORDER BY Net_Worth_Millions DESC  LIMIT 1

index is 1012
SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship
Show different citizenship of singers and the number of singers of each citizenship.
schema_links:
Show different citizenship of singers and the number of singers of each citizenship. | singer : singer.citizenship , singer.name , singer.singer_id , singer.birth_year , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT citizenship, COUNT(*) FROM singer GROUP BY citizenship
natsql:
SELECT citizenship, COUNT(*) FROM singer GROUP BY citizenship
SQL:
SELECT citizenship, COUNT(*) FROM singer GROUP BY citizenship
self correction:
SELECT citizenship, COUNT(DISTINCT Singer_ID) FROM singer GROUP BY citizenship

index is 1013
SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship
For each citizenship, how many singers are from that country?
schema_links:
For each citizenship, how many singers are from that country? | singer : singer.citizenship , singer.name , singer.singer_id , singer.birth_year , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql:
select _ , count ( _ ) from _ group by _
natsql and SQL generation:
SELECT citizenship, COUNT(*) FROM singer GROUP BY citizenship
natsql:
SELECT citizenship, COUNT(*) FROM singer GROUP BY citizenship
SQL:
SELECT citizenship, COUNT(*) FROM singer GROUP BY citizenship
self correction:
SELECT citizenship, COUNT(*)  FROM singer  GROUP BY citizenship

index is 1014
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1
Please show the most common citizenship of singers.
schema_links:
Please show the most common citizenship of singers. | singer : singer.citizenship , singer.name , singer.net_worth_millions , singer.singer_id , singer.birth_year , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT citizenship FROM singer GROUP BY citizenship ORDER BY count(*) DESC LIMIT 1
natsql:
SELECT citizenship FROM singer GROUP BY citizenship ORDER BY count(*) DESC LIMIT 1
SQL:
SELECT citizenship FROM singer GROUP BY citizenship ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT citizenship, COUNT(*) AS count  FROM singer  GROUP BY citizenship  ORDER BY count DESC  LIMIT 1

index is 1015
select citizenship from singer group by citizenship order by count(*) desc limit 1
What is the most common singer citizenship ?
schema_links:
What is the most common singer citizenship ? | singer : singer.citizenship , singer.name , singer.net_worth_millions , singer.singer_id , singer.birth_year , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _
natsql and SQL generation:
SELECT citizenship FROM singer GROUP BY citizenship ORDER BY count(*) DESC LIMIT 1
natsql:
SELECT citizenship FROM singer GROUP BY citizenship ORDER BY count(*) DESC LIMIT 1
SQL:
SELECT citizenship FROM singer GROUP BY citizenship ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1

index is 1016
SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship
Show different citizenships and the maximum net worth of singers of each citizenship.
schema_links:
Show different citizenships and the maximum net worth of singers of each citizenship. | singer : singer.net_worth_millions , singer.citizenship , singer.name , singer.singer_id , singer.birth_year , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql:
select _ , max ( _ ) from _ group by _
natsql and SQL generation:
SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship
natsql:
SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship
SQL:
SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship
self correction:
SELECT citizenship, MAX(net_worth_millions)  FROM singer  GROUP BY citizenship

index is 1017
SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship
For each citizenship, what is the maximum net worth?
schema_links:
For each citizenship, what is the maximum net worth? | singer : singer.net_worth_millions , singer.citizenship , singer.name , singer.singer_id , singer.birth_year , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql:
select _ , max ( _ ) from _ group by _
natsql and SQL generation:
SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship
natsql:
SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship
SQL:
SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship
self correction:
SELECT citizenship, MAX(Net_Worth_Millions)  FROM singer  GROUP BY citizenship

index is 1018
SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID
Show titles of songs and names of singers.
schema_links:
Show titles of songs and names of singers. | singer : singer.name , singer.singer_id , singer.citizenship , singer.birth_year , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql:
select _ from _
natsql and SQL generation:
SELECT title, name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID
natsql:
SELECT title, name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID
SQL:
SELECT title, name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID
self correction:
SELECT title, name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID

index is 1019
SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID
What are the song titles and singer names?
schema_links:
What are the song titles and singer names? | singer : singer.name , singer.singer_id , singer.net_worth_millions , singer.citizenship , singer.birth_year , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql:
select _ from _
natsql and SQL generation:
SELECT title, name FROM song, singer
natsql:
SELECT title, name FROM song, singer
SQL:
SELECT title, name FROM song, singer
self correction:
SELECT song.title, singer.name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID

index is 1020
SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000
Show distinct names of singers that have songs with sales more than 300000.
schema_links:
Show distinct names of singers that have songs with sales more than 300000. | singer : singer.name , singer.singer_id , singer.citizenship , singer.birth_year , singer.net_worth_millions , singer.* | song : song.sales , song.title , song.singer_id , song.song_id , song.highest_position , song.*
natsql:
select distinct _ from _ where _
natsql and SQL generation:
SELECT DISTINCT singer.name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.sales > 300000
natsql:
SELECT DISTINCT singer.name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.sales > 300000
SQL:
SELECT DISTINCT singer.name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.sales > 300000
self correction:
SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000

index is 1021
SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000
what are the different names of the singers that have sales more than 300000?
schema_links:
what are the different names of the singers that have sales more than 300000? | singer : singer.name , singer.singer_id , singer.net_worth_millions , singer.birth_year , singer.citizenship , singer.* | song : song.sales , song.singer_id , song.title , song.song_id , song.highest_position , song.*
natsql:
select distinct _ from _ where _
natsql and SQL generation:
SELECT DISTINCT name FROM singer WHERE sales > 300000
natsql:
SELECT DISTINCT name FROM singer WHERE sales > 300000
SQL:
SELECT DISTINCT name FROM singer WHERE sales > 300000
self correction:
SELECT singer.Name FROM singer JOIN song ON song.Singer_ID = singer.Singer_ID WHERE song.Sales > 300000;

index is 1022
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1
Show the names of singers that have more than one song.
schema_links:
Show the names of singers that have more than one song. | singer : singer.name , singer.singer_id , singer.citizenship , singer.birth_year , singer.net_worth_millions , singer.* | song : song.singer_id , song.title , song.sales , song.song_id , song.highest_position , song.*
natsql:
select _ from _ where count ( _ ) > _ group by _
natsql and SQL generation:
SELECT name FROM singer GROUP BY name HAVING count(*) > 1
natsql:
SELECT name FROM singer GROUP BY name HAVING count(*) > 1
SQL:
SELECT name FROM singer GROUP BY name HAVING count(*) > 1
self correction:
SELECT name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Singer_ID, singer.Name HAVING count(song.Song_ID) > 1

index is 1023
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1
What are the names of the singers that have more than one songs?
schema_links:
What are the names of the singers that have more than one songs? | singer : singer.name , singer.singer_id , singer.net_worth_millions , singer.citizenship , singer.birth_year , singer.* | song : song.singer_id , song.title , song.sales , song.song_id , song.highest_position , song.*
natsql:
select _ from _ where count ( _ ) > _ group by _
natsql and SQL generation:
SELECT name FROM singer GROUP BY name HAVING count(*) > 1
natsql:
SELECT name FROM singer GROUP BY name HAVING count(*) > 1
SQL:
SELECT name FROM singer GROUP BY name HAVING count(*) > 1
self correction:
SELECT name FROM singer GROUP BY name HAVING COUNT(*) > 1

index is 1024
SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name
Show the names of singers and the total sales of their songs.
schema_links:
Show the names of singers and the total sales of their songs. | singer : singer.name , singer.singer_id , singer.citizenship , singer.birth_year , singer.net_worth_millions , singer.* | song : song.sales , song.title , song.singer_id , song.song_id , song.highest_position , song.*
natsql:
select _ , sum ( _ ) from _ group by _
natsql and SQL generation:
SELECT name, SUM(sales) FROM song GROUP BY name
natsql:
SELECT name, SUM(sales) FROM song GROUP BY name
SQL:
SELECT name, SUM(sales) FROM song GROUP BY name
self correction:
SELECT singer.Name, SUM(song.Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name

index is 1025
SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name
For each singer name, what is the total sales for their songs?
schema_links:
For each singer name, what is the total sales for their songs? | singer : singer.name , singer.singer_id , singer.net_worth_millions , singer.citizenship , singer.birth_year , singer.* | song : song.sales , song.singer_id , song.title , song.song_id , song.highest_position , song.*
natsql:
select _ , sum ( _ ) from _ group by _
natsql and SQL generation:
SELECT singer.name, SUM(song.sales) FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name
natsql:
SELECT singer.name, SUM(song.sales) FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name
SQL:
SELECT singer.name, SUM(song.sales) FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name
self correction:
SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name

index is 1026
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
List the name of singers that do not have any song.
schema_links:
List the name of singers that do not have any song. | singer : singer.name , singer.singer_id , singer.net_worth_millions , singer.citizenship , singer.birth_year , singer.* | song : song.title , song.singer_id , song.sales , song.song_id , song.highest_position , song.*
natsql:
select _ from _ where @.@ not in _
natsql and SQL generation:
SELECT name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
natsql:
SELECT name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
SQL:
SELECT name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
self correction:
SELECT name  FROM singer  WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song)

index is 1027
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
What is the sname of every sing that does not have any song?
schema_links:
What is the sname of every sing that does not have any song? | singer : singer.name , singer.singer_id , singer.birth_year , singer.net_worth_millions , singer.citizenship , singer.* | song : song.title , song.singer_id , song.sales , song.song_id , song.highest_position , song.*
natsql:
select _ from _ where @.@ not in _
natsql and SQL generation:
SELECT name FROM singer WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song)
natsql:
SELECT name FROM singer WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song)
SQL:
SELECT name FROM singer WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song)
self correction:
SELECT name FROM singer WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song)

index is 1028
SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955
Show the citizenship shared by singers with birth year before 1945 and after 1955.
schema_links:
Show the citizenship shared by singers with birth year before 1945 and after 1955. | singer : singer.birth_year , singer.citizenship , singer.name , singer.singer_id , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955
natsql:
SELECT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955
SQL:
SELECT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955
self correction:
SELECT DISTINCT citizenship  FROM singer  WHERE birth_year < 1945 OR birth_year > 1955

index is 1029
SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955
What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?
schema_links:
What are the citizenships that are shared by singers with a birth year before 1945 and after 1955? | singer : singer.birth_year , singer.citizenship , singer.name , singer.singer_id , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955
natsql:
SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955
SQL:
SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955
self correction:
SELECT The given SQLite SQL query has a logical issue. It is checking for birth years that are both before 1945 and after 1955, which is not possible.   To fix the query and retrieve the citizenships shared by singers with a birth year before 1945 or after 1955, you can use the following SQL query:  ```sql SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 OR birth_year > 1955; ```  This query will select distinct citizenship values from the "singer" table where the birth year is either less than 1945 or greater than 1955.

index is 1030
SELECT count(*) FROM Other_Available_Features
How many available features are there in total?
schema_links:
How many available features are there in total? | other_available_features : other_available_features.feature_id , other_available_features.feature_name , other_available_features.feature_type_code , other_available_features.feature_description , other_available_features.* | ref_feature_types : ref_feature_types.feature_type_name , ref_feature_types.feature_type_code , ref_feature_types.* | properties : properties.property_name , properties.property_address , properties.buyer_offered_price , properties.hse_feature_2 , properties.hse_feature_3 , properties.* | other_property_features : other_property_features.feature_id , other_property_features.property_id , other_property_features.property_feature_description , other_property_features.*
natsql:
select count ( _ ) from _
natsql and SQL generation:
SELECT count(*) FROM Other_Available_Features
natsql:
SELECT count(*) FROM Other_Available_Features
SQL:
SELECT count(*) FROM Other_Available_Features
self correction:
SELECT count(*) FROM Other_Available_Features

index is 1031
SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  "AirCon"
What is the feature type name of feature AirCon?
schema_links:
What is the feature type name of feature AirCon? | ref_feature_types : ref_feature_types.feature_type_name , ref_feature_types.feature_type_code , ref_feature_types.* | other_available_features : other_available_features.feature_name ( AirCon ) , other_available_features.feature_id , other_available_features.feature_type_code , other_available_features.feature_description , other_available_features.* | properties : properties.property_name , properties.property_address , properties.buyer_offered_price , properties.hse_feature_2 , properties.property_id , properties.* | other_property_features : other_property_features.property_id , other_property_features.feature_id , other_property_features.property_feature_description , other_property_features.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT feature_type_name FROM ref_feature_types WHERE feature_name = 'AirCon'
natsql:
SELECT feature_type_name FROM ref_feature_types WHERE feature_name = 'AirCon'
SQL:
SELECT feature_type_name FROM ref_feature_types WHERE feature_name = 'AirCon'
self correction:
SELECT feature_type_name  FROM ref_feature_types  JOIN other_available_features ON ref_feature_types.feature_type_code = other_available_features.feature_type_code WHERE other_available_features.feature_name = 'AirCon'

index is 1032
SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code
Show the property type descriptions of properties belonging to that code.
schema_links:
Show the property type descriptions of properties belonging to that code. | properties : properties.property_type_code , properties.property_name , properties.property_address , properties.property_id , properties.date_sold , properties.* | ref_property_types : ref_property_types.property_type_description , ref_property_types.property_type_code , ref_property_types.* | other_property_features : other_property_features.property_feature_description , other_property_features.property_id , other_property_features.feature_id , other_property_features.* | other_available_features : other_available_features.feature_id , other_available_features.feature_type_code , other_available_features.feature_name , other_available_features.feature_description , other_available_features.*
natsql:
select _ from _ where @.@ join _ group by _
natsql and SQL generation:
SELECT property_type_description
FROM ref_property_types
WHERE property_type_code = [property_type_code]
natsql:
SELECT property_type_description
FROM ref_property_types
WHERE property_type_code = [property_type_code]
SQL:
SELECT property_type_description
FROM ref_property_types
WHERE property_type_code = [property_type_code]
self correction:
SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code = [property_type_code]

index is 1033
SELECT property_name FROM Properties WHERE property_type_code  =  "House" UNION SELECT property_name FROM Properties WHERE property_type_code  =  "Apartment" AND room_count  >  1
What are the names of properties that are either houses or apartments with more than 1 room?
schema_links:
What are the names of properties that are either houses or apartments with more than 1 room? | properties : properties.property_name , properties.room_count , properties.property_type_code ( Apartment , House ) , properties.property_address , properties.property_id , properties.* | ref_property_types : ref_property_types.property_type_code ( Apartment , House ) , ref_property_types.property_type_description , ref_property_types.* | other_property_features : other_property_features.property_id , other_property_features.feature_id , other_property_features.property_feature_description , other_property_features.* | other_available_features : other_available_features.feature_id , other_available_features.feature_type_code , other_available_features.feature_name , other_available_features.feature_description , other_available_features.*
natsql:
select _ from _ where _
natsql and SQL generation:
SELECT property_name FROM Properties WHERE (property_type_code = 'Apartment' OR property_type_code = 'House') AND room_count > 1
natsql:
SELECT property_name FROM Properties WHERE (property_type_code = 'Apartment' OR property_type_code = 'House') AND room_count > 1
SQL:
SELECT property_name FROM Properties WHERE (property_type_code = 'Apartment' OR property_type_code = 'House') AND room_count > 1
self correction:
SELECT property_name FROM Properties WHERE (property_type_code = 'Apartment' OR property_type_code = 'House')   AND room_count > 1
