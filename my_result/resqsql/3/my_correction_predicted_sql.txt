SELECT COUNT(DISTINCT Singer_ID) FROM singer
SELECT COUNT(Singer_ID) FROM singer
SELECT name, country, age  FROM singer  ORDER BY age DESC
SELECT singer.Name, singer.Country, singer.Age FROM singer ORDER BY singer.Age DESC
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'
SELECT singer.Name, singer.Song_release_year FROM singer ORDER BY singer.Age ASC LIMIT 1
SELECT s.song_name, s.song_release_year FROM singer s WHERE s.age = (   SELECT MIN(age)   FROM singer )
SELECT DISTINCT Country FROM singer WHERE Age > 20
SELECT DISTINCT Country FROM singer WHERE Age > 20
SELECT country, COUNT(DISTINCT Singer_ID) AS Singer_Count FROM singer GROUP BY country
SELECT country, COUNT(*)  FROM singer  GROUP BY country
SELECT song_name  FROM singer  WHERE age > (SELECT AVG(age) FROM singer)
SELECT singer.Song_Name FROM singer WHERE singer.Age > (   SELECT AVG(singer.Age)   FROM singer )
SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
SELECT MAX(capacity) AS maximum_capacity, AVG(capacity) AS average_capacity FROM stadium
SELECT AVG(Capacity) AS AverageCapacity, MAX(Capacity) AS MaximumCapacity FROM stadium
SELECT name, capacity FROM stadium ORDER BY average DESC LIMIT 1
SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium)
SELECT COUNT(*) FROM concert WHERE Year = 2014 OR Year = 2015
SELECT COUNT(concert_ID) FROM concert WHERE Year = 2014 OR Year = 2015
SELECT stadium.Name, COUNT(concert.concert_ID)  FROM stadium  JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID  GROUP BY stadium.Name
SELECT T1.Name, COUNT(T2.Concert_ID) FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Name
SELECT stadium.name, stadium.capacity  FROM stadium  JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID  WHERE concert.Year >= 2014  GROUP BY stadium.name  ORDER BY COUNT(concert.concert_ID) DESC  LIMIT 1
SELECT name, capacity FROM stadium  JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID  WHERE concert.Year > 2013  GROUP BY stadium.name, stadium.capacity  ORDER BY COUNT(concert.concert_ID) DESC  LIMIT 1
SELECT Year, COUNT(*) AS num_concerts FROM concert GROUP BY Year ORDER BY num_concerts DESC LIMIT 1
SELECT concert.year FROM concert GROUP BY concert.year ORDER BY COUNT(*) DESC LIMIT 1
SELECT name FROM stadium WHERE stadium.Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)
SELECT name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)
SELECT DISTINCT country FROM singer WHERE (age > 40 OR age < 30)
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)
SELECT concert_name, theme, COUNT(singer_id)  FROM concert  JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID  GROUP BY concert_name, theme
SELECT concert_name, theme, COUNT(singer.Singer_ID)  FROM concert  JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID  GROUP BY concert_name, theme
SELECT singer.Name, COUNT(singer_in_concert.Singer_ID)  FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014
SELECT name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE concert.Year = 2014
SELECT singer.Name, singer.Country  FROM singer  WHERE singer.Song_Name LIKE '%Hey%'
SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%'
SELECT stadium.name, stadium.location FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year = 2014 OR concert.Year = 2015 GROUP BY stadium.name, stadium.location
SELECT T1.Name, T1.Location  FROM stadium AS T1  JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID  WHERE T2.Year = 2014    AND T1.Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year = 2015)
SELECT count(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)
SELECT COUNT(concert_ID) AS concert_count  FROM concert  WHERE Stadium_ID = (SELECT Stadium_ID                      FROM stadium                      WHERE Capacity = (SELECT MAX(Capacity)                                        FROM stadium));
SELECT COUNT(PetID) FROM Pets WHERE weight > 10
SELECT COUNT(*) FROM Pets WHERE weight > 10
SELECT Pets.weight FROM Pets WHERE Pets.PetType = 'dog' AND Pets.pet_age = (   SELECT MIN(pet_age)   FROM Pets   WHERE PetType = 'dog' )
SELECT MIN(weight)  FROM Pets  WHERE PetType = 'dog'  AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog')
SELECT MAX(weight) AS max_weight, PetType FROM Pets GROUP BY PetType
SELECT Pets.PetType, MAX(Pets.weight) AS MaxWeight FROM Pets GROUP BY Pets.PetType
SELECT COUNT(DISTINCT T1.PetID)  FROM Has_Pet AS T1  JOIN Student AS T2 ON T1.StuID = T2.StuID  WHERE T2.Age > 20
SELECT COUNT(DISTINCT has_pet.petid) AS pet_count FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20
SELECT COUNT(*)  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Student.Sex = 'F'  AND Pets.PetType = 'dog';
SELECT COUNT(DISTINCT has_pet.petid) FROM has_pet JOIN pets ON pets.petid = has_pet.petid JOIN student ON student.stuid = has_pet.stuid WHERE pets.pettype = 'dog' AND student.sex = 'female'
SELECT COUNT(DISTINCT PetType) FROM Pets
SELECT COUNT(DISTINCT PetType) FROM Pets
SELECT fname FROM student WHERE stuid IN (   SELECT stuid FROM has_pet   WHERE petid IN (     SELECT petid FROM pets WHERE pettype IN ('cat', 'dog')   ) )
SELECT DISTINCT Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' OR Pets.PetType = 'dog'
SELECT DISTINCT student.fname FROM student JOIN has_pet ON student.StuID = has_pet.StuID JOIN Pets ON has_pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' OR Pets.PetType = 'dog' GROUP BY student.fname HAVING COUNT(DISTINCT Pets.PetType) = 2
SELECT fname  FROM Student  WHERE StuID IN (     SELECT StuID      FROM Has_Pet      INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID      WHERE PetType = 'cat' )  AND StuID IN (     SELECT StuID      FROM Has_Pet      INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID      WHERE PetType = 'dog' )
SELECT major, age FROM Student WHERE StuID NOT IN (   SELECT StuID   FROM Has_Pet   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE PetType = 'cat' )
SELECT student.major, student.age FROM Student WHERE Student.StuID NOT IN (     SELECT Has_Pet.StuID     FROM Has_Pet     INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE Pets.PetType = 'cat' )
SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat')
SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN (     SELECT Has_Pet.StuID      FROM Has_Pet      INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE Pets.PetType = 'cat' )
SELECT fname, age  FROM Student  WHERE StuID IN (   SELECT StuID    FROM Has_Pet    WHERE PetID IN (     SELECT PetID      FROM Pets      WHERE PetType = 'dog'   ) )  AND StuID NOT IN (   SELECT StuID    FROM Has_Pet    WHERE PetID IN (     SELECT PetID      FROM Pets      WHERE PetType = 'cat'   ) )
SELECT fname FROM Student WHERE StuID IN (     SELECT StuID     FROM Has_Pet     INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE PetType = 'dog' ) AND StuID NOT IN (     SELECT StuID     FROM Has_Pet     INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE PetType = 'cat' )
SELECT Pets.PetType, Pets.weight FROM Pets WHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT Pets.PetType, Pets.weight  FROM Pets  WHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1
SELECT Pets.PetType, AVG(Pets.pet_age), MAX(Pets.pet_age) FROM Pets GROUP BY Pets.PetType
SELECT pets.pettype, AVG(pets.pet_age), MAX(pets.pet_age) FROM pets GROUP BY pets.pettype
SELECT pets.pettype, AVG(pets.weight)  FROM pets  GROUP BY pets.pettype
SELECT pettype, AVG(weight)  FROM Pets  GROUP BY pettype
SELECT fname, age  FROM Student  WHERE StuID IN (SELECT StuID FROM Has_Pet)
SELECT DISTINCT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)
SELECT T2.PetID  FROM Student AS T1  JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID  WHERE T1.LName = 'Smith'
SELECT petid  FROM has_pet  WHERE stuid = (     SELECT StuID      FROM Student      WHERE LName = 'Smith' )
SELECT COUNT(Pets.PetID) AS num_pets, Student.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID GROUP BY Student.StuID
SELECT student.StuID, COUNT(has_pet.PetID)  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  GROUP BY Student.StuID
SELECT fname, sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING COUNT(Has_Pet.PetID) > 1
SELECT student.fname, student.sex FROM student JOIN has_pet ON student.StuID = has_pet.StuID GROUP BY student.StuID HAVING COUNT(has_pet.PetID) > 1
SELECT student.LName  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'cat'  AND Pets.pet_age = 3;
SELECT student.LName  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3;
SELECT avg(Age)  FROM Student  WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT avg(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT count(*) FROM continents
SELECT COUNT(*) FROM continents
SELECT contid, continent, COUNT(countryname) AS country_count FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY contid, continent;
SELECT contid, continent, COUNT(countryname) AS country_count FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY contid, continent
SELECT COUNT(DISTINCT CountryName) FROM countries
SELECT COUNT(*) FROM countries
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.ModelId) AS NumberOfModels FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id;
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.ModelId)  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  GROUP BY car_makers.FullName, car_makers.Id
SELECT model FROM cars_data JOIN model_list ON cars_data.Id = model_list.ModelId WHERE horsepower = (   SELECT MIN(horsepower)   FROM cars_data )
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.ModelId ORDER BY cars_data.Horsepower ASC LIMIT 1
SELECT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model WHERE T1.Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model WHERE T1.Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT The given SQL query has some issues. Here's the fixed version:  ```sql SELECT DISTINCT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970; ```  Explanation: 1) The tables `model_list`, `car_names`, and `cars_data` need to be joined to retrieve the information about car makers and the production year. 2) The join conditions are based on the foreign keys provided. 3) The `WHERE` clause filters the results based on the year 1970. 4) The `SELECT` statement retrieves the distinct car maker names.
SELECT car_makers.FullName FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970
SELECT car_names.Make, cars_data.Year FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data)
SELECT car_makers.Maker, cars_data.Year  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data)
SELECT DISTINCT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Year > 1980)
SELECT DISTINCT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Year > 1980
SELECT continents.Continent, COUNT(DISTINCT car_makers.Id) AS MakerCount FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent
SELECT continents.Continent, COUNT(car_makers.Id)  FROM continents  JOIN countries ON continents.ContId = countries.Continent  JOIN car_makers ON car_makers.Country = countries.CountryId  GROUP BY continents.Continent
SELECT countries.CountryName  FROM countries  JOIN car_makers ON countries.CountryId = car_makers.Country  GROUP BY countries.CountryName  ORDER BY COUNT(car_makers.Maker) DESC  LIMIT 1
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1
SELECT COUNT(DISTINCT car_names.ModelId) AS Count, car_makers.FullName AS MakerFullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.FullName
SELECT COUNT(model_list.model) , car_makers.id , car_makers.fullname  FROM car_makers  JOIN model_list ON car_makers.id = model_list.maker  JOIN car_names ON model_list.model = car_names.model  JOIN cars_data ON car_names.makeid = cars_data.id  GROUP BY car_makers.id, car_makers.fullname
SELECT cars_data.Accelerate  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  WHERE car_names.Make = 'amc hornet sportabout (sw)'
SELECT accelerate FROM cars_data WHERE Id = (   SELECT MakeId   FROM car_names   WHERE Make = 'amc hornet'   AND Model = 'amc hornet sportabout (sw)' )
SELECT count(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'france'
SELECT COUNT(DISTINCT Maker) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France')
SELECT COUNT(DISTINCT car_names.Model) FROM car_names JOIN model_list ON car_names.Model = model_list.ModelId JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'usa'
SELECT COUNT(DISTINCT Model) FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'United States'
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4
SELECT avg(MPG) FROM cars_data WHERE Cylinders = 4
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974
SELECT min(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974
SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker;
SELECT maker, model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker
SELECT countryname, countryid FROM countries INNER JOIN car_makers ON car_makers.country = countries.countryid
SELECT countryname, countryid FROM countries WHERE countryid IN (SELECT country                     FROM car_makers)
SELECT count(*) FROM cars_data WHERE Horsepower > 150
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150
SELECT year, AVG(Weight) AS AverageWeight FROM cars_data GROUP BY year
SELECT AVG(Weight), Year FROM cars_data GROUP BY Year
SELECT countries.CountryName  FROM countries  JOIN car_makers ON countries.CountryId = car_makers.Country  JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'europe'  GROUP BY countries.CountryName  HAVING COUNT(DISTINCT car_makers.Id) >= 3
SELECT DISTINCT CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'Europe' GROUP BY countries.CountryId HAVING COUNT(DISTINCT car_makers.Id) >= 3
SELECT MAX(cars_data.Horsepower) AS max_horsepower, car_makers.Maker AS make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3 GROUP BY car_makers.Maker
SELECT MAX(cars_data.Horsepower), car_makers.Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3 GROUP BY car_makers.Maker
SELECT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model WHERE T1.MPG = (SELECT MAX(MPG) FROM cars_data)
SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId ORDER BY cars_data.MPG DESC LIMIT 1
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980
SELECT avg(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'volvo'
SELECT avg(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'volvo'
SELECT cylinders, MAX(Accelerate)  FROM cars_data  GROUP BY cylinders
SELECT MAX(Accelerate) FROM cars_data GROUP BY Cylinders
SELECT model, COUNT(make) AS car_count  FROM model_list  GROUP BY model  ORDER BY car_count DESC  LIMIT 1
SELECT model  FROM model_list  GROUP BY model  ORDER BY COUNT(DISTINCT ModelId) DESC  LIMIT 1
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4
SELECT count(*) FROM cars_data WHERE Year = 1980
SELECT count(*) FROM cars_data WHERE Year = 1980
SELECT COUNT(DISTINCT ModelId) FROM model_list  WHERE Maker = (SELECT Id FROM car_makers WHERE FullName = 'American Motor Company')
SELECT COUNT(*)  FROM model_list  WHERE Maker = (SELECT Id FROM car_makers WHERE FullName = 'American Motor Company')
SELECT fullname, id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.fullname, car_makers.id HAVING COUNT(model_list.ModelId) > 3
SELECT car_makers.Maker, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker, car_makers.Id HAVING COUNT(model_list.ModelId) > 3
SELECT DISTINCT Model FROM model_list WHERE Maker = 'General Motors' OR EXISTS (     SELECT *     FROM cars_data     INNER JOIN car_names ON cars_data.Id = car_names.MakeId     INNER JOIN model_list ON car_names.Model = model_list.Model     WHERE cars_data.Weight > 3500 )
SELECT DISTINCT car_names.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500
SELECT DISTINCT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000;
SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 OR Weight > 3000
SELECT Horsepower FROM cars_data WHERE Accelerate = (   SELECT MAX(Accelerate)   FROM cars_data )
SELECT cars_data.Horsepower  FROM cars_data  WHERE cars_data.Accelerate = (SELECT MAX(Accelerate) FROM cars_data)
SELECT cylinders  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  WHERE model_list.maker = 'volvo'  AND cars_data.accelerate = (   SELECT MIN(accelerate)    FROM cars_data    JOIN car_names ON cars_data.id = car_names.makeid    JOIN model_list ON car_names.model = model_list.model    WHERE model_list.maker = 'volvo' )
SELECT cylinders FROM cars_data WHERE accelerate = (   SELECT MIN(accelerate)   FROM cars_data   WHERE ModelId IN (     SELECT ModelId     FROM model_list     WHERE Maker = 'volvo'   ) )
SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT count(DISTINCT countries.CountryName) FROM countries  JOIN car_makers ON countries.CountryId = car_makers.Country  GROUP BY countries.CountryId  HAVING count(DISTINCT car_makers.Id) > 2
SELECT count(DISTINCT T1.CountryId) FROM countries AS T1  JOIN car_makers AS T2 ON T1.CountryId = T2.Country  GROUP BY T1.CountryId  HAVING COUNT(DISTINCT T2.Id) > 2
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6
SELECT model_list.Model FROM cars_data JOIN model_list ON cars_data.Id = model_list.ModelId WHERE cars_data.Cylinders = 4 GROUP BY model_list.Model HAVING cars_data.Horsepower = MAX(cars_data.Horsepower)
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Cylinders = 4 GROUP BY model_list.Model ORDER BY MAX(cars_data.Horsepower) DESC LIMIT 1
SELECT car_names.makeid, car_names.make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data) AND cars_data.cylinders <= 3 GROUP BY car_names.makeid, car_names.make
SELECT car_names.MakeId, car_names.Make  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data)  AND cars_data.Cylinders < 4
SELECT max(MPG) FROM cars_data WHERE Cylinders = 8 AND Year < 1980
SELECT MAX(MPG) AS max_mpg  FROM cars_data  WHERE Cylinders = 8 OR Year < 1980
SELECT model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Weight < 3500 AND car_makers.FullName <> 'Ford Motor Company'
SELECT T2.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T1.Weight < 3500 AND T4.Maker <> 'Ford'
SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers)
SELECT CountryName  FROM countries  WHERE CountryId NOT IN (SELECT Country FROM car_makers)
SELECT id, maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY id, maker HAVING COUNT(DISTINCT model_list.ModelId) >= 2 AND COUNT(DISTINCT car_makers.Id) > 3
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT model_list.Model) >= 2 AND COUNT(DISTINCT car_names.MakeId) > 3
SELECT countryid, countryname  FROM countries  JOIN car_makers ON countries.countryid = car_makers.country  JOIN car_names ON countries.countryid = car_names.country WHERE car_makers.Id IN (SELECT Id FROM car_makers GROUP BY country HAVING COUNT(*) > 3)     OR car_names.model = 'fiat'  GROUP BY countryid, countryname
SELECT countryid, countryname FROM countries LEFT JOIN car_makers ON countries.countryid = car_makers.country LEFT JOIN car_names ON car_makers.id = car_names.makeid GROUP BY countryid, countryname HAVING COUNT(DISTINCT car_makers.id) > 3 OR car_names.make = 'fiat'
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT abbreviation FROM airlines WHERE Airline = "JetBlue Airways"
SELECT abbreviation  FROM airlines  WHERE Airline = 'JetBlue Airways'
SELECT Airline, Abbreviation FROM airlines WHERE Country = "USA"
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'
SELECT airportcode, airportname FROM airports WHERE City = 'Anthony'
SELECT airportcode, airportname FROM airports WHERE City = 'Anthony'
SELECT COUNT(DISTINCT uid) FROM airlines
SELECT COUNT(DISTINCT uid) FROM airlines
SELECT COUNT(*) FROM airports
SELECT COUNT(*) FROM airports
SELECT COUNT(*) FROM flights
SELECT COUNT(*) FROM flights
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
SELECT COUNT(*) FROM airlines WHERE Country = 'USA'
SELECT COUNT(*) FROM airlines WHERE Country = 'USA'
SELECT City, Country FROM airports WHERE AirportName = 'Alton'
SELECT City, Country FROM airports WHERE AirportName = 'Alton'
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
SELECT AirportName  FROM airports  WHERE City = 'Aberdeen'
SELECT AirportName  FROM airports  WHERE City = 'Aberdeen'
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'
SELECT count(*) FROM flights WHERE SourceAirport = 'APG'
SELECT count(*) FROM flights WHERE DestAirport = 'ATO'
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'
SELECT COUNT(*) FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT COUNT(*) FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT count(*)  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*)  FROM flights  WHERE DestAirport = (SELECT AirportCode FROM airports WHERE AirportName = "Aberdeen")
SELECT count(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN airports AS dest ON flights.DestAirport = dest.AirportCode WHERE airports.City = 'Aberdeen' AND dest.City = 'Ashley'
SELECT count(*)  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN airports AS dest ON flights.DestAirport = dest.AirportCode WHERE airports.City = 'Aberdeen'    AND dest.City = 'Ashley'
SELECT count(*) FROM flights WHERE Airline = 'JetBlue Airways'
SELECT count(*) FROM flights WHERE Airline = 'JetBlue Airways'
SELECT count(*) FROM flights  JOIN airlines ON flights.airline = airlines.Abbreviation WHERE airlines.Airline = 'United Airlines'  AND (flights.destairport = 'ASY' OR flights.sourceairport = 'ASY')
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'
SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.Airline JOIN airports ON flights.sourceairport = airports.AirportCode WHERE airports.AirportCode = 'AHD' AND airlines.Airline = 'United Airlines'
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'AHD' AND Airline = 'United Airlines'
SELECT COUNT(*) FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  JOIN airlines ON flights.Airline = airlines.uid WHERE airports.City = 'Aberdeen' AND airlines.Airline = 'United Airlines'
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  JOIN airlines ON flights.Airline = airlines.Airline  WHERE airports.City = "Aberdeen" AND airlines.Airline = "United Airlines"
SELECT airports.City  FROM airports  JOIN flights ON flights.DestAirport = airports.AirportCode  GROUP BY airports.City  ORDER BY COUNT(flights.DestAirport) DESC  LIMIT 1
SELECT airports.City FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1
SELECT airports.City FROM airports INNER JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY COUNT(flights.SourceAirport) DESC LIMIT 1
SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY COUNT(flights.SourceAirport) DESC LIMIT 1
SELECT airports.AirportCode FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.AirportCode ORDER BY COUNT(*) DESC LIMIT 1
SELECT AirportCode FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.AirportCode ORDER BY COUNT(*) DESC LIMIT 1
SELECT airports.AirportCode  FROM flights  GROUP BY flights.DestAirport  ORDER BY COUNT(flights.DestAirport) ASC  LIMIT 1
SELECT airports.AirportCode  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  GROUP BY flights.SourceAirport  ORDER BY COUNT(flights.FlightNo) ASC  LIMIT 1
SELECT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  GROUP BY airlines.Airline  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT airline, COUNT(*) as num_flights FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY airline ORDER BY num_flights DESC LIMIT 1
SELECT abbreviation, country FROM airlines WHERE uid = (   SELECT Airline   FROM flights   GROUP BY Airline   ORDER BY COUNT(*) ASC   LIMIT 1 )
SELECT abbreviation, country FROM airlines WHERE uid = (   SELECT Airline   FROM flights   GROUP BY Airline   HAVING COUNT(*) = (     SELECT MIN(cnt)     FROM (       SELECT COUNT(*) AS cnt       FROM flights       GROUP BY Airline     ) AS temp   ) )
SELECT airlines.Airline  FROM airlines  INNER JOIN flights ON airlines.uid = flights.Airline  WHERE flights.SourceAirport = 'AHD' OR flights.DestAirport = 'AHD'
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD'
SELECT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  WHERE flights.DestAirport = 'AHD'
SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.DestAirport = 'AHD'
SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode IN ('APG', 'CVO') GROUP BY Airline HAVING COUNT(DISTINCT flights.SourceAirport) = 2
SELECT airline FROM airlines WHERE uid IN (     SELECT airline     FROM flights     WHERE SourceAirport IN ('APG', 'CVO') AND DestAirport IN ('APG', 'CVO')     GROUP BY airline     HAVING COUNT(DISTINCT SourceAirport) > 1 )
SELECT Airline FROM airlines WHERE EXISTS (     SELECT * FROM flights     WHERE sourceairport = 'CVO' AND airline = airlines.Abbreviation ) AND NOT EXISTS (     SELECT * FROM flights     WHERE sourceairport = 'APG' AND airline = airlines.Abbreviation )
SELECT airline FROM airlines  WHERE airline IN (   SELECT Airline    FROM flights    WHERE SourceAirport = 'CVO'    AND DestAirport <> 'APG' )  AND airline NOT IN (   SELECT Airline    FROM flights    WHERE SourceAirport = 'APG'    AND DestAirport <> 'APG' )
SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY airlines.uid HAVING COUNT(flights.FlightNo) >= 10
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING COUNT(flights.FlightNo) >= 10
SELECT airlines.Airline FROM airlines INNER JOIN flights ON airlines.Abbreviation = flights.Airline GROUP BY airlines.Airline HAVING COUNT(*) < 200
SELECT airlines.Airline FROM flights INNER JOIN airlines ON flights.Airline = airlines.Abbreviation GROUP BY airlines.Airline HAVING COUNT(flights.FlightNo) < 200
SELECT FlightNo  FROM flights  WHERE Airline = 'United Airlines'
SELECT FlightNo FROM flights WHERE Airline = 'United Airlines'
SELECT flightno FROM flights WHERE sourceairport = "APG";
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'APG'
SELECT flights.FlightNo  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.AirportCode = "APG"
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName = 'APG'
SELECT flights.FlightNo  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT flights.flightno  FROM flights  JOIN airports ON flights.destairport = airports.airportcode  WHERE airports.city = "Aberdeen"
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT count(*) FROM flights WHERE destairport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen' OR City = 'Abilene')
SELECT COUNT(*) FROM flights WHERE DestAirport IN (     SELECT AirportCode FROM airports WHERE AirportName IN ('Aberdeen', 'Abilene') )
SELECT airportname FROM airports WHERE airports.airportcode NOT IN (SELECT sourceairport FROM flights)  AND airports.airportcode NOT IN (SELECT destairport FROM flights)
SELECT airports.AirportName  FROM airports  LEFT JOIN flights ON airports.AirportCode = flights.DestAirport OR airports.AirportCode = flights.SourceAirport  WHERE flights.DestAirport IS NULL OR flights.SourceAirport IS NULL
SELECT COUNT(*) FROM employee
SELECT COUNT(Employee_ID) FROM employee
SELECT employee.Name FROM employee ORDER BY employee.Age ASC
SELECT employee.Name FROM employee ORDER BY employee.Age ASC
SELECT city, COUNT(Employee_ID) FROM employee GROUP BY city
SELECT employee.City, COUNT(*) FROM employee GROUP BY employee.City
SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1
SELECT DISTINCT city  FROM employee  WHERE age < 30 GROUP BY city  HAVING count(*) > 1
SELECT COUNT(DISTINCT T2.Shop_ID) AS Shop_Count, T2.Location FROM shop AS T2 GROUP BY T2.Location
SELECT count(Shop_ID), Location FROM shop GROUP BY Location
SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop)
SELECT manager_name, district FROM shop WHERE number_products = (     SELECT MAX(number_products)      FROM shop )
SELECT MIN(Number_products), MAX(Number_products) FROM shop
SELECT MIN(Number_products), MAX(Number_products) FROM shop
SELECT shop.name, shop.location, shop.district  FROM shop  ORDER BY shop.number_products DESC
SELECT name, location, district  FROM shop  ORDER BY number_products DESC
SELECT name  FROM shop  WHERE number_products > (SELECT AVG(number_products) FROM shop);
SELECT shop.Name FROM shop WHERE shop.Number_products > (SELECT AVG(Number_products) FROM shop)
SELECT employee.Name  FROM employee  JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID  GROUP BY employee.Name  ORDER BY COUNT(evaluation.Employee_ID) DESC  LIMIT 1
SELECT employee.name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.name ORDER BY COUNT(evaluation.Employee_ID) DESC LIMIT 1
SELECT employee.Name FROM employee INNER JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1
SELECT name  FROM employee  WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
SELECT name  FROM employee  WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1
SELECT shop.name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.name ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
SELECT shop.Name  FROM shop  LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL
SELECT COUNT(DISTINCT T2.Employee_ID) AS NumEmployees, T1.Name  FROM shop AS T1  JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID  GROUP BY T1.Name
SELECT COUNT(T1.Employee_ID), T2.Name FROM shop AS T2 JOIN hiring AS T3 ON T2.Shop_ID = T3.Shop_ID JOIN employee AS T1 ON T3.Employee_ID = T1.Employee_ID GROUP BY T2.Name
SELECT SUM(Bonus) AS Total_Bonus FROM evaluation
SELECT SUM(Bonus) FROM evaluation
SELECT * FROM hiring
SELECT hiring.* FROM hiring
SELECT DISTINCT district  FROM shop  WHERE district IN (     SELECT DISTINCT district      FROM shop      WHERE number_products < 3000 )  AND district IN (     SELECT DISTINCT district      FROM shop      WHERE number_products > 10000 )
SELECT DISTINCT district  FROM shop  WHERE district IN (     SELECT district      FROM shop      WHERE number_products < 3000 ) AND district IN (     SELECT district      FROM shop      WHERE number_products > 10000 )
SELECT count(DISTINCT Location) FROM shop
SELECT COUNT(DISTINCT Location) FROM shop
SELECT COUNT(*) FROM Documents
SELECT COUNT(*) FROM Documents
SELECT document_id, document_name, document_description FROM Documents
SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents
SELECT document_name, template_id FROM Documents WHERE document_description LIKE '%w%'
SELECT document_name, template_id FROM Documents WHERE document_description LIKE '%w%';
SELECT document_id, template_id, document_description FROM documents WHERE document_name = "Robbin CV"
SELECT document_id, template_id, document_description FROM documents WHERE document_name = 'Robbin CV'
SELECT COUNT(DISTINCT Template_ID) FROM Documents
SELECT COUNT(DISTINCT Template_ID) FROM Documents
SELECT COUNT(DISTINCT documents.Document_ID) FROM documents JOIN templates ON documents.Template_ID = templates.Template_ID WHERE templates.Template_Type_Code = 'PPT'
SELECT COUNT(*) FROM Documents WHERE Template_ID IN (   SELECT Template_ID   FROM Templates   WHERE Template_Type_Code = (     SELECT Template_Type_Code     FROM Ref_Template_Types     WHERE Template_Type_Description = 'PPT'   ) )
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS Document_Count FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID
SELECT Templates.Template_ID, COUNT(Documents.Template_ID)  FROM Documents  INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID  GROUP BY Templates.Template_ID
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1
SELECT template_id, template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY template_id, template_type_code HAVING COUNT(document_id) = (   SELECT MAX(doc_count)   FROM (     SELECT template_id, COUNT(document_id) AS doc_count     FROM documents     GROUP BY template_id   ) )
SELECT Templates.Template_ID FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1
SELECT template_id  FROM Templates  GROUP BY template_id  HAVING COUNT(DISTINCT Document_ID) > 1
SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_ID NOT IN (   SELECT Documents.Template_ID   FROM Documents )
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Template_ID IS NULL
SELECT COUNT(*) FROM Templates
SELECT COUNT(*) FROM Templates
SELECT template_id, version_number, template_type_code FROM templates
SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates
SELECT DISTINCT Template_Type_Code FROM Templates
SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Templates.Template_Type_Code IN ('PP', 'PPT')
SELECT templates.template_id  FROM templates  WHERE templates.template_type_code = 'PP' OR templates.template_type_code = 'PPT'
SELECT count(*) FROM templates WHERE Template_Type_Code = 'CV'
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5
SELECT templates.version_number, templates.template_type_code  FROM templates  WHERE templates.version_number > 5
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS Number_of_Templates FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code
SELECT template_type_code, COUNT(*)  FROM ref_template_types  JOIN templates ON templates.template_type_code = ref_template_types.template_type_code  GROUP BY ref_template_types.template_type_code
SELECT Ref_Template_Types.Template_Type_Code FROM Templates GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY COUNT(Templates.Template_ID) DESC LIMIT 1
SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
SELECT Ref_Template_Types.Template_Type_Code FROM Templates INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code HAVING COUNT(Templates.Template_ID) < 3
SELECT Ref_Template_Types.Template_Type_Code  FROM Templates  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  GROUP BY Templates.Template_Type_Code  HAVING COUNT(Templates.Template_ID) < 3
SELECT version_number, template_type_code  FROM templates  WHERE version_number = (SELECT MIN(version_number) FROM templates)
SELECT Templates.Version_Number, Templates.Template_Type_Code  FROM Templates  WHERE Templates.Version_Number = (     SELECT MIN(Templates.Version_Number)      FROM Templates )
SELECT Ref_Template_Types.Template_Type_Code  FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = "Data base"
SELECT template_type_code FROM templates  JOIN documents ON templates.template_id = documents.template_id WHERE documents.document_name = 'Data base'
SELECT documents.document_name  FROM documents  JOIN templates ON documents.template_id = templates.template_id  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_code = 'BK'
SELECT documents.document_name  FROM documents  JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'BK'
SELECT Ref_Template_Types.Template_Type_Code, COUNT(*) AS num_documents FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code
SELECT ref_template_types.template_type_code, COUNT(*)  FROM ref_template_types  JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  JOIN documents ON templates.template_id = documents.template_id  GROUP BY ref_template_types.template_type_code
SELECT Ref_Template_Types.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
SELECT Ref_Template_Types.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY COUNT(Documents.Template_ID) DESC LIMIT 1
SELECT Ref_Template_Types.Template_Type_Code  FROM Ref_Template_Types  LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code  LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID  WHERE Documents.Template_ID IS NULL
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT DISTINCT Template_Type_Code FROM Templates)
SELECT template_type_code, template_type_description FROM ref_template_types
SELECT template_type_code, template_type_description  FROM Ref_Template_Types
SELECT template_type_description  FROM Ref_Template_Types  WHERE Template_Type_Code = "AD"
SELECT template_type_description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = "Book"
SELECT template_type_code  FROM ref_template_types  WHERE template_type_description = "Book"
SELECT DISTINCT ref_template_types.template_type_description  FROM ref_template_types  JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  JOIN documents ON templates.template_id = documents.template_id  JOIN paragraphs ON documents.document_id = paragraphs.document_id
SELECT DISTINCT ref_template_types.template_type_description FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code JOIN documents ON templates.template_id = documents.template_id;
SELECT templates.template_id  FROM templates  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_description = "Presentation"
SELECT Templates.Template_ID FROM Templates INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation'
SELECT COUNT(*) FROM Paragraphs
SELECT COUNT(*) FROM Paragraphs;
SELECT COUNT(*) FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show')
SELECT COUNT(paragraphs.Paragraph_ID) FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show'
SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea'
SELECT Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text LIKE '%Korea%'
SELECT paragraph_id, paragraph_text FROM paragraphs WHERE document_id = (   SELECT document_id   FROM documents   WHERE document_name = 'Welcome to NY' )
SELECT paragraph_id, paragraph_text  FROM paragraphs  WHERE document_id = (   SELECT document_id    FROM documents    WHERE document_name = 'Welcome to NY' )
SELECT Paragraph_Text FROM Paragraphs  WHERE Document_ID = (   SELECT Document_ID FROM Documents    WHERE Document_Name = "Customer reviews" )
SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID = (   SELECT Document_ID   FROM Documents   WHERE Document_Name = 'Customer reviews' )
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Paragraph_Count FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID
SELECT documents.document_id, COUNT(paragraphs.paragraph_id)  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  ORDER BY documents.document_id
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id)  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id, documents.document_name
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS paragraph_count FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name
SELECT documents.document_id  FROM paragraphs  INNER JOIN documents ON paragraphs.document_id = documents.document_id  GROUP BY documents.document_id  HAVING COUNT(paragraphs.paragraph_id) > 1
SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(paragraph_id) >= 2
SELECT documents.document_id, documents.document_name FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1
SELECT documents.document_id, documents.document_name  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1
SELECT documents.document_id  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  ORDER BY COUNT(paragraphs.paragraph_id) ASC  LIMIT 1
SELECT documents.document_id  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  ORDER BY COUNT(paragraphs.paragraph_id) ASC  LIMIT 1
SELECT Documents.Document_ID  FROM Paragraphs  JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID  GROUP BY Documents.Document_ID  HAVING COUNT(Paragraphs.Paragraph_ID) >= 1 AND COUNT(Paragraphs.Paragraph_ID) <= 2
SELECT documents.document_id  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  HAVING COUNT(paragraphs.paragraph_id) BETWEEN 1 AND 2
SELECT There seems to be an issue with the given SQL query. The condition `paragraph_text = 'Brazil' AND paragraph_text = 'Ireland'` will never be true because a single row cannot have both "Brazil" and "Ireland" in the `paragraph_text` column simultaneously.   To fix the query and retrieve the document ID with paragraph text 'Brazil' and 'Ireland', you can use the `IN` operator with a list of values. Here's the fixed SQL query:  ```sql SELECT document_id FROM paragraphs WHERE paragraph_text IN ('Brazil', 'Ireland') ```  This query will return the document IDs for paragraphs containing either 'Brazil' or 'Ireland' in the `paragraph_text` column.
SELECT document_id  FROM paragraphs  WHERE paragraph_text = 'Brazil'    AND document_id IN (SELECT document_id                        FROM paragraphs                        WHERE paragraph_text = 'Ireland')
SELECT COUNT(Teacher_ID) FROM teacher
SELECT COUNT(DISTINCT Teacher_ID) FROM teacher
SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC
SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC
SELECT Name, Age, Hometown FROM teacher
SELECT Name, Age, Hometown FROM teacher
SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'
SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District'
SELECT name FROM teacher WHERE age IN (32, 33)
SELECT name FROM teacher WHERE age = 32 OR age = 33
SELECT hometown  FROM teacher  ORDER BY age ASC  LIMIT 1
SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1
SELECT teacher.Hometown, COUNT(DISTINCT teacher.Teacher_ID)  FROM teacher  GROUP BY teacher.Hometown
SELECT teacher.Hometown, COUNT(*)  FROM teacher  GROUP BY teacher.Hometown
SELECT teacher.Hometown FROM teacher GROUP BY teacher.Hometown ORDER BY COUNT(*) DESC LIMIT 1
SELECT hometown, COUNT(*) AS count FROM teacher GROUP BY hometown ORDER BY count DESC LIMIT 1
SELECT teacher.hometown FROM teacher GROUP BY teacher.hometown HAVING COUNT(DISTINCT teacher.Teacher_ID) > 1
SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(DISTINCT Teacher_ID) >= 2
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC
SELECT teacher.Name  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course.Course_ID = course_arrange.Course_ID WHERE course.Course = "Math"
SELECT teacher.Name  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  JOIN course ON course.Course_ID = course_arrange.Course_ID  WHERE course.Course = 'Math'
SELECT T1.Name, COUNT(T2.Course_ID)  FROM teacher AS T1  JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID  GROUP BY T1.Name
SELECT T1.Name, COUNT(T2.Course_ID) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Name
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name HAVING COUNT(DISTINCT course_arrange.Course_ID) > 1
SELECT name  FROM teacher  JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id  GROUP BY teacher.teacher_id  HAVING COUNT(DISTINCT course_arrange.course_id) >= 2
SELECT teacher.Name  FROM teacher  LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  WHERE course_arrange.Teacher_ID IS NULL
SELECT teacher.Name FROM teacher LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID WHERE course_arrange.Teacher_ID IS NULL
SELECT count(*) FROM visitor WHERE Age < 30
SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Level_of_membership DESC
SELECT avg(Age) FROM visitor WHERE Level_of_membership <= 4
SELECT visitor.Name, visitor.Level_of_membership  FROM visitor  WHERE visitor.Level_of_membership > 4  ORDER BY visitor.Age ASC
SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009
SELECT open_year, num_of_staff FROM museum WHERE Name = 'Plaza Museum'
SELECT name FROM museum WHERE num_of_staff > (SELECT MIN(num_of_staff) FROM museum WHERE open_year > 2010)
SELECT visitor.ID, visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID, visitor.Name, visitor.Age HAVING COUNT(DISTINCT visit.Museum_ID) > 1
SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.ID = (     SELECT visitor_ID     FROM visit     GROUP BY visitor_ID     ORDER BY SUM(Total_spent) DESC     LIMIT 1 )
SELECT museum.Museum_ID, museum.Name FROM museum JOIN visit ON museum.Museum_ID = visit.Museum_ID GROUP BY museum.Museum_ID, museum.Name ORDER BY COUNT(visit.Museum_ID) DESC LIMIT 1
SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)
SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visit.visitor_ID = visitor.ID GROUP BY visitor.ID ORDER BY visit.Num_of_Ticket DESC LIMIT 1
SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit
SELECT SUM(Total_spent) AS Total_Expense FROM visit WHERE visitor_ID IN (SELECT ID FROM visitor WHERE Level_of_membership = 1)
SELECT name FROM visitor WHERE ID IN (   SELECT visitor_ID   FROM visit   WHERE Museum_ID IN (     SELECT Museum_ID     FROM museum     WHERE Open_Year < 2009   ) ) AND ID IN (   SELECT visitor_ID   FROM visit   WHERE Museum_ID IN (     SELECT Museum_ID     FROM museum     WHERE Open_Year > 2011   ) )
SELECT count(DISTINCT T1.ID) FROM visitor AS T1 LEFT JOIN visit AS T2 ON T1.ID = T2.visitor_ID LEFT JOIN museum AS T3 ON T2.Museum_ID = T3.Museum_ID WHERE T3.Open_Year <= 2010 OR T3.Open_Year IS NULL
SELECT count(DISTINCT Museum_ID) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008
SELECT COUNT(DISTINCT player_id) FROM players
SELECT count(*) FROM players
SELECT COUNT(*) FROM matches
SELECT count(*) FROM matches
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SELECT AVG(loser_age), AVG(winner_age) FROM matches JOIN players ON matches.loser_id = players.player_id JOIN players AS p2 ON matches.winner_id = p2.player_id;
SELECT avg(loser_age), avg(winner_age) FROM matches
SELECT AVG(winner_rank) FROM matches
SELECT AVG(winner_rank) FROM matches
SELECT max(loser_rank) AS highest_rank FROM matches GROUP BY loser_rank
SELECT MAX(loser_rank) AS best_rank FROM matches
SELECT COUNT(DISTINCT country_code) FROM players
SELECT COUNT(DISTINCT country_code) AS distinct_countries FROM players
SELECT COUNT(DISTINCT loser_name) FROM matches
SELECT COUNT(DISTINCT loser_name) FROM matches
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10
SELECT tourney_name  FROM matches  GROUP BY tourney_name  HAVING COUNT(*) > 10
SELECT DISTINCT winner_name  FROM matches  WHERE year = 2013  AND winner_id IN (SELECT winner_id FROM matches WHERE year = 2016)
SELECT T1.first_name, T1.last_name  FROM players AS T1  WHERE EXISTS (   SELECT *    FROM matches AS T2    WHERE T1.player_id = T2.winner_id    AND T2.year IN (2013, 2016) )
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016
SELECT COUNT(match_num) FROM matches WHERE year = 2013 OR year = 2016
SELECT country_code, first_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'Australian Open' OR matches.tourney_name = 'WTA Championships' GROUP BY country_code, first_name HAVING COUNT(DISTINCT matches.tourney_name) = 2
SELECT first_name, country_code FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'Australian Open'   AND matches.tourney_name = 'WTA Championships'
SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date ASC LIMIT 1
SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date LIMIT 1
SELECT first_name, last_name FROM players ORDER BY birth_date
SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY birth_date
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(rankings.tours) DESC LIMIT 1
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(rankings.tours) DESC LIMIT 1
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1
SELECT year, COUNT(*) AS match_count  FROM matches  GROUP BY year  ORDER BY match_count DESC  LIMIT 1
SELECT matches.winner_name, SUM(matches.winner_rank_points) AS total_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY matches.winner_id ORDER BY COUNT(matches.winner_id) DESC LIMIT 1
SELECT matches.winner_name, MAX(rankings.ranking_points)  FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON matches.winner_id = rankings.player_id GROUP BY matches.winner_name
SELECT matches.winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (   SELECT MAX(winner_rank_points)   FROM matches   WHERE tourney_name = 'Australian Open' )
SELECT winner_name  FROM matches  WHERE tourney_name = 'Australian Open'  AND winner_rank_points = (     SELECT MAX(winner_rank_points)      FROM matches      WHERE tourney_name = 'Australian Open' )
SELECT matches.winner_name, matches.loser_name  FROM matches  WHERE minutes = (   SELECT MAX(minutes)    FROM matches )
SELECT matches.winner_name, matches.loser_name FROM matches ORDER BY matches.minutes DESC LIMIT 1
SELECT AVG(rankings.ranking), players.first_name  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.player_id, players.first_name
SELECT players.first_name, AVG(rankings.ranking)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name
SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name
SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name
SELECT country_code, COUNT(DISTINCT player_id) FROM players GROUP BY country_code
SELECT country_code, COUNT(DISTINCT player_id)  FROM players  GROUP BY country_code
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT country_code, COUNT(*) AS player_count FROM players GROUP BY country_code ORDER BY player_count DESC LIMIT 1
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50
SELECT country_code  FROM players  GROUP BY country_code  HAVING COUNT(DISTINCT player_id) > 50
SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date
SELECT sum(tours) as total_tours, ranking_date FROM rankings GROUP BY ranking_date
SELECT year, COUNT(*)  FROM matches  GROUP BY year
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year
SELECT matches.winner_name, matches.winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY players.birth_date DESC LIMIT 3
SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY players.birth_date DESC LIMIT 3
SELECT COUNT(DISTINCT winner_id) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = 'WTA Championships' AND players.hand = 'L'
SELECT COUNT(DISTINCT matches.winner_id)  FROM matches  JOIN players ON matches.winner_id = players.player_id  WHERE matches.tourney_name = "WTA Championships"  AND players.hand = "L"
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches)
SELECT players.first_name, players.country_code, players.birth_date FROM players WHERE player_id = (   SELECT player_id   FROM rankings   WHERE ranking_points = (     SELECT MAX(ranking_points)     FROM rankings   ) )
SELECT hand, COUNT(*)  FROM players  GROUP BY hand
SELECT hand, COUNT(DISTINCT player_id) FROM players GROUP BY hand
SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured'
SELECT name, tonnage FROM ship ORDER BY name DESC
SELECT battle.name, battle.date, battle.result FROM battle
SELECT max(killed) AS maximum_death_toll, min(killed) AS minimum_death_toll FROM death
SELECT AVG(injured) FROM death
SELECT note, killed, injured FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE tonnage = 't');
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril'
SELECT battle.id, battle.name  FROM battle  JOIN ship ON battle.id = ship.lost_in_battle  WHERE ship.ship_type = 'Brig'
SELECT battle.id, battle.name  FROM battle  JOIN ship ON ship.lost_in_battle = battle.id  JOIN death ON death.caused_by_ship_id = ship.id  GROUP BY battle.id, battle.name  HAVING SUM(death.killed) > 10
SELECT ship.id, ship.name  FROM ship  JOIN death ON ship.id = death.caused_by_ship_id  GROUP BY ship.id, ship.name  ORDER BY SUM(death.injured) DESC  LIMIT 1
SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'
SELECT count(DISTINCT result) FROM battle
SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225');
SELECT name, date FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name = 'Lettice' OR ship.name = 'HMS Atalanta'
SELECT name, result, bulgarian_commander  FROM battle  WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel');
SELECT note FROM death WHERE note LIKE '%East%'
SELECT addresses.line_1, addresses.line_2  FROM addresses
SELECT line_1, line_2 FROM Addresses
SELECT count(*) FROM Courses
SELECT count(*) FROM Courses
SELECT course_description FROM Courses WHERE course_name = 'math'
SELECT course_description FROM Courses WHERE course_name LIKE '%math%'
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
SELECT T1.department_name, T1.department_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_name, T1.department_id ORDER BY COUNT(T2.degree_program_id) DESC LIMIT 1
SELECT Departments.department_name, Departments.department_id  FROM Departments  JOIN Degree_Programs ON Degree_Programs.department_id = Departments.department_id  GROUP BY Departments.department_id  ORDER BY COUNT(Degree_Programs.degree_program_id) DESC  LIMIT 1
SELECT COUNT(DISTINCT department_id) FROM Departments
SELECT COUNT(DISTINCT department_id) FROM Departments
SELECT COUNT(DISTINCT degree_summary_name) AS total_degree_names FROM Degree_Programs
SELECT COUNT(DISTINCT degree_program_id) FROM Degree_Programs
SELECT COUNT(DISTINCT Degree_Programs.degree_program_id)  FROM Degree_Programs  JOIN Departments ON Degree_Programs.department_id = Departments.department_id  WHERE Departments.department_name = "engineering"
SELECT count(degree_program_id)  FROM Degree_Programs  JOIN Departments ON Degree_Programs.department_id = Departments.department_id  WHERE Departments.department_name = "engineering"
SELECT section_name, section_description FROM Sections
SELECT section_name, section_description  FROM Sections
SELECT course_name, course_id  FROM Courses  JOIN Sections ON Courses.course_id = Sections.course_id  GROUP BY Courses.course_id, Courses.course_name  HAVING COUNT(Sections.section_id) <= 2
SELECT Courses.course_name, Courses.course_id FROM Courses LEFT JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_name, Courses.course_id HAVING COUNT(Sections.section_id) < 2
SELECT section_name FROM Sections ORDER BY section_name DESC
SELECT Sections.section_name FROM Sections ORDER BY Sections.section_name DESC
SELECT Semesters.semester_name, Semesters.semester_id  FROM Semesters  INNER JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id  GROUP BY Semesters.semester_id, Semesters.semester_name  ORDER BY COUNT(Student_Enrolment.student_id) DESC  LIMIT 1
SELECT Semesters.semester_name, Semesters.semester_id FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY Semesters.semester_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
SELECT first_name, middle_name, last_name, student_id FROM Students WHERE student_id IN (     SELECT student_id     FROM Student_Enrolment     GROUP BY student_id     HAVING COUNT(DISTINCT degree_program_id) = 2     AND COUNT(DISTINCT semester_id) = 1 )
SELECT students.first_name, students.middle_name, students.last_name, students.student_id  FROM students  JOIN student_enrolment ON students.student_id = student_enrolment.student_id  GROUP BY students.student_id  HAVING count(DISTINCT student_enrolment.degree_program_id) = 2  AND count(DISTINCT student_enrolment.semester_id) = 1
SELECT students.first_name, students.middle_name, students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name = 'Bachelor'
SELECT first_name, middle_name, last_name FROM Students WHERE student_id IN (   SELECT student_id   FROM Student_Enrolment   WHERE degree_program_id IN (     SELECT degree_program_id     FROM Degree_Programs     WHERE degree_summary_name = 'Bachelors'   ) )
SELECT Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT degree_summary_name, COUNT(*) AS student_count FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY student_count DESC LIMIT 1
SELECT Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_program_id ORDER BY COUNT(Student_Enrolment.student_id) DESC LIMIT 1
SELECT degree_program_id, degree_summary_description FROM Degree_Programs WHERE degree_program_id = (     SELECT degree_program_id     FROM Student_Enrolment     GROUP BY degree_program_id     ORDER BY COUNT(*) DESC     LIMIT 1 )
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(Student_Enrolment.student_enrolment_id) AS num_enrollments FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY num_enrollments DESC LIMIT 1
SELECT students.first_name, students.middle_name, students.last_name, students.student_id, COUNT(student_enrolment.student_enrolment_id)  FROM students  JOIN student_enrolment ON students.student_id = student_enrolment.student_id  GROUP BY students.student_id  ORDER BY COUNT(student_enrolment.student_enrolment_id) DESC  LIMIT 1
SELECT semester_name  FROM Semesters  WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)
SELECT DISTINCT course_name  FROM Courses  WHERE course_id IN (SELECT DISTINCT course_id FROM Student_Enrolment_Courses)
SELECT DISTINCT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses)
SELECT courses.course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY courses.course_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_name ORDER BY COUNT(Student_Enrolment_Courses.student_enrolment_id) DESC LIMIT 1
SELECT DISTINCT last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE Addresses.state_province_county = 'North Carolina' AND Students.student_id NOT IN (SELECT student_id FROM Student_Enrolment)
SELECT last_name  FROM students  JOIN addresses ON students.current_address_id = addresses.address_id  WHERE state_province_county = 'North Carolina'  AND student_id NOT IN (SELECT student_id FROM student_enrolment)
SELECT transcript_date, transcript_id FROM Transcripts JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id GROUP BY transcript_id HAVING COUNT(DISTINCT Transcript_Contents.student_course_id) >= 2
SELECT transcripts.transcript_date, transcripts.transcript_id  FROM transcripts  JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id  GROUP BY transcripts.transcript_id  HAVING COUNT(transcript_contents.student_course_id) >= 2
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT Students.first_name, Students.middle_name, Students.last_name  FROM Students  ORDER BY Students.date_first_registered  LIMIT 1
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered LIMIT 1
SELECT students.first_name, students.middle_name, students.last_name FROM students ORDER BY students.date_first_registered LIMIT 1
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered LIMIT 1
SELECT first_name  FROM Students  WHERE permanent_address_id != current_address_id
SELECT Students.first_name FROM Students INNER JOIN Addresses AS perm_address ON Students.permanent_address_id = perm_address.address_id INNER JOIN Addresses AS current_address ON Students.current_address_id = current_address.address_id WHERE perm_address.line_1 != current_address.line_1
SELECT T1.address_id, T1.line_1, T1.line_2, T1.line_3 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id, T1.line_1, T1.line_2, T1.line_3 HAVING COUNT(*) = (     SELECT COUNT(*)     FROM Students     GROUP BY current_address_id     ORDER BY COUNT(*) DESC     LIMIT 1 )
SELECT Addresses.address_id, Addresses.line_1, Addresses.line_2 FROM Addresses JOIN Students ON Students.current_address_id = Addresses.address_id GROUP BY Addresses.address_id, Addresses.line_1, Addresses.line_2 ORDER BY COUNT(*) DESC LIMIT 1
SELECT AVG(transcript_date) FROM Transcripts
SELECT avg(transcript_date) FROM Transcripts
SELECT transcript_date, other_details  FROM Transcripts  ORDER BY transcript_date ASC  LIMIT 1
SELECT Transcripts.transcript_date, Transcripts.other_details FROM Transcripts ORDER BY Transcripts.transcript_date ASC LIMIT 1;
SELECT count(DISTINCT transcript_id) FROM Transcripts
SELECT COUNT(*) FROM Transcripts
SELECT MAX(transcript_date) FROM Transcripts
SELECT MAX(transcript_date) AS last_transcript_date FROM Transcripts
SELECT MAX(cnt) AS max_enrollment_result, course_id FROM (     SELECT COUNT(*) AS cnt, course_id     FROM Student_Enrolment_Courses     GROUP BY course_id ) AS T GROUP BY course_id
SELECT MAX(course_count) AS max_course_count, course_id, student_enrolment_id FROM (   SELECT COUNT(*) AS course_count, student_course_id, course_id   FROM Transcript_Contents   JOIN Student_Enrolment_Courses ON Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id   GROUP BY student_course_id, course_id ) AS course_counts GROUP BY course_id ORDER BY max_course_count DESC LIMIT 1
SELECT transcript_date, transcript_id FROM Transcripts GROUP BY transcript_date, transcript_id ORDER BY COUNT(*) ASC LIMIT 1
SELECT transcript_date, transcript_id  FROM Transcripts  JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id  GROUP BY Transcripts.transcript_id  ORDER BY COUNT(*) ASC  LIMIT 1
SELECT DISTINCT semester_name  FROM semesters  WHERE semester_id IN (     SELECT semester_id      FROM student_enrolment      WHERE degree_program_id IN (         SELECT degree_program_id          FROM degree_programs          WHERE degree_summary_name = 'Bachelor'     ) ) AND semester_id IN (     SELECT semester_id      FROM student_enrolment      WHERE degree_program_id IN (         SELECT degree_program_id          FROM degree_programs          WHERE degree_summary_name = 'Master'     ) )
SELECT semester_id  FROM Student_Enrolment  WHERE degree_program_id = 'Masters'    AND semester_id IN (     SELECT semester_id      FROM Student_Enrolment      WHERE degree_program_id = 'Bachelors'   )
SELECT count(DISTINCT Students.current_address_id) FROM Students
SELECT DISTINCT address_id FROM Addresses WHERE address_id IN (   SELECT current_address_id   FROM Students ) OR address_id IN (   SELECT permanent_address_id   FROM Students )
SELECT students.student_id, students.current_address_id, students.permanent_address_id, students.first_name, students.middle_name, students.last_name, students.cell_mobile_number, students.email_address, students.ssn, students.date_first_registered, students.date_left, students.other_student_details FROM students ORDER BY students.last_name DESC, students.first_name DESC
SELECT Students.* FROM Students ORDER BY last_name DESC
SELECT Sections.*  FROM Sections  WHERE section_name = 'h'
SELECT section_description FROM Sections WHERE section_name = 'h'
SELECT DISTINCT first_name  FROM Students  JOIN Addresses ON Students.permanent_address_id = Addresses.address_id  WHERE Addresses.country = 'Haiti'  OR Students.cell_mobile_number = '09700166582'
SELECT first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'
SELECT title FROM Cartoon ORDER BY title ASC
SELECT Title FROM Cartoon ORDER BY Title ASC
SELECT cartoon.title  FROM cartoon  WHERE cartoon.directed_by = "Ben Jones"
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
SELECT COUNT(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr"
SELECT cartoon.Title, cartoon.Directed_by  FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id ORDER BY Cartoon.Original_air_date;
SELECT title, directed_by FROM Cartoon ORDER BY Original_air_date;
SELECT title  FROM Cartoon  WHERE Directed_by IN ("Ben Jones", "Brandon Vietti")
SELECT title FROM cartoon WHERE directed_by IN ('Ben Jones', 'Brandon Vietti')
SELECT TV_Channel.Country, COUNT(*)  FROM TV_Channel  GROUP BY TV_Channel.Country  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT TV_Channel.Country, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY Channel_Count DESC LIMIT 1
SELECT count(DISTINCT series_name), count(DISTINCT Content) FROM TV_Channel
SELECT count(DISTINCT series_name), count(DISTINCT Content) FROM TV_Channel
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio"
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT Package_Option  FROM TV_Channel  WHERE series_name = "Sky Radio"
SELECT Package_Option  FROM TV_Channel  WHERE series_name = 'Sky Radio'
SELECT count(DISTINCT id) FROM TV_Channel WHERE Language = 'English'
SELECT count(DISTINCT id) FROM TV_Channel WHERE Language = 'English'
SELECT language, COUNT(*) AS num_channels FROM TV_Channel GROUP BY language HAVING COUNT(*) = (   SELECT MIN(cnt)   FROM (     SELECT language, COUNT(*) AS cnt     FROM TV_Channel     GROUP BY language   ) AS T )
SELECT TV_Channel.Language, COUNT(*) AS channel_count FROM TV_Channel GROUP BY TV_Channel.Language ORDER BY channel_count ASC LIMIT 1
SELECT TV_Channel.Language, COUNT(*)  FROM TV_Channel  GROUP BY TV_Channel.Language
SELECT TV_Channel.Language, COUNT(*)  FROM TV_Channel  GROUP BY TV_Channel.Language
SELECT series_name FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = "The Rise of the Blue Beetle!";
SELECT series_name  FROM TV_Channel  WHERE id = (SELECT Channel FROM Cartoon WHERE Title = 'The Rise of the Blue Beetle')
SELECT cartoon.title  FROM cartoon  JOIN tv_channel ON cartoon.channel = tv_channel.id  WHERE tv_channel.series_name = "Sky Radio"
SELECT title FROM cartoon WHERE channel = (     SELECT id     FROM tv_channel     WHERE series_name = 'Sky Radio' )
SELECT TV_series.Episode  FROM TV_series  ORDER BY TV_series.Rating
SELECT TV_series.Episode  FROM TV_series  ORDER BY TV_series.Rating
SELECT tv_series.Episode, tv_series.Rating FROM TV_series ORDER BY tv_series.Rating DESC LIMIT 3
SELECT tv_series.Episode, tv_series.Rating  FROM tv_series  ORDER BY tv_series.Rating DESC  LIMIT 3
SELECT MIN(Share), MAX(Share) FROM TV_series;
SELECT MAX(Share), MIN(Share) FROM TV_series
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime"
SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime"
SELECT TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = "A Love of a Lifetime"
SELECT TV_Channel.series_name  FROM TV_Channel  JOIN TV_series ON TV_Channel.id = TV_series.Channel  WHERE TV_series.Episode = 'A Love of a Lifetime'
SELECT title FROM cartoon WHERE Title = "A Love of a Lifetime"
SELECT TV_series.Episode  FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"
SELECT Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"
SELECT cartoon.directed_by, COUNT(cartoon.id) FROM cartoon GROUP BY cartoon.directed_by
SELECT directed_by, COUNT(*) FROM Cartoon GROUP BY directed_by
SELECT production_code, TV_Channel.series_name AS channel FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id ORDER BY Cartoon.original_air_date DESC LIMIT 1
SELECT production_code, channel  FROM Cartoon  ORDER BY original_air_date DESC  LIMIT 1
SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = true
SELECT TV_Channel.Package_Option, TV_series.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = true
SELECT country FROM TV_Channel WHERE id IN (     SELECT DISTINCT Channel     FROM Cartoon     WHERE Written_by = 'Todd Casey' )
SELECT DISTINCT tv_channel.country FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.written_by = 'Todd Casey'
SELECT DISTINCT country FROM TV_Channel WHERE id NOT IN (   SELECT DISTINCT channel   FROM Cartoon   WHERE written_by = 'Todd Casey' )
SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (     SELECT Channel     FROM Cartoon     WHERE Written_by = 'Todd Casey' )
SELECT series_name, country  FROM TV_Channel  WHERE id IN (SELECT channel FROM Cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Michael Chang')
SELECT series_name, country  FROM TV_Channel  JOIN Cartoon ON TV_Channel.id = Cartoon.Channel  WHERE Cartoon.Directed_by = 'Ben Jones'     OR Cartoon.Directed_by = 'Michael Chang'
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country  FROM TV_Channel  WHERE TV_Channel.Language != 'English'
SELECT pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> 'English'
SELECT TV_Channel.id  FROM TV_Channel  GROUP BY TV_Channel.id  HAVING COUNT(*) > 2
SELECT TV_Channel.id  FROM TV_Channel  GROUP BY TV_Channel.id  HAVING COUNT(*) > 2
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (     SELECT Cartoon.Channel     FROM Cartoon     WHERE Cartoon.Directed_by = 'Ben Jones' )
SELECT TV_Channel.id FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by <> 'Ben Jones' OR Cartoon.Directed_by IS NULL
SELECT package_option FROM TV_Channel WHERE id NOT IN (   SELECT Channel   FROM Cartoon   WHERE Directed_by = 'Ben Jones' )
SELECT package_option FROM TV_Channel WHERE id NOT IN (   SELECT Channel   FROM Cartoon   WHERE Directed_by = 'Ben Jones' )
SELECT COUNT(Poker_Player_ID) FROM poker_player
SELECT COUNT(Poker_Player_ID) FROM poker_player
SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC
SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC
SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player
SELECT final_table_made, best_finish FROM poker_player
SELECT avg(Earnings) FROM poker_player
SELECT avg(Earnings) FROM poker_player
SELECT poker_player.money_rank  FROM poker_player  ORDER BY poker_player.earnings DESC  LIMIT 1
SELECT poker_player.money_rank  FROM poker_player  WHERE poker_player.earnings = (   SELECT max(poker_player.earnings)    FROM poker_player )
SELECT max(final_table_made)  FROM poker_player  WHERE earnings < 200000
SELECT MAX(final_table_made)  FROM poker_player  WHERE earnings < 200000;
SELECT name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID
SELECT people.Name FROM people
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC
SELECT T1.Name  FROM people AS T1  JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  ORDER BY T2.Final_Table_Made ASC
SELECT birth_date  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Earnings ASC  LIMIT 1
SELECT people.Birth_Date FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings ASC LIMIT 1
SELECT money_rank  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID WHERE people.height = (SELECT MAX(height) FROM people)
SELECT money_rank FROM poker_player WHERE People_ID = (   SELECT People_ID   FROM people   WHERE Height = (     SELECT MAX(Height)     FROM people   ) )
SELECT AVG(earnings) FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  WHERE people.Height > 200
SELECT avg(poker_player.Earnings) FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE people.Height > 200
SELECT people.Name  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Earnings DESC
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC
SELECT nationality, COUNT(*) FROM people GROUP BY nationality
SELECT COUNT(DISTINCT T1.People_ID) AS Total_Count, T1.Nationality FROM people AS T1 GROUP BY T1.Nationality
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
SELECT nationality FROM people GROUP BY nationality HAVING COUNT(DISTINCT People_ID) > 1
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(DISTINCT People_ID) >= 2
SELECT name, birth_date FROM people ORDER BY name ASC
SELECT name, birth_date FROM people ORDER BY name ASC
SELECT name  FROM people  WHERE Nationality <> 'Russia'
SELECT name FROM people WHERE Nationality != 'Russia'
SELECT name  FROM people  WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
SELECT name FROM people LEFT JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.People_ID IS NULL
SELECT COUNT(DISTINCT Nationality) FROM people
SELECT COUNT(DISTINCT Nationality) FROM people
SELECT count(DISTINCT state) FROM AREA_CODE_STATE
SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC
SELECT vote_id, phone_number, state FROM VOTES;
SELECT max(area_code), min(area_code) FROM AREA_CODE_STATE
SELECT MAX(created) AS last_date_created FROM VOTES WHERE state = 'CA'
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name <> 'Jessie Alloway'
SELECT DISTINCT state, created FROM VOTES
SELECT contestant_number, contestant_name  FROM contestants  JOIN votes ON contestants.contestant_number = votes.contestant_number  GROUP BY contestant_number, contestant_name  HAVING COUNT(*) >= 2
SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number = (     SELECT contestant_number     FROM votes     GROUP BY contestant_number     ORDER BY COUNT(vote_id)     LIMIT 1 )
SELECT COUNT(*) AS vote_count  FROM VOTES  WHERE state = 'NY' OR state = 'CA'
SELECT COUNT(contestants.contestant_number)  FROM contestants  LEFT JOIN votes ON contestants.contestant_number = votes.contestant_number  WHERE votes.contestant_number IS NULL
SELECT area_code FROM AREA_CODE_STATE JOIN VOTES ON VOTES.state = AREA_CODE_STATE.state GROUP BY area_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT created, state, phone_number FROM VOTES WHERE contestant_number = (   SELECT contestant_number   FROM CONTESTANTS   WHERE contestant_name = 'Tabatha Gehling' )
SELECT area_code FROM area_code_state WHERE state IN (     SELECT state     FROM votes     WHERE contestant_number = (         SELECT contestant_number         FROM contestants         WHERE contestant_name = 'Kelly Clauss'     ) ) AND area_code IN (     SELECT area_code     FROM votes     JOIN area_code_state ON votes.state = area_code_state.state     JOIN contestants ON votes.contestant_number = contestants.contestant_number     WHERE contestants.contestant_name = 'Tabatha Gehling' ) GROUP BY area_code
SELECT contestant_name  FROM contestants  WHERE contestant_name LIKE '%Al%'
SELECT name FROM country WHERE IndepYear > 1950
SELECT name FROM country WHERE IndepYear > 1950
SELECT count(DISTINCT T1.Code)  FROM country AS T1  WHERE T1.GovernmentForm = 'Republic'
SELECT count(DISTINCT Code) FROM country WHERE GovernmentForm = 'Republic'
SELECT SUM(SurfaceArea)  FROM country  WHERE Region = 'Caribbean'
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Caribbean'
SELECT Continent FROM country WHERE Name = 'Anguilla'
SELECT Continent FROM country WHERE Name = 'Anguilla'
SELECT Region FROM country WHERE Code = (SELECT CountryCode FROM city WHERE Name = 'Kabul')
SELECT region FROM country WHERE name = 'Kabul'
SELECT language  FROM countrylanguage  WHERE CountryCode = (     SELECT Code      FROM country      WHERE Name = 'Aruba' )  ORDER BY Percentage DESC  LIMIT 1
SELECT language  FROM countrylanguage  WHERE CountryCode = (     SELECT Code      FROM country      WHERE Name = 'Aruba' )  AND IsOfficial = 'T'  ORDER BY Percentage DESC  LIMIT 1
SELECT population, lifeexpectancy FROM country WHERE Name = 'Brazil'
SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil'
SELECT Region, Population FROM country WHERE name = 'Angola'
SELECT region, population FROM country WHERE name = 'Angola'
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'
SELECT avg(LifeExpectancy)  FROM country  WHERE Region = 'Central Africa'
SELECT name  FROM country  WHERE continent = 'Asia'  AND lifeexpectancy = (SELECT MIN(lifeexpectancy) FROM country WHERE continent = 'Asia') ORDER BY lifeexpectancy ASC LIMIT 1
SELECT name  FROM country  WHERE continent = 'Asia'  AND lifeexpectancy = (   SELECT MIN(lifeexpectancy)    FROM country    WHERE continent = 'Asia' )
SELECT sum(Population), max(GNP) FROM country WHERE Continent = 'Asia'
SELECT sum(population), max(GNP) FROM country WHERE continent = 'Asia'
SELECT avg(LifeExpectancy)  FROM country  WHERE GovernmentForm = 'Republic'  AND Continent = 'Africa'
SELECT AVG(LifeExpectancy) FROM country WHERE continent = 'Africa' AND GovernmentForm = 'Republic'
SELECT sum(SurfaceArea) FROM country WHERE continent IN ('Asia', 'Europe')
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE continent = 'Asia' OR continent = 'Europe'
SELECT sum(Population) FROM city WHERE District = 'Gelderland'
SELECT SUM(Population) AS TotalPopulation FROM city WHERE District = 'Gelderland'
SELECT avg(GNP), sum(Population) FROM country WHERE GovernmentForm = 'US Territory'
SELECT AVG(GNP) AS Mean_GNP, SUM(Population) AS Total_Population  FROM country  WHERE GovernmentForm = 'US Territory'  AND Code2 = 'US'
SELECT count(DISTINCT Language) AS UniqueLanguages FROM countrylanguage
SELECT count(DISTINCT Language) AS LanguageCount FROM countrylanguage
SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'
SELECT COUNT(DISTINCT Language) AS TotalLanguages FROM countrylanguage WHERE CountryCode = (   SELECT Code   FROM country   WHERE Name = 'Aruba' )
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW'
SELECT count(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'
SELECT count(DISTINCT Language)  FROM countrylanguage  WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan')  AND IsOfficial = 'T'
SELECT country.Name FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY countrylanguage.CountryCode ORDER BY COUNT(countrylanguage.Language) DESC LIMIT 1
SELECT country.Name FROM country JOIN (     SELECT CountryCode, COUNT(*) AS LanguageCount     FROM countrylanguage     GROUP BY CountryCode ) AS LanguageCounts ON country.Code = LanguageCounts.CountryCode ORDER BY LanguageCounts.LanguageCount DESC LIMIT 1
SELECT continent FROM countrylanguage GROUP BY continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1
SELECT continent FROM countrylanguage GROUP BY continent ORDER BY COUNT(Language) DESC LIMIT 1
SELECT COUNT(DISTINCT CountryCode)  FROM countrylanguage  WHERE Language IN ('English', 'Dutch')  GROUP BY CountryCode  HAVING COUNT(DISTINCT Language) = 2
SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language IN ('English', 'Dutch')
SELECT DISTINCT country.name  FROM countrylanguage  INNER JOIN country ON countrylanguage.countrycode = country.code  WHERE countrylanguage.language IN ('English', 'French') GROUP BY country.name HAVING COUNT(DISTINCT countrylanguage.language) = 2
SELECT DISTINCT C.Name  FROM country C JOIN countrylanguage CL1 ON CL1.CountryCode = C.Code JOIN countrylanguage CL2 ON CL2.CountryCode = C.Code WHERE CL1.Language = 'English'  AND CL2.Language = 'French'
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' AND EXISTS (   SELECT *    FROM countrylanguage    WHERE Language = 'French' AND IsOfficial = 'T' AND CountryCode = T1.Code )
SELECT DISTINCT name FROM country WHERE code IN (   SELECT countrycode FROM countrylanguage   WHERE language IN ('English', 'French')   AND isofficial = 'T' )
SELECT COUNT(DISTINCT country.Continent) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'Chinese'
SELECT COUNT(DISTINCT country.Continent)  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  WHERE countrylanguage.Language = 'Chinese'
SELECT region FROM country WHERE code IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English' OR language = 'Dutch' )
SELECT region  FROM countrylanguage  WHERE Language IN ('Dutch', 'English') GROUP BY region
SELECT DISTINCT T2.name  FROM countrylanguage AS T1  JOIN country AS T2 ON T1.CountryCode = T2.Code  WHERE (T1.Language = 'English' OR T1.Language = 'Dutch')  AND T1.IsOfficial = 'T'
SELECT T1.Name  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  WHERE (T2.Language = 'English' OR T2.Language = 'Dutch') AND T2.IsOfficial = 'T'
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' ORDER BY countrylanguage.Percentage DESC LIMIT 1
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY countrylanguage.Language ORDER BY COUNT(countrylanguage.Language) DESC LIMIT 1
SELECT language  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  WHERE country.GovernmentForm = 'Republic'  GROUP BY language  HAVING COUNT(DISTINCT countrylanguage.CountryCode) = 1
SELECT language FROM countrylanguage WHERE percentage = 100   AND countrycode IN (     SELECT code     FROM country     WHERE governmentform = 'Republic'   ) GROUP BY language
SELECT city.Name  FROM city  JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode  WHERE countrylanguage.Language = 'English'  ORDER BY city.Population DESC  LIMIT 1
SELECT city.name FROM city JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = 'English'   AND countrylanguage.isofficial = 'T'   AND countrylanguage.percentage = 100 ORDER BY city.population DESC LIMIT 1
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1;
SELECT name, population, lifeexpectancy  FROM country  WHERE continent = 'Asia'  ORDER BY surfacearea DESC  LIMIT 1
SELECT avg(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Code NOT IN (     SELECT CountryCode     FROM countrylanguage     WHERE Language = 'English' )
SELECT AVG(country.LifeExpectancy)  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language != 'English' AND countrylanguage.IsOfficial = 'F'
SELECT SUM(population) AS total_population FROM country WHERE code NOT IN (   SELECT countrycode   FROM countrylanguage   WHERE language = 'English' )
SELECT sum(population) AS total_population FROM country WHERE code NOT IN (   SELECT countrycode   FROM countrylanguage   WHERE language = 'English' )
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T'
SELECT language  FROM countrylanguage  WHERE CountryCode = (   SELECT Code    FROM country    WHERE HeadOfState = 'Beatrix' )  AND IsOfficial = 'T'
SELECT count(DISTINCT countrylanguage.Language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.IndepYear < 1930
SELECT count(DISTINCT countrylanguage.Language)  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  WHERE country.IndepYear < 1930
SELECT country.Name  FROM country  WHERE country.SurfaceArea > (   SELECT MAX(c.SurfaceArea)    FROM country c    WHERE c.Continent = 'Europe' )
SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe');
SELECT country.Name FROM country WHERE continent = 'Africa'   AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')
SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')
SELECT country.Name FROM country WHERE country.Continent = 'Asia' AND country.Population > (SELECT MAX(country.Population) FROM country WHERE country.Continent = 'Africa')
SELECT country.Name FROM country WHERE country.Continent = 'Asia'  AND country.Population > (     SELECT MAX(population)     FROM country     WHERE continent = 'Africa' )
SELECT code FROM country WHERE code NOT IN (   SELECT countrycode   FROM countrylanguage   WHERE language = 'English' )
SELECT country.Code  FROM country  LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language <> 'English' OR countrylanguage.Language IS NULL
SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language <> 'English' AND CountryCode NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')
SELECT countrycode FROM countrylanguage WHERE language <> 'English'
SELECT code FROM country WHERE code NOT IN (   SELECT countrycode FROM countrylanguage WHERE language <> 'English' ) AND governmentform <> 'Republic'
SELECT country.Code FROM country WHERE country.Code NOT IN (   SELECT countrylanguage.CountryCode   FROM countrylanguage   WHERE countrylanguage.Language = 'English' ) AND country.GovernmentForm != 'Republic'
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language <> 'English'
SELECT 
SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia'  AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT min(population) FROM country)
SELECT country.Name, country.IndepYear, country.SurfaceArea  FROM country  WHERE country.Population = (SELECT MIN(country.Population) FROM country)
SELECT country.Population, country.Name, country.HeadOfState FROM country ORDER BY country.SurfaceArea DESC LIMIT 1
SELECT country.Name, country.Population, country.HeadOfState  FROM country  ORDER BY country.SurfaceArea DESC  LIMIT 1
SELECT country.Name, COUNT(DISTINCT countrylanguage.Language) AS LanguageCount FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code, country.Name HAVING COUNT(DISTINCT countrylanguage.Language) >= 3
SELECT country.Name, COUNT(DISTINCT countrylanguage.Language) AS LanguageCount FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(DISTINCT countrylanguage.Language) > 2
SELECT district, COUNT(*) FROM city  WHERE population > (SELECT AVG(population) FROM city) GROUP BY district
SELECT district, COUNT(name) FROM city GROUP BY district HAVING population > (SELECT AVG(population) FROM city)
SELECT governmentform, SUM(population)  FROM country  GROUP BY governmentform  HAVING AVG(lifeexpectancy) > 72
SELECT governmentform, SUM(population) AS total_population FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform
SELECT continent, AVG(lifeexpectancy) AS average_life_expectancy, SUM(population) AS total_population FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72
SELECT continent, SUM(population), AVG(lifeexpectancy) FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72
SELECT name, surfacearea  FROM country  ORDER BY surfacearea DESC  LIMIT 5
SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5
SELECT country.Name FROM country ORDER BY country.Population DESC LIMIT 3
SELECT name FROM country ORDER BY Population DESC LIMIT 3
SELECT name FROM country ORDER BY population ASC LIMIT 3
SELECT name  FROM country  ORDER BY population  LIMIT 3
SELECT count(DISTINCT Code) FROM country WHERE Continent = 'Asia'
SELECT count(*) FROM country WHERE Continent = 'Asia'
SELECT country.Name FROM country WHERE country.Continent = 'Europe' AND country.Population = 80000
SELECT name FROM country WHERE continent = 'Europe' AND population = 80000
SELECT sum(population) AS total_population, avg(surfacearea) AS average_area  FROM country  WHERE continent = 'North America'  AND surfacearea > 3000
SELECT sum(population) AS total_population, avg(surfacearea) AS average_surface_area FROM country WHERE surfacearea > 3000 AND continent = 'North America' GROUP BY continent
SELECT city.Name  FROM city  WHERE city.Population BETWEEN 160000 AND 900000
SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000
SELECT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language ORDER BY COUNT(countrylanguage.CountryCode) DESC LIMIT 1
SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1
SELECT T1.Name, T2.Language FROM country AS T1 JOIN (     SELECT countrycode, Language     FROM countrylanguage     WHERE Percentage = (         SELECT MAX(Percentage)         FROM countrylanguage         WHERE countrycode = T.countrycode     ) ) AS T2 ON T1.Code = T2.countrycode GROUP BY T1.Code
SELECT countrylanguage.countrycode, MAX(countrylanguage.language) AS language FROM countrylanguage GROUP BY countrylanguage.countrycode ORDER BY MAX(countrylanguage.percentage) DESC
SELECT count(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')
SELECT count(DISTINCT CountryCode)  FROM countrylanguage  WHERE Language = 'Spanish'    AND IsOfficial = 'T'    AND Percentage > 50;
SELECT countrycode FROM countrylanguage  WHERE language = 'Spanish'  GROUP BY countrycode HAVING percentage = MAX(percentage)
SELECT country.Code  FROM countrylanguage  WHERE Language = 'Spanish'    AND Percentage > 50
SELECT COUNT(Conductor_ID) FROM conductor
SELECT COUNT(*) FROM conductor
SELECT conductor.Name FROM conductor ORDER BY conductor.Age ASC
SELECT name FROM conductor ORDER BY age ASC
SELECT name  FROM conductor  WHERE nationality <> 'USA'
SELECT name FROM conductor WHERE nationality <> 'USA'
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
SELECT AVG(Attendance) FROM show
SELECT avg(Attendance) FROM show
SELECT MAX(share), MIN(share) FROM performance WHERE type <> 'Live final'
SELECT max(share) , min(share) FROM performance WHERE type != 'Live final'
SELECT count(DISTINCT Nationality) FROM conductor
SELECT COUNT(DISTINCT Nationality) FROM conductor
SELECT conductor.name FROM conductor ORDER BY conductor.year_of_work DESC
SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC
SELECT name, MAX(year_of_work) AS max_years_of_work FROM conductor GROUP BY name ORDER BY max_years_of_work DESC LIMIT 1
SELECT c.Name FROM conductor c JOIN (   SELECT Conductor_ID, MAX(Year_of_Work) AS Max_Year   FROM conductor   GROUP BY Conductor_ID ) c2 ON c.Conductor_ID = c2.Conductor_ID AND c.Year_of_Work = c2.Max_Year;
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID
SELECT name FROM conductor GROUP BY name HAVING COUNT(DISTINCT orchestra_id) > 1
SELECT conductor.Name  FROM conductor  JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1
SELECT conductor.Name  FROM conductor  JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID  GROUP BY conductor.Name  ORDER BY COUNT(DISTINCT orchestra.Orchestra_ID) DESC  LIMIT 1
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name ORDER BY COUNT(DISTINCT orchestra.Orchestra_ID) DESC LIMIT 1
SELECT name FROM conductor WHERE conductor_id IN (SELECT conductor_id FROM orchestra WHERE year_of_founded > 2008)
SELECT T1.Name  FROM conductor AS T1  JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  WHERE T2.Year_of_Founded > 2008
SELECT record_company, COUNT(DISTINCT orchestra_id) FROM orchestra GROUP BY record_company
SELECT count(DISTINCT Orchestra_ID) AS num_orchestras, Record_Company FROM orchestra GROUP BY Record_Company
SELECT major_record_format, COUNT(*) AS record_format_count FROM orchestra GROUP BY major_record_format ORDER BY record_format_count ASC
SELECT major_record_format, COUNT(*) AS frequency FROM orchestra GROUP BY major_record_format ORDER BY frequency DESC
SELECT record_company, COUNT(DISTINCT orchestra_id) AS orchestra_count FROM orchestra GROUP BY record_company ORDER BY orchestra_count DESC LIMIT 1
SELECT record_company, COUNT(*) AS num_orchestras FROM orchestra GROUP BY record_company ORDER BY num_orchestras DESC LIMIT 1
SELECT Name FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
SELECT DISTINCT record_company FROM orchestra WHERE year_of_founded < 2003 OR year_of_founded > 2003
SELECT There seems to be an issue with the given SQL query. The condition `year_of_founded < 2003 AND year_of_founded > 2003` is contradictory because it tries to filter orchestras that are founded before and after the same year.   To fix the query and retrieve the record companies used by orchestras founded before 2003 and those founded after 2003, you can use the following query:  ```sql SELECT DISTINCT o.record_company FROM orchestra o WHERE o.year_of_founded < 2003 OR o.year_of_founded > 2003 ```  This query uses the `OR` operator instead of `AND` to retrieve record companies used by orchestras founded either before 2003 or after 2003. The `DISTINCT` keyword ensures that duplicate record companies are eliminated from the result.
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE major_record_format = 'CD' OR major_record_format = 'DVD'
SELECT COUNT(DISTINCT Orchestra_ID)  FROM orchestra  WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'
SELECT year_of_founded  FROM orchestra  GROUP BY year_of_founded  HAVING COUNT(*) > 1
SELECT year_of_founded FROM orchestra  GROUP BY year_of_founded  HAVING COUNT(DISTINCT Orchestra_ID) > 1
SELECT COUNT(ID) FROM Highschooler
SELECT COUNT(ID) FROM Highschooler
SELECT name, grade FROM Highschooler
SELECT name, grade FROM Highschooler
SELECT grade FROM Highschooler
SELECT grade, name FROM Highschooler
SELECT grade FROM Highschooler WHERE name = 'Kyle'
SELECT grade FROM Highschooler WHERE name = "Kyle"
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10
SELECT Highschooler.name  FROM Highschooler  WHERE Highschooler.grade = 10
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.name = 'Kyle'
SELECT ID FROM Highschooler WHERE name = 'Kyle'
SELECT COUNT(ID) FROM Highschooler WHERE grade IN (9, 10)
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade
SELECT grade, COUNT(DISTINCT ID) FROM Highschooler GROUP BY grade
SELECT grade, COUNT(*) as count FROM Highschooler GROUP BY grade ORDER BY count DESC LIMIT 1
SELECT grade, COUNT(*) AS count_highschoolers FROM Highschooler GROUP BY grade ORDER BY count_highschoolers DESC LIMIT 1
SELECT DISTINCT grade FROM Highschooler GROUP BY grade HAVING count(DISTINCT ID) >= 4
SELECT grade  FROM Highschooler  GROUP BY grade  HAVING COUNT(*) >= 4
SELECT student_id, COUNT(*) AS num_friends FROM Friend GROUP BY student_id
SELECT T1.name, COUNT(T2.friend_id)  FROM Highschooler AS T1  JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.ID, T1.name
SELECT highschooler.name, COUNT(friend.friend_id) AS friend_count FROM highschooler JOIN friend ON highschooler.ID = friend.student_id GROUP BY highschooler.ID, highschooler.name
SELECT highschooler.name, COUNT(friend.friend_id) FROM highschooler JOIN friend ON highschooler.ID = friend.student_id GROUP BY highschooler.name
SELECT name FROM Highschooler JOIN Friend ON Friend.student_id = Highschooler.ID GROUP BY Highschooler.ID, Highschooler.name ORDER BY COUNT(Friend.friend_id) DESC LIMIT 1
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID ORDER BY COUNT(Friend.friend_id) DESC LIMIT 1
SELECT name FROM Highschooler JOIN Friend ON Friend.student_id = Highschooler.ID GROUP BY Highschooler.ID, Highschooler.name HAVING COUNT(Friend.friend_id) >= 3
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name HAVING COUNT(Friend.friend_id) >= 3
SELECT T2.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id WHERE T1.name = 'Kyle'
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Friend.friend_id = Highschooler.ID JOIN Highschooler Kyle ON Kyle.name = 'Kyle' AND Kyle.ID = Friend.student_id;
SELECT COUNT(friend.friend_id)  FROM friend  JOIN highschooler ON friend.friend_id = highschooler.id  WHERE highschooler.name = 'Kyle'
SELECT count(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT Friend.student_id FROM Friend)
SELECT Highschooler.ID FROM Highschooler WHERE NOT EXISTS (SELECT * FROM Friend WHERE Highschooler.ID = Friend.student_id)
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT Highschooler.name  FROM Highschooler  WHERE Highschooler.ID NOT IN      (SELECT Friend.student_id      FROM Friend)
SELECT DISTINCT T1.ID  FROM Highschooler AS T1  WHERE EXISTS (SELECT * FROM Friend AS T2 WHERE T2.student_id = T1.ID)    AND EXISTS (SELECT * FROM Likes AS T3 WHERE T3.liked_id = T1.ID)
SELECT DISTINCT student_id  FROM Friend  INNER JOIN Likes ON Friend.student_id = Likes.student_id INNER JOIN Highschooler ON Friend.student_id = Highschooler.ID WHERE Friend.friend_id IS NOT NULL AND Likes.liked_id IS NOT NULL
SELECT name FROM Highschooler WHERE ID IN (   SELECT student_id   FROM Friend   WHERE student_id = Highschooler.ID ) AND ID IN (   SELECT liked_id   FROM Likes   WHERE student_id = Highschooler.ID )
SELECT name  FROM Highschooler  WHERE ID IN (SELECT DISTINCT student_id FROM Friend)  AND ID IN (SELECT DISTINCT liked_id FROM Likes)
SELECT student_id, COUNT(*) AS like_count FROM Likes GROUP BY student_id
SELECT student_id, COUNT(*) AS num_likes FROM Likes GROUP BY student_id
SELECT highschooler.name, COUNT(likes.liked_id)  FROM highschooler  JOIN likes ON highschooler.ID = likes.student_id  GROUP BY highschooler.name;
SELECT highschooler.name, COUNT(likes.liked_id) FROM highschooler JOIN likes ON highschooler.ID = likes.student_id GROUP BY highschooler.name
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID, Highschooler.name ORDER BY COUNT(Likes.liked_id) DESC LIMIT 1
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID, Highschooler.name ORDER BY COUNT(Likes.liked_id) DESC LIMIT 1
SELECT name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID, Highschooler.name HAVING COUNT(Likes.liked_id) >= 2
SELECT name  FROM Highschooler  JOIN Likes ON Highschooler.ID = Likes.student_id  GROUP BY Highschooler.ID, Highschooler.name  HAVING COUNT(Likes.liked_id) >= 2
SELECT name FROM Highschooler WHERE grade > 5 AND ID IN (   SELECT student_id   FROM Friend   GROUP BY student_id   HAVING COUNT(*) >= 2 )
SELECT name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 GROUP BY Highschooler.name HAVING COUNT(DISTINCT Friend.friend_id) >= 2
SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT COUNT(*) FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID WHERE Highschooler.name = "Kyle"
SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)
SELECT AVG(grade)  FROM Highschooler  WHERE ID IN (SELECT student_id FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT min(grade)  FROM Highschooler  WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT DISTINCT state  FROM Owners  WHERE state IN (SELECT DISTINCT state FROM Professionals)
SELECT DISTINCT state FROM Owners WHERE state IN (SELECT DISTINCT state FROM Professionals)
SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT AVG(age) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana'    OR professional_id IN (       SELECT professional_id       FROM Treatments       GROUP BY professional_id       HAVING COUNT(*) > 2    )
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)
SELECT Dogs.name  FROM Dogs  JOIN Treatments ON Dogs.dog_id = Treatments.dog_id  WHERE Treatments.cost_of_treatment <= 1000
SELECT Dogs.name  FROM Dogs  WHERE Dogs.dog_id NOT IN (   SELECT Treatments.dog_id    FROM Treatments    WHERE Treatments.cost_of_treatment > 1000 )
SELECT DISTINCT T1.first_name  FROM Owners AS T1  LEFT JOIN Dogs AS T2 ON T1.first_name = T2.name WHERE T2.name IS NULL AND (T1.first_name IS NOT NULL) 
SELECT first_name  FROM owners  WHERE first_name NOT IN (SELECT name FROM dogs)  UNION  SELECT first_name  FROM professionals  WHERE first_name NOT IN (SELECT name FROM dogs)
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT owners.owner_id, owners.first_name, owners.last_name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  GROUP BY owners.owner_id  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id HAVING COUNT(*) = (     SELECT MAX(owner_count)     FROM (         SELECT COUNT(*) AS owner_count         FROM Dogs         GROUP BY owner_id     ) )
SELECT professional_id, role_code, first_name  FROM Professionals  WHERE professional_id IN (SELECT professional_id                           FROM Treatments                           GROUP BY professional_id                           HAVING COUNT(*) >= 2)
SELECT professional_id, role_code, first_name  FROM Professionals  GROUP BY professional_id, role_code, first_name  HAVING COUNT(*) >= 2
SELECT breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY Breeds.breed_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT breed_name  FROM breeds  GROUP BY breed_name  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT Owners.owner_id, Owners.last_name FROM Owners WHERE Owners.owner_id IN (   SELECT Dogs.owner_id   FROM Dogs   INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id   GROUP BY Dogs.owner_id   ORDER BY SUM(Treatments.cost_of_treatment) DESC   LIMIT 1 )
SELECT owners.owner_id, owners.last_name FROM owners WHERE owners.owner_id = (   SELECT dogs.owner_id   FROM dogs   JOIN treatments ON dogs.dog_id = treatments.dog_id   GROUP BY dogs.owner_id   ORDER BY SUM(treatments.cost_of_treatment) DESC   LIMIT 1 )
SELECT Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code GROUP BY Treatment_Types.treatment_type_description ORDER BY SUM(Treatments.cost_of_treatment) LIMIT 1
SELECT Treatment_Types.treatment_type_description  FROM Treatment_Types  WHERE Treatment_Types.treatment_type_code = (   SELECT Treatments.treatment_type_code    FROM Treatments    GROUP BY Treatments.treatment_type_code    ORDER BY SUM(Treatments.cost_of_treatment) ASC    LIMIT 1 )
SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN charges ON charges.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.zip_code ORDER BY SUM(charges.charge_amount) DESC LIMIT 1
SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1
SELECT professional_id, cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING COUNT(DISTINCT Treatments.treatment_type_code) >= 2
SELECT professional_id, cell_number FROM Professionals GROUP BY professional_id, cell_number HAVING COUNT(DISTINCT treatment_type_code) > 1
SELECT Professionals.first_name, Professionals.last_name  FROM Professionals  INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT first_name, last_name  FROM Professionals  WHERE professional_id IN (     SELECT professional_id      FROM Treatments      WHERE cost_of_treatment < (         SELECT AVG(cost_of_treatment)          FROM Treatments     ) )
SELECT treatments.date_of_treatment, professionals.first_name  FROM treatments  JOIN professionals ON treatments.professional_id = professionals.professional_id
SELECT treatments.date_of_treatment, professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id
SELECT cost_of_treatment, treatment_type_description  FROM Treatments  JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description  FROM treatments  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT owners.first_name, owners.last_name, sizes.size_description  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  JOIN sizes ON dogs.size_code = sizes.size_code
SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code
SELECT owners.first_name, dogs.name  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id
SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id
SELECT dogs.name, treatments.date_of_treatment  FROM dogs  JOIN treatments ON dogs.dog_id = treatments.dog_id  WHERE dogs.breed_code = (   SELECT breed_code    FROM breeds    WHERE breed_name = (     SELECT breed_name      FROM breeds      GROUP BY breed_name      HAVING COUNT(*) = 1   ) )
SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id JOIN breeds ON dogs.breed_code = breeds.breed_code WHERE breeds.breed_code = (     SELECT breed_code      FROM breeds      ORDER BY breed_code      LIMIT 1 )
SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.state = 'Virginia'
SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.state = 'Virginia'
SELECT dogs.date_arrived, dogs.date_departed  FROM dogs  WHERE dogs.dog_id IN (SELECT treatments.dog_id FROM treatments)
SELECT date_arrived, date_departed FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE dogs.age = (SELECT min(age) FROM dogs)
SELECT owners.last_name  FROM dogs  JOIN owners ON dogs.owner_id = owners.owner_id  ORDER BY dogs.date_of_birth  LIMIT 1
SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'
SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin')
SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs
SELECT date_arrived, date_departed FROM Dogs
SELECT COUNT(DISTINCT dog_id) FROM Treatments
SELECT COUNT(*) FROM Treatments
SELECT COUNT(DISTINCT professional_id) FROM Treatments WHERE professional_id IS NOT NULL
SELECT COUNT(DISTINCT professional_id) FROM Treatments WHERE professional_id IS NOT NULL
SELECT role_code, street, city, state  FROM Professionals  WHERE city LIKE '%West%'
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'
SELECT first_name, last_name, email_address  FROM Owners  WHERE state LIKE '%North%'
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'
SELECT count(*) FROM Dogs WHERE age < (SELECT avg(age) FROM Dogs)
SELECT COUNT(dog_id) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT cost_of_treatment  FROM Treatments  ORDER BY date_of_treatment DESC  LIMIT 1
SELECT treatments.cost_of_treatment  FROM treatments  ORDER BY treatments.date_of_treatment DESC  LIMIT 1
SELECT COUNT(dog_id) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT COUNT(dog_id) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs)
SELECT count(DISTINCT T1.owner_id)  FROM Owners AS T1  LEFT JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  WHERE T2.owner_id IS NULL
SELECT count(DISTINCT T1.professional_id)  FROM Professionals AS T1  WHERE T1.professional_id NOT IN  (SELECT DISTINCT T2.professional_id FROM Treatments AS T2)
SELECT count(professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT name, age, weight  FROM Dogs  WHERE abandoned_yn = 1
SELECT name, age, weight  FROM Dogs  WHERE abandoned_yn = 1
SELECT avg(age) FROM Dogs
SELECT AVG(age) FROM Dogs
SELECT MAX(age) FROM Dogs
SELECT MAX(age) AS oldest_dog_age FROM Dogs
SELECT charge_type, SUM(charge_amount) AS total_cost FROM Charges GROUP BY charge_type
SELECT charge_type, charge_amount FROM Charges
SELECT MAX(charge_amount) FROM Charges
SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1
SELECT email_address, cell_number, home_phone FROM Professionals
SELECT email_address, cell_number, home_phone FROM Professionals
SELECT breeds.breed_name, sizes.size_description FROM breeds CROSS JOIN sizes
SELECT DISTINCT breed_code, size_code FROM Dogs
SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT professionals.first_name, treatment_types.treatment_type_description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT COUNT(*) FROM singer
SELECT COUNT(*) FROM singer
SELECT singer.Name  FROM singer  ORDER BY singer.Net_Worth_Millions ASC
SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions ASC
SELECT Birth_Year, Citizenship FROM singer
SELECT birth_year, citizenship FROM singer
SELECT name FROM singer WHERE citizenship <> 'France'
SELECT name FROM singer WHERE citizenship != 'French'
SELECT name  FROM singer  WHERE birth_year IN (1948, 1949)
SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949
SELECT name  FROM singer  ORDER BY net_worth_millions DESC  LIMIT 1
SELECT name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
SELECT citizenship, COUNT(DISTINCT Singer_ID) FROM singer GROUP BY citizenship
SELECT citizenship, COUNT(*)  FROM singer  GROUP BY citizenship
SELECT citizenship, COUNT(*)  FROM singer  GROUP BY citizenship  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT citizenship, COUNT(*) AS count  FROM singer  GROUP BY citizenship  ORDER BY count DESC  LIMIT 1
SELECT citizenship, MAX(net_worth_millions)  FROM singer  GROUP BY citizenship
SELECT citizenship, MAX(net_worth_millions)  FROM singer  GROUP BY citizenship
SELECT song.title, singer.name  FROM song  JOIN singer ON song.Singer_ID = singer.Singer_ID
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID
SELECT DISTINCT singer.Name  FROM singer  JOIN song ON singer.Singer_ID = song.Singer_ID  WHERE song.Sales > 300000
SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000;
SELECT singer.Name FROM singer JOIN song ON song.Singer_ID = singer.Singer_ID GROUP BY singer.Name HAVING COUNT(song.Song_ID) > 1
SELECT name FROM singer GROUP BY name HAVING COUNT(*) > 1
SELECT singer.Name, SUM(song.Sales) AS total_sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name
SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name
SELECT name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
SELECT singer.Name AS sname  FROM singer  WHERE NOT EXISTS (SELECT * FROM song WHERE singer.Singer_ID = song.Singer_ID)
SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 OR birth_year > 1955
SELECT DISTINCT citizenship  FROM singer  WHERE birth_year < 1945 OR birth_year > 1955
SELECT COUNT(*) FROM Other_Available_Features
SELECT feature_type_name FROM ref_feature_types WHERE feature_type_code = (     SELECT feature_type_code     FROM other_available_features     WHERE feature_name = 'AirCon' )
SELECT property_type_description  FROM ref_property_types  WHERE property_type_code IN (SELECT property_type_code FROM properties)
SELECT properties.property_name  FROM properties  WHERE (properties.property_type_code = 'Apartment' OR properties.property_type_code = 'House')  AND properties.room_count > 1
