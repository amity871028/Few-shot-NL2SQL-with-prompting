SELECT COUNT(Singer_ID) FROM singer
SELECT COUNT(*) AS total_singers FROM singer
SELECT name, country, age FROM singer ORDER BY age ASC
SELECT singer.Name, singer.Country, singer.Age  FROM singer  ORDER BY singer.Age DESC
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'
SELECT avg(Age), min(Age), max(Age) FROM singer WHERE Country = 'France'
SELECT singer.Name, singer.Song_release_year FROM singer WHERE singer.Age = (   SELECT MIN(Age)   FROM singer ) LIMIT 1;
SELECT s.Name, s.Song_release_year FROM singer s WHERE s.Age = (SELECT MIN(Age) FROM singer)
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT DISTINCT Country FROM singer WHERE Age > 20
SELECT singer.Country, COUNT(*) AS SingerCount FROM singer GROUP BY singer.Country;
SELECT singer.Country, COUNT(*) as SingerCount FROM singer GROUP BY singer.Country
SELECT singer.Song_Name FROM singer WHERE singer.Age > (SELECT AVG(singer.Age) FROM singer)
SELECT singer.Song_Name FROM singer WHERE singer.Age > (SELECT AVG(Age) FROM singer)
SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity BETWEEN 5000 AND 10000;
SELECT Location, Name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;
SELECT MAX(Capacity), AVG(Capacity) FROM stadium
SELECT avg(Capacity), max(Capacity) FROM stadium
SELECT s.name, s.capacity FROM stadium s ORDER BY s.average DESC LIMIT 1
SELECT stadium.Name, stadium.Capacity  FROM stadium  ORDER BY stadium.Average DESC  LIMIT 1
SELECT COUNT(DISTINCT concert_ID) FROM concert WHERE Year IN (2014, 2015)
SELECT COUNT(DISTINCT concert_ID) FROM concert WHERE Year = 2014 OR Year = 2015;
SELECT stadium.Name, COUNT(concert.concert_ID) AS Concert_Count FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name;
SELECT COUNT(concert.concert_ID) AS concert_count, stadium.Name  FROM stadium  LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID  GROUP BY stadium.Name
SELECT stadium.Name, stadium.Capacity  FROM stadium  WHERE stadium.Stadium_ID IN (     SELECT concert.Stadium_ID      FROM concert      WHERE concert.Year >= 2014 )  ORDER BY stadium.Capacity DESC  LIMIT 1;
SELECT name, capacity FROM stadium WHERE stadium_id = (   SELECT stadium_id   FROM concert   WHERE year > 2013   GROUP BY stadium_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT concert.Year, COUNT(*) AS num_concerts FROM concert GROUP BY concert.Year ORDER BY num_concerts DESC LIMIT 1
SELECT year, COUNT(*) AS concert_count FROM concert GROUP BY year ORDER BY concert_count DESC LIMIT 1
SELECT name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)
SELECT name FROM stadium WHERE stadium.Stadium_ID NOT IN (SELECT concert.Stadium_ID FROM concert)
SELECT DISTINCT country FROM singer WHERE age > 40 OR age < 30  Explanation: The original SQL query has a logical error. It uses the "AND" operator to specify that the age should be both above 40 and below 30, which is not possible. The fixed SQL query uses the "OR" operator to specify that the age should be either above 40 or below 30. This will return the countries where singers above 40 years old or below 30 years old are from.
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)
SELECT name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014)
SELECT concert_name, theme, COUNT(singer_id) FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert_name, theme;
SELECT concert_name, theme, COUNT(singer_id) AS num_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert_name, theme
SELECT singer.Name, COUNT(singer_in_concert.Singer_ID)  FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  GROUP BY singer.Name
SELECT singer.Name, COUNT(singer_in_concert.concert_ID)  FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  GROUP BY singer.Name
SELECT DISTINCT singer.name  FROM singer_in_concert  JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID  JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID  WHERE concert.Year = 2014
SELECT singer.Name FROM singer_in_concert JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE concert.Year = 2014;
SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%'
SELECT singer.Name, singer.Country  FROM singer  WHERE singer.Song_Name LIKE '%Hey%'
SELECT DISTINCT T2.Name, T2.Location FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T1.Year = 2014   AND T1.Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year = 2015)
SELECT DISTINCT T1.Name, T1.Location  FROM stadium AS T1  JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID  WHERE T2.Year = 2014  AND T1.Stadium_ID IN (     SELECT T2.Stadium_ID      FROM concert AS T2      WHERE T2.Year = 2015 )
SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)
SELECT count(DISTINCT concert_ID) FROM concert WHERE Stadium_ID IN (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT max(Capacity) FROM stadium))
SELECT count(*) FROM Pets WHERE weight > 10
SELECT count(*) FROM Pets WHERE weight > 10
SELECT Pets.weight FROM Pets INNER JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID INNER JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType = 'dog' AND Pets.pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog')
SELECT weight FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT min(pet_age) FROM Pets WHERE PetType = 'dog')
SELECT MAX(weight), PetType FROM Pets GROUP BY PetType
SELECT MAX(weight) ,  PetType FROM Pets GROUP BY PetType
SELECT count(DISTINCT has_pet.petid)  FROM has_pet  JOIN student ON has_pet.stuid = student.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE student.age > 20
SELECT COUNT(pets.PetID) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20;
SELECT COUNT(pets.PetID) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Student.Sex = 'F'
SELECT count(*)  FROM Pets  JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID  JOIN Student ON Student.StuID = Has_Pet.StuID  WHERE Pets.PetType = 'dog'  AND Student.Sex = 'female'
SELECT COUNT(DISTINCT PetType) FROM Pets
SELECT COUNT(DISTINCT PetType) FROM Pets
SELECT DISTINCT Fname  FROM Student  WHERE StuID IN (     SELECT StuID      FROM Has_Pet      WHERE PetID IN (         SELECT PetID          FROM Pets          WHERE PetType IN ('cat', 'dog')     ) )
SELECT DISTINCT Fname  FROM Student  WHERE StuID IN (     SELECT DISTINCT StuID      FROM Has_Pet      WHERE PetID IN (         SELECT PetID          FROM Pets          WHERE PetType IN ('cat', 'dog')     ) )
SELECT DISTINCT fname  FROM student  WHERE StuID IN (     SELECT StuID      FROM has_pet      WHERE PetID IN (         SELECT PetID          FROM pets          WHERE pettype = 'cat'     ) )  AND StuID IN (     SELECT StuID      FROM has_pet      WHERE PetID IN (         SELECT PetID          FROM pets          WHERE pettype = 'dog'     ) );
SELECT DISTINCT fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog') GROUP BY Student.FName HAVING COUNT(DISTINCT Pets.PetType) = 2
SELECT major, age  FROM student  WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))
SELECT major, age  FROM Student  WHERE StuID NOT IN (   SELECT StuID    FROM Has_Pet    WHERE PetID IN (     SELECT PetID      FROM Pets      WHERE PetType = 'cat'   ) )
SELECT stuid FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pet_type = 'cat'))
SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat')
SELECT student.fname, student.age  FROM student  WHERE student.stuid IN (     SELECT has_pet.stuid      FROM has_pet      INNER JOIN pets ON has_pet.petid = pets.petid      WHERE pets.pettype = 'dog' ) AND student.stuid NOT IN (     SELECT has_pet.stuid      FROM has_pet      INNER JOIN pets ON has_pet.petid = pets.petid      WHERE pets.pettype = 'cat' )
SELECT DISTINCT fname  FROM student  WHERE EXISTS (     SELECT *      FROM has_pet      INNER JOIN pets ON has_pet.petid = pets.petid      WHERE has_pet.stuid = student.stuid      AND pets.pettype = 'dog' )  AND NOT EXISTS (     SELECT *      FROM has_pet      INNER JOIN pets ON has_pet.petid = pets.petid      WHERE has_pet.stuid = student.stuid      AND pets.pettype = 'cat' )
SELECT Pets.PetType, Pets.weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT Pets.PetType, Pets.weight FROM Pets WHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1
SELECT Pets.PetType, AVG(Pets.pet_age), MAX(Pets.pet_age)  FROM Pets  GROUP BY Pets.PetType
SELECT AVG(pet_age) AS average_age, MAX(pet_age) AS maximum_age, pet_type FROM Pets GROUP BY pet_type
SELECT Pets.PetType, AVG(Pets.weight) FROM Pets GROUP BY Pets.PetType
SELECT pets.pettype, AVG(pets.weight) FROM pets GROUP BY pets.pettype
SELECT fname, age FROM Student WHERE Student.StuID IN (SELECT Has_Pet.StuID FROM Has_Pet)
SELECT DISTINCT fname, age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)
SELECT pets.petid FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.lname = 'Smith'
SELECT Pets.PetID FROM Has_Pet JOIN Student ON Student.StuID = Has_Pet.StuID JOIN Pets ON Pets.PetID = Has_Pet.PetID WHERE Student.LName = 'Smith';
SELECT COUNT(pets.PetID), student.StuID  FROM Student  JOIN Has_Pet ON student.StuID = Has_Pet.StuID  JOIN Pets ON Pets.PetID = Has_Pet.PetID  GROUP BY student.StuID
SELECT student.stuid, COUNT(has_pet.petid) FROM student JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.stuid
SELECT student.fname, student.sex  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  GROUP BY student.fname, student.sex  HAVING COUNT(has_pet.petid) > 1
SELECT student.fname, student.sex  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  GROUP BY student.fname, student.sex  HAVING COUNT(has_pet.PetID) > 1
SELECT student.LName FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3
SELECT student.lname FROM student WHERE EXISTS (   SELECT 1   FROM has_pet   INNER JOIN pets ON has_pet.petid = pets.petid   WHERE has_pet.stuid = student.stuid   AND pets.pettype = 'cat'   AND pets.pet_age = 3 )
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT count(DISTINCT ContId) FROM continents
SELECT COUNT(*) FROM continents
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryName) AS num_countries FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryName) AS CountryCount FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent
SELECT COUNT(*) FROM countries
SELECT COUNT(*) FROM countries
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.ModelId) AS ModelCount FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.ModelId) AS ModelCount FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id
SELECT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model WHERE T1.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.ModelId ORDER BY cars_data.Horsepower LIMIT 1
SELECT model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data))
SELECT model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data)
SELECT DISTINCT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970
SELECT DISTINCT car_makers.Maker  FROM car_makers  JOIN car_names ON car_makers.Id = car_names.MakeId  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE cars_data.Year = 1970;
SELECT car_names.Make, MIN(cars_data.Year) AS ProductionTime FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_names.Make;
SELECT car_makers.Maker, cars_data.Year FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data)
SELECT DISTINCT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Year > 1980
SELECT continents.Continent, COUNT(DISTINCT car_makers.Id) AS CarMakerCount FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY continents.Continent;
SELECT continents.Continent, COUNT(DISTINCT car_makers.Id) AS MakerCount FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY continents.Continent
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1
SELECT countries.CountryName FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Maker) DESC LIMIT 1
SELECT COUNT(model_list.ModelId) AS model_count, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName
SELECT COUNT(T3.Model), T1.Id, T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T1.Id, T1.FullName
SELECT cars_data.Accelerate  FROM car_names  JOIN cars_data ON car_names.MakeId = cars_data.Id  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.Maker = 'amc'  AND car_names.Make = 'amc hornet'  AND car_names.Model = 'hornet sportabout (sw)'
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'amc' AND model_list.Model = 'hornet sportabout (sw)'
SELECT count(DISTINCT Maker) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'france')
SELECT COUNT(DISTINCT Maker) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France')
SELECT count(DISTINCT model_list.ModelId) FROM countries  JOIN car_makers ON countries.CountryId = car_makers.Country  JOIN model_list ON car_makers.Id = model_list.Maker  JOIN car_names ON model_list.ModelId = car_names.MakeId  WHERE countries.CountryName = 'usa'
SELECT count(*) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'United States'
SELECT avg(MPG) FROM cars_data WHERE Cylinders = 4
SELECT avg(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT min(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974
SELECT min(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId
SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId
SELECT countries.CountryName, countries.CountryId FROM countries WHERE EXISTS (SELECT 1 FROM car_makers WHERE car_makers.Country = countries.CountryId);
SELECT countryname, countryid FROM countries WHERE countryid IN (SELECT country FROM car_makers)
SELECT count(*) FROM cars_data WHERE Horsepower > 150
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT cars_data.Year, AVG(cars_data.Weight) AS AverageWeight FROM cars_data GROUP BY cars_data.Year
SELECT AVG(Weight) AS AverageWeight, Year FROM cars_data GROUP BY Year
SELECT countryname  FROM countries  JOIN car_makers ON countries.CountryId = car_makers.Country  JOIN continents ON countries.Continent = continents.ContId  WHERE continents.Continent = 'Europe'  GROUP BY countryname  HAVING COUNT(DISTINCT car_makers.maker) >= 3
SELECT countries.CountryName  FROM countries  JOIN car_makers ON countries.CountryId = car_makers.Country  WHERE countries.Continent = 'Europe'  GROUP BY countries.CountryName  HAVING count(DISTINCT car_makers.Id) >= 3
SELECT MAX(cars_data.Horsepower) AS max_horsepower, car_makers.Maker AS make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3 GROUP BY car_makers.Maker
SELECT MAX(cars_data.Horsepower) AS MaxHorsepower, car_makers.Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3 GROUP BY car_makers.Maker;
SELECT model_list.Model FROM cars_data JOIN model_list ON cars_data.Id = model_list.ModelId ORDER BY cars_data.MPG DESC LIMIT 1
SELECT model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId ORDER BY cars_data.MPG DESC LIMIT 1
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'volvo'
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'volvo'
SELECT MAX(Accelerate) AS MaxAccelerate, Cylinders FROM cars_data GROUP BY Cylinders
SELECT cylinders, MAX(Accelerate) FROM cars_data GROUP BY cylinders
SELECT model  FROM model_list  GROUP BY model  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT model, COUNT(DISTINCT ModelId) AS num_versions FROM model_list GROUP BY model ORDER BY num_versions DESC LIMIT 1
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT count(Id) FROM cars_data WHERE Cylinders > 4
SELECT count(*) FROM cars_data WHERE Year = 1980
SELECT count(*) FROM cars_data WHERE Year = 1980
SELECT COUNT(DISTINCT model_list.ModelId) FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = 'American Motor Company';
SELECT COUNT(*) FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE FullName = 'American Motor Company')
SELECT car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName HAVING COUNT(model_list.ModelId) > 3;
SELECT car_makers.Maker, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker, car_makers.Id HAVING COUNT(model_list.ModelId) > 3
SELECT DISTINCT T2.Model FROM model_list AS T2 JOIN car_names AS T1 ON T2.Model = T1.Model JOIN car_makers AS T3 ON T1.MakeId = T3.Id JOIN cars_data AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.Weight > 3500;
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500 GROUP BY model_list.Model
SELECT DISTINCT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000;
SELECT DISTINCT Year  FROM cars_data  WHERE (Weight < 4000) OR (Weight > 3000)
SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Accelerate = (SELECT MAX(cars_data.Accelerate) FROM cars_data)
SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Accelerate = (SELECT MAX(cars_data.Accelerate) FROM cars_data)
SELECT cars_data.Cylinders FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = 'volvo' AND cars_data.Accelerate = (   SELECT MIN(Accelerate)   FROM cars_data   JOIN car_names ON cars_data.Id = car_names.MakeId   WHERE car_names.Model = 'volvo' )
SELECT cylinders FROM cars_data WHERE Id IN (SELECT MIN(Id) FROM cars_data WHERE MakeId IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker = 'volvo')))
SELECT count(*)  FROM cars_data  WHERE accelerate > (SELECT max(accelerate) FROM cars_data)
SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT count(DISTINCT T1.CountryId)  FROM countries AS T1  JOIN car_makers AS T2 ON T1.CountryId = T2.Country  GROUP BY T1.CountryId  HAVING count(DISTINCT T2.Id) > 2
SELECT COUNT(DISTINCT T1.CountryId)  FROM countries AS T1  JOIN car_makers AS T2 ON T1.CountryId = T2.Country  GROUP BY T1.CountryId  HAVING COUNT(DISTINCT T2.Id) > 2
SELECT count(*) FROM cars_data WHERE Cylinders > 6
SELECT count(*) FROM cars_data WHERE Cylinders > 6
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1
SELECT model_list.Model FROM cars_data  JOIN model_list ON cars_data.Id = model_list.ModelId  WHERE cars_data.Cylinders = 4  AND cars_data.Horsepower = (SELECT MAX(Horsepower) FROM cars_data WHERE Cylinders = 4)
SELECT car_names.MakeId, car_names.Make  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data)  AND cars_data.Cylinders <= 3
SELECT car_names.makeid, car_names.make FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data) AND cars_data.cylinders < 4;
SELECT max(MPG) FROM cars_data WHERE Cylinders = 8 AND Year < 1980
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980
SELECT model_list.Model FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE cars_data.Weight < 3500  AND car_makers.Maker != 'Ford Motor Company'
SELECT DISTINCT T3.Model  FROM cars_data AS T1  JOIN car_names AS T2 ON T1.Id = T2.MakeId  JOIN model_list AS T3 ON T2.Model = T3.Model  JOIN car_makers AS T4 ON T3.Maker = T4.Id  WHERE T1.Weight < 3500    AND T4.Maker <> 'Ford Motor Company'
SELECT countryname  FROM countries  WHERE countryid NOT IN (SELECT country                          FROM car_makers)
SELECT countryname FROM countries WHERE countryid NOT IN (SELECT country FROM car_makers WHERE country IS NOT NULL)
SELECT id, maker  FROM car_makers  JOIN model_list ON car_makers.id = model_list.maker  GROUP BY id, maker  HAVING count(DISTINCT model_list.model) >= 2  AND count(DISTINCT car_makers.id) > 3
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT model_list.Model) >= 2 AND COUNT(*) > 3
SELECT countries.CountryId, countries.CountryName  FROM countries  JOIN car_makers ON car_makers.Country = countries.CountryId  JOIN model_list ON car_makers.Id = model_list.Maker  JOIN car_names ON model_list.Model = car_names.Model  GROUP BY countries.CountryId, countries.CountryName  HAVING COUNT(DISTINCT car_makers.Id) > 3 OR car_names.Make = 'fiat'
SELECT countries.CountryId, countries.CountryName FROM countries WHERE countries.CountryId IN (   SELECT car_makers.Country   FROM car_makers   GROUP BY car_makers.Country   HAVING COUNT(car_makers.Id) > 3 ) OR countries.CountryId IN (   SELECT countries.CountryId   FROM countries   INNER JOIN continents ON countries.Continent = continents.ContId   INNER JOIN car_makers ON car_makers.Country = countries.CountryId   INNER JOIN model_list ON model_list.Maker = car_makers.Id   INNER JOIN car_names ON car_names.Model = model_list.Model   WHERE car_names.Make = 'fiat' ) GROUP BY countries.CountryId, countries.CountryName
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT airlines.Country FROM airlines WHERE airlines.Airline = 'JetBlue Airways'
SELECT abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT Airline, Abbreviation  FROM airlines  WHERE Country = 'USA'
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'
SELECT airportcode, airportname FROM airports WHERE city = 'Anthony'
SELECT airports.AirportCode, airports.AirportName  FROM airports  WHERE airports.City = 'Anthony'
SELECT COUNT(DISTINCT uid) FROM airlines
SELECT COUNT(*) FROM airlines
SELECT COUNT(*) FROM airports
SELECT COUNT(*) FROM airports
SELECT count(*) FROM flights
SELECT count(*) FROM flights
SELECT airline FROM airlines WHERE Abbreviation = 'UAL'
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
SELECT count(*) FROM airlines WHERE Country = 'USA'
SELECT COUNT(*) FROM airlines WHERE Country = 'USA'
SELECT City, Country FROM airports WHERE AirportName = 'Alton'
SELECT city, country  FROM airports  WHERE airportname = 'Alton'  AND airportcode IN (SELECT sourceairport FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE airportname = 'Alton'))
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
SELECT AirportName FROM airports WHERE City = 'Aberdeen'
SELECT AirportName FROM airports WHERE City = 'Aberdeen'
SELECT count(*) FROM flights WHERE SourceAirport = 'APG'
SELECT count(*) FROM flights WHERE SourceAirport = 'APG'
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'
SELECT count(*) FROM flights WHERE DestAirport = 'ATO'
SELECT count(*) FROM airports JOIN flights ON airports.airportcode = flights.sourceairport WHERE airports.city = 'Aberdeen'
SELECT count(*) FROM flights WHERE SourceAirport = 'Aberdeen'
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = "Aberdeen"
SELECT count(*) FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
SELECT count(*) FROM flights JOIN airports AS source ON flights.sourceairport = source.airportcode JOIN airports AS dest ON flights.destairport = dest.airportcode WHERE source.city = 'Aberdeen' AND dest.city = 'Ashley'
SELECT count(flightno)  FROM flights  JOIN airports AS source ON flights.SourceAirport = source.AirportCode JOIN airports AS dest ON flights.DestAirport = dest.AirportCode WHERE source.City = 'Aberdeen' AND dest.City = 'Ashley';
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue Airways'
SELECT count(*) FROM flights WHERE Airline = 'JetBlue Airways'
SELECT count(*)  FROM flights  WHERE Airline = 'United Airlines'  AND DestAirport = 'ASY'
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'
SELECT count(*) FROM flights  WHERE Airline = 'United Airlines'  AND SourceAirport = 'AHD'
SELECT count(*) FROM flights WHERE SourceAirport = 'AHD' AND Airline = 'United Airlines'
SELECT count(*)  FROM flights  WHERE destairport  =  (SELECT airportcode FROM airports WHERE city  =  'Aberdeen')  AND airline  =  (SELECT uid FROM airlines WHERE airline  =  'United Airlines')
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  JOIN airlines ON flights.Airline = airlines.uid  WHERE airports.City = 'Aberdeen' AND airlines.Airline = 'United Airlines'
SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1
SELECT airports.city FROM flights JOIN airports ON flights.destairport = airports.airportcode GROUP BY airports.city ORDER BY COUNT(flights.destairport) DESC LIMIT 1
SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airports.city  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  GROUP BY airports.city  ORDER BY COUNT(flights.SourceAirport) DESC  LIMIT 1
SELECT airports.AirportCode FROM airports INNER JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.AirportCode ORDER BY COUNT(flights.DestAirport) DESC LIMIT 1
SELECT airports.AirportCode FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.AirportCode ORDER BY COUNT(flights.DestAirport) DESC LIMIT 1
SELECT airports.airportcode FROM airports JOIN flights ON flights.destairport = airports.airportcode GROUP BY airports.airportcode ORDER BY COUNT(flights.flightno) LIMIT 1
SELECT airports.AirportCode FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.AirportCode ORDER BY COUNT(*) ASC LIMIT 1
SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline ORDER BY num_flights DESC LIMIT 1
SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation GROUP BY airlines.Airline ORDER BY COUNT(*) DESC LIMIT 1
SELECT abbreviation, country FROM airlines WHERE uid IN (   SELECT Airline   FROM flights   GROUP BY Airline   HAVING COUNT(*) = (     SELECT MIN(flight_count)     FROM (       SELECT COUNT(*) as flight_count       FROM flights       GROUP BY Airline     ) AS subquery   ) )
SELECT airlines.abbreviation, airlines.country FROM airlines JOIN flights ON flights.airline = airlines.uid GROUP BY airlines.abbreviation, airlines.country HAVING count(*) = (     SELECT count(*)      FROM flights      GROUP BY airline     ORDER BY count(*) ASC     LIMIT 1 )
SELECT DISTINCT Airline  FROM airlines  WHERE EXISTS (   SELECT 1    FROM flights    WHERE SourceAirport = 'AHD' AND flights.Airline = airlines.uid )
SELECT airlines.Airline FROM airlines WHERE EXISTS (SELECT * FROM flights WHERE flights.SourceAirport = 'AHD' AND flights.Airline = airlines.Airline)
SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD';
SELECT airlines.Airline FROM airlines  INNER JOIN flights ON airlines.uid = flights.Airline  WHERE flights.DestAirport = 'AHD'
SELECT airline FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE flights.sourceairport IN ('APG', 'CVO') AND flights.destairport IN ('APG', 'CVO') GROUP BY airline HAVING COUNT(DISTINCT flights.sourceairport) = 2 AND COUNT(DISTINCT flights.destairport) = 2;
SELECT airline FROM airlines WHERE uid IN (   SELECT DISTINCT airline   FROM flights   WHERE sourceairport IN ('APG', 'CVO')     AND destairport IN ('APG', 'CVO') ) GROUP BY airline HAVING COUNT(DISTINCT sourceairport) = 2;
SELECT airline  FROM airlines  WHERE uid IN (SELECT airline FROM flights WHERE sourceairport = 'CVO')  AND uid NOT IN (SELECT airline FROM flights WHERE sourceairport = 'APG');
SELECT DISTINCT airline FROM airlines WHERE EXISTS (   SELECT *   FROM flights   INNER JOIN airports ON flights.DestAirport = airports.AirportCode   WHERE airlines.uid = flights.Airline     AND airports.AirportCode = 'CVO' ) AND NOT EXISTS (   SELECT *   FROM flights   INNER JOIN airports ON flights.DestAirport = airports.AirportCode   WHERE airlines.uid = flights.Airline     AND airports.AirportCode = 'APG' );
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING COUNT(flights.FlightNo) >= 10
SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation GROUP BY airlines.Airline HAVING COUNT(flights.FlightNo) >= 10
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.Airline = flights.Airline GROUP BY airlines.Airline HAVING COUNT(flights.FlightNo) < 200;
SELECT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  GROUP BY airlines.Airline  HAVING COUNT(*) < 200
SELECT flights.FlightNo FROM flights WHERE flights.Airline = (SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = "United Airlines")
SELECT flights.FlightNo FROM flights INNER JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = 'United Airlines'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'APG';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportName = 'APG';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = "APG"
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName = 'APG'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = "Aberdeen";
SELECT flights.flightno  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen'
SELECT flights.FlightNo FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen'
SELECT COUNT(DISTINCT FlightNo) FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen' OR airports.City = 'Abilene'
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City IN ('Aberdeen', 'Abilene')
SELECT airportname FROM airports WHERE airportcode NOT IN (   SELECT sourceairport FROM flights   UNION   SELECT destairport FROM flights )
SELECT airportname  FROM airports  WHERE airportcode NOT IN (     SELECT sourceairport      FROM flights )  AND airportcode NOT IN (     SELECT destairport      FROM flights )
SELECT COUNT(*) FROM employee
SELECT COUNT(*) FROM employee;
SELECT employee.Name FROM employee ORDER BY employee.Age ASC
SELECT employee.Name  FROM employee  ORDER BY employee.Age ASC
SELECT city, COUNT(*) AS employee_count FROM employee GROUP BY city
SELECT city, COUNT(*) as employee_count FROM employee GROUP BY city
SELECT city  FROM employee  WHERE age < 30  GROUP BY city  HAVING count(DISTINCT employee_id) > 1
SELECT employee.city FROM employee WHERE age < 30 GROUP BY employee.city HAVING COUNT(*) > 1
SELECT COUNT(shop_id) AS shop_count, location FROM shop GROUP BY location
SELECT COUNT(DISTINCT Shop_ID) AS shop_count, Location FROM shop GROUP BY Location
SELECT manager_name, district FROM shop WHERE number_products = (     SELECT max(number_products)     FROM shop )
SELECT manager_name, district FROM shop WHERE number_products = (   SELECT MAX(number_products)   FROM shop )
SELECT MIN(Number_products) AS min_products, MAX(Number_products) AS max_products FROM shop
SELECT MIN(Number_products), MAX(Number_products) FROM shop
SELECT s.Name, s.Location, s.District FROM shop s ORDER BY s.Number_products DESC
SELECT name, location, district, number_products FROM shop ORDER BY number_products DESC
SELECT name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)
SELECT name FROM shop WHERE number_products > (   SELECT AVG(number_products)   FROM shop )
SELECT employee.Name  FROM employee  JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID  GROUP BY employee.Name  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT employee.name  FROM employee  JOIN evaluation ON employee.employee_id = evaluation.employee_id  GROUP BY employee.name  ORDER BY COUNT(evaluation.employee_id) DESC  LIMIT 1
SELECT employee.Name  FROM employee  JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID  ORDER BY evaluation.Bonus DESC  LIMIT 1
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1
SELECT name  FROM employee  WHERE employee_id NOT IN (SELECT employee_id FROM evaluation WHERE year_awarded IS NOT NULL)
SELECT name  FROM employee  WHERE employee_id NOT IN (SELECT employee_id FROM evaluation)
SELECT name FROM shop ORDER BY (SELECT COUNT(*) FROM hiring WHERE hiring.Shop_ID = shop.Shop_ID) DESC LIMIT 1
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID, shop.Name ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1
SELECT shop.name FROM shop LEFT JOIN hiring ON shop.shop_id = hiring.shop_id WHERE hiring.shop_id IS NULL
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Shop_ID IS NULL
SELECT COUNT(DISTINCT hiring.Employee_ID) AS "Number of Employees Hired", shop.Name FROM hiring JOIN shop ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name
SELECT COUNT(hiring.employee_id) AS num_employees, shop.name  FROM shop  JOIN hiring ON shop.shop_id = hiring.shop_id  GROUP BY shop.shop_id, shop.name
SELECT SUM(Bonus) FROM evaluation
SELECT SUM(Bonus) FROM evaluation
SELECT * FROM hiring
SELECT hiring.* FROM hiring
SELECT DISTRICT FROM shop WHERE district IN (   SELECT district   FROM shop   WHERE number_products < 3000 ) AND district IN (   SELECT district   FROM shop   WHERE number_products > 10000 ) GROUP BY district
SELECT DISTRICT FROM shop WHERE district IN (   SELECT district   FROM shop   GROUP BY district   HAVING SUM(CASE WHEN number_products < 3000 THEN 1 ELSE 0 END) > 0     AND SUM(CASE WHEN number_products > 10000 THEN 1 ELSE 0 END) > 0 )
SELECT count(DISTINCT Location) FROM shop
SELECT COUNT(DISTINCT Location) FROM shop
SELECT COUNT(*) FROM Documents
SELECT COUNT(*) FROM Documents
SELECT Document_ID, Document_Name, Document_Description FROM Documents
SELECT documents.document_id, documents.document_name, documents.document_description FROM documents
SELECT document_name, template_id FROM documents WHERE document_description LIKE '%w%'
SELECT document_name, template_id FROM Documents WHERE document_description LIKE '%w%';
SELECT documents.document_id, documents.template_id, documents.document_description FROM documents WHERE documents.document_name = 'Robbin CV';
SELECT documents.document_id, documents.template_id, documents.document_description FROM documents WHERE documents.document_name = 'Robbin CV'
SELECT COUNT(DISTINCT Templates.Template_ID)  FROM Templates  JOIN Documents ON Templates.Template_ID = Documents.Template_ID
SELECT COUNT(DISTINCT Template_ID) FROM Documents
SELECT count(DISTINCT Document_ID)  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  WHERE Ref_Template_Types.Template_Type_Code = 'PPT'
SELECT COUNT(DISTINCT documents.Document_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'PPT'
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS Document_Count FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID
SELECT Templates.Template_ID, COUNT(Documents.Template_ID) AS Usage_Count FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID
SELECT template_id, template_type_code  FROM templates WHERE template_id IN (     SELECT template_id     FROM documents     GROUP BY template_id     ORDER BY COUNT(*) DESC     LIMIT 1 )
SELECT template_id, template_type_code  FROM templates  WHERE template_id = (   SELECT template_id    FROM documents    GROUP BY template_id    ORDER BY COUNT(*) DESC    LIMIT 1 )
SELECT template_id FROM documents GROUP BY template_id HAVING count(*) > 1
SELECT template_id FROM Documents GROUP BY template_id HAVING COUNT(DISTINCT Document_ID) > 1
SELECT templates.template_id FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id WHERE documents.template_id IS NULL
SELECT template_id  FROM templates  WHERE template_id NOT IN (SELECT template_id FROM documents WHERE template_id IS NOT NULL)
SELECT COUNT(*) FROM Templates
SELECT COUNT(*) FROM Templates
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates
SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates
SELECT DISTINCT Template_Type_Code FROM Templates
SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types
SELECT templates.template_id  FROM templates  JOIN ref_template_types  ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_code IN ('PP', 'PPT')
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code IN ('PP', 'PPT')
SELECT COUNT(Template_ID) FROM Templates WHERE Template_Type_Code = 'CV'
SELECT COUNT(Template_ID) FROM Templates WHERE Template_Type_Code = 'CV';
SELECT Templates.Version_Number, Templates.Template_Type_Code  FROM Templates  WHERE Templates.Version_Number > 5
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5
SELECT ref_template_types.template_type_code, COUNT(templates.template_id) AS num_templates FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY ref_template_types.template_type_code
SELECT template_type_code, COUNT(templates.template_id) AS template_count  FROM ref_template_types  JOIN templates ON templates.template_type_code = ref_template_types.template_type_code  GROUP BY ref_template_types.template_type_code
SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_Type_Code ORDER BY COUNT(Templates.Template_ID) DESC LIMIT 1
SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT template_type_code FROM ref_template_types GROUP BY template_type_code HAVING COUNT(*) < 3;
SELECT template_type_code FROM ref_template_types WHERE template_type_code IN (   SELECT template_type_code   FROM templates   GROUP BY template_type_code   HAVING COUNT(template_id) < 3 )
SELECT MIN(version_number), template_type_code  FROM Templates GROUP BY template_type_code ORDER BY MIN(version_number) LIMIT 1;
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Version_Number LIMIT 1;
SELECT template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE documents.document_name = "Data base"
SELECT template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id WHERE documents.document_name = 'Data base'
SELECT documents.document_name FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_code = 'BK'
SELECT documents.document_name  FROM documents  JOIN templates ON documents.template_id = templates.template_id  WHERE templates.template_type_code = 'BK'
SELECT T1.template_type_code, COUNT(T3.document_id) FROM ref_template_types AS T1 JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN documents AS T3 ON T2.template_id = T3.template_id GROUP BY T1.template_type_code
SELECT ref_template_types.template_type_code, COUNT(*)  FROM ref_template_types  JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  JOIN documents ON templates.template_id = documents.template_id  GROUP BY ref_template_types.template_type_code
SELECT template_type_code, COUNT(document_id) AS document_count  FROM templates  GROUP BY template_type_code  ORDER BY document_count DESC  LIMIT 1
SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1;
SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN (SELECT template_type_code FROM templates)
SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (SELECT DISTINCT Template_Type_Code FROM Templates)
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
SELECT template_type_code, template_type_description FROM ref_template_types
SELECT template_type_description  FROM ref_template_types  WHERE template_type_code = 'AD'
SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD';
SELECT template_type_code  FROM ref_template_types  WHERE template_type_description = 'Book'
SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'
SELECT DISTINCT ref_template_types.template_type_description  FROM ref_template_types  JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  JOIN documents ON templates.template_id = documents.template_id
SELECT DISTINCT Template_Details FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID
SELECT templates.template_id  FROM templates  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_description = 'Presentation';
SELECT template_id  FROM templates  WHERE template_type_code = (   SELECT template_type_code    FROM ref_template_types    WHERE template_type_description = 'Presentation' )
SELECT COUNT(Paragraph_ID) FROM Paragraphs
SELECT COUNT(*) FROM Paragraphs
SELECT COUNT(*) FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show'
SELECT COUNT(Paragraph_ID) AS Total_Paragraphs FROM Paragraphs WHERE Document_ID = (   SELECT Document_ID   FROM Documents   WHERE Document_Name = 'Summer Show' )
SELECT paragraph_id, document_id, paragraph_text, other_details  FROM paragraphs  WHERE paragraph_text LIKE '%Korea%'
SELECT paragraphs.Paragraph_ID, paragraphs.Document_ID, paragraphs.Paragraph_Text, paragraphs.Other_Details FROM paragraphs INNER JOIN documents ON paragraphs.Document_ID = documents.Document_ID WHERE paragraphs.Paragraph_Text LIKE '%Korea%'
SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID = (   SELECT Document_ID   FROM Documents   WHERE Document_Name = 'Welcome to NY' )
SELECT paragraph_id, paragraph_text  FROM paragraphs  JOIN documents ON paragraphs.document_id = documents.document_id  WHERE documents.document_name = 'Welcome to NY';
SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = "Customer reviews")
SELECT paragraph_text  FROM paragraphs  JOIN documents ON paragraphs.document_id = documents.document_id  WHERE documents.document_name = 'Customer reviews';
SELECT documents.document_id, COUNT(paragraphs.paragraph_id) AS paragraph_count FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY documents.document_id;
SELECT documents.document_id, COUNT(paragraphs.paragraph_id)  FROM documents  LEFT JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  ORDER BY documents.document_id
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id)  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id, documents.document_name
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS paragraph_count FROM documents LEFT JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name
SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) >= 2
SELECT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id HAVING COUNT(paragraphs.paragraph_id) >= 2;
SELECT documents.document_id, documents.document_name  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id, documents.document_name  ORDER BY COUNT(paragraphs.paragraph_id) DESC  LIMIT 1
SELECT documents.document_id, documents.document_name  FROM documents  ORDER BY (SELECT COUNT(*) FROM paragraphs WHERE paragraphs.document_id = documents.document_id) DESC  LIMIT 1
SELECT documents.document_id  FROM documents  LEFT JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  ORDER BY COUNT(paragraphs.paragraph_id) ASC  LIMIT 1
SELECT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY COUNT(paragraphs.paragraph_id) ASC LIMIT 1
SELECT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id HAVING COUNT(DISTINCT paragraphs.paragraph_id) >= 1 AND COUNT(DISTINCT paragraphs.paragraph_id) <= 2
SELECT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id HAVING COUNT(paragraphs.paragraph_id) >= 1 AND COUNT(paragraphs.paragraph_id) <= 2;
SELECT documents.document_id  FROM paragraphs  INNER JOIN documents ON paragraphs.document_id = documents.document_id WHERE paragraph_text IN ('Brazil', 'Ireland')
SELECT DISTINCT document_id  FROM paragraphs  WHERE paragraph_text IN ('Brazil', 'Ireland')
SELECT COUNT(Teacher_ID) FROM teacher
SELECT count(*) FROM teacher
SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC
SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC
SELECT Age, Hometown FROM teacher
SELECT teacher.age, teacher.hometown FROM teacher
SELECT teacher.Name FROM teacher WHERE teacher.Hometown != 'Little Lever Urban District'
SELECT teacher.Name  FROM teacher  WHERE teacher.Hometown != 'Little Lever Urban District'
SELECT teacher.Name  FROM teacher  WHERE teacher.Age IN (32, 33)
SELECT name FROM teacher WHERE age IN (32, 33)
SELECT teacher.Hometown FROM teacher WHERE teacher.Age = (   SELECT MIN(Age)   FROM teacher )
SELECT teacher.Hometown FROM teacher ORDER BY teacher.Age ASC LIMIT 1
SELECT hometown, COUNT(*) AS num_teachers FROM teacher GROUP BY hometown
SELECT hometown, COUNT(DISTINCT teacher.Teacher_ID) FROM teacher GROUP BY hometown
SELECT teacher.Hometown, COUNT(*) as Count FROM teacher GROUP BY teacher.Hometown ORDER BY Count DESC LIMIT 1
SELECT teacher.Hometown, COUNT(*) AS Count FROM teacher GROUP BY teacher.Hometown ORDER BY Count DESC LIMIT 1
SELECT teacher.Hometown FROM teacher GROUP BY teacher.Hometown HAVING COUNT(DISTINCT teacher.Teacher_ID) > 1
SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(DISTINCT teacher_id) >= 2
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID
SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.name ASC;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course.Course_ID = course_arrange.Course_ID ORDER BY teacher.Name ASC
SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course.course_id = course_arrange.course_id WHERE course.course = 'Math'
SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id WHERE course.course = 'Math'
SELECT T1.name, COUNT(T2.course_id)  FROM teacher AS T1  JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id  GROUP BY T1.name
SELECT teacher.Name, COUNT(course_arrange.Course_ID) FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name
SELECT name FROM teacher WHERE teacher_id IN (   SELECT teacher_id   FROM course_arrange   GROUP BY teacher_id   HAVING COUNT(DISTINCT course_id) >= 2 )
SELECT name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY name HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2
SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT Teacher_ID FROM course_arrange)
SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT DISTINCT teacher_id FROM course_arrange)
SELECT count(*) FROM visitor WHERE Age < 30
SELECT visitor.Name  FROM visitor  WHERE visitor.Level_of_membership > 4  ORDER BY visitor.Level_of_membership DESC
SELECT avg(age) FROM visitor WHERE Level_of_membership <= 4
SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Age ASC
SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009
SELECT open_year, num_of_staff FROM museum WHERE Name = 'Plaza Museum';
SELECT name FROM museum WHERE num_of_staff > (SELECT MIN(num_of_staff) FROM museum WHERE open_year > 2010)
SELECT visitor.ID, visitor.Name, visitor.Age FROM visitor INNER JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID, visitor.Name, visitor.Age HAVING COUNT(visit.Museum_ID) > 1
SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.ID IN (   SELECT visit.visitor_ID   FROM visit   GROUP BY visit.visitor_ID   HAVING SUM(visit.Total_spent) = (     SELECT MAX(total_spent)     FROM (       SELECT SUM(visit.Total_spent) AS total_spent       FROM visit       GROUP BY visit.visitor_ID     ) AS total_spent_sum   ) )
SELECT museum_id, name FROM museum JOIN visit ON museum.museum_id = visit.museum_id GROUP BY museum.museum_id, museum.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT name FROM museum WHERE museum.Museum_ID NOT IN (SELECT Museum_ID FROM visit)
SELECT visitor.name, visitor.age  FROM visitor  JOIN visit ON visitor.ID = visit.visitor_ID  ORDER BY visit.Num_of_Ticket DESC  LIMIT 1
SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit
SELECT SUM(Total_spent)  FROM visit  WHERE visitor_ID IN (SELECT ID FROM visitor WHERE Level_of_membership = 1)
SELECT DISTINCT T1.Name  FROM visitor AS T1  WHERE T1.ID IN (   SELECT T2.visitor_ID    FROM visit AS T2    WHERE T2.Museum_ID IN (     SELECT T3.Museum_ID      FROM museum AS T3      WHERE T3.Open_Year < 2009   ) )  AND T1.ID IN (   SELECT T4.visitor_ID    FROM visit AS T4    WHERE T4.Museum_ID IN (     SELECT T5.Museum_ID      FROM museum AS T5      WHERE T5.Open_Year > 2011   ) )
SELECT count(DISTINCT visitor_id) FROM visitor WHERE visitor.ID NOT IN (   SELECT DISTINCT visitor_ID   FROM visit   JOIN museum ON visit.Museum_ID = museum.Museum_ID   WHERE museum.Open_Year > 2010 )
SELECT COUNT(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM players
SELECT COUNT(*) FROM matches
SELECT COUNT(*) FROM matches;
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SELECT avg(loser_age) AS average_loser_age, avg(winner_age) AS average_winner_age FROM matches
SELECT avg(loser_age), avg(winner_age) FROM matches
SELECT AVG(winner_rank) AS average_winner_rank FROM matches
SELECT AVG(winner_rank) FROM matches
SELECT MAX(loser_rank) FROM matches
SELECT max(loser_rank) FROM matches
SELECT COUNT(DISTINCT country_code) FROM players
SELECT COUNT(DISTINCT players.country_code) FROM players
SELECT count(DISTINCT loser_name) FROM matches
SELECT COUNT(DISTINCT matches.loser_name) FROM matches
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10
SELECT DISTINCT winner_name  FROM matches  WHERE year = 2013    AND winner_name IN (     SELECT winner_name      FROM matches      WHERE year = 2016   )
SELECT DISTINCT T1.first_name, T1.last_name  FROM players AS T1  WHERE T1.player_id IN (     SELECT T2.winner_id      FROM matches AS T2      WHERE T2.year = 2013 )  AND T1.player_id IN (     SELECT T3.winner_id      FROM matches AS T3      WHERE T3.year = 2016 )
SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016;
SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016;
SELECT players.country_code, players.first_name  FROM players  JOIN matches ON players.player_id = matches.winner_id  WHERE matches.tourney_name IN ('Australian Open', 'WTA Championships') GROUP BY players.country_code, players.first_name HAVING COUNT(DISTINCT matches.tourney_name) = 2
SELECT first_name, country_code  FROM players  WHERE player_id IN (   SELECT winner_id    FROM matches    WHERE tourney_name = 'Australian Open'      AND player_id IN (       SELECT winner_id        FROM matches        WHERE tourney_name = 'WTA Championships'     ) )
SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players)
SELECT first_name, country_code  FROM players  ORDER BY birth_date  LIMIT 1
SELECT first_name, last_name FROM players ORDER BY birth_date
SELECT first_name, last_name FROM players ORDER BY birth_date
SELECT players.first_name, players.last_name  FROM players  WHERE players.hand = 'L'  ORDER BY players.birth_date
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'left' ORDER BY players.birth_date
SELECT first_name, country_code FROM players WHERE player_id = (   SELECT player_id   FROM rankings   WHERE tours = (     SELECT MAX(tours)     FROM rankings   ) ) LIMIT 1;
SELECT players.first_name, players.country_code FROM players INNER JOIN (     SELECT player_id, COUNT(*) AS num_tours     FROM rankings     GROUP BY player_id ) AS tour_counts ON players.player_id = tour_counts.player_id ORDER BY tour_counts.num_tours DESC LIMIT 1;
SELECT year, COUNT(match_num) as num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1
SELECT players.first_name, players.last_name, matches.winner_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY matches.winner_id, players.first_name, players.last_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT players.first_name, players.last_name, MAX(rankings.ranking_points) AS max_rank_points FROM players JOIN matches ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id GROUP BY players.first_name, players.last_name ORDER BY max_rank_points DESC LIMIT 1;
SELECT winner_name  FROM matches  WHERE tourney_name = 'Australian Open'  AND winner_rank_points = (     SELECT max(winner_rank_points)      FROM matches      WHERE tourney_name = 'Australian Open' )
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'Australian Open' ORDER BY matches.winner_rank_points DESC LIMIT 1
SELECT matches.winner_name, matches.loser_name  FROM matches  WHERE minutes = (     SELECT MAX(minutes)      FROM matches )
SELECT matches.winner_name, matches.loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)
SELECT avg(rankings.ranking) AS average_ranking, players.first_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name
SELECT players.first_name, AVG(rankings.ranking)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name
SELECT T1.first_name, SUM(T2.ranking_points) AS total_ranking_points  FROM players AS T1  JOIN rankings AS T2 ON T1.player_id = T2.player_id  GROUP BY T1.first_name
SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name
SELECT country_code, COUNT(*) AS player_count FROM players GROUP BY country_code
SELECT country_code, COUNT(*) AS player_count FROM players GROUP BY country_code
SELECT country_code, COUNT(player_id) AS player_count FROM players GROUP BY country_code ORDER BY player_count DESC LIMIT 1
SELECT country_code, COUNT(*) AS player_count  FROM players  GROUP BY country_code  ORDER BY player_count DESC  LIMIT 1
SELECT DISTINCT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT DISTINCT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;
SELECT ranking_date, COUNT(tours) AS total_tours FROM rankings GROUP BY ranking_date
SELECT ranking_date, SUM(ranking_points) AS total_tours FROM rankings GROUP BY ranking_date
SELECT year, COUNT(*) FROM matches GROUP BY year
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year
SELECT players.first_name, players.last_name, rankings.ranking FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id ORDER BY matches.winner_age ASC LIMIT 3
SELECT players.first_name, players.last_name, matches.winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY matches.winner_age ASC LIMIT 3
SELECT COUNT(DISTINCT winner_id) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = 'WTA Championships' AND players.hand = 'L'
SELECT COUNT(players.player_id)  FROM players  JOIN matches ON players.player_id = matches.winner_id  WHERE players.hand = 'L'  AND matches.tourney_name = 'WTA Championships'
SELECT players.first_name, players.country_code, players.birth_date FROM players INNER JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings)
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN (     SELECT winner_id, SUM(winner_rank_points) AS total_rank_points     FROM matches     GROUP BY winner_id     ORDER BY total_rank_points DESC     LIMIT 1 ) AS max_rank_points ON players.player_id = max_rank_points.winner_id
SELECT hand, COUNT(*) AS player_count FROM players GROUP BY hand
SELECT hand, COUNT(*) AS player_count FROM players GROUP BY hand
SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured'
SELECT name, tonnage FROM ship ORDER BY name ASC
SELECT battle.name, battle.date, battle.result FROM battle
SELECT MAX(killed) AS max_death_toll, MIN(killed) AS min_death_toll, battle.name  FROM battle  JOIN death ON battle.id = death.caused_by_ship_id  GROUP BY battle.name
SELECT AVG(injured) FROM death
SELECT killed, injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't';
SELECT name, result  FROM battle  WHERE bulgarian_commander <> 'Boril'
SELECT DISTINCT battle.id, battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig'
SELECT battle.id, battle.name  FROM battle  JOIN ship ON ship.lost_in_battle = battle.id  JOIN death ON death.caused_by_ship_id = ship.id  GROUP BY battle.id, battle.name  HAVING SUM(death.killed) > 10;
SELECT ship.id, ship.name FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1
SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'
SELECT COUNT(DISTINCT result) AS result_count FROM battle
SELECT count(*) FROM battle WHERE result = 'victory' AND id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225' AND lost_in_battle IS NOT NULL)
SELECT name, date  FROM battle  WHERE id IN (     SELECT lost_in_battle      FROM ship      WHERE name = 'Lettice' OR name = 'HMS Atalanta' )
SELECT name, result, bulgarian_commander  FROM battle  WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel') AND bulgarian_commander IS NOT NULL;
SELECT note FROM death WHERE note LIKE '%East%'
SELECT line_1, line_2 FROM Addresses;
SELECT line_1, line_2 FROM Addresses
SELECT count(*) FROM Courses
SELECT count(*) FROM Courses
SELECT course_description FROM Courses WHERE course_name = 'math'
SELECT course_description FROM Courses WHERE course_name = 'math'
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT Departments.department_name, Departments.department_id  FROM Departments  JOIN Degree_Programs ON Degree_Programs.department_id = Departments.department_id  GROUP BY Departments.department_name, Departments.department_id  ORDER BY COUNT(Degree_Programs.degree_program_id) DESC  LIMIT 1;
SELECT departments.department_name, departments.department_id FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY departments.department_name, departments.department_id ORDER BY COUNT(degree_programs.degree_program_id) DESC LIMIT 1;
SELECT count(DISTINCT Departments.department_id) FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id
SELECT COUNT(DISTINCT department_id) FROM Departments
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs
SELECT count(DISTINCT degree_program_id) FROM Degree_Programs
SELECT count(DISTINCT degree_program_id)  FROM Degree_Programs  WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering')
SELECT count(degree_program_id) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = 'engineering'
SELECT section_name, section_description FROM Sections
SELECT section_name, section_description FROM Sections
SELECT course_name, course_id  FROM Courses  WHERE course_id IN (     SELECT course_id      FROM Sections      GROUP BY course_id      HAVING COUNT(*) <= 2 )
SELECT course_name, course_id FROM Courses WHERE course_id NOT IN (     SELECT course_id     FROM Sections     GROUP BY course_id     HAVING COUNT(section_id) >= 2 )
SELECT section_name FROM Sections ORDER BY section_name DESC
SELECT section_name FROM Sections ORDER BY section_name DESC
SELECT semester_name, semester_id  FROM Semesters  JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id  GROUP BY semester_name, semester_id  ORDER BY COUNT(Student_Enrolment.student_enrolment_id) DESC  LIMIT 1
SELECT semester_name, semester_id FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY semester_name, semester_id ORDER BY COUNT(Student_Enrolment.student_id) DESC LIMIT 1
SELECT department_description  FROM departments  WHERE department_name LIKE '%computer%'
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM Students s INNER JOIN Student_Enrolment se ON s.student_id = se.student_id WHERE se.semester_id = [semester_id] GROUP BY s.first_name, s.middle_name, s.last_name, s.student_id HAVING COUNT(DISTINCT se.degree_program_id) >= 2;  Note: Replace [semester_id] with the actual semester ID you want to query.
SELECT first_name, middle_name, last_name, student_id FROM Students WHERE student_id IN (   SELECT student_id   FROM Student_Enrolment   GROUP BY student_id   HAVING COUNT(DISTINCT degree_program_id) = 2   AND COUNT(DISTINCT semester_id) = 1 )
SELECT first_name, middle_name, last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelor'
SELECT students.first_name, students.middle_name, students.last_name  FROM students  JOIN student_enrolment ON students.student_id = student_enrolment.student_id  JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_programs.degree_summary_name = 'Bachelors'
SELECT degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT degree_summary_name FROM Degree_Programs  JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id  GROUP BY degree_summary_name  ORDER BY COUNT(Student_Enrolment.student_id) DESC  LIMIT 1
SELECT Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name FROM Degree_Programs INNER JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_program_id ORDER BY COUNT(Student_Enrolment.student_id) DESC LIMIT 1;
SELECT dp.degree_program_id, dp.degree_summary_description FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_description ORDER BY COUNT(se.student_id) DESC LIMIT 1
SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(T2.student_id) AS num_enrollments FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY num_enrollments DESC LIMIT 1
SELECT first_name, middle_name, last_name, students.student_id, count(student_enrolment_id) FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY count(student_enrolment_id) DESC LIMIT 1;
SELECT semester_name  FROM Semesters  WHERE semester_id NOT IN (SELECT DISTINCT semester_id FROM Student_Enrolment)
SELECT semester_name  FROM Semesters  WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)
SELECT DISTINCT course_name  FROM Courses  WHERE course_id IN (SELECT DISTINCT course_id FROM Student_Enrolment_Courses)
SELECT DISTINCT course_name  FROM Courses  WHERE EXISTS (SELECT * FROM Student_Enrolment_Courses WHERE Student_Enrolment_Courses.course_id = Courses.course_id)
SELECT course_name FROM Student_Enrolment_Courses INNER JOIN Courses ON Student_Enrolment_Courses.course_id = Courses.course_id GROUP BY course_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY course_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT last_name  FROM students  JOIN addresses ON students.current_address_id = addresses.address_id  WHERE state_province_county = 'North Carolina'  AND students.student_id NOT IN (SELECT student_id FROM student_enrolment)
SELECT Students.last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id LEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id LEFT JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Addresses.state_province_county = 'North Carolina' AND Student_Enrolment.student_enrolment_id IS NULL;
SELECT transcript_date, transcript_id FROM Transcripts JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id GROUP BY transcript_date, transcript_id HAVING COUNT(Transcript_Contents.student_course_id) >= 2;
SELECT transcript_date, transcript_id  FROM Transcripts  WHERE transcript_id IN (     SELECT transcript_id      FROM Transcript_Contents      GROUP BY transcript_id      HAVING COUNT(*) >= 2 )
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT s.first_name, s.middle_name, s.last_name FROM Students s ORDER BY s.date_first_registered LIMIT 1
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered LIMIT 1
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Transcripts t ON se.student_enrolment_id = t.transcript_id ORDER BY t.transcript_date LIMIT 1;
SELECT first_name FROM Students JOIN Addresses AS permanent ON Students.permanent_address_id = permanent.address_id JOIN Addresses AS current ON Students.current_address_id = current.address_id WHERE permanent.address_id <> current.address_id;
SELECT students.first_name FROM students WHERE students.permanent_address_id <> students.current_address_id
SELECT addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3 FROM addresses INNER JOIN students ON addresses.address_id = students.current_address_id GROUP BY addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3 ORDER BY COUNT(*) DESC LIMIT 1
SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses JOIN students ON addresses.address_id = students.current_address_id GROUP BY addresses.address_id, addresses.line_1, addresses.line_2 ORDER BY COUNT(*) DESC LIMIT 1
SELECT AVG(transcript_date) FROM Transcripts
SELECT avg(transcript_date) FROM Transcripts
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1;
SELECT MIN(transcript_date), other_details FROM Transcripts GROUP BY other_details ORDER BY MIN(transcript_date) ASC LIMIT 1;
SELECT count(transcript_id) FROM Transcripts
SELECT count(*) FROM Transcripts
SELECT MAX(transcript_date) FROM Transcripts
SELECT MAX(transcript_date) AS last_transcript_date FROM Transcripts
SELECT MAX(enrollment_count) AS max_enrollment_count, student_course_id FROM (     SELECT COUNT(*) AS enrollment_count, student_course_id     FROM Transcript_Contents     GROUP BY student_course_id ) AS enrollment_counts GROUP BY student_course_id;
SELECT MAX(T1.course_count), T1.student_enrolment_id FROM (     SELECT COUNT(T1.course_id) AS course_count, T2.student_enrolment_id     FROM student_enrolment_courses AS T1     JOIN Student_Enrolment AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id     GROUP BY T1.course_id, T2.student_enrolment_id ) AS T1 GROUP BY T1.student_enrolment_id HAVING T1.course_count = (     SELECT MAX(T1.course_count)     FROM (         SELECT COUNT(T1.course_id) AS course_count, T2.student_enrolment_id         FROM student_enrolment_courses AS T1         JOIN Student_Enrolment AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id         GROUP BY T1.course_id, T2.student_enrolment_id     ) AS T1 )
SELECT transcript_date, transcript_id FROM Transcripts GROUP BY transcript_date, transcript_id ORDER BY COUNT(*) ASC LIMIT 1;
SELECT transcript_date, transcript_id  FROM Transcripts AS T1  JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id  GROUP BY T1.transcript_date, T1.transcript_id  ORDER BY COUNT(*) ASC  LIMIT 1
SELECT semester_name  FROM Semesters  WHERE semester_id IN (     SELECT semester_id      FROM Student_Enrolment      WHERE degree_program_id = 'Bachelor'      AND semester_id IN (         SELECT semester_id          FROM Student_Enrolment          WHERE degree_program_id = 'Master'     ) )
SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (     SELECT degree_program_id     FROM Degree_Programs     WHERE degree_summary_name = 'Masters' ) AND semester_id IN (     SELECT semester_id     FROM Student_Enrolment     WHERE degree_program_id IN (         SELECT degree_program_id         FROM Degree_Programs         WHERE degree_summary_name = 'Bachelors'     ) ) GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) > 1;
SELECT count(DISTINCT Students.current_address_id) FROM Students
SELECT DISTINCT line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details  FROM Addresses  WHERE address_id IN (   SELECT current_address_id    FROM Students    WHERE current_address_id IS NOT NULL ) OR address_id IN (   SELECT permanent_address_id    FROM Students    WHERE permanent_address_id IS NOT NULL )
SELECT student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details FROM Students ORDER BY last_name DESC, first_name DESC;
SELECT student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details FROM Students ORDER BY last_name DESC
SELECT * FROM Sections WHERE section_name = 'h'
SELECT section_description FROM Sections WHERE section_name = 'h'
SELECT students.first_name  FROM students  JOIN addresses ON students.permanent_address_id = addresses.address_id  WHERE addresses.country = 'Haiti' OR students.cell_mobile_number = '09700166582'
SELECT first_name FROM Students WHERE cell_mobile_number = '09700166582' OR permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti')
SELECT cartoon.Title FROM cartoon ORDER BY cartoon.Title ASC
SELECT Cartoon.Title FROM Cartoon ORDER BY Cartoon.Title ASC
SELECT cartoon.title FROM cartoon JOIN TV_Channel ON cartoon.Channel = TV_Channel.id WHERE cartoon.directed_by = "Ben Jones"
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones"
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
SELECT cartoon.title, cartoon.directed_by  FROM cartoon  INNER JOIN TV_Channel ON cartoon.Channel = TV_Channel.id  ORDER BY cartoon.original_air_date;
SELECT Cartoon.Title, Cartoon.Directed_by  FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  ORDER BY Cartoon.Original_air_date;
SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Brandon Vietti';
SELECT cartoon.Title  FROM cartoon  JOIN TV_Channel ON cartoon.Channel = TV_Channel.id  WHERE cartoon.Directed_by IN ('Ben Jones', 'Brandon Vietti')
SELECT TV_Channel.Country, COUNT(*) AS num_channels FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY num_channels DESC LIMIT 1;
SELECT TV_Channel.Country, COUNT(*) AS Channel_Count  FROM TV_Channel  GROUP BY TV_Channel.Country  ORDER BY Channel_Count DESC  LIMIT 1
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel
SELECT count(DISTINCT series_name), count(DISTINCT Content) FROM TV_Channel
SELECT content FROM tv_channel WHERE series_name = "Sky Radio"
SELECT content FROM tv_channel WHERE series_name = 'Sky Radio';
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio"
SELECT Package_Option FROM TV_Channel WHERE id IN (SELECT Channel FROM TV_series WHERE series_name = 'Sky Radio')
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'
SELECT TV_Channel.Language, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY TV_Channel.Language ORDER BY Channel_Count ASC
SELECT TV_Channel.Language, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY TV_Channel.Language ORDER BY Channel_Count ASC LIMIT 1
SELECT TV_Channel.Language, COUNT(*)  FROM TV_Channel  GROUP BY TV_Channel.Language
SELECT tv_channel.Language, COUNT(*)  FROM tv_channel  GROUP BY tv_channel.Language
SELECT series_name FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.title = "The Rise of the Blue Beetle!";
SELECT series_name FROM TV_Channel WHERE id = (   SELECT Channel   FROM Cartoon   WHERE Title = "The Rise of the Blue Beetle" )
SELECT cartoon.Title  FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE TV_Channel.series_name = "Sky Radio";
SELECT cartoon.Title FROM cartoon JOIN TV_Channel ON cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT TV_series.Episode FROM TV_series ORDER BY TV_series.Rating
SELECT TV_series.title  FROM TV_series ORDER BY Rating ASC
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3
SELECT MIN(Share), MAX(Share) FROM TV_series
SELECT MAX(Share), MIN(Share) FROM TV_series;
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime"
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime"
SELECT tv_series.weekly_rank FROM tv_series JOIN Cartoon ON tv_series.Channel = Cartoon.Channel JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = "A Love of a Lifetime"
SELECT tv_series.Weekly_Rank FROM tv_series JOIN Cartoon ON Cartoon.Channel = tv_series.Channel JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = "A Love of a Lifetime"
SELECT tv_channel.series_name FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_series.episode = 'A Love of a Lifetime'
SELECT TV_series.series_name  FROM TV_series  WHERE Episode = "A Love of a Lifetime"
SELECT TV_series.Episode FROM TV_series INNER JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"
SELECT Episode FROM TV_series WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = "Sky Radio")
SELECT cartoon.Directed_by, COUNT(cartoon.id) AS num_cartoons FROM cartoon GROUP BY cartoon.Directed_by
SELECT cartoon.directed_by, COUNT(cartoon.id)  FROM cartoon GROUP BY cartoon.directed_by
SELECT cartoon.production_code, tv_channel.series_name FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id ORDER BY cartoon.original_air_date DESC LIMIT 1;
SELECT c.production_code, c.channel FROM cartoon c INNER JOIN TV_Channel tc ON c.channel = tc.id ORDER BY c.original_air_date DESC LIMIT 1
SELECT package_option, series_name FROM TV_Channel WHERE High_definition_TV = 'True'
SELECT package_option, series_name FROM TV_Channel WHERE Hight_definition_TV = true
SELECT DISTINCT Country FROM TV_Channel WHERE id IN (   SELECT Channel   FROM Cartoon   WHERE Written_by = 'Todd Casey' )
SELECT DISTINCT country FROM TV_Channel WHERE id IN (SELECT Channel              FROM Cartoon              WHERE Written_by = 'Todd Casey');
SELECT DISTINCT country  FROM TV_Channel  WHERE id NOT IN (SELECT Channel                   FROM Cartoon                   WHERE Written_by = 'Todd Casey')
SELECT DISTINCT country  FROM TV_Channel  WHERE id NOT IN (SELECT Channel                   FROM Cartoon                   WHERE Written_by = 'Todd Casey')
SELECT series_name, country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Michael Chang' GROUP BY series_name, country
SELECT series_name, country FROM TV_Channel WHERE id IN (   SELECT channel   FROM Cartoon   WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Michael Chang' )
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language <> 'English'
SELECT TV_Channel.pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language <> 'English'
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.id HAVING COUNT(*) > 2
SELECT id FROM TV_Channel HAVING COUNT(*) > 2
SELECT tv_channel.id FROM tv_channel LEFT JOIN cartoon ON cartoon.channel = tv_channel.id AND cartoon.directed_by = 'Ben Jones' WHERE cartoon.id IS NULL
SELECT TV_Channel.id FROM TV_Channel LEFT JOIN Cartoon ON Cartoon.Channel = TV_Channel.id AND Cartoon.Directed_by = 'Ben Jones' WHERE Cartoon.id IS NULL;
SELECT package_option  FROM TV_Channel  WHERE id NOT IN (SELECT Channel                   FROM Cartoon                   WHERE Directed_by = 'Ben Jones');
SELECT package_option FROM TV_Channel WHERE id NOT IN (     SELECT Channel     FROM Cartoon     WHERE Directed_by = 'Ben Jones' )
SELECT COUNT(Poker_Player_ID) FROM poker_player
SELECT COUNT(*) FROM poker_player
SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC
SELECT poker_player.Earnings  FROM poker_player  ORDER BY poker_player.Earnings DESC
SELECT poker_player.Final_Table_Made, poker_player.Best_Finish  FROM poker_player
SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player
SELECT avg(Earnings) FROM poker_player
SELECT AVG(Earnings) FROM poker_player
SELECT poker_player.money_rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.earnings DESC LIMIT 1
SELECT p.money_rank FROM poker_player p WHERE p.earnings = (   SELECT MAX(p2.earnings)   FROM poker_player p2 )
SELECT max(final_table_made) FROM poker_player WHERE earnings < 200000
SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000
SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID
SELECT name FROM people
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000
SELECT people.Name  FROM people  JOIN poker_player  ON people.People_ID = poker_player.People_ID  WHERE poker_player.Earnings > 300000;
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC
SELECT T1.Name  FROM people AS T1  JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  ORDER BY T2.Final_Table_Made ASC
SELECT people.birth_date FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.earnings LIMIT 1
SELECT people.Birth_Date FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Earnings  LIMIT 1
SELECT poker_player.money_rank  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  ORDER BY people.Height DESC  LIMIT 1
SELECT poker_player.money_rank FROM poker_player INNER JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1
SELECT AVG(Earnings) FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE Height > 200
SELECT AVG(poker_player.Earnings)  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  WHERE people.Height > 200;
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC
SELECT people.name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC
SELECT nationality, COUNT(*) as count FROM people GROUP BY nationality
SELECT people.Nationality, COUNT(*) AS Count FROM people GROUP BY people.Nationality
SELECT nationality, COUNT(*) as count  FROM people  GROUP BY nationality  ORDER BY count DESC  LIMIT 1
SELECT nationality, count(*) as count FROM people GROUP BY nationality ORDER BY count DESC LIMIT 1
SELECT nationality  FROM people  GROUP BY nationality  HAVING COUNT(*) > 1
SELECT Nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2
SELECT p.name, p.birth_date FROM people p ORDER BY p.name ASC;
SELECT name, birth_date FROM people ORDER BY name ASC
SELECT people.name FROM people WHERE people.nationality != 'Russia'
SELECT people.name FROM people WHERE people.nationality <> 'Russia'
SELECT name FROM people WHERE people_id NOT IN (SELECT People_ID FROM poker_player)
SELECT name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
SELECT COUNT(DISTINCT Nationality) FROM people
SELECT COUNT(DISTINCT Nationality) FROM people
SELECT count(DISTINCT state) FROM AREA_CODE_STATE
SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name  FROM CONTESTANTS  ORDER BY CONTESTANTS.contestant_name DESC
SELECT vote_id, phone_number, state FROM VOTES
SELECT max(area_code) AS max_area_code, min(area_code) AS min_area_code FROM AREA_CODE_STATE;
SELECT MAX(created) FROM VOTES WHERE state = 'CA'
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name <> 'Jessie Alloway'
SELECT DISTINCT state, created FROM VOTES
SELECT contestant_number, contestant_name  FROM CONTESTANTS  WHERE contestant_number IN (     SELECT contestant_number      FROM VOTES      GROUP BY contestant_number      HAVING COUNT(*) >= 2 )
SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number = (   SELECT contestant_number   FROM VOTES   GROUP BY contestant_number   ORDER BY COUNT(*) ASC   LIMIT 1 )
SELECT COUNT(*) FROM VOTES WHERE state = 'NY' OR state = 'CA'
SELECT count(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)
SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state = T2.state GROUP BY T1.area_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT created, state, phone_number  FROM VOTES  WHERE contestant_number = (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling')
SELECT area_code  FROM area_code_state  WHERE state IN (     SELECT state      FROM votes      WHERE contestant_number IN (         SELECT contestant_number          FROM contestants          WHERE contestant_name = 'Tabatha Gehling' OR contestant_name = 'Kelly Clauss'     )     GROUP BY state      HAVING COUNT(DISTINCT contestant_number) >= 2 )
SELECT contestant_name  FROM CONTESTANTS  WHERE contestant_name LIKE '%Al%'
SELECT name FROM country WHERE IndepYear > 1950
SELECT name FROM country WHERE IndepYear > 1950
SELECT COUNT(DISTINCT Code) FROM country WHERE GovernmentForm = 'Republic'
SELECT count(DISTINCT Code) FROM country WHERE GovernmentForm LIKE '%Republic%'
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Caribbean'
SELECT continent FROM country WHERE Name = 'Anguilla'
SELECT Continent FROM country WHERE Name = 'Anguilla'
SELECT country.Region FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Name = 'Kabul'
SELECT region FROM country WHERE Capital = (SELECT ID FROM city WHERE Name = 'Kabul')
SELECT language  FROM countrylanguage  WHERE countrycode = (   SELECT code    FROM country    WHERE name = 'Aruba' )  AND percentage = (   SELECT max(percentage)    FROM countrylanguage    WHERE countrycode = (     SELECT code      FROM country      WHERE name = 'Aruba'   ) )
SELECT language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba')
SELECT country.Population, country.LifeExpectancy FROM country WHERE country.Name = 'Brazil';
SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil'
SELECT region, population FROM country WHERE name = 'Angola'
SELECT country.Region, country.Population FROM country WHERE country.Name = 'Angola';
SELECT avg(LifeExpectancy) FROM country WHERE Region = 'Central Africa'
SELECT avg(LifeExpectancy) FROM country WHERE Region = 'Central Africa'
SELECT name FROM country WHERE continent = 'Asia' AND lifeexpectancy = (SELECT MIN(lifeexpectancy) FROM country WHERE continent = 'Asia' AND lifeexpectancy IS NOT NULL)
SELECT name FROM country WHERE continent = 'Asia' AND lifeexpectancy = (SELECT min(lifeexpectancy) FROM country WHERE continent = 'Asia' AND lifeexpectancy IS NOT NULL)
SELECT sum(country.Population) AS total_population, max(country.GNP) AS maximum_GNP FROM country WHERE country.Continent = 'Asia'
SELECT SUM(country.Population) AS TotalPopulation, MAX(country.GNP) AS LargestGNP FROM country WHERE country.Continent = 'Asia'
SELECT avg(LifeExpectancy)  FROM country  WHERE GovernmentForm = 'Republic' AND Continent = 'Africa'
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'
SELECT sum(SurfaceArea) FROM country WHERE continent IN ('Asia', 'Europe')
SELECT SUM(SurfaceArea) FROM country WHERE continent IN ('Asia', 'Europe')
SELECT sum(Population) FROM city WHERE District = 'Gelderland'
SELECT SUM(Population) FROM city WHERE District = 'Gelderland'
SELECT avg(GNP), sum(Population) FROM country WHERE GovernmentForm = 'US Territory'
SELECT avg(GNP) ,  sum(population) FROM country WHERE governmentform = 'US'
SELECT count(DISTINCT Language) FROM countrylanguage
SELECT COUNT(DISTINCT Language) FROM countrylanguage
SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'
SELECT count(DISTINCT GovernmentForm) FROM country WHERE continent = 'Africa'
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW'
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW'
SELECT count(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'
SELECT COUNT(Language)  FROM countrylanguage  WHERE IsOfficial = 'T'  AND CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan')
SELECT country.Name FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY country.Code, country.Name ORDER BY COUNT(countrylanguage.Language) DESC LIMIT 1
SELECT name FROM country WHERE code IN (     SELECT countrycode     FROM countrylanguage     GROUP BY countrycode     HAVING COUNT(DISTINCT language) = (         SELECT MAX(cnt)         FROM (             SELECT COUNT(DISTINCT language) AS cnt             FROM countrylanguage             GROUP BY countrycode         )     ) );
SELECT continent FROM countrylanguage GROUP BY continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1;
SELECT continent, COUNT(language) AS language_count  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  GROUP BY continent  ORDER BY language_count DESC  LIMIT 1
SELECT COUNT(DISTINCT countrycode)  FROM countrylanguage  WHERE language IN ('Dutch', 'English') GROUP BY countrycode HAVING COUNT(DISTINCT language) = 2
SELECT COUNT(DISTINCT T1.CountryCode) FROM countrylanguage AS T1 WHERE T1.Language IN ('Dutch', 'English')
SELECT DISTINCT name FROM country WHERE code IN (   SELECT countrycode   FROM countrylanguage   WHERE language IN ('English', 'French')   GROUP BY countrycode   HAVING COUNT(DISTINCT language) = 2 );
SELECT country.Name FROM countrylanguage AS cl1 INNER JOIN countrylanguage AS cl2 ON cl1.CountryCode = cl2.CountryCode INNER JOIN country ON cl1.CountryCode = country.Code WHERE cl1.Language = 'English' AND cl2.Language = 'French'
SELECT name FROM country  WHERE Code IN    (SELECT CountryCode FROM countrylanguage     WHERE Language = 'English' AND IsOfficial = 'T')    AND Code IN    (SELECT CountryCode FROM countrylanguage     WHERE Language = 'French' AND IsOfficial = 'T')
SELECT country.name  FROM countrylanguage cl1  JOIN country ON cl1.countrycode = country.code  WHERE cl1.language IN ('English', 'French')  AND cl1.isofficial = 'T'  GROUP BY country.name  HAVING COUNT(DISTINCT cl1.language) = 2
SELECT COUNT(DISTINCT country.Continent)  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  WHERE countrylanguage.Language = 'Chinese'
SELECT count(DISTINCT continent) FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Chinese'
SELECT DISTINCT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' OR language = 'Dutch')
SELECT DISTINCT region  FROM country  WHERE country.Code IN (     SELECT countrylanguage.CountryCode      FROM countrylanguage      WHERE countrylanguage.Language = 'Dutch' OR countrylanguage.Language = 'English' )
SELECT DISTINCT country.name  FROM countrylanguage  JOIN country ON countrylanguage.countrycode = country.code  WHERE (countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch')  AND countrylanguage.isofficial = 'T'
SELECT DISTINCT Name FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch') AND countrylanguage.IsOfficial = 'T'
SELECT language FROM countrylanguage WHERE CountryCode IN (     SELECT Code     FROM country     WHERE Continent = 'Asia' ) GROUP BY language HAVING MAX(Percentage) = (     SELECT MAX(Percentage)     FROM countrylanguage     WHERE CountryCode IN (         SELECT Code         FROM country         WHERE Continent = 'Asia'     ) )
SELECT language FROM countrylanguage WHERE countrycode IN (     SELECT code     FROM country     WHERE continent = 'Asia' ) GROUP BY language ORDER BY COUNT(*) DESC LIMIT 1
SELECT language FROM countrylanguage WHERE countrycode IN (   SELECT code   FROM country   WHERE governmentform LIKE '%Republic%' ) GROUP BY language HAVING COUNT(DISTINCT countrycode) = 1
SELECT DISTINCT language  FROM countrylanguage  WHERE countrycode IN (     SELECT code      FROM country      WHERE governmentform = 'Republic' )  GROUP BY language  HAVING COUNT(DISTINCT countrycode) = 1
SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;
SELECT name FROM city  WHERE countrycode IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T') ORDER BY population DESC LIMIT 1
SELECT name, population, lifeexpectancy  FROM country  WHERE continent = 'Asia'  AND surfacearea = (SELECT MAX(surfacearea) FROM country WHERE continent = 'Asia');
SELECT country.Name, country.Population, country.LifeExpectancy  FROM country  WHERE country.Continent = 'Asia'  ORDER BY country.SurfaceArea DESC  LIMIT 1
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')
SELECT avg(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')
SELECT SUM(country.Population) FROM country WHERE country.Code NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = 'English')
SELECT sum(country.Population) FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language <> 'English' OR countrylanguage.Language IS NULL
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T'
SELECT language  FROM countrylanguage  WHERE IsOfficial = 'T'  AND CountryCode = (SELECT Code FROM country WHERE HeadOfState = 'Beatrix');
SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.IndepYear < 1930 AND countrylanguage.IsOfficial = 'T'
SELECT count(DISTINCT countrylanguage.Language)  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.IndepYear < 1930
SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')
SELECT DISTINCT name FROM country WHERE surfacearea > (SELECT max(surfacearea) FROM country WHERE continent = 'Europe')
SELECT country.Name FROM country WHERE country.Continent = 'Africa' AND country.Population < ANY (SELECT country.Population FROM country WHERE country.Continent = 'Asia')
SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')
SELECT country.name  FROM country  WHERE country.continent = 'Asia'    AND country.population > ALL (SELECT population FROM country WHERE continent = 'Africa')
SELECT DISTINCT name FROM country WHERE continent = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE continent = 'Africa')
SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE Language = 'English')
SELECT country.Code FROM country WHERE country.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')
SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language <> 'English'
SELECT country.Code FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language <> 'English'
SELECT country.Code  FROM countrylanguage  LEFT JOIN country ON countrylanguage.CountryCode = country.Code  WHERE countrylanguage.Language != 'English'  AND country.GovernmentForm != 'Republic'
SELECT country.Code  FROM country  WHERE country.Code NOT IN (   SELECT countrylanguage.CountryCode    FROM countrylanguage    WHERE countrylanguage.Language = 'English' )  AND country.GovernmentForm NOT LIKE '%Republic%'
SELECT DISTINCT city.Name  FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe'  AND countrylanguage.Language <> 'English'  AND countrylanguage.IsOfficial = 'F'
SELECT DISTINCT city.name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language <> 'English';
SELECT DISTINCT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode  WHERE country.Continent = 'Asia'  AND countrylanguage.Language = 'Chinese'  AND countrylanguage.IsOfficial = 'T'
SELECT DISTINCT city.name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
SELECT name, indepyear, surfacearea  FROM country  WHERE population = (   SELECT MIN(population)    FROM country )
SELECT country.name, country.indepyear, country.surfacearea  FROM country  WHERE country.population = (SELECT MIN(population) FROM country)
SELECT country.Population, country.Name, country.HeadOfState  FROM country  ORDER BY country.SurfaceArea DESC  LIMIT 1
SELECT name, population, headofstate FROM country WHERE surfacearea = (SELECT MAX(surfacearea) FROM country)
SELECT country.Name, COUNT(countrylanguage.Language) AS LanguageCount FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(countrylanguage.Language) >= 3
SELECT country.Name, COUNT(countrylanguage.Language) AS LanguageCount FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING LanguageCount > 2;
SELECT district, count(*)  FROM city  WHERE population > (SELECT AVG(population) FROM city)  GROUP BY district
SELECT count(*) , district  FROM city  WHERE population > (SELECT avg(population) FROM city) GROUP BY district
SELECT governmentform, SUM(population) AS total_population FROM country WHERE governmentform IS NOT NULL GROUP BY governmentform HAVING AVG(lifeexpectancy) > 72;
SELECT governmentform, SUM(population)  FROM country  WHERE lifeexpectancy > 72  GROUP BY governmentform
SELECT avg(lifeexpectancy), sum(population), continent FROM country GROUP BY continent HAVING avg(lifeexpectancy) < 72;
SELECT country.Continent, SUM(country.Population), AVG(country.LifeExpectancy)  FROM country  GROUP BY country.Continent  HAVING AVG(country.LifeExpectancy) < 72
SELECT country.Name, country.SurfaceArea  FROM country  ORDER BY country.SurfaceArea DESC  LIMIT 5
SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5
SELECT c.Name  FROM country c  ORDER BY c.Population DESC  LIMIT 3
SELECT name FROM country ORDER BY Population DESC LIMIT 3
SELECT name FROM country ORDER BY population ASC LIMIT 3
SELECT name FROM country ORDER BY population ASC LIMIT 3
SELECT count(*) FROM country WHERE Continent = 'Asia'
SELECT count(DISTINCT Name) FROM country WHERE Continent = 'Asia'
SELECT country.Name FROM country WHERE continent = 'Europe' AND population = 80000
SELECT country.Name FROM country WHERE continent = 'Europe' AND population = 80000
SELECT sum(Population), avg(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;
SELECT sum(population) AS total_population, avg(surfacearea) AS average_surface_area  FROM country  WHERE continent = 'North America' AND surfacearea > 3000
SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000
SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000
SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1
SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1
SELECT T2.Language FROM (SELECT countrycode, MAX(percentage) AS max_percentage       FROM countrylanguage       GROUP BY countrycode) AS T1 JOIN countrylanguage AS T2 ON T1.countrycode = T2.countrycode AND T1.max_percentage = T2.percentage GROUP BY T2.countrycode, T2.Language;
SELECT countrycode, language FROM countrylanguage WHERE (countrycode, percentage) IN (     SELECT countrycode, MAX(percentage)     FROM countrylanguage     GROUP BY countrycode )
SELECT count(DISTINCT CountryCode)  FROM countrylanguage  WHERE Language = 'Spanish'  AND Percentage = (SELECT MAX(Percentage)                    FROM countrylanguage                    WHERE Language = 'Spanish')
SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T' AND Percentage > 50
SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE language = 'Spanish')
SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' AND percentage >= 50
SELECT count(*) FROM conductor
SELECT COUNT(DISTINCT Conductor_ID) FROM conductor
SELECT conductor.Name FROM conductor ORDER BY conductor.Age ASC;
SELECT conductor.Name FROM conductor ORDER BY conductor.Age
SELECT name FROM conductor WHERE nationality <> 'USA'
SELECT name FROM conductor WHERE nationality <> 'USA'
SELECT orchestra.Record_Company FROM orchestra ORDER BY orchestra.Year_of_Founded DESC
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC
SELECT avg(Attendance) FROM show
SELECT avg(Attendance) FROM show
SELECT MAX(share) AS max_share, MIN(share) AS min_share FROM performance WHERE type <> 'Live final'
SELECT MAX(share) AS max_share, MIN(share) AS min_share FROM performance WHERE type != 'Live final'
SELECT count(DISTINCT Nationality) FROM conductor
SELECT count(DISTINCT Nationality) FROM conductor
SELECT SELECT Name FROM conductor ORDER BY Year_of_Work DESC;
SELECT conductor.name  FROM conductor  ORDER BY conductor.year_of_work DESC
SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1
SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC LIMIT 1
SELECT conductor.name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID
SELECT name FROM conductor WHERE conductor_id IN (   SELECT conductor_id   FROM orchestra   GROUP BY conductor_id   HAVING COUNT(DISTINCT orchestra_id) > 1 )
SELECT conductor.name  FROM conductor  INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID  GROUP BY conductor.name  HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID, conductor.Name ORDER BY COUNT(orchestra.Orchestra_ID) DESC LIMIT 1
SELECT c.name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID, c.name ORDER BY COUNT(o.Orchestra_ID) DESC LIMIT 1;
SELECT conductor.Name  FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008
SELECT name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra WHERE Year_of_Founded > 2008)
SELECT record_company, COUNT(DISTINCT Orchestra_ID)  FROM orchestra  GROUP BY record_company
SELECT COUNT(DISTINCT orchestra.Orchestra_ID) AS orchestra_count, orchestra.Record_Company FROM orchestra GROUP BY orchestra.Record_Company
SELECT major_record_format, COUNT(*) AS record_format_count FROM orchestra GROUP BY major_record_format ORDER BY record_format_count ASC
SELECT orchestra.major_record_format, COUNT(orchestra.major_record_format)  FROM orchestra  GROUP BY orchestra.major_record_format  ORDER BY COUNT(orchestra.major_record_format) DESC
SELECT record_company, COUNT(*) as num_orchestras  FROM orchestra  GROUP BY record_company  ORDER BY num_orchestras DESC  LIMIT 1
SELECT record_company, COUNT(orchestra_id) AS count FROM orchestra GROUP BY record_company ORDER BY count DESC LIMIT 1
SELECT orchestra.Name FROM orchestra WHERE NOT EXISTS (SELECT orchestra_id FROM performance WHERE orchestra.Orchestra_ID = performance.Orchestra_ID);
SELECT orchestra.Orchestra FROM orchestra WHERE NOT EXISTS (     SELECT *     FROM performance     WHERE orchestra.Orchestra_ID = performance.Orchestra_ID )
SELECT DISTINCT record_company FROM orchestra WHERE year_of_founded < 2003 OR year_of_founded > 2003
SELECT record_company  FROM orchestra  WHERE year_of_founded < 2003  INTERSECT  SELECT record_company  FROM orchestra  WHERE year_of_founded > 2003
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format = "CD" OR Major_Record_Format = "DVD"
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')
SELECT DISTINCT year_of_founded  FROM orchestra  WHERE orchestra_id IN (   SELECT orchestra_id    FROM performance    GROUP BY orchestra_id    HAVING count(*) > 1 )
SELECT orchestra.year_of_founded FROM orchestra INNER JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID GROUP BY orchestra.year_of_founded HAVING COUNT(DISTINCT performance.Performance_ID) > 1
SELECT COUNT(ID) FROM Highschooler
SELECT COUNT(*) FROM Highschooler
SELECT Highschooler.name, Highschooler.grade FROM Highschooler
SELECT Highschooler.name, Highschooler.grade FROM Highschooler
SELECT Highschooler.grade FROM Highschooler
SELECT Highschooler.grade FROM Highschooler
SELECT grade FROM Highschooler WHERE name = "Kyle"
SELECT grade FROM Highschooler WHERE name = 'Kyle'
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10
SELECT ID FROM Highschooler WHERE name = 'Kyle'
SELECT ID FROM Highschooler WHERE name = 'Kyle'
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)
SELECT count(*) FROM Highschooler WHERE grade IN (9, 10)
SELECT Highschooler.grade, COUNT(*) AS count FROM Highschooler GROUP BY Highschooler.grade
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade
SELECT grade, COUNT(*) AS count FROM Highschooler GROUP BY grade ORDER BY count DESC LIMIT 1
SELECT grade, COUNT(*) AS count FROM Highschooler GROUP BY grade ORDER BY count DESC LIMIT 1
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4
SELECT DISTINCT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4
SELECT Highschooler.ID, COUNT(Friend.friend_id) FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID
SELECT T1.ID, COUNT(T2.friend_id) FROM Highschooler AS T1 LEFT JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID
SELECT T1.name, COUNT(T2.friend_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.name
SELECT Highschooler.name, COUNT(friend.friend_id) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name;
SELECT Highschooler.name  FROM Highschooler  JOIN Friend ON Friend.student_id = Highschooler.ID  GROUP BY Highschooler.name  ORDER BY COUNT(Friend.friend_id) DESC  LIMIT 1
SELECT T1.name  FROM Highschooler AS T1  JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.ID  ORDER BY COUNT(T2.friend_id) DESC  LIMIT 1  In the fixed SQL query, the table names and column names are correctly capitalized. The join condition is fixed to match the foreign key relationship between the tables. The grouping is done based on the Highschooler's ID, and the count of friends is ordered in descending order. Finally, the LIMIT 1 clause is used to retrieve only the top result.
SELECT name FROM Highschooler JOIN Friend ON Friend.student_id = Highschooler.ID GROUP BY Highschooler.ID, Highschooler.name HAVING COUNT(Friend.friend_id) >= 3
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Friend.student_id = Highschooler.ID GROUP BY Highschooler.ID, Highschooler.name HAVING COUNT(Friend.friend_id) >= 3
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.friend_id = (     SELECT ID FROM Highschooler WHERE name = 'Kyle' )
SELECT T2.name  FROM Highschooler AS T1  JOIN Friend AS F ON T1.ID = F.student_id  JOIN Highschooler AS T2 ON F.friend_id = T2.ID  WHERE T1.name = 'Kyle'
SELECT count(*) FROM Friend  JOIN Highschooler ON Friend.friend_id = Highschooler.ID JOIN Highschooler AS H ON Friend.student_id = H.ID WHERE H.name = 'Kyle';
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT Friend.student_id FROM Friend)
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT DISTINCT student_id FROM Friend)
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT DISTINCT T1.ID FROM Highschooler AS T1 WHERE EXISTS (   SELECT * FROM Friend AS T2 WHERE T2.student_id = T1.ID ) AND T1.ID IN (   SELECT liked_id FROM Likes )
SELECT DISTINCT T1.student_id  FROM Friend AS T1  WHERE T1.student_id IN (SELECT T2.ID FROM Highschooler AS T2)  AND T1.student_id IN (SELECT T3.student_id FROM Likes AS T3)
SELECT DISTINCT Highschooler.name FROM Highschooler WHERE Highschooler.ID IN (     SELECT DISTINCT friend.student_id     FROM Friend     WHERE friend.student_id = Highschooler.ID ) AND Highschooler.ID IN (     SELECT DISTINCT likes.student_id     FROM Likes     WHERE likes.student_id = Highschooler.ID )
SELECT name  FROM highschooler  WHERE      EXISTS (         SELECT *          FROM friend          WHERE highschooler.id = friend.student_id     )      AND      EXISTS (         SELECT *          FROM likes          WHERE highschooler.id = likes.student_id     );
SELECT COUNT(*) AS like_count, student_id FROM Likes GROUP BY student_id
SELECT student_id, COUNT(liked_id) AS likes_count FROM Likes GROUP BY student_id
SELECT T1.name, COUNT(T2.liked_id)  FROM Highschooler AS T1  JOIN Likes AS T2 ON T1.ID = T2.student_id  GROUP BY T1.name
SELECT highschooler.name, COUNT(likes.liked_id) AS likes_count FROM highschooler JOIN likes ON highschooler.ID = likes.student_id GROUP BY highschooler.name;
SELECT name FROM Highschooler WHERE ID IN (   SELECT student_id   FROM Likes   GROUP BY student_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID, T1.name ORDER BY COUNT(*) DESC LIMIT 1
SELECT DISTINCT T1.name  FROM Highschooler AS T1  JOIN Likes AS T2 ON T1.ID = T2.student_id  GROUP BY T1.name  HAVING COUNT(T2.liked_id) >= 2
SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name HAVING COUNT(likes.student_id) >= 2
SELECT DISTINCT highschooler.name  FROM highschooler  JOIN friend ON highschooler.ID = friend.student_id  JOIN likes ON highschooler.ID = likes.student_id  WHERE highschooler.grade > 5  GROUP BY highschooler.name  HAVING COUNT(DISTINCT friend.friend_id) >= 2
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade > 5   AND Highschooler.ID IN (SELECT Friend.student_id                           FROM Friend                           GROUP BY Friend.student_id                           HAVING COUNT(*) >= 2)
SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT count(liked_id) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT avg(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend)
SELECT avg(grade)  FROM Highschooler  WHERE ID IN (SELECT student_id FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT min(grade) FROM Highschooler WHERE ID NOT IN (SELECT DISTINCT student_id FROM Friend)
SELECT DISTINCT state  FROM Owners  WHERE state IN (SELECT DISTINCT state FROM Professionals)
SELECT DISTINCT state  FROM Owners  WHERE state IN (SELECT DISTINCT state FROM Professionals)
SELECT AVG(dogs.age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id
SELECT AVG(dogs.age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) > 2 )
SELECT dogs.name  FROM dogs  LEFT JOIN treatments ON dogs.dog_id = treatments.dog_id  WHERE treatments.cost_of_treatment IS NULL OR treatments.cost_of_treatment <= 1000
SELECT DISTINCT T1.name FROM Dogs AS T1 WHERE T1.owner_id NOT IN (SELECT T2.owner_id FROM Treatments AS T2 WHERE T2.cost_of_treatment > 1000)
SELECT first_name FROM (   SELECT first_name   FROM professionals   WHERE first_name NOT IN (SELECT name FROM dogs)   UNION   SELECT first_name   FROM owners   WHERE first_name NOT IN (SELECT name FROM dogs) ) AS combined_names;
SELECT DISTINCT T1.first_name  FROM professionals AS T1  WHERE T1.first_name NOT IN (SELECT T2.name FROM dogs AS T2)    AND T1.first_name NOT IN (SELECT T3.first_name FROM owners AS T3)
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT professional_id, role_code, email_address FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments)
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id, Owners.first_name, Owners.last_name ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1
SELECT Owners.owner_id, Owners.first_name, Owners.last_name  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id  GROUP BY Owners.owner_id, Owners.first_name, Owners.last_name  ORDER BY COUNT(Dogs.dog_id) DESC  LIMIT 1;
SELECT professional_id, role_code, first_name FROM Professionals GROUP BY professional_id, role_code, first_name HAVING COUNT(*) >= 2
SELECT professional_id, role_code, first_name  FROM Professionals  GROUP BY professional_id, role_code, first_name  HAVING COUNT(*) >= 2
SELECT breed_name  FROM breeds  INNER JOIN dogs ON breeds.breed_code = dogs.breed_code  GROUP BY breed_name  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT breed_name FROM Breeds JOIN Dogs ON Dogs.breed_code = Breeds.breed_code GROUP BY breed_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id JOIN Treatments ON Treatments.dog_id = Dogs.dog_id GROUP BY Owners.owner_id, Owners.last_name ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1
SELECT owner_id, last_name FROM Owners WHERE owner_id = (   SELECT owner_id   FROM Dogs   JOIN Treatments ON Treatments.dog_id = Dogs.dog_id   GROUP BY owner_id   ORDER BY SUM(cost_of_treatment) DESC   LIMIT 1 )
SELECT Treatment_Types.treatment_type_description FROM Treatment_Types JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code GROUP BY Treatment_Types.treatment_type_description ORDER BY SUM(Treatments.cost_of_treatment) ASC LIMIT 1
SELECT Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code GROUP BY Treatments.treatment_type_code, Treatment_Types.treatment_type_description ORDER BY SUM(Treatments.cost_of_treatment) ASC LIMIT 1
SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.zip_code ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1
SELECT owners.owner_id, owners.zip_code FROM owners WHERE owners.owner_id = (   SELECT dogs.owner_id   FROM treatments   JOIN dogs ON treatments.dog_id = dogs.dog_id   GROUP BY dogs.owner_id   ORDER BY SUM(treatments.cost_of_treatment) DESC   LIMIT 1 )
SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(DISTINCT treatment_type_code) >= 2 )
SELECT professional_id, cell_number  FROM Professionals  GROUP BY professional_id, cell_number  HAVING COUNT(DISTINCT treatment_type_code) > 1
SELECT professionals.first_name, professionals.last_name FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)
SELECT Professionals.first_name, Professionals.last_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT treatments.date_of_treatment, professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id
SELECT treatments.date_of_treatment, professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id
SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description  FROM treatments  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code
SELECT owners.first_name, owners.last_name, sizes.size_description  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  JOIN sizes ON dogs.size_code = sizes.size_code
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id
SELECT T1.name, T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id JOIN (   SELECT T3.breed_code   FROM Breeds AS T3   GROUP BY T3.breed_code   ORDER BY COUNT(*) ASC   LIMIT 1 ) AS T4 ON T1.breed_code = T4.breed_code
SELECT dogs.name, treatments.date_of_treatment  FROM dogs  JOIN breeds ON dogs.breed_code = breeds.breed_code  JOIN treatments ON dogs.dog_id = treatments.dog_id  WHERE breeds.breed_code IN (   SELECT breed_code    FROM breeds    GROUP BY breed_code    HAVING COUNT(*) = (     SELECT MIN(count(*))      FROM breeds   ) )
SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.state = 'Virginia'
SELECT owners.first_name, dogs.name  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id  WHERE Owners.state = 'Virginia'
SELECT date_arrived, date_departed FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id ORDER BY dogs.age DESC LIMIT 1
SELECT owners.last_name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  ORDER BY dogs.date_of_birth ASC  LIMIT 1
SELECT Professionals.email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'
SELECT email_address  FROM Professionals  WHERE state IN ('Hawaii', 'Wisconsin')
SELECT date_arrived, date_departed FROM Dogs
SELECT date_arrived, date_departed FROM Dogs
SELECT count(DISTINCT dog_id) FROM Treatments
SELECT COUNT(DISTINCT dog_id) FROM Treatments
SELECT COUNT(DISTINCT professional_id) FROM Treatments WHERE professional_id IS NOT NULL
SELECT COUNT(DISTINCT professional_id) FROM Treatments
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'
SELECT owners.first_name, owners.last_name, owners.email_address  FROM owners  WHERE owners.state LIKE '%North%'
SELECT count(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT count(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;
SELECT treatments.cost_of_treatment  FROM treatments  ORDER BY treatments.date_of_treatment DESC  LIMIT 1
SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT COUNT(DISTINCT dog_id) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT COUNT(DISTINCT T1.owner_id) FROM Owners AS T1 LEFT JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.owner_id IS NULL;
SELECT count(DISTINCT T1.owner_id)  FROM Owners AS T1  LEFT JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  WHERE T2.owner_id IS NULL
SELECT count(professional_id) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT count(T1.professional_id) FROM professionals AS T1 LEFT JOIN treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.treatment_id IS NULL
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1
SELECT name, age, weight  FROM Dogs  WHERE abandoned_yn = 1
SELECT AVG(age) FROM Dogs
SELECT AVG(age) FROM Dogs
SELECT max(age) FROM Dogs
SELECT max(age) FROM Dogs
SELECT charge_type, charge_amount  FROM Charges
SELECT charge_type, charge_amount FROM Charges
SELECT max(charge_amount) AS max_charge_amount FROM Charges
SELECT charge_amount  FROM Charges  ORDER BY charge_amount DESC  LIMIT 1
SELECT email_address, cell_number, home_phone FROM Professionals
SELECT email_address, cell_number, home_phone FROM Professionals
SELECT breeds.breed_name, sizes.size_description FROM breeds CROSS JOIN sizes
SELECT DISTINCT breed_code, size_code FROM Dogs
SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT professionals.first_name, treatment_types.treatment_type_description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT COUNT(*) FROM singer
SELECT COUNT(*) FROM singer
SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions ASC
SELECT singer.name FROM singer ORDER BY singer.net_worth_millions ASC
SELECT birth_year, citizenship FROM singer
SELECT birth_year, citizenship FROM singer
SELECT singer.Name FROM singer WHERE singer.Citizenship <> "France"
SELECT singer.Name FROM singer WHERE singer.Citizenship <> 'French'
SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949;
SELECT name FROM singer WHERE birth_year IN (1948, 1949)
SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions DESC LIMIT 1
SELECT singer.name FROM singer ORDER BY singer.net_worth_millions DESC LIMIT 1
SELECT citizenship, COUNT(*) as num_singers  FROM singer  GROUP BY citizenship
SELECT citizenship, COUNT(*) FROM singer GROUP BY citizenship
SELECT singer.citizenship, COUNT(*) AS count FROM singer GROUP BY singer.citizenship ORDER BY count DESC LIMIT 1
SELECT singer.citizenship, COUNT(*) AS count FROM singer GROUP BY singer.citizenship ORDER BY count DESC LIMIT 1
SELECT citizenship, MAX(net_worth_millions) AS max_net_worth FROM singer GROUP BY citizenship
SELECT citizenship, MAX(net_worth_millions) AS max_net_worth FROM singer GROUP BY citizenship;
SELECT song.title, singer.name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID
SELECT song.title, singer.name FROM song JOIN singer ON song.singer_id = singer.Singer_ID
SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000
SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000
SELECT singer.name  FROM singer  INNER JOIN song ON singer.Singer_ID = song.Singer_ID  GROUP BY singer.name  HAVING COUNT(song.Song_ID) > 1
SELECT singer.name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.name HAVING COUNT(song.Song_ID) > 1
SELECT singer.Name, SUM(song.Sales) AS Total_Sales  FROM singer  JOIN song ON singer.Singer_ID = song.Singer_ID  GROUP BY singer.Name
SELECT singer.Name, SUM(song.Sales) AS total_sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name
SELECT name  FROM singer  WHERE singer_id NOT IN (SELECT singer_id FROM song)
SELECT name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955
SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 OR birth_year > 1955
SELECT count(*) FROM Other_Available_Features
SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code = (   SELECT feature_type_code   FROM Other_Available_Features   WHERE feature_name = 'AirCon' )
SELECT property_type_description  FROM ref_property_types  WHERE property_type_code IN (SELECT property_type_code FROM properties)
SELECT p.property_name  FROM Properties p  JOIN Ref_Property_Types rpt ON p.property_type_code = rpt.property_type_code  WHERE (rpt.property_type_description = 'Apartment' OR rpt.property_type_description = 'House')  AND p.room_count > 1
