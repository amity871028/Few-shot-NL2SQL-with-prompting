
# Through the database regularization process, learn how to write SQL query
The normal forms (from least normalized to most normalized) are: UNF(Unnormalized form), 1NF(First normal form), 2NF(Second normal form), 3NF(Third normal form).
Now, we have an initial data(UNF data):
Table Comsumptions, columns = [*,Name,Sex,Gender,Item,Price,Quantity,Store,Address,Date,Order_Number]
Table Comsumptions, cell_values = [{Name:Lily,Sex:Female,Gender:F,Item:pensil|eraser,Price:20|50,Quantity:1|2,Store:A store,Address:University Road,Date:12/17,Order_Number:1},{Name:Amy,Sex:Female,Gender:F,Item:milk|sandwish,Price:70|10,Quantity:3|1,Store:B store,Address:Beimen Road,Date:12/18,Order_Number:2},{Name:Amy,Sex:Female,Gender:F,Item:milk|sandwish,Price:70|10,Quantity:3|4,Store:B store,Address:Beimen Road,Date:12/19,Order_Number:3},{Name:David,Sex:Male,Gender:M,Item:omelette|milk tea,Price:30|40,Quantity:1|2,Store:C store,Address:Chenggong Road,Date:12/19,Order_Number:4}]
## Text-to-SQL example:
Q: What did Lily buy on 12/17?
SQL: SELECT Item FROM Comsumptions WHERE Name = 'Lily' and Date = '12/17' 

To satisfy 1NF, we need to follow:
1) each column of a table must have a single value.
2) Columns which contain sets of values or nested records are not allowed.
3) each table requires at least one primary key.
In the initial table, Item and Quantity contain multiple values. Sex and Gender have the same meaning. In the table, there is no primary key.
## Based on 1NF, the new table:
Table Comsumptions, columns = [*,Name,Sex,Item,Price,Quantity,Total_Amount,Store,Address,Date,Order_Number]
Table Comsumptions, primary_keys = [Name,Item,Quantity,Store,Date,Order_Number]
Table Comsumptions, cell_values = [{Name:Lily,Sex:Female,Item:pensil,Price:20,Quantity:1,Total_Amount:20,Store:A store,Address:University Road,Date:12/17,Order_Number:1},{Name:Lily,Sex:Female,Item:eraser,Price:50,Quantity:2,Total_Amount:100,Store:A store,Address:University Road,Date:12/17,Order_Number:1},{Name:Amy,Sex:Female,Item:milk,Price:70,Quantity:3,Total_Amount:140,Store:B store,Address:Beimen Road,Date:12/18,Order_Number:2},{Name:Amy,Sex:Female,Item:sandwish,Price:10,Quantity:1,Total_Amount:10,Store:B store,Address:Beimen Road,Date:12/18,Order_Number:2},{Name:Amy,Sex:Female,Item:milk,Price:70,Quantity:3,Total_Amount:210,Store:B store,Address:Beimen Road,Date:12/19,Order_Number:3},{Name:Amy,Sex:Female,Item:sandwish,Price:10,Quantity:4,Total_Amount:40,Store:B store,Address:Beimen Road,Date:12/19,Order_Number:3},{Name:David,Sex:Male,Item:omelette,Price:30,Quantity:1,Total_Amount:30,Store:C store,Address:Chenggong Road,Date:12/19,Order_Number:4},{Name:David,Sex:Male,Item:milk tea,Price:40,Quantity:2,Total_Amount:80,Store:C store,Address:Chenggong Road,Date:12/19,Order_Number:4}]
## Text-to-SQL example:
Q1: What did Lily buy on 12/17?
SQL1: SELECT Item FROM Comsumptions WHERE Name = 'Lily' and Date = '12/17' 
Q2: How much did Amy spend on 12/19?
SQL2: SELECT SUM(*) FROM Comsumptions WHERE Name='Amy' and Date = '12/19'

To satisfy 2NF, we need to follow:
1) Single column primary Key does not functionally dependant on any subset of candidate key relation.
In the 1NF table, every consumption record records the gender of the consumer, the name and address of the store, and there are too many duplicates.
## Based on 2NF, the new table:
Table Consumers, columns = [*,Id,Name,Sex]
Table Consumers, primary_keys = [Id]
Table Consumers, cell_values = [{Id:2,Name:Lily,Sex:Female,Id:3,Name:Amy,Sex:Female,Id:4,Name:David,Sex:Male}]
Table Shops, columns = [*,Id,Store,Address]
Table Shops, primary_keys = [Id]
Table Shops, cell_values = [{Id:1,Store:A store,Address:University Road,Id:2,Store:B store,Address:Beimen Road,Id:3,Store:C store,Address:Chenggong Road}]
Table Items, columns = [*,Id,Item,Price,Store_Id]
Table Items, primary_keys = [Id]
Table Items, cell_values = [{Id:1,Item:pensil,Price:20,Store_Id:1},{Id:2,Item:eraser,Price:50,Store_Id:1},{Id:3,Item:milk,Price:70,Store_Id:2},{Id:4,Item:sandwish,Price:10,Store_Id:2},{Id:5,Item:omelette,Price:30,Store_Id:3},{Id:6,Item:milk tea,Price:40,Store_Id:3}]
Table Orders, columns = [*,Id,Consumer_Id,Item_Id,Quantity,Total_Amount,Date,Order_Number]
Table Orders, primary_keys = [Id]
Table Orders, cell_values = [{Id:1,Consumer_Id:1,Item_Id:1,Quantity:1,Total_Amount:20,Date:12/17,Order_Number:1},{Id:2,Consumer_Id:1,Item_Id:2,Quantity:2,Total_Amount:100,Date:12/17,Order_Number:1},{Id:3,Consumer_Id:2,Item_Id:3,Quantity:3,Total_Amount:210,Date:12/18,Order_Number:2},{Id:4,Consumer_Id:2,Item_Id:4,Quantity:1,Total_Amount:10,Date:12/18,Order_Number:2},{Id:5,Consumer_Id:2,Item_Id:3,Quantity:3,Total_Amount:210,Date:12/19,Order_Number:3},{Id:6,Consumer_Id:2,Item_Id:4,Quantity:4,Total_Amount:40,Date:12/19,Order_Number:3},{Id:7,Consumer_Id:3,Item_Id:5,Quantity:1,Total_Amount:30,Date:12/19,Order_Number:4},{Id:8,Consumer_Id:3,Item_Id:6,Quantity:2,Total_Amount:80,Date:12/19,Order_Number:4}]
## Text-to-SQL example:
Q: What did Lily buy on 12/17?
SQL: SELECT Item FROM Items JOIN Orders ON Items.Id = Orders.Item_Id JOIN Consumers ON Consumers.Id = Orders.Consumer_Id WHERE Consumers.Name = 'Lily' and Orders.Date = '12/17' 

Q: How much did Amy spend on 12/19?
SQL: SELECT SUM(Total_Amount) FROM Orders JOIN Consumers ON Orders.Consumer_Id = Consumers.Id WHERE Consumers.Name = 'Amy' AND Date = '12/19'

# Use the the schema links and Intermediate_representation to generate the SQL queries for each of the questions.
Table advisor, columns = [*,s_ID,i_ID]
Table classroom, columns = [*,building,room_number,capacity]
Table course, columns = [*,course_id,title,dept_name,credits]
Table department, columns = [*,dept_name,building,budget]
Table instructor, columns = [*,ID,name,dept_name,salary]
Table prereq, columns = [*,course_id,prereq_id]
Table section, columns = [*,course_id,sec_id,semester,year,building,room_number,time_slot_id]
Table student, columns = [*,ID,name,dept_name,tot_cred]
Table takes, columns = [*,ID,course_id,sec_id,semester,year,grade]
Table teaches, columns = [*,ID,course_id,sec_id,semester,year]
Table time_slot, columns = [*,time_slot_id,day,start_hr,start_min,end_hr,end_min]
Foreign_keys = [course.dept_name = department.dept_name,instructor.dept_name = department.dept_name,section.building = classroom.building,section.room_number = classroom.room_number,section.course_id = course.course_id,teaches.ID = instructor.ID,teaches.course_id = section.course_id,teaches.sec_id = section.sec_id,teaches.semester = section.semester,teaches.year = section.year,student.dept_name = department.dept_name,takes.ID = student.ID,takes.course_id = section.course_id,takes.sec_id = section.sec_id,takes.semester = section.semester,takes.year = section.year,advisor.s_ID = student.ID,advisor.i_ID = instructor.ID,prereq.prereq_id = course.course_id,prereq.course_id = course.course_id]
Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]
Table singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]
Table singer_in_concert, columns = [*,concert_ID,Singer_ID]
Table stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]
Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]

Q: "Find the total budgets of the Marketing or Finance department."
Schema_links: [department.budget,department.dept_name,Marketing,Finance]
A: Let’s think step by step. For creating the SQL for the given question, we need to join these tables = []. First, create an intermediate representation, then use it to construct the SQL query.
Intermediate_representation: select sum(department.budget) from department  where  department.dept_name = "Marketing"  or  department.dept_name = "Finance"
SQL: SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'

Q: "Find the name and building of the department with the highest budget."
Schema_links: [department.budget,department.dept_name,department.building]
A: Let’s think step by step. For creating the SQL for the given question, we need to join these tables = []. First, create an intermediate representation, then use it to construct the SQL query.
Intermediate_representation: select department.dept_name , department.building from department  order by department.budget desc limit 1
SQL: SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1

Q: "What is the name and building of the departments whose budget is more than the average budget?"
Schema_links: [department.budget,department.dept_name,department.building]
A: Let’s think step by step. For creating the SQL for the given question, we need to join these tables = []. First, create an intermediate representation, then use it to construct the SQL query.
Intermediate_representation:  select department.dept_name , department.building from department  where  @.@ > avg ( department.budget ) 
SQL: SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)

Q: "Find the total number of students and total number of instructors for each department."
Schema_links: [department.dept_name = student.dept_name,student.id,department.dept_name = instructor.dept_name,instructor.id]
A: Let’s think step by step. For creating the SQL for the given question, we need to join these tables = [department,student,instructor]. First, create an intermediate representation, then use it to construct the SQL query.
Intermediate_representation: "select count( distinct student.ID) , count( distinct instructor.ID) , department.dept_name from department  group by instructor.dept_name
SQL: SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name

Q: "Find the title of courses that have two prerequisites?"
Schema_links: [course.title,course.course_id = prereq.course_id]
A: Let’s think step by step. For creating the SQL for the given question, we need to join these tables = [course,prereq]. First, create an intermediate representation, then use it to construct the SQL query.
Intermediate_representation: select course.title from course  where  count ( prereq.* )  = 2  group by prereq.course_id
SQL: SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2

Q: "Find the name of students who took any class in the years of 2009 and 2010."
Schema_links: [student.name,student.id = takes.id,takes.YEAR,2009,2010]
A: Let’s think step by step. For creating the SQL for the given question, we need to join these tables = [student,takes]. First, create an intermediate representation, then use it to construct the SQL query.
Intermediate_representation: select  distinct student.name from student  where  takes.year = 2009  or  takes.year = 2010
SQL: SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.YEAR  =  2009 OR T2.YEAR  =  2010

Q: "list in alphabetic order all course names and their instructors' names in year 2008."
Schema_links: [course.title,course.course_id = teaches.course_id,teaches.id = instructor.id,instructor.name,teaches.year,2008]
A: Let’s think step by step. For creating the SQL for the given question, we need to join these tables = [course,teaches,instructor]. First, create an intermediate representation, then use it to construct the SQL query.
Intermediate_representation: select course.title , instructor.name from course  where  teaches.year = 2008  order by course.title asc
SQL: SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE T2.YEAR  =  2008 ORDER BY T1.title

Q: "What are the names of the stadiums without any concerts?
Schema_links: [stadium.Name, concert.Stadium_ID]
A: Let’s think step by step.