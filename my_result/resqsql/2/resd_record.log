
index is 0
SELECT count(*) FROM singer
How many singers do we have?
schema_links:
How many singers do we have? | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.* | stadium : stadium.capacity , stadium.location , stadium.name , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( singer.singer_id ) from singer
SQL = SELECT count(singer_id) FROM singer
natsql:
select count ( _ ) from _ | select count ( singer.singer_id ) from singer

SQL:
SELECT count(singer_id) FROM singer
self correction:
SELECT COUNT(Singer_ID) FROM singer

index is 1
SELECT count(*) FROM singer
What is the total number of singers?
schema_links:
What is the total number of singers? | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.age , singer.* | stadium : stadium.capacity , stadium.highest , stadium.lowest , stadium.location , stadium.name , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( singer.singer_id ) from singer
SQL = SELECT count(*) FROM singer
natsql:
select count ( _ ) from _ | select count ( singer.singer_id ) from singer

SQL:
SELECT count(*) FROM singer
self correction:
SELECT count(Singer_ID) FROM singer

index is 2
SELECT name ,  country ,  age FROM singer ORDER BY age DESC
Show name, country, age for all singers ordered by age from the oldest to the youngest.
schema_links:
Show name, country, age for all singers ordered by age from the oldest to the youngest. | singer : singer.name , singer.country , singer.age , singer.song_name , singer.is_male , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ , _ , _ from _ order by _ desc | select singer.name , singer.country , singer.age from singer order by singer.age desc
SQL = SELECT name , country , age FROM singer ORDER BY age DESC
natsql:
select _ , _ , _ from _ order by _ desc | select singer.name , singer.country , singer.age from singer order by singer.age desc

SQL:
SELECT name , country , age FROM singer ORDER BY age DESC
self correction:
SELECT name, country, age FROM singer ORDER BY age ASC

index is 3
SELECT name ,  country ,  age FROM singer ORDER BY age DESC
What are the names, countries, and ages for every singer in descending order of age?
schema_links:
What are the names, countries, and ages for every singer in descending order of age? | singer : singer.name , singer.country , singer.age , singer.song_name , singer.singer_id , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ , _ , _ from _ order by _ desc | select singer.name , singer.country , singer.age from singer order by singer.age desc
SQL = SELECT name ,  country ,  age FROM singer ORDER BY age DESC
natsql:
select _ , _ , _ from _ order by _ desc | select singer.name , singer.country , singer.age from singer order by singer.age desc

SQL:
SELECT name ,  country ,  age FROM singer ORDER BY age DESC
self correction:
SELECT singer.Name, singer.Country, singer.Age FROM singer ORDER BY singer.Age DESC

index is 4
SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
What is the average, minimum, and maximum age of all singers from France?
schema_links:
What is the average, minimum, and maximum age of all singers from France? | singer : singer.country ( France ) , singer.age , singer.name , singer.is_male , singer.singer_id , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select avg ( _ ) , min ( _ ) , max ( _ ) from _ where @.@ = _ | select avg ( singer.age ) , min ( singer.age ) , max ( singer.age ) from singer where singer.country = 'France'
SQL = SELECT AVG(age) ,  MIN(age) ,  MAX(age) FROM singer WHERE country  =  'France'
natsql:
select avg ( _ ) , min ( _ ) , max ( _ ) from _ where @.@ = _ | select avg ( singer.age ) , min ( singer.age ) , max ( singer.age ) from singer where singer.country = 'France'

SQL:
SELECT AVG(age) ,  MIN(age) ,  MAX(age) FROM singer WHERE country  =  'France'
self correction:
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'

index is 5
SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
What is the average, minimum, and maximum age for all French singers?
schema_links:
What is the average, minimum, and maximum age for all French singers? | singer : singer.country , singer.age , singer.name , singer.is_male , singer.song_name , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select avg ( _ ) , min ( _ ) , max ( _ ) from _ where @.@ = _ | select avg ( singer.age ) , min ( singer.age ) , max ( singer.age ) from singer where singer.country = 'France'
SQL = SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
natsql:
select avg ( _ ) , min ( _ ) , max ( _ ) from _ where @.@ = _ | select avg ( singer.age ) , min ( singer.age ) , max ( singer.age ) from singer where singer.country = 'France'

SQL:
SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
self correction:
SELECT avg(Age), min(Age), max(Age)  FROM singer  WHERE Country = 'France'

index is 6
SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1
Show the name and the release year of the song by the youngest singer.
schema_links:
Show the name and the release year of the song by the youngest singer. | singer : singer.song_name , singer.song_release_year , singer.age , singer.name , singer.singer_id , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ , _ from _ order by _ asc limit _ | select singer.name , singer.song_release_year from singer order by singer.age asc limit 1
SQL = SELECT name ,  song_release_year FROM singer ORDER BY age ASC LIMIT 1
natsql:
select _ , _ from _ order by _ asc limit _ | select singer.name , singer.song_release_year from singer order by singer.age asc limit 1

SQL:
SELECT name ,  song_release_year FROM singer ORDER BY age ASC LIMIT 1
self correction:
SELECT singer.Name, singer.Song_release_year FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE singer.Age = (   SELECT MIN(Age)   FROM singer ) LIMIT 1;

index is 7
SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1
What are the names and release years for all the songs of the youngest singer?
schema_links:
What are the names and release years for all the songs of the youngest singer? | singer : singer.song_release_year , singer.song_name , singer.age , singer.name , singer.is_male , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ , _ from _ where _ = ( select min ( _ ) from _ ) | select singer.name , singer.song_release_year from singer where singer.age = ( select min ( singer.age ) from singer )
SQL = SELECT name ,  song_release_year FROM singer WHERE age  =  (SELECT min(age) FROM singer)
natsql:
select _ , _ from _ where _ = ( select min ( _ ) from _ ) | select singer.name , singer.song_release_year from singer where singer.age = ( select min ( singer.age ) from singer )

SQL:
SELECT name ,  song_release_year FROM singer WHERE age  =  (SELECT min(age) FROM singer)
self correction:
SELECT singer.Name, singer.Song_release_year FROM singer WHERE singer.Age = (SELECT MIN(singer.Age) FROM singer)

index is 8
SELECT DISTINCT country FROM singer WHERE age  >  20
What are all distinct countries where singers above age 20 are from?
schema_links:
What are all distinct countries where singers above age 20 are from? | singer : singer.country , singer.age , singer.name , singer.song_name , singer.singer_id , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select distinct _ from _ where @.@ > _ | select distinct singer.country from singer where singer.age > 20
SQL = SELECT DISTINCT country FROM singer WHERE age > 20
natsql:
select distinct _ from _ where @.@ > _ | select distinct singer.country from singer where singer.age > 20

SQL:
SELECT DISTINCT country FROM singer WHERE age > 20
self correction:
SELECT DISTINCT Country  FROM singer  WHERE Age > 20

index is 9
SELECT DISTINCT country FROM singer WHERE age  >  20
What are  the different countries with singers above age 20?
schema_links:
What are  the different countries with singers above age 20? | singer : singer.country , singer.age , singer.name , singer.song_name , singer.is_male , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select distinct _ from _ where @.@ > _ | select distinct singer.country from singer where singer.age > 20
SQL = SELECT DISTINCT country FROM singer WHERE age  >  20
natsql:
select distinct _ from _ where @.@ > _ | select distinct singer.country from singer where singer.age > 20

SQL:
SELECT DISTINCT country FROM singer WHERE age  >  20
self correction:
SELECT DISTINCT Country FROM singer WHERE Age > 20

index is 10
SELECT country ,  count(*) FROM singer GROUP BY country
Show all countries and the number of singers in each country.
schema_links:
Show all countries and the number of singers in each country. | singer : singer.country , singer.name , singer.song_name , singer.age , singer.is_male , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select singer.country , count ( singer.* ) from singer group by singer.country
SQL = SELECT country , COUNT(*) FROM singer GROUP BY country
natsql:
select _ , count ( _ ) from _ group by _ | select singer.country , count ( singer.* ) from singer group by singer.country

SQL:
SELECT country , COUNT(*) FROM singer GROUP BY country
self correction:
SELECT singer.Country, COUNT(*) AS Singer_Count  FROM singer  GROUP BY singer.Country

index is 11
SELECT country ,  count(*) FROM singer GROUP BY country
How many singers are from each country?
schema_links:
How many singers are from each country? | singer : singer.country , singer.singer_id , singer.name , singer.song_name , singer.age , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select singer.country , count ( singer.* ) from singer group by singer.country
SQL = SELECT country , count(*) FROM singer GROUP BY country
natsql:
select _ , count ( _ ) from _ group by _ | select singer.country , count ( singer.* ) from singer group by singer.country

SQL:
SELECT country , count(*) FROM singer GROUP BY country
self correction:
SELECT Country, COUNT(*) AS Singer_Count FROM singer GROUP BY Country

index is 12
SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
List all song names by singers above the average age.
schema_links:
List all song names by singers above the average age. | singer : singer.song_name , singer.age , singer.name , singer.song_release_year , singer.country , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ from _ where _ > avg ( _ ) | select singer.song_name from singer where singer.age > avg ( singer.age )
SQL = SELECT song_name FROM singer GROUP BY song_name HAVING age > (SELECT avg(age) FROM singer)
natsql:
select _ from _ where _ > avg ( _ ) | select singer.song_name from singer where singer.age > avg ( singer.age )

SQL:
SELECT song_name FROM singer GROUP BY song_name HAVING age > (SELECT avg(age) FROM singer)
self correction:
SELECT singer.Song_Name FROM singer WHERE singer.Age > (SELECT AVG(singer.Age) FROM singer)

index is 13
SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
What are all the song names by singers who are older than average?
schema_links:
What are all the song names by singers who are older than average? | singer : singer.song_name , singer.age , singer.name , singer.song_release_year , singer.country , singer.* | stadium : stadium.average , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ from _ where _ > avg ( _ ) | select singer.song_name from singer where singer.age > avg ( singer.age )
SQL = SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
natsql:
select _ from _ where _ > avg ( _ ) | select singer.song_name from singer where singer.age > avg ( singer.age )

SQL:
SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
self correction:
SELECT s.song_name FROM singer s WHERE s.age > (SELECT AVG(age) FROM singer)

index is 14
SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
Show location and name for all stadiums with a capacity between 5000 and 10000.
schema_links:
Show location and name for all stadiums with a capacity between 5000 and 10000. | stadium : stadium.name , stadium.capacity , stadium.location , stadium.highest , stadium.stadium_id , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ , _ from _ where _ between _ and _ | select stadium.location , stadium.name from stadium where stadium.capacity between 5000 and 10000
SQL = SELECT location ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
natsql:
select _ , _ from _ where _ between _ and _ | select stadium.location , stadium.name from stadium where stadium.capacity between 5000 and 10000

SQL:
SELECT location ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
self correction:
SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000

index is 15
SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
What are the locations and names of all stations with capacity between 5000 and 10000?
schema_links:
What are the locations and names of all stations with capacity between 5000 and 10000? | stadium : stadium.capacity , stadium.name , stadium.location , stadium.stadium_id , stadium.highest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ , _ from _ where _ between _ and _ | select stadium.location , stadium.name from stadium where stadium.capacity between 5000 and 10000
SQL = SELECT location ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
natsql:
select _ , _ from _ where _ between _ and _ | select stadium.location , stadium.name from stadium where stadium.capacity between 5000 and 10000

SQL:
SELECT location ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
self correction:
SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000

index is 16
select max(capacity), average from stadium
What is the maximum capacity and the average of all stadiums ?
schema_links:
What is the maximum capacity and the average of all stadiums ? | stadium : stadium.average , stadium.capacity , stadium.highest , stadium.lowest , stadium.name , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select max ( _ ) , avg ( _ ) from _ | select max ( stadium.capacity ) , avg ( stadium.capacity ) from stadium
SQL = SELECT MAX(capacity) , AVG(capacity) FROM stadium
natsql:
select max ( _ ) , avg ( _ ) from _ | select max ( stadium.capacity ) , avg ( stadium.capacity ) from stadium

SQL:
SELECT MAX(capacity) , AVG(capacity) FROM stadium
self correction:
SELECT MAX(Capacity), AVG(Capacity) FROM stadium

index is 17
select avg(capacity) ,  max(capacity) from stadium
What is the average and maximum capacities for all stadiums ?
schema_links:
What is the average and maximum capacities for all stadiums ? | stadium : stadium.capacity , stadium.average , stadium.highest , stadium.lowest , stadium.location , stadium.* | concert : concert.concert_name , concert.theme , concert.year , concert.concert_id , concert.stadium_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select avg ( _ ) , max ( _ ) from _ | select avg ( stadium.capacity ) , max ( stadium.capacity ) from stadium
SQL = SELECT avg(capacity) , max(capacity) FROM stadium
natsql:
select avg ( _ ) , max ( _ ) from _ | select avg ( stadium.capacity ) , max ( stadium.capacity ) from stadium

SQL:
SELECT avg(capacity) , max(capacity) FROM stadium
self correction:
SELECT avg(Capacity), max(Capacity) FROM stadium

index is 18
SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
What is the name and capacity for the stadium with highest average attendance?
schema_links:
What is the name and capacity for the stadium with highest average attendance? | stadium : stadium.name , stadium.capacity , stadium.average , stadium.highest , stadium.stadium_id , stadium.* | concert : concert.concert_name , concert.theme , concert.year , concert.concert_id , concert.stadium_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ , _ from _ order by avg ( _ ) desc limit _ | select stadium.name , stadium.capacity from stadium order by stadium.average desc limit 1
SQL = SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
natsql:
select _ , _ from _ order by avg ( _ ) desc limit _ | select stadium.name , stadium.capacity from stadium order by stadium.average desc limit 1

SQL:
SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
self correction:
SELECT stadium.name, stadium.capacity FROM stadium ORDER BY stadium.average DESC LIMIT 1

index is 19
SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
What is the name and capacity for the stadium with the highest average attendance?
schema_links:
What is the name and capacity for the stadium with the highest average attendance? | stadium : stadium.name , stadium.capacity , stadium.average , stadium.highest , stadium.stadium_id , stadium.* | concert : concert.concert_name , concert.theme , concert.year , concert.concert_id , concert.stadium_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ , _ from _ order by avg ( _ ) desc limit _ | select stadium.name , stadium.capacity from stadium order by stadium.average desc limit 1
SQL = SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
natsql:
select _ , _ from _ order by avg ( _ ) desc limit _ | select stadium.name , stadium.capacity from stadium order by stadium.average desc limit 1

SQL:
SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
self correction:
SELECT name, capacity  FROM stadium  ORDER BY average DESC  LIMIT 1

index is 20
SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015
How many concerts are there in year 2014 or 2015?
schema_links:
How many concerts are there in year 2014 or 2015? | concert : concert.year , concert.concert_name , concert.concert_id , concert.theme , concert.stadium_id , concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select count ( distinct _ ) from _ where _ = _ or _ = _ | select count ( distinct concert.concert_id ) from concert where concert.year = 2014 or concert.year = 2015
SQL = SELECT COUNT(DISTINCT concert_ID) FROM concert WHERE year = 2014 OR year = 2015
natsql:
select count ( distinct _ ) from _ where _ = _ or _ = _ | select count ( distinct concert.concert_id ) from concert where concert.year = 2014 or concert.year = 2015

SQL:
SELECT COUNT(DISTINCT concert_ID) FROM concert WHERE year = 2014 OR year = 2015
self correction:
SELECT COUNT(DISTINCT concert_ID) FROM concert WHERE Year = 2014 OR Year = 2015

index is 21
SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015
How many concerts occurred in 2014 or 2015?
schema_links:
How many concerts occurred in 2014 or 2015? | concert : concert.year , concert.concert_name , concert.concert_id , concert.theme , concert.stadium_id , concert.* | stadium : stadium.capacity , stadium.location , stadium.name , stadium.highest , stadium.lowest , stadium.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select count ( distinct _ ) from _ where _ = _ or _ = _ | select count ( distinct concert.concert_id ) from concert where concert.year = 2014 or concert.year = 2015
SQL = SELECT count(DISTINCT concert_ID) FROM concert WHERE Year = 2014 OR Year = 2015
natsql:
select count ( distinct _ ) from _ where _ = _ or _ = _ | select count ( distinct concert.concert_id ) from concert where concert.year = 2014 or concert.year = 2015

SQL:
SELECT count(DISTINCT concert_ID) FROM concert WHERE Year = 2014 OR Year = 2015
self correction:
SELECT count(DISTINCT concert_ID) FROM concert WHERE Year = 2014 OR Year = 2015

index is 22
SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id
Show the stadium name and the number of concerts in each stadium.
schema_links:
Show the stadium name and the number of concerts in each stadium. | stadium : stadium.name , stadium.stadium_id , stadium.capacity , stadium.location , stadium.highest , stadium.* | concert : concert.stadium_id , concert.concert_name , concert.concert_id , concert.theme , concert.year , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select stadium.name , count ( concert.concert_id ) from stadium join concert on stadium.stadium_id = concert.stadium_id group by stadium.name
SQL = SELECT stadium.name , COUNT(concert.concert_ID) FROM stadium JOIN concert ON stadium.stadium_ID = concert.stadium_ID GROUP BY stadium.name
natsql:
select _ , count ( _ ) from _ group by _ | select stadium.name , count ( concert.concert_id ) from stadium join concert on stadium.stadium_id = concert.stadium_id group by stadium.name

SQL:
SELECT stadium.name , COUNT(concert.concert_ID) FROM stadium JOIN concert ON stadium.stadium_ID = concert.stadium_ID GROUP BY stadium.name
self correction:
SELECT stadium.Name, COUNT(concert.concert_ID)  FROM stadium  JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID  GROUP BY stadium.Name

index is 23
SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id
For each stadium, how many concerts play there?
schema_links:
For each stadium, how many concerts play there? | concert : concert.stadium_id , concert.concert_name , concert.theme , concert.year , concert.concert_id , concert.* | stadium : stadium.name , stadium.stadium_id , stadium.capacity , stadium.highest , stadium.location , stadium.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select count ( _ ) , _ from _ group by _ | select count ( concert.concert_id ) , stadium.name from stadium join concert on stadium.stadium_id = concert.stadium_id group by stadium.name
SQL = SELECT COUNT(concert_ID), stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name
natsql:
select count ( _ ) , _ from _ group by _ | select count ( concert.concert_id ) , stadium.name from stadium join concert on stadium.stadium_id = concert.stadium_id group by stadium.name

SQL:
SELECT COUNT(concert_ID), stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name
self correction:
SELECT COUNT(concert_ID) AS Concert_Count, stadium.Name  FROM stadium  LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID  GROUP BY stadium.Stadium_ID, stadium.Name

index is 24
SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1
Show the stadium name and capacity with most number of concerts in year 2014 or after.
schema_links:
Show the stadium name and capacity with most number of concerts in year 2014 or after. | stadium : stadium.name , stadium.capacity , stadium.stadium_id , stadium.location , stadium.highest , stadium.* | concert : concert.year , concert.stadium_id , concert.concert_name , concert.concert_id , concert.theme , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ , _ from _ where _ in ( select _ from _ where _ >= _ ) order by _ desc limit _ | select stadium.name , stadium.capacity from stadium where stadium.stadium_id in ( select concert.stadium_id from concert where concert.year >= 2014 ) order by stadium.capacity desc limit 1
SQL = SELECT name ,  capacity FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE year >= 2014) ORDER BY capacity DESC LIMIT 1
natsql:
select _ , _ from _ where _ in ( select _ from _ where _ >= _ ) order by _ desc limit _ | select stadium.name , stadium.capacity from stadium where stadium.stadium_id in ( select concert.stadium_id from concert where concert.year >= 2014 ) order by stadium.capacity desc limit 1

SQL:
SELECT name ,  capacity FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE year >= 2014) ORDER BY capacity DESC LIMIT 1
self correction:
SELECT stadium.Name, stadium.Capacity FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year >= 2014 GROUP BY stadium.Stadium_ID ORDER BY COUNT(*) DESC LIMIT 1

index is 25
select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1
What is the name and capacity of the stadium with the most concerts after 2013 ?
schema_links:
What is the name and capacity of the stadium with the most concerts after 2013 ? | stadium : stadium.name , stadium.capacity , stadium.stadium_id , stadium.location , stadium.highest , stadium.* | concert : concert.year , concert.stadium_id , concert.concert_name , concert.concert_id , concert.theme , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ from _ where _ = max ( _ ) and @.@ > _ | select stadium.name , stadium.capacity from stadium where stadium.stadium_id = max ( concert.stadium_id ) and concert.year > 2013
SQL = SELECT name ,  capacity FROM stadium WHERE stadium_id  =  (SELECT max(stadium_id) FROM concert WHERE year > 2013)
natsql:
select _ from _ where _ = max ( _ ) and @.@ > _ | select stadium.name , stadium.capacity from stadium where stadium.stadium_id = max ( concert.stadium_id ) and concert.year > 2013

SQL:
SELECT name ,  capacity FROM stadium WHERE stadium_id  =  (SELECT max(stadium_id) FROM concert WHERE year > 2013)
self correction:
SELECT stadium.name, stadium.capacity  FROM stadium  WHERE stadium.stadium_id = (     SELECT concert.stadium_id      FROM concert      WHERE concert.year > 2013     GROUP BY concert.stadium_id     ORDER BY COUNT(*) DESC     LIMIT 1 )

index is 26
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
Which year has most number of concerts?
schema_links:
Which year has most number of concerts? | concert : concert.year , concert.concert_name , concert.theme , concert.concert_id , concert.stadium_id , concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ from _ group by _ order by count ( * ) desc limit _ | select concert.year from concert group by concert.year order by count ( * ) desc limit 1
SQL = SELECT year FROM concert GROUP BY year ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( * ) desc limit _ | select concert.year from concert group by concert.year order by count ( * ) desc limit 1

SQL:
SELECT year FROM concert GROUP BY year ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT year, COUNT(*) AS concert_count FROM concert GROUP BY year ORDER BY concert_count DESC LIMIT 1

index is 27
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
What is the year that had the most concerts?
schema_links:
What is the year that had the most concerts? | concert : concert.year , concert.concert_name , concert.concert_id , concert.theme , concert.stadium_id , concert.* | stadium : stadium.capacity , stadium.highest , stadium.lowest , stadium.location , stadium.name , stadium.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select concert.year from concert group by concert.year order by count ( concert.* ) desc limit 1
SQL = SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select concert.year from concert group by concert.year order by count ( concert.* ) desc limit 1

SQL:
SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1
self correction:
SELECT Year, COUNT(*) AS concert_count FROM concert GROUP BY year ORDER BY concert_count DESC LIMIT 1

index is 28
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
Show the stadium names without any concert.
schema_links:
Show the stadium names without any concert. | stadium : stadium.name , stadium.stadium_id , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.concert_name , concert.theme , concert.stadium_id , concert.year , concert.concert_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ from _ where _ not in (select _ from _) | select stadium.name from stadium where stadium.stadium_id not in (select concert.stadium_id from concert)
SQL = SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
natsql:
select _ from _ where _ not in (select _ from _) | select stadium.name from stadium where stadium.stadium_id not in (select concert.stadium_id from concert)

SQL:
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
self correction:
SELECT name FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.stadium_id IS NULL

index is 29
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
What are the names of the stadiums without any concerts?
schema_links:
What are the names of the stadiums without any concerts? | stadium : stadium.name , stadium.stadium_id , stadium.capacity , stadium.location , stadium.highest , stadium.* | concert : concert.stadium_id , concert.concert_name , concert.theme , concert.year , concert.concert_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ from _ where not exists ( select * from _ ) | select stadium.name from stadium where not exists ( select * from concert where concert.stadium_id = stadium.stadium_id )
SQL = SELECT name FROM stadium WHERE NOT EXISTS (SELECT * FROM concert WHERE concert.Stadium_ID = stadium.Stadium_ID)
natsql:
select _ from _ where not exists ( select * from _ ) | select stadium.name from stadium where not exists ( select * from concert where concert.stadium_id = stadium.stadium_id )

SQL:
SELECT name FROM stadium WHERE NOT EXISTS (SELECT * FROM concert WHERE concert.Stadium_ID = stadium.Stadium_ID)
self correction:
SELECT name FROM stadium WHERE stadium.Stadium_ID NOT IN (SELECT concert.Stadium_ID FROM concert)

index is 30
SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30
Show countries where a singer above age 40 and a singer below 30 are from.
schema_links:
Show countries where a singer above age 40 and a singer below 30 are from. | singer : singer.country , singer.age , singer.is_male , singer.name , singer.singer_id , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select distinct _ from _ where _ | select distinct singer.country from singer where singer.age > 40 and singer.age < 30
SQL = SELECT DISTINCT country FROM singer WHERE age > 40 AND age < 30
natsql:
select distinct _ from _ where _ | select distinct singer.country from singer where singer.age > 40 and singer.age < 30

SQL:
SELECT DISTINCT country FROM singer WHERE age > 40 AND age < 30
self correction:
SELECT DISTINCT country FROM singer WHERE age > 40 OR age < 30

index is 31
SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014
Show names for all stadiums except for stadiums having a concert in year 2014.
schema_links:
Show names for all stadiums except for stadiums having a concert in year 2014. | stadium : stadium.name , stadium.stadium_id , stadium.capacity , stadium.lowest , stadium.location , stadium.* | concert : concert.year , concert.concert_name , concert.stadium_id , concert.theme , concert.concert_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ from _ where not exists ( select _ from _ where _ ) | select stadium.name from stadium where not exists ( select concert.stadium_id from concert where concert.year = 2014 and stadium.stadium_id = concert.stadium_id )
SQL = SELECT name FROM stadium WHERE NOT EXISTS (SELECT stadium_id FROM concert WHERE year  =  2014 AND stadium.stadium_id  =  concert.stadium_id)
natsql:
select _ from _ where not exists ( select _ from _ where _ ) | select stadium.name from stadium where not exists ( select concert.stadium_id from concert where concert.year = 2014 and stadium.stadium_id = concert.stadium_id )

SQL:
SELECT name FROM stadium WHERE NOT EXISTS (SELECT stadium_id FROM concert WHERE year  =  2014 AND stadium.stadium_id  =  concert.stadium_id)
self correction:
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)

index is 32
SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014
What are the names of all stadiums that did not have a concert in 2014?
schema_links:
What are the names of all stadiums that did not have a concert in 2014? | stadium : stadium.name , stadium.stadium_id , stadium.capacity , stadium.location , stadium.highest , stadium.* | concert : concert.year , concert.concert_name , concert.theme , concert.stadium_id , concert.concert_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ where _ = _ ) | select stadium.name from stadium where stadium.stadium_id not in ( select concert.stadium_id from concert where concert.year = 2014 )
SQL = SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)
natsql:
select _ from _ where _ not in ( select _ from _ where _ = _ ) | select stadium.name from stadium where stadium.stadium_id not in ( select concert.stadium_id from concert where concert.year = 2014 )

SQL:
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)
self correction:
SELECT name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014)

index is 33
SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id
Show the name and theme for all concerts and the number of singers in each concert.
schema_links:
Show the name and theme for all concerts and the number of singers in each concert. | concert : concert.concert_name , concert.theme , concert.concert_id , concert.year , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | singer : singer.name , singer.singer_id , singer.country , singer.song_name , singer.age , singer.*
natsql and SQL generation:
select _ , _ , count ( _ ) from _ group by _ | select concert.concert_name , concert.theme , count ( singer_in_concert.singer_id ) from concert join singer_in_concert on concert.concert_id = singer_in_concert.concert_id group by concert.concert_name , concert.theme
SQL = SELECT concert_name ,  theme , COUNT(singer_id) FROM concert JOIN singer_in_concert ON concert.concert_id  =  singer_in_concert.concert_id GROUP BY concert_name ,  theme
natsql:
select _ , _ , count ( _ ) from _ group by _ | select concert.concert_name , concert.theme , count ( singer_in_concert.singer_id ) from concert join singer_in_concert on concert.concert_id = singer_in_concert.concert_id group by concert.concert_name , concert.theme

SQL:
SELECT concert_name ,  theme , COUNT(singer_id) FROM concert JOIN singer_in_concert ON concert.concert_id  =  singer_in_concert.concert_id GROUP BY concert_name ,  theme
self correction:
SELECT concert_name, theme, COUNT(singer_id)  FROM concert  JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID  GROUP BY concert_name, theme

index is 34
select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id
What are the names , themes , and number of singers for every concert ?
schema_links:
What are the names , themes , and number of singers for every concert ? | concert : concert.concert_name , concert.theme , concert.concert_id , concert.year , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | singer : singer.name , singer.singer_id , singer.country , singer.song_name , singer.age , singer.*
natsql and SQL generation:
select _ , _ , count ( _ ) from _ group by _ | select concert.concert_name , concert.theme , count ( singer_in_concert.singer_id ) from concert join singer_in_concert on concert.concert_id = singer_in_concert.concert_id group by concert.concert_name , concert.theme
SQL = SELECT concert_name , theme , COUNT(singer_id) FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert_name , theme
natsql:
select _ , _ , count ( _ ) from _ group by _ | select concert.concert_name , concert.theme , count ( singer_in_concert.singer_id ) from concert join singer_in_concert on concert.concert_id = singer_in_concert.concert_id group by concert.concert_name , concert.theme

SQL:
SELECT concert_name , theme , COUNT(singer_id) FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert_name , theme
self correction:
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_Name, concert.Theme

index is 35
SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id
List singer names and number of concerts for each singer.
schema_links:
List singer names and number of concerts for each singer. | singer : singer.name , singer.singer_id , singer.song_name , singer.country , singer.age , singer.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.* | concert : concert.concert_name , concert.concert_id , concert.theme , concert.year , concert.stadium_id , concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select singer.name , count ( singer_in_concert.singer_id ) from singer_in_concert join singer on singer_in_concert.singer_id = singer.singer_id group by singer.name
SQL = SELECT name , COUNT(Singer_ID) FROM singer_in_concert JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID GROUP BY name
natsql:
select _ , count ( _ ) from _ group by _ | select singer.name , count ( singer_in_concert.singer_id ) from singer_in_concert join singer on singer_in_concert.singer_id = singer.singer_id group by singer.name

SQL:
SELECT name , COUNT(Singer_ID) FROM singer_in_concert JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID GROUP BY name
self correction:
SELECT singer.Name, COUNT(singer_in_concert.Singer_ID)  FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  GROUP BY singer.Name

index is 36
SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id
What are the names of the singers and number of concerts for each person?
schema_links:
What are the names of the singers and number of concerts for each person? | singer : singer.name , singer.song_name , singer.singer_id , singer.is_male , singer.country , singer.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.* | concert : concert.concert_name , concert.theme , concert.concert_id , concert.year , concert.stadium_id , concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select singer.name , count ( singer_in_concert.concert_id ) from singer_in_concert join singer on singer_in_concert.singer_id = singer.singer_id group by singer.name
SQL = SELECT name , COUNT(concert_ID) FROM singer_in_concert JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID GROUP BY name
natsql:
select _ , count ( _ ) from _ group by _ | select singer.name , count ( singer_in_concert.concert_id ) from singer_in_concert join singer on singer_in_concert.singer_id = singer.singer_id group by singer.name

SQL:
SELECT name , COUNT(concert_ID) FROM singer_in_concert JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID GROUP BY name
self correction:
SELECT singer.Name, COUNT(singer_in_concert.concert_ID)  FROM singer_in_concert  JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID  GROUP BY singer.Name

index is 37
SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014
List all singer names in concerts in year 2014.
schema_links:
List all singer names in concerts in year 2014. | singer : singer.name , singer.song_name , singer.singer_id , singer.country , singer.age , singer.* | concert : concert.year , concert.concert_name , concert.theme , concert.concert_id , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.*
natsql and SQL generation:
select distinct _ from _ where _ | select distinct singer.name from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id join singer on singer_in_concert.singer_id = singer.singer_id where concert.year = 2014
SQL = SELECT DISTINCT singer.name FROM singer_in_concert JOIN concert ON singer_in_concert.concert_id = concert.concert_ID JOIN singer ON singer_in_concert.singer_id = singer.singer_ID WHERE concert.year = 2014
natsql:
select distinct _ from _ where _ | select distinct singer.name from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id join singer on singer_in_concert.singer_id = singer.singer_id where concert.year = 2014

SQL:
SELECT DISTINCT singer.name FROM singer_in_concert JOIN concert ON singer_in_concert.concert_id = concert.concert_ID JOIN singer ON singer_in_concert.singer_id = singer.singer_ID WHERE concert.year = 2014
self correction:
SELECT singer.Name FROM singer_in_concert JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE concert.Year = 2014;

index is 38
SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014
What are the names of the singers who performed in a concert in 2014?
schema_links:
What are the names of the singers who performed in a concert in 2014? | singer : singer.name , singer.song_name , singer.singer_id , singer.country , singer.song_release_year , singer.* | concert : concert.year , concert.concert_name , concert.theme , concert.concert_id , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.*
natsql and SQL generation:
select _ from _ where _ | select singer.name from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id join singer on singer_in_concert.singer_id = singer.singer_id where concert.year = 2014
SQL = SELECT singer.name FROM singer_in_concert JOIN concert ON singer_in_concert.concert_id = concert.concert_ID JOIN singer ON singer_in_concert.singer_id = singer.singer_ID WHERE concert.year = 2014
natsql:
select _ from _ where _ | select singer.name from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id join singer on singer_in_concert.singer_id = singer.singer_id where concert.year = 2014

SQL:
SELECT singer.name FROM singer_in_concert JOIN concert ON singer_in_concert.concert_id = concert.concert_ID JOIN singer ON singer_in_concert.singer_id = singer.singer_ID WHERE concert.year = 2014
self correction:
SELECT singer.Name FROM singer_in_concert JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE concert.Year = 2014

index is 39
SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
what is the name and nation of the singer who have a song having 'Hey' in its name?
schema_links:
what is the name and nation of the singer who have a song having 'Hey' in its name? | singer : singer.song_name , singer.country , singer.name , singer.song_release_year , singer.age , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ , _ from _ where _ like '%_%' | select singer.name , singer.country from singer where singer.song_name like '%Hey%'
SQL = SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
natsql:
select _ , _ from _ where _ like '%_%' | select singer.name , singer.country from singer where singer.song_name like '%Hey%'

SQL:
SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
self correction:
SELECT singer.Name, singer.Country  FROM singer  WHERE singer.Song_Name LIKE '%Hey%'

index is 40
SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?
schema_links:
What is the name and country of origin of every singer who has a song with the word 'Hey' in its title? | singer : singer.song_name , singer.country , singer.name , singer.song_release_year , singer.is_male , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.concert_name , concert.theme , concert.year , concert.concert_id , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ , _ from _ where _ like %_%
 | select singer.name , singer.country from singer where singer.song_name like '%Hey%' 
SQL = SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
natsql:
select _ , _ from _ where _ like %_%
 | select singer.name , singer.country from singer where singer.song_name like '%Hey%' 

SQL:
SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
self correction:
SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%'

index is 41
SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015
Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.
schema_links:
Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015. | concert : concert.year , concert.stadium_id , concert.concert_name , concert.theme , concert.concert_id , concert.* | stadium : stadium.name , stadium.location , stadium.stadium_id , stadium.capacity , stadium.average , stadium.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select distinct _ , _ from _ where _ and _ | select distinct stadium.name , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014 and concert.stadium_id in (select stadium_id from concert where year = 2015)
SQL = SELECT DISTINCT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014 AND T1.stadium_id IN (SELECT stadium_id FROM concert WHERE year  =  2015)
natsql:
select distinct _ , _ from _ where _ and _ | select distinct stadium.name , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014 and concert.stadium_id in (select stadium_id from concert where year = 2015)

SQL:
SELECT DISTINCT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014 AND T1.stadium_id IN (SELECT stadium_id FROM concert WHERE year  =  2015)
self correction:
SELECT T2.Name, T2.Location FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T1.Year = 2014 AND T1.Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year = 2015)

index is 42
SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015
What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?
schema_links:
What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015? | stadium : stadium.name , stadium.location , stadium.stadium_id , stadium.capacity , stadium.highest , stadium.* | concert : concert.year , concert.stadium_id , concert.concert_id , concert.concert_name , concert.theme , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select distinct _ , _ from _ where _ in ( _ ) group by _ having count ( distinct _ ) = _ | select distinct stadium.name , stadium.location from stadium where stadium.stadium_id in ( select concert.stadium_id from concert where concert.year = 2014 ) and stadium.stadium_id in ( select concert.stadium_id from concert where concert.year = 2015 ) group by stadium.name , stadium.location having count ( distinct concert.year ) = 2
SQL = SELECT DISTINCT T1.name ,  T1.location FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T2.year  =  2014 INTERSECT SELECT DISTINCT T1.name ,  T1.location FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T2.year  =  2015
natsql:
select distinct _ , _ from _ where _ in ( _ ) group by _ having count ( distinct _ ) = _ | select distinct stadium.name , stadium.location from stadium where stadium.stadium_id in ( select concert.stadium_id from concert where concert.year = 2014 ) and stadium.stadium_id in ( select concert.stadium_id from concert where concert.year = 2015 ) group by stadium.name , stadium.location having count ( distinct concert.year ) = 2

SQL:
SELECT DISTINCT T1.name ,  T1.location FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T2.year  =  2014 INTERSECT SELECT DISTINCT T1.name ,  T1.location FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T2.year  =  2015
self correction:
SELECT T1.Name, T1.Location  FROM stadium AS T1  JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID  WHERE T2.Year = 2014  INTERSECT  SELECT T1.Name, T1.Location  FROM stadium AS T1  JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID  WHERE T2.Year = 2015

index is 43
select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)
Find the number of concerts happened in the stadium with the highest capacity .
schema_links:
Find the number of concerts happened in the stadium with the highest capacity . | stadium : stadium.capacity , stadium.highest , stadium.stadium_id , stadium.name , stadium.lowest , stadium.* | concert : concert.stadium_id , concert.concert_id , concert.concert_name , concert.year , concert.theme , concert.* | singer : singer.name , singer.country , singer.song_name , singer.age , singer.singer_id , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select count ( _ ) from _ where @.@ = max ( _ ) | select count ( concert.* ) from concert where @.@ = max ( stadium.capacity )
SQL = SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)
natsql:
select count ( _ ) from _ where @.@ = max ( _ ) | select count ( concert.* ) from concert where @.@ = max ( stadium.capacity )

SQL:
SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1)
self correction:
SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)

index is 44
select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)
What are the number of concerts that occurred in the stadium with the largest capacity ?
schema_links:
What are the number of concerts that occurred in the stadium with the largest capacity ? | stadium : stadium.capacity , stadium.highest , stadium.stadium_id , stadium.name , stadium.lowest , stadium.* | concert : concert.stadium_id , concert.concert_id , concert.concert_name , concert.year , concert.theme , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select count ( distinct _ ) from _ where @.@ = max ( _ ) | select count ( distinct concert.concert_id ) from concert where concert.stadium_id = ( select stadium.stadium_id from stadium where stadium.capacity = max ( stadium.capacity ) )
SQL = SELECT count(DISTINCT concert_ID) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT max(Capacity) FROM stadium))
natsql:
select count ( distinct _ ) from _ where @.@ = max ( _ ) | select count ( distinct concert.concert_id ) from concert where concert.stadium_id = ( select stadium.stadium_id from stadium where stadium.capacity = max ( stadium.capacity ) )

SQL:
SELECT count(DISTINCT concert_ID) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT max(Capacity) FROM stadium))
self correction:
SELECT count(DISTINCT concert_ID) FROM concert WHERE Stadium_ID = (   SELECT Stadium_ID   FROM stadium   WHERE Capacity = (     SELECT MAX(Capacity)     FROM stadium   ) )

index is 45
SELECT count(*) FROM pets WHERE weight  >  10
Find the number of pets whose weight is heavier than 10.
schema_links:
Find the number of pets whose weight is heavier than 10. | pets : pets.weight , pets.petid , pets.pettype , pets.pet_age , pets.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.*
natsql and SQL generation:
select count ( _ ) from _ where _ > _ | select count ( pets.* ) from pets where pets.weight > 10
natsql:
select count ( _ ) from _ where _ > _ | select count ( pets.* ) from pets where pets.weight > 10
SQL:
SELECT count(*) FROM Pets WHERE weight > 10
self correction:
SELECT count(*) FROM Pets WHERE weight > 10

index is 46
SELECT count(*) FROM pets WHERE weight  >  10
How many pets have a greater weight than 10?
schema_links:
How many pets have a greater weight than 10? | pets : pets.weight , pets.petid , pets.pettype , pets.pet_age , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select count ( * ) from _ where @.@ > _ | select count ( * ) from pets where pets.weight > 10
SQL = SELECT count(*) FROM pets WHERE weight  >  10
natsql:
select count ( * ) from _ where @.@ > _ | select count ( * ) from pets where pets.weight > 10

SQL:
SELECT count(*) FROM pets WHERE weight  >  10
self correction:
SELECT count(*) FROM Pets WHERE weight > 10

index is 47
SELECT weight FROM pets ORDER BY pet_age LIMIT 1
Find the weight of the youngest dog.
schema_links:
Find the weight of the youngest dog. | pets : pets.pet_age , pets.weight , pets.pettype ( dog ) , pets.petid , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select _ from _ where _ = min ( _ ) and _ = _ | select pets.weight from pets where pets.pettype = 'dog' and pets.pet_age = min ( pets.pet_age )
SQL = SELECT weight FROM pets WHERE pettype = 'dog' AND pet_age  =  (SELECT min(pet_age) FROM pets WHERE pettype = 'dog')
natsql:
select _ from _ where _ = min ( _ ) and _ = _ | select pets.weight from pets where pets.pettype = 'dog' and pets.pet_age = min ( pets.pet_age )

SQL:
SELECT weight FROM pets WHERE pettype = 'dog' AND pet_age  =  (SELECT min(pet_age) FROM pets WHERE pettype = 'dog')
self correction:
SELECT weight  FROM Pets  WHERE PetType = 'dog'  AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog')

index is 48
SELECT weight FROM pets ORDER BY pet_age LIMIT 1
How much does the youngest dog weigh?
schema_links:
How much does the youngest dog weigh? | pets : pets.weight , pets.pet_age , pets.pettype ( dog ) , pets.petid , pets.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.*
natsql and SQL generation:
select _ from _ where _ = min ( _ ) and _ = _ | select pets.weight from pets where pets.pettype = 'dog' and pets.pet_age = min ( pets.pet_age )
SQL = SELECT weight FROM pets WHERE pettype = 'dog' AND pet_age = (SELECT min(pet_age) FROM pets WHERE pettype = 'dog')
natsql:
select _ from _ where _ = min ( _ ) and _ = _ | select pets.weight from pets where pets.pettype = 'dog' and pets.pet_age = min ( pets.pet_age )

SQL:
SELECT weight FROM pets WHERE pettype = 'dog' AND pet_age = (SELECT min(pet_age) FROM pets WHERE pettype = 'dog')
self correction:
SELECT weight FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog')

index is 49
SELECT max(weight) ,  petType FROM pets GROUP BY petType
Find the maximum weight for each type of pet. List the maximum weight and pet type.
schema_links:
Find the maximum weight for each type of pet. List the maximum weight and pet type. | pets : pets.pettype , pets.weight , pets.petid , pets.pet_age , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select max ( _ ) , _ from _ group by _ | select max ( pets.weight ) , pets.pettype from pets group by pets.pettype
SQL = SELECT max(weight) ,  pettype FROM pets GROUP BY pettype
natsql:
select max ( _ ) , _ from _ group by _ | select max ( pets.weight ) , pets.pettype from pets group by pets.pettype

SQL:
SELECT max(weight) ,  pettype FROM pets GROUP BY pettype
self correction:
SELECT MAX(weight), PetType FROM Pets GROUP BY PetType

index is 50
SELECT max(weight) ,  petType FROM pets GROUP BY petType
List the maximum weight and type for each type of pet.
schema_links:
List the maximum weight and type for each type of pet. | pets : pets.pettype , pets.weight , pets.petid , pets.pet_age , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select max ( _ ) , _ from _ group by _ | select max ( pets.weight ) , pets.pettype from pets group by pets.pettype
SQL = SELECT MAX(weight) ,  pettype FROM pets GROUP BY pettype
natsql:
select max ( _ ) , _ from _ group by _ | select max ( pets.weight ) , pets.pettype from pets group by pets.pettype

SQL:
SELECT MAX(weight) ,  pettype FROM pets GROUP BY pettype
self correction:
SELECT MAX(weight) AS max_weight, pettype FROM Pets GROUP BY pettype

index is 51
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
Find number of pets owned by students who are older than 20.
schema_links:
Find number of pets owned by students who are older than 20. | student : student.age , student.stuid , student.advisor , student.lname , student.fname , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.pet_age , pets.petid , pets.pettype , pets.weight , pets.*
natsql and SQL generation:
select count ( distinct _ ) from _ where _ > _ | select count ( distinct has_pet.petid ) from has_pet join student on has_pet.stuid = student.stuid where student.age > 20
SQL = SELECT count(DISTINCT has_pet.petid) FROM has_pet JOIN student ON has_pet.stuid = student.stuid WHERE student.age > 20
natsql:
select count ( distinct _ ) from _ where _ > _ | select count ( distinct has_pet.petid ) from has_pet join student on has_pet.stuid = student.stuid where student.age > 20

SQL:
SELECT count(DISTINCT has_pet.petid) FROM has_pet JOIN student ON has_pet.stuid = student.stuid WHERE student.age > 20
self correction:
SELECT COUNT(DISTINCT has_pet.petid) AS pet_count FROM has_pet JOIN student ON has_pet.stuid = student.stuid WHERE student.age > 20;

index is 52
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
How many pets are owned by students that have an age greater than 20?
schema_links:
How many pets are owned by students that have an age greater than 20? | student : student.age , student.stuid , student.fname , student.sex , student.major , student.* | pets : pets.pet_age , pets.petid , pets.pettype , pets.weight , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select count ( _ ) from _ where _ > _ | select count ( pets.* ) from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where student.age > 20
natsql:
select count ( _ ) from _ where _ > _ | select count ( pets.* ) from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where student.age > 20
SQL:
SELECT count(pets.*) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20
self correction:
SELECT count(DISTINCT pets.petid) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20

index is 53
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'
Find the number of dog pets that are raised by female students (with sex F).
schema_links:
Find the number of dog pets that are raised by female students (with sex F). | student : student.sex , student.stuid , student.fname , student.age , student.major , student.* | pets : pets.pettype ( dog ) , pets.petid , pets.pet_age , pets.weight , pets.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.*
natsql and SQL generation:
select count ( _ ) from _ where @.@ = _ and @.@ = 'F' | select count ( pets.petid ) from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'dog' and student.sex = 'F'
SQL = SELECT count(petid) FROM student JOIN has_pet ON student.StuID = has_pet.StuID JOIN pets ON has_pet.PetID = pets.PetID WHERE pet_type = 'dog' AND sex = 'F'
natsql:
select count ( _ ) from _ where @.@ = _ and @.@ = 'F' | select count ( pets.petid ) from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'dog' and student.sex = 'F'

SQL:
SELECT count(petid) FROM student JOIN has_pet ON student.StuID = has_pet.StuID JOIN pets ON has_pet.PetID = pets.PetID WHERE pet_type = 'dog' AND sex = 'F'
self correction:
SELECT COUNT(DISTINCT has_pet.PetID) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Student.Sex = 'F'

index is 54
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'
How many dog pets are raised by female students?
schema_links:
How many dog pets are raised by female students? | pets : pets.pettype ( dog ) , pets.petid , pets.pet_age , pets.weight , pets.* | student : student.sex , student.stuid , student.age , student.major , student.advisor , student.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.*
natsql and SQL generation:
select count ( _ ) from _ where @.@ = _ and @.@ = _ | select count ( pets.* ) from pets join has_pet on pets.petid = has_pet.petid join student on student.stuid = has_pet.stuid where pets.pettype = 'dog' and student.sex = 'female'
SQL = SELECT count(*) FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON student.stuid = has_pet.stuid WHERE pets.pettype = 'dog' AND student.sex = 'female'
natsql:
select count ( _ ) from _ where @.@ = _ and @.@ = _ | select count ( pets.* ) from pets join has_pet on pets.petid = has_pet.petid join student on student.stuid = has_pet.stuid where pets.pettype = 'dog' and student.sex = 'female'

SQL:
SELECT count(*) FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON student.stuid = has_pet.stuid WHERE pets.pettype = 'dog' AND student.sex = 'female'
self correction:
SELECT COUNT(DISTINCT pets.petid) FROM pets  JOIN has_pet ON pets.petid = has_pet.petid  JOIN student ON student.stuid = has_pet.stuid  WHERE pets.pettype = 'dog'  AND student.sex = 'female'

index is 55
SELECT count(DISTINCT pettype) FROM pets
Find the number of distinct type of pets.
schema_links:
Find the number of distinct type of pets. | pets : pets.pettype , pets.weight , pets.petid , pets.pet_age , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct pets.pettype ) from pets
SQL = SELECT count(DISTINCT pettype) FROM pets
natsql:
select count ( distinct _ ) from _ | select count ( distinct pets.pettype ) from pets

SQL:
SELECT count(DISTINCT pettype) FROM pets
self correction:
SELECT COUNT(DISTINCT PetType) FROM Pets

index is 56
SELECT count(DISTINCT pettype) FROM pets
How many different types of pet are there?
schema_links:
How many different types of pet are there? | pets : pets.pettype , pets.weight , pets.petid , pets.pet_age , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct pettype ) from pets
SQL = SELECT COUNT(DISTINCT pettype) FROM pets
natsql:
select count ( distinct _ ) from _ | select count ( distinct pettype ) from pets

SQL:
SELECT COUNT(DISTINCT pettype) FROM pets
self correction:
SELECT COUNT(DISTINCT PetType) FROM Pets

index is 57
SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'
Find the first name of students who have cat or dog pet.
schema_links:
Find the first name of students who have cat or dog pet. | student : student.fname , student.stuid , student.lname , student.age , student.sex , student.* | pets : pets.pettype ( cat , dog ) , pets.petid , pets.weight , pets.pet_age , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select distinct _ from _ where _ in ( _ , _ ) | select distinct student.fname from student where student.stuid in ( select has_pet.stuid from has_pet where has_pet.petid in ( select pets.petid from pets where pets.pettype in ('cat', 'dog') ) )
SQL = SELECT DISTINCT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype IN ('cat', 'dog')))
natsql:
select distinct _ from _ where _ in ( _ , _ ) | select distinct student.fname from student where student.stuid in ( select has_pet.stuid from has_pet where has_pet.petid in ( select pets.petid from pets where pets.pettype in ('cat', 'dog') ) )

SQL:
SELECT DISTINCT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype IN ('cat', 'dog')))
self correction:
SELECT fname FROM Student WHERE StuID IN (   SELECT StuID   FROM Has_Pet   WHERE PetID IN (     SELECT PetID     FROM Pets     WHERE PetType IN ('cat', 'dog')   ) )

index is 58
SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'
What are the first names of every student who has a cat or dog as a pet?
schema_links:
What are the first names of every student who has a cat or dog as a pet? | student : student.fname , student.stuid , student.lname , student.sex , student.advisor , student.* | pets : pets.pettype ( cat , dog ) , pets.petid , pets.weight , pets.pet_age , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select distinct _ from _ where exists ( select * from _ where _ and _ ) | select distinct student.fname from student where exists ( select * from has_pet where has_pet.stuid = student.stuid and exists ( select * from pets where (pets.pettype = 'cat' or pets.pettype = 'dog') and has_pet.petid = pets.petid ) )
SQL = SELECT DISTINCT fname FROM student WHERE EXISTS (SELECT * FROM has_pet WHERE has_pet.stuid = student.stuid AND EXISTS (SELECT * FROM pets WHERE (pettype = 'cat' OR pettype = 'dog') AND has_pet.petid = pets.petid))
natsql:
select distinct _ from _ where exists ( select * from _ where _ and _ ) | select distinct student.fname from student where exists ( select * from has_pet where has_pet.stuid = student.stuid and exists ( select * from pets where (pets.pettype = 'cat' or pets.pettype = 'dog') and has_pet.petid = pets.petid ) )

SQL:
SELECT DISTINCT fname FROM student WHERE EXISTS (SELECT * FROM has_pet WHERE has_pet.stuid = student.stuid AND EXISTS (SELECT * FROM pets WHERE (pettype = 'cat' OR pettype = 'dog') AND has_pet.petid = pets.petid))
self correction:
SELECT DISTINCT fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog')

index is 59
select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'
Find the first name of students who have both cat and dog pets .
schema_links:
Find the first name of students who have both cat and dog pets . | student : student.fname , student.stuid , student.lname , student.age , student.sex , student.* | pets : pets.pettype ( cat , dog ) , pets.petid , pets.weight , pets.pet_age , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select distinct _ from _ where exists ( select * from _ where _ ) and exists ( select * from _ where _ ) | select distinct student.fname from student where exists ( select * from has_pet where student.stuid = has_pet.stuid and has_pet.petid in ( select petid from pets where pettype = 'cat' ) ) and exists ( select * from has_pet where student.stuid = has_pet.stuid and has_pet.petid in ( select petid from pets where pettype = 'dog' ) )
SQL = SELECT DISTINCT fname FROM student WHERE EXISTS (SELECT * FROM has_pet WHERE student.stuid = has_pet.stuid AND has_pet.petid IN (SELECT petid FROM pets WHERE pettype = 'cat')) AND EXISTS (SELECT * FROM has_pet WHERE student.stuid = has_pet.stuid AND has_pet.petid IN (SELECT petid FROM pets WHERE pettype = 'dog'))
natsql:
select distinct _ from _ where exists ( select * from _ where _ ) and exists ( select * from _ where _ ) | select distinct student.fname from student where exists ( select * from has_pet where student.stuid = has_pet.stuid and has_pet.petid in ( select petid from pets where pettype = 'cat' ) ) and exists ( select * from has_pet where student.stuid = has_pet.stuid and has_pet.petid in ( select petid from pets where pettype = 'dog' ) )

SQL:
SELECT DISTINCT fname FROM student WHERE EXISTS (SELECT * FROM has_pet WHERE student.stuid = has_pet.stuid AND has_pet.petid IN (SELECT petid FROM pets WHERE pettype = 'cat')) AND EXISTS (SELECT * FROM has_pet WHERE student.stuid = has_pet.stuid AND has_pet.petid IN (SELECT petid FROM pets WHERE pettype = 'dog'))
self correction:
SELECT DISTINCT fname  FROM Student  WHERE StuID IN (     SELECT StuID      FROM Has_Pet      WHERE PetID IN (         SELECT PetID          FROM Pets          WHERE PetType = 'cat'     ) )  AND StuID IN (     SELECT StuID      FROM Has_Pet      WHERE PetID IN (         SELECT PetID          FROM Pets          WHERE PetType = 'dog'     ) );

index is 60
SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'
What are the students' first names who have both cats and dogs as pets?
schema_links:
What are the students' first names who have both cats and dogs as pets? | student : student.fname , student.lname , student.stuid , student.advisor , student.age , student.* | pets : pets.pettype ( cat , dog ) , pets.petid , pets.weight , pets.pet_age , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select distinct _ from _ where _ and _ | select distinct student.fname from student, has_pet, pets where student.stuid = has_pet.stuid and has_pet.petid = pets.petid and (pets.pettype = 'cat' or pets.pettype = 'dog')
SQL = SELECT DISTINCT fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' OR pets.pettype = 'dog'
natsql:
select distinct _ from _ where _ and _ | select distinct student.fname from student, has_pet, pets where student.stuid = has_pet.stuid and has_pet.petid = pets.petid and (pets.pettype = 'cat' or pets.pettype = 'dog')

SQL:
SELECT DISTINCT fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' OR pets.pettype = 'dog'
self correction:
SELECT DISTINCT fname  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType IN ('cat', 'dog') GROUP BY fname HAVING COUNT(DISTINCT Pets.PetType) = 2

index is 61
SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
Find the major and age of students who do not have a cat pet.
schema_links:
Find the major and age of students who do not have a cat pet. | student : student.age , student.major , student.stuid , student.fname , student.sex , student.* | pets : pets.pettype ( cat ) , pets.pet_age , pets.petid , pets.weight , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select _ , _ from _ where _ not in ( select _ from _ where @.@ = _ ) | select student.major , student.age from student where student.stuid not in ( select has_pet.stuid from has_pet where has_pet.petid in ( select pets.petid from pets where pets.pettype = 'cat' ) )
SQL = SELECT major , age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat'))
natsql:
select _ , _ from _ where _ not in ( select _ from _ where @.@ = _ ) | select student.major , student.age from student where student.stuid not in ( select has_pet.stuid from has_pet where has_pet.petid in ( select pets.petid from pets where pets.pettype = 'cat' ) )

SQL:
SELECT major , age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat'))
self correction:
SELECT major, age FROM Student WHERE StuID NOT IN (   SELECT StuID   FROM Has_Pet   WHERE PetID IN (     SELECT PetID     FROM Pets     WHERE PetType = 'cat'   ) )

index is 62
SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
What major is every student who does not own a cat as a pet, and also how old are they?
schema_links:
What major is every student who does not own a cat as a pet, and also how old are they? | student : student.major , student.age , student.stuid , student.sex , student.advisor , student.* | pets : pets.pettype ( cat ) , pets.petid , pets.weight , pets.pet_age , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select _ , _ from _ where _ not in ( select _ from _ ) | select student.major , student.age from student where student.id not in ( select has_pet.stuid from has_pet where has_pet.petid in ( select pets.petid from pets where pets.pettype = 'cat' ) )
SQL = SELECT major , age FROM student WHERE id NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat'))
natsql:
select _ , _ from _ where _ not in ( select _ from _ ) | select student.major , student.age from student where student.id not in ( select has_pet.stuid from has_pet where has_pet.petid in ( select pets.petid from pets where pets.pettype = 'cat' ) )

SQL:
SELECT major , age FROM student WHERE id NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat'))
self correction:
SELECT major, age  FROM Student  WHERE StuID NOT IN (     SELECT StuID      FROM Has_Pet      WHERE PetID IN (         SELECT PetID          FROM Pets          WHERE PetType = 'cat'     ) )

index is 63
SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'
Find the id of students who do not have a cat pet.
schema_links:
Find the id of students who do not have a cat pet. | student : student.stuid , student.age , student.sex , student.major , student.advisor , student.* | pets : pets.pettype ( cat ) , pets.petid , pets.weight , pets.pet_age , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ where @.@ = 'cat' ) | select student.stuid from student where student.stuid not in ( select has_pet.stuid from has_pet where has_pet.petid = 'cat' )
SQL = SELECT stuid FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet WHERE petid = 'cat')
natsql:
select _ from _ where _ not in ( select _ from _ where @.@ = 'cat' ) | select student.stuid from student where student.stuid not in ( select has_pet.stuid from has_pet where has_pet.petid = 'cat' )

SQL:
SELECT stuid FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet WHERE petid = 'cat')
self correction:
SELECT student.stuid  FROM student  LEFT JOIN has_pet ON student.stuid = has_pet.stuid  LEFT JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype <> 'cat' OR pets.pettype IS NULL;

index is 64
SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'
What are the ids of the students who do not own cats as pets?
schema_links:
What are the ids of the students who do not own cats as pets? | student : student.stuid , student.age , student.sex , student.major , student.advisor , student.* | pets : pets.pettype ( cat ) , pets.petid , pets.weight , pets.pet_age , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ ) | select student.id from student where student.id not in ( select has_pet.stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pettype = 'cat' )
SQL = SELECT id FROM student WHERE id NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat')
natsql:
select _ from _ where _ not in ( select _ from _ ) | select student.id from student where student.id not in ( select has_pet.stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pettype = 'cat' )

SQL:
SELECT id FROM student WHERE id NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat')
self correction:
SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat')

index is 65
SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
Find the first name and age of students who have a dog but do not have a cat as a pet.
schema_links:
Find the first name and age of students who have a dog but do not have a cat as a pet. | student : student.fname , student.age , student.stuid , student.lname , student.sex , student.* | pets : pets.pettype ( cat , dog ) , pets.petid , pets.pet_age , pets.weight , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select _ , _ from _ where _ not in ( select _ from _ where _ = _ ) and _ in ( select _ from _ where _ = _ ) | select student.fname , student.age from student where student.stuid not in ( select has_pet.stuid from has_pet inner join pets on has_pet.petid = pets.petid where pets.pettype = 'cat' ) and student.stuid in ( select has_pet.stuid from has_pet inner join pets on has_pet.petid = pets.petid where pets.pettype = 'dog' )
SQL = SELECT fname , age FROM student WHERE stuid NOT IN (SELECT has_pet.stuid FROM has_pet INNER JOIN pets ON has_pet.petid  =  pets.petid WHERE pets.pettype  =  'cat') AND stuid IN (SELECT has_pet.stuid FROM has_pet INNER JOIN pets ON has_pet.petid  =  pets.petid WHERE pets.pettype  =  'dog')
natsql:
select _ , _ from _ where _ not in ( select _ from _ where _ = _ ) and _ in ( select _ from _ where _ = _ ) | select student.fname , student.age from student where student.stuid not in ( select has_pet.stuid from has_pet inner join pets on has_pet.petid = pets.petid where pets.pettype = 'cat' ) and student.stuid in ( select has_pet.stuid from has_pet inner join pets on has_pet.petid = pets.petid where pets.pettype = 'dog' )

SQL:
SELECT fname , age FROM student WHERE stuid NOT IN (SELECT has_pet.stuid FROM has_pet INNER JOIN pets ON has_pet.petid  =  pets.petid WHERE pets.pettype  =  'cat') AND stuid IN (SELECT has_pet.stuid FROM has_pet INNER JOIN pets ON has_pet.petid  =  pets.petid WHERE pets.pettype  =  'dog')
self correction:
SELECT fname, age  FROM student  WHERE stuid IN (     SELECT has_pet.stuid      FROM has_pet      INNER JOIN pets ON has_pet.petid = pets.petid      WHERE pets.pettype = 'dog' )  AND stuid NOT IN (     SELECT has_pet.stuid      FROM has_pet      INNER JOIN pets ON has_pet.petid = pets.petid      WHERE pets.pettype = 'cat' )

index is 66
SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
What is the first name of every student who has a dog but does not have a cat?
schema_links:
What is the first name of every student who has a dog but does not have a cat? | student : student.fname , student.stuid , student.lname , student.advisor , student.sex , student.* | pets : pets.pettype ( cat , dog ) , pets.petid , pets.weight , pets.pet_age , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select distinct _ from _ where _ and not exists ( select _ from _ where _ and _ ) | select distinct student.fname from student where exists ( select * from pets where pets.pettype = 'dog' and has_pet.stuid = student.stuid ) and not exists ( select * from pets where pets.pettype = 'cat' and has_pet.stuid = student.stuid )
SQL = SELECT DISTINCT fname FROM student WHERE EXISTS (SELECT * FROM pets WHERE pettype  =  'dog' AND has_pet.stuid  =  student.stuid) AND NOT EXISTS (SELECT * FROM pets WHERE pettype  =  'cat' AND has_pet.stuid  =  student.stuid)
natsql:
select distinct _ from _ where _ and not exists ( select _ from _ where _ and _ ) | select distinct student.fname from student where exists ( select * from pets where pets.pettype = 'dog' and has_pet.stuid = student.stuid ) and not exists ( select * from pets where pets.pettype = 'cat' and has_pet.stuid = student.stuid )

SQL:
SELECT DISTINCT fname FROM student WHERE EXISTS (SELECT * FROM pets WHERE pettype  =  'dog' AND has_pet.stuid  =  student.stuid) AND NOT EXISTS (SELECT * FROM pets WHERE pettype  =  'cat' AND has_pet.stuid  =  student.stuid)
self correction:
SELECT fname FROM Student WHERE EXISTS (   SELECT *   FROM Has_Pet   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Has_Pet.StuID = Student.StuID     AND Pets.PetType = 'dog' ) AND NOT EXISTS (   SELECT *   FROM Has_Pet   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Has_Pet.StuID = Student.StuID     AND Pets.PetType = 'cat' )

index is 67
SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1
Find the type and weight of the youngest pet.
schema_links:
Find the type and weight of the youngest pet. | pets : pets.pettype , pets.pet_age , pets.weight , pets.petid , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select _ , _ from _ where _ = ( select min ( _ ) from _ ) | select pets.pettype , pets.weight from pets where pets.pet_age = ( select min ( pets.pet_age ) from pets )
SQL = SELECT pettype ,  weight FROM pets WHERE pet_age  =  (SELECT min(pet_age) FROM pets)
natsql:
select _ , _ from _ where _ = ( select min ( _ ) from _ ) | select pets.pettype , pets.weight from pets where pets.pet_age = ( select min ( pets.pet_age ) from pets )

SQL:
SELECT pettype ,  weight FROM pets WHERE pet_age  =  (SELECT min(pet_age) FROM pets)
self correction:
SELECT pets.PetType, pets.weight FROM pets WHERE pets.pet_age = (SELECT MIN(pets.pet_age) FROM pets)

index is 68
SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1
What type of pet is the youngest animal, and how much does it weigh?
schema_links:
What type of pet is the youngest animal, and how much does it weigh? | pets : pets.pettype , pets.pet_age , pets.weight , pets.petid , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select _ , min ( _ ) from _ | select pets.pettype , pets.weight from pets where pets.pet_age = min ( pets.pet_age )
SQL = SELECT pettype ,  weight FROM pets WHERE pet_age  =  (SELECT min(pet_age) FROM pets)
natsql:
select _ , min ( _ ) from _ | select pets.pettype , pets.weight from pets where pets.pet_age = min ( pets.pet_age )

SQL:
SELECT pettype ,  weight FROM pets WHERE pet_age  =  (SELECT min(pet_age) FROM pets)
self correction:
SELECT Pets.PetType, Pets.weight FROM Pets WHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets)

index is 69
SELECT petid ,  weight FROM pets WHERE pet_age  >  1
Find the id and weight of all pets whose age is older than 1.
schema_links:
Find the id and weight of all pets whose age is older than 1. | pets : pets.petid , pets.pet_age , pets.weight , pets.pettype , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.*
natsql and SQL generation:
select _ , _ from _ where _ > _ | select pets.petid , pets.weight from pets where pets.pet_age > 1
SQL = SELECT petid ,  weight FROM pets WHERE pet_age  >  1
natsql:
select _ , _ from _ where _ > _ | select pets.petid , pets.weight from pets where pets.pet_age > 1

SQL:
SELECT petid ,  weight FROM pets WHERE pet_age  >  1
self correction:
SELECT Pets.PetID, Pets.weight  FROM Pets  WHERE Pets.pet_age > 1

index is 70
SELECT petid ,  weight FROM pets WHERE pet_age  >  1
What is the id and weight of every pet who is older than 1?
schema_links:
What is the id and weight of every pet who is older than 1? | pets : pets.petid , pets.pet_age , pets.weight , pets.pettype , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select _ , _ from _ where _ > _ | select pets.petid , pets.weight from pets where pets.pet_age > 1
SQL = SELECT petid ,  weight FROM pets WHERE pet_age  >  1
natsql:
select _ , _ from _ where _ > _ | select pets.petid , pets.weight from pets where pets.pet_age > 1

SQL:
SELECT petid ,  weight FROM pets WHERE pet_age  >  1
self correction:
SELECT pets.petid, pets.weight FROM pets WHERE pets.pet_age > 1

index is 71
SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype
Find the average and maximum age for each type of pet.
schema_links:
Find the average and maximum age for each type of pet. | pets : pets.pet_age , pets.pettype , pets.weight , pets.petid , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select _ , avg ( _ ) , max ( _ ) from _ group by _ | select pets.pettype , avg ( pets.pet_age ) , max ( pets.pet_age ) from pets group by pets.pettype
SQL = SELECT pettype , AVG(pet_age) , MAX(pet_age) FROM pets GROUP BY pettype
natsql:
select _ , avg ( _ ) , max ( _ ) from _ group by _ | select pets.pettype , avg ( pets.pet_age ) , max ( pets.pet_age ) from pets group by pets.pettype

SQL:
SELECT pettype , AVG(pet_age) , MAX(pet_age) FROM pets GROUP BY pettype
self correction:
SELECT pets.pettype, AVG(pets.pet_age), MAX(pets.pet_age) FROM pets GROUP BY pets.pettype

index is 72
SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype
What is the average and maximum age for each pet type?
schema_links:
What is the average and maximum age for each pet type? | pets : pets.pet_age , pets.pettype , pets.weight , pets.petid , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select avg ( _ ) , max ( _ ) , _ from _ group by _ | select avg ( pets.pet_age ) , max ( pets.pet_age ) , pets.pet_type from pets group by pets.pet_type
SQL = SELECT avg(pet_age) ,  max(pet_age) ,  pet_type FROM pets GROUP BY pet_type
natsql:
select avg ( _ ) , max ( _ ) , _ from _ group by _ | select avg ( pets.pet_age ) , max ( pets.pet_age ) , pets.pet_type from pets group by pets.pet_type

SQL:
SELECT avg(pet_age) ,  max(pet_age) ,  pet_type FROM pets GROUP BY pet_type
self correction:
SELECT avg(pet_age) AS average_age, max(pet_age) AS maximum_age, PetType FROM Pets GROUP BY PetType

index is 73
SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype
Find the average weight for each pet type.
schema_links:
Find the average weight for each pet type. | pets : pets.pettype , pets.weight , pets.petid , pets.pet_age , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select _ , avg ( _ ) from _ group by _ | select pets.pettype , avg ( pets.weight ) from pets group by pets.pettype
SQL = SELECT pettype , AVG(weight) FROM pets GROUP BY pettype
natsql:
select _ , avg ( _ ) from _ group by _ | select pets.pettype , avg ( pets.weight ) from pets group by pets.pettype

SQL:
SELECT pettype , AVG(weight) FROM pets GROUP BY pettype
self correction:
SELECT pets.PetType, AVG(pets.weight)  FROM pets GROUP BY pets.PetType

index is 74
SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype
What is the average weight for each type of pet?
schema_links:
What is the average weight for each type of pet? | pets : pets.pettype , pets.weight , pets.pet_age , pets.petid , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select _ , avg ( _ ) from _ group by _ | select pets.pettype , avg ( pets.weight ) from pets group by pets.pettype
SQL = SELECT pettype ,  AVG (weight) FROM pets GROUP BY pettype
natsql:
select _ , avg ( _ ) from _ group by _ | select pets.pettype , avg ( pets.weight ) from pets group by pets.pettype

SQL:
SELECT pettype ,  AVG (weight) FROM pets GROUP BY pettype
self correction:
SELECT pettype, AVG(weight)  FROM Pets  GROUP BY pettype

index is 75
SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid
Find the first name and age of students who have a pet.
schema_links:
Find the first name and age of students who have a pet. | student : student.fname , student.age , student.stuid , student.lname , student.sex , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.pet_age , pets.weight , pets.petid , pets.pettype , pets.*
natsql and SQL generation:
select _ , _ from _ where exists ( select _ from _ where _ ) | select student.fname , student.age from student where exists ( select * from has_pet where has_pet.stuid = student.stuid )
SQL = SELECT fname , age FROM student WHERE EXISTS (SELECT * FROM has_pet WHERE has_pet.stuid = student.stuid)
natsql:
select _ , _ from _ where exists ( select _ from _ where _ ) | select student.fname , student.age from student where exists ( select * from has_pet where has_pet.stuid = student.stuid )

SQL:
SELECT fname , age FROM student WHERE EXISTS (SELECT * FROM has_pet WHERE has_pet.stuid = student.stuid)
self correction:
SELECT fname, age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)

index is 76
SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid
What are the different first names and ages of the students who do have pets?
schema_links:
What are the different first names and ages of the students who do have pets? | student : student.age , student.fname , student.stuid , student.lname , student.sex , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.pet_age , pets.weight , pets.petid , pets.pettype , pets.*
natsql and SQL generation:
select distinct _ , _ from _ where exists ( select * from _ where _ ) | select distinct student.fname , student.age from student where exists ( select * from has_pet where student.stuid = has_pet.stuid )
SQL = SELECT DISTINCT fname , age FROM student WHERE EXISTS (SELECT * FROM has_pet WHERE student.stuid  =  has_pet.stuid)
natsql:
select distinct _ , _ from _ where exists ( select * from _ where _ ) | select distinct student.fname , student.age from student where exists ( select * from has_pet where student.stuid = has_pet.stuid )

SQL:
SELECT DISTINCT fname , age FROM student WHERE EXISTS (SELECT * FROM has_pet WHERE student.stuid  =  has_pet.stuid)
self correction:
SELECT DISTINCT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)

index is 77
SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'
Find the id of the pet owned by student whose last name is ‘Smith’.
schema_links:
Find the id of the pet owned by student whose last name is 'Smith'. | student : student.lname ( Smith ) , student.stuid , student.fname , student.age , student.sex , student.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.* | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight , pets.*
natsql and SQL generation:
select _ from _ where _ = 'Smith' | select has_pet.petid from student join has_pet on student.stuid = has_pet.stuid where student.lname = 'Smith'
SQL = SELECT has_pet.petid FROM student JOIN has_pet ON student.stuid  =  has_pet.stuid WHERE student.lname  =  'Smith'
natsql:
select _ from _ where _ = 'Smith' | select has_pet.petid from student join has_pet on student.stuid = has_pet.stuid where student.lname = 'Smith'

SQL:
SELECT has_pet.petid FROM student JOIN has_pet ON student.stuid  =  has_pet.stuid WHERE student.lname  =  'Smith'
self correction:
SELECT pets.petid FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid WHERE student.lname = 'Smith'

index is 78
SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'
What is the id of the pet owned by the student whose last name is 'Smith'?
schema_links:
What is the id of the pet owned by the student whose last name is 'Smith'? | student : student.lname ( Smith ) , student.stuid , student.advisor , student.fname , student.age , student.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.* | pets : pets.petid , pets.pettype , pets.weight , pets.pet_age , pets.*
natsql and SQL generation:
select _ from _ where _ = _ | select has_pet.petid from student join has_pet on student.stuid = has_pet.stuid where student.lname = 'Smith'
SQL = SELECT petid FROM has_pet JOIN student ON student.stuid  =  has_pet.stuid WHERE student.lname  =  'Smith'
natsql:
select _ from _ where _ = _ | select has_pet.petid from student join has_pet on student.stuid = has_pet.stuid where student.lname = 'Smith'

SQL:
SELECT petid FROM has_pet JOIN student ON student.stuid  =  has_pet.stuid WHERE student.lname  =  'Smith'
self correction:
SELECT Pets.PetID FROM Has_Pet JOIN Student ON Student.StuID = Has_Pet.StuID JOIN Pets ON Pets.PetID = Has_Pet.PetID WHERE Student.LName = 'Smith'

index is 79
SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid
Find the number of pets for each student who has any pet and student id.
schema_links:
Find the number of pets for each student who has any pet and student id. | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | student : student.stuid , student.age , student.sex , student.major , student.advisor , student.* | pets : pets.petid , pets.weight , pets.pettype , pets.pet_age , pets.*
natsql and SQL generation:
select count ( _ ) , _ from _ group by _ | select count ( pets.* ) , student.stuid from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid group by student.stuid
SQL = SELECT count(pets.*) , student.stuid FROM student JOIN has_pet ON student.stuid  =  has_pet.stuid JOIN pets ON pets.petid  =  has_pet.petid GROUP BY student.stuid
natsql:
select count ( _ ) , _ from _ group by _ | select count ( pets.* ) , student.stuid from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid group by student.stuid

SQL:
SELECT count(pets.*) , student.stuid FROM student JOIN has_pet ON student.stuid  =  has_pet.stuid JOIN pets ON pets.petid  =  has_pet.petid GROUP BY student.stuid
self correction:
SELECT COUNT(pets.PetID) AS pet_count, student.StuID FROM Student JOIN Has_Pet ON student.StuID = Has_Pet.StuID JOIN Pets ON Pets.PetID = Has_Pet.PetID GROUP BY student.StuID

index is 80
select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid
For students who have pets , how many pets does each student have ? list their ids instead of names .
schema_links:
For students who have pets , how many pets does each student have ? list their ids instead of names . | student : student.stuid , student.fname , student.lname , student.advisor , student.age , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight , pets.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select student.stuid , count ( has_pet.petid ) from student join has_pet on student.stuid = has_pet.stuid group by student.stuid
SQL = SELECT stuid , count(petid) FROM student JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.stuid
natsql:
select _ , count ( _ ) from _ group by _ | select student.stuid , count ( has_pet.petid ) from student join has_pet on student.stuid = has_pet.stuid group by student.stuid

SQL:
SELECT stuid , count(petid) FROM student JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.stuid
self correction:
SELECT student.StuID, COUNT(has_pet.PetID)  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  GROUP BY Student.StuID

index is 81
SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1
Find the first name and gender of student who have more than one pet.
schema_links:
Find the first name and gender of student who have more than one pet. | student : student.fname , student.sex , student.stuid , student.age , student.lname , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.petid , pets.weight , pets.pettype , pets.pet_age , pets.*
natsql and SQL generation:
select _ , _ from _ where _ > _ group by _ | select student.fname , student.sex from student where count ( has_pet.petid ) > 1 group by student.fname , student.sex
SQL = SELECT fname ,  sex FROM student JOIN has_pet ON student.stuid  =  has_pet.stuid GROUP BY fname , sex HAVING count(petid)  >  1
natsql:
select _ , _ from _ where _ > _ group by _ | select student.fname , student.sex from student where count ( has_pet.petid ) > 1 group by student.fname , student.sex

SQL:
SELECT fname ,  sex FROM student JOIN has_pet ON student.stuid  =  has_pet.stuid GROUP BY fname , sex HAVING count(petid)  >  1
self correction:
SELECT fname, sex  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  GROUP BY student.stuid, fname, sex  HAVING count(has_pet.petid) > 1

index is 82
SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1
What is the first name and gender of the all the students who have more than one pet?
schema_links:
What is the first name and gender of the all the students who have more than one pet? | student : student.fname , student.sex , student.stuid , student.lname , student.age , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.petid , pets.pettype , pets.weight , pets.pet_age , pets.*
natsql and SQL generation:
select _ , _ from _ where count ( _ ) > _ group by _ | select student.fname , student.sex from student where count ( has_pet.* ) > 1 group by student.fname, student.sex
SQL = SELECT fname ,  sex FROM student JOIN has_pet ON student.stuid  =  has_pet.stuid GROUP BY student.fname, student.sex HAVING count(has_pet.*)  >  1
natsql:
select _ , _ from _ where count ( _ ) > _ group by _ | select student.fname , student.sex from student where count ( has_pet.* ) > 1 group by student.fname, student.sex

SQL:
SELECT fname ,  sex FROM student JOIN has_pet ON student.stuid  =  has_pet.stuid GROUP BY student.fname, student.sex HAVING count(has_pet.*)  >  1
self correction:
SELECT student.fname, student.sex  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  GROUP BY student.fname, student.sex  HAVING COUNT(has_pet.PetID) > 1

index is 83
SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'
Find the last name of the student who has a cat that is age 3.
schema_links:
Find the last name of the student who has a cat that is age 3. | student : student.lname , student.stuid , student.fname , student.age , student.advisor , student.* | pets : pets.pet_age , pets.pettype ( cat ) , pets.petid , pets.weight , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select _ from _ where @.@ = _ and @.@ = _ | select student.lname from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'cat' and pets.pet_age = 3
SQL = SELECT lname FROM student JOIN has_pet ON student.StuID = has_pet.StuID JOIN pets ON has_pet.PetID = pets.PetID WHERE pets.PetType = 'cat' AND pets.pet_age = 3
natsql:
select _ from _ where @.@ = _ and @.@ = _ | select student.lname from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'cat' and pets.pet_age = 3

SQL:
SELECT lname FROM student JOIN has_pet ON student.StuID = has_pet.StuID JOIN pets ON has_pet.PetID = pets.PetID WHERE pets.PetType = 'cat' AND pets.pet_age = 3
self correction:
SELECT student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3;

index is 84
SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'
What is the last name of the student who has a cat that is 3 years old?
schema_links:
What is the last name of the student who has a cat that is 3 years old? | student : student.lname , student.stuid , student.fname , student.age , student.advisor , student.* | pets : pets.pet_age , pets.pettype ( cat ) , pets.petid , pets.weight , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select _ from _ where @.@ = _ and @.@ = _ | select student.lname from student where exists (select 1 from has_pet inner join pets on has_pet.petid = pets.petid where has_pet.stuid = student.stuid and pets.pettype = 'cat' and pets.pet_age = 3)
SQL = SELECT lname FROM student WHERE EXISTS (SELECT 1 FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE has_pet.stuid = student.stuid AND pets.pettype = 'cat' AND pets.pet_age = 3)
natsql:
select _ from _ where @.@ = _ and @.@ = _ | select student.lname from student where exists (select 1 from has_pet inner join pets on has_pet.petid = pets.petid where has_pet.stuid = student.stuid and pets.pettype = 'cat' and pets.pet_age = 3)

SQL:
SELECT lname FROM student WHERE EXISTS (SELECT 1 FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE has_pet.stuid = student.stuid AND pets.pettype = 'cat' AND pets.pet_age = 3)
self correction:
SELECT student.lname  FROM student  WHERE EXISTS (   SELECT 1    FROM has_pet    INNER JOIN pets ON has_pet.petid = pets.petid    WHERE has_pet.stuid = student.stuid    AND pets.pettype = 'cat'    AND pets.pet_age = 3 )

index is 85
select avg(age) from student where stuid not in (select stuid from has_pet)
Find the average age of students who do not have any pet .
schema_links:
Find the average age of students who do not have any pet . | student : student.age , student.stuid , student.sex , student.major , student.advisor , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.pet_age , pets.weight , pets.petid , pets.pettype , pets.*
natsql and SQL generation:
select avg ( student.age ) from student where student.id not in ( select has_pet.stuid from has_pet )
natsql:
select avg ( student.age ) from student where student.id not in ( select has_pet.stuid from has_pet )
SQL:
SELECT AVG(age) FROM student WHERE id NOT IN (SELECT stuid FROM Has_Pet)
self correction:
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)

index is 86
select avg(age) from student where stuid not in (select stuid from has_pet)
What is the average age for all students who do not own any pets ?
schema_links:
What is the average age for all students who do not own any pets ? | student : student.age , student.stuid , student.sex , student.advisor , student.lname , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.pettype , pets.pet_age , pets.weight , pets.petid , pets.*
natsql and SQL generation:
select avg ( student.age ) from student where student.stuid not in ( select has_pet.stuid from has_pet )
natsql:
select avg ( student.age ) from student where student.stuid not in ( select has_pet.stuid from has_pet )
SQL:
SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)
self correction:
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)

index is 87
SELECT count(*) FROM CONTINENTS;
How many continents are there?
schema_links:
How many continents are there? | continents : continents.continent , continents.contid , continents.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct continents.continent ) from continents
SQL = SELECT count(DISTINCT continent) FROM continents
natsql:
select count ( distinct _ ) from _ | select count ( distinct continents.continent ) from continents

SQL:
SELECT count(DISTINCT continent) FROM continents
self correction:
SELECT count(DISTINCT ContId) FROM continents

index is 88
SELECT count(*) FROM CONTINENTS;
What is the number of continents?
schema_links:
What is the number of continents? | continents : continents.continent , continents.contid , continents.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | countries : countries.continent , countries.countryid , countries.countryname , countries.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( distinct continents.continent ) from continents
SQL = SELECT COUNT(*) FROM continents
natsql:
select count ( _ ) from _ | select count ( distinct continents.continent ) from continents

SQL:
SELECT COUNT(*) FROM continents
self correction:
SELECT COUNT(ContId) FROM continents

index is 89
SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;
How many countries does each continent have? List the continent id, continent name and the number of countries.
schema_links:
How many countries does each continent have? List the continent id, continent name and the number of countries. | continents : continents.continent , continents.contid , continents.* | countries : countries.continent , countries.countryid , countries.countryname , countries.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select _ , _ , count ( _ ) from _ group by _ | select continents.contid , continents.continent , count ( countries.countryname ) from continents join countries on continents.contid = countries.continent group by continents.contid, continents.continent
SQL = SELECT contid ,  continent , count(countryname) FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY contid, continent
natsql:
select _ , _ , count ( _ ) from _ group by _ | select continents.contid , continents.continent , count ( countries.countryname ) from continents join countries on continents.contid = countries.continent group by continents.contid, continents.continent

SQL:
SELECT contid ,  continent , count(countryname) FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY contid, continent
self correction:
SELECT contid, continent, COUNT(countryname) AS num_countries FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY contid, continent

index is 90
SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;
For each continent, list its id, name, and how many countries it has?
schema_links:
For each continent, list its id, name, and how many countries it has? | continents : continents.continent , continents.contid , continents.* | countries : countries.continent , countries.countryname , countries.countryid , countries.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql and SQL generation:
select _ , _ , count ( _ ) from _ group by _ | select continents.contid , continents.continent , count ( countries.countryname ) from continents join countries on continents.contid = countries.continent group by continents.contid , continents.continent
SQL = SELECT contid , continent , count(countryname) FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY contid , continent
natsql:
select _ , _ , count ( _ ) from _ group by _ | select continents.contid , continents.continent , count ( countries.countryname ) from continents join countries on continents.contid = countries.continent group by continents.contid , continents.continent

SQL:
SELECT contid , continent , count(countryname) FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY contid , continent
self correction:
SELECT contid, continent, COUNT(countryname) AS country_count FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY contid, continent

index is 91
SELECT count(*) FROM COUNTRIES;
How many countries are listed?
schema_links:
How many countries are listed? | countries : countries.countryname , countries.countryid , countries.continent , countries.* | continents : continents.continent , continents.contid , continents.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct countries.countryname ) from countries
SQL = SELECT count(DISTINCT countryname) FROM countries
natsql:
select count ( distinct _ ) from _ | select count ( distinct countries.countryname ) from countries

SQL:
SELECT count(DISTINCT countryname) FROM countries
self correction:
SELECT COUNT(DISTINCT CountryName) FROM countries

index is 92
SELECT count(*) FROM COUNTRIES;
How many countries exist?
schema_links:
How many countries exist? | countries : countries.countryname , countries.countryid , countries.continent , countries.* | continents : continents.continent , continents.contid , continents.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct countries.countryname ) from countries
SQL = SELECT count(DISTINCT countryname) FROM countries
natsql:
select count ( distinct _ ) from _ | select count ( distinct countries.countryname ) from countries

SQL:
SELECT count(DISTINCT countryname) FROM countries
self correction:
SELECT COUNT(DISTINCT CountryName) AS CountryCount FROM countries

index is 93
SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;
How many models does each car maker produce? List maker full name, id and the number.
schema_links:
How many models does each car maker produce? List maker full name, id and the number. | car_makers : car_makers.fullname , car_makers.id , car_makers.maker , car_makers.country , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql and SQL generation:
select _ , _ , count ( _ ) from _ group by _ | select car_makers.fullname , car_makers.id , count ( model_list.modelid ) from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.fullname , car_makers.id
SQL = SELECT car_makers.fullname ,  car_makers.id ,  count(model_list.modelid) FROM car_makers JOIN model_list ON car_makers.id  =  model_list.maker GROUP BY car_makers.fullname ,  car_makers.id
natsql:
select _ , _ , count ( _ ) from _ group by _ | select car_makers.fullname , car_makers.id , count ( model_list.modelid ) from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.fullname , car_makers.id

SQL:
SELECT car_makers.fullname ,  car_makers.id ,  count(model_list.modelid) FROM car_makers JOIN model_list ON car_makers.id  =  model_list.maker GROUP BY car_makers.fullname ,  car_makers.id
self correction:
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.ModelId) AS ModelCount FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id

index is 94
SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;
What is the full name of each car maker, along with its id and how many models it produces?
schema_links:
What is the full name of each car maker, along with its id and how many models it produces? | car_makers : car_makers.fullname , car_makers.id , car_makers.maker , car_makers.country , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.makeid , car_names.model , car_names.make , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql and SQL generation:
select _ , _ , count ( _ ) from _ group by _ | select car_makers.fullname , car_makers.id , count ( model_list.* ) from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.fullname , car_makers.id
SQL = SELECT fullname ,  id , COUNT(*) FROM car_makers JOIN model_list ON car_makers.id  =  model_list.maker GROUP BY fullname ,  id
natsql:
select _ , _ , count ( _ ) from _ group by _ | select car_makers.fullname , car_makers.id , count ( model_list.* ) from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.fullname , car_makers.id

SQL:
SELECT fullname ,  id , COUNT(*) FROM car_makers JOIN model_list ON car_makers.id  =  model_list.maker GROUP BY fullname ,  id
self correction:
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.ModelId) AS ModelCount FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id

index is 95
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;
Which model of the car has the minimum horsepower?
schema_links:
Which model of the car has the minimum horsepower? | cars_data : cars_data.horsepower , cars_data.id , cars_data.weight , cars_data.cylinders , cars_data.accelerate , cars_data.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select _ from _ where @.@ = min ( _ ) | select car_names.model from cars_data where @.@ = min ( cars_data.horsepower )
SQL = SELECT T3.model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.id  =  T2.makeid JOIN model_list AS T3 ON T2.model  =  T3.model WHERE T1.horsepower  =  (SELECT min(horsepower) FROM cars_data)
natsql:
select _ from _ where @.@ = min ( _ ) | select car_names.model from cars_data where @.@ = min ( cars_data.horsepower )

SQL:
SELECT T3.model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.id  =  T2.makeid JOIN model_list AS T3 ON T2.model  =  T3.model WHERE T1.horsepower  =  (SELECT min(horsepower) FROM cars_data)
self correction:
SELECT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model WHERE T1.Horsepower = (   SELECT MIN(Horsepower)   FROM cars_data )

index is 96
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;
What is the model of the car with the smallest amount of horsepower?
schema_links:
What is the model of the car with the smallest amount of horsepower? | cars_data : cars_data.horsepower , cars_data.id , cars_data.cylinders , cars_data.weight , cars_data.accelerate , cars_data.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select _ from _ order by _ limit _ | select model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model order by cars_data.horsepower limit 1
SQL = SELECT model FROM cars_data JOIN car_names ON cars_data.id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model ORDER BY cars_data.Horsepower LIMIT 1
natsql:
select _ from _ order by _ limit _ | select model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model order by cars_data.horsepower limit 1

SQL:
SELECT model FROM cars_data JOIN car_names ON cars_data.id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model ORDER BY cars_data.Horsepower LIMIT 1
self correction:
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model ORDER BY cars_data.Horsepower ASC LIMIT 1

index is 97
SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)
Find the model of the car whose weight is below the average weight.
schema_links:
Find the model of the car whose weight is below the average weight. | cars_data : cars_data.weight , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.accelerate , cars_data.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select _ from _ where @.@ < avg ( _ ) | select car_names.model from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.weight < (select avg(weight) from cars_data)
SQL = SELECT model FROM car_names WHERE MakeId IN (SELECT id FROM cars_data WHERE weight < (SELECT avg(weight) FROM cars_data))
natsql:
select _ from _ where @.@ < avg ( _ ) | select car_names.model from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.weight < (select avg(weight) from cars_data)

SQL:
SELECT model FROM car_names WHERE MakeId IN (SELECT id FROM cars_data WHERE weight < (SELECT avg(weight) FROM cars_data))
self correction:
SELECT car_names.Model FROM car_names WHERE car_names.MakeId IN (     SELECT cars_data.Id     FROM cars_data     WHERE cars_data.Weight < (         SELECT AVG(cars_data.Weight)         FROM cars_data     ) )

index is 98
SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)
What is the model for the car with a weight smaller than the average?
schema_links:
What is the model for the car with a weight smaller than the average? | cars_data : cars_data.weight , cars_data.id , cars_data.year , cars_data.mpg , cars_data.cylinders , cars_data.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.country , car_makers.id , car_makers.fullname , car_makers.*
natsql and SQL generation:
select _ from _ where @.@ < avg ( _ ) | select model_list.model from cars_data where @.@ < avg ( cars_data.weight )
SQL = SELECT model FROM cars_data WHERE weight  <  (SELECT avg(weight) FROM cars_data)
natsql:
select _ from _ where @.@ < avg ( _ ) | select model_list.model from cars_data where @.@ < avg ( cars_data.weight )

SQL:
SELECT model FROM cars_data WHERE weight  <  (SELECT avg(weight) FROM cars_data)
self correction:
SELECT model  FROM cars_data  WHERE Weight < (SELECT AVG(Weight) FROM cars_data)

index is 99
SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';
Find the name of the makers that produced some cars in the year of 1970?
schema_links:
Find the name of the makers that produced some cars in the year of 1970? | car_makers : car_makers.fullname , car_makers.maker , car_makers.country , car_makers.id , car_makers.* | cars_data : cars_data.year , cars_data.horsepower , cars_data.weight , cars_data.id , cars_data.cylinders , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*
natsql and SQL generation:
select distinct _ from _ where _ | select distinct car_makers.maker from car_makers join car_names on car_makers.id = car_names.makeid join cars_data on car_names.makeid = cars_data.id where cars_data.year = 1970
SQL = SELECT DISTINCT maker FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = 1970
natsql:
select distinct _ from _ where _ | select distinct car_makers.maker from car_makers join car_names on car_makers.id = car_names.makeid join cars_data on car_names.makeid = cars_data.id where cars_data.year = 1970

SQL:
SELECT DISTINCT maker FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = 1970
self correction:
SELECT DISTINCT car_makers.Maker  FROM car_makers  JOIN car_names ON car_makers.Id = car_names.MakeId  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE cars_data.Year = 1970

index is 100
SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';
What is the name of the different car makers who produced a car in 1970?
schema_links:
What is the name of the different car makers who produced a car in 1970? | car_makers : car_makers.fullname , car_makers.maker , car_makers.country , car_makers.id , car_makers.* | cars_data : cars_data.year , cars_data.horsepower , cars_data.weight , cars_data.id , cars_data.cylinders , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*
natsql and SQL generation:
select distinct _ from _ where _ | select distinct car_makers.maker from car_makers join car_names on car_makers.id = car_names.makeid join cars_data on car_names.makeid = cars_data.id where cars_data.year = 1970
SQL = SELECT DISTINCT maker FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = 1970
natsql:
select distinct _ from _ where _ | select distinct car_makers.maker from car_makers join car_names on car_makers.id = car_names.makeid join cars_data on car_names.makeid = cars_data.id where cars_data.year = 1970

SQL:
SELECT DISTINCT maker FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = 1970
self correction:
SELECT DISTINCT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970

index is 101
SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);
Find the make and production time of the cars that were produced in the earliest year?
schema_links:
Find the make and production time of the cars that were produced in the earliest year? | cars_data : cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql and SQL generation:
select _ , min ( _ ) from _ | select car_names.make , min ( cars_data.year ) from cars_data join car_names on cars_data.id = car_names.makeid group by car_names.make
SQL = SELECT make , MIN(year) FROM car_names JOIN cars_data ON car_names.makeId = cars_data.id GROUP BY make
natsql:
select _ , min ( _ ) from _ | select car_names.make , min ( cars_data.year ) from cars_data join car_names on cars_data.id = car_names.makeid group by car_names.make

SQL:
SELECT make , MIN(year) FROM car_names JOIN cars_data ON car_names.makeId = cars_data.id GROUP BY make
self correction:
SELECT car_names.Make, MIN(cars_data.Year)  FROM car_names  JOIN cars_data ON car_names.MakeId = cars_data.Id  GROUP BY car_names.Make

index is 102
SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);
What is the maker of the carr produced in the earliest year and what year was it?
schema_links:
What is the maker of the carr produced in the earliest year and what year was it? | cars_data : cars_data.year , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.cylinders , cars_data.* | car_makers : car_makers.maker , car_makers.fullname , car_makers.country , car_makers.id , car_makers.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*
natsql and SQL generation:
select _ , _ from _ where @.@ = min ( _ ) | select car_makers.maker , cars_data.year from car_makers join car_names on car_makers.id = car_names.makeid join cars_data on car_names.makeid = cars_data.id where @.@ = min ( cars_data.year )
SQL = SELECT car_makers.maker , cars_data.year FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year  =  (SELECT min(year) FROM cars_data)
natsql:
select _ , _ from _ where @.@ = min ( _ ) | select car_makers.maker , cars_data.year from car_makers join car_names on car_makers.id = car_names.makeid join cars_data on car_names.makeid = cars_data.id where @.@ = min ( cars_data.year )

SQL:
SELECT car_makers.maker , cars_data.year FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year  =  (SELECT min(year) FROM cars_data)
self correction:
SELECT car_makers.Maker, cars_data.Year FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data)

index is 103
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;
Which distinct car models are the produced after 1980?
schema_links:
Which distinct car models are the produced after 1980? | cars_data : cars_data.year , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.cylinders , cars_data.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select distinct _ from _ where _ > _ | select distinct car_names.model from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.year > 1980
SQL = SELECT DISTINCT model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year > 1980
natsql:
select distinct _ from _ where _ > _ | select distinct car_names.model from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.year > 1980

SQL:
SELECT DISTINCT model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year > 1980
self correction:
SELECT DISTINCT car_names.Model  FROM car_names  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE cars_data.Year > 1980

index is 104
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;
What are the different models for the cards produced after 1980?
schema_links:
What are the different models for the cards produced after 1980? | cars_data : cars_data.year , cars_data.id , cars_data.cylinders , cars_data.accelerate , cars_data.horsepower , cars_data.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select distinct _ from _ where _ > _ | select distinct model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model where cars_data.year > 1980
SQL = SELECT DISTINCT model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE cars_data.year > 1980
natsql:
select distinct _ from _ where _ > _ | select distinct model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model where cars_data.year > 1980

SQL:
SELECT DISTINCT model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE cars_data.year > 1980
self correction:
SELECT DISTINCT model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Year > 1980

index is 105
SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;
How many car makers are there in each continents? List the continent name and the count.
schema_links:
How many car makers are there in each continents? List the continent name and the count. | continents : continents.continent , continents.contid , continents.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | countries : countries.continent , countries.countryname , countries.countryid , countries.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select continents.continent , count ( car_makers.maker ) from continents join countries on continents.contid = countries.continent join car_makers on car_makers.country = countries.countryid group by continents.continent
SQL = SELECT continents.continent ,  COUNT(car_makers.maker) FROM continents JOIN countries ON continents.contid  =  countries.continentid JOIN car_makers ON car_makers.country  =  countries.countryid GROUP BY continents.continent
natsql:
select _ , count ( _ ) from _ group by _ | select continents.continent , count ( car_makers.maker ) from continents join countries on continents.contid = countries.continent join car_makers on car_makers.country = countries.countryid group by continents.continent

SQL:
SELECT continents.continent ,  COUNT(car_makers.maker) FROM continents JOIN countries ON continents.contid  =  countries.continentid JOIN car_makers ON car_makers.country  =  countries.countryid GROUP BY continents.continent
self correction:
SELECT continents.Continent, COUNT(DISTINCT car_makers.Id) AS MakerCount FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY continents.ContId, continents.Continent

index is 106
SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;
What is the name of each continent and how many car makers are there in each one?
schema_links:
What is the name of each continent and how many car makers are there in each one? | continents : continents.continent , continents.contid , continents.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | countries : countries.continent , countries.countryname , countries.countryid , countries.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql and SQL generation:
select _ , count ( distinct _ ) from _ group by _ | select continents.continent , count ( distinct car_makers.id ) from continents join countries on continents.contid = countries.continent join car_makers on car_makers.country = countries.countryid group by continents.continent
SQL = SELECT continent , COUNT(DISTINCT car_makers.id) FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY continent
natsql:
select _ , count ( distinct _ ) from _ group by _ | select continents.continent , count ( distinct car_makers.id ) from continents join countries on continents.contid = countries.continent join car_makers on car_makers.country = countries.countryid group by continents.continent

SQL:
SELECT continent , COUNT(DISTINCT car_makers.id) FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY continent
self correction:
SELECT continents.Continent, COUNT(DISTINCT car_makers.Id) AS MakerCount FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY continents.Continent

index is 107
SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;
Which of the countries has the most car makers? List the country name.
schema_links:
Which of the countries has the most car makers? List the country name. | countries : countries.countryname , countries.countryid , countries.continent , countries.* | car_makers : car_makers.country , car_makers.maker , car_makers.id , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select countries.countryname from countries join car_makers on countries.countryid = car_makers.country group by countries.countryname order by count(car_makers.maker) desc limit 1
SQL = SELECT countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countryname ORDER BY count(car_makers.maker) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select countries.countryname from countries join car_makers on countries.countryid = car_makers.country group by countries.countryname order by count(car_makers.maker) desc limit 1

SQL:
SELECT countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countryname ORDER BY count(car_makers.maker) DESC LIMIT 1
self correction:
SELECT countries.CountryName  FROM countries  JOIN car_makers ON countries.CountryId = car_makers.Country  GROUP BY countries.CountryName  ORDER BY COUNT(car_makers.Id) DESC  LIMIT 1

index is 108
SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;
What is the name of the country with the most car makers?
schema_links:
What is the name of the country with the most car makers? | countries : countries.countryname , countries.countryid , countries.continent , countries.* | car_makers : car_makers.country , car_makers.id , car_makers.maker , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | continents : continents.continent , continents.contid , continents.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select countries.countryname from countries group by countries.countryname order by count ( car_makers.maker ) desc limit 1
SQL = SELECT countryname FROM countries GROUP BY countryname ORDER BY count(car_makers.maker) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select countries.countryname from countries group by countries.countryname order by count ( car_makers.maker ) desc limit 1

SQL:
SELECT countryname FROM countries GROUP BY countryname ORDER BY count(car_makers.maker) DESC LIMIT 1
self correction:
SELECT countries.CountryName  FROM countries  JOIN car_makers ON countries.CountryId = car_makers.Country  GROUP BY countries.CountryName  ORDER BY COUNT(car_makers.Maker) DESC  LIMIT 1

index is 109
select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;
How many car models are produced by each maker ? Only list the count and the maker full name .
schema_links:
How many car models are produced by each maker ? Only list the count and the maker full name . | car_makers : car_makers.fullname , car_makers.maker , car_makers.id , car_makers.country , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql and SQL generation:
select count ( _ ) , _ from _ group by _ | select count ( model_list.* ) , car_makers.fullname from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.fullname
SQL = SELECT COUNT(*) , car_makers.fullname FROM car_makers JOIN model_list ON car_makers.id  =  model_list.maker GROUP BY car_makers.fullname
natsql:
select count ( _ ) , _ from _ group by _ | select count ( model_list.* ) , car_makers.fullname from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.fullname

SQL:
SELECT COUNT(*) , car_makers.fullname FROM car_makers JOIN model_list ON car_makers.id  =  model_list.maker GROUP BY car_makers.fullname
self correction:
SELECT COUNT(model_list.ModelId) AS ModelCount, car_makers.FullName  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  GROUP BY car_makers.FullName

index is 110
SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;
What is the number of car models that are produced by each maker and what is the id and full name of each maker?
schema_links:
What is the number of car models that are produced by each maker and what is the id and full name of each maker? | car_makers : car_makers.fullname , car_makers.id , car_makers.maker , car_makers.country , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql and SQL generation:
select count ( _ ) , _ , _ from _ group by _ | select car_makers.id , car_makers.fullname from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id, car_makers.fullname
SQL = SELECT COUNT(T3.model) ,  T1.id ,  T1.fullname FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id  =  T2.maker JOIN car_names AS T3 ON T2.model  =  T3.model GROUP BY T1.id, T1.fullname
natsql:
select count ( _ ) , _ , _ from _ group by _ | select car_makers.id , car_makers.fullname from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id, car_makers.fullname

SQL:
SELECT COUNT(T3.model) ,  T1.id ,  T1.fullname FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id  =  T2.maker JOIN car_names AS T3 ON T2.model  =  T3.model GROUP BY T1.id, T1.fullname
self correction:
SELECT COUNT(T3.model) AS model_count, T1.id, T1.fullname FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T1.id, T1.fullname

index is 111
SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';
What is the accelerate of the car make amc hornet sportabout (sw)?
schema_links:
What is the accelerate of the car make amc hornet sportabout (sw)? | car_names : car_names.make ( amc hornet , amc hornet sportabout (sw) ) , car_names.model ( amc ) , car_names.makeid , car_names.* | cars_data : cars_data.accelerate , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.* | car_makers : car_makers.maker ( amc ) , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.model ( amc ) , model_list.maker , model_list.modelid , model_list.*
natsql and SQL generation:
select _ from _ where _ = _ | select cars_data.accelerate from car_names, cars_data, car_makers, model_list where car_names.make = 'amc hornet' and car_names.model = 'amc hornet sportabout (sw)' and car_names.makeid = cars_data.id and car_names.makeid = model_list.modelid and car_makers.maker = 'amc' and model_list.maker = car_makers.id
SQL = SELECT cars_data.accelerate FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id JOIN model_list ON car_names.makeid = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id WHERE car_names.make = 'amc hornet' AND car_names.model = 'amc hornet sportabout (sw)' AND car_makers.maker = 'amc'
natsql:
select _ from _ where _ = _ | select cars_data.accelerate from car_names, cars_data, car_makers, model_list where car_names.make = 'amc hornet' and car_names.model = 'amc hornet sportabout (sw)' and car_names.makeid = cars_data.id and car_names.makeid = model_list.modelid and car_makers.maker = 'amc' and model_list.maker = car_makers.id

SQL:
SELECT cars_data.accelerate FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id JOIN model_list ON car_names.makeid = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id WHERE car_names.make = 'amc hornet' AND car_names.model = 'amc hornet sportabout (sw)' AND car_makers.maker = 'amc'
self correction:
SELECT cars_data.Accelerate FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id JOIN model_list ON car_names.Model = model_list.ModelId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_names.Make = 'amc hornet' AND car_names.Model = 'amc hornet sportabout (sw)' AND car_makers.Maker = 'amc'

index is 112
SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';
How much does the car accelerate that makes amc hornet sportabout (sw)?
schema_links:
How much does the car accelerate that makes amc hornet sportabout (sw)? | car_names : car_names.make ( amc hornet , amc hornet sportabout (sw) ) , car_names.model ( amc ) , car_names.makeid , car_names.* | cars_data : cars_data.accelerate , cars_data.horsepower , cars_data.id , cars_data.cylinders , cars_data.weight , cars_data.* | car_makers : car_makers.maker ( amc ) , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.model ( amc ) , model_list.maker , model_list.modelid , model_list.*
natsql and SQL generation:
select _ from _ where _ = 'amc hornet sportabout (sw)' | select cars_data.accelerate from cars_data join car_names on cars_data.id = car_names.makeid where car_names.make = 'amc hornet' and car_names.model = 'amc hornet sportabout (sw)'
SQL = SELECT accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.make = 'amc hornet' AND car_names.model = 'amc hornet sportabout (sw)'
natsql:
select _ from _ where _ = 'amc hornet sportabout (sw)' | select cars_data.accelerate from cars_data join car_names on cars_data.id = car_names.makeid where car_names.make = 'amc hornet' and car_names.model = 'amc hornet sportabout (sw)'

SQL:
SELECT accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.make = 'amc hornet' AND car_names.model = 'amc hornet sportabout (sw)'
self correction:
SELECT cars_data.Accelerate  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.FullName = 'amc'  AND car_names.Model = 'amc hornet sportabout (sw)'

index is 113
SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';
How many car makers are there in france?
schema_links:
How many car makers are there in france? | countries : countries.countryname ( france ) , countries.countryid , countries.continent , countries.* | car_makers : car_makers.country , car_makers.maker , car_makers.id , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | continents : continents.continent , continents.contid , continents.*
natsql and SQL generation:
select count ( distinct _ ) from _ where @.@ = _ | select count ( distinct car_makers.maker ) from car_makers where car_makers.country = (select countryid from countries where countryname = 'france')
SQL = SELECT count(DISTINCT maker) FROM car_makers WHERE country = (SELECT countryid FROM countries WHERE countryname = 'france')
natsql:
select count ( distinct _ ) from _ where @.@ = _ | select count ( distinct car_makers.maker ) from car_makers where car_makers.country = (select countryid from countries where countryname = 'france')

SQL:
SELECT count(DISTINCT maker) FROM car_makers WHERE country = (SELECT countryid FROM countries WHERE countryname = 'france')
self correction:
SELECT count(DISTINCT Maker) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'france')

index is 114
SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';
What is the number of makers of care in France?
schema_links:
What is the number of makers of care in France? | countries : countries.countryname ( france ) , countries.countryid , countries.continent , countries.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*
natsql and SQL generation:
select count ( distinct @.@ ) from @ where @.@ = @.@  | select count ( distinct car_makers.maker ) from car_makers where car_makers.country = ( select countries.countryid from countries where countries.countryname = 'France' )
SQL = SELECT COUNT(DISTINCT maker) FROM car_makers WHERE country = (SELECT countryid FROM countries WHERE countryname = 'France')
natsql:
select count ( distinct @.@ ) from @ where @.@ = @.@  | select count ( distinct car_makers.maker ) from car_makers where car_makers.country = ( select countries.countryid from countries where countries.countryname = 'France' )

SQL:
SELECT COUNT(DISTINCT maker) FROM car_makers WHERE country = (SELECT countryid FROM countries WHERE countryname = 'France')
self correction:
SELECT COUNT(DISTINCT Maker)  FROM car_makers  WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France')

index is 115
SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';
How many car models are produced in the usa?
schema_links:
How many car models are produced in the usa? | countries : countries.countryname ( usa ) , countries.countryid , countries.continent , countries.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select count ( distinct _ ) from _ where @.@ = _ | select count ( distinct model_list.modelid ) from countries, model_list, car_names, car_makers where countries.countryname = 'usa' and countries.countryid = car_makers.country and car_makers.id = model_list.maker and model_list.modelid = car_names.makeid
SQL = SELECT count(DISTINCT model_list.modelid) FROM countries JOIN car_makers ON countries.countryid = car_makers.country JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.makeid WHERE countries.countryname = 'usa'
natsql:
select count ( distinct _ ) from _ where @.@ = _ | select count ( distinct model_list.modelid ) from countries, model_list, car_names, car_makers where countries.countryname = 'usa' and countries.countryid = car_makers.country and car_makers.id = model_list.maker and model_list.modelid = car_names.makeid

SQL:
SELECT count(DISTINCT model_list.modelid) FROM countries JOIN car_makers ON countries.countryid = car_makers.country JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.modelid = car_names.makeid WHERE countries.countryname = 'usa'
self correction:
SELECT count(DISTINCT car_names.ModelId)  FROM countries  JOIN car_makers ON countries.CountryId = car_makers.Country  JOIN model_list ON car_makers.Id = model_list.Maker  JOIN car_names ON model_list.ModelId = car_names.MakeId  WHERE countries.CountryName = 'usa'

index is 116
SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';
What is the count of the car models produced in the United States?
schema_links:
What is the count of the car models produced in the United States? | countries : countries.countryname , countries.countryid , countries.continent , countries.* | car_makers : car_makers.country , car_makers.id , car_makers.maker , car_makers.fullname , car_makers.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql and SQL generation:
select count ( _ ) from _ where @.@ = _ | select count ( model_list.* ) from model_list join car_makers on model_list.maker = car_makers.id join countries on car_makers.country = countries.countryid where countries.countryname = 'United States'
SQL = SELECT count(*) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'United States'
natsql:
select count ( _ ) from _ where @.@ = _ | select count ( model_list.* ) from model_list join car_makers on model_list.maker = car_makers.id join countries on car_makers.country = countries.countryid where countries.countryname = 'United States'

SQL:
SELECT count(*) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'United States'
self correction:
SELECT count(DISTINCT model_list.ModelId) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'United States'

index is 117
SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;
What is the average miles per gallon(mpg) of the cars with 4 cylinders?
schema_links:
What is the average miles per gallon(mpg) of the cars with 4 cylinders? | cars_data : cars_data.mpg , cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql and SQL generation:
select avg ( _ ) from _ where @.@ = _ | select avg ( cars_data.mpg ) from cars_data where cars_data.cylinders = 4
SQL = SELECT avg(mpg) FROM cars_data WHERE cylinders  =  4
natsql:
select avg ( _ ) from _ where @.@ = _ | select avg ( cars_data.mpg ) from cars_data where cars_data.cylinders = 4

SQL:
SELECT avg(mpg) FROM cars_data WHERE cylinders  =  4
self correction:
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4

index is 118
SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;
What is the average miles per gallon of all the cards with 4 cylinders?
schema_links:
What is the average miles per gallon of all the cards with 4 cylinders? | cars_data : cars_data.mpg , cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql and SQL generation:
select avg ( _ ) from _ where _ | select avg ( cars_data.mpg ) from cars_data where cars_data.cylinders = 4
SQL = SELECT avg(MPG) FROM cars_data WHERE Cylinders = 4
natsql:
select avg ( _ ) from _ where _ | select avg ( cars_data.mpg ) from cars_data where cars_data.cylinders = 4

SQL:
SELECT avg(MPG) FROM cars_data WHERE Cylinders = 4
self correction:
SELECT avg(MPG) FROM cars_data WHERE Cylinders = 4

index is 119
select min(weight) from cars_data where cylinders  =  8 and year  =  1974
What is the smallest weight of the car produced with 8 cylinders on 1974 ?
schema_links:
What is the smallest weight of the car produced with 8 cylinders on 1974 ? | cars_data : cars_data.weight , cars_data.cylinders , cars_data.year , cars_data.id , cars_data.horsepower , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.id , car_makers.fullname , car_makers.country , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql and SQL generation:
select min ( _ ) from _ where @.@ = _ | select min ( cars_data.weight ) from cars_data where cars_data.cylinders = 8 and cars_data.year = 1974
SQL = SELECT min(weight) FROM cars_data WHERE cylinders  =  8 AND year  =  1974
natsql:
select min ( _ ) from _ where @.@ = _ | select min ( cars_data.weight ) from cars_data where cars_data.cylinders = 8 and cars_data.year = 1974

SQL:
SELECT min(weight) FROM cars_data WHERE cylinders  =  8 AND year  =  1974
self correction:
SELECT min(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974

index is 120
select min(weight) from cars_data where cylinders  =  8 and year  =  1974
What is the minimum weight of the car with 8 cylinders produced in 1974 ?
schema_links:
What is the minimum weight of the car with 8 cylinders produced in 1974 ? | cars_data : cars_data.cylinders , cars_data.weight , cars_data.year , cars_data.id , cars_data.horsepower , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql and SQL generation:
select min ( _ ) from _ where @.@ = _ | select min ( cars_data.weight ) from cars_data where cars_data.cylinders = 8 and cars_data.year = 1974
SQL = SELECT min(weight) FROM cars_data WHERE cylinders  =  8 AND year  =  1974
natsql:
select min ( _ ) from _ where @.@ = _ | select min ( cars_data.weight ) from cars_data where cars_data.cylinders = 8 and cars_data.year = 1974

SQL:
SELECT min(weight) FROM cars_data WHERE cylinders  =  8 AND year  =  1974
self correction:
SELECT min(cars_data.Weight)  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 8  AND cars_data.Year = 1974

index is 121
SELECT Maker ,  Model FROM MODEL_LIST;
What are all the makers and models?
schema_links:
What are all the makers and models? | car_makers : car_makers.maker , car_makers.fullname , car_makers.country , car_makers.id , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql and SQL generation:
select _ , _ from _ | select car_makers.maker , car_names.model from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.modelid = car_names.makeid
SQL = SELECT maker ,  model FROM car_makers JOIN model_list ON car_makers.id  =  model_list.maker JOIN car_names ON model_list.modelid  =  car_names.makeid
natsql:
select _ , _ from _ | select car_makers.maker , car_names.model from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.modelid = car_names.makeid

SQL:
SELECT maker ,  model FROM car_makers JOIN model_list ON car_makers.id  =  model_list.maker JOIN car_names ON model_list.modelid  =  car_names.makeid
self correction:
SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId

index is 122
SELECT Maker ,  Model FROM MODEL_LIST;
What are the makers and models?
schema_links:
What are the makers and models? | car_makers : car_makers.maker , car_makers.country , car_makers.fullname , car_makers.id , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | countries : countries.countryname , countries.continent , countries.countryid , countries.*
natsql and SQL generation:
select _ , _ from _ | select car_makers.maker , car_names.model from car_makers , model_list , car_names
SQL = SELECT car_makers.maker , car_names.model FROM car_makers JOIN model_list ON car_makers.id  =  model_list.maker JOIN car_names ON model_list.modelid  =  car_names.makeid
natsql:
select _ , _ from _ | select car_makers.maker , car_names.model from car_makers , model_list , car_names

SQL:
SELECT car_makers.maker , car_names.model FROM car_makers JOIN model_list ON car_makers.id  =  model_list.maker JOIN car_names ON model_list.modelid  =  car_names.makeid
self correction:
SELECT car_makers.Maker, car_names.Model  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  JOIN car_names ON model_list.ModelId = car_names.MakeId

index is 123
SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;
What are the countries having at least one car maker? List name and id.
schema_links:
What are the countries having at least one car maker? List name and id. | countries : countries.countryname , countries.countryid , countries.continent , countries.* | car_makers : car_makers.maker , car_makers.country , car_makers.id , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql and SQL generation:
select _ , _ from _ where exists ( select _ from _ where _._ = _._ ) | select countries.countryname , countries.countryid from countries where exists ( select car_makers.id from car_makers where car_makers.country = countries.countryid )
SQL = SELECT countryname ,  countryid FROM countries WHERE EXISTS (SELECT id FROM car_makers WHERE country  =  countryid)
natsql:
select _ , _ from _ where exists ( select _ from _ where _._ = _._ ) | select countries.countryname , countries.countryid from countries where exists ( select car_makers.id from car_makers where car_makers.country = countries.countryid )

SQL:
SELECT countryname ,  countryid FROM countries WHERE EXISTS (SELECT id FROM car_makers WHERE country  =  countryid)
self correction:
SELECT CountryName, CountryId FROM countries WHERE CountryId IN (SELECT Country FROM car_makers)

index is 124
SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;
What are the names and ids of all countries with at least one car maker?
schema_links:
What are the names and ids of all countries with at least one car maker? | countries : countries.countryid , countries.countryname , countries.continent , countries.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | continents : continents.continent , continents.contid , continents.*
natsql and SQL generation:
select _ , _ from _ where exists ( select _ from _ where @.@ = @.@ ) | select countries.countryname , countries.countryid from countries where exists ( select car_makers.id from car_makers where countries.countryid = car_makers.country )
SQL = SELECT countryname ,  countryid FROM countries WHERE EXISTS (SELECT id FROM car_makers WHERE countries.countryid = car_makers.country)
natsql:
select _ , _ from _ where exists ( select _ from _ where @.@ = @.@ ) | select countries.countryname , countries.countryid from countries where exists ( select car_makers.id from car_makers where countries.countryid = car_makers.country )

SQL:
SELECT countryname ,  countryid FROM countries WHERE EXISTS (SELECT id FROM car_makers WHERE countries.countryid = car_makers.country)
self correction:
SELECT countryname, countryid FROM countries WHERE countryid IN (SELECT DISTINCT country FROM car_makers)

index is 125
SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;
What is the number of the cars with horsepower more than 150?
schema_links:
What is the number of the cars with horsepower more than 150? | cars_data : cars_data.horsepower , cars_data.id , cars_data.cylinders , cars_data.weight , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql and SQL generation:
select count ( * ) from _ where @.@ > _ | select count ( * ) from cars_data where horsepower > 150
SQL = SELECT count(*) FROM cars_data WHERE horsepower  >  150
natsql:
select count ( * ) from _ where @.@ > _ | select count ( * ) from cars_data where horsepower > 150

SQL:
SELECT count(*) FROM cars_data WHERE horsepower  >  150
self correction:
SELECT count(*) FROM cars_data WHERE Horsepower > 150

index is 126
SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;
What is the number of cars with a horsepower greater than 150?
schema_links:
What is the number of cars with a horsepower greater than 150? | cars_data : cars_data.horsepower , cars_data.id , cars_data.cylinders , cars_data.weight , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql and SQL generation:
select count ( * ) from _ where @.@ > _ | select count(*) from cars_data where cars_data.horsepower > 150
SQL = SELECT count(*) FROM cars_data WHERE horsepower  >  150
natsql:
select count ( * ) from _ where @.@ > _ | select count(*) from cars_data where cars_data.horsepower > 150

SQL:
SELECT count(*) FROM cars_data WHERE horsepower  >  150
self correction:
SELECT count(*) FROM cars_data WHERE Horsepower > 150

index is 127
SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;
What is the average weight of cars each year?
schema_links:
What is the average weight of cars each year? | cars_data : cars_data.weight , cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql and SQL generation:
select _ , avg ( _ ) from _ group by _ | select cars_data.year , avg ( cars_data.weight ) from cars_data group by cars_data.year
SQL = SELECT year , AVG(weight) FROM cars_data GROUP BY year
natsql:
select _ , avg ( _ ) from _ group by _ | select cars_data.year , avg ( cars_data.weight ) from cars_data group by cars_data.year

SQL:
SELECT year , AVG(weight) FROM cars_data GROUP BY year
self correction:
SELECT year, AVG(Weight) AS AverageWeight FROM cars_data GROUP BY year

index is 128
SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;
What is the average weight and year for each year?
schema_links:
What is the average weight and year for each year? | cars_data : cars_data.weight , cars_data.year , cars_data.horsepower , cars_data.id , cars_data.cylinders , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | continents : continents.continent , continents.contid , continents.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select avg ( _ ) , _ from _ group by _ | select avg ( cars_data.weight ) , cars_data.year from cars_data group by cars_data.year
SQL = SELECT AVG(weight) ,  year FROM cars_data GROUP BY year
natsql:
select avg ( _ ) , _ from _ group by _ | select avg ( cars_data.weight ) , cars_data.year from cars_data group by cars_data.year

SQL:
SELECT AVG(weight) ,  year FROM cars_data GROUP BY year
self correction:
SELECT AVG(Weight), Year FROM cars_data GROUP BY Year

index is 129
SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;
Which countries in europe have at least 3 car manufacturers?
schema_links:
Which countries in europe have at least 3 car manufacturers? | continents : continents.continent ( europe ) , continents.contid , continents.* | countries : countries.countryname , countries.countryid , countries.continent , countries.* | car_makers : car_makers.id , car_makers.country , car_makers.maker , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql and SQL generation:
select _ from _ where @.@ = _ and count ( distinct _ ) >= _ group by _ | select countries.countryname from countries , car_makers where countries.continent = 'Europe' and count ( distinct car_makers.maker ) >= 3 group by countries.countryname
SQL = SELECT countryname FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE continent = 'Europe' GROUP BY countryname HAVING count(DISTINCT car_makers.maker) >= 3
natsql:
select _ from _ where @.@ = _ and count ( distinct _ ) >= _ group by _ | select countries.countryname from countries , car_makers where countries.continent = 'Europe' and count ( distinct car_makers.maker ) >= 3 group by countries.countryname

SQL:
SELECT countryname FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE continent = 'Europe' GROUP BY countryname HAVING count(DISTINCT car_makers.maker) >= 3
self correction:
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'Europe' GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Maker) >= 3

index is 130
SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;
What are the names of all European countries with at least 3 manufacturers?
schema_links:
What are the names of all European countries with at least 3 manufacturers? | countries : countries.countryname , countries.countryid , countries.continent , countries.* | continents : continents.continent ( europe ) , continents.contid , continents.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*
natsql and SQL generation:
select _ from _ where _ >= _ group by _ | select countries.countryname from countries join car_makers on countries.countryid = car_makers.country where countries.continent = 'Europe' group by countries.countryname having count(distinct car_makers.id) >= 3
SQL = SELECT countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Europe' GROUP BY countryname HAVING count(DISTINCT car_makers.id) >= 3
natsql:
select _ from _ where _ >= _ group by _ | select countries.countryname from countries join car_makers on countries.countryid = car_makers.country where countries.continent = 'Europe' group by countries.countryname having count(distinct car_makers.id) >= 3

SQL:
SELECT countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country WHERE countries.continent = 'Europe' GROUP BY countryname HAVING count(DISTINCT car_makers.id) >= 3
self correction:
SELECT countryname  FROM countries  JOIN car_makers ON countries.CountryId = car_makers.Country  WHERE countries.Continent = 'Europe'  GROUP BY countries.CountryId, countries.CountryName  HAVING count(DISTINCT car_makers.Id) >= 3

index is 131
SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;
What is the maximum horsepower and the make of the car models with 3 cylinders?
schema_links:
What is the maximum horsepower and the make of the car models with 3 cylinders? | cars_data : cars_data.cylinders , cars_data.horsepower , cars_data.id , cars_data.weight , cars_data.mpg , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select max ( _ ) , _ from _ where @.@ = _ group by _ | select max ( cars_data.horsepower ) , car_names.make from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.cylinders = 3 group by car_names.make
SQL = SELECT max(horsepower) ,  make FROM cars_data JOIN car_names ON cars_data.id  =  car_names.makeid WHERE cylinders  =  3 GROUP BY make
natsql:
select max ( _ ) , _ from _ where @.@ = _ group by _ | select max ( cars_data.horsepower ) , car_names.make from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.cylinders = 3 group by car_names.make

SQL:
SELECT max(horsepower) ,  make FROM cars_data JOIN car_names ON cars_data.id  =  car_names.makeid WHERE cylinders  =  3 GROUP BY make
self correction:
SELECT MAX(cars_data.Horsepower) AS MaxHorsepower, car_makers.Maker AS Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3 GROUP BY car_makers.Maker

index is 132
SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;
What is the largest amount of horsepower for the models with 3 cylinders and what make is it?
schema_links:
What is the largest amount of horsepower for the models with 3 cylinders and what make is it? | cars_data : cars_data.horsepower , cars_data.cylinders , cars_data.id , cars_data.edispl , cars_data.weight , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select max ( _ ) , @.@ from _ where @.@ = _ group by @.@ | select max ( cars_data.horsepower ) , car_makers.maker from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model join car_makers on model_list.maker = car_makers.id where cars_data.cylinders = 3 group by car_makers.maker
SQL = SELECT max(horsepower) , car_makers.Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cylinders = 3 GROUP BY car_makers.Maker
natsql:
select max ( _ ) , @.@ from _ where @.@ = _ group by @.@ | select max ( cars_data.horsepower ) , car_makers.maker from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model join car_makers on model_list.maker = car_makers.id where cars_data.cylinders = 3 group by car_makers.maker

SQL:
SELECT max(horsepower) , car_makers.Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cylinders = 3 GROUP BY car_makers.Maker
self correction:
SELECT MAX(cars_data.Horsepower) AS MaxHorsepower, car_makers.Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3 GROUP BY car_makers.Maker

index is 133
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;
Which model saves the most gasoline? That is to say, have the maximum miles per gallon.
schema_links:
Which model saves the most gasoline? That is to say, have the maximum miles per gallon. | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | cars_data : cars_data.mpg , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select _ from _ order by _ desc limit _ | select model_list.model from cars_data join model_list on cars_data.id = model_list.modelid order by cars_data.mpg desc limit 1
SQL = SELECT model FROM cars_data JOIN model_list ON cars_data.id = model_list.modelid ORDER BY mpg DESC LIMIT 1
natsql:
select _ from _ order by _ desc limit _ | select model_list.model from cars_data join model_list on cars_data.id = model_list.modelid order by cars_data.mpg desc limit 1

SQL:
SELECT model FROM cars_data JOIN model_list ON cars_data.id = model_list.modelid ORDER BY mpg DESC LIMIT 1
self correction:
SELECT model_list.Model FROM cars_data JOIN model_list ON cars_data.Id = model_list.ModelId ORDER BY cars_data.MPG DESC LIMIT 1

index is 134
select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;
What is the car model with the highest mpg ?
schema_links:
What is the car model with the highest mpg ? | cars_data : cars_data.mpg , cars_data.id , cars_data.cylinders , cars_data.year , cars_data.horsepower , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select _ from _ order by _ desc limit _ | select car_names.model from cars_data join car_names on cars_data.id = car_names.makeid order by cars_data.mpg desc limit 1
SQL = SELECT model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid ORDER BY mpg DESC LIMIT 1
natsql:
select _ from _ order by _ desc limit _ | select car_names.model from cars_data join car_names on cars_data.id = car_names.makeid order by cars_data.mpg desc limit 1

SQL:
SELECT model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid ORDER BY mpg DESC LIMIT 1
self correction:
SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId ORDER BY cars_data.MPG DESC LIMIT 1

index is 135
SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;
What is the average horsepower of the cars before 1980?
schema_links:
What is the average horsepower of the cars before 1980? | cars_data : cars_data.horsepower , cars_data.year , cars_data.id , cars_data.cylinders , cars_data.weight , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql and SQL generation:
select avg ( _ ) from _ where _ | select avg ( cars_data.horsepower ) from cars_data where cars_data.year < 1980
SQL = SELECT AVG(horsepower) FROM cars_data WHERE year < 1980
natsql:
select avg ( _ ) from _ where _ | select avg ( cars_data.horsepower ) from cars_data where cars_data.year < 1980

SQL:
SELECT AVG(horsepower) FROM cars_data WHERE year < 1980
self correction:
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980

index is 136
select avg(horsepower) from cars_data where year  <  1980;
What is the average horsepower for all cars produced before 1980 ?
schema_links:
What is the average horsepower for all cars produced before 1980 ? | cars_data : cars_data.horsepower , cars_data.year , cars_data.id , cars_data.cylinders , cars_data.weight , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*
natsql and SQL generation:
select avg ( _ ) from _ where _ < _ | select avg ( cars_data.horsepower ) from cars_data where cars_data.year < 1980
SQL = SELECT avg(horsepower) FROM cars_data WHERE year  <  1980
natsql:
select avg ( _ ) from _ where _ < _ | select avg ( cars_data.horsepower ) from cars_data where cars_data.year < 1980

SQL:
SELECT avg(horsepower) FROM cars_data WHERE year  <  1980
self correction:
SELECT avg(Horsepower) FROM cars_data WHERE Year < 1980

index is 137
SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';
What is the average edispl of the cars of model volvo?
schema_links:
What is the average edispl of the cars of model volvo? | model_list : model_list.model ( volvo ) , model_list.maker , model_list.modelid , model_list.* | cars_data : cars_data.edispl , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.* | car_names : car_names.model ( volvo ) , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.maker ( volvo ) , car_makers.fullname ( Volvo ) , car_makers.id , car_makers.country , car_makers.*
natsql and SQL generation:
select avg ( _ ) from _ where _ = _ | select avg ( cars_data.edispl ) from model_list join car_names on model_list.maker = car_names.makeid and model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id where car_names.model = 'volvo'
natsql:
select avg ( _ ) from _ where _ = _ | select avg ( cars_data.edispl ) from model_list join car_names on model_list.maker = car_names.makeid and model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id where car_names.model = 'volvo'
SQL:
SELECT AVG(edispl) FROM model_list 
JOIN car_names ON model_list.Maker = car_names.MakeId AND model_list.Model = car_names.Model 
JOIN cars_data ON car_names.MakeId = cars_data.Id 
WHERE car_names.Model = 'volvo'
self correction:
SELECT AVG(cars_data.Edispl) FROM model_list JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_names.Model = 'volvo'

index is 138
SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';
What is the average edispl for all volvos?
schema_links:
What is the average edispl for all volvos? | cars_data : cars_data.edispl , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.* | car_names : car_names.model ( volvo ) , car_names.make , car_names.makeid , car_names.* | model_list : model_list.model ( volvo ) , model_list.maker , model_list.modelid , model_list.* | car_makers : car_makers.maker ( volvo ) , car_makers.id , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select avg ( cars_data.edispl ) from cars_data where cars_data.id in ( select car_names.makeid from car_names where car_names.model = 'volvo' )
SQL = SELECT AVG(edispl) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'volvo')
natsql:
select avg ( cars_data.edispl ) from cars_data where cars_data.id in ( select car_names.makeid from car_names where car_names.model = 'volvo' )

SQL:
SELECT AVG(edispl) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'volvo')
self correction:
SELECT AVG(Edispl) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'volvo')

index is 139
SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;
What is the maximum accelerate for different number of cylinders?
schema_links:
What is the maximum accelerate for different number of cylinders? | cars_data : cars_data.accelerate , cars_data.cylinders , cars_data.id , cars_data.year , cars_data.horsepower , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | continents : continents.continent , continents.contid , continents.*
natsql and SQL generation:
select max ( _ ) , _ from _ group by _ | select max(cars_data.accelerate) , cars_data.cylinders from cars_data group by cars_data.cylinders
SQL = SELECT MAX(accelerate) , cylinders FROM cars_data GROUP BY cylinders
natsql:
select max ( _ ) , _ from _ group by _ | select max(cars_data.accelerate) , cars_data.cylinders from cars_data group by cars_data.cylinders

SQL:
SELECT MAX(accelerate) , cylinders FROM cars_data GROUP BY cylinders
self correction:
SELECT MAX(Accelerate) AS MaxAccelerate, Cylinders FROM cars_data GROUP BY Cylinders

index is 140
SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;
What is the maximum accelerate for all the different cylinders?
schema_links:
What is the maximum accelerate for all the different cylinders? | cars_data : cars_data.accelerate , cars_data.cylinders , cars_data.year , cars_data.id , cars_data.horsepower , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | continents : continents.continent , continents.contid , continents.*
natsql and SQL generation:
select _ , max ( _ ) from _ group by _ | select cylinders , max ( accelerate ) from cars_data group by cylinders
SQL = SELECT cylinders , MAX(accelerate) FROM cars_data GROUP BY cylinders
natsql:
select _ , max ( _ ) from _ group by _ | select cylinders , max ( accelerate ) from cars_data group by cylinders

SQL:
SELECT cylinders , MAX(accelerate) FROM cars_data GROUP BY cylinders
self correction:
SELECT cylinders, MAX(accelerate) FROM cars_data GROUP BY cylinders

index is 141
SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;
Which model has the most version(make) of cars?
schema_links:
Which model has the most version(make) of cars? | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select model_list.model from model_list group by model_list.model order by count ( model_list.* ) desc limit 1
SQL = SELECT model FROM model_list GROUP BY model ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select model_list.model from model_list group by model_list.model order by count ( model_list.* ) desc limit 1

SQL:
SELECT model FROM model_list GROUP BY model ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT model FROM model_list GROUP BY model ORDER BY COUNT(*) DESC LIMIT 1

index is 142
SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;
What model has the most different versions?
schema_links:
What model has the most different versions? | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql and SQL generation:
select _ from _ group by _ order by count ( distinct _ ) desc limit _ | select model_list.model from model_list group by model_list.model order by count ( distinct model_list.modelid ) desc limit 1
SQL = SELECT model FROM model_list GROUP BY model ORDER BY count(DISTINCT modelid) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( distinct _ ) desc limit _ | select model_list.model from model_list group by model_list.model order by count ( distinct model_list.modelid ) desc limit 1

SQL:
SELECT model FROM model_list GROUP BY model ORDER BY count(DISTINCT modelid) DESC LIMIT 1
self correction:
SELECT model, COUNT(DISTINCT ModelId) AS version_count FROM model_list GROUP BY model ORDER BY version_count DESC LIMIT 1

index is 143
SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;
How many cars have more than 4 cylinders?
schema_links:
How many cars have more than 4 cylinders? | cars_data : cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.*
natsql and SQL generation:
select count ( * ) from _ where _ > _ | select count ( * ) from cars_data where cylinders > 4
SQL = SELECT count(*) FROM cars_data WHERE cylinders  >  4
natsql:
select count ( * ) from _ where _ > _ | select count ( * ) from cars_data where cylinders > 4

SQL:
SELECT count(*) FROM cars_data WHERE cylinders  >  4
self correction:
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4

index is 144
SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;
What is the number of cars with more than 4 cylinders?
schema_links:
What is the number of cars with more than 4 cylinders? | cars_data : cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql and SQL generation:
select count ( _ ) from _ where @.@ > _ | select count (cars_data.id) from cars_data where cars_data.cylinders > 4
SQL = SELECT count(id) FROM cars_data WHERE cylinders  >  4
natsql:
select count ( _ ) from _ where @.@ > _ | select count (cars_data.id) from cars_data where cars_data.cylinders > 4

SQL:
SELECT count(id) FROM cars_data WHERE cylinders  >  4
self correction:
SELECT COUNT(Id) FROM cars_data WHERE Cylinders > 4

index is 145
SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;
how many cars were produced in 1980?
schema_links:
how many cars were produced in 1980? | cars_data : cars_data.year , cars_data.id , cars_data.horsepower , cars_data.cylinders , cars_data.weight , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*
natsql and SQL generation:
select count ( * ) from cars_data where cars_data.year = 1980
SQL = SELECT count(*) FROM cars_data WHERE year  =  1980
natsql:
select count ( * ) from cars_data where cars_data.year = 1980

SQL:
SELECT count(*) FROM cars_data WHERE year  =  1980
self correction:
SELECT count(*) FROM cars_data WHERE Year = 1980

index is 146
SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;
In 1980, how many cars were made?
schema_links:
In 1980, how many cars were made? | cars_data : cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.country , car_makers.id , car_makers.fullname , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*
natsql and SQL generation:
select count ( _ ) from _ where _ = _ | select count ( * ) from cars_data where cars_data.year = 1980
SQL = SELECT count(*) FROM cars_data WHERE year = 1980
natsql:
select count ( _ ) from _ where _ = _ | select count ( * ) from cars_data where cars_data.year = 1980

SQL:
SELECT count(*) FROM cars_data WHERE year = 1980
self correction:
SELECT count(*) FROM cars_data WHERE Year = 1980

index is 147
SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';
How many car models were produced by the maker with full name American Motor Company?
schema_links:
How many car models were produced by the maker with full name American Motor Company? | car_makers : car_makers.fullname ( American Motor Company ) , car_makers.maker , car_makers.id , car_makers.country , car_makers.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | continents : continents.continent ( america ) , continents.contid , continents.*
natsql and SQL generation:
select count ( distinct _ ) from _ where @.@ = _ | select count ( distinct model_list.modelid ) from car_makers join model_list on car_makers.id = model_list.maker where car_makers.fullname = 'American Motor Company'
SQL = SELECT COUNT(DISTINCT modelid) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker WHERE car_makers.fullname = 'American Motor Company'
natsql:
select count ( distinct _ ) from _ where @.@ = _ | select count ( distinct model_list.modelid ) from car_makers join model_list on car_makers.id = model_list.maker where car_makers.fullname = 'American Motor Company'

SQL:
SELECT COUNT(DISTINCT modelid) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker WHERE car_makers.fullname = 'American Motor Company'
self correction:
SELECT COUNT(DISTINCT model_list.ModelId)  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  WHERE car_makers.FullName = 'American Motor Company'

index is 148
SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';
What is the number of car models created by the car maker American Motor Company?
schema_links:
What is the number of car models created by the car maker American Motor Company? | car_makers : car_makers.fullname ( American Motor Company ) , car_makers.maker , car_makers.country , car_makers.id , car_makers.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | continents : continents.continent ( america ) , continents.contid , continents.*
natsql and SQL generation:
select count ( _ ) from _ where _ = _ | select count ( model_list.model ) from model_list where model_list.maker = ( select car_makers.id from car_makers where car_makers.fullname = 'American Motor Company' )
SQL = SELECT count(model) FROM model_list WHERE maker = (SELECT id FROM car_makers WHERE fullname = 'American Motor Company')
natsql:
select count ( _ ) from _ where _ = _ | select count ( model_list.model ) from model_list where model_list.maker = ( select car_makers.id from car_makers where car_makers.fullname = 'American Motor Company' )

SQL:
SELECT count(model) FROM model_list WHERE maker = (SELECT id FROM car_makers WHERE fullname = 'American Motor Company')
self correction:
SELECT COUNT(DISTINCT model) FROM model_list WHERE maker = (SELECT Id FROM car_makers WHERE FullName = 'American Motor Company')

index is 149
SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;
Which makers designed more than 3 car models? List full name and the id.
schema_links:
Which makers designed more than 3 car models? List full name and the id. | car_makers : car_makers.fullname , car_makers.id , car_makers.maker , car_makers.country , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.* | car_names : car_names.model , car_names.makeid , car_names.make , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ having count ( _ ) > _ | select car_makers.fullname , car_makers.id from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id , car_makers.fullname having count ( model_list.modelid ) > 3
SQL = SELECT fullname ,  id FROM car_makers JOIN model_list ON car_makers.id  =  model_list.maker GROUP BY id ,  fullname HAVING count(model_list.modelid)  >  3
natsql:
select _ , count ( _ ) from _ group by _ having count ( _ ) > _ | select car_makers.fullname , car_makers.id from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id , car_makers.fullname having count ( model_list.modelid ) > 3

SQL:
SELECT fullname ,  id FROM car_makers JOIN model_list ON car_makers.id  =  model_list.maker GROUP BY id ,  fullname HAVING count(model_list.modelid)  >  3
self correction:
SELECT fullname, id  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  GROUP BY fullname, id  HAVING COUNT(model_list.ModelId) > 3

index is 150
SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;
What are the names and ids of all makers with more than 3 models?
schema_links:
What are the names and ids of all makers with more than 3 models? | car_makers : car_makers.maker , car_makers.fullname , car_makers.id , car_makers.country , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | continents : continents.continent , continents.contid , continents.*
natsql and SQL generation:
select _ , _ from _ where count ( _ ) > _ group by _ | select car_makers.maker , car_makers.id from car_makers where count ( car_makers.* ) > 3 group by car_makers.maker , car_makers.id
SQL = SELECT maker , id FROM car_makers GROUP BY maker, id HAVING count(*)  >  3
natsql:
select _ , _ from _ where count ( _ ) > _ group by _ | select car_makers.maker , car_makers.id from car_makers where count ( car_makers.* ) > 3 group by car_makers.maker , car_makers.id

SQL:
SELECT maker , id FROM car_makers GROUP BY maker, id HAVING count(*)  >  3
self correction:
SELECT car_makers.Maker, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker, car_makers.Id HAVING COUNT(*) > 3

index is 151
SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;
Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?
schema_links:
Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500? | car_makers : car_makers.fullname ( General Motors ) , car_makers.maker , car_makers.id , car_makers.country , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | cars_data : cars_data.weight , cars_data.cylinders , cars_data.id , cars_data.mpg , cars_data.horsepower , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql and SQL generation:
select distinct _ from _ where @.@ = _ or @.@ > _ | select distinct model_list.model from model_list where car_makers.fullname = 'General Motors' or cars_data.weight > 3500
SQL = SELECT DISTINCT T2.model FROM model_list AS T2 JOIN car_names AS T1 ON T2.model  =  T1.model JOIN car_makers AS T3 ON T1.makeid  =  T3.id JOIN cars_data AS T4 ON T1.makeid  =  T4.id WHERE T3.fullname  =  'General Motors' OR T4.weight  >  3500
natsql:
select distinct _ from _ where @.@ = _ or @.@ > _ | select distinct model_list.model from model_list where car_makers.fullname = 'General Motors' or cars_data.weight > 3500

SQL:
SELECT DISTINCT T2.model FROM model_list AS T2 JOIN car_names AS T1 ON T2.model  =  T1.model JOIN car_makers AS T3 ON T1.makeid  =  T3.id JOIN cars_data AS T4 ON T1.makeid  =  T4.id WHERE T3.fullname  =  'General Motors' OR T4.weight  >  3500
self correction:
SELECT DISTINCT T2.Model  FROM model_list AS T2  JOIN car_names AS T1 ON T2.Model = T1.Model  JOIN car_makers AS T3 ON T1.MakeId = T3.Id  JOIN cars_data AS T4 ON T1.MakeId = T4.Id  WHERE T3.FullName = 'General Motors' OR T4.Weight > 3500

index is 152
SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;
What are the different models created by either the car maker General Motors or weighed more than 3500?
schema_links:
What are the different models created by either the car maker General Motors or weighed more than 3500? | car_makers : car_makers.fullname ( General Motors ) , car_makers.maker , car_makers.country , car_makers.id , car_makers.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | cars_data : cars_data.weight , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql and SQL generation:
select _ from _ where _ or _ > _ | select model_list.model from model_list where car_makers.maker = 'General Motors' or cars_data.weight > 3500 group by model_list.model
SQL = SELECT model FROM model_list JOIN car_makers ON model_list.maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.ModelId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500 GROUP BY model
natsql:
select _ from _ where _ or _ > _ | select model_list.model from model_list where car_makers.maker = 'General Motors' or cars_data.weight > 3500 group by model_list.model

SQL:
SELECT model FROM model_list JOIN car_makers ON model_list.maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.ModelId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500 GROUP BY model
self correction:
SELECT model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500 GROUP BY model

index is 153
select distinct year from cars_data where weight between 3000 and 4000;
In which years cars were produced weighing no less than 3000 and no more than 4000 ?
schema_links:
In which years cars were produced weighing no less than 3000 and no more than 4000 ? | cars_data : cars_data.weight , cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql and SQL generation:
select distinct _ from _ where _ >= _ and _ <= _ | select distinct cars_data.year from cars_data where cars_data.weight >= 3000 and cars_data.weight <= 4000
SQL = SELECT DISTINCT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000
natsql:
select distinct _ from _ where _ >= _ and _ <= _ | select distinct cars_data.year from cars_data where cars_data.weight >= 3000 and cars_data.weight <= 4000

SQL:
SELECT DISTINCT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000
self correction:
SELECT cars_data.Year  FROM cars_data  WHERE cars_data.Weight >= 3000 AND cars_data.Weight <= 4000

index is 154
select distinct year from cars_data where weight between 3000 and 4000;
What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?
schema_links:
What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ? | cars_data : cars_data.weight , cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*
natsql and SQL generation:
select distinct _ from _ where ( _ < _ and _ > _ ) | select distinct cars_data.year from cars_data where ( cars_data.weight < 4000 and cars_data.weight > 3000 )
SQL = SELECT DISTINCT year FROM cars_data WHERE (weight  <  4000 AND weight  >  3000)
natsql:
select distinct _ from _ where ( _ < _ and _ > _ ) | select distinct cars_data.year from cars_data where ( cars_data.weight < 4000 and cars_data.weight > 3000 )

SQL:
SELECT DISTINCT year FROM cars_data WHERE (weight  <  4000 AND weight  >  3000)
self correction:
SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 OR Weight > 3000

index is 155
SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;
What is the horsepower of the car with the largest accelerate?
schema_links:
What is the horsepower of the car with the largest accelerate? | cars_data : cars_data.horsepower , cars_data.accelerate , cars_data.id , cars_data.weight , cars_data.year , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*
natsql and SQL generation:
select _ from _ where @.@ = max ( _ ) | select cars_data.horsepower from cars_data where @.@ = max ( cars_data.accelerate )
SQL = SELECT horsepower FROM cars_data WHERE accelerate  =  (SELECT max(accelerate) FROM cars_data)
natsql:
select _ from _ where @.@ = max ( _ ) | select cars_data.horsepower from cars_data where @.@ = max ( cars_data.accelerate )

SQL:
SELECT horsepower FROM cars_data WHERE accelerate  =  (SELECT max(accelerate) FROM cars_data)
self correction:
SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Accelerate = (     SELECT MAX(Accelerate)     FROM cars_data )

index is 156
SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;
What is the horsepower of the car with the greatest accelerate?
schema_links:
What is the horsepower of the car with the greatest accelerate? | cars_data : cars_data.accelerate , cars_data.horsepower , cars_data.id , cars_data.year , cars_data.weight , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*
natsql and SQL generation:
select _ from _ where @.@ = max ( _ ) | select cars_data.horsepower from cars_data where @.@ = max ( cars_data.accelerate )
SQL = SELECT horsepower FROM cars_data WHERE accelerate  =  (SELECT max(accelerate) FROM cars_data)
natsql:
select _ from _ where @.@ = max ( _ ) | select cars_data.horsepower from cars_data where @.@ = max ( cars_data.accelerate )

SQL:
SELECT horsepower FROM cars_data WHERE accelerate  =  (SELECT max(accelerate) FROM cars_data)
self correction:
SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Accelerate = (     SELECT MAX(cars_data.Accelerate) FROM cars_data )

index is 157
SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
For model volvo, how many cylinders does the car with the least accelerate have?
schema_links:
For model volvo, how many cylinders does the car with the least accelerate have? | cars_data : cars_data.accelerate , cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.* | model_list : model_list.model ( volvo ) , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model ( volvo ) , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.fullname ( Volvo ) , car_makers.maker ( volvo ) , car_makers.id , car_makers.country , car_makers.*
natsql and SQL generation:
select _ from _ where @.@ = min ( _ ) | select cars_data.cylinders from cars_data where @.@ = min ( cars_data.accelerate ) and car_names.model = 'volvo' 
SQL = SELECT cylinders FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE accelerate  =  (SELECT min(accelerate) FROM cars_data WHERE car_names.model = 'volvo')
natsql:
select _ from _ where @.@ = min ( _ ) | select cars_data.cylinders from cars_data where @.@ = min ( cars_data.accelerate ) and car_names.model = 'volvo' 

SQL:
SELECT cylinders FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE accelerate  =  (SELECT min(accelerate) FROM cars_data WHERE car_names.model = 'volvo')
self correction:
SELECT cylinders FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  WHERE car_names.model = 'volvo'  AND accelerate = (SELECT MIN(accelerate) FROM cars_data WHERE car_names.model = 'volvo')

index is 158
SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
For a volvo model, how many cylinders does the version with least accelerate have?
schema_links:
For a volvo model, how many cylinders does the version with least accelerate have? | cars_data : cars_data.accelerate , cars_data.cylinders , cars_data.year , cars_data.id , cars_data.horsepower , cars_data.* | model_list : model_list.model ( volvo ) , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.model ( volvo ) , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.fullname ( Volvo ) , car_makers.maker ( volvo ) , car_makers.id , car_makers.country , car_makers.*
natsql and SQL generation:
select _ from _ where _ = _ and _ = min ( _ ) | select cars_data.cylinders from cars_data where model_list.maker = 'volvo' and cars_data.accelerate = min ( cars_data.accelerate )
SQL = SELECT cylinders FROM cars_data WHERE id IN (SELECT MIN(id) FROM cars_data WHERE id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT model FROM model_list WHERE maker = 'volvo')))
natsql:
select _ from _ where _ = _ and _ = min ( _ ) | select cars_data.cylinders from cars_data where model_list.maker = 'volvo' and cars_data.accelerate = min ( cars_data.accelerate )

SQL:
SELECT cylinders FROM cars_data WHERE id IN (SELECT MIN(id) FROM cars_data WHERE id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT model FROM model_list WHERE maker = 'volvo')))
self correction:
SELECT cylinders  FROM cars_data  WHERE id IN (   SELECT MIN(id)    FROM cars_data    WHERE id IN (     SELECT MakeId      FROM car_names      WHERE Model = 'volvo'   ) )  ORDER BY Accelerate  LIMIT 1

index is 159
SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );
How many cars have a larger accelerate than the car with the largest horsepower?
schema_links:
How many cars have a larger accelerate than the car with the largest horsepower? | cars_data : cars_data.accelerate , cars_data.horsepower , cars_data.id , cars_data.weight , cars_data.cylinders , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql and SQL generation:
select count ( _ ) from _ where _ > ( select max ( _ ) from _ ) | select count ( cars_data.* ) from cars_data where cars_data.accelerate > ( select max ( cars_data.horsepower ) from cars_data )
SQL = SELECT count(*) FROM cars_data WHERE accelerate > (SELECT max(horsepower) FROM cars_data)
natsql:
select count ( _ ) from _ where _ > ( select max ( _ ) from _ ) | select count ( cars_data.* ) from cars_data where cars_data.accelerate > ( select max ( cars_data.horsepower ) from cars_data )

SQL:
SELECT count(*) FROM cars_data WHERE accelerate > (SELECT max(horsepower) FROM cars_data)
self correction:
SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)

index is 160
SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );
What is the number of cars with a greater accelerate than the one with the most horsepower?
schema_links:
What is the number of cars with a greater accelerate than the one with the most horsepower? | cars_data : cars_data.horsepower , cars_data.accelerate , cars_data.id , cars_data.weight , cars_data.cylinders , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql and SQL generation:
select count ( * ) from _ where @.@ > ( select max ( @.@ ) from _ ) | select count ( * ) from cars_data where accelerate > ( select max ( horsepower ) from cars_data )
SQL = SELECT count(*) FROM cars_data WHERE accelerate  >  (SELECT max(horsepower) FROM cars_data)
natsql:
select count ( * ) from _ where @.@ > ( select max ( @.@ ) from _ ) | select count ( * ) from cars_data where accelerate > ( select max ( horsepower ) from cars_data )

SQL:
SELECT count(*) FROM cars_data WHERE accelerate  >  (SELECT max(horsepower) FROM cars_data)
self correction:
SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT max(Horsepower) FROM cars_data)

index is 161
select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2
How many countries has more than 2 car makers ?
schema_links:
How many countries has more than 2 car makers ? | countries : countries.countryid , countries.countryname , countries.continent , countries.* | car_makers : car_makers.id , car_makers.country , car_makers.maker , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql and SQL generation:
select count ( distinct _ ) from _ group by _ having count ( distinct _ ) > _ | select count ( distinct car_makers.country ) from car_makers group by car_makers.country having count ( distinct car_makers.id ) > 2
SQL = SELECT count(DISTINCT T1.countryid) FROM countries AS T1 JOIN car_makers AS T2 ON T1.countryid  =  T2.country GROUP BY T1.countryid HAVING count(DISTINCT T2.id) > 2
natsql:
select count ( distinct _ ) from _ group by _ having count ( distinct _ ) > _ | select count ( distinct car_makers.country ) from car_makers group by car_makers.country having count ( distinct car_makers.id ) > 2

SQL:
SELECT count(DISTINCT T1.countryid) FROM countries AS T1 JOIN car_makers AS T2 ON T1.countryid  =  T2.country GROUP BY T1.countryid HAVING count(DISTINCT T2.id) > 2
self correction:
SELECT count(DISTINCT T1.CountryId)  FROM countries AS T1  JOIN car_makers AS T2 ON T1.CountryId = T2.Country  GROUP BY T1.CountryId  HAVING count(DISTINCT T2.Id) > 2

index is 162
select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2
What is the number of countries with more than 2 car makers ?
schema_links:
What is the number of countries with more than 2 car makers ? | countries : countries.countryid , countries.countryname , countries.continent , countries.* | car_makers : car_makers.id , car_makers.country , car_makers.maker , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql and SQL generation:
select count ( distinct _ ) from _ where count ( distinct _ ) > _  | select count ( distinct countries.countryid ) from countries where count ( distinct car_makers.maker ) > 2
SQL = SELECT count(DISTINCT T1.countryid) FROM countries AS T1 JOIN car_makers AS T2 ON T1.countryid = T2.country GROUP BY T2.country HAVING count(DISTINCT T2.maker) > 2
natsql:
select count ( distinct _ ) from _ where count ( distinct _ ) > _  | select count ( distinct countries.countryid ) from countries where count ( distinct car_makers.maker ) > 2

SQL:
SELECT count(DISTINCT T1.countryid) FROM countries AS T1 JOIN car_makers AS T2 ON T1.countryid = T2.country GROUP BY T2.country HAVING count(DISTINCT T2.maker) > 2
self correction:
SELECT COUNT(DISTINCT T1.CountryId) FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING COUNT(DISTINCT T2.Maker) > 2

index is 163
SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;
How many cars has over 6 cylinders?
schema_links:
How many cars has over 6 cylinders? | cars_data : cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.*
natsql and SQL generation:
select count ( * ) from cars_data where cars_data.cylinders > 6
SQL = SELECT count(*) FROM cars_data WHERE cylinders  >  6
natsql:
select count ( * ) from cars_data where cars_data.cylinders > 6

SQL:
SELECT count(*) FROM cars_data WHERE cylinders  >  6
self correction:
SELECT count(*) FROM cars_data WHERE Cylinders > 6

index is 164
SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;
What is the number of carsw ith over 6 cylinders?
schema_links:
What is the number of carsw ith over 6 cylinders? | cars_data : cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql and SQL generation:
select count ( * ) from cars_data where cars_data.cylinders > 6
SQL = SELECT count(*) FROM cars_data WHERE cylinders  >  6
natsql:
select count ( * ) from cars_data where cars_data.cylinders > 6

SQL:
SELECT count(*) FROM cars_data WHERE cylinders  >  6
self correction:
SELECT count(*) FROM cars_data WHERE Cylinders > 6

index is 165
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;
For the cars with 4 cylinders, which model has the largest horsepower?
schema_links:
For the cars with 4 cylinders, which model has the largest horsepower? | cars_data : cars_data.horsepower , cars_data.cylinders , cars_data.id , cars_data.weight , cars_data.accelerate , cars_data.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select _ from _ where _ = _ order by _ desc limit _ | select model_list.model from cars_data join model_list on cars_data.id = model_list.modelid where cars_data.cylinders = 4 order by cars_data.horsepower desc limit 1
SQL = SELECT model FROM cars_data JOIN model_list ON cars_data.id = model_list.modelid WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1
natsql:
select _ from _ where _ = _ order by _ desc limit _ | select model_list.model from cars_data join model_list on cars_data.id = model_list.modelid where cars_data.cylinders = 4 order by cars_data.horsepower desc limit 1

SQL:
SELECT model FROM cars_data JOIN model_list ON cars_data.id = model_list.modelid WHERE cylinders = 4 ORDER BY horsepower DESC LIMIT 1
self correction:
SELECT model_list.Model FROM cars_data JOIN model_list ON cars_data.Id = model_list.ModelId WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1

index is 166
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;
For all of the 4 cylinder cars, which model has the most horsepower?
schema_links:
For all of the 4 cylinder cars, which model has the most horsepower? | cars_data : cars_data.horsepower , cars_data.cylinders , cars_data.id , cars_data.weight , cars_data.accelerate , cars_data.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select _ from _ where @.@ = max ( @.@ ) and @.@ = _ | select model_list.model from cars_data join model_list on cars_data.id = model_list.modelid where cars_data.cylinders = 4 and cars_data.horsepower = (select max(horsepower) from cars_data where cylinders = 4)
SQL = SELECT model FROM cars_data JOIN model_list ON cars_data.id = model_list.modelid WHERE cylinders = 4 AND horsepower = (SELECT max(horsepower) FROM cars_data WHERE cylinders = 4)
natsql:
select _ from _ where @.@ = max ( @.@ ) and @.@ = _ | select model_list.model from cars_data join model_list on cars_data.id = model_list.modelid where cars_data.cylinders = 4 and cars_data.horsepower = (select max(horsepower) from cars_data where cylinders = 4)

SQL:
SELECT model FROM cars_data JOIN model_list ON cars_data.id = model_list.modelid WHERE cylinders = 4 AND horsepower = (SELECT max(horsepower) FROM cars_data WHERE cylinders = 4)
self correction:
SELECT model_list.Model FROM cars_data JOIN model_list ON cars_data.Id = model_list.ModelId WHERE cars_data.Cylinders = 4 GROUP BY model_list.Model HAVING cars_data.Horsepower = MAX(cars_data.Horsepower)

index is 167
SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;
Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.
schema_links:
Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name. | car_names : car_names.make , car_names.makeid , car_names.model , car_names.* | cars_data : cars_data.horsepower , cars_data.cylinders , cars_data.id , cars_data.weight , cars_data.year , cars_data.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select _ , _ from _ where _ > ( select min ( _ ) from _ ) and _ <= _ | select car_names.makeid , car_names.make from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.horsepower > ( select min ( cars_data.horsepower ) from cars_data ) and cars_data.cylinders <= 3
SQL = SELECT car_names.makeid , car_names.make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.horsepower  >  (SELECT min(horsepower) FROM cars_data) AND cars_data.cylinders <= 3
natsql:
select _ , _ from _ where _ > ( select min ( _ ) from _ ) and _ <= _ | select car_names.makeid , car_names.make from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.horsepower > ( select min ( cars_data.horsepower ) from cars_data ) and cars_data.cylinders <= 3

SQL:
SELECT car_names.makeid , car_names.make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.horsepower  >  (SELECT min(horsepower) FROM cars_data) AND cars_data.cylinders <= 3
self correction:
SELECT car_names.makeid, car_names.make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data)   AND cars_data.cylinders <= 3

index is 168
select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;
Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?
schema_links:
Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ? | car_names : car_names.make , car_names.makeid , car_names.model , car_names.* | cars_data : cars_data.horsepower , cars_data.cylinders , cars_data.id , cars_data.weight , cars_data.mpg , cars_data.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select _ , _ from _ where _ <> min ( _ ) and _ < _ | select car_names.makeid , car_names.make from car_names , cars_data where cars_data.horsepower <> (select min(horsepower) from cars_data) and cars_data.cylinders < 4 and car_names.makeid = cars_data.id
SQL = SELECT car_names.makeid ,  car_names.make FROM car_names JOIN cars_data ON car_names.makeid  =  cars_data.id WHERE cars_data.horsepower  <>  (SELECT min(horsepower) FROM cars_data) AND cars_data.cylinders  <  4
natsql:
select _ , _ from _ where _ <> min ( _ ) and _ < _ | select car_names.makeid , car_names.make from car_names , cars_data where cars_data.horsepower <> (select min(horsepower) from cars_data) and cars_data.cylinders < 4 and car_names.makeid = cars_data.id

SQL:
SELECT car_names.makeid ,  car_names.make FROM car_names JOIN cars_data ON car_names.makeid  =  cars_data.id WHERE cars_data.horsepower  <>  (SELECT min(horsepower) FROM cars_data) AND cars_data.cylinders  <  4
self correction:
SELECT car_names.MakeId, car_names.Make FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders < 4;

index is 169
select max(mpg) from cars_data where cylinders  =  8 or year  <  1980
What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?
schema_links:
What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ? | cars_data : cars_data.mpg , cars_data.year , cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql and SQL generation:
select max ( _ ) from _ where _ or _ | select max ( cars_data.mpg ) from cars_data where cars_data.cylinders = 8 or cars_data.year < 1980
SQL = SELECT max(MPG) FROM cars_data WHERE Cylinders  =  8 OR Year < 1980
natsql:
select max ( _ ) from _ where _ or _ | select max ( cars_data.mpg ) from cars_data where cars_data.cylinders = 8 or cars_data.year < 1980

SQL:
SELECT max(MPG) FROM cars_data WHERE Cylinders  =  8 OR Year < 1980
self correction:
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 AND Year < 1980

index is 170
select max(mpg) from cars_data where cylinders  =  8 or year  <  1980
What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?
schema_links:
What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ? | cars_data : cars_data.mpg , cars_data.cylinders , cars_data.year , cars_data.id , cars_data.horsepower , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql and SQL generation:
select max ( _ ) from _ where _ or _ | select max ( cars_data.mpg ) from cars_data where cars_data.cylinders = 8 or cars_data.year < 1980
SQL = SELECT max(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980
natsql:
select max ( _ ) from _ where _ or _ | select max ( cars_data.mpg ) from cars_data where cars_data.cylinders = 8 or cars_data.year < 1980

SQL:
SELECT max(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980
self correction:
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980

index is 171
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';
Which models are lighter than 3500 but not built by the 'Ford Motor Company'?
schema_links:
Which models are lighter than 3500 but not built by the 'Ford Motor Company'? | car_makers : car_makers.fullname ( Ford Motor Company ) , car_makers.maker ( ford ) , car_makers.country , car_makers.id , car_makers.* | model_list : model_list.model ( ford ) , model_list.modelid , model_list.maker , model_list.* | cars_data : cars_data.weight , cars_data.horsepower , cars_data.id , cars_data.cylinders , cars_data.accelerate , cars_data.* | car_names : car_names.model ( ford ) , car_names.make , car_names.makeid , car_names.*
natsql and SQL generation:
select _ from _ where @.@ < _ and @.@ != _ | select model_list.model from cars_data join model_list on cars_data.id = model_list.modelid where cars_data.weight < 3500 and model_list.maker != 'Ford Motor Company'
SQL = SELECT model FROM cars_data JOIN model_list ON cars_data.id  =  model_list.modelid WHERE weight  <  3500 AND maker  !=  'Ford Motor Company'
natsql:
select _ from _ where @.@ < _ and @.@ != _ | select model_list.model from cars_data join model_list on cars_data.id = model_list.modelid where cars_data.weight < 3500 and model_list.maker != 'Ford Motor Company'

SQL:
SELECT model FROM cars_data JOIN model_list ON cars_data.id  =  model_list.modelid WHERE weight  <  3500 AND maker  !=  'Ford Motor Company'
self correction:
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker != 'Ford Motor Company'

index is 172
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';
What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?
schema_links:
What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company? | car_makers : car_makers.fullname ( Ford Motor Company ) , car_makers.maker ( ford ) , car_makers.country , car_makers.id , car_makers.* | model_list : model_list.model ( ford ) , model_list.modelid , model_list.maker , model_list.* | cars_data : cars_data.weight , cars_data.cylinders , cars_data.horsepower , cars_data.id , cars_data.accelerate , cars_data.* | car_names : car_names.model ( ford ) , car_names.make , car_names.makeid , car_names.*
natsql and SQL generation:
select distinct _ from _ where @.@ < _ and @.@ <> ( select @.@ from @.@ where @.@ = _ ) | select distinct model_list.model from cars_data where cars_data.weight < 3500 and cars_data.id <> ( select car_makers.id from car_makers where car_makers.maker = 'ford' )
SQL = SELECT DISTINCT T3.model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.id  =  T2.makeid JOIN model_list AS T3 ON T2.model  =  T3.model WHERE T1.weight  <  3500 AND T3.maker  <>  'ford'
natsql:
select distinct _ from _ where @.@ < _ and @.@ <> ( select @.@ from @.@ where @.@ = _ ) | select distinct model_list.model from cars_data where cars_data.weight < 3500 and cars_data.id <> ( select car_makers.id from car_makers where car_makers.maker = 'ford' )

SQL:
SELECT DISTINCT T3.model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.id  =  T2.makeid JOIN model_list AS T3 ON T2.model  =  T3.model WHERE T1.weight  <  3500 AND T3.maker  <>  'ford'
self correction:
SELECT DISTINCT T3.Model  FROM cars_data AS T1  JOIN car_names AS T2 ON T1.Id = T2.MakeId  JOIN model_list AS T3 ON T2.Model = T3.Model  JOIN car_makers AS T4 ON T3.Maker = T4.Id  WHERE T1.Weight < 3500 AND T4.Maker <> 'Ford'

index is 173
SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;
What are the name of the countries where there is not a single car maker?
schema_links:
What are the name of the countries where there is not a single car maker? | countries : countries.countryname , countries.countryid , countries.continent , countries.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ ) | select countries.countryname from countries where countries.countryname not in ( select car_makers.country from car_makers )
SQL = SELECT countryname FROM countries WHERE countryname NOT IN (SELECT country FROM car_makers)
natsql:
select _ from _ where _ not in ( select _ from _ ) | select countries.countryname from countries where countries.countryname not in ( select car_makers.country from car_makers )

SQL:
SELECT countryname FROM countries WHERE countryname NOT IN (SELECT country FROM car_makers)
self correction:
SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers)

index is 174
SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;
What are the names of the countries with no car makers?
schema_links:
What are the names of the countries with no car makers? | countries : countries.countryname , countries.countryid , countries.continent , countries.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ ) | select countries.countryname from countries where countries.countryid not in ( select car_makers.country from car_makers )
SQL = SELECT countryname FROM countries WHERE countryid NOT IN (SELECT country FROM car_makers)
natsql:
select _ from _ where _ not in ( select _ from _ ) | select countries.countryname from countries where countries.countryid not in ( select car_makers.country from car_makers )

SQL:
SELECT countryname FROM countries WHERE countryid NOT IN (SELECT country FROM car_makers)
self correction:
SELECT countryname FROM countries WHERE countryid NOT IN (SELECT country FROM car_makers)

index is 175
select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;
Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .
schema_links:
Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker . | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql and SQL generation:
select _ , _ from _ group by _ having count ( distinct _ ) >= _ and count ( distinct _ ) > _ | select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id , car_makers.maker having count(distinct model_list.model) >= 2 and count(distinct car_makers.id) > 3
SQL = SELECT id , maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY id , maker HAVING count(DISTINCT model_list.model) >= 2 AND count(DISTINCT car_makers.id) > 3
natsql:
select _ , _ from _ group by _ having count ( distinct _ ) >= _ and count ( distinct _ ) > _ | select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id , car_makers.maker having count(distinct model_list.model) >= 2 and count(distinct car_makers.id) > 3

SQL:
SELECT id , maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY id , maker HAVING count(DISTINCT model_list.model) >= 2 AND count(DISTINCT car_makers.id) > 3
self correction:
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT model_list.Model) >= 2 AND COUNT(DISTINCT car_makers.Id) > 3

index is 176
SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;
What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?
schema_links:
What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars? | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql and SQL generation:
select _ , _ from _ where count ( distinct _ ) > _ and count ( * ) > _ group by _ | select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.modelid = car_names.makeid join cars_data on car_names.model = cars_data.id group by car_makers.id , car_makers.maker having count ( distinct model_list.model ) > 2 and count ( * ) > 3
SQL = SELECT car_makers.id ,  car_makers.maker FROM car_makers JOIN model_list ON car_makers.id  =  model_list.maker JOIN car_names ON model_list.modelid  =  car_names.makeid JOIN cars_data ON car_names.model  =  cars_data.id GROUP BY car_makers.id ,  car_makers.maker HAVING count(DISTINCT model_list.model)  >  2 AND count(*)  >  3
natsql:
select _ , _ from _ where count ( distinct _ ) > _ and count ( * ) > _ group by _ | select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.modelid = car_names.makeid join cars_data on car_names.model = cars_data.id group by car_makers.id , car_makers.maker having count ( distinct model_list.model ) > 2 and count ( * ) > 3

SQL:
SELECT car_makers.id ,  car_makers.maker FROM car_makers JOIN model_list ON car_makers.id  =  model_list.maker JOIN car_names ON model_list.modelid  =  car_names.makeid JOIN cars_data ON car_names.model  =  cars_data.id GROUP BY car_makers.id ,  car_makers.maker HAVING count(DISTINCT model_list.model)  >  2 AND count(*)  >  3
self correction:
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT model_list.Model) > 1 AND COUNT(*) > 3

index is 177
SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';
What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?
schema_links:
What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model? | countries : countries.countryname , countries.countryid , countries.continent , countries.* | car_makers : car_makers.fullname ( Fiat ) , car_makers.maker ( fiat ) , car_makers.id , car_makers.country , car_makers.* | model_list : model_list.model ( fiat ) , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model ( fiat ) , car_names.make , car_names.makeid , car_names.*
natsql and SQL generation:
select _ , _ from _ where count ( distinct _ ) > _ or _ = _ group by _ | select countries.countryid , countries.countryname from countries , car_makers , model_list , car_names where ( count ( distinct car_makers.id ) > 3 or car_names.make = 'fiat' ) and ( car_makers.country = countries.countryid or car_names.makeid = model_list.modelid ) group by countries.countryid , countries.countryname
SQL = SELECT countries.countryid ,  countries.countryname FROM countries JOIN car_makers ON car_makers.country  =  countries.countryid JOIN model_list ON car_makers.id  =  model_list.maker JOIN car_names ON model_list.model  =  car_names.model WHERE (COUNT(DISTINCT car_makers.id)  >  3 OR car_names.make  =  'fiat') GROUP BY countries.countryid ,  countries.countryname
natsql:
select _ , _ from _ where count ( distinct _ ) > _ or _ = _ group by _ | select countries.countryid , countries.countryname from countries , car_makers , model_list , car_names where ( count ( distinct car_makers.id ) > 3 or car_names.make = 'fiat' ) and ( car_makers.country = countries.countryid or car_names.makeid = model_list.modelid ) group by countries.countryid , countries.countryname

SQL:
SELECT countries.countryid ,  countries.countryname FROM countries JOIN car_makers ON car_makers.country  =  countries.countryid JOIN model_list ON car_makers.id  =  model_list.maker JOIN car_names ON model_list.model  =  car_names.model WHERE (COUNT(DISTINCT car_makers.id)  >  3 OR car_names.make  =  'fiat') GROUP BY countries.countryid ,  countries.countryname
self correction:
SELECT countries.countryid, countries.countryname  FROM countries  JOIN car_makers ON car_makers.country = countries.countryid  JOIN model_list ON car_makers.id = model_list.maker  JOIN car_names ON model_list.model = car_names.model  GROUP BY countries.countryid, countries.countryname  HAVING COUNT(DISTINCT car_makers.id) > 3 OR car_names.make = 'fiat'

index is 178
select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';
What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?
schema_links:
What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ? | countries : countries.countryname , countries.countryid , countries.continent , countries.* | model_list : model_list.model ( fiat ) , model_list.maker , model_list.modelid , model_list.* | car_makers : car_makers.maker ( fiat ) , car_makers.id , car_makers.fullname ( Fiat ) , car_makers.country , car_makers.* | car_names : car_names.model ( fiat ) , car_names.make , car_names.makeid , car_names.*
natsql and SQL generation:
select _ , _ from _ where count ( _ ) > _ or _ | select countries.countryid , countries.countryname from countries where count ( car_makers.id ) > 3 or car_names.make = 'fiat' group by countries.countryid , countries.countryname
SQL = SELECT countryid ,  countryname FROM countries WHERE (SELECT count(id) FROM car_makers WHERE car_makers.country = countries.countryid)  >  3 OR (SELECT count(model) FROM car_names WHERE car_names.make = 'fiat')  >  0 GROUP BY countryid ,  countryname
natsql:
select _ , _ from _ where count ( _ ) > _ or _ | select countries.countryid , countries.countryname from countries where count ( car_makers.id ) > 3 or car_names.make = 'fiat' group by countries.countryid , countries.countryname

SQL:
SELECT countryid ,  countryname FROM countries WHERE (SELECT count(id) FROM car_makers WHERE car_makers.country = countries.countryid)  >  3 OR (SELECT count(model) FROM car_names WHERE car_names.make = 'fiat')  >  0 GROUP BY countryid ,  countryname
self correction:
SELECT countryid, countryname  FROM countries  WHERE countryid IN (SELECT country                      FROM car_makers                      GROUP BY country                      HAVING COUNT(*) > 3)    OR countryid IN (SELECT country                      FROM car_makers                      JOIN model_list ON car_makers.id = model_list.maker                      JOIN car_names ON model_list.modelid = car_names.makeid                      WHERE car_names.model = 'fiat')

index is 179
SELECT Country FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
Which country does Airline "JetBlue Airways" belong to?
schema_links:
Which country does Airline "JetBlue Airways" belong to? | airlines : airlines.airline ( JetBlue Airways ) , airlines.country , airlines.abbreviation ( JetBlue ) , airlines.uid , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*
natsql and SQL generation:
select _ from _ where @.@ = "JetBlue Airways" | select airlines.country from airlines where airlines.airline = "JetBlue Airways"
SQL = SELECT country FROM airlines WHERE airline = "JetBlue Airways"
natsql:
select _ from _ where @.@ = "JetBlue Airways" | select airlines.country from airlines where airlines.airline = "JetBlue Airways"

SQL:
SELECT country FROM airlines WHERE airline = "JetBlue Airways"
self correction:
SELECT country FROM airlines WHERE Airline = "JetBlue Airways"

index is 180
SELECT Country FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
What country is Jetblue Airways affiliated with?
schema_links:
What country is Jetblue Airways affiliated with? | airlines : airlines.airline ( JetBlue Airways ) , airlines.country , airlines.abbreviation ( JetBlue ) , airlines.uid , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*
natsql and SQL generation:
select _ from _ where @.@ = @ | select airlines.country from airlines where airlines.airline = 'JetBlue Airways'
SQL = SELECT country FROM airlines WHERE airline = 'JetBlue Airways'
natsql:
select _ from _ where @.@ = @ | select airlines.country from airlines where airlines.airline = 'JetBlue Airways'

SQL:
SELECT country FROM airlines WHERE airline = 'JetBlue Airways'
self correction:
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'

index is 181
SELECT Abbreviation FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
What is the abbreviation of Airline "JetBlue Airways"?
schema_links:
What is the abbreviation of Airline "JetBlue Airways"? | airlines : airlines.abbreviation ( JetBlue ) , airlines.airline ( JetBlue Airways ) , airlines.country , airlines.uid , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*
natsql and SQL generation:
select abbreviation from airlines where airline = "JetBlue Airways"
SQL = SELECT abbreviation FROM airlines WHERE Airline = "JetBlue Airways"
natsql:
select abbreviation from airlines where airline = "JetBlue Airways"

SQL:
SELECT abbreviation FROM airlines WHERE Airline = "JetBlue Airways"
self correction:
SELECT Abbreviation FROM airlines WHERE Airline = "JetBlue Airways"

index is 182
SELECT Abbreviation FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
Which abbreviation corresponds to Jetblue Airways?
schema_links:
Which abbreviation corresponds to Jetblue Airways? | airlines : airlines.abbreviation ( JetBlue ) , airlines.airline ( JetBlue Airways ) , airlines.country , airlines.uid , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*
natsql and SQL generation:
select _ from _ where _ = _ | select airlines.abbreviation from airlines where airlines.airline = "JetBlue Airways"
SQL = SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways'
natsql:
select _ from _ where _ = _ | select airlines.abbreviation from airlines where airlines.airline = "JetBlue Airways"

SQL:
SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways'
self correction:
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'

index is 183
SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  "USA"
List all airline names and their abbreviations in "USA".
schema_links:
List all airline names and their abbreviations in "USA". | airlines : airlines.airline , airlines.country ( USA ) , airlines.abbreviation , airlines.uid , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*
natsql and SQL generation:
select _ , _ from _ where _ = _ | select airlines.airline , airlines.abbreviation from airlines where airlines.country = "USA"
SQL = SELECT airline , abbreviation FROM airlines WHERE country = "USA"
natsql:
select _ , _ from _ where _ = _ | select airlines.airline , airlines.abbreviation from airlines where airlines.country = "USA"

SQL:
SELECT airline , abbreviation FROM airlines WHERE country = "USA"
self correction:
SELECT Airline, Abbreviation FROM airlines WHERE Country = "USA"

index is 184
SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  "USA"
What are the airline names and abbreviations for airlines in the USA?
schema_links:
What are the airline names and abbreviations for airlines in the USA? | airlines : airlines.airline , airlines.country ( USA ) , airlines.abbreviation , airlines.uid , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*
natsql and SQL generation:
select _ , _ from _ where @.@ = 'USA' | select airlines.airline , airlines.abbreviation from airlines where airlines.country = 'USA'
SQL = SELECT airline , abbreviation FROM airlines WHERE country = 'USA'
natsql:
select _ , _ from _ where @.@ = 'USA' | select airlines.airline , airlines.abbreviation from airlines where airlines.country = 'USA'

SQL:
SELECT airline , abbreviation FROM airlines WHERE country = 'USA'
self correction:
SELECT Airline, Abbreviation  FROM airlines  WHERE Country = 'USA'

index is 185
SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  "Anthony"
List the airport code and name in the city of Anthony.
schema_links:
List the airport code and name in the city of Anthony. | airports : airports.airportname ( Anthony ) , airports.city ( Anthony ) , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ , _ from _ where _ = _ | select airports.airportcode , airports.airportname from airports where airports.city = 'Anthony'
SQL = SELECT airportcode ,  airportname FROM airports WHERE city = 'Anthony'
natsql:
select _ , _ from _ where _ = _ | select airports.airportcode , airports.airportname from airports where airports.city = 'Anthony'

SQL:
SELECT airportcode ,  airportname FROM airports WHERE city = 'Anthony'
self correction:
SELECT airportcode, airportname  FROM airports  WHERE city = 'Anthony'

index is 186
SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  "Anthony"
Give the airport code and airport name corresonding to the city Anthony.
schema_links:
Give the airport code and airport name corresonding to the city Anthony. | airports : airports.airportname ( Anthony ) , airports.city ( Anthony ) , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ , _ from _ where _ = _ | select airports.airportcode , airports.airportname from airports where airports.city = 'Anthony'
SQL = SELECT airportcode ,  airportname FROM airports WHERE city  =  'Anthony'
natsql:
select _ , _ from _ where _ = _ | select airports.airportcode , airports.airportname from airports where airports.city = 'Anthony'

SQL:
SELECT airportcode ,  airportname FROM airports WHERE city  =  'Anthony'
self correction:
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'

index is 187
SELECT count(*) FROM AIRLINES
How many airlines do we have?
schema_links:
How many airlines do we have? | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct airlines.airline ) from airlines
SQL = SELECT COUNT(DISTINCT airline) FROM airlines
natsql:
select count ( distinct _ ) from _ | select count ( distinct airlines.airline ) from airlines

SQL:
SELECT COUNT(DISTINCT airline) FROM airlines
self correction:
SELECT COUNT(DISTINCT uid) FROM airlines

index is 188
SELECT count(*) FROM AIRLINES
What is the total number of airlines?
schema_links:
What is the total number of airlines? | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( airlines.airline ) from airlines
SQL = SELECT count(*) FROM airlines
natsql:
select count ( _ ) from _ | select count ( airlines.airline ) from airlines

SQL:
SELECT count(*) FROM airlines
self correction:
SELECT count(*) FROM airlines

index is 189
SELECT count(*) FROM AIRPORTS
How many airports do we have?
schema_links:
How many airports do we have? | airports : airports.airportname , airports.airportcode , airports.country , airports.city , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( * ) from airports
SQL = SELECT count(*) FROM airports
natsql:
select count ( _ ) from _ | select count ( * ) from airports

SQL:
SELECT count(*) FROM airports
self correction:
SELECT COUNT(*) FROM airports

index is 190
SELECT count(*) FROM AIRPORTS
Return the number of  airports.
schema_links:
Return the number of  airports. | airports : airports.airportname , airports.country , airports.city , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select count ( * ) from _
SQL = SELECT count(*) FROM airports
natsql:
select count ( * ) from _

SQL:
SELECT count(*) FROM airports
self correction:
SELECT count(*) FROM airports

index is 191
SELECT count(*) FROM FLIGHTS
How many flights do we have?
schema_links:
How many flights do we have? | flights : flights.flightno , flights.airline , flights.destairport , flights.sourceairport , flights.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( * ) from flights
SQL = SELECT count(*) FROM flights
natsql:
select count ( _ ) from _ | select count ( * ) from flights

SQL:
SELECT count(*) FROM flights
self correction:
SELECT count(*) FROM flights

index is 192
SELECT count(*) FROM FLIGHTS
Return the number of flights.
schema_links:
Return the number of flights. | flights : flights.flightno , flights.airline , flights.destairport , flights.sourceairport , flights.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( * ) from flights
SQL = SELECT count(*) FROM flights
natsql:
select count ( _ ) from _ | select count ( * ) from flights

SQL:
SELECT count(*) FROM flights
self correction:
SELECT COUNT(*) FROM flights

index is 193
SELECT Airline FROM AIRLINES WHERE Abbreviation  =  "UAL"
Which airline has abbreviation 'UAL'?
schema_links:
Which airline has abbreviation 'UAL'? | airlines : airlines.abbreviation ( UAL ) , airlines.airline , airlines.country , airlines.uid , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select _ from _ where @.@ = _ | select airlines.airline from airlines where airlines.abbreviation = 'UAL'
SQL = SELECT airline FROM airlines WHERE abbreviation = 'UAL'
natsql:
select _ from _ where @.@ = _ | select airlines.airline from airlines where airlines.abbreviation = 'UAL'

SQL:
SELECT airline FROM airlines WHERE abbreviation = 'UAL'
self correction:
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'

index is 194
SELECT Airline FROM AIRLINES WHERE Abbreviation  =  "UAL"
Give the airline with abbreviation 'UAL'.
schema_links:
Give the airline with abbreviation 'UAL'. | airlines : airlines.abbreviation ( UAL ) , airlines.airline , airlines.country , airlines.uid , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select _ from _ where @.@ = 'UAL' | select airlines.airline from airlines where airlines.abbreviation = 'UAL'
SQL = SELECT airline FROM airlines WHERE abbreviation = 'UAL'
natsql:
select _ from _ where @.@ = 'UAL' | select airlines.airline from airlines where airlines.abbreviation = 'UAL'

SQL:
SELECT airline FROM airlines WHERE abbreviation = 'UAL'
self correction:
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'

index is 195
SELECT count(*) FROM AIRLINES WHERE Country  =  "USA"
How many airlines are from USA?
schema_links:
How many airlines are from USA? | airlines : airlines.country ( USA ) , airlines.airline , airlines.uid , airlines.abbreviation , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select count ( * ) from _ where _ = _ | select count ( * ) from airlines where airlines.country = 'USA'
SQL = SELECT count(*) FROM airlines WHERE country = 'USA'
natsql:
select count ( * ) from _ where _ = _ | select count ( * ) from airlines where airlines.country = 'USA'

SQL:
SELECT count(*) FROM airlines WHERE country = 'USA'
self correction:
SELECT COUNT(*) FROM airlines WHERE Country = 'USA'

index is 196
SELECT count(*) FROM AIRLINES WHERE Country  =  "USA"
Return the number of airlines in the USA.
schema_links:
Return the number of airlines in the USA. | airlines : airlines.country ( USA ) , airlines.airline , airlines.uid , airlines.abbreviation , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*
natsql and SQL generation:
select count ( _ ) from _ where _ = _ | select count ( airlines.airline ) from airlines where airlines.country = 'USA'
SQL = SELECT COUNT(airline) FROM airlines WHERE country = 'USA'
natsql:
select count ( _ ) from _ where _ = _ | select count ( airlines.airline ) from airlines where airlines.country = 'USA'

SQL:
SELECT COUNT(airline) FROM airlines WHERE country = 'USA'
self correction:
SELECT COUNT(*) FROM airlines WHERE Country = 'USA'

index is 197
SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"
Which city and country is the Alton airport at?
schema_links:
Which city and country is the Alton airport at? | airports : airports.city ( Alton ) , airports.country , airports.airportname ( Alton ) , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ , _ from _ where _ ( _ ) and _ ( _ ) | select airports.city , airports.country from airports where airports.airportname = 'Alton'
SQL = SELECT city ,  country FROM airports WHERE airportname = 'Alton'
natsql:
select _ , _ from _ where _ ( _ ) and _ ( _ ) | select airports.city , airports.country from airports where airports.airportname = 'Alton'

SQL:
SELECT city ,  country FROM airports WHERE airportname = 'Alton'
self correction:
SELECT City, Country FROM airports WHERE AirportName = 'Alton';

index is 198
SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"
Give the city and country for the Alton airport.
schema_links:
Give the city and country for the Alton airport. | airports : airports.city ( Alton ) , airports.country , airports.airportname ( Alton ) , airports.countryabbrev , airports.airportcode , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select @.@ , _ from _ where _ ( _ ) = _ and _ ( _ ) = _ | select airports.city , airports.country from airports where airports.airportname = 'Alton' and airports.airportcode = flights.sourceairport and flights.destairport = airports.airportcode
SQL = SELECT city ,  country FROM airports WHERE airportname  =  'Alton' AND airportcode  =  (SELECT sourceairport FROM flights WHERE destairport  =  airportcode)
natsql:
select @.@ , _ from _ where _ ( _ ) = _ and _ ( _ ) = _ | select airports.city , airports.country from airports where airports.airportname = 'Alton' and airports.airportcode = flights.sourceairport and flights.destairport = airports.airportcode

SQL:
SELECT city ,  country FROM airports WHERE airportname  =  'Alton' AND airportcode  =  (SELECT sourceairport FROM flights WHERE destairport  =  airportcode)
self correction:
SELECT city, country  FROM airports  WHERE airportname = 'Alton' AND airportcode = (SELECT destairport FROM flights WHERE sourceairport = airportcode)

index is 199
SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  "AKO"
What is the airport name for airport 'AKO'?
schema_links:
What is the airport name for airport 'AKO'? | airports : airports.airportcode ( AKO ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | flights : flights.sourceairport ( AKO ) , flights.destairport ( AKO ) , flights.airline , flights.flightno , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ where _ = _ | select airports.airportname from airports where airports.airportcode = 'AKO'
SQL = SELECT airportname FROM airports WHERE airportcode = 'AKO'
natsql:
select _ from _ where _ = _ | select airports.airportname from airports where airports.airportcode = 'AKO'

SQL:
SELECT airportname FROM airports WHERE airportcode = 'AKO'
self correction:
SELECT AirportName  FROM airports  WHERE AirportCode = 'AKO'

index is 200
SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  "AKO"
Return the name of the airport with code 'AKO'.
schema_links:
Return the name of the airport with code 'AKO'. | airports : airports.airportcode ( AKO ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | flights : flights.sourceairport ( AKO ) , flights.destairport ( AKO ) , flights.airline , flights.flightno , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ where _ = 'AKO' | select airports.airportname from airports where airports.airportcode = 'AKO'
SQL = SELECT airportname FROM airports WHERE airportcode = 'AKO'
natsql:
select _ from _ where _ = 'AKO' | select airports.airportname from airports where airports.airportcode = 'AKO'

SQL:
SELECT airportname FROM airports WHERE airportcode = 'AKO'
self correction:
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'

index is 201
SELECT AirportName FROM AIRPORTS WHERE City = "Aberdeen"
What are airport names at City 'Aberdeen'?
schema_links:
What are airport names at City 'Aberdeen'? | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ where _ = 'Aberdeen' | select airports.airportname from airports where airports.city = 'Aberdeen'
SQL = SELECT airportname FROM airports WHERE city = 'Aberdeen'
natsql:
select _ from _ where _ = 'Aberdeen' | select airports.airportname from airports where airports.city = 'Aberdeen'

SQL:
SELECT airportname FROM airports WHERE city = 'Aberdeen'
self correction:
SELECT AirportName FROM airports WHERE City = 'Aberdeen'

index is 202
SELECT AirportName FROM AIRPORTS WHERE City = "Aberdeen"
What are the names of airports in Aberdeen?
schema_links:
What are the names of airports in Aberdeen? | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ where _ = _ | select airports.airportname from airports where airports.city = 'Aberdeen'
SQL = SELECT airportname FROM airports WHERE city = 'Aberdeen'
natsql:
select _ from _ where _ = _ | select airports.airportname from airports where airports.city = 'Aberdeen'

SQL:
SELECT airportname FROM airports WHERE city = 'Aberdeen'
self correction:
SELECT AirportName FROM airports WHERE City = 'Aberdeen'

index is 203
SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  "APG"
How many flights depart from 'APG'?
schema_links:
How many flights depart from 'APG'? | flights : flights.sourceairport ( APG ) , flights.destairport ( APG ) , flights.flightno , flights.airline , flights.* | airports : airports.airportcode ( APG ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql and SQL generation:
select count ( * ) from _ where @.@ = 'APG' | select count(*) from flights where sourceairport = 'APG'
SQL = SELECT count(*) FROM flights WHERE sourceairport = 'APG'
natsql:
select count ( * ) from _ where @.@ = 'APG' | select count(*) from flights where sourceairport = 'APG'

SQL:
SELECT count(*) FROM flights WHERE sourceairport = 'APG'
self correction:
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'

index is 204
SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  "APG"
Count the number of flights departing from 'APG'.
schema_links:
Count the number of flights departing from 'APG'. | flights : flights.sourceairport ( APG ) , flights.destairport ( APG ) , flights.flightno , flights.airline , flights.* | airports : airports.airportcode ( APG ) , airports.city , airports.airportname , airports.country , airports.countryabbrev , airports.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql and SQL generation:
select count ( _ ) from _ where @.@ = 'APG' | select count(*) from flights where SourceAirport = 'APG'
SQL = SELECT count(*) FROM flights WHERE SourceAirport = 'APG'
natsql:
select count ( _ ) from _ where @.@ = 'APG' | select count(*) from flights where SourceAirport = 'APG'

SQL:
SELECT count(*) FROM flights WHERE SourceAirport = 'APG'
self correction:
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'

index is 205
SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"
How many flights have destination ATO?
schema_links:
How many flights have destination ATO? | flights : flights.destairport ( ATO ) , flights.sourceairport ( ATO ) , flights.airline , flights.flightno , flights.* | airports : airports.airportcode ( ATO ) , airports.city , airports.country , airports.airportname , airports.countryabbrev , airports.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql and SQL generation:
select count ( _ ) from _ where _ = 'ATO' | select count ( * ) from flights where destairport = 'ATO'
SQL = SELECT COUNT(*) FROM flights WHERE destairport = 'ATO'
natsql:
select count ( _ ) from _ where _ = 'ATO' | select count ( * ) from flights where destairport = 'ATO'

SQL:
SELECT COUNT(*) FROM flights WHERE destairport = 'ATO'
self correction:
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'

index is 206
SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"
Count the number of flights into ATO.
schema_links:
Count the number of flights into ATO. | flights : flights.sourceairport ( ATO ) , flights.destairport ( ATO ) , flights.flightno , flights.airline , flights.* | airports : airports.airportcode ( ATO ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql and SQL generation:
select count ( _ ) from _ where _ = 'ATO' | select count ( flights.* ) from flights where flights.destairport = 'ATO'
SQL = SELECT count(*) FROM flights WHERE DestAirport = 'ATO'
natsql:
select count ( _ ) from _ where _ = 'ATO' | select count ( flights.* ) from flights where flights.destairport = 'ATO'

SQL:
SELECT count(*) FROM flights WHERE DestAirport = 'ATO'
self correction:
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'

index is 207
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
How many flights depart from City Aberdeen?
schema_links:
How many flights depart from City Aberdeen? | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.destairport , flights.flightno , flights.sourceairport , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select count ( _ ) from _ where _ = _ | select count ( flights.* ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen'
SQL = SELECT count(*) FROM airports JOIN flights ON airports.airportcode = flights.sourceairport WHERE airports.city = 'Aberdeen'
natsql:
select count ( _ ) from _ where _ = _ | select count ( flights.* ) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen'

SQL:
SELECT count(*) FROM airports JOIN flights ON airports.airportcode = flights.sourceairport WHERE airports.city = 'Aberdeen'
self correction:
SELECT COUNT(*) FROM airports  JOIN flights ON airports.AirportCode = flights.SourceAirport  WHERE airports.City = 'Aberdeen'

index is 208
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Return the number of flights departing from Aberdeen.
schema_links:
Return the number of flights departing from Aberdeen. | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.flightno , flights.sourceairport , flights.destairport , flights.airline , flights.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql and SQL generation:
select count ( * ) from _ where @.@ = @ | select count ( * ) from flights where flights.sourceairport = 'Aberdeen'
natsql:
select count ( * ) from _ where @.@ = @ | select count ( * ) from flights where flights.sourceairport = 'Aberdeen'
SQL:
SELECT count(*) FROM flights WHERE sourceairport = 'Aberdeen'
self correction:
SELECT COUNT(*)  FROM flights  WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE AirportName = 'Aberdeen')

index is 209
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
How many flights arriving in Aberdeen city?
schema_links:
How many flights arriving in Aberdeen city? | airports : airports.city ( Aberdeen ) , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev , airports.* | flights : flights.flightno , flights.destairport , flights.sourceairport , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select count ( _ ) from _ where @.@ = "Aberdeen" | select count ( flights.* ) from airports where @.@ = "Aberdeen"
SQL = SELECT count(*) FROM airports WHERE city = "Aberdeen"
natsql:
select count ( _ ) from _ where @.@ = "Aberdeen" | select count ( flights.* ) from airports where @.@ = "Aberdeen"

SQL:
SELECT count(*) FROM airports WHERE city = "Aberdeen"
self correction:
SELECT count(*)  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.City = "Aberdeen"

index is 210
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Return the number of flights arriving in Aberdeen.
schema_links:
Return the number of flights arriving in Aberdeen. | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.flightno , flights.sourceairport , flights.destairport , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select count ( _ ) from _ where _ = "Aberdeen" | select count ( * ) from flights where destairport = "Aberdeen"
SQL = SELECT count(*) FROM flights WHERE DestAirport = 'Aberdeen'
natsql:
select count ( _ ) from _ where _ = "Aberdeen" | select count ( * ) from flights where destairport = "Aberdeen"

SQL:
SELECT count(*) FROM flights WHERE DestAirport = 'Aberdeen'
self correction:
SELECT count(*) FROM flights WHERE DestAirport = 'Aberdeen'

index is 211
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"
How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?
schema_links:
How many flights depart from City 'Aberdeen' and have destination City 'Ashley'? | airports : airports.city ( Aberdeen , Ashley ) , airports.airportname ( Ashley ) , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.destairport , flights.sourceairport , flights.flightno , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select count ( * ) from _ where _ = 'Aberdeen' and _ = 'Ashley' | select count ( * ) from flights where sourceairport = 'Aberdeen' and destairport = 'Ashley'
SQL = SELECT count(*) FROM flights WHERE sourceairport = 'Aberdeen' AND destairport = 'Ashley'
natsql:
select count ( * ) from _ where _ = 'Aberdeen' and _ = 'Ashley' | select count ( * ) from flights where sourceairport = 'Aberdeen' and destairport = 'Ashley'

SQL:
SELECT count(*) FROM flights WHERE sourceairport = 'Aberdeen' AND destairport = 'Ashley'
self correction:
SELECT count(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN airports AS dest ON flights.destairport = dest.airportcode WHERE airports.city = 'Aberdeen' AND dest.city = 'Ashley'

index is 212
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"
How many flights fly from Aberdeen to Ashley?
schema_links:
How many flights fly from Aberdeen to Ashley? | airports : airports.city ( Aberdeen , Ashley ) , airports.airportname ( Ashley ) , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.destairport , flights.sourceairport , flights.flightno , flights.airline , flights.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql and SQL generation:
select count ( _ ) from _ where @.@ = @.@ | select count ( flights.flightno ) from flights where flights.sourceairport = ( select airports.airportcode from airports where airports.city = 'Aberdeen' ) and flights.destairport = ( select airports.airportcode from airports where airports.city = 'Ashley' )
SQL = SELECT count(flightno) FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen') AND destairport = (SELECT airportcode FROM airports WHERE city = 'Ashley')
natsql:
select count ( _ ) from _ where @.@ = @.@ | select count ( flights.flightno ) from flights where flights.sourceairport = ( select airports.airportcode from airports where airports.city = 'Aberdeen' ) and flights.destairport = ( select airports.airportcode from airports where airports.city = 'Ashley' )

SQL:
SELECT count(flightno) FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen') AND destairport = (SELECT airportcode FROM airports WHERE city = 'Ashley')
self correction:
SELECT count(FlightNo)  FROM flights  WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')  AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Ashley')

index is 213
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"
How many flights does airline 'JetBlue Airways' have?
schema_links:
How many flights does airline 'JetBlue Airways' have? | airlines : airlines.airline ( JetBlue Airways ) , airlines.abbreviation ( JetBlue ) , airlines.uid , airlines.country , airlines.* | flights : flights.airline , flights.flightno , flights.destairport , flights.sourceairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select count ( * ) from _ where _ = _ | select count ( * ) from flights where flights.airline = 'JetBlue Airways'
SQL = SELECT count(*) FROM flights WHERE airline = 'JetBlue Airways'
natsql:
select count ( * ) from _ where _ = _ | select count ( * ) from flights where flights.airline = 'JetBlue Airways'

SQL:
SELECT count(*) FROM flights WHERE airline = 'JetBlue Airways'
self correction:
SELECT count(*) FROM flights WHERE Airline = 'JetBlue Airways'

index is 214
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"
Give the number of Jetblue Airways flights.
schema_links:
Give the number of Jetblue Airways flights. | airlines : airlines.airline ( JetBlue Airways ) , airlines.abbreviation ( JetBlue ) , airlines.uid , airlines.country , airlines.* | flights : flights.flightno , flights.airline , flights.destairport , flights.sourceairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select count ( * ) from _ where @ = 'JetBlue Airways' | select count ( * ) from airlines where airline = 'JetBlue Airways'
SQL = SELECT count(*) FROM airlines WHERE Airline = 'JetBlue Airways'
natsql:
select count ( * ) from _ where @ = 'JetBlue Airways' | select count ( * ) from airlines where airline = 'JetBlue Airways'

SQL:
SELECT count(*) FROM airlines WHERE Airline = 'JetBlue Airways'
self correction:
SELECT count(*) FROM flights WHERE Airline = 'JetBlue Airways'

index is 215
SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"
How many 'United Airlines' flights go to Airport 'ASY'?
schema_links:
How many 'United Airlines' flights go to Airport 'ASY'? | airlines : airlines.airline ( United Airlines ) , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.destairport ( ASY ) , flights.sourceairport ( ASY ) , flights.airline , flights.flightno , flights.* | airports : airports.airportcode ( ASY ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.*
natsql and SQL generation:
select count ( _ ) from _ where @.@ = 'United Airlines' and @.@ = 'ASY' | select count ( * ) from flights where airline = 'United Airlines' and destairport = 'ASY'
SQL = SELECT count(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'ASY'
natsql:
select count ( _ ) from _ where @.@ = 'United Airlines' and @.@ = 'ASY' | select count ( * ) from flights where airline = 'United Airlines' and destairport = 'ASY'

SQL:
SELECT count(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'ASY'
self correction:
SELECT count(*) FROM flights  JOIN airlines ON flights.airline = airlines.Airline  JOIN airports ON flights.destairport = airports.AirportCode  WHERE airlines.Airline = 'United Airlines' AND airports.AirportCode = 'ASY'

index is 216
SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"
Count the number of United Airlines flights arriving in ASY Airport.
schema_links:
Count the number of United Airlines flights arriving in ASY Airport. | airlines : airlines.airline ( United Airlines ) , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.destairport ( ASY ) , flights.sourceairport ( ASY ) , flights.airline , flights.flightno , flights.* | airports : airports.airportcode ( ASY ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.*
natsql and SQL generation:
select count ( _ ) from _ where @.@ = _ | select count(*) from flights where flights.airline = 'United Airlines' and flights.destairport = 'ASY'
SQL = SELECT count(*) FROM flights WHERE airline = 'United Airlines' AND destAirport = 'ASY'
natsql:
select count ( _ ) from _ where @.@ = _ | select count(*) from flights where flights.airline = 'United Airlines' and flights.destairport = 'ASY'

SQL:
SELECT count(*) FROM flights WHERE airline = 'United Airlines' AND destAirport = 'ASY'
self correction:
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'

index is 217
SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"
How many 'United Airlines' flights depart from Airport 'AHD'?
schema_links:
How many 'United Airlines' flights depart from Airport 'AHD'? | airlines : airlines.airline ( United Airlines ) , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | airports : airports.airportcode ( AHD ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | flights : flights.sourceairport ( AHD ) , flights.destairport ( AHD ) , flights.airline , flights.flightno , flights.*
natsql and SQL generation:
select count ( _ ) from _ where _ = 'United Airlines' and _ = 'AHD' | select count ( flights.* ) from flights where flights.airline = 'United Airlines' and ( flights.sourceairport = 'AHD' or flights.destairport = 'AHD' )
SQL = SELECT count(*) FROM flights WHERE airline  =  'United Airlines' AND (sourceairport  =  'AHD' OR destairport  =  'AHD')
natsql:
select count ( _ ) from _ where _ = 'United Airlines' and _ = 'AHD' | select count ( flights.* ) from flights where flights.airline = 'United Airlines' and ( flights.sourceairport = 'AHD' or flights.destairport = 'AHD' )

SQL:
SELECT count(*) FROM flights WHERE airline  =  'United Airlines' AND (sourceairport  =  'AHD' OR destairport  =  'AHD')
self correction:
SELECT count(*)  FROM flights  WHERE Airline = 'United Airlines' AND (SourceAirport = 'AHD' OR DestAirport = 'AHD')

index is 218
SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"
Return the number of United Airlines flights leaving from AHD Airport.
schema_links:
Return the number of United Airlines flights leaving from AHD Airport. | airlines : airlines.airline ( United Airlines ) , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.sourceairport ( AHD ) , flights.destairport ( AHD ) , flights.airline , flights.flightno , flights.* | airports : airports.airportcode ( AHD ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.*
natsql and SQL generation:
select count ( _ ) from _ where @.@ = _ | select count ( flights.* ) from flights where flights.sourceairport = 'AHD' and flights.airline = 'United Airlines'
SQL = SELECT count(*) FROM flights WHERE sourceairport = 'AHD' AND airline = 'United Airlines'
natsql:
select count ( _ ) from _ where @.@ = _ | select count ( flights.* ) from flights where flights.sourceairport = 'AHD' and flights.airline = 'United Airlines'

SQL:
SELECT count(*) FROM flights WHERE sourceairport = 'AHD' AND airline = 'United Airlines'
self correction:
SELECT count(*) FROM flights WHERE SourceAirport = 'AHD' AND Airline = 'United Airlines'

index is 219
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"
How many United Airlines flights go to City 'Aberdeen'?
schema_links:
How many United Airlines flights go to City 'Aberdeen'? | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | airlines : airlines.airline ( United Airlines ) , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.destairport , flights.airline , flights.flightno , flights.sourceairport , flights.*
natsql and SQL generation:
select count ( _ ) from _ where _ = @ | select count ( flights.* ) from flights where flights.destairport = ( select airports.airportcode from airports where airports.city = 'Aberdeen' ) and flights.airline = ( select airlines.uid from airlines where airlines.airline = 'United Airlines' )
SQL = SELECT count(*) FROM flights WHERE destairport  =  (SELECT airportcode FROM airports WHERE city  =  'Aberdeen') AND airline  =  (SELECT uid FROM airlines WHERE airline  =  'United Airlines')
natsql:
select count ( _ ) from _ where _ = @ | select count ( flights.* ) from flights where flights.destairport = ( select airports.airportcode from airports where airports.city = 'Aberdeen' ) and flights.airline = ( select airlines.uid from airlines where airlines.airline = 'United Airlines' )

SQL:
SELECT count(*) FROM flights WHERE destairport  =  (SELECT airportcode FROM airports WHERE city  =  'Aberdeen') AND airline  =  (SELECT uid FROM airlines WHERE airline  =  'United Airlines')
self correction:
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.destairport = airports.airportcode  JOIN airlines ON flights.airline = airlines.uid  WHERE airports.city = 'Aberdeen'  AND airlines.airline = 'United Airlines'

index is 220
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"
Count the number of United Airlines flights that arrive in Aberdeen.
schema_links:
Count the number of United Airlines flights that arrive in Aberdeen. | airlines : airlines.airline ( United Airlines ) , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.sourceairport , flights.destairport , flights.flightno , flights.airline , flights.*
natsql and SQL generation:
select count ( _ ) from _ where _ = @.@ | select count ( flights.* ) from flights join airports on flights.destairport = airports.airportcode join airlines on flights.airline = airlines.uid where airports.city = 'Aberdeen' and airlines.airline = 'United Airlines'
SQL = SELECT count(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode JOIN airlines ON flights.airline = airlines.uid WHERE airports.city = 'Aberdeen' AND airlines.airline = 'United Airlines'
natsql:
select count ( _ ) from _ where _ = @.@ | select count ( flights.* ) from flights join airports on flights.destairport = airports.airportcode join airlines on flights.airline = airlines.uid where airports.city = 'Aberdeen' and airlines.airline = 'United Airlines'

SQL:
SELECT count(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode JOIN airlines ON flights.airline = airlines.uid WHERE airports.city = 'Aberdeen' AND airlines.airline = 'United Airlines'
self correction:
SELECT count(*) FROM flights  JOIN airports ON flights.destairport = airports.airportcode  JOIN airlines ON flights.airline = airlines.uid  WHERE airports.city = 'Aberdeen' AND airlines.abbreviation = 'UA'

index is 221
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
Which city has most number of arriving flights?
schema_links:
Which city has most number of arriving flights? | airports : airports.city , airports.airportname , airports.country , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.sourceairport , flights.destairport , flights.flightno , flights.airline , flights.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ group by _ order by count ( * ) desc limit _ | select airports.city from airports group by airports.city order by count ( * ) desc limit 1
SQL = SELECT city FROM airports GROUP BY city ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( * ) desc limit _ | select airports.city from airports group by airports.city order by count ( * ) desc limit 1

SQL:
SELECT city FROM airports GROUP BY city ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT airports.City FROM airports JOIN flights ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1

index is 222
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
Which city has the most frequent destination airport?
schema_links:
Which city has the most frequent destination airport? | flights : flights.destairport , flights.flightno , flights.airline , flights.sourceairport , flights.* | airports : airports.city , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select airports.city from flights join airports on flights.destairport = airports.airportcode group by airports.city order by count ( flights.destairport ) desc limit 1
SQL = SELECT city FROM flights JOIN airports ON flights.destairport = airports.airportcode GROUP BY airports.city ORDER BY count(flights.destairport) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select airports.city from flights join airports on flights.destairport = airports.airportcode group by airports.city order by count ( flights.destairport ) desc limit 1

SQL:
SELECT city FROM flights JOIN airports ON flights.destairport = airports.airportcode GROUP BY airports.city ORDER BY count(flights.destairport) DESC LIMIT 1
self correction:
SELECT airports.City FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY COUNT(flights.DestAirport) DESC LIMIT 1

index is 223
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
Which city has most number of departing flights?
schema_links:
Which city has most number of departing flights? | airports : airports.city , airports.airportname , airports.country , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.destairport , flights.flightno , flights.sourceairport , flights.airline , flights.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ group by _ order by count ( * ) desc limit _ | select airports.city from airports group by airports.city order by count ( * ) desc limit 1
SQL = SELECT city FROM airports GROUP BY city ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( * ) desc limit _ | select airports.city from airports group by airports.city order by count ( * ) desc limit 1

SQL:
SELECT city FROM airports GROUP BY city ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1

index is 224
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
Which city is the most frequent source airport?
schema_links:
Which city is the most frequent source airport? | airports : airports.city , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.sourceairport , flights.flightno , flights.airline , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select airports.city from flights join airports on flights.sourceairport = airports.airportcode group by airports.city order by count ( flights.sourceairport ) desc limit 1
SQL = SELECT city FROM flights JOIN airports ON flights.sourceairport = airports.airportcode GROUP BY city ORDER BY count(flights.sourceairport) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select airports.city from flights join airports on flights.sourceairport = airports.airportcode group by airports.city order by count ( flights.sourceairport ) desc limit 1

SQL:
SELECT city FROM flights JOIN airports ON flights.sourceairport = airports.airportcode GROUP BY city ORDER BY count(flights.sourceairport) DESC LIMIT 1
self correction:
SELECT airports.City AS city FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY airports.City ORDER BY COUNT(flights.SourceAirport) DESC LIMIT 1

index is 225
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
What is the code of airport that has the highest number of flights?
schema_links:
What is the code of airport that has the highest number of flights? | flights : flights.sourceairport , flights.flightno , flights.destairport , flights.airline , flights.* | airports : airports.airportcode , airports.airportname , airports.country , airports.city , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select airports.airportcode from airports group by airports.airportcode order by count ( flights.destairport ) desc limit 1
SQL = SELECT airportcode FROM airports GROUP BY airportcode ORDER BY count(DestAirport) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select airports.airportcode from airports group by airports.airportcode order by count ( flights.destairport ) desc limit 1

SQL:
SELECT airportcode FROM airports GROUP BY airportcode ORDER BY count(DestAirport) DESC LIMIT 1
self correction:
SELECT AirportCode FROM airports GROUP BY AirportCode ORDER BY COUNT(*) DESC LIMIT 1

index is 226
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
What is the airport code of the airport with the most flights?
schema_links:
What is the airport code of the airport with the most flights? | flights : flights.sourceairport , flights.destairport , flights.flightno , flights.airline , flights.* | airports : airports.airportcode , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ order by count ( _ ) desc limit _ | select airports.airportcode from flights group by flights.destairport order by count ( flights.destairport ) desc limit 1
SQL = SELECT airportcode FROM flights GROUP BY destairport ORDER BY count(destairport) DESC LIMIT 1
natsql:
select _ from _ order by count ( _ ) desc limit _ | select airports.airportcode from flights group by flights.destairport order by count ( flights.destairport ) desc limit 1

SQL:
SELECT airportcode FROM flights GROUP BY destairport ORDER BY count(destairport) DESC LIMIT 1
self correction:
SELECT airports.AirportCode FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.AirportCode ORDER BY COUNT(flights.DestAirport) DESC LIMIT 1

index is 227
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
What is the code of airport that has fewest number of flights?
schema_links:
What is the code of airport that has fewest number of flights? | flights : flights.flightno , flights.sourceairport , flights.destairport , flights.airline , flights.* | airports : airports.airportcode , airports.airportname , airports.country , airports.city , airports.countryabbrev , airports.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ order by count ( _ ) limit _ | select airports.airportcode from flights join airports on flights.destairport = airports.airportcode group by airports.airportcode order by count(flights.flightno) limit 1
SQL = SELECT airportcode FROM flights JOIN airports ON flights.destairport = airports.airportcode GROUP BY airports.airportcode ORDER BY count(flights.flightno) LIMIT 1
natsql:
select _ from _ order by count ( _ ) limit _ | select airports.airportcode from flights join airports on flights.destairport = airports.airportcode group by airports.airportcode order by count(flights.flightno) limit 1

SQL:
SELECT airportcode FROM flights JOIN airports ON flights.destairport = airports.airportcode GROUP BY airports.airportcode ORDER BY count(flights.flightno) LIMIT 1
self correction:
SELECT airports.AirportCode  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  GROUP BY airports.AirportCode  ORDER BY COUNT(flights.FlightNo) ASC  LIMIT 1

index is 228
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
Give the code of the airport with the least flights.
schema_links:
Give the code of the airport with the least flights. | flights : flights.sourceairport , flights.destairport , flights.flightno , flights.airline , flights.* | airports : airports.airportcode , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ order by count ( _ ) asc limit _ | select airports.airportcode from flights join airports on flights.destairport = airports.airportcode group by airports.airportcode order by count(*) asc limit 1
SQL = SELECT airportcode FROM flights JOIN airports ON flights.destairport = airports.airportcode GROUP BY airports.airportcode ORDER BY count(*) ASC LIMIT 1
natsql:
select _ from _ order by count ( _ ) asc limit _ | select airports.airportcode from flights join airports on flights.destairport = airports.airportcode group by airports.airportcode order by count(*) asc limit 1

SQL:
SELECT airportcode FROM flights JOIN airports ON flights.destairport = airports.airportcode GROUP BY airports.airportcode ORDER BY count(*) ASC LIMIT 1
self correction:
SELECT airports.AirportCode  FROM airports  JOIN flights ON flights.DestAirport = airports.AirportCode  GROUP BY airports.AirportCode  ORDER BY COUNT(*) ASC  LIMIT 1

index is 229
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1
Which airline has most number of flights?
schema_links:
Which airline has most number of flights? | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.airline , flights.flightno , flights.destairport , flights.sourceairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select airlines.airline from flights group by airlines.airline order by count ( flights.airline ) desc limit 1
SQL = SELECT airline FROM flights GROUP BY airline ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select airlines.airline from flights group by airlines.airline order by count ( flights.airline ) desc limit 1

SQL:
SELECT airline FROM flights GROUP BY airline ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT airline, COUNT(*) AS flight_count FROM flights GROUP BY airline ORDER BY flight_count DESC LIMIT 1

index is 230
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1
What airline serves the most flights?
schema_links:
What airline serves the most flights? | airlines : airlines.airline , airlines.uid , airlines.abbreviation , airlines.country , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.airportname , airports.country , airports.airportcode , airports.countryabbrev , airports.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select airlines.airline from flights join airlines on flights.airline = airlines.abbreviation group by airlines.airline order by count(*) desc limit 1
SQL = SELECT airline FROM flights JOIN airlines ON flights.airline = airlines.abbreviation GROUP BY airlines.airline ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select airlines.airline from flights join airlines on flights.airline = airlines.abbreviation group by airlines.airline order by count(*) desc limit 1

SQL:
SELECT airline FROM flights JOIN airlines ON flights.airline = airlines.abbreviation GROUP BY airlines.airline ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation GROUP BY airlines.Airline ORDER BY COUNT(*) DESC LIMIT 1

index is 231
SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1
Find the abbreviation and country of the airline that has fewest number of flights?
schema_links:
Find the abbreviation and country of the airline that has fewest number of flights? | airlines : airlines.abbreviation , airlines.country , airlines.airline , airlines.uid , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select _ , _ from _ where _ = ( select min ( count ( * ) ) from _ group by _ ) | select airlines.abbreviation , airlines.country from flights join airlines on flights.airline = airlines.airline group by airlines.abbreviation , airlines.country having count ( * ) = ( select min ( count ( * ) ) from flights group by airline )
SQL = SELECT abbreviation ,  country FROM airlines WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM flights GROUP BY airline))
natsql:
select _ , _ from _ where _ = ( select min ( count ( * ) ) from _ group by _ ) | select airlines.abbreviation , airlines.country from flights join airlines on flights.airline = airlines.airline group by airlines.abbreviation , airlines.country having count ( * ) = ( select min ( count ( * ) ) from flights group by airline )

SQL:
SELECT abbreviation ,  country FROM airlines WHERE airline IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM flights GROUP BY airline))
self correction:
SELECT abbreviation, country  FROM airlines  WHERE uid IN (   SELECT airline    FROM flights    GROUP BY airline    HAVING COUNT(*) = (     SELECT MIN(COUNT(*))      FROM flights      GROUP BY airline   ) )

index is 232
SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1
What is the abbreviation of the airilne has the fewest flights and what country is it in?
schema_links:
What is the abbreviation of the airilne has the fewest flights and what country is it in? | airlines : airlines.abbreviation , airlines.country , airlines.airline , airlines.uid , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev , airports.*
natsql and SQL generation:
select _ , _ from _ where _ = ( select min ( count ( _ ) ) from _ group by _ ) | select airlines.abbreviation , airlines.country from flights join airlines on flights.airline = airlines.uid group by airlines.abbreviation , airlines.country having count ( flights.* ) = ( select min ( count ( flights.* ) ) from flights group by flights.airline )
SQL = SELECT airlines.abbreviation , airlines.country FROM flights JOIN airlines ON flights.airline  =  airlines.uid GROUP BY airlines.abbreviation , airlines.country HAVING count(*)  =  (SELECT min(count(*)) FROM flights GROUP BY airline)
natsql:
select _ , _ from _ where _ = ( select min ( count ( _ ) ) from _ group by _ ) | select airlines.abbreviation , airlines.country from flights join airlines on flights.airline = airlines.uid group by airlines.abbreviation , airlines.country having count ( flights.* ) = ( select min ( count ( flights.* ) ) from flights group by flights.airline )

SQL:
SELECT airlines.abbreviation , airlines.country FROM flights JOIN airlines ON flights.airline  =  airlines.uid GROUP BY airlines.abbreviation , airlines.country HAVING count(*)  =  (SELECT min(count(*)) FROM flights GROUP BY airline)
self correction:
SELECT airlines.abbreviation, airlines.country FROM flights JOIN airlines ON flights.airline = airlines.uid GROUP BY airlines.abbreviation, airlines.country HAVING count(*) = (     SELECT COUNT(*)     FROM flights     GROUP BY airline     ORDER BY COUNT(*) ASC     LIMIT 1 )

index is 233
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"
What are airlines that have some flight departing from airport 'AHD'?
schema_links:
What are airlines that have some flight departing from airport 'AHD'? | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.sourceairport ( AHD ) , flights.destairport ( AHD ) , flights.airline , flights.flightno , flights.* | airports : airports.airportcode ( AHD ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.*
natsql and SQL generation:
select _ from _ where @.@ = 'AHD' | select distinct airlines.airline from airlines where exists ( select 1 from flights where flights.sourceairport = 'AHD' and flights.airline = airlines.uid )
SQL = SELECT DISTINCT airline FROM airlines WHERE EXISTS (SELECT 1 FROM flights WHERE sourceairport = 'AHD' AND airline = uid)
natsql:
select _ from _ where @.@ = 'AHD' | select distinct airlines.airline from airlines where exists ( select 1 from flights where flights.sourceairport = 'AHD' and flights.airline = airlines.uid )

SQL:
SELECT DISTINCT airline FROM airlines WHERE EXISTS (SELECT 1 FROM flights WHERE sourceairport = 'AHD' AND airline = uid)
self correction:
SELECT DISTINCT Airline  FROM airlines  WHERE EXISTS (     SELECT 1      FROM flights      WHERE SourceAirport = 'AHD'      AND Airline = airlines.uid )

index is 234
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"
Which airlines have a flight with source airport AHD?
schema_links:
Which airlines have a flight with source airport AHD? | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.sourceairport ( AHD ) , flights.airline , flights.destairport ( AHD ) , flights.flightno , flights.* | airports : airports.airportcode ( AHD ) , airports.city , airports.country , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select _ from _ where _ = 'AHD' | select airlines.airline from airlines where exists ( select * from flights where flights.sourceairport = 'AHD' and flights.airline = airlines.airline )
SQL = SELECT airline FROM airlines WHERE EXISTS (SELECT * FROM flights WHERE sourceairport = 'AHD' AND airline = airlines.airline)
natsql:
select _ from _ where _ = 'AHD' | select airlines.airline from airlines where exists ( select * from flights where flights.sourceairport = 'AHD' and flights.airline = airlines.airline )

SQL:
SELECT airline FROM airlines WHERE EXISTS (SELECT * FROM flights WHERE sourceairport = 'AHD' AND airline = airlines.airline)
self correction:
SELECT airlines.Airline FROM airlines WHERE EXISTS (   SELECT *   FROM flights   WHERE flights.SourceAirport = 'AHD' AND flights.Airline = airlines.Airline )

index is 235
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"
What are airlines that have flights arriving at airport 'AHD'?
schema_links:
What are airlines that have flights arriving at airport 'AHD'? | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.sourceairport ( AHD ) , flights.destairport ( AHD ) , flights.airline , flights.flightno , flights.* | airports : airports.airportcode ( AHD ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.*
natsql and SQL generation:
select distinct _ from _ where _ = 'AHD' | select distinct airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.destairport = 'AHD'
SQL = SELECT DISTINCT airline FROM airlines JOIN flights ON airlines.uid = flights.airline WHERE flights.destairport = 'AHD'
natsql:
select distinct _ from _ where _ = 'AHD' | select distinct airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.destairport = 'AHD'

SQL:
SELECT DISTINCT airline FROM airlines JOIN flights ON airlines.uid = flights.airline WHERE flights.destairport = 'AHD'
self correction:
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD'

index is 236
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"
Which airlines have a flight with destination airport AHD?
schema_links:
Which airlines have a flight with destination airport AHD? | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.destairport ( AHD ) , flights.airline , flights.flightno , flights.sourceairport ( AHD ) , flights.* | airports : airports.airportcode ( AHD ) , airports.city , airports.country , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select _ from _ where _ = _ | select airlines.airline from airlines where flights.destairport = 'AHD'
SQL = SELECT airline FROM airlines WHERE EXISTS (SELECT * FROM flights WHERE destairport = 'AHD' AND airlines.uid = flights.airline)
natsql:
select _ from _ where _ = _ | select airlines.airline from airlines where flights.destairport = 'AHD'

SQL:
SELECT airline FROM airlines WHERE EXISTS (SELECT * FROM flights WHERE destairport = 'AHD' AND airlines.uid = flights.airline)
self correction:
SELECT airline FROM airlines  WHERE EXISTS (SELECT * FROM flights                JOIN airports ON flights.DestAirport = airports.AirportCode                WHERE airports.AirportCode = 'AHD' AND airlines.uid = flights.Airline)

index is 237
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
Find all airlines that have flights from both airports 'APG' and 'CVO'.
schema_links:
Find all airlines that have flights from both airports 'APG' and 'CVO'. | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | airports : airports.airportcode ( APG , CVO ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | flights : flights.sourceairport ( APG , CVO ) , flights.airline , flights.destairport ( APG , CVO ) , flights.flightno , flights.*
natsql and SQL generation:
select _ from _ where _ in ( _ , _ ) group by _ having count ( distinct _ ) = _ | select airlines.airline from flights join airlines on flights.airline = airlines.uid where flights.sourceairport in ('APG', 'CVO') and flights.destairport in ('APG', 'CVO') group by airlines.airline having count(distinct flights.sourceairport) = 2
SQL = SELECT airline FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE flights.sourceairport IN ('APG', 'CVO') AND flights.destairport IN ('APG', 'CVO') GROUP BY airline HAVING COUNT(DISTINCT flights.sourceairport) = 2
natsql:
select _ from _ where _ in ( _ , _ ) group by _ having count ( distinct _ ) = _ | select airlines.airline from flights join airlines on flights.airline = airlines.uid where flights.sourceairport in ('APG', 'CVO') and flights.destairport in ('APG', 'CVO') group by airlines.airline having count(distinct flights.sourceairport) = 2

SQL:
SELECT airline FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE flights.sourceairport IN ('APG', 'CVO') AND flights.destairport IN ('APG', 'CVO') GROUP BY airline HAVING COUNT(DISTINCT flights.sourceairport) = 2
self correction:
SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.SourceAirport IN ('APG', 'CVO') AND flights.DestAirport IN ('APG', 'CVO') GROUP BY airlines.Airline HAVING COUNT(DISTINCT flights.SourceAirport) = 2

index is 238
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
Which airlines have departing flights from both APG and CVO airports?
schema_links:
Which airlines have departing flights from both APG and CVO airports? | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.sourceairport ( APG , CVO ) , flights.airline , flights.destairport ( APG , CVO ) , flights.flightno , flights.* | airports : airports.airportcode ( APG , CVO ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.*
natsql and SQL generation:
select _ from _ where _ in ( _ , _ ) group by _ having count ( distinct _ ) = _ | select airlines.airline from airlines where airlines.uid in ( select flights.airline from flights where flights.sourceairport in ( 'APG' , 'CVO' ) and flights.destairport in ( 'APG' , 'CVO' ) ) group by airlines.airline having count ( distinct flights.sourceairport , flights.destairport ) = 2
SQL = SELECT airline FROM airlines WHERE uid IN (SELECT airline FROM flights WHERE sourceairport IN ('APG', 'CVO') AND destairport IN ('APG', 'CVO')) GROUP BY airline HAVING count(DISTINCT sourceairport, destairport) = 2
natsql:
select _ from _ where _ in ( _ , _ ) group by _ having count ( distinct _ ) = _ | select airlines.airline from airlines where airlines.uid in ( select flights.airline from flights where flights.sourceairport in ( 'APG' , 'CVO' ) and flights.destairport in ( 'APG' , 'CVO' ) ) group by airlines.airline having count ( distinct flights.sourceairport , flights.destairport ) = 2

SQL:
SELECT airline FROM airlines WHERE uid IN (SELECT airline FROM flights WHERE sourceairport IN ('APG', 'CVO') AND destairport IN ('APG', 'CVO')) GROUP BY airline HAVING count(DISTINCT sourceairport, destairport) = 2
self correction:
SELECT airline  FROM airlines  WHERE uid IN (     SELECT airline      FROM flights      WHERE sourceairport IN ('APG', 'CVO')      AND destairport IN ('APG', 'CVO') )  GROUP BY airline  HAVING count(DISTINCT sourceairport) = 2

index is 239
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"
Find all airlines that have flights from airport 'CVO' but not from 'APG'.
schema_links:
Find all airlines that have flights from airport 'CVO' but not from 'APG'. | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.sourceairport ( APG , CVO ) , flights.airline , flights.destairport ( APG , CVO ) , flights.flightno , flights.* | airports : airports.airportcode ( APG , CVO ) , airports.airportname , airports.country , airports.city , airports.countryabbrev , airports.*
natsql and SQL generation:
select _ from _ where _ and _ and _ not in ( select _ from _ where _ ) | select airlines.airline from flights join airlines on flights.airline = airlines.uid where flights.sourceairport = 'CVO' and flights.airline not in ( select airline from flights where flights.sourceairport = 'APG' )
natsql:
select _ from _ where _ and _ and _ not in ( select _ from _ where _ ) | select airlines.airline from flights join airlines on flights.airline = airlines.uid where flights.sourceairport = 'CVO' and flights.airline not in ( select airline from flights where flights.sourceairport = 'APG' )
SQL:
SELECT airline FROM airlines WHERE uid IN (SELECT airline FROM flights WHERE sourceairport = 'CVO') AND uid NOT IN (SELECT airline FROM flights WHERE sourceairport = 'APG')
self correction:
SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights WHERE SourceAirport = 'CVO') AND uid NOT IN (SELECT Airline FROM flights WHERE SourceAirport = 'APG')

index is 240
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"
Which airlines have departures from CVO but not from APG airports?
schema_links:
Which airlines have departures from CVO but not from APG airports? | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | airports : airports.airportcode ( APG , CVO ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | flights : flights.sourceairport ( APG , CVO ) , flights.destairport ( APG , CVO ) , flights.airline , flights.flightno , flights.*
natsql and SQL generation:
select distinct _ from _ where _ and _ | select distinct airlines.airline from airlines where airports.airportcode = 'CVO' and airlines.airline not in (select distinct flights.airline from flights where airports.airportcode = 'APG')
SQL = SELECT DISTINCT airline FROM airlines WHERE airportcode = 'CVO' AND airline NOT IN (SELECT DISTINCT airline FROM flights WHERE airportcode = 'APG')
natsql:
select distinct _ from _ where _ and _ | select distinct airlines.airline from airlines where airports.airportcode = 'CVO' and airlines.airline not in (select distinct flights.airline from flights where airports.airportcode = 'APG')

SQL:
SELECT DISTINCT airline FROM airlines WHERE airportcode = 'CVO' AND airline NOT IN (SELECT DISTINCT airline FROM flights WHERE airportcode = 'APG')
self correction:
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'CVO' AND airlines.Airline NOT IN (   SELECT DISTINCT airlines.Airline   FROM airlines   JOIN flights ON airlines.uid = flights.Airline   JOIN airports ON flights.SourceAirport = airports.AirportCode   WHERE airports.AirportCode = 'APG' ) GROUP BY airlines.Airline

index is 241
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10
Find all airlines that have at least 10 flights.
schema_links:
Find all airlines that have at least 10 flights. | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.airline , airlines.uid , airlines.abbreviation , airlines.country , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select _ from _ group by _ having count ( _ ) >= _ | select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline having count(flights.flightno) >= 10
SQL = SELECT airline FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY airlines.airline HAVING count(flights.flightno) >= 10
natsql:
select _ from _ group by _ having count ( _ ) >= _ | select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline having count(flights.flightno) >= 10

SQL:
SELECT airline FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY airlines.airline HAVING count(flights.flightno) >= 10
self correction:
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING count(flights.FlightNo) >= 10

index is 242
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10
Which airlines have at least 10 flights?
schema_links:
Which airlines have at least 10 flights? | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.airline , airlines.uid , airlines.abbreviation , airlines.country , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select _ from _ group by _ having count ( _ ) >= _ | select airlines.airline from flights join airlines on flights.airline = airlines.airline group by airlines.airline having count (flights.flightno) >= 10
SQL = SELECT airline FROM flights JOIN airlines ON flights.airline = airlines.airline GROUP BY airlines.airline HAVING count(flightno) >= 10
natsql:
select _ from _ group by _ having count ( _ ) >= _ | select airlines.airline from flights join airlines on flights.airline = airlines.airline group by airlines.airline having count (flights.flightno) >= 10

SQL:
SELECT airline FROM flights JOIN airlines ON flights.airline = airlines.airline GROUP BY airlines.airline HAVING count(flightno) >= 10
self correction:
SELECT airlines.Airline  FROM flights  JOIN airlines ON flights.Airline = airlines.Airline  GROUP BY airlines.Airline  HAVING COUNT(flights.FlightNo) >= 10

index is 243
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200
Find all airlines that have fewer than 200 flights.
schema_links:
Find all airlines that have fewer than 200 flights. | flights : flights.airline , flights.flightno , flights.destairport , flights.sourceairport , flights.* | airlines : airlines.airline , airlines.uid , airlines.abbreviation , airlines.country , airlines.* | airports : airports.city , airports.airportcode , airports.country , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select _ from _ where count ( _ ) < _ group by _ | select airlines.airline from flights join airlines on flights.airline = airlines.airline group by airlines.airline having count(flights.flightno) < 200
SQL = SELECT airline FROM flights JOIN airlines ON flights.airline = airlines.airline GROUP BY airlines.airline HAVING count(flights.flightno)  <  200
natsql:
select _ from _ where count ( _ ) < _ group by _ | select airlines.airline from flights join airlines on flights.airline = airlines.airline group by airlines.airline having count(flights.flightno) < 200

SQL:
SELECT airline FROM flights JOIN airlines ON flights.airline = airlines.airline GROUP BY airlines.airline HAVING count(flights.flightno)  <  200
self correction:
SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation GROUP BY airlines.Airline HAVING COUNT(flights.FlightNo) < 200

index is 244
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200
Which airlines have less than 200 flights?
schema_links:
Which airlines have less than 200 flights? | airlines : airlines.airline , airlines.uid , airlines.abbreviation , airlines.country , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select _ from _ where count ( _ ) < _ group by _ | select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline having count(flights.*) < 200
SQL = SELECT airline FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY airline HAVING count(*) < 200
natsql:
select _ from _ where count ( _ ) < _ group by _ | select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline having count(flights.*) < 200

SQL:
SELECT airline FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY airline HAVING count(*) < 200
self correction:
SELECT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  GROUP BY airlines.Airline  HAVING COUNT(*) < 200

index is 245
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"
What are flight numbers of Airline "United Airlines"?
schema_links:
What are flight numbers of Airline "United Airlines"? | airlines : airlines.airline ( United Airlines ) , airlines.country , airlines.uid , airlines.abbreviation , airlines.* | flights : flights.flightno , flights.airline , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select _ from _ where @.@ = "United Airlines" | select flights.flightno from flights where flights.airline = "United Airlines"
SQL = SELECT flightno FROM flights WHERE airline = "United Airlines"
natsql:
select _ from _ where @.@ = "United Airlines" | select flights.flightno from flights where flights.airline = "United Airlines"

SQL:
SELECT flightno FROM flights WHERE airline = "United Airlines"
self correction:
SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = "United Airlines"

index is 246
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"
Which flight numbers correspond to United Airlines flights?
schema_links:
Which flight numbers correspond to United Airlines flights? | airlines : airlines.airline ( United Airlines ) , airlines.country , airlines.uid , airlines.abbreviation , airlines.* | flights : flights.flightno , flights.airline , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select _ from _ where _ | select flights.flightno from flights where flights.airline = 'United Airlines'
SQL = SELECT flightno FROM flights WHERE airline = 'United Airlines'
natsql:
select _ from _ where _ | select flights.flightno from flights where flights.airline = 'United Airlines'

SQL:
SELECT flightno FROM flights WHERE airline = 'United Airlines'
self correction:
SELECT flightno FROM flights WHERE Airline = 'United Airlines'

index is 247
SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"
What are flight numbers of flights departing from Airport "APG"?
schema_links:
What are flight numbers of flights departing from Airport "APG"? | flights : flights.flightno , flights.sourceairport ( APG ) , flights.destairport ( APG ) , flights.airline , flights.* | airports : airports.airportcode ( APG ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ where @.@ = _ | select flights.flightno from flights where flights.sourceairport = 'APG'
SQL = SELECT flightno FROM flights WHERE sourceairport = 'APG'
natsql:
select _ from _ where @.@ = _ | select flights.flightno from flights where flights.sourceairport = 'APG'

SQL:
SELECT flightno FROM flights WHERE sourceairport = 'APG'
self correction:
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'APG'

index is 248
SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"
Give the flight numbers of flights leaving from APG.
schema_links:
Give the flight numbers of flights leaving from APG. | flights : flights.flightno , flights.sourceairport ( APG ) , flights.destairport ( APG ) , flights.airline , flights.* | airports : airports.airportcode ( APG ) , airports.city , airports.country , airports.airportname , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ where @.@ = @ | select flights.flightno from flights where flights.sourceairport = 'APG'
natsql:
select _ from _ where @.@ = @ | select flights.flightno from flights where flights.sourceairport = 'APG'
SQL:
SELECT flightno FROM flights WHERE sourceairport = 'APG'
self correction:
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'APG'

index is 249
SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"
What are flight numbers of flights arriving at Airport "APG"?
schema_links:
What are flight numbers of flights arriving at Airport "APG"? | flights : flights.flightno , flights.destairport ( APG ) , flights.sourceairport ( APG ) , flights.airline , flights.* | airports : airports.airportcode ( APG ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ where _ = "APG" | select flights.flightno from flights where flights.destairport = "APG"
SQL = SELECT flightno FROM flights WHERE destairport = "APG"
natsql:
select _ from _ where _ = "APG" | select flights.flightno from flights where flights.destairport = "APG"

SQL:
SELECT flightno FROM flights WHERE destairport = "APG"
self correction:
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = "APG"

index is 250
SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"
Give the flight numbers of flights landing at APG.
schema_links:
Give the flight numbers of flights landing at APG. | flights : flights.flightno , flights.sourceairport ( APG ) , flights.destairport ( APG ) , flights.airline , flights.* | airports : airports.airportcode ( APG ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ where @.@ = _ | select flights.flightno from flights where flights.destairport = 'APG'
SQL = SELECT flightno FROM flights WHERE destairport = 'APG'
natsql:
select _ from _ where @.@ = _ | select flights.flightno from flights where flights.destairport = 'APG'

SQL:
SELECT flightno FROM flights WHERE destairport = 'APG'
self correction:
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName = 'APG'

index is 251
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
What are flight numbers of flights departing from City "Aberdeen "?
schema_links:
What are flight numbers of flights departing from City "Aberdeen "? | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.flightno , flights.airline , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ where @ = "Aberdeen" | select flights.flightno from flights where flights.sourceairport = (select airports.airportcode from airports where airports.city = "Aberdeen")
SQL = SELECT flightno FROM flights WHERE sourceairport  =  (SELECT airportcode FROM airports WHERE city  =  "Aberdeen")
natsql:
select _ from _ where @ = "Aberdeen" | select flights.flightno from flights where flights.sourceairport = (select airports.airportcode from airports where airports.city = "Aberdeen")

SQL:
SELECT flightno FROM flights WHERE sourceairport  =  (SELECT airportcode FROM airports WHERE city  =  "Aberdeen")
self correction:
SELECT flightno FROM flights  JOIN airports ON flights.sourceairport = airports.airportcode  WHERE airports.city = "Aberdeen"

index is 252
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Give the flight numbers of flights leaving from Aberdeen.
schema_links:
Give the flight numbers of flights leaving from Aberdeen. | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.flightno , flights.sourceairport , flights.destairport , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ where _ = 'Aberdeen' | select flights.flightno from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'Aberdeen'
SQL = SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'
natsql:
select _ from _ where _ = 'Aberdeen' | select flights.flightno from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'Aberdeen'

SQL:
SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'
self correction:
SELECT flightno  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen'

index is 253
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
What are flight numbers of flights arriving at City "Aberdeen"?
schema_links:
What are flight numbers of flights arriving at City "Aberdeen"? | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.flightno , flights.destairport , flights.airline , flights.sourceairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ where _ = _ | select flights.flightno from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen'
SQL = SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'
natsql:
select _ from _ where _ = _ | select flights.flightno from flights join airports on flights.destairport = airports.airportcode where airports.city = 'Aberdeen'

SQL:
SELECT flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'
self correction:
SELECT flights.flightno  FROM flights  JOIN airports ON flights.destairport = airports.airportcode  WHERE airports.city = 'Aberdeen'

index is 254
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Give the flight numbers of flights arriving in Aberdeen.
schema_links:
Give the flight numbers of flights arriving in Aberdeen. | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.flightno , flights.sourceairport , flights.destairport , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ where @.@ = 'Aberdeen' | select flights.flightno from flights where flights.destairport = 'Aberdeen'
SQL = SELECT flightno FROM flights WHERE destairport = 'Aberdeen'
natsql:
select _ from _ where @.@ = 'Aberdeen' | select flights.flightno from flights where flights.destairport = 'Aberdeen'

SQL:
SELECT flightno FROM flights WHERE destairport = 'Aberdeen'
self correction:
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'

index is 255
SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"
Find the number of flights landing in the city of Aberdeen or Abilene.
schema_links:
Find the number of flights landing in the city of Aberdeen or Abilene. | airports : airports.city ( Aberdeen , Abilene ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.destairport , flights.flightno , flights.sourceairport , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select count ( distinct _ ) from _ where @.@ = _ or @.@ = _ | select count ( distinct flights.flightno ) from flights where flights.destairport = 'Aberdeen' or flights.destairport = 'Abilene'
SQL = SELECT COUNT(DISTINCT flightno) FROM flights WHERE destairport = 'Aberdeen' OR destairport = 'Abilene'
natsql:
select count ( distinct _ ) from _ where @.@ = _ or @.@ = _ | select count ( distinct flights.flightno ) from flights where flights.destairport = 'Aberdeen' or flights.destairport = 'Abilene'

SQL:
SELECT COUNT(DISTINCT flightno) FROM flights WHERE destairport = 'Aberdeen' OR destairport = 'Abilene'
self correction:
SELECT COUNT(DISTINCT FlightNo)  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen' OR airports.City = 'Abilene'

index is 256
SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"
How many flights land in Aberdeen or Abilene?
schema_links:
How many flights land in Aberdeen or Abilene? | airports : airports.city ( Aberdeen , Abilene ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.destairport , flights.flightno , flights.airline , flights.sourceairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select count ( _ ) from _ where _ in ( _ , _ ) | select count ( * ) from flights where destairport in ( 'Aberdeen' , 'Abilene' )
SQL = SELECT count(*) FROM flights WHERE destairport IN ('Aberdeen', 'Abilene')
natsql:
select count ( _ ) from _ where _ in ( _ , _ ) | select count ( * ) from flights where destairport in ( 'Aberdeen' , 'Abilene' )

SQL:
SELECT count(*) FROM flights WHERE destairport IN ('Aberdeen', 'Abilene')
self correction:
SELECT COUNT(*)  FROM flights  WHERE destairport IN (SELECT AirportCode FROM airports WHERE AirportName IN ('Aberdeen', 'Abilene'))

index is 257
SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
Find the name of airports which do not have any flight in and out.
schema_links:
Find the name of airports which do not have any flight in and out. | airports : airports.airportname , airports.airportcode , airports.country , airports.city , airports.countryabbrev , airports.* | flights : flights.sourceairport , flights.destairport , flights.flightno , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ ) | select airports.airportname from airports where airports.airportcode not in ( select flights.sourceairport from flights union select flights.destairport from flights )
SQL = SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)
natsql:
select _ from _ where _ not in ( select _ from _ ) | select airports.airportname from airports where airports.airportcode not in ( select flights.sourceairport from flights union select flights.destairport from flights )

SQL:
SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)
self correction:
SELECT AirportName FROM airports WHERE AirportCode NOT IN (   SELECT SourceAirport FROM flights   UNION   SELECT DestAirport FROM flights )

index is 258
SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
Which airports do not have departing or arriving flights?
schema_links:
Which airports do not have departing or arriving flights? | airports : airports.airportname , airports.country , airports.airportcode , airports.city , airports.countryabbrev , airports.* | flights : flights.destairport , flights.sourceairport , flights.flightno , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ ) or _ not in ( select _ from _ ) | select airports.airportname from airports where airports.airportcode not in ( select flights.sourceairport from flights ) or airports.airportcode not in ( select flights.destairport from flights )
SQL = SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights) OR airportcode NOT IN (SELECT destairport FROM flights)
natsql:
select _ from _ where _ not in ( select _ from _ ) or _ not in ( select _ from _ ) | select airports.airportname from airports where airports.airportcode not in ( select flights.sourceairport from flights ) or airports.airportcode not in ( select flights.destairport from flights )

SQL:
SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights) OR airportcode NOT IN (SELECT destairport FROM flights)
self correction:
SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights)

index is 259
SELECT count(*) FROM employee
How many employees are there?
schema_links:
How many employees are there? | employee : employee.employee_id , employee.name , employee.age , employee.city , employee.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.*
natsql and SQL generation:
select count ( * ) from employee | select count(*) FROM employee
SQL = SELECT count(*) FROM employee
natsql:
select count ( * ) from employee | select count(*) FROM employee

SQL:
SELECT count(*) FROM employee
self correction:
SELECT count(*) FROM employee

index is 260
SELECT count(*) FROM employee
Count the number of employees
schema_links:
Count the number of employees | employee : employee.employee_id , employee.name , employee.age , employee.city , employee.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select count ( * ) from employee
SQL = SELECT count(*) FROM employee
natsql:
select count ( * ) from employee

SQL:
SELECT count(*) FROM employee
self correction:
SELECT COUNT(*) FROM employee

index is 261
SELECT name FROM employee ORDER BY age
Sort employee names by their age in ascending order.
schema_links:
Sort employee names by their age in ascending order. | employee : employee.name , employee.age , employee.employee_id , employee.city , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select _ from _ order by _ asc | select employee.name from employee order by employee.age asc
SQL = SELECT name FROM employee ORDER BY age ASC
natsql:
select _ from _ order by _ asc | select employee.name from employee order by employee.age asc

SQL:
SELECT name FROM employee ORDER BY age ASC
self correction:
SELECT employee.Name FROM employee ORDER BY employee.Age ASC

index is 262
SELECT name FROM employee ORDER BY age
List the names of employees and sort in ascending order of age.
schema_links:
List the names of employees and sort in ascending order of age. | employee : employee.name , employee.age , employee.employee_id , employee.city , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select _ from _ order by _ asc | select employee.name from employee order by employee.age asc
SQL = SELECT name FROM employee ORDER BY age ASC
natsql:
select _ from _ order by _ asc | select employee.name from employee order by employee.age asc

SQL:
SELECT name FROM employee ORDER BY age ASC
self correction:
SELECT employee.Name  FROM employee  ORDER BY employee.Age ASC

index is 263
SELECT count(*) ,  city FROM employee GROUP BY city
What is the number of employees from each city?
schema_links:
What is the number of employees from each city? | employee : employee.city , employee.employee_id , employee.name , employee.age , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select @ , count ( _ ) from _ group by @ | select employee.city , count ( employee.employee_id ) from employee group by employee.city
SQL = SELECT city ,  COUNT(employee_id) FROM employee GROUP BY city
natsql:
select @ , count ( _ ) from _ group by @ | select employee.city , count ( employee.employee_id ) from employee group by employee.city

SQL:
SELECT city ,  COUNT(employee_id) FROM employee GROUP BY city
self correction:
SELECT city, COUNT(employee_id) AS employee_count FROM employee GROUP BY city

index is 264
SELECT count(*) ,  city FROM employee GROUP BY city
Count the number of employees for each city.
schema_links:
Count the number of employees for each city. | employee : employee.city , employee.employee_id , employee.name , employee.age , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select employee.city , count ( employee.employee_id ) from employee group by employee.city
SQL = SELECT city ,  COUNT(employee_id) FROM employee GROUP BY city
natsql:
select _ , count ( _ ) from _ group by _ | select employee.city , count ( employee.employee_id ) from employee group by employee.city

SQL:
SELECT city ,  COUNT(employee_id) FROM employee GROUP BY city
self correction:
SELECT city, COUNT(Employee_ID)  FROM employee  GROUP BY city

index is 265
SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1
Which cities do more than one employee under age 30 come from?
schema_links:
Which cities do more than one employee under age 30 come from? | employee : employee.age , employee.city , employee.employee_id , employee.name , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*
natsql and SQL generation:
select _ from _ where count ( distinct _ ) > _ and @.@ < _ group by _ | select employee.city from employee where count ( distinct employee.employee_id ) > 1 and employee.age < 30 group by employee.city
SQL = SELECT city FROM employee GROUP BY city HAVING count(DISTINCT employee_id)  >  1 AND age < 30
natsql:
select _ from _ where count ( distinct _ ) > _ and @.@ < _ group by _ | select employee.city from employee where count ( distinct employee.employee_id ) > 1 and employee.age < 30 group by employee.city

SQL:
SELECT city FROM employee GROUP BY city HAVING count(DISTINCT employee_id)  >  1 AND age < 30
self correction:
SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(DISTINCT employee_id) > 1

index is 266
SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1
Find the cities that have more than one employee under age 30.
schema_links:
Find the cities that have more than one employee under age 30. | employee : employee.age , employee.city , employee.employee_id , employee.name , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select _ from _ where count ( _ ) > _ and _ > _ group by _ | select employee.city from employee where count ( employee.employee_id ) > 1 and employee.age < 30 group by employee.city
SQL = SELECT city FROM employee GROUP BY city HAVING count(*)  >  1 AND age < 30
natsql:
select _ from _ where count ( _ ) > _ and _ > _ group by _ | select employee.city from employee where count ( employee.employee_id ) > 1 and employee.age < 30 group by employee.city

SQL:
SELECT city FROM employee GROUP BY city HAVING count(*)  >  1 AND age < 30
self correction:
SELECT employee.city  FROM employee  WHERE age < 30  GROUP BY employee.city  HAVING count(employee.Employee_ID) > 1

index is 267
SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION
Find the number of shops in each location.
schema_links:
Find the number of shops in each location. | shop : shop.location , shop.name , shop.district , shop.shop_id , shop.number_products , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*
natsql and SQL generation:
select count ( _ ) , _ from _ group by _ | select count ( shop.shop_id ) , shop.location from shop group by shop.location
SQL = SELECT count(shop_id), location FROM shop GROUP BY location
natsql:
select count ( _ ) , _ from _ group by _ | select count ( shop.shop_id ) , shop.location from shop group by shop.location

SQL:
SELECT count(shop_id), location FROM shop GROUP BY location
self correction:
SELECT COUNT(Shop_ID), Location FROM shop GROUP BY Location

index is 268
SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION
How many shops are there in each location?
schema_links:
How many shops are there in each location? | shop : shop.location , shop.shop_id , shop.name , shop.district , shop.number_products , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*
natsql and SQL generation:
select count ( distinct _ ) , _ from _ group by _ | select count ( distinct shop.shop_id ) , shop.location from shop group by shop.location
SQL = SELECT count(DISTINCT shop_id), location FROM shop GROUP BY location
natsql:
select count ( distinct _ ) , _ from _ group by _ | select count ( distinct shop.shop_id ) , shop.location from shop group by shop.location

SQL:
SELECT count(DISTINCT shop_id), location FROM shop GROUP BY location
self correction:
SELECT COUNT(DISTINCT shop_id) AS num_shops, location FROM shop GROUP BY location

index is 269
SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1
Find the manager name and district of the shop whose number of products is the largest.
schema_links:
Find the manager name and district of the shop whose number of products is the largest. | shop : shop.manager_name , shop.number_products , shop.district , shop.name , shop.shop_id , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select _ from _ where @.@ = max ( _ ) | select shop.manager_name , shop.district from shop where @.@ = max ( shop.number_products )
SQL = SELECT manager_name ,  district FROM shop WHERE number_products  =  (SELECT max(number_products) FROM shop)
natsql:
select _ from _ where @.@ = max ( _ ) | select shop.manager_name , shop.district from shop where @.@ = max ( shop.number_products )

SQL:
SELECT manager_name ,  district FROM shop WHERE number_products  =  (SELECT max(number_products) FROM shop)
self correction:
SELECT manager_name, district FROM shop WHERE number_products = (     SELECT max(number_products)      FROM shop )

index is 270
SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1
What are the manager name and district of the shop that sells the largest number of products?
schema_links:
What are the manager name and district of the shop that sells the largest number of products? | shop : shop.number_products , shop.manager_name , shop.district , shop.name , shop.shop_id , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select _ from _ where @.@ = max ( _ ) | select shop.manager_name , shop.district from shop where @.@ = max ( shop.number_products )
SQL = SELECT manager_name ,  district FROM shop WHERE number_products  =  (SELECT max(number_products) FROM shop)
natsql:
select _ from _ where @.@ = max ( _ ) | select shop.manager_name , shop.district from shop where @.@ = max ( shop.number_products )

SQL:
SELECT manager_name ,  district FROM shop WHERE number_products  =  (SELECT max(number_products) FROM shop)
self correction:
SELECT manager_name, district FROM shop WHERE number_products = (   SELECT MAX(number_products)   FROM shop )

index is 271
SELECT min(Number_products) ,  max(Number_products) FROM shop
find the minimum and maximum number of products of all stores.
schema_links:
find the minimum and maximum number of products of all stores. | shop : shop.number_products , shop.shop_id , shop.name , shop.district , shop.location , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select min ( _ ) , max ( _ ) from _
SQL = SELECT MIN(number_products) , MAX(number_products) FROM shop
natsql:
select min ( _ ) , max ( _ ) from _

SQL:
SELECT MIN(number_products) , MAX(number_products) FROM shop
self correction:
SELECT MIN(Number_products), MAX(Number_products) FROM shop

index is 272
SELECT min(Number_products) ,  max(Number_products) FROM shop
What are the minimum and maximum number of products across all the shops?
schema_links:
What are the minimum and maximum number of products across all the shops? | shop : shop.number_products , shop.shop_id , shop.name , shop.location , shop.district , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*
natsql and SQL generation:
select min ( _ ) , max ( _ ) from _ | select min ( shop.number_products ) , max ( shop.number_products ) from shop
SQL = SELECT MIN(number_products) , MAX(number_products) FROM shop
natsql:
select min ( _ ) , max ( _ ) from _ | select min ( shop.number_products ) , max ( shop.number_products ) from shop

SQL:
SELECT MIN(number_products) , MAX(number_products) FROM shop
self correction:
SELECT MIN(Number_products), MAX(Number_products) FROM shop

index is 273
SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC
Return the name, location and district of all shops in descending order of number of products.
schema_links:
Return the name, location and district of all shops in descending order of number of products. | shop : shop.number_products , shop.name , shop.location , shop.district , shop.shop_id , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select _ , _ , _ from _ order by _ desc | select shop.name , shop.location , shop.district from shop order by shop.number_products desc
SQL = SELECT name ,  location ,  district FROM shop ORDER BY number_products DESC
natsql:
select _ , _ , _ from _ order by _ desc | select shop.name , shop.location , shop.district from shop order by shop.number_products desc

SQL:
SELECT name ,  location ,  district FROM shop ORDER BY number_products DESC
self correction:
SELECT shop.name, shop.location, shop.district FROM shop ORDER BY shop.number_products DESC

index is 274
SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC
Sort all the shops by number products in descending order, and return the name, location and district of each shop.
schema_links:
Sort all the shops by number products in descending order, and return the name, location and district of each shop. | shop : shop.number_products , shop.name , shop.location , shop.district , shop.shop_id , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select _ , _ , _ from _ order by _ desc | select shop.name , shop.location , shop.district from shop order by shop.number_products desc
SQL = SELECT name , location , district FROM shop ORDER BY number_products DESC
natsql:
select _ , _ , _ from _ order by _ desc | select shop.name , shop.location , shop.district from shop order by shop.number_products desc

SQL:
SELECT name , location , district FROM shop ORDER BY number_products DESC
self correction:
SELECT name, location, district FROM shop ORDER BY number_products DESC

index is 275
SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
Find the names of stores whose number products is more than the average number of products.
schema_links:
Find the names of stores whose number products is more than the average number of products. | shop : shop.number_products , shop.name , shop.shop_id , shop.location , shop.manager_name , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select _ from _ where @.@ > avg ( _ ) | select shop.name from shop where shop.number_products > avg ( shop.number_products )
SQL = SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
natsql:
select _ from _ where @.@ > avg ( _ ) | select shop.name from shop where shop.number_products > avg ( shop.number_products )

SQL:
SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
self correction:
SELECT name FROM shop WHERE number_products > (     SELECT AVG(number_products)     FROM shop )

index is 276
SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
Which shops' number products is above the average? Give me the shop names.
schema_links:
Which shops' number products is above the average? Give me the shop names. | shop : shop.number_products , shop.name , shop.shop_id , shop.location , shop.district , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*
natsql and SQL generation:
select _ from _ where _ > avg ( _ ) | select shop.name from shop where shop.number_products > (SELECT avg(number_products) FROM shop)
SQL = SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
natsql:
select _ from _ where _ > avg ( _ ) | select shop.name from shop where shop.number_products > (SELECT avg(number_products) FROM shop)

SQL:
SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
self correction:
SELECT shop.Name FROM shop WHERE shop.Number_products > (SELECT AVG(Number_products) FROM shop)

index is 277
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1
find the name of employee who was awarded the most times in the evaluation.
schema_links:
find the name of employee who was awarded the most times in the evaluation. | employee : employee.name , employee.employee_id , employee.age , employee.city , employee.* | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus , evaluation.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*
natsql and SQL generation:
select _ from _ order by count ( _ ) desc limit _ | select employee.name from employee order by count ( evaluation.employee_id ) desc limit 1
SQL = SELECT name FROM employee ORDER BY (SELECT COUNT(*) FROM evaluation WHERE evaluation.employee_id = employee.employee_id) DESC LIMIT 1
natsql:
select _ from _ order by count ( _ ) desc limit _ | select employee.name from employee order by count ( evaluation.employee_id ) desc limit 1

SQL:
SELECT name FROM employee ORDER BY (SELECT COUNT(*) FROM evaluation WHERE evaluation.employee_id = employee.employee_id) DESC LIMIT 1
self correction:
SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.employee_id ORDER BY COUNT(*) DESC LIMIT 1

index is 278
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1
Which employee received the most awards in evaluations? Give me the employee name.
schema_links:
Which employee received the most awards in evaluations? Give me the employee name. | employee : employee.name , employee.employee_id , employee.age , employee.city , employee.* | evaluation : evaluation.year_awarded , evaluation.employee_id , evaluation.bonus , evaluation.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select employee.name from employee group by employee.name order by count ( evaluation.employee_id ) desc limit 1
SQL = SELECT name FROM employee GROUP BY name ORDER BY count(employee_id) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select employee.name from employee group by employee.name order by count ( evaluation.employee_id ) desc limit 1

SQL:
SELECT name FROM employee GROUP BY name ORDER BY count(employee_id) DESC LIMIT 1
self correction:
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.Name ORDER BY COUNT(evaluation.Employee_ID) DESC LIMIT 1

index is 279
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1
Find the name of the employee who got the highest one time bonus.
schema_links:
Find the name of the employee who got the highest one time bonus. | employee : employee.name , employee.employee_id , employee.age , employee.city , employee.* | evaluation : evaluation.bonus , evaluation.year_awarded , evaluation.employee_id , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.*
natsql and SQL generation:
select _ from _ order by _ desc limit _ | select employee.name from employee order by evaluation.bonus desc limit 1
SQL = SELECT name FROM employee ORDER BY bonus DESC LIMIT 1
natsql:
select _ from _ order by _ desc limit _ | select employee.name from employee order by evaluation.bonus desc limit 1

SQL:
SELECT name FROM employee ORDER BY bonus DESC LIMIT 1
self correction:
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1

index is 280
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1
Which employee received the biggest bonus? Give me the employee name.
schema_links:
Which employee received the biggest bonus? Give me the employee name. | employee : employee.name , employee.employee_id , employee.age , employee.city , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*
natsql and SQL generation:
select _ from _ order by _ desc limit _ | select employee.name from employee order by evaluation.bonus desc limit 1
SQL = SELECT name FROM employee ORDER BY bonus DESC LIMIT 1
natsql:
select _ from _ order by _ desc limit _ | select employee.name from employee order by evaluation.bonus desc limit 1

SQL:
SELECT name FROM employee ORDER BY bonus DESC LIMIT 1
self correction:
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1

index is 281
SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
Find the names of employees who never won any award in the evaluation.
schema_links:
Find the names of employees who never won any award in the evaluation. | employee : employee.name , employee.employee_id , employee.age , employee.city , employee.* | evaluation : evaluation.year_awarded , evaluation.bonus , evaluation.employee_id , evaluation.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ ) | select employee.name from employee where employee.employee_id not in ( select evaluation.employee_id from evaluation )
SQL = SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation)
natsql:
select _ from _ where _ not in ( select _ from _ ) | select employee.name from employee where employee.employee_id not in ( select evaluation.employee_id from evaluation )

SQL:
SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation)
self correction:
SELECT name  FROM employee  WHERE employee_id NOT IN (SELECT employee_id FROM evaluation)

index is 282
SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
What are the names of the employees who never received any evaluation?
schema_links:
What are the names of the employees who never received any evaluation? | employee : employee.name , employee.employee_id , employee.age , employee.city , employee.* | evaluation : evaluation.employee_id , evaluation.bonus , evaluation.year_awarded , evaluation.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ ) | select employee.name from employee where employee.employee_id not in ( select evaluation.employee_id from evaluation )
SQL = SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation)
natsql:
select _ from _ where _ not in ( select _ from _ ) | select employee.name from employee where employee.employee_id not in ( select evaluation.employee_id from evaluation )

SQL:
SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation)
self correction:
SELECT name  FROM employee  WHERE employee_id NOT IN (SELECT employee_id FROM evaluation)

index is 283
SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1
What is the name of the shop that is hiring the largest number of employees?
schema_links:
What is the name of the shop that is hiring the largest number of employees? | shop : shop.name , shop.shop_id , shop.manager_name , shop.location , shop.district , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select _ from _ order by count ( _ ) desc limit _ | select shop.name from shop order by count ( hiring.employee_id ) desc limit 1
SQL = SELECT name FROM shop ORDER BY (SELECT count(*) FROM hiring WHERE hiring.shop_id  =  shop.shop_id) DESC LIMIT 1
natsql:
select _ from _ order by count ( _ ) desc limit _ | select shop.name from shop order by count ( hiring.employee_id ) desc limit 1

SQL:
SELECT name FROM shop ORDER BY (SELECT count(*) FROM hiring WHERE hiring.shop_id  =  shop.shop_id) DESC LIMIT 1
self correction:
SELECT shop.name FROM shop JOIN hiring ON hiring.shop_id = shop.shop_id GROUP BY shop.name ORDER BY COUNT(hiring.employee_id) DESC LIMIT 1

index is 284
SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1
Which shop has the most employees? Give me the shop name.
schema_links:
Which shop has the most employees? Give me the shop name. | shop : shop.name , shop.shop_id , shop.manager_name , shop.location , shop.district , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | employee : employee.employee_id , employee.name , employee.age , employee.city , employee.* | evaluation : evaluation.employee_id , evaluation.bonus , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select shop.name from shop group by shop.name order by count ( shop.* ) desc limit 1
SQL = SELECT name FROM shop GROUP BY name ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select shop.name from shop group by shop.name order by count ( shop.* ) desc limit 1

SQL:
SELECT name FROM shop GROUP BY name ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1

index is 285
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
Find the name of the shops that do not hire any employee.
schema_links:
Find the name of the shops that do not hire any employee. | shop : shop.name , shop.shop_id , shop.location , shop.manager_name , shop.district , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select _ from _ where not exists ( select _ from _ where _ = _. _ ) | select shop.name from shop where not exists ( select * from hiring where shop.shop_id = hiring.shop_id )
SQL = SELECT name FROM shop WHERE NOT EXISTS (SELECT * FROM hiring WHERE shop.shop_id  =  hiring.shop_id)
natsql:
select _ from _ where not exists ( select _ from _ where _ = _. _ ) | select shop.name from shop where not exists ( select * from hiring where shop.shop_id = hiring.shop_id )

SQL:
SELECT name FROM shop WHERE NOT EXISTS (SELECT * FROM hiring WHERE shop.shop_id  =  hiring.shop_id)
self correction:
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)

index is 286
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
Which shops run with no employees? Find the shop names
schema_links:
Which shops run with no employees? Find the shop names | shop : shop.name , shop.shop_id , shop.location , shop.district , shop.manager_name , shop.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.* | employee : employee.employee_id , employee.name , employee.age , employee.city , employee.* | evaluation : evaluation.employee_id , evaluation.bonus , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select _ from _ where not exists ( select _ from _ where _ ) | select shop.name from shop where not exists ( select * from hiring where shop.shop_id = hiring.shop_id )
SQL = SELECT name FROM shop WHERE NOT EXISTS (SELECT * FROM hiring WHERE shop.Shop_ID  =  hiring.Shop_ID)
natsql:
select _ from _ where not exists ( select _ from _ where _ ) | select shop.name from shop where not exists ( select * from hiring where shop.shop_id = hiring.shop_id )

SQL:
SELECT name FROM shop WHERE NOT EXISTS (SELECT * FROM hiring WHERE shop.Shop_ID  =  hiring.Shop_ID)
self correction:
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Shop_ID IS NULL

index is 287
SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name
Find the number of employees hired in each shop; show the shop name as well.
schema_links:
Find the number of employees hired in each shop; show the shop name as well. | shop : shop.name , shop.manager_name , shop.shop_id , shop.location , shop.district , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select count ( distinct _ ) , _ from _ group by _ | select count ( distinct employee.employee_id ) , shop.name from employee join hiring on employee.employee_id = hiring.employee_id join shop on shop.shop_id = hiring.shop_id group by shop.name
SQL = SELECT COUNT(DISTINCT employee.Employee_ID), shop.Name FROM employee JOIN hiring ON employee.Employee_ID = hiring.Employee_ID JOIN shop ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name
natsql:
select count ( distinct _ ) , _ from _ group by _ | select count ( distinct employee.employee_id ) , shop.name from employee join hiring on employee.employee_id = hiring.employee_id join shop on shop.shop_id = hiring.shop_id group by shop.name

SQL:
SELECT COUNT(DISTINCT employee.Employee_ID), shop.Name FROM employee JOIN hiring ON employee.Employee_ID = hiring.Employee_ID JOIN shop ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name
self correction:
SELECT COUNT(DISTINCT employee.Employee_ID) AS hired_employees, shop.Name FROM employee JOIN hiring ON employee.Employee_ID = hiring.Employee_ID JOIN shop ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name

index is 288
SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name
For each shop, return the number of employees working there and the name of the shop.
schema_links:
For each shop, return the number of employees working there and the name of the shop. | shop : shop.name , shop.shop_id , shop.manager_name , shop.location , shop.district , shop.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.* | employee : employee.employee_id , employee.name , employee.age , employee.city , employee.* | evaluation : evaluation.employee_id , evaluation.bonus , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select count ( _ ) , _ from _ group by _ | select count ( employee.employee_id ) , shop.name from shop join hiring on shop.shop_id = hiring.shop_id join employee on hiring.employee_id = employee.employee_id group by shop.name
SQL = SELECT COUNT(employee.employee_id) , shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id GROUP BY shop.name
natsql:
select count ( _ ) , _ from _ group by _ | select count ( employee.employee_id ) , shop.name from shop join hiring on shop.shop_id = hiring.shop_id join employee on hiring.employee_id = employee.employee_id group by shop.name

SQL:
SELECT COUNT(employee.employee_id) , shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id GROUP BY shop.name
self correction:
SELECT COUNT(employee.employee_id) AS num_employees, shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id GROUP BY shop.shop_id, shop.name

index is 289
SELECT sum(bonus) FROM evaluation
What is total bonus given in all evaluations?
schema_links:
What is total bonus given in all evaluations? | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*
natsql and SQL generation:
select sum ( _ ) from _ | select sum(evaluation.bonus) from evaluation
SQL = SELECT sum(bonus) FROM evaluation
natsql:
select sum ( _ ) from _ | select sum(evaluation.bonus) from evaluation

SQL:
SELECT sum(bonus) FROM evaluation
self correction:
SELECT SUM(Bonus) AS Total_Bonus FROM evaluation

index is 290
SELECT sum(bonus) FROM evaluation
Find the total amount of bonus given in all the evaluations.
schema_links:
Find the total amount of bonus given in all the evaluations. | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*
natsql and SQL generation:
select sum ( _ ) from _ | select sum ( evaluation.bonus ) from evaluation
SQL = SELECT sum(bonus) FROM evaluation
natsql:
select sum ( _ ) from _ | select sum ( evaluation.bonus ) from evaluation

SQL:
SELECT sum(bonus) FROM evaluation
self correction:
SELECT SUM(Bonus) FROM evaluation

index is 291
SELECT * FROM hiring
Give me all the information about hiring.
schema_links:
Give me all the information about hiring. | hiring : hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.shop_id , hiring.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select * from hiring
SQL = SELECT * FROM hiring
natsql:
select * from hiring

SQL:
SELECT * FROM hiring
self correction:
SELECT * FROM hiring

index is 292
SELECT * FROM hiring
What is all the information about hiring?
schema_links:
What is all the information about hiring? | hiring : hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.shop_id , hiring.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select * from hiring
natsql:
select * from hiring
SQL:
SELECT * FROM hiring
self correction:
SELECT hiring.* FROM hiring

index is 293
SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000
Which district has both stores with less than 3000 products and stores with more than 10000 products?
schema_links:
Which district has both stores with less than 3000 products and stores with more than 10000 products? | shop : shop.number_products , shop.district , shop.name , shop.shop_id , shop.location , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select _ from _ where _ and _ | select shop.district from shop where shop.number_products < 3000 and shop.number_products > 10000 group by shop.district
SQL = SELECT district FROM shop WHERE number_products  <  3000 AND number_products  >  10000 GROUP BY district
natsql:
select _ from _ where _ and _ | select shop.district from shop where shop.number_products < 3000 and shop.number_products > 10000 group by shop.district

SQL:
SELECT district FROM shop WHERE number_products  <  3000 AND number_products  >  10000 GROUP BY district
self correction:
SELECT shop.district FROM shop WHERE (shop.number_products < 3000 OR shop.number_products > 10000) GROUP BY shop.district

index is 294
SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000
Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.
schema_links:
Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products. | shop : shop.number_products , shop.district , shop.name , shop.shop_id , shop.location , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select _ from _ where @.@ < _ and @.@ > _ group by _ | select shop.district from shop where shop.number_products < 3000 and shop.number_products > 10000 group by shop.district
SQL = SELECT district FROM shop WHERE number_products  <  3000 AND number_products  >  10000 GROUP BY district
natsql:
select _ from _ where @.@ < _ and @.@ > _ group by _ | select shop.district from shop where shop.number_products < 3000 and shop.number_products > 10000 group by shop.district

SQL:
SELECT district FROM shop WHERE number_products  <  3000 AND number_products  >  10000 GROUP BY district
self correction:
SELECT DISTINCT district FROM shop WHERE number_products < 3000 OR number_products > 10000

index is 295
SELECT count(DISTINCT LOCATION) FROM shop
How many different store locations are there?
schema_links:
How many different store locations are there? | shop : shop.location , shop.name , shop.shop_id , shop.district , shop.number_products , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct shop.location ) from shop
SQL = SELECT count(DISTINCT location) FROM shop
natsql:
select count ( distinct _ ) from _ | select count ( distinct shop.location ) from shop

SQL:
SELECT count(DISTINCT location) FROM shop
self correction:
SELECT count(DISTINCT Location) FROM shop

index is 296
SELECT count(DISTINCT LOCATION) FROM shop
Count the number of distinct store locations.
schema_links:
Count the number of distinct store locations. | shop : shop.location , shop.name , shop.shop_id , shop.district , shop.manager_name , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct shop.location ) from shop
SQL = SELECT COUNT(DISTINCT location) FROM shop
natsql:
select count ( distinct _ ) from _ | select count ( distinct shop.location ) from shop

SQL:
SELECT COUNT(DISTINCT location) FROM shop
self correction:
SELECT COUNT(DISTINCT Location) FROM shop

index is 297
SELECT count(*) FROM Documents
How many documents do we have?
schema_links:
How many documents do we have? | documents : documents.document_name , documents.document_id , documents.document_description , documents.template_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( * ) from documents
SQL = SELECT count(*) FROM documents
natsql:
select count ( _ ) from _ | select count ( * ) from documents

SQL:
SELECT count(*) FROM documents
self correction:
SELECT COUNT(*) FROM Documents

index is 298
SELECT count(*) FROM Documents
Count the number of documents.
schema_links:
Count the number of documents. | documents : documents.document_name , documents.document_id , documents.document_description , documents.template_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( * ) from documents
SQL = SELECT count(*) FROM documents
natsql:
select count ( _ ) from _ | select count ( * ) from documents

SQL:
SELECT count(*) FROM documents
self correction:
SELECT count(*) FROM Documents

index is 299
SELECT document_id ,  document_name ,  document_description FROM Documents
List document IDs, document names, and document descriptions for all documents.
schema_links:
List document IDs, document names, and document descriptions for all documents. | documents : documents.document_name , documents.document_description , documents.document_id , documents.template_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , _ , _ from _ | select documents.document_id , documents.document_name , documents.document_description from documents
SQL = SELECT document_id ,  document_name ,  document_description FROM documents
natsql:
select _ , _ , _ from _ | select documents.document_id , documents.document_name , documents.document_description from documents

SQL:
SELECT document_id ,  document_name ,  document_description FROM documents
self correction:
SELECT document_id, document_name, document_description  FROM documents

index is 300
SELECT document_id ,  document_name ,  document_description FROM Documents
What are the ids, names, and descriptions for all documents?
schema_links:
What are the ids, names, and descriptions for all documents? | documents : documents.document_name , documents.document_id , documents.document_description , documents.template_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , _ , _ from _ | select documents.document_id , documents.document_name , documents.document_description from documents
SQL = SELECT document_id , document_name , document_description FROM documents
natsql:
select _ , _ , _ from _ | select documents.document_id , documents.document_name , documents.document_description from documents

SQL:
SELECT document_id , document_name , document_description FROM documents
self correction:
SELECT document_id, document_name, document_description FROM documents

index is 301
SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE "%w%"
What is the document name and template id for document with description with the letter 'w' in it?
schema_links:
What is the document name and template id for document with description with the letter 'w' in it? | documents : documents.document_name , documents.document_description , documents.document_id , documents.template_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ , _ from _ where _ like '%' || _ || '%' | select documents.document_name , documents.template_id from documents where documents.document_description like '%w%'
SQL = SELECT document_name ,  template_id FROM documents WHERE document_description LIKE '%w%'
natsql:
select _ , _ from _ where _ like '%' || _ || '%' | select documents.document_name , documents.template_id from documents where documents.document_description like '%w%'

SQL:
SELECT document_name ,  template_id FROM documents WHERE document_description LIKE '%w%'
self correction:
SELECT document_name, template_id FROM documents WHERE document_description LIKE '%w%';

index is 302
SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE "%w%"
Return the names and template ids for documents that contain the letter w in their description.
schema_links:
Return the names and template ids for documents that contain the letter w in their description. | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , _ from _ where _ like %w% | select documents.document_name , documents.template_id from documents where documents.document_description like '%w%'
SQL = SELECT document_name , template_id FROM Documents WHERE document_description LIKE '%w%'
natsql:
select _ , _ from _ where _ like %w% | select documents.document_name , documents.template_id from documents where documents.document_description like '%w%'

SQL:
SELECT document_name , template_id FROM Documents WHERE document_description LIKE '%w%'
self correction:
SELECT document_name, template_id FROM Documents WHERE document_description LIKE '%w%';

index is 303
SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  "Robbin CV"
What is the document id, template id and description for document named "Robbin CV"?
schema_links:
What is the document id, template id and description for document named "Robbin CV"? | documents : documents.document_id , documents.document_name ( Robbin CV ) , documents.document_description , documents.template_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_description ( CV ) , ref_template_types.template_type_code ( CV ) , ref_template_types.* | templates : templates.template_type_code ( CV ) , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ , _ , _ from _ where _ = "Robbin CV" | select documents.document_id , documents.template_id , documents.document_description from documents where documents.document_name = "Robbin CV"
SQL = SELECT document_id , template_id , document_description FROM documents WHERE document_name = "Robbin CV"
natsql:
select _ , _ , _ from _ where _ = "Robbin CV" | select documents.document_id , documents.template_id , documents.document_description from documents where documents.document_name = "Robbin CV"

SQL:
SELECT document_id , template_id , document_description FROM documents WHERE document_name = "Robbin CV"
self correction:
SELECT documents.document_id, documents.template_id, documents.document_description FROM documents WHERE documents.document_name = "Robbin CV"

index is 304
SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  "Robbin CV"
Return the document id, template id, and description for the document with the name Robbin CV.
schema_links:
Return the document id, template id, and description for the document with the name Robbin CV. | documents : documents.document_id , documents.document_name ( Robbin CV ) , documents.document_description , documents.template_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code ( CV ) , ref_template_types.template_type_description ( CV ) , ref_template_types.* | templates : templates.template_type_code ( CV ) , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select documents.document_id, documents.template_id, documents.document_description from documents where documents.document_name = 'Robbin CV'
SQL = SELECT document_id, template_id, document_description FROM documents WHERE document_name = 'Robbin CV'
natsql:
select documents.document_id, documents.template_id, documents.document_description from documents where documents.document_name = 'Robbin CV'

SQL:
SELECT document_id, template_id, document_description FROM documents WHERE document_name = 'Robbin CV'
self correction:
SELECT document_id, template_id, document_description  FROM documents  WHERE document_name = 'Robbin CV'

index is 305
SELECT count(DISTINCT template_id) FROM Documents
How many different templates do all document use?
schema_links:
How many different templates do all document use? | templates : templates.template_id , templates.template_details , templates.template_type_code , templates.version_number , templates.date_effective_to , templates.* | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct templates.template_id ) from templates join documents on templates.template_id = documents.template_id
SQL = SELECT COUNT(DISTINCT template_id) FROM templates JOIN documents ON templates.template_id = documents.template_id
natsql:
select count ( distinct _ ) from _ | select count ( distinct templates.template_id ) from templates join documents on templates.template_id = documents.template_id

SQL:
SELECT COUNT(DISTINCT template_id) FROM templates JOIN documents ON templates.template_id = documents.template_id
self correction:
SELECT COUNT(DISTINCT templates.Template_ID) FROM templates JOIN documents ON templates.Template_ID = documents.Template_ID

index is 306
SELECT count(DISTINCT template_id) FROM Documents
Count the number of different templates used for documents.
schema_links:
Count the number of different templates used for documents. | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_to , templates.template_details , templates.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct templates.template_id ) from templates
SQL = SELECT count(DISTINCT template_id) FROM Templates
natsql:
select count ( distinct _ ) from _ | select count ( distinct templates.template_id ) from templates

SQL:
SELECT count(DISTINCT template_id) FROM Templates
self correction:
SELECT COUNT(DISTINCT Template_ID) FROM Documents

index is 307
SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'
How many documents are using the template with type code 'PPT'?
schema_links:
How many documents are using the template with type code 'PPT'? | templates : templates.template_type_code ( PPT ) , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code ( PPT ) , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select count ( distinct _ ) from _ where _ = 'PPT' | select count ( distinct documents.document_id ) from documents where documents.template_id = 'PPT'
SQL = SELECT count(DISTINCT document_id) FROM documents WHERE template_id = 'PPT'
natsql:
select count ( distinct _ ) from _ where _ = 'PPT' | select count ( distinct documents.document_id ) from documents where documents.template_id = 'PPT'

SQL:
SELECT count(DISTINCT document_id) FROM documents WHERE template_id = 'PPT'
self correction:
SELECT count(DISTINCT Document_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code = 'PPT'

index is 308
SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'
Count the number of documents that use the PPT template type.
schema_links:
Count the number of documents that use the PPT template type. | templates : templates.template_type_code ( PPT ) , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code ( PPT ) , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select count ( _ ) from _ where @.@ = 'PPT' | select count ( documents.* ) from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'PPT'
SQL = SELECT count(*) FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'PPT'
natsql:
select count ( _ ) from _ where @.@ = 'PPT' | select count ( documents.* ) from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'PPT'

SQL:
SELECT count(*) FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'PPT'
self correction:
SELECT COUNT(DISTINCT documents.Document_ID)  FROM documents  JOIN templates ON documents.Template_ID = templates.Template_ID  JOIN ref_template_types ON templates.Template_Type_Code = ref_template_types.Template_Type_Code  WHERE ref_template_types.Template_Type_Description = 'PPT'

index is 309
SELECT template_id ,  count(*) FROM Documents GROUP BY template_id
Show all template ids and number of documents using each template.
schema_links:
Show all template ids and number of documents using each template. | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select templates.template_id , count ( documents.template_id ) from templates join documents on templates.template_id = documents.template_id group by templates.template_id
SQL = SELECT template_id , COUNT(template_id) FROM documents GROUP BY template_id
natsql:
select _ , count ( _ ) from _ group by _ | select templates.template_id , count ( documents.template_id ) from templates join documents on templates.template_id = documents.template_id group by templates.template_id

SQL:
SELECT template_id , COUNT(template_id) FROM documents GROUP BY template_id
self correction:
SELECT Templates.Template_ID, COUNT(Documents.Template_ID) FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID

index is 310
SELECT template_id ,  count(*) FROM Documents GROUP BY template_id
What are all different template ids used for documents, and how many times were each of them used?
schema_links:
What are all different template ids used for documents, and how many times were each of them used? | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , count ( * ) from _ group by _ | select documents.template_id , count ( * ) from documents group by documents.template_id
SQL = SELECT template_id ,  COUNT(*) FROM documents GROUP BY template_id
natsql:
select _ , count ( * ) from _ group by _ | select documents.template_id , count ( * ) from documents group by documents.template_id

SQL:
SELECT template_id ,  COUNT(*) FROM documents GROUP BY template_id
self correction:
SELECT Templates.Template_ID, COUNT(Documents.Document_ID)  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  GROUP BY Templates.Template_ID

index is 311
SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1
What is the id and type code for the template used by the most documents?
schema_links:
What is the id and type code for the template used by the most documents? | templates : templates.template_type_code , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_to , templates.* | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , _ from _ group by _ order by count ( _ ) desc limit _ | select templates.template_id , templates.template_type_code from documents group by documents.template_id order by count ( documents.template_id ) desc limit 1
SQL = SELECT template_id , template_type_code FROM documents GROUP BY template_id ORDER BY count(template_id) DESC LIMIT 1
natsql:
select _ , _ from _ group by _ order by count ( _ ) desc limit _ | select templates.template_id , templates.template_type_code from documents group by documents.template_id order by count ( documents.template_id ) desc limit 1

SQL:
SELECT template_id , template_type_code FROM documents GROUP BY template_id ORDER BY count(template_id) DESC LIMIT 1
self correction:
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1

index is 312
SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1
Return the id and type code of the template that is used for the greatest number of documents.
schema_links:
Return the id and type code of the template that is used for the greatest number of documents. | templates : templates.template_type_code , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , _ from _ where _ = ( select _ from _ group by _ order by count ( _ ) desc limit _ ) | select templates.template_id , templates.template_type_code from templates where templates.template_id = ( select documents.template_id from documents group by documents.template_id order by count ( documents.template_id ) desc limit 1 )
SQL = SELECT template_id ,  template_type_code FROM templates WHERE template_id  =  (SELECT template_id FROM documents GROUP BY template_id ORDER BY count(template_id) DESC LIMIT 1)
natsql:
select _ , _ from _ where _ = ( select _ from _ group by _ order by count ( _ ) desc limit _ ) | select templates.template_id , templates.template_type_code from templates where templates.template_id = ( select documents.template_id from documents group by documents.template_id order by count ( documents.template_id ) desc limit 1 )

SQL:
SELECT template_id ,  template_type_code FROM templates WHERE template_id  =  (SELECT template_id FROM documents GROUP BY template_id ORDER BY count(template_id) DESC LIMIT 1)
self correction:
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1

index is 313
SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1
Show ids for all templates that are used by more than one document.
schema_links:
Show ids for all templates that are used by more than one document. | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.template_type_code , templates.date_effective_to , templates.template_details , templates.version_number , templates.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ where count ( _ ) > _ group by _ | select templates.template_id from templates where count ( templates.* ) > 1 group by templates.template_id
SQL = SELECT template_id FROM templates GROUP BY template_id HAVING count(*) > 1
natsql:
select _ from _ where count ( _ ) > _ group by _ | select templates.template_id from templates where count ( templates.* ) > 1 group by templates.template_id

SQL:
SELECT template_id FROM templates GROUP BY template_id HAVING count(*) > 1
self correction:
SELECT Templates.Template_ID  FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1

index is 314
SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1
What are the template ids of any templates used in more than a single document?
schema_links:
What are the template ids of any templates used in more than a single document? | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | templates : templates.template_id , templates.template_type_code , templates.date_effective_to , templates.version_number , templates.date_effective_from , templates.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ where count ( _ ) > _ group by _ | select templates.template_id from templates group by templates.template_id having count(*) > 1
SQL = SELECT template_id FROM templates GROUP BY template_id HAVING COUNT(*) > 1
natsql:
select _ from _ where count ( _ ) > _ group by _ | select templates.template_id from templates group by templates.template_id having count(*) > 1

SQL:
SELECT template_id FROM templates GROUP BY template_id HAVING COUNT(*) > 1
self correction:
SELECT Templates.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1

index is 315
SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
Show ids for all templates not used by any document.
schema_links:
Show ids for all templates not used by any document. | templates : templates.template_id , templates.template_type_code , templates.date_effective_to , templates.template_details , templates.version_number , templates.* | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ ) | select templates.template_id from templates where templates.template_id not in ( select documents.template_id from documents )
SQL = SELECT template_id FROM templates WHERE template_id NOT IN (SELECT template_id FROM documents)
natsql:
select _ from _ where _ not in ( select _ from _ ) | select templates.template_id from templates where templates.template_id not in ( select documents.template_id from documents )

SQL:
SELECT template_id FROM templates WHERE template_id NOT IN (SELECT template_id FROM documents)
self correction:
SELECT templates.template_id  FROM templates  LEFT JOIN documents ON templates.template_id = documents.template_id WHERE documents.document_id IS NULL

index is 316
SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
What are the ids for templates that are not used in any documents?
schema_links:
What are the ids for templates that are not used in any documents? | templates : templates.template_id , templates.template_type_code , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ ) | select templates.template_id from templates where templates.template_id not in ( select documents.template_id from documents )
SQL = SELECT template_id FROM templates WHERE template_id NOT IN (SELECT template_id FROM documents)
natsql:
select _ from _ where _ not in ( select _ from _ ) | select templates.template_id from templates where templates.template_id not in ( select documents.template_id from documents )

SQL:
SELECT template_id FROM templates WHERE template_id NOT IN (SELECT template_id FROM documents)
self correction:
SELECT Templates.Template_ID  FROM Templates  LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Template_ID IS NULL

index is 317
SELECT count(*) FROM Templates
How many templates do we have?
schema_links:
How many templates do we have? | templates : templates.template_details , templates.template_id , templates.template_type_code , templates.version_number , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( * ) from templates
SQL = SELECT count(*) FROM templates
natsql:
select count ( _ ) from _ | select count ( * ) from templates

SQL:
SELECT count(*) FROM templates
self correction:
SELECT COUNT(*) FROM Templates

index is 318
SELECT count(*) FROM Templates
Count the number of templates.
schema_links:
Count the number of templates. | templates : templates.template_details , templates.template_id , templates.template_type_code , templates.version_number , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( templates.template_id ) from templates
SQL = SELECT count(*) FROM templates
natsql:
select count ( _ ) from _ | select count ( templates.template_id ) from templates

SQL:
SELECT count(*) FROM templates
self correction:
SELECT COUNT(*) FROM Templates

index is 319
SELECT template_id ,  version_number ,  template_type_code FROM Templates
Show template ids, version numbers, and template type codes for all templates.
schema_links:
Show template ids, version numbers, and template type codes for all templates. | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , _ , _ from _ | select templates.template_id , templates.version_number , templates.template_type_code from templates
SQL = SELECT template_id ,  version_number ,  template_type_code FROM templates
natsql:
select _ , _ , _ from _ | select templates.template_id , templates.version_number , templates.template_type_code from templates

SQL:
SELECT template_id ,  version_number ,  template_type_code FROM templates
self correction:
SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates

index is 320
SELECT template_id ,  version_number ,  template_type_code FROM Templates
What are the ids, version numbers, and type codes for each template?
schema_links:
What are the ids, version numbers, and type codes for each template? | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , _ , _ from _ | select templates.template_id , templates.version_number , templates.template_type_code from templates
SQL = SELECT template_id ,  version_number ,  template_type_code FROM templates
natsql:
select _ , _ , _ from _ | select templates.template_id , templates.version_number , templates.template_type_code from templates

SQL:
SELECT template_id ,  version_number ,  template_type_code FROM templates
self correction:
SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates

index is 321
SELECT DISTINCT template_type_code FROM Templates
Show all distinct template type codes for all templates.
schema_links:
Show all distinct template type codes for all templates. | templates : templates.template_type_code , templates.template_details , templates.template_id , templates.version_number , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select distinct _ from _ | select distinct templates.template_type_code from templates
SQL = SELECT DISTINCT template_type_code FROM templates
natsql:
select distinct _ from _ | select distinct templates.template_type_code from templates

SQL:
SELECT DISTINCT template_type_code FROM templates
self correction:
SELECT DISTINCT Template_Type_Code FROM Templates

index is 322
SELECT DISTINCT template_type_code FROM Templates
What are the different template type codes?
schema_links:
What are the different template type codes? | templates : templates.template_type_code , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select distinct _ from _ | select distinct ref_template_types.template_type_code from ref_template_types
SQL = SELECT DISTINCT template_type_code FROM ref_template_types
natsql:
select distinct _ from _ | select distinct ref_template_types.template_type_code from ref_template_types

SQL:
SELECT DISTINCT template_type_code FROM ref_template_types
self correction:
SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types

index is 323
SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"
What are the ids of templates with template type code PP or PPT?
schema_links:
What are the ids of templates with template type code PP or PPT? | templates : templates.template_type_code ( PP , PPT ) , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code ( PP , PPT ) , ref_template_types.template_type_description , ref_template_types.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ from _ where _ or _ | select templates.template_id from templates where templates.template_type_code = 'PP' or templates.template_type_code = 'PPT'
SQL = SELECT template_id FROM templates WHERE template_type_code  =  'PP' OR template_type_code  =  'PPT'
natsql:
select _ from _ where _ or _ | select templates.template_id from templates where templates.template_type_code = 'PP' or templates.template_type_code = 'PPT'

SQL:
SELECT template_id FROM templates WHERE template_type_code  =  'PP' OR template_type_code  =  'PPT'
self correction:
SELECT templates.template_id FROM templates WHERE templates.template_type_code = 'PP' OR templates.template_type_code = 'PPT'

index is 324
SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"
Return the ids of templates that have the code PP or PPT.
schema_links:
Return the ids of templates that have the code PP or PPT. | templates : templates.template_id , templates.template_type_code ( PP , PPT ) , templates.version_number , templates.date_effective_to , templates.template_details , templates.* | ref_template_types : ref_template_types.template_type_code ( PP , PPT ) , ref_template_types.template_type_description , ref_template_types.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ from _ where _ in ( _ , _ ) | select templates.template_id from templates where templates.template_type_code in ('PP', 'PPT')
SQL = SELECT template_id FROM templates WHERE template_type_code IN ('PP', 'PPT')
natsql:
select _ from _ where _ in ( _ , _ ) | select templates.template_id from templates where templates.template_type_code in ('PP', 'PPT')

SQL:
SELECT template_id FROM templates WHERE template_type_code IN ('PP', 'PPT')
self correction:
SELECT templates.template_id  FROM templates  WHERE templates.template_type_code IN ('PP', 'PPT')

index is 325
SELECT count(*) FROM Templates WHERE template_type_code  =  "CV"
How many templates have template type code CV?
schema_links:
How many templates have template type code CV? | templates : templates.template_type_code ( CV ) , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code ( CV ) , ref_template_types.template_type_description ( CV ) , ref_template_types.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select count ( _ ) from _ where _ = _ | select count (templates.template_id) from templates where templates.template_type_code = 'CV'
SQL = SELECT count(template_id) FROM templates WHERE template_type_code = 'CV'
natsql:
select count ( _ ) from _ where _ = _ | select count (templates.template_id) from templates where templates.template_type_code = 'CV'

SQL:
SELECT count(template_id) FROM templates WHERE template_type_code = 'CV'
self correction:
SELECT COUNT(Template_ID) FROM Templates WHERE Template_Type_Code = 'CV'

index is 326
SELECT count(*) FROM Templates WHERE template_type_code  =  "CV"
Count the number of templates of the type CV.
schema_links:
Count the number of templates of the type CV. | templates : templates.template_type_code ( CV ) , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code ( CV ) , ref_template_types.template_type_description ( CV ) , ref_template_types.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select count ( _ ) from _ where _ = _ | select count ( templates.template_id ) from templates where templates.template_type_code = 'CV'
SQL = SELECT count(template_id) FROM templates WHERE template_type_code = 'CV'
natsql:
select count ( _ ) from _ where _ = _ | select count ( templates.template_id ) from templates where templates.template_type_code = 'CV'

SQL:
SELECT count(template_id) FROM templates WHERE template_type_code = 'CV'
self correction:
SELECT COUNT(Template_ID) FROM Templates WHERE Template_Type_Code = 'CV'

index is 327
SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5
What is the version number and template type code for the template with version number later than 5?
schema_links:
What is the version number and template type code for the template with version number later than 5? | templates : templates.version_number , templates.template_type_code , templates.template_details , templates.template_id , templates.date_effective_to , templates.* | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , _ from _ where _ > _ | select templates.version_number , templates.template_type_code from templates where templates.version_number > 5
SQL = SELECT version_number , template_type_code FROM templates WHERE version_number > 5
natsql:
select _ , _ from _ where _ > _ | select templates.version_number , templates.template_type_code from templates where templates.version_number > 5

SQL:
SELECT version_number , template_type_code FROM templates WHERE version_number > 5
self correction:
SELECT Templates.Version_Number, Templates.Template_Type_Code  FROM Templates  WHERE Templates.Version_Number > 5

index is 328
SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5
Return the version numbers and template type codes of templates with a version number greater than 5.
schema_links:
Return the version numbers and template type codes of templates with a version number greater than 5. | templates : templates.version_number , templates.template_type_code , templates.template_details , templates.template_id , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , _ from _ where _ > _ | select templates.version_number , templates.template_type_code from templates where templates.version_number > 5
SQL = SELECT version_number , template_type_code FROM templates WHERE version_number > 5
natsql:
select _ , _ from _ where _ > _ | select templates.version_number , templates.template_type_code from templates where templates.version_number > 5

SQL:
SELECT version_number , template_type_code FROM templates WHERE version_number > 5
self correction:
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5

index is 329
SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code
Show all template type codes and number of templates for each.
schema_links:
Show all template type codes and number of templates for each. | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select ref_template_types.template_type_code , count ( templates.template_id ) from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code group by ref_template_types.template_type_code
SQL = SELECT template_type_code ,  COUNT(template_id) FROM ref_template_types JOIN templates ON ref_template_types.template_type_code  =  templates.template_type_code GROUP BY template_type_code
natsql:
select _ , count ( _ ) from _ group by _ | select ref_template_types.template_type_code , count ( templates.template_id ) from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code group by ref_template_types.template_type_code

SQL:
SELECT template_type_code ,  COUNT(template_id) FROM ref_template_types JOIN templates ON ref_template_types.template_type_code  =  templates.template_type_code GROUP BY template_type_code
self correction:
SELECT template_type_code, COUNT(template_id)  FROM ref_template_types  JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  GROUP BY template_type_code

index is 330
SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code
What are the different template type codes, and how many templates correspond to each?
schema_links:
What are the different template type codes, and how many templates correspond to each? | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select ref_template_types.template_type_code , count ( templates.template_id ) from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code group by ref_template_types.template_type_code
SQL = SELECT template_type_code , COUNT(template_id) FROM ref_template_types JOIN templates ON templates.template_type_code  =  ref_template_types.template_type_code GROUP BY ref_template_types.template_type_code
natsql:
select _ , count ( _ ) from _ group by _ | select ref_template_types.template_type_code , count ( templates.template_id ) from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code group by ref_template_types.template_type_code

SQL:
SELECT template_type_code , COUNT(template_id) FROM ref_template_types JOIN templates ON templates.template_type_code  =  ref_template_types.template_type_code GROUP BY ref_template_types.template_type_code
self correction:
SELECT ref_template_types.template_type_code, COUNT(templates.template_id)  FROM ref_template_types  JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  GROUP BY ref_template_types.template_type_code

index is 331
SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
Which template type code has most number of templates?
schema_links:
Which template type code has most number of templates? | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_description , documents.document_id , documents.template_id , documents.document_name , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select template_type_code from templates group by template_type_code order by count ( * ) desc limit 1
SQL = SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select template_type_code from templates group by template_type_code order by count ( * ) desc limit 1

SQL:
SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT template_type_code, COUNT(*) AS template_count FROM templates GROUP BY template_type_code ORDER BY template_count DESC LIMIT 1

index is 332
SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
Return the type code of the template type that the most templates belong to.
schema_links:
Return the type code of the template type that the most templates belong to. | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select templates.template_type_code from templates group by templates.template_type_code order by count ( templates.* ) desc limit 1
SQL = SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select templates.template_type_code from templates group by templates.template_type_code order by count ( templates.* ) desc limit 1

SQL:
SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT Ref_Template_Types.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1

index is 333
SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
Show all template type codes with less than three templates.
schema_links:
Show all template type codes with less than three templates. | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ group by _ having count ( _ ) < _ | select ref_template_types.template_type_code from ref_template_types group by ref_template_types.template_type_code having count (templates.template_id) < 3
SQL = SELECT template_type_code FROM ref_template_types GROUP BY template_type_code HAVING count(*) < 3
natsql:
select _ from _ group by _ having count ( _ ) < _ | select ref_template_types.template_type_code from ref_template_types group by ref_template_types.template_type_code having count (templates.template_id) < 3

SQL:
SELECT template_type_code FROM ref_template_types GROUP BY template_type_code HAVING count(*) < 3
self correction:
SELECT template_type_code FROM Ref_Template_Types GROUP BY template_type_code HAVING COUNT(Template_ID) < 3

index is 334
SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
What are the codes of template types that have fewer than 3 templates?
schema_links:
What are the codes of template types that have fewer than 3 templates? | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ from _ where count ( _ ) < _ group by _ | select template_type_code from templates group by template_type_code having count (template_id) < 3
SQL = SELECT template_type_code FROM templates GROUP BY template_type_code HAVING count(template_id)  <  3
natsql:
select _ from _ where count ( _ ) < _ group by _ | select template_type_code from templates group by template_type_code having count (template_id) < 3

SQL:
SELECT template_type_code FROM templates GROUP BY template_type_code HAVING count(template_id)  <  3
self correction:
SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(template_id) < 3

index is 335
SELECT min(Version_Number) ,  template_type_code FROM Templates
What the smallest version number and its template type code?
schema_links:
What the smallest version number and its template type code? | templates : templates.template_type_code , templates.version_number , templates.template_id , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select min ( _ ) , _ from _ | select min ( templates.version_number ) , templates.template_type_code from templates
SQL = SELECT MIN(version_number) ,  template_type_code FROM templates
natsql:
select min ( _ ) , _ from _ | select min ( templates.version_number ) , templates.template_type_code from templates

SQL:
SELECT MIN(version_number) ,  template_type_code FROM templates
self correction:
SELECT MIN(Version_Number) AS Smallest_Version_Number, Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Smallest_Version_Number ASC LIMIT 1

index is 336
SELECT min(Version_Number) ,  template_type_code FROM Templates
Return the lowest version number, along with its corresponding template type code.
schema_links:
Return the lowest version number, along with its corresponding template type code. | templates : templates.version_number , templates.template_type_code , templates.template_id , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , _ from _ order by _ limit _ | select templates.version_number , templates.template_type_code from templates order by templates.version_number limit 1
SQL = SELECT version_number ,  template_type_code FROM templates ORDER BY version_number LIMIT 1
natsql:
select _ , _ from _ order by _ limit _ | select templates.version_number , templates.template_type_code from templates order by templates.version_number limit 1

SQL:
SELECT version_number ,  template_type_code FROM templates ORDER BY version_number LIMIT 1
self correction:
SELECT Templates.Version_Number, Templates.Template_Type_Code  FROM Templates  ORDER BY Templates.Version_Number ASC  LIMIT 1

index is 337
SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  "Data base"
What is the template type code of the template used by document with the name "Data base"?
schema_links:
What is the template type code of the template used by document with the name "Data base"? | templates : templates.template_type_code , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_to , templates.* | documents : documents.document_name ( Data base ) , documents.template_id , documents.document_description , documents.document_id , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ where _ = _ | select templates.template_type_code from templates join documents on templates.template_id = documents.template_id where documents.document_name = "Data base"
SQL = SELECT template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id WHERE documents.document_name = "Data base"
natsql:
select _ from _ where _ = _ | select templates.template_type_code from templates join documents on templates.template_id = documents.template_id where documents.document_name = "Data base"

SQL:
SELECT template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id WHERE documents.document_name = "Data base"
self correction:
SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = "Data base"

index is 338
SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  "Data base"
Return the template type code of the template that is used by a document named Data base.
schema_links:
Return the template type code of the template that is used by a document named Data base. | templates : templates.template_type_code , templates.template_details , templates.template_id , templates.date_effective_to , templates.version_number , templates.* | documents : documents.document_name ( Data base ) , documents.template_id , documents.document_description , documents.document_id , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ where _ = ( select _ from _ where _ = 'Data base' ) | select templates.template_type_code from templates where templates.template_id = ( select documents.template_id from documents where documents.document_name = 'Data base' )
SQL = SELECT template_type_code FROM templates WHERE template_id = (SELECT template_id FROM documents WHERE document_name = 'Data base')
natsql:
select _ from _ where _ = ( select _ from _ where _ = 'Data base' ) | select templates.template_type_code from templates where templates.template_id = ( select documents.template_id from documents where documents.document_name = 'Data base' )

SQL:
SELECT template_type_code FROM templates WHERE template_id = (SELECT template_id FROM documents WHERE document_name = 'Data base')
self correction:
SELECT template_type_code  FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_name = 'Data base'

index is 339
SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"
Show all document names using templates with template type code BK.
schema_links:
Show all document names using templates with template type code BK. | templates : templates.template_type_code ( BK ) , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_name , documents.template_id , documents.document_description , documents.document_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code ( BK ) , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ from _ where @.@ = _ | select documents.document_name from templates join documents on templates.template_id = documents.template_id where templates.template_type_code = 'BK'
SQL = SELECT document_name FROM templates JOIN documents ON templates.template_id = documents.template_id WHERE templates.template_type_code = 'BK'
natsql:
select _ from _ where @.@ = _ | select documents.document_name from templates join documents on templates.template_id = documents.template_id where templates.template_type_code = 'BK'

SQL:
SELECT document_name FROM templates JOIN documents ON templates.template_id = documents.template_id WHERE templates.template_type_code = 'BK'
self correction:
SELECT documents.document_name  FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE templates.template_type_code = 'BK'

index is 340
SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"
What are the names of documents that use templates with the code BK?
schema_links:
What are the names of documents that use templates with the code BK? | documents : documents.document_name , documents.document_description , documents.document_id , documents.template_id , documents.other_details , documents.* | templates : templates.template_type_code ( BK ) , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code ( BK ) , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ from _ where @.@ = _ | select documents.document_name from documents where documents.template_id = (select template_id from templates where templates.template_type_code = 'BK')
SQL = SELECT document_name FROM documents WHERE template_id = (SELECT template_id FROM templates WHERE template_type_code = 'BK')
natsql:
select _ from _ where @.@ = _ | select documents.document_name from documents where documents.template_id = (select template_id from templates where templates.template_type_code = 'BK')

SQL:
SELECT document_name FROM documents WHERE template_id = (SELECT template_id FROM templates WHERE template_type_code = 'BK')
self correction:
SELECT documents.document_name FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'BK'

index is 341
SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code
Show all template type codes and the number of documents using each type.
schema_links:
Show all template type codes and the number of documents using each type. | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select ref_template_types.template_type_code , count ( documents.document_id ) from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code join documents on templates.template_id = documents.template_id group by ref_template_types.template_type_code
SQL = SELECT T1.template_type_code , count(T3.document_id) FROM ref_template_types AS T1 JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN documents AS T3 ON T2.template_id = T3.template_id GROUP BY T1.template_type_code
natsql:
select _ , count ( _ ) from _ group by _ | select ref_template_types.template_type_code , count ( documents.document_id ) from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code join documents on templates.template_id = documents.template_id group by ref_template_types.template_type_code

SQL:
SELECT T1.template_type_code , count(T3.document_id) FROM ref_template_types AS T1 JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN documents AS T3 ON T2.template_id = T3.template_id GROUP BY T1.template_type_code
self correction:
SELECT T1.template_type_code, COUNT(T3.document_id) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID GROUP BY T1.template_type_code

index is 342
SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code
What are the different template type codes, and how many documents use each type?
schema_links:
What are the different template type codes, and how many documents use each type? | templates : templates.template_type_code , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | documents : documents.document_name , documents.template_id , documents.document_description , documents.document_id , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select ref_template_types.template_type_code , count ( documents.* ) from ref_template_types join documents on ref_template_types.template_type_code = documents.template_id group by ref_template_types.template_type_code
SQL = SELECT template_type_code ,  COUNT(*) FROM ref_template_types JOIN documents ON ref_template_types.template_type_code  =  documents.template_id GROUP BY ref_template_types.template_type_code
natsql:
select _ , count ( _ ) from _ group by _ | select ref_template_types.template_type_code , count ( documents.* ) from ref_template_types join documents on ref_template_types.template_type_code = documents.template_id group by ref_template_types.template_type_code

SQL:
SELECT template_type_code ,  COUNT(*) FROM ref_template_types JOIN documents ON ref_template_types.template_type_code  =  documents.template_id GROUP BY ref_template_types.template_type_code
self correction:
SELECT ref_template_types.template_type_code, COUNT(DISTINCT documents.document_id) AS document_count FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id GROUP BY ref_template_types.template_type_code

index is 343
SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1
Which template type code is used by most number of documents?
schema_links:
Which template type code is used by most number of documents? | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select templates.template_type_code from templates group by templates.template_type_code order by count ( documents.document_id ) desc limit 1
SQL = SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY count(document_id) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select templates.template_type_code from templates group by templates.template_type_code order by count ( documents.document_id ) desc limit 1

SQL:
SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY count(document_id) DESC LIMIT 1
self correction:
SELECT template_type_code, COUNT(document_id) AS document_count FROM templates GROUP BY template_type_code ORDER BY document_count DESC LIMIT 1

index is 344
SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1
Return the code of the template type that is most commonly used in documents.
schema_links:
Return the code of the template type that is most commonly used in documents. | templates : templates.template_type_code , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_to , templates.* | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select templates.template_type_code from documents join templates on documents.template_id = templates.template_id group by templates.template_type_code order by count(*) desc limit 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select templates.template_type_code from documents join templates on documents.template_id = templates.template_id group by templates.template_type_code order by count(*) desc limit 1
SQL:
SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1

index is 345
SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
Show all template type codes that are not used by any document.
schema_links:
Show all template type codes that are not used by any document. | templates : templates.template_type_code , templates.template_id , templates.date_effective_to , templates.template_details , templates.version_number , templates.* | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ from _ where _ not in (select _ from _) | select ref_template_types.template_type_code from ref_template_types where ref_template_types.template_type_code not in (select documents.template_id from documents)
SQL = SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (SELECT template_id FROM documents)
natsql:
select _ from _ where _ not in (select _ from _) | select ref_template_types.template_type_code from ref_template_types where ref_template_types.template_type_code not in (select documents.template_id from documents)

SQL:
SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (SELECT template_id FROM documents)
self correction:
SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN (SELECT DISTINCT template_type_code FROM templates)

index is 346
SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
What are the codes of template types that are not used for any document?
schema_links:
What are the codes of template types that are not used for any document? | templates : templates.template_type_code , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ ) | select ref_template_types.template_type_code from ref_template_types where ref_template_types.template_type_code not in ( select documents.template_id from documents )
SQL = SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (SELECT Template_ID FROM Documents)
natsql:
select _ from _ where _ not in ( select _ from _ ) | select ref_template_types.template_type_code from ref_template_types where ref_template_types.template_type_code not in ( select documents.template_id from documents )

SQL:
SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (SELECT Template_ID FROM Documents)
self correction:
SELECT ref_template_types.template_type_code  FROM ref_template_types  LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code WHERE templates.template_type_code IS NULL

index is 347
SELECT template_type_code ,  template_type_description FROM Ref_template_types
Show all template type codes and descriptions.
schema_links:
Show all template type codes and descriptions. | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ , _ from _ | select template_type_code , template_type_description from ref_template_types
SQL = SELECT template_type_code ,  template_type_description FROM ref_template_types
natsql:
select _ , _ from _ | select template_type_code , template_type_description from ref_template_types

SQL:
SELECT template_type_code ,  template_type_description FROM ref_template_types
self correction:
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types

index is 348
SELECT template_type_code ,  template_type_description FROM Ref_template_types
What are the type codes and descriptions for all template types?
schema_links:
What are the type codes and descriptions for all template types? | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ , _ from _ | select ref_template_types.template_type_code , ref_template_types.template_type_description from ref_template_types
SQL = SELECT template_type_code ,  template_type_description FROM ref_template_types
natsql:
select _ , _ from _ | select ref_template_types.template_type_code , ref_template_types.template_type_description from ref_template_types

SQL:
SELECT template_type_code ,  template_type_description FROM ref_template_types
self correction:
SELECT template_type_code, template_type_description FROM ref_template_types

index is 349
SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"
What is the template type descriptions for template type code "AD".
schema_links:
What is the template type descriptions for template type code "AD". | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code ( AD ) , ref_template_types.* | templates : templates.template_type_code ( AD ) , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ from _ where _ = _ | select ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_code = "AD"
SQL = SELECT template_type_description FROM ref_template_types WHERE template_type_code = "AD"
natsql:
select _ from _ where _ = _ | select ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_code = "AD"

SQL:
SELECT template_type_description FROM ref_template_types WHERE template_type_code = "AD"
self correction:
SELECT template_type_description FROM Ref_Template_Types WHERE Template_Type_Code = "AD"

index is 350
SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"
Return the template type description of the template type with the code AD.
schema_links:
Return the template type description of the template type with the code AD. | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code ( AD ) , ref_template_types.* | templates : templates.template_type_code ( AD ) , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ from _ where @.@ = _ | select ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_code = 'AD'
SQL = SELECT template_type_description FROM ref_template_types WHERE template_type_code  =  'AD'
natsql:
select _ from _ where @.@ = _ | select ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_code = 'AD'

SQL:
SELECT template_type_description FROM ref_template_types WHERE template_type_code  =  'AD'
self correction:
SELECT template_type_description  FROM Ref_Template_Types  WHERE Template_Type_Code = 'AD'

index is 351
SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book"
What is the template type code for template type description "Book".
schema_links:
What is the template type code for template type description "Book". | ref_template_types : ref_template_types.template_type_description ( Book ) , ref_template_types.template_type_code , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_name , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ from _ where _ = _ | select ref_template_types.template_type_code from ref_template_types where ref_template_types.template_type_description = "Book"
SQL = SELECT template_type_code FROM ref_template_types WHERE template_type_description = "Book"
natsql:
select _ from _ where _ = _ | select ref_template_types.template_type_code from ref_template_types where ref_template_types.template_type_description = "Book"

SQL:
SELECT template_type_code FROM ref_template_types WHERE template_type_description = "Book"
self correction:
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = "Book"

index is 352
SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book"
Return the type code of the template type with the description "Book".
schema_links:
Return the type code of the template type with the description "Book". | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description ( Book ) , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_description , documents.document_id , documents.template_id , documents.document_name , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ from _ where @.@ = "Book" | select ref_template_types.template_type_code from ref_template_types where @.@ = "Book"
SQL = SELECT template_type_code FROM ref_template_types WHERE template_type_description = "Book"
natsql:
select _ from _ where @.@ = "Book" | select ref_template_types.template_type_code from ref_template_types where @.@ = "Book"

SQL:
SELECT template_type_code FROM ref_template_types WHERE template_type_description = "Book"
self correction:
SELECT template_type_code  FROM ref_template_types  WHERE template_type_description = "Book"

index is 353
SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID
What are the distinct template type descriptions for the templates ever used by any document?
schema_links:
What are the distinct template type descriptions for the templates ever used by any document? | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code , ref_template_types.* | templates : templates.template_id , templates.template_type_code , templates.version_number , templates.date_effective_to , templates.template_details , templates.* | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select distinct _ from _ | select distinct ref_template_types.template_type_description from ref_template_types
SQL = SELECT DISTINCT template_type_description FROM ref_template_types
natsql:
select distinct _ from _ | select distinct ref_template_types.template_type_description from ref_template_types

SQL:
SELECT DISTINCT template_type_description FROM ref_template_types
self correction:
SELECT DISTINCT ref_template_types.template_type_description FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id

index is 354
SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID
Return the different descriptions for templates that have been used in a document.
schema_links:
Return the different descriptions for templates that have been used in a document. | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code , ref_template_types.* | documents : documents.document_description , documents.template_id , documents.document_name , documents.document_id , documents.other_details , documents.* | templates : templates.template_id , templates.template_type_code , templates.template_details , templates.version_number , templates.date_effective_to , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select distinct _ from _ | select distinct templates.template_details from templates
SQL = SELECT DISTINCT template_details FROM templates
natsql:
select distinct _ from _ | select distinct templates.template_details from templates

SQL:
SELECT DISTINCT template_details FROM templates
self correction:
SELECT DISTINCT templates.Template_Details FROM templates JOIN documents ON templates.Template_ID = documents.Template_ID JOIN paragraphs ON documents.Document_ID = paragraphs.Document_ID

index is 355
SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  "Presentation"
What are the template ids with template type description "Presentation".
schema_links:
What are the template ids with template type description "Presentation". | ref_template_types : ref_template_types.template_type_description ( Presentation ) , ref_template_types.template_type_code , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_details , templates.template_type_code , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ from _ where _ = "_" | select templates.template_id from templates, ref_template_types where templates.template_type_code = ref_template_types.template_type_code and ref_template_types.template_type_description = "Presentation"
SQL = SELECT template_id FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_description = "Presentation"
natsql:
select _ from _ where _ = "_" | select templates.template_id from templates, ref_template_types where templates.template_type_code = ref_template_types.template_type_code and ref_template_types.template_type_description = "Presentation"

SQL:
SELECT template_id FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_description = "Presentation"
self correction:
SELECT templates.template_id  FROM templates  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_description = "Presentation"

index is 356
SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  "Presentation"
Return the ids corresponding to templates with the description 'Presentation'.
schema_links:
Return the ids corresponding to templates with the description 'Presentation'. | ref_template_types : ref_template_types.template_type_description ( Presentation ) , ref_template_types.template_type_code , ref_template_types.* | templates : templates.template_id , templates.template_details , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ from _ where _ = _ | select templates.template_id from templates where templates.template_type_code = (select ref_template_types.template_type_code from ref_template_types where ref_template_types.template_type_description = 'Presentation')
SQL = SELECT template_id FROM templates WHERE template_type_code = (SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Presentation')
natsql:
select _ from _ where _ = _ | select templates.template_id from templates where templates.template_type_code = (select ref_template_types.template_type_code from ref_template_types where ref_template_types.template_type_description = 'Presentation')

SQL:
SELECT template_id FROM templates WHERE template_type_code = (SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Presentation')
self correction:
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation'

index is 357
SELECT count(*) FROM Paragraphs
How many paragraphs in total?
schema_links:
How many paragraphs in total? | paragraphs : paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.document_id , paragraphs.other_details , paragraphs.* | documents : documents.document_name , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( paragraphs.paragraph_id ) from paragraphs
SQL = SELECT count(paragraph_id) FROM paragraphs
natsql:
select count ( _ ) from _ | select count ( paragraphs.paragraph_id ) from paragraphs

SQL:
SELECT count(paragraph_id) FROM paragraphs
self correction:
SELECT COUNT(paragraph_id) AS total_paragraphs FROM paragraphs

index is 358
SELECT count(*) FROM Paragraphs
Count the number of paragraphs.
schema_links:
Count the number of paragraphs. | paragraphs : paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.document_id , paragraphs.other_details , paragraphs.* | documents : documents.document_name , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select count ( _ ) from _
SQL = SELECT COUNT(*) FROM paragraphs
natsql:
select count ( _ ) from _

SQL:
SELECT COUNT(*) FROM paragraphs
self correction:
SELECT COUNT(Paragraph_ID) FROM Paragraphs

index is 359
SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'
How many paragraphs for the document with name 'Summer Show'?
schema_links:
How many paragraphs for the document with name 'Summer Show'? | documents : documents.document_name ( Summer Show ) , documents.document_id , documents.document_description , documents.template_id , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select count ( _ ) from _ where @.@ = 'Summer Show' | select count ( paragraphs.* ) from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = 'Summer Show'
SQL = SELECT count(*) FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Summer Show'
natsql:
select count ( _ ) from _ where @.@ = 'Summer Show' | select count ( paragraphs.* ) from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = 'Summer Show'

SQL:
SELECT count(*) FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Summer Show'
self correction:
SELECT count(paragraphs.Paragraph_ID) FROM paragraphs JOIN documents ON paragraphs.Document_ID = documents.Document_ID WHERE documents.Document_Name = 'Summer Show'

index is 360
SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'
Count the number of paragraphs in the document named 'Summer Show'.
schema_links:
Count the number of paragraphs in the document named 'Summer Show'. | documents : documents.document_name ( Summer Show ) , documents.document_id , documents.document_description , documents.template_id , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select count ( _ ) from _ where @.@ = 'Summer Show' | select count ( paragraphs.paragraph_id ) from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = 'Summer Show'
SQL = SELECT count(paragraph_id) FROM paragraphs WHERE document_id IN (SELECT document_id FROM documents WHERE document_name = 'Summer Show')
natsql:
select count ( _ ) from _ where @.@ = 'Summer Show' | select count ( paragraphs.paragraph_id ) from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = 'Summer Show'

SQL:
SELECT count(paragraph_id) FROM paragraphs WHERE document_id IN (SELECT document_id FROM documents WHERE document_name = 'Summer Show')
self correction:
SELECT COUNT(Paragraph_ID)  FROM Paragraphs WHERE Document_ID = (   SELECT Document_ID    FROM Documents    WHERE Document_Name = 'Summer Show' )

index is 361
select other_details from paragraphs where paragraph_text like 'korea'
Show paragraph details for paragraph with text 'Korea ' .
schema_links:
Show paragraph details for paragraph with text 'Korea ' . | paragraphs : paragraphs.paragraph_text ( Korea ) , paragraphs.other_details , paragraphs.paragraph_id , paragraphs.document_id , paragraphs.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ where _ = _ | select * from paragraphs where paragraph_text = 'Korea'
SQL = SELECT * FROM paragraphs WHERE paragraph_text  =  'Korea'
natsql:
select _ from _ where _ = _ | select * from paragraphs where paragraph_text = 'Korea'

SQL:
SELECT * FROM paragraphs WHERE paragraph_text  =  'Korea'
self correction:
SELECT Paragraphs.*  FROM Paragraphs  WHERE Paragraphs.Paragraph_Text = 'Korea'

index is 362
select other_details from paragraphs where paragraph_text like 'korea'
What are the details for the paragraph that includes the text 'Korea ' ?
schema_links:
What are the details for the paragraph that includes the text 'Korea ' ? | paragraphs : paragraphs.paragraph_text ( Korea ) , paragraphs.other_details , paragraphs.paragraph_id , paragraphs.document_id , paragraphs.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ where _ like _ | select * from paragraphs where paragraph_text like '%Korea%'
SQL = SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Korea%'
natsql:
select _ from _ where _ like _ | select * from paragraphs where paragraph_text like '%Korea%'

SQL:
SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Korea%'
self correction:
SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'

index is 363
SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'
Show all paragraph ids and texts for the document with name 'Welcome to NY'.
schema_links:
Show all paragraph ids and texts for the document with name 'Welcome to NY'. | documents : documents.document_name ( Welcome to NY ) , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.document_id , paragraphs.other_details , paragraphs.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , _ from _ where _ = 'Welcome to NY' | select paragraphs.paragraph_id , paragraphs.paragraph_text from paragraphs where paragraphs.document_id = ( select documents.document_id from documents where documents.document_name = 'Welcome to NY' )
SQL = SELECT paragraph_id ,  paragraph_text FROM paragraphs WHERE document_id  =  (SELECT document_id FROM documents WHERE document_name  =  'Welcome to NY')
natsql:
select _ , _ from _ where _ = 'Welcome to NY' | select paragraphs.paragraph_id , paragraphs.paragraph_text from paragraphs where paragraphs.document_id = ( select documents.document_id from documents where documents.document_name = 'Welcome to NY' )

SQL:
SELECT paragraph_id ,  paragraph_text FROM paragraphs WHERE document_id  =  (SELECT document_id FROM documents WHERE document_name  =  'Welcome to NY')
self correction:
SELECT paragraph_id, paragraph_text  FROM Paragraphs  WHERE document_id = (   SELECT document_id    FROM Documents    WHERE document_name = 'Welcome to NY' )

index is 364
SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'
What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?
schema_links:
What are the ids and texts of paragraphs in the document titled 'Welcome to NY'? | paragraphs : paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.document_id , paragraphs.other_details , paragraphs.* | documents : documents.document_name ( Welcome to NY ) , documents.document_id , documents.document_description , documents.template_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , _ from _ where _ = 'Welcome to NY' | select paragraphs.paragraph_id , paragraphs.paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = 'Welcome to NY'
SQL = SELECT paragraph_id , paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id  =  documents.document_id WHERE documents.document_name  =  'Welcome to NY'
natsql:
select _ , _ from _ where _ = 'Welcome to NY' | select paragraphs.paragraph_id , paragraphs.paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = 'Welcome to NY'

SQL:
SELECT paragraph_id , paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id  =  documents.document_id WHERE documents.document_name  =  'Welcome to NY'
self correction:
SELECT paragraph_id, paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Welcome to NY'

index is 365
SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Customer reviews"
Show all paragraph texts for the document "Customer reviews".
schema_links:
Show all paragraph texts for the document "Customer reviews". | documents : documents.document_name ( Customer reviews ) , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_text , paragraphs.document_id , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ where _ = _ | select paragraphs.paragraph_text from paragraphs where paragraphs.document_id = (select documents.document_id from documents where documents.document_name = "Customer reviews")
natsql:
select _ from _ where _ = _ | select paragraphs.paragraph_text from paragraphs where paragraphs.document_id = (select documents.document_id from documents where documents.document_name = "Customer reviews")
SQL:
SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = "Customer reviews")
self correction:
SELECT Paragraph_Text  FROM Paragraphs  WHERE Document_ID = (   SELECT Document_ID    FROM Documents    WHERE Document_Name = "Customer reviews" )

index is 366
SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Customer reviews"
What are the paragraph texts for the document with the name 'Customer reviews'?
schema_links:
What are the paragraph texts for the document with the name 'Customer reviews'? | documents : documents.document_name ( Customer reviews ) , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_text , paragraphs.document_id , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ where _ = 'Customer reviews' | select paragraphs.paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = 'Customer reviews'
SQL = SELECT paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Customer reviews'
natsql:
select _ from _ where _ = 'Customer reviews' | select paragraphs.paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = 'Customer reviews'

SQL:
SELECT paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Customer reviews'
self correction:
SELECT paragraph_text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews'

index is 367
SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
Show all document ids and the number of paragraphs in each document. Order by document id.
schema_links:
Show all document ids and the number of paragraphs in each document. Order by document id. | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ order by _
| select documents.document_id , count ( paragraphs.paragraph_id ) from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by documents.document_id
SQL = SELECT document_id ,  COUNT(paragraph_id) FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY documents.document_id
natsql:
select _ , count ( _ ) from _ group by _ order by _
| select documents.document_id , count ( paragraphs.paragraph_id ) from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by documents.document_id

SQL:
SELECT document_id ,  COUNT(paragraph_id) FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY documents.document_id
self correction:
SELECT documents.document_id, COUNT(paragraphs.paragraph_id) FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY documents.document_id

index is 368
SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.
schema_links:
Return the different document ids along with the number of paragraphs corresponding to each, ordered by id. | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ order by _ | select documents.document_id , count ( paragraphs.paragraph_id ) from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by documents.document_id
SQL = SELECT document_id ,  COUNT(paragraph_id) FROM paragraphs GROUP BY document_id ORDER BY document_id
natsql:
select _ , count ( _ ) from _ group by _ order by _ | select documents.document_id , count ( paragraphs.paragraph_id ) from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by documents.document_id

SQL:
SELECT document_id ,  COUNT(paragraph_id) FROM paragraphs GROUP BY document_id ORDER BY document_id
self correction:
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) FROM Documents INNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID

index is 369
SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id
Show all document ids, names and the number of paragraphs in each document.
schema_links:
Show all document ids, names and the number of paragraphs in each document. | documents : documents.document_name , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , _ , count ( _ ) from _ group by _ | select documents.document_id , documents.document_name , count ( paragraphs.paragraph_id ) from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id , documents.document_name
SQL = SELECT document_id ,  document_name ,  COUNT(paragraph_id) FROM documents JOIN paragraphs ON documents.document_id  =  paragraphs.document_id GROUP BY documents.document_id ,  documents.document_name
natsql:
select _ , _ , count ( _ ) from _ group by _ | select documents.document_id , documents.document_name , count ( paragraphs.paragraph_id ) from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id , documents.document_name

SQL:
SELECT document_id ,  document_name ,  COUNT(paragraph_id) FROM documents JOIN paragraphs ON documents.document_id  =  paragraphs.document_id GROUP BY documents.document_id ,  documents.document_name
self correction:
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name

index is 370
SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id
What are the ids and names of each document, as well as the number of paragraphs in each?
schema_links:
What are the ids and names of each document, as well as the number of paragraphs in each? | documents : documents.document_id , documents.document_name , documents.template_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | templates : templates.version_number , templates.template_id , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , _ , count ( _ ) from _ group by _ | select documents.document_id , documents.document_name , count ( paragraphs.paragraph_id ) from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id, documents.document_name
SQL = SELECT documents.document_id ,  documents.document_name ,  count(paragraphs.paragraph_id) FROM documents JOIN paragraphs ON documents.document_id  =  paragraphs.document_id GROUP BY documents.document_id, documents.document_name
natsql:
select _ , _ , count ( _ ) from _ group by _ | select documents.document_id , documents.document_name , count ( paragraphs.paragraph_id ) from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id, documents.document_name

SQL:
SELECT documents.document_id ,  documents.document_name ,  count(paragraphs.paragraph_id) FROM documents JOIN paragraphs ON documents.document_id  =  paragraphs.document_id GROUP BY documents.document_id, documents.document_name
self correction:
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name

index is 371
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
List all document ids with at least two paragraphs.
schema_links:
List all document ids with at least two paragraphs. | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | documents : documents.document_name , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ group by _ having count ( _ ) > _ | select paragraphs.document_id from paragraphs group by paragraphs.document_id having count ( paragraphs.* ) > 1
SQL = SELECT document_id FROM paragraphs GROUP BY document_id HAVING count(*) > 1
natsql:
select _ from _ group by _ having count ( _ ) > _ | select paragraphs.document_id from paragraphs group by paragraphs.document_id having count ( paragraphs.* ) > 1

SQL:
SELECT document_id FROM paragraphs GROUP BY document_id HAVING count(*) > 1
self correction:
SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) > 1

index is 372
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
What are the ids of documents that have 2 or more paragraphs?
schema_links:
What are the ids of documents that have 2 or more paragraphs? | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | documents : documents.document_id , documents.document_name , documents.template_id , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ where count ( _ ) >= _ group by _ | select documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id having count (paragraphs.paragraph_id) >= 2
SQL = SELECT document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id HAVING count(paragraph_id) >= 2
natsql:
select _ from _ where count ( _ ) >= _ group by _ | select documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id having count (paragraphs.paragraph_id) >= 2

SQL:
SELECT document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id HAVING count(paragraph_id) >= 2
self correction:
SELECT documents.document_id FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  HAVING COUNT(paragraphs.paragraph_id) >= 2

index is 373
SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1
What is the document id and name with greatest number of paragraphs?
schema_links:
What is the document id and name with greatest number of paragraphs? | paragraphs : paragraphs.document_id , paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | documents : documents.document_name , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , _ from _ order by count ( _ ) desc limit _ | select documents.document_id , documents.document_name from documents order by count ( paragraphs.* ) desc limit 1
SQL = SELECT document_id ,  document_name FROM documents JOIN paragraphs ON documents.document_id  =  paragraphs.document_id GROUP BY documents.document_id, documents.document_name ORDER BY count(*) DESC LIMIT 1
natsql:
select _ , _ from _ order by count ( _ ) desc limit _ | select documents.document_id , documents.document_name from documents order by count ( paragraphs.* ) desc limit 1

SQL:
SELECT document_id ,  document_name FROM documents JOIN paragraphs ON documents.document_id  =  paragraphs.document_id GROUP BY documents.document_id, documents.document_name ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT documents.document_id, documents.document_name  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  ORDER BY COUNT(paragraphs.paragraph_id) DESC  LIMIT 1

index is 374
SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1
Return the id and name of the document with the most paragraphs.
schema_links:
Return the id and name of the document with the most paragraphs. | documents : documents.document_id , documents.document_name , documents.template_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , _ from _ order by count ( _ ) desc limit _ | select documents.document_id , documents.document_name from documents order by count ( paragraphs.paragraph_id ) desc limit 1
SQL = SELECT document_id ,  document_name FROM documents ORDER BY (SELECT count(*) FROM paragraphs WHERE paragraphs.document_id  =  documents.document_id) DESC LIMIT 1
natsql:
select _ , _ from _ order by count ( _ ) desc limit _ | select documents.document_id , documents.document_name from documents order by count ( paragraphs.paragraph_id ) desc limit 1

SQL:
SELECT document_id ,  document_name FROM documents ORDER BY (SELECT count(*) FROM paragraphs WHERE paragraphs.document_id  =  documents.document_id) DESC LIMIT 1
self correction:
SELECT document_id, document_name  FROM documents  ORDER BY (SELECT COUNT(*) FROM paragraphs WHERE paragraphs.document_id = documents.document_id) DESC  LIMIT 1

index is 375
SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
What is the document id with least number of paragraphs?
schema_links:
What is the document id with least number of paragraphs? | paragraphs : paragraphs.document_id , paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | documents : documents.document_name , documents.document_description , documents.template_id , documents.document_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ order by count ( _ ) asc limit _ | select documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by count(paragraphs.paragraph_id) asc limit 1
SQL = SELECT document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY count(paragraphs.paragraph_id) ASC LIMIT 1
natsql:
select _ from _ order by count ( _ ) asc limit _ | select documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by count(paragraphs.paragraph_id) asc limit 1

SQL:
SELECT document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY count(paragraphs.paragraph_id) ASC LIMIT 1
self correction:
SELECT documents.document_id  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  ORDER BY COUNT(paragraphs.paragraph_id) ASC  LIMIT 1

index is 376
SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
Return the id of the document with the fewest paragraphs.
schema_links:
Return the id of the document with the fewest paragraphs. | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | documents : documents.document_id , documents.document_name , documents.document_description , documents.template_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ order by count ( _ ) asc limit _ | select documents.document_id from documents group by documents.document_id order by count ( documents.document_id ) asc limit 1
SQL = SELECT document_id FROM documents GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
natsql:
select _ from _ order by count ( _ ) asc limit _ | select documents.document_id from documents group by documents.document_id order by count ( documents.document_id ) asc limit 1

SQL:
SELECT document_id FROM documents GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
self correction:
SELECT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY COUNT(paragraphs.paragraph_id) ASC LIMIT 1

index is 377
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2
What is the document id with 1 to 2 paragraphs?
schema_links:
What is the document id with 1 to 2 paragraphs? | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | documents : documents.document_name , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ where _ >= _ and _ <= _ group by _ having count ( _ ) >= _ and count ( _ ) <= _ | select documents.document_id from paragraphs group by paragraphs.document_id having count (distinct paragraphs.paragraph_id) >= 1 and count (distinct paragraphs.paragraph_id) <= 2
SQL = SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(DISTINCT paragraph_id) >= 1 AND COUNT(DISTINCT paragraph_id) <= 2
natsql:
select _ from _ where _ >= _ and _ <= _ group by _ having count ( _ ) >= _ and count ( _ ) <= _ | select documents.document_id from paragraphs group by paragraphs.document_id having count (distinct paragraphs.paragraph_id) >= 1 and count (distinct paragraphs.paragraph_id) <= 2

SQL:
SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(DISTINCT paragraph_id) >= 1 AND COUNT(DISTINCT paragraph_id) <= 2
self correction:
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(DISTINCT Paragraphs.Paragraph_ID) >= 1 AND COUNT(DISTINCT Paragraphs.Paragraph_ID) <= 2

index is 378
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2
Give the ids of documents that have between one and two paragraphs.
schema_links:
Give the ids of documents that have between one and two paragraphs. | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | documents : documents.document_id , documents.document_name , documents.document_description , documents.template_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ where count ( _ ) >= _ and count ( _ ) <= _ group by _ | select documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id having count (paragraphs.paragraph_id) >= 1 and count (paragraphs.paragraph_id) <= 2
SQL = SELECT document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id HAVING count(paragraph_id) >= 1 AND count(paragraph_id) <= 2
natsql:
select _ from _ where count ( _ ) >= _ and count ( _ ) <= _ group by _ | select documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id having count (paragraphs.paragraph_id) >= 1 and count (paragraphs.paragraph_id) <= 2

SQL:
SELECT document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id HAVING count(paragraph_id) >= 1 AND count(paragraph_id) <= 2
self correction:
SELECT documents.document_id  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  HAVING count(paragraphs.paragraph_id) >= 1 AND count(paragraphs.paragraph_id) <= 2

index is 379
SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'
Show the document id with paragraph text 'Brazil' and 'Ireland'.
schema_links:
Show the document id with paragraph text 'Brazil' and 'Ireland'. | paragraphs : paragraphs.paragraph_text ( Brazil , Ireland ) , paragraphs.document_id , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | documents : documents.document_name , documents.document_description , documents.document_id , documents.template_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ where _ in ( _ , _ ) | select document_id from paragraphs where paragraph_text in ('Brazil', 'Ireland')
SQL = SELECT document_id FROM paragraphs WHERE paragraph_text IN ('Brazil', 'Ireland')
natsql:
select _ from _ where _ in ( _ , _ ) | select document_id from paragraphs where paragraph_text in ('Brazil', 'Ireland')

SQL:
SELECT document_id FROM paragraphs WHERE paragraph_text IN ('Brazil', 'Ireland')
self correction:
SELECT document_id  FROM paragraphs  WHERE paragraph_text IN ('Brazil', 'Ireland')

index is 380
SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'
What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?
schema_links:
What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'? | paragraphs : paragraphs.paragraph_text ( Brazil , Ireland ) , paragraphs.document_id , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ where _ and _ | select distinct paragraphs.document_id from paragraphs where paragraphs.paragraph_text = 'Brazil' and paragraphs.document_id in (select paragraphs.document_id from paragraphs where paragraphs.paragraph_text = 'Ireland')
SQL = SELECT DISTINCT document_id FROM paragraphs WHERE paragraph_text = 'Brazil' AND document_id IN (SELECT document_id FROM paragraphs WHERE paragraph_text = 'Ireland')
natsql:
select _ from _ where _ and _ | select distinct paragraphs.document_id from paragraphs where paragraphs.paragraph_text = 'Brazil' and paragraphs.document_id in (select paragraphs.document_id from paragraphs where paragraphs.paragraph_text = 'Ireland')

SQL:
SELECT DISTINCT document_id FROM paragraphs WHERE paragraph_text = 'Brazil' AND document_id IN (SELECT document_id FROM paragraphs WHERE paragraph_text = 'Ireland')
self correction:
SELECT DISTINCT document_id  FROM paragraphs  WHERE paragraph_text IN ('Brazil', 'Ireland')

index is 381
SELECT count(*) FROM teacher
How many teachers are there?
schema_links:
How many teachers are there? | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown , teacher.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( teacher.teacher_id ) from teacher
SQL = SELECT count(teacher_id) FROM teacher
natsql:
select count ( _ ) from _ | select count ( teacher.teacher_id ) from teacher

SQL:
SELECT count(teacher_id) FROM teacher
self correction:
SELECT COUNT(Teacher_ID) FROM teacher

index is 382
SELECT count(*) FROM teacher
What is the total count of teachers?
schema_links:
What is the total count of teachers? | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown , teacher.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( teacher.teacher_id ) from teacher
SQL = SELECT count(Teacher_ID) FROM teacher
natsql:
select count ( _ ) from _ | select count ( teacher.teacher_id ) from teacher

SQL:
SELECT count(Teacher_ID) FROM teacher
self correction:
SELECT count(*) FROM teacher

index is 383
SELECT Name FROM teacher ORDER BY Age ASC
List the names of teachers in ascending order of age.
schema_links:
List the names of teachers in ascending order of age. | teacher : teacher.name , teacher.age , teacher.teacher_id , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql and SQL generation:
select _ from _ order by _ asc | select teacher.name from teacher order by teacher.age asc
SQL = SELECT name FROM teacher ORDER BY age ASC
natsql:
select _ from _ order by _ asc | select teacher.name from teacher order by teacher.age asc

SQL:
SELECT name FROM teacher ORDER BY age ASC
self correction:
SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC

index is 384
SELECT Name FROM teacher ORDER BY Age ASC
What are the names of the teachers ordered by ascending age?
schema_links:
What are the names of the teachers ordered by ascending age? | teacher : teacher.name , teacher.age , teacher.teacher_id , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql and SQL generation:
select _ from _ order by _ asc | select teacher.name from teacher order by teacher.age asc
SQL = SELECT name FROM teacher ORDER BY age ASC
natsql:
select _ from _ order by _ asc | select teacher.name from teacher order by teacher.age asc

SQL:
SELECT name FROM teacher ORDER BY age ASC
self correction:
SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC

index is 385
SELECT Age ,  Hometown FROM teacher
What are the age and hometown of teachers?
schema_links:
What are the age and hometown of teachers? | teacher : teacher.age , teacher.hometown , teacher.name , teacher.teacher_id , teacher.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*
natsql and SQL generation:
select _ , _ from _ | select teacher.age , teacher.hometown from teacher
SQL = SELECT age ,  hometown FROM teacher
natsql:
select _ , _ from _ | select teacher.age , teacher.hometown from teacher

SQL:
SELECT age ,  hometown FROM teacher
self correction:
SELECT Age, Hometown FROM teacher

index is 386
SELECT Age ,  Hometown FROM teacher
What is the age and hometown of every teacher?
schema_links:
What is the age and hometown of every teacher? | teacher : teacher.age , teacher.hometown , teacher.name , teacher.teacher_id , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql and SQL generation:
select _ , _ from _ | select teacher.age , teacher.hometown from teacher
natsql:
select _ , _ from _ | select teacher.age , teacher.hometown from teacher
SQL:
SELECT age, hometown FROM teacher
self correction:
SELECT teacher.Age, teacher.Hometown FROM teacher

index is 387
select name from teacher where hometown != "little lever urban district"
List the name of teachers whose hometown is not `` Little Lever Urban District '' .
schema_links:
List the name of teachers whose hometown is not `` Little Lever Urban District '' . | teacher : teacher.hometown ( Little Lever Urban District ) , teacher.name , teacher.teacher_id , teacher.age , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql and SQL generation:
select _ from _ where _ != _ | select teacher.name from teacher where teacher.hometown != "Little Lever Urban District"
SQL = SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District'
natsql:
select _ from _ where _ != _ | select teacher.name from teacher where teacher.hometown != "Little Lever Urban District"

SQL:
SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District'
self correction:
SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District'

index is 388
select name from teacher where hometown != "little lever urban district"
What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?
schema_links:
What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ? | teacher : teacher.hometown ( Little Lever Urban District ) , teacher.name , teacher.teacher_id , teacher.age , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql and SQL generation:
select _ from _ where @.@ != _ | select teacher.name from teacher where teacher.hometown != 'Little Lever Urban District'
SQL = SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District'
natsql:
select _ from _ where @.@ != _ | select teacher.name from teacher where teacher.hometown != 'Little Lever Urban District'

SQL:
SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District'
self correction:
SELECT name  FROM teacher  WHERE hometown <> 'Little Lever Urban District'

index is 389
SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33
Show the name of teachers aged either 32 or 33?
schema_links:
Show the name of teachers aged either 32 or 33? | teacher : teacher.name , teacher.age , teacher.teacher_id , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql and SQL generation:
select _ from _ where @.@ = _ or @.@ = _ | select teacher.name from teacher where teacher.age = 32 or teacher.age = 33
SQL = SELECT name FROM teacher WHERE age = 32 OR age = 33
natsql:
select _ from _ where @.@ = _ or @.@ = _ | select teacher.name from teacher where teacher.age = 32 or teacher.age = 33

SQL:
SELECT name FROM teacher WHERE age = 32 OR age = 33
self correction:
SELECT teacher.Name FROM teacher WHERE teacher.Age IN (32, 33)

index is 390
SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33
What are the names of the teachers who are aged either 32 or 33?
schema_links:
What are the names of the teachers who are aged either 32 or 33? | teacher : teacher.name , teacher.age , teacher.teacher_id , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql and SQL generation:
select _ from _ where _ or _ | select teacher.name from teacher where teacher.age = 32 or teacher.age = 33
SQL = SELECT name FROM teacher WHERE age  =  32 OR age  =  33
natsql:
select _ from _ where _ or _ | select teacher.name from teacher where teacher.age = 32 or teacher.age = 33

SQL:
SELECT name FROM teacher WHERE age  =  32 OR age  =  33
self correction:
SELECT teacher.Name  FROM teacher  WHERE teacher.Age IN (32, 33)

index is 391
SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
What is the hometown of the youngest teacher?
schema_links:
What is the hometown of the youngest teacher? | teacher : teacher.hometown , teacher.age , teacher.name , teacher.teacher_id , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql and SQL generation:
select _ from _ order by _ limit _ | select teacher.hometown from teacher order by teacher.age limit 1
SQL = SELECT hometown FROM teacher ORDER BY age LIMIT 1
natsql:
select _ from _ order by _ limit _ | select teacher.hometown from teacher order by teacher.age limit 1

SQL:
SELECT hometown FROM teacher ORDER BY age LIMIT 1
self correction:
SELECT teacher.Hometown  FROM teacher ORDER BY teacher.Age ASC  LIMIT 1

index is 392
SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
Where is the youngest teacher from?
schema_links:
Where is the youngest teacher from? | teacher : teacher.age , teacher.hometown , teacher.name , teacher.teacher_id , teacher.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*
natsql and SQL generation:
select _ from _ order by _ limit _ | select teacher.hometown from teacher order by teacher.age asc limit 1
SQL = SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1
natsql:
select _ from _ order by _ limit _ | select teacher.hometown from teacher order by teacher.age asc limit 1

SQL:
SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1
self correction:
SELECT teacher.Hometown FROM teacher ORDER BY teacher.Age ASC LIMIT 1

index is 393
SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown
Show different hometown of teachers and the number of teachers from each hometown.
schema_links:
Show different hometown of teachers and the number of teachers from each hometown. | teacher : teacher.hometown , teacher.name , teacher.age , teacher.teacher_id , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql and SQL generation:
select distinct _ , count ( _ ) from _ group by _ | select distinct teacher.hometown , count ( teacher.* ) from teacher group by teacher.hometown
SQL = SELECT DISTINCT hometown , count(*) FROM teacher GROUP BY hometown
natsql:
select distinct _ , count ( _ ) from _ group by _ | select distinct teacher.hometown , count ( teacher.* ) from teacher group by teacher.hometown

SQL:
SELECT DISTINCT hometown , count(*) FROM teacher GROUP BY hometown
self correction:
SELECT hometown, COUNT(*)  FROM teacher  GROUP BY hometown

index is 394
SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown
For each hometown, how many teachers are there?
schema_links:
For each hometown, how many teachers are there? | teacher : teacher.hometown , teacher.name , teacher.age , teacher.teacher_id , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql and SQL generation:
select @ , count ( distinct @ ) from @ group by @ | select teacher.hometown , count ( distinct teacher.teacher_id ) from teacher group by teacher.hometown
SQL = SELECT hometown ,  count(DISTINCT teacher_id) FROM teacher GROUP BY hometown
natsql:
select @ , count ( distinct @ ) from @ group by @ | select teacher.hometown , count ( distinct teacher.teacher_id ) from teacher group by teacher.hometown

SQL:
SELECT hometown ,  count(DISTINCT teacher_id) FROM teacher GROUP BY hometown
self correction:
SELECT hometown, COUNT(DISTINCT Teacher_ID)  FROM teacher  GROUP BY hometown

index is 395
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
List the most common hometown of teachers.
schema_links:
List the most common hometown of teachers. | teacher : teacher.hometown , teacher.name , teacher.age , teacher.teacher_id , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select teacher.hometown from teacher group by teacher.hometown order by count ( teacher.* ) desc limit 1
SQL = SELECT hometown FROM teacher GROUP BY hometown ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select teacher.hometown from teacher group by teacher.hometown order by count ( teacher.* ) desc limit 1

SQL:
SELECT hometown FROM teacher GROUP BY hometown ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT teacher.Hometown  FROM teacher  GROUP BY teacher.Hometown  ORDER BY COUNT(*) DESC  LIMIT 1

index is 396
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
What is the most commmon hometowns for teachers?
schema_links:
What is the most commmon hometowns for teachers? | teacher : teacher.hometown , teacher.name , teacher.teacher_id , teacher.age , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select teacher.hometown from teacher group by teacher.hometown order by count ( teacher.* ) desc limit 1
SQL = SELECT hometown FROM teacher GROUP BY hometown ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select teacher.hometown from teacher group by teacher.hometown order by count ( teacher.* ) desc limit 1

SQL:
SELECT hometown FROM teacher GROUP BY hometown ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT teacher.hometown FROM teacher GROUP BY teacher.hometown ORDER BY COUNT(*) DESC LIMIT 1

index is 397
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2
Show the hometowns shared by at least two teachers.
schema_links:
Show the hometowns shared by at least two teachers. | teacher : teacher.hometown , teacher.teacher_id , teacher.name , teacher.age , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql and SQL generation:
select _ from _ where count ( distinct _ ) > _ group by _ | select teacher.hometown from teacher group by teacher.hometown having count ( distinct teacher.teacher_id ) > 1
SQL = SELECT hometown FROM teacher GROUP BY hometown HAVING count(DISTINCT teacher_id) > 1
natsql:
select _ from _ where count ( distinct _ ) > _ group by _ | select teacher.hometown from teacher group by teacher.hometown having count ( distinct teacher.teacher_id ) > 1

SQL:
SELECT hometown FROM teacher GROUP BY hometown HAVING count(DISTINCT teacher_id) > 1
self correction:
SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(DISTINCT Teacher_ID) > 1

index is 398
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2
What are the towns from which at least two teachers come from?
schema_links:
What are the towns from which at least two teachers come from? | teacher : teacher.hometown , teacher.name , teacher.teacher_id , teacher.age , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql and SQL generation:
select _ from _ group by _ having count ( distinct _ ) >= _ | select teacher.hometown from teacher group by teacher.hometown having count ( distinct teacher.teacher_id ) >= 2
SQL = SELECT hometown FROM teacher GROUP BY hometown HAVING count(DISTINCT teacher_id) >= 2
natsql:
select _ from _ group by _ having count ( distinct _ ) >= _ | select teacher.hometown from teacher group by teacher.hometown having count ( distinct teacher.teacher_id ) >= 2

SQL:
SELECT hometown FROM teacher GROUP BY hometown HAVING count(DISTINCT teacher_id) >= 2
self correction:
SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(DISTINCT teacher_id) >= 2

index is 399
SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID
Show names of teachers and the courses they are arranged to teach.
schema_links:
Show names of teachers and the courses they are arranged to teach. | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.teacher_id , course_arrange.course_id , course_arrange.grade , course_arrange.*
natsql and SQL generation:
select _ , _ from _ | select teacher.name , course.course from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course_arrange.course_id = course.course_id
SQL = SELECT teacher.name , course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id
natsql:
select _ , _ from _ | select teacher.name , course.course from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course_arrange.course_id = course.course_id

SQL:
SELECT teacher.name , course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id
self correction:
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID

index is 400
SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID
What is the name of each teacher and what course they teach?
schema_links:
What is the name of each teacher and what course they teach? | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql and SQL generation:
select _ , _ from _ | select teacher.name , course.course from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course_arrange.course_id = course.course_id
SQL = SELECT teacher.name , course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id
natsql:
select _ , _ from _ | select teacher.name , course.course from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course_arrange.course_id = course.course_id

SQL:
SELECT teacher.name , course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id
self correction:
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID

index is 401
SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name
Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.
schema_links:
Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name. | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course_arrange : course_arrange.teacher_id , course_arrange.course_id , course_arrange.grade , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*
natsql and SQL generation:
select _ , _ from _ order by _ asc | select teacher.name , course.course from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course_arrange.course_id = course.course_id order by teacher.name asc
SQL = SELECT name , course FROM teacher JOIN course_arrange ON teacher.teacher_id  =  course_arrange.teacher_id JOIN course ON course_arrange.course_id  =  course.course_id ORDER BY name ASC
natsql:
select _ , _ from _ order by _ asc | select teacher.name , course.course from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course_arrange.course_id = course.course_id order by teacher.name asc

SQL:
SELECT name , course FROM teacher JOIN course_arrange ON teacher.teacher_id  =  course_arrange.teacher_id JOIN course ON course_arrange.course_id  =  course.course_id ORDER BY name ASC
self correction:
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC

index is 402
SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name
What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?
schema_links:
What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher? | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.teacher_id , course_arrange.grade , course_arrange.course_id , course_arrange.*
natsql and SQL generation:
select _ , _ from _ order by _ asc | select teacher.name , course.course from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course.course_id = course_arrange.course_id order by teacher.name asc
SQL = SELECT teacher.name , course.course FROM teacher JOIN course_arrange ON teacher.teacher_id  =  course_arrange.teacher_id JOIN course ON course.course_id  =  course_arrange.course_id ORDER BY teacher.name ASC
natsql:
select _ , _ from _ order by _ asc | select teacher.name , course.course from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course.course_id = course_arrange.course_id order by teacher.name asc

SQL:
SELECT teacher.name , course.course FROM teacher JOIN course_arrange ON teacher.teacher_id  =  course_arrange.teacher_id JOIN course ON course.course_id  =  course_arrange.course_id ORDER BY teacher.name ASC
self correction:
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course.Course_ID = course_arrange.Course_ID ORDER BY teacher.Name ASC

index is 403
SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "Math"
Show the name of the teacher for the math course.
schema_links:
Show the name of the teacher for the math course. | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course : course.course ( Math ) , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade , course_arrange.*
natsql and SQL generation:
select _ from _ where _ = _ | select teacher.name from teacher where course.course = 'Math' and teacher.teacher_id = course_arrange.teacher_id
SQL = SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_arrange WHERE course_id IN (SELECT course_id FROM course WHERE course = 'Math'))
natsql:
select _ from _ where _ = _ | select teacher.name from teacher where course.course = 'Math' and teacher.teacher_id = course_arrange.teacher_id

SQL:
SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_arrange WHERE course_id IN (SELECT course_id FROM course WHERE course = 'Math'))
self correction:
SELECT name FROM teacher WHERE teacher_id IN (   SELECT teacher_id   FROM course_arrange   WHERE course_id IN (     SELECT course_id     FROM course     WHERE course = 'Math'   ) )

index is 404
SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "Math"
What are the names of the people who teach math courses?
schema_links:
What are the names of the people who teach math courses? | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course : course.course ( Math ) , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql and SQL generation:
select _ from _ where @.@ = _ | select teacher.name from teacher where teacher.teacher_id = course_arrange.teacher_id and course_arrange.course_id = course.course_id and course.course = 'Math' 
SQL = SELECT name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id WHERE course.course = 'Math'
natsql:
select _ from _ where @.@ = _ | select teacher.name from teacher where teacher.teacher_id = course_arrange.teacher_id and course_arrange.course_id = course.course_id and course.course = 'Math' 

SQL:
SELECT name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id WHERE course.course = 'Math'
self correction:
SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id WHERE course.course = 'Math'

index is 405
SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name
Show names of teachers and the number of courses they teach.
schema_links:
Show names of teachers and the number of courses they teach. | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.teacher_id , course_arrange.course_id , course_arrange.grade , course_arrange.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select teacher.name , count ( course_arrange.* ) from teacher group by teacher.name
SQL = SELECT name ,  COUNT(*) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY name
natsql:
select _ , count ( _ ) from _ group by _ | select teacher.name , count ( course_arrange.* ) from teacher group by teacher.name

SQL:
SELECT name ,  COUNT(*) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY name
self correction:
SELECT name, COUNT(*) AS course_count FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY name

index is 406
SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name
What are the names of the teachers and how many courses do they teach?
schema_links:
What are the names of the teachers and how many courses do they teach? | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.teacher_id , course_arrange.grade , course_arrange.course_id , course_arrange.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select teacher.name , count ( course_arrange.* ) from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id group by teacher.name
SQL = SELECT name ,  COUNT(*) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY name
natsql:
select _ , count ( _ ) from _ group by _ | select teacher.name , count ( course_arrange.* ) from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id group by teacher.name

SQL:
SELECT name ,  COUNT(*) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY name
self correction:
SELECT T1.name, COUNT(*) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.name

index is 407
SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2
Show names of teachers that teach at least two courses.
schema_links:
Show names of teachers that teach at least two courses. | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course_arrange : course_arrange.teacher_id , course_arrange.grade , course_arrange.course_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*
natsql and SQL generation:
select _ from _ group by _ having count ( _ ) > _ | select teacher.name from teacher group by teacher.name having count ( teacher.teacher_id ) > 1
SQL = SELECT name FROM teacher GROUP BY name HAVING count(*)  >  1
natsql:
select _ from _ group by _ having count ( _ ) > _ | select teacher.name from teacher group by teacher.name having count ( teacher.teacher_id ) > 1

SQL:
SELECT name FROM teacher GROUP BY name HAVING count(*)  >  1
self correction:
SELECT name  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID, teacher.Name HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2

index is 408
SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2
What are the names of the teachers who teach at least two courses?
schema_links:
What are the names of the teachers who teach at least two courses? | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course_arrange : course_arrange.teacher_id , course_arrange.grade , course_arrange.course_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*
natsql and SQL generation:
select _ from _ where count ( _ ) >= _ group by _ | select teacher.name from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id group by teacher.name having count(*) >= 2
SQL = SELECT name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY name HAVING count(*) >= 2
natsql:
select _ from _ where count ( _ ) >= _ group by _ | select teacher.name from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id group by teacher.name having count(*) >= 2

SQL:
SELECT name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY name HAVING count(*) >= 2
self correction:
SELECT name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID, teacher.Name HAVING count(DISTINCT course_arrange.Course_ID) >= 2

index is 409
SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
List the names of teachers who have not been arranged to teach courses.
schema_links:
List the names of teachers who have not been arranged to teach courses. | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course_arrange : course_arrange.teacher_id , course_arrange.grade , course_arrange.course_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ ) | select teacher.name from teacher where teacher.teacher_id not in ( select course_arrange.teacher_id from course_arrange )
SQL = SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange)
natsql:
select _ from _ where _ not in ( select _ from _ ) | select teacher.name from teacher where teacher.teacher_id not in ( select course_arrange.teacher_id from course_arrange )

SQL:
SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange)
self correction:
SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT DISTINCT teacher_id FROM course_arrange)

index is 410
SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
What are the names of the teachers whose courses have not been arranged?
schema_links:
What are the names of the teachers whose courses have not been arranged? | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course_arrange : course_arrange.teacher_id , course_arrange.grade , course_arrange.course_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ ) | select teacher.name from teacher where teacher.teacher_id not in ( select course_arrange.teacher_id from course_arrange )
SQL = SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange)
natsql:
select _ from _ where _ not in ( select _ from _ ) | select teacher.name from teacher where teacher.teacher_id not in ( select course_arrange.teacher_id from course_arrange )

SQL:
SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange)
self correction:
SELECT teacher.Name FROM teacher WHERE teacher.Teacher_ID NOT IN (SELECT course_arrange.Teacher_ID FROM course_arrange)

index is 411
SELECT count(*) FROM visitor WHERE age  <  30
How many visitors below age 30 are there?
schema_links:
How many visitors below age 30 are there? | visitor : visitor.age , visitor.name , visitor.level_of_membership , visitor.id , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.*
natsql and SQL generation:
select count ( * ) from _ where _ < _ | select count ( * ) from visitor where visitor.age < 30
SQL = SELECT count(*) FROM visitor WHERE age < 30
natsql:
select count ( * ) from _ where _ < _ | select count ( * ) from visitor where visitor.age < 30

SQL:
SELECT count(*) FROM visitor WHERE age < 30
self correction:
SELECT count(*) FROM visitor WHERE Age < 30

index is 412
SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC
Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.
schema_links:
Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low. | visitor : visitor.level_of_membership , visitor.name , visitor.id , visitor.age , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.*
natsql and SQL generation:
select _ from _ where _ > _ order by _ desc | select visitor.name from visitor where visitor.level_of_membership > 4 order by visitor.level_of_membership desc
SQL = SELECT name FROM visitor WHERE level_of_membership  >  4 ORDER BY level_of_membership DESC
natsql:
select _ from _ where _ > _ order by _ desc | select visitor.name from visitor where visitor.level_of_membership > 4 order by visitor.level_of_membership desc

SQL:
SELECT name FROM visitor WHERE level_of_membership  >  4 ORDER BY level_of_membership DESC
self correction:
SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Level_of_membership DESC

index is 413
SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4
What is the average age of the visitors whose membership level is not higher than 4?
schema_links:
What is the average age of the visitors whose membership level is not higher than 4? | visitor : visitor.level_of_membership , visitor.age , visitor.name , visitor.id , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.*
natsql and SQL generation:
select avg ( _ ) from _ where _ <= _ | select avg ( visitor.age ) from visitor where visitor.level_of_membership <= 4
SQL = SELECT avg(age) FROM visitor WHERE level_of_membership <= 4
natsql:
select avg ( _ ) from _ where _ <= _ | select avg ( visitor.age ) from visitor where visitor.level_of_membership <= 4

SQL:
SELECT avg(age) FROM visitor WHERE level_of_membership <= 4
self correction:
SELECT avg(Age) FROM visitor WHERE Level_of_membership <= 4

index is 414
SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC
Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.
schema_links:
Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young. | visitor : visitor.level_of_membership , visitor.name , visitor.age , visitor.id , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.*
natsql and SQL generation:
select _ , _ from _ where _ > _ order by _ asc | select visitor.name , visitor.level_of_membership from visitor where visitor.level_of_membership > 4 order by visitor.age asc
SQL = SELECT name , level_of_membership FROM visitor WHERE level_of_membership  >  4 ORDER BY age ASC
natsql:
select _ , _ from _ where _ > _ order by _ asc | select visitor.name , visitor.level_of_membership from visitor where visitor.level_of_membership > 4 order by visitor.age asc

SQL:
SELECT name , level_of_membership FROM visitor WHERE level_of_membership  >  4 ORDER BY age ASC
self correction:
SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Age ASC

index is 415
SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1
Find the id and name of the museum that has the most staff members?
schema_links:
Find the id and name of the museum that has the most staff members? | museum : museum.museum_id , museum.num_of_staff , museum.name , museum.open_year , museum.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.*
natsql and SQL generation:
select _ , _ from _ order by _ desc limit _ | select museum.museum_id , museum.name from museum order by museum.num_of_staff desc limit 1
SQL = SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1
natsql:
select _ , _ from _ order by _ desc limit _ | select museum.museum_id , museum.name from museum order by museum.num_of_staff desc limit 1

SQL:
SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1
self correction:
SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1

index is 416
SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009
Find the average number of staff working for the museums that were open before 2009.
schema_links:
Find the average number of staff working for the museums that were open before 2009. | museum : museum.num_of_staff , museum.open_year , museum.museum_id , museum.name , museum.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.*
natsql and SQL generation:
select avg ( _ ) from _ where _ < _ | select avg ( museum.num_of_staff ) from museum where museum.open_year < 2009
natsql:
select avg ( _ ) from _ where _ < _ | select avg ( museum.num_of_staff ) from museum where museum.open_year < 2009
SQL:
SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009
self correction:
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009

index is 417
SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'
What are the opening year and staff number of the museum named Plaza Museum?
schema_links:
What are the opening year and staff number of the museum named Plaza Museum? | museum : museum.name ( Plaza Museum ) , museum.num_of_staff , museum.open_year , museum.museum_id , museum.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.*
natsql and SQL generation:
select _ , _ from _ where _.name = 'Plaza Museum' | select museum.open_year , museum.num_of_staff from museum where museum.name = 'Plaza Museum'
SQL = SELECT open_year , num_of_staff FROM museum WHERE name = 'Plaza Museum'
natsql:
select _ , _ from _ where _.name = 'Plaza Museum' | select museum.open_year , museum.num_of_staff from museum where museum.name = 'Plaza Museum'

SQL:
SELECT open_year , num_of_staff FROM museum WHERE name = 'Plaza Museum'
self correction:
SELECT open_year, num_of_staff FROM museum WHERE name = 'Plaza Museum'

index is 418
SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)
find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.
schema_links:
find the names of museums which have more staff than the minimum staff number of all museums opened after 2010. | museum : museum.num_of_staff , museum.open_year , museum.name , museum.museum_id , museum.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.*
natsql and SQL generation:
select _ from _ where @.@ > ( select min ( @.@ ) from _ where @.@ > _ ) | select museum.name from museum where museum.num_of_staff > ( select min(museum.num_of_staff) from museum where museum.open_year > 2010 )
SQL = SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)
natsql:
select _ from _ where @.@ > ( select min ( @.@ ) from _ where @.@ > _ ) | select museum.name from museum where museum.num_of_staff > ( select min(museum.num_of_staff) from museum where museum.open_year > 2010 )

SQL:
SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)
self correction:
SELECT name  FROM museum  WHERE num_of_staff > (SELECT MIN(num_of_staff) FROM museum WHERE open_year > 2010)

index is 419
SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1
find the id, name and age for visitors who visited some museums more than once.
schema_links:
find the id, name and age for visitors who visited some museums more than once. | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.* | visit : visit.visitor_id , visit.museum_id , visit.total_spent , visit.num_of_ticket , visit.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.*
natsql and SQL generation:
select _ , _ , _ from _ where count ( _ ) > _ group by _ | select visitor.id , visitor.name , visitor.age from visitor where count ( visitor.* ) > 1 group by visitor.id , visitor.name , visitor.age
SQL = SELECT id , name , age FROM visitor GROUP BY id , name , age HAVING count(*)  >  1
natsql:
select _ , _ , _ from _ where count ( _ ) > _ group by _ | select visitor.id , visitor.name , visitor.age from visitor where count ( visitor.* ) > 1 group by visitor.id , visitor.name , visitor.age

SQL:
SELECT id , name , age FROM visitor GROUP BY id , name , age HAVING count(*)  >  1
self correction:
SELECT visitor.ID, visitor.Name, visitor.Age  FROM visitor  JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID, visitor.Name, visitor.Age HAVING COUNT(DISTINCT visit.Museum_ID) > 1

index is 420
SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1
What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?
schema_links:
What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets? | visitor : visitor.level_of_membership , visitor.id , visitor.name , visitor.age , visitor.* | visit : visit.total_spent , visit.visitor_id , visit.museum_id , visit.num_of_ticket , visit.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.*
natsql and SQL generation:
select _ , _ , _ from _ where @.@ = max ( _ ) | select visitor.id , visitor.name , visitor.level_of_membership from visit join visitor on visit.visitor_id = visitor.id where visit.total_spent = (select max(total_spent) from visit)
SQL = SELECT id, name, level_of_membership FROM visitor WHERE id IN (SELECT visitor_id FROM visit GROUP BY visitor_id HAVING sum(total_spent) = (SELECT max(total_spent) FROM visit))
natsql:
select _ , _ , _ from _ where @.@ = max ( _ ) | select visitor.id , visitor.name , visitor.level_of_membership from visit join visitor on visit.visitor_id = visitor.id where visit.total_spent = (select max(total_spent) from visit)

SQL:
SELECT id, name, level_of_membership FROM visitor WHERE id IN (SELECT visitor_id FROM visit GROUP BY visitor_id HAVING sum(total_spent) = (SELECT max(total_spent) FROM visit))
self correction:
SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.ID IN (     SELECT visit.visitor_ID     FROM visit     GROUP BY visit.visitor_ID     HAVING SUM(visit.Total_spent) = (         SELECT MAX(total_spent)         FROM visit     ) )

index is 421
SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1
What are the id and name of the museum visited most times?
schema_links:
What are the id and name of the museum visited most times? | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year , museum.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.*
natsql and SQL generation:
select _ , _ from _ group by _ order by count ( _ ) desc limit _ | select museum.museum_id , museum.name from museum group by museum.museum_id , museum.name order by count ( visit.* ) desc limit 1
SQL = SELECT museum_id ,  name FROM museum GROUP BY museum_id , name ORDER BY count(*) DESC LIMIT 1
natsql:
select _ , _ from _ group by _ order by count ( _ ) desc limit _ | select museum.museum_id , museum.name from museum group by museum.museum_id , museum.name order by count ( visit.* ) desc limit 1

SQL:
SELECT museum_id ,  name FROM museum GROUP BY museum_id , name ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT 

index is 422
SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)
What is the name of the museum that had no visitor yet?
schema_links:
What is the name of the museum that had no visitor yet? | museum : museum.name , museum.museum_id , museum.open_year , museum.num_of_staff , museum.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.*
natsql and SQL generation:
select _ from _ where not exists ( select * from _ where _ = _ ) | select museum.name from museum where not exists ( select * from visit where museum.museum_id = visit.museum_id )
SQL = SELECT name FROM museum WHERE NOT EXISTS (SELECT * FROM visit WHERE museum.Museum_ID = visit.Museum_ID)
natsql:
select _ from _ where not exists ( select * from _ where _ = _ ) | select museum.name from museum where not exists ( select * from visit where museum.museum_id = visit.museum_id )

SQL:
SELECT name FROM museum WHERE NOT EXISTS (SELECT * FROM visit WHERE museum.Museum_ID = visit.Museum_ID)
self correction:
SELECT name  FROM museum  WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)

index is 423
SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1
Find the name and age of the visitor who bought the most tickets at once.
schema_links:
Find the name and age of the visitor who bought the most tickets at once. | visitor : visitor.age , visitor.name , visitor.id , visitor.level_of_membership , visitor.* | visit : visit.visitor_id , visit.num_of_ticket , visit.museum_id , visit.total_spent , visit.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.*
natsql and SQL generation:
select _ , _ from _ order by _ desc limit _ | select visitor.name , visitor.age from visitor order by visit.num_of_ticket desc limit 1
SQL = SELECT name ,  age FROM visitor ORDER BY num_of_ticket DESC LIMIT 1
natsql:
select _ , _ from _ order by _ desc limit _ | select visitor.name , visitor.age from visitor order by visit.num_of_ticket desc limit 1

SQL:
SELECT name ,  age FROM visitor ORDER BY num_of_ticket DESC LIMIT 1
self correction:
SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.Name, visitor.Age ORDER BY visit.Num_of_Ticket DESC LIMIT 1

index is 424
SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit
What are the average and maximum number of tickets bought in all visits?
schema_links:
What are the average and maximum number of tickets bought in all visits? | visit : visit.num_of_ticket , visit.museum_id , visit.visitor_id , visit.total_spent , visit.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.*
natsql and SQL generation:
select avg ( _ ) , max ( _ ) from _ | select avg ( visit.num_of_ticket ) , max ( visit.num_of_ticket ) from visit
SQL = SELECT avg(num_of_ticket) , max(num_of_ticket) FROM visit
natsql:
select avg ( _ ) , max ( _ ) from _ | select avg ( visit.num_of_ticket ) , max ( visit.num_of_ticket ) from visit

SQL:
SELECT avg(num_of_ticket) , max(num_of_ticket) FROM visit
self correction:
SELECT avg(Num_of_Ticket), max(Num_of_Ticket) FROM visit

index is 425
SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1
What is the total ticket expense of the visitors whose membership level is 1?
schema_links:
What is the total ticket expense of the visitors whose membership level is 1? | visitor : visitor.level_of_membership , visitor.name , visitor.id , visitor.age , visitor.* | visit : visit.total_spent , visit.visitor_id , visit.num_of_ticket , visit.museum_id , visit.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.*
natsql and SQL generation:
select sum ( _ ) from _ where _ | select sum ( visit.total_spent ) from visit where visitor.level_of_membership = 1
SQL = SELECT sum(total_spent) FROM visit WHERE visitor_ID IN (SELECT ID FROM visitor WHERE Level_of_membership = 1)
natsql:
select sum ( _ ) from _ where _ | select sum ( visit.total_spent ) from visit where visitor.level_of_membership = 1

SQL:
SELECT sum(total_spent) FROM visit WHERE visitor_ID IN (SELECT ID FROM visitor WHERE Level_of_membership = 1)
self correction:
SELECT SUM(visit.Total_spent)  FROM visit  INNER JOIN visitor ON visit.visitor_ID = visitor.ID  WHERE visitor.Level_of_membership = 1

index is 426
SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011
What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?
schema_links:
What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011? | museum : museum.open_year , museum.name , museum.museum_id , museum.num_of_staff , museum.* | visitor : visitor.name , visitor.id , visitor.age , visitor.level_of_membership , visitor.* | visit : visit.visitor_id , visit.museum_id , visit.total_spent , visit.num_of_ticket , visit.*
natsql and SQL generation:
select distinct _ from _ where _ in ( select _ from _ where _ < 2009 ) and _ in ( select _ from _ where _ > 2011 ) | select distinct visitor.name from visitor where visitor.id in ( select visit.visitor_id from visit where visit.museum_id in ( select museum.museum_id from museum where museum.open_year < 2009 ) ) and visitor.id in ( select visit.visitor_id from visit where visit.museum_id in ( select museum.museum_id from museum where museum.open_year > 2011 ) )
SQL = SELECT DISTINCT T1.name FROM visitor AS T1 WHERE T1.id IN (SELECT T2.visitor_ID FROM visit AS T2 WHERE T2.Museum_ID IN (SELECT T3.Museum_ID FROM museum AS T3 WHERE T3.Open_Year < 2009)) AND T1.id IN (SELECT T4.visitor_ID FROM visit AS T4 WHERE T4.Museum_ID IN (SELECT T5.Museum_ID FROM museum AS T5 WHERE T5.Open_Year > 2011))
natsql:
select distinct _ from _ where _ in ( select _ from _ where _ < 2009 ) and _ in ( select _ from _ where _ > 2011 ) | select distinct visitor.name from visitor where visitor.id in ( select visit.visitor_id from visit where visit.museum_id in ( select museum.museum_id from museum where museum.open_year < 2009 ) ) and visitor.id in ( select visit.visitor_id from visit where visit.museum_id in ( select museum.museum_id from museum where museum.open_year > 2011 ) )

SQL:
SELECT DISTINCT T1.name FROM visitor AS T1 WHERE T1.id IN (SELECT T2.visitor_ID FROM visit AS T2 WHERE T2.Museum_ID IN (SELECT T3.Museum_ID FROM museum AS T3 WHERE T3.Open_Year < 2009)) AND T1.id IN (SELECT T4.visitor_ID FROM visit AS T4 WHERE T4.Museum_ID IN (SELECT T5.Museum_ID FROM museum AS T5 WHERE T5.Open_Year > 2011))
self correction:
SELECT DISTINCT T1.Name  FROM visitor AS T1  WHERE T1.ID IN (     SELECT T2.visitor_ID      FROM visit AS T2      JOIN museum AS T3 ON T2.Museum_ID = T3.Museum_ID      WHERE T3.Open_Year < 2009 )  AND T1.ID IN (     SELECT T4.visitor_ID      FROM visit AS T4      JOIN museum AS T5 ON T4.Museum_ID = T5.Museum_ID      WHERE T5.Open_Year > 2011 )

index is 427
SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)
Find the number of visitors who did not visit any museum opened after 2010.
schema_links:
Find the number of visitors who did not visit any museum opened after 2010. | museum : museum.open_year , museum.name , museum.museum_id , museum.num_of_staff , museum.* | visit : visit.visitor_id , visit.museum_id , visit.num_of_ticket , visit.total_spent , visit.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.*
natsql and SQL generation:
select count ( distinct _ ) from _ where _ | select count ( distinct visitor_id ) from visit where museum_id in ( select museum_id from museum where open_year <= 2010 )
SQL = SELECT count(DISTINCT visitor_id) FROM visit WHERE museum_id NOT IN (SELECT museum_id FROM museum WHERE open_year > 2010)
natsql:
select count ( distinct _ ) from _ where _ | select count ( distinct visitor_id ) from visit where museum_id in ( select museum_id from museum where open_year <= 2010 )

SQL:
SELECT count(DISTINCT visitor_id) FROM visit WHERE museum_id NOT IN (SELECT museum_id FROM museum WHERE open_year > 2010)
self correction:
SELECT COUNT(DISTINCT visitor_ID) FROM visit LEFT JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year <= 2010 AND museum.Museum_ID IS NULL

index is 428
SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008
How many museums were opened after 2013 or before 2008?
schema_links:
How many museums were opened after 2013 or before 2008? | museum : museum.open_year , museum.museum_id , museum.name , museum.num_of_staff , museum.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.*
natsql and SQL generation:
select count ( * ) from _ where _ > 2013 or _ < 2008 | select count ( * ) from museum where open_year > 2013 or open_year < 2008
SQL = SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008
natsql:
select count ( * ) from _ where _ > 2013 or _ < 2008 | select count ( * ) from museum where open_year > 2013 or open_year < 2008

SQL:
SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008
self correction:
SELECT COUNT(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008

index is 429
SELECT count(*) FROM players
Find the total number of players.
schema_links:
Find the total number of players. | players : players.player_id , players.first_name , players.hand , players.last_name , players.birth_date , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.round , matches.loser_name , matches.match_num , matches.minutes , matches.score , matches.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( * ) from players
SQL = SELECT count(*) FROM players
natsql:
select count ( _ ) from _ | select count ( * ) from players

SQL:
SELECT count(*) FROM players
self correction:
SELECT count(player_id) FROM players

index is 430
SELECT count(*) FROM players
How many players are there?
schema_links:
How many players are there? | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.round , matches.score , matches.match_num , matches.minutes , matches.surface , matches.*
natsql and SQL generation:
select count ( _ ) from _ | select count(*) from players
SQL = SELECT count(*) FROM players
natsql:
select count ( _ ) from _ | select count(*) from players

SQL:
SELECT count(*) FROM players
self correction:
SELECT count(player_id) FROM players

index is 431
SELECT count(*) FROM matches
Find the total number of matches.
schema_links:
Find the total number of matches. | matches : matches.match_num , matches.loser_name , matches.minutes , matches.round , matches.score , matches.* | players : players.player_id , players.first_name , players.hand , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select count ( _ ) from _ | select count(*) from matches
SQL = SELECT count(*) FROM matches
natsql:
select count ( _ ) from _ | select count(*) from matches

SQL:
SELECT count(*) FROM matches
self correction:
SELECT count(*) FROM matches

index is 432
SELECT count(*) FROM matches
Count the number of matches.
schema_links:
Count the number of matches. | matches : matches.match_num , matches.loser_name , matches.loser_hand , matches.loser_id , matches.minutes , matches.* | players : players.player_id , players.first_name , players.hand , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select count ( _ ) from _
SQL = SELECT count(*) FROM matches
natsql:
select count ( _ ) from _

SQL:
SELECT count(*) FROM matches
self correction:
SELECT COUNT(*) FROM matches

index is 433
SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
List the first name and birth date of all players from the country with code USA.
schema_links:
List the first name and birth date of all players from the country with code USA. | players : players.first_name , players.birth_date , players.country_code ( USA ) , players.last_name ( Date ) , players.player_id , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.loser_ioc ( USA ) , matches.winner_ioc ( USA ) , matches.minutes , matches.round , matches.score , matches.*
natsql and SQL generation:
select _ , _ from _ where @.@ = 'USA' | select players.first_name , players.birth_date from players where players.country_code = 'USA'
SQL = SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
natsql:
select _ , _ from _ where @.@ = 'USA' | select players.first_name , players.birth_date from players where players.country_code = 'USA'

SQL:
SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
self correction:
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'

index is 434
SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
What are the first names and birth dates of players from the USA?
schema_links:
What are the first names and birth dates of players from the USA? | players : players.first_name , players.birth_date , players.country_code ( USA ) , players.player_id , players.hand , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.loser_ioc ( USA ) , matches.winner_ioc ( USA ) , matches.round , matches.score , matches.match_num , matches.*
natsql and SQL generation:
select _ , _ from _ where @.@ = 'USA' | select players.first_name , players.birth_date from players where players.country_code = 'USA'
SQL = SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
natsql:
select _ , _ from _ where @.@ = 'USA' | select players.first_name , players.birth_date from players where players.country_code = 'USA'

SQL:
SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
self correction:
SELECT first_name, birth_date  FROM players  WHERE country_code = 'USA'

index is 435
SELECT avg(loser_age) ,  avg(winner_age) FROM matches
Find the average age of losers and winners of all matches.
schema_links:
Find the average age of losers and winners of all matches. | matches : matches.loser_age , matches.winner_age , matches.loser_name , matches.winner_entry , matches.loser_entry , matches.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select avg ( _ ) , avg ( _ ) from _ | select avg ( matches.loser_age ) , avg ( matches.winner_age ) from matches
SQL = SELECT avg(loser_age) , avg(winner_age) FROM matches
natsql:
select avg ( _ ) , avg ( _ ) from _ | select avg ( matches.loser_age ) , avg ( matches.winner_age ) from matches

SQL:
SELECT avg(loser_age) , avg(winner_age) FROM matches
self correction:
SELECT avg(loser_age), avg(winner_age) FROM matches

index is 436
SELECT avg(loser_age) ,  avg(winner_age) FROM matches
What are the average ages of losers and winners across matches?
schema_links:
What are the average ages of losers and winners across matches? | matches : matches.loser_age , matches.winner_age , matches.loser_name , matches.loser_entry , matches.winner_entry , matches.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.tours , rankings.ranking_date , rankings.player_id , rankings.ranking_points , rankings.*
natsql and SQL generation:
select avg ( _ ) , avg ( _ ) from _ | select avg ( matches.loser_age ) , avg ( matches.winner_age ) from matches
SQL = SELECT avg(loser_age) , avg(winner_age) FROM matches
natsql:
select avg ( _ ) , avg ( _ ) from _ | select avg ( matches.loser_age ) , avg ( matches.winner_age ) from matches

SQL:
SELECT avg(loser_age) , avg(winner_age) FROM matches
self correction:
SELECT avg(loser_age) AS average_loser_age, avg(winner_age) AS average_winner_age FROM matches

index is 437
SELECT avg(winner_rank) FROM matches
Find the average rank of winners in all matches.
schema_links:
Find the average rank of winners in all matches. | matches : matches.winner_rank , matches.winner_rank_points , matches.match_num , matches.winner_name , matches.winner_seed , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.ranking_date , rankings.* | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.*
natsql and SQL generation:
select avg ( _ ) from _ | select avg ( matches.winner_rank ) from matches
SQL = SELECT avg(winner_rank) FROM matches
natsql:
select avg ( _ ) from _ | select avg ( matches.winner_rank ) from matches

SQL:
SELECT avg(winner_rank) FROM matches
self correction:
SELECT avg(winner_rank) FROM matches

index is 438
SELECT avg(winner_rank) FROM matches
What is the average rank for winners in all matches?
schema_links:
What is the average rank for winners in all matches? | matches : matches.winner_rank , matches.winner_rank_points , matches.winner_id , matches.winner_name , matches.match_num , matches.* | rankings : rankings.ranking , rankings.ranking_points , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.*
natsql and SQL generation:
select avg ( _ ) from _ | select avg ( matches.winner_rank ) from matches
SQL = SELECT AVG(winner_rank) FROM matches
natsql:
select avg ( _ ) from _ | select avg ( matches.winner_rank ) from matches

SQL:
SELECT AVG(winner_rank) FROM matches
self correction:
SELECT AVG(winner_rank) FROM matches

index is 439
SELECT min(loser_rank) FROM matches
Find the highest rank of losers in all matches.
schema_links:
Find the highest rank of losers in all matches. | matches : matches.loser_rank , matches.loser_rank_points , matches.loser_name , matches.loser_id , matches.loser_entry , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.*
natsql and SQL generation:
select max ( _ ) from _ | select max ( matches.loser_rank ) from matches
SQL = SELECT MAX(loser_rank) FROM matches
natsql:
select max ( _ ) from _ | select max ( matches.loser_rank ) from matches

SQL:
SELECT MAX(loser_rank) FROM matches
self correction:
SELECT MAX(loser_rank) AS highest_rank FROM matches

index is 440
SELECT min(loser_rank) FROM matches
What is the best rank of losers across all matches?
schema_links:
What is the best rank of losers across all matches? | matches : matches.loser_rank , matches.loser_rank_points , matches.loser_name , matches.best_of , matches.loser_id , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.ranking_date , rankings.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.*
natsql and SQL generation:
select max ( _ ) from _ | select max ( matches.loser_rank ) from matches
SQL = SELECT max(loser_rank) FROM matches
natsql:
select max ( _ ) from _ | select max ( matches.loser_rank ) from matches

SQL:
SELECT max(loser_rank) FROM matches
self correction:
SELECT max(loser_rank) AS best_rank_of_losers FROM matches

index is 441
SELECT count(DISTINCT country_code) FROM players
find the number of distinct country codes of all players.
schema_links:
find the number of distinct country codes of all players. | players : players.country_code , players.player_id , players.hand , players.first_name , players.last_name , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct players.country_code ) from players
SQL = SELECT count(DISTINCT country_code) FROM players
natsql:
select count ( distinct _ ) from _ | select count ( distinct players.country_code ) from players

SQL:
SELECT count(DISTINCT country_code) FROM players
self correction:
SELECT COUNT(DISTINCT country_code) FROM players

index is 442
SELECT count(DISTINCT country_code) FROM players
How many distinct countries do players come from?
schema_links:
How many distinct countries do players come from? | players : players.country_code , players.player_id , players.hand , players.birth_date , players.first_name , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct players.country_code ) from players
SQL = SELECT count(DISTINCT country_code) FROM players
natsql:
select count ( distinct _ ) from _ | select count ( distinct players.country_code ) from players

SQL:
SELECT count(DISTINCT country_code) FROM players
self correction:
SELECT COUNT(DISTINCT country_code) FROM players

index is 443
SELECT count(DISTINCT loser_name) FROM matches
Find the number of distinct name of losers.
schema_links:
Find the number of distinct name of losers. | matches : matches.loser_name , matches.loser_rank , matches.loser_id , matches.loser_seed , matches.round , matches.* | players : players.last_name , players.hand , players.player_id , players.first_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct matches.loser_name ) from matches
SQL = SELECT count(DISTINCT loser_name) FROM matches
natsql:
select count ( distinct _ ) from _ | select count ( distinct matches.loser_name ) from matches

SQL:
SELECT count(DISTINCT loser_name) FROM matches
self correction:
SELECT COUNT(DISTINCT loser_name) AS distinct_loser_count FROM matches

index is 444
SELECT count(DISTINCT loser_name) FROM matches
How many different loser names are there?
schema_links:
How many different loser names are there? | matches : matches.loser_name , matches.loser_rank , matches.round , matches.score , matches.loser_entry , matches.* | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.tours , rankings.ranking_date , rankings.player_id , rankings.ranking_points , rankings.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct matches.loser_name ) from matches
SQL = SELECT count(DISTINCT loser_name) FROM matches
natsql:
select count ( distinct _ ) from _ | select count ( distinct matches.loser_name ) from matches

SQL:
SELECT count(DISTINCT loser_name) FROM matches
self correction:
SELECT count(DISTINCT loser_name) FROM matches

index is 445
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10
Find the name of tourney that has more than 10 matches.
schema_links:
Find the name of tourney that has more than 10 matches. | matches : matches.tourney_id , matches.tourney_name , matches.tourney_level , matches.match_num , matches.tourney_date , matches.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select _ from _ where count ( _ ) > _ group by _ | select matches.tourney_name from matches group by matches.tourney_name having count(matches.match_num) > 10
SQL = SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(match_num)  >  10
natsql:
select _ from _ where count ( _ ) > _ group by _ | select matches.tourney_name from matches group by matches.tourney_name having count(matches.match_num) > 10

SQL:
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(match_num)  >  10
self correction:
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(match_num) > 10

index is 446
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10
What are the names of tournaments that have more than 10 matches?
schema_links:
What are the names of tournaments that have more than 10 matches? | matches : matches.tourney_name , matches.tourney_id , matches.tourney_level , matches.match_num , matches.tourney_date , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | players : players.player_id , players.first_name , players.hand , players.last_name , players.birth_date , players.*
natsql and SQL generation:
select distinct _ from _ where count ( _ ) > _ group by _ | select distinct matches.tourney_name from matches where count ( matches.*) > 10 group by matches.tourney_name
SQL = SELECT DISTINCT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10
natsql:
select distinct _ from _ where count ( _ ) > _ group by _ | select distinct matches.tourney_name from matches where count ( matches.*) > 10 group by matches.tourney_name

SQL:
SELECT DISTINCT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10
self correction:
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10

index is 447
SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016
List the names of all winners who played in both 2013 and 2016.
schema_links:
List the names of all winners who played in both 2013 and 2016. | matches : matches.winner_name , matches.year , matches.winner_id , matches.winner_rank , matches.tourney_id , matches.* | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select distinct _ from _ where _ | select distinct matches.winner_name from matches where matches.year = 2013 and matches.winner_name in (select winner_name from matches where year = 2016)
SQL = SELECT DISTINCT winner_name FROM matches WHERE year = 2013 AND winner_name IN (SELECT winner_name FROM matches WHERE year = 2016)
natsql:
select distinct _ from _ where _ | select distinct matches.winner_name from matches where matches.year = 2013 and matches.winner_name in (select winner_name from matches where year = 2016)

SQL:
SELECT DISTINCT winner_name FROM matches WHERE year = 2013 AND winner_name IN (SELECT winner_name FROM matches WHERE year = 2016)
self correction:
SELECT DISTINCT winner_name  FROM matches  WHERE winner_id IN (     SELECT winner_id      FROM matches      WHERE year = 2013 )  AND winner_id IN (     SELECT winner_id      FROM matches      WHERE year = 2016 )

index is 448
SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016
What are the names of players who won in both 2013 and 2016?
schema_links:
What are the names of players who won in both 2013 and 2016? | matches : matches.winner_name , matches.year , matches.winner_rank , matches.winner_id , matches.round , matches.* | players : players.first_name , players.last_name , players.player_id , players.hand , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select distinct _ from _ where _ and _ | select distinct players.first_name , players.last_name from players where (select count(*) from matches where matches.year = 2013 and matches.winner_id = players.player_id) > 0 and (select count(*) from matches where matches.year = 2016 and matches.winner_id = players.player_id) > 0
SQL = SELECT DISTINCT T1.first_name ,  T1.last_name FROM players AS T1 WHERE (SELECT count(*) FROM matches AS T2 WHERE T2.year  =  2013 AND T2.winner_id  =  T1.player_id) > 0 AND (SELECT count(*) FROM matches AS T3 WHERE T3.year  =  2016 AND T3.winner_id  =  T1.player_id) > 0
natsql:
select distinct _ from _ where _ and _ | select distinct players.first_name , players.last_name from players where (select count(*) from matches where matches.year = 2013 and matches.winner_id = players.player_id) > 0 and (select count(*) from matches where matches.year = 2016 and matches.winner_id = players.player_id) > 0

SQL:
SELECT DISTINCT T1.first_name ,  T1.last_name FROM players AS T1 WHERE (SELECT count(*) FROM matches AS T2 WHERE T2.year  =  2013 AND T2.winner_id  =  T1.player_id) > 0 AND (SELECT count(*) FROM matches AS T3 WHERE T3.year  =  2016 AND T3.winner_id  =  T1.player_id) > 0
self correction:
SELECT T1.first_name, T1.last_name FROM players AS T1 WHERE T1.player_id IN (   SELECT T2.winner_id   FROM matches AS T2   WHERE T2.year = 2013 ) AND T1.player_id IN (   SELECT T3.winner_id   FROM matches AS T3   WHERE T3.year = 2016 )

index is 449
SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016
List the number of all matches who played in years of 2013 or 2016.
schema_links:
List the number of all matches who played in years of 2013 or 2016. | matches : matches.year , matches.match_num , matches.loser_name , matches.score , matches.tourney_date , matches.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select count ( * ) from _ where _ or _ | select count(*) from matches where year = 2013 or year = 2016
SQL = SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016
natsql:
select count ( * ) from _ where _ or _ | select count(*) from matches where year = 2013 or year = 2016

SQL:
SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016
self correction:
SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016

index is 450
SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016
How many matches were played in 2013 or 2016?
schema_links:
How many matches were played in 2013 or 2016? | matches : matches.year , matches.match_num , matches.loser_name , matches.minutes , matches.round , matches.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select count ( _ ) from _ where _ = _ or _ = _ | select count ( matches.* ) from matches where matches.year = 2013 or matches.year = 2016
SQL = SELECT count(*) FROM matches WHERE year  =  2013 OR year  =  2016
natsql:
select count ( _ ) from _ where _ = _ or _ = _ | select count ( matches.* ) from matches where matches.year = 2013 or matches.year = 2016

SQL:
SELECT count(*) FROM matches WHERE year  =  2013 OR year  =  2016
self correction:
SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016

index is 451
SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'
What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?
schema_links:
What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open? | players : players.first_name , players.country_code , players.player_id , players.hand , players.last_name , players.* | matches : matches.tourney_name ( Australian Open , WTA Championships ) , matches.winner_name , matches.winner_age , matches.round , matches.score , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select _ , _ from _ where _ = _ and _ = _ | select players.country_code , players.first_name from players where matches.tourney_name = 'Australian Open' and matches.tourney_name = 'WTA Championships'
SQL = SELECT country_code ,  first_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'Australian Open' AND matches.tourney_name = 'WTA Championships'
natsql:
select _ , _ from _ where _ = _ and _ = _ | select players.country_code , players.first_name from players where matches.tourney_name = 'Australian Open' and matches.tourney_name = 'WTA Championships'

SQL:
SELECT country_code ,  first_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'Australian Open' AND matches.tourney_name = 'WTA Championships'
self correction:
SELECT players.country_code, players.first_name  FROM players  JOIN matches ON players.player_id = matches.winner_id  WHERE matches.tourney_name IN ('Australian Open', 'WTA Championships')

index is 452
SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'
What are the first names and country codes for players who won both the WTA Championships and the Australian Open?
schema_links:
What are the first names and country codes for players who won both the WTA Championships and the Australian Open? | players : players.first_name , players.country_code , players.player_id , players.last_name , players.hand , players.* | matches : matches.tourney_name ( Australian Open , WTA Championships ) , matches.winner_name , matches.winner_age , matches.year , matches.round , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select _ , _ from _ where _ in ( _ ) and _ in ( _ ) | select players.first_name , players.country_code from players where players.player_id in ( select winner_id from matches where matches.tourney_name = 'Australian Open' ) and players.player_id in ( select winner_id from matches where matches.tourney_name = 'WTA Championships' )
SQL = SELECT first_name ,  country_code FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open') AND player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships')
natsql:
select _ , _ from _ where _ in ( _ ) and _ in ( _ ) | select players.first_name , players.country_code from players where players.player_id in ( select winner_id from matches where matches.tourney_name = 'Australian Open' ) and players.player_id in ( select winner_id from matches where matches.tourney_name = 'WTA Championships' )

SQL:
SELECT first_name ,  country_code FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open') AND player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships')
self correction:
SELECT players.first_name, players.country_code FROM players INNER JOIN matches AS m1 ON players.player_id = m1.winner_id INNER JOIN matches AS m2 ON players.player_id = m2.winner_id WHERE m1.tourney_name = 'Australian Open' AND m2.tourney_name = 'WTA Championships'

index is 453
SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1
Find the first name and country code of the oldest player.
schema_links:
Find the first name and country code of the oldest player. | players : players.country_code , players.first_name , players.birth_date , players.player_id , players.last_name , players.* | matches : matches.loser_age , matches.round , matches.winner_age , matches.loser_name , matches.match_num , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select _ , _ from _ where @.@ = min ( _ ) | select players.first_name , players.country_code from players where @.@ = min ( players.birth_date )
SQL = SELECT first_name ,  country_code FROM players WHERE birth_date  =  (SELECT min(birth_date) FROM players)
natsql:
select _ , _ from _ where @.@ = min ( _ ) | select players.first_name , players.country_code from players where @.@ = min ( players.birth_date )

SQL:
SELECT first_name ,  country_code FROM players WHERE birth_date  =  (SELECT min(birth_date) FROM players)
self correction:
SELECT players.first_name, players.country_code FROM players WHERE players.birth_date = (SELECT MIN(players.birth_date) FROM players)

index is 454
SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1
What is the first name and country code of the oldest player?
schema_links:
What is the first name and country code of the oldest player? | players : players.country_code , players.first_name , players.birth_date , players.player_id , players.last_name , players.* | matches : matches.loser_age , matches.winner_age , matches.round , matches.score , matches.loser_name , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select _ , _ from _ order by _ limit _ | select players.first_name , players.country_code from players order by players.birth_date limit 1
SQL = SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1
natsql:
select _ , _ from _ order by _ limit _ | select players.first_name , players.country_code from players order by players.birth_date limit 1

SQL:
SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1
self correction:
SELECT players.first_name, players.country_code  FROM players  ORDER BY players.birth_date  LIMIT 1

index is 455
SELECT first_name ,  last_name FROM players ORDER BY birth_date
List the first and last name of all players in the order of birth date.
schema_links:
List the first and last name of all players in the order of birth date. | players : players.last_name ( Date , Last ) , players.birth_date , players.first_name , players.player_id , players.hand , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.*
natsql and SQL generation:
select _ , _ from _ order by _ | select players.first_name , players.last_name from players order by players.birth_date
SQL = SELECT first_name ,  last_name FROM players ORDER BY birth_date
natsql:
select _ , _ from _ order by _ | select players.first_name , players.last_name from players order by players.birth_date

SQL:
SELECT first_name ,  last_name FROM players ORDER BY birth_date
self correction:
SELECT first_name, last_name FROM players ORDER BY birth_date

index is 456
SELECT first_name ,  last_name FROM players ORDER BY birth_date
What are the full names of all players, sorted by birth date?
schema_links:
What are the full names of all players, sorted by birth date? | players : players.birth_date , players.first_name , players.last_name ( Date ) , players.player_id , players.hand , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.score , matches.loser_name , matches.match_num , matches.minutes , matches.round , matches.*
natsql and SQL generation:
select _ , _ from _ order by @.@ | select players.first_name , players.last_name from players order by players.birth_date
SQL = SELECT first_name , last_name FROM players ORDER BY birth_date
natsql:
select _ , _ from _ order by @.@ | select players.first_name , players.last_name from players order by players.birth_date

SQL:
SELECT first_name , last_name FROM players ORDER BY birth_date
self correction:
SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY birth_date

index is 457
SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
List the first and last name of all players who are left / L hand in the order of birth date.
schema_links:
List the first and last name of all players who are left / L hand in the order of birth date. | players : players.last_name ( Date , Last ) , players.first_name , players.birth_date , players.hand , players.player_id , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.*
natsql and SQL generation:
select _ , _ from _ where _ = _ order by _ | select players.first_name , players.last_name from players where players.hand = 'L' order by players.birth_date
SQL = SELECT first_name , last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
natsql:
select _ , _ from _ where _ = _ order by _ | select players.first_name , players.last_name from players where players.hand = 'L' order by players.birth_date

SQL:
SELECT first_name , last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
self correction:
SELECT players.first_name, players.last_name  FROM players  WHERE players.hand = 'L'  ORDER BY players.birth_date

index is 458
SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
What are the full names of all left handed players, in order of birth date?
schema_links:
What are the full names of all left handed players, in order of birth date? | players : players.birth_date , players.first_name , players.hand , players.last_name ( Date ) , players.player_id , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.round , matches.match_num , matches.minutes , matches.score , matches.surface , matches.*
natsql and SQL generation:
select _ , _ from _ where _ = _ order by _ | select players.first_name , players.last_name from players where players.hand = "left" order by players.birth_date
SQL = SELECT first_name , last_name FROM players WHERE hand = 'left' ORDER BY birth_date
natsql:
select _ , _ from _ where _ = _ order by _ | select players.first_name , players.last_name from players where players.hand = "left" order by players.birth_date

SQL:
SELECT first_name , last_name FROM players WHERE hand = 'left' ORDER BY birth_date
self correction:
SELECT first_name, last_name FROM players WHERE hand = 'left' ORDER BY birth_date

index is 459
SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1
Find the first name and country code of the player who did the most number of tours.
schema_links:
Find the first name and country code of the player who did the most number of tours. | players : players.first_name , players.country_code , players.player_id , players.last_name , players.hand , players.* | rankings : rankings.tours , rankings.player_id , rankings.ranking , rankings.ranking_points , rankings.ranking_date , rankings.* | matches : matches.score , matches.match_num , matches.minutes , matches.round , matches.surface , matches.*
natsql and SQL generation:
select _ , _ from _ where _ = ( select max ( _ ) from _ ) | select players.first_name , players.country_code from players where players.player_id = ( select player_id from rankings where tours = ( select max(tours) from rankings ) )
SQL = SELECT first_name ,  country_code FROM players WHERE player_id  =  (SELECT player_id FROM rankings WHERE tours  =  (SELECT max(tours) FROM rankings))
natsql:
select _ , _ from _ where _ = ( select max ( _ ) from _ ) | select players.first_name , players.country_code from players where players.player_id = ( select player_id from rankings where tours = ( select max(tours) from rankings ) )

SQL:
SELECT first_name ,  country_code FROM players WHERE player_id  =  (SELECT player_id FROM rankings WHERE tours  =  (SELECT max(tours) FROM rankings))
self correction:
SELECT players.first_name, players.country_code  FROM players  WHERE player_id = (   SELECT player_id    FROM rankings    WHERE tours = (     SELECT max(tours)      FROM rankings   ) )

index is 460
SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1
What is the first name and country code of the player with the most tours?
schema_links:
What is the first name and country code of the player with the most tours? | rankings : rankings.tours , rankings.player_id , rankings.ranking , rankings.ranking_points , rankings.ranking_date , rankings.* | players : players.first_name , players.country_code , players.player_id , players.last_name , players.hand , players.* | matches : matches.round , matches.score , matches.match_num , matches.minutes , matches.surface , matches.*
natsql and SQL generation:
select _ , _ from _ order by _ desc limit _ | select players.first_name , players.country_code from players order by players.tours desc limit 1
SQL = SELECT first_name ,  country_code FROM players ORDER BY tours DESC LIMIT 1
natsql:
select _ , _ from _ order by _ desc limit _ | select players.first_name , players.country_code from players order by players.tours desc limit 1

SQL:
SELECT first_name ,  country_code FROM players ORDER BY tours DESC LIMIT 1
self correction:
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(rankings.tours) DESC LIMIT 1

index is 461
SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
Find the year that has the most number of matches.
schema_links:
Find the year that has the most number of matches. | matches : matches.year , matches.match_num , matches.loser_name , matches.round , matches.score , matches.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select matches.year from matches group by matches.year order by count ( matches.match_num ) desc limit 1
SQL = SELECT year FROM matches GROUP BY year ORDER BY count(match_num) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select matches.year from matches group by matches.year order by count ( matches.match_num ) desc limit 1

SQL:
SELECT year FROM matches GROUP BY year ORDER BY count(match_num) DESC LIMIT 1
self correction:
SELECT matches.year FROM matches  GROUP BY matches.year  ORDER BY COUNT(matches.match_num) DESC  LIMIT 1

index is 462
SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
Which year had the most matches?
schema_links:
Which year had the most matches? | matches : matches.year , matches.match_num , matches.loser_name , matches.minutes , matches.round , matches.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select matches.year from matches group by matches.year order by count ( matches.* ) desc limit 1
SQL = SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select matches.year from matches group by matches.year order by count ( matches.* ) desc limit 1

SQL:
SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1

index is 463
SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1
Find the name and rank points of the winner who won the most times.
schema_links:
Find the name and rank points of the winner who won the most times. | matches : matches.winner_rank_points , matches.winner_name , matches.winner_rank , matches.winner_id , matches.winner_seed , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.ranking_date , rankings.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.*
natsql and SQL generation:
select _ , max ( count ( _ ) ) from _ group by _ | select matches.winner_name , matches.winner_rank_points from matches group by matches.winner_name , matches.winner_rank_points order by count ( * ) desc limit 1
SQL = SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name , winner_rank_points ORDER BY count(*) DESC LIMIT 1
natsql:
select _ , max ( count ( _ ) ) from _ group by _ | select matches.winner_name , matches.winner_rank_points from matches group by matches.winner_name , matches.winner_rank_points order by count ( * ) desc limit 1

SQL:
SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name , winner_rank_points ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT winner_name, SUM(winner_rank_points) AS total_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY winner_name ORDER BY COUNT(*) DESC LIMIT 1

index is 464
SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1
What is the name of the winner who has won the most matches, and how many rank points does this player have?
schema_links:
What is the name of the winner who has won the most matches, and how many rank points does this player have? | matches : matches.winner_name , matches.winner_rank_points , matches.winner_rank , matches.winner_id , matches.loser_name , matches.* | rankings : rankings.ranking_points , rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.* | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.*
natsql and SQL generation:
select _ , max ( _ ) from _ | select matches.winner_name , matches.winner_rank_points from matches group by matches.winner_name order by max ( matches.winner_rank_points ) desc limit 1
SQL = SELECT winner_name ,  max(winner_rank_points) FROM matches GROUP BY winner_name ORDER BY max(winner_rank_points) DESC LIMIT 1
natsql:
select _ , max ( _ ) from _ | select matches.winner_name , matches.winner_rank_points from matches group by matches.winner_name order by max ( matches.winner_rank_points ) desc limit 1

SQL:
SELECT winner_name ,  max(winner_rank_points) FROM matches GROUP BY winner_name ORDER BY max(winner_rank_points) DESC LIMIT 1
self correction:
SELECT winner_name, max(winner_rank_points)  FROM matches  GROUP BY winner_name  ORDER BY max(winner_rank_points) DESC  LIMIT 1

index is 465
SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.
schema_links:
Find the name of the winner who has the highest rank points and participated in the Australian Open tourney. | matches : matches.tourney_name ( Australian Open ) , matches.winner_rank_points , matches.winner_name , matches.tourney_id , matches.winner_rank , matches.* | rankings : rankings.ranking_points , rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.* | players : players.player_id , players.first_name , players.hand , players.last_name , players.birth_date , players.*
natsql and SQL generation:
select _ from _ where @.@ = max ( _ ) and @.@ = _ | select matches.winner_name from matches where matches.tourney_name = "Australian Open" and matches.winner_rank_points = max ( matches.winner_rank_points )
SQL = SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' AND winner_rank_points  =  (SELECT max(winner_rank_points) FROM matches WHERE tourney_name  =  'Australian Open')
natsql:
select _ from _ where @.@ = max ( _ ) and @.@ = _ | select matches.winner_name from matches where matches.tourney_name = "Australian Open" and matches.winner_rank_points = max ( matches.winner_rank_points )

SQL:
SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' AND winner_rank_points  =  (SELECT max(winner_rank_points) FROM matches WHERE tourney_name  =  'Australian Open')
self correction:
SELECT matches.winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (   SELECT MAX(winner_rank_points)   FROM matches   WHERE tourney_name = 'Australian Open' )

index is 466
SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
What is the name of the winner with the most rank points who participated in the Australian Open tournament?
schema_links:
What is the name of the winner with the most rank points who participated in the Australian Open tournament? | matches : matches.tourney_name ( Australian Open ) , matches.winner_rank_points , matches.winner_name , matches.winner_rank , matches.tourney_id , matches.* | rankings : rankings.ranking_points , rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.* | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.*
natsql and SQL generation:
select _ from _ where _ = _ order by _ desc limit _ | select matches.winner_name from matches where matches.tourney_name = "Australian Open" order by matches.winner_rank_points desc limit 1
SQL = SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
natsql:
select _ from _ where _ = _ order by _ desc limit _ | select matches.winner_name from matches where matches.tourney_name = "Australian Open" order by matches.winner_rank_points desc limit 1

SQL:
SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
self correction:
SELECT matches.winner_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'Australian Open' ORDER BY matches.winner_rank_points DESC LIMIT 1

index is 467
SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1
find the names of loser and winner who played in the match with greatest number of minutes.
schema_links:
find the names of loser and winner who played in the match with greatest number of minutes. | matches : matches.loser_name , matches.minutes , matches.match_num , matches.winner_name , matches.loser_id , matches.* | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select _ , _ from _ where @.@ = max ( _ ) | select matches.winner_name , matches.loser_name from matches where @.@ = max ( matches.minutes )
SQL = SELECT winner_name ,  loser_name FROM matches WHERE minutes  =  (SELECT max(minutes) FROM matches)
natsql:
select _ , _ from _ where @.@ = max ( _ ) | select matches.winner_name , matches.loser_name from matches where @.@ = max ( matches.minutes )

SQL:
SELECT winner_name ,  loser_name FROM matches WHERE minutes  =  (SELECT max(minutes) FROM matches)
self correction:
SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)

index is 468
SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1
What are the names of the winner and loser who played in the longest match?
schema_links:
What are the names of the winner and loser who played in the longest match? | matches : matches.minutes , matches.loser_name , matches.winner_name , matches.round , matches.match_num , matches.* | players : players.first_name , players.last_name , players.hand , players.player_id , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select _ , _ from _ where _ = max ( _ ) | select matches.winner_name , matches.loser_name from matches where matches.minutes = max ( matches.minutes )
SQL = SELECT winner_name ,  loser_name FROM matches WHERE minutes  =  (SELECT max(minutes) FROM matches)
natsql:
select _ , _ from _ where _ = max ( _ ) | select matches.winner_name , matches.loser_name from matches where matches.minutes = max ( matches.minutes )

SQL:
SELECT winner_name ,  loser_name FROM matches WHERE minutes  =  (SELECT max(minutes) FROM matches)
self correction:
SELECT matches.winner_name, matches.loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)

index is 469
SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
Find the average ranking for each player and their first name.
schema_links:
Find the average ranking for each player and their first name. | rankings : rankings.ranking , rankings.ranking_points , rankings.player_id , rankings.ranking_date , rankings.tours , rankings.* | players : players.first_name , players.player_id , players.last_name , players.hand , players.birth_date , players.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*
natsql and SQL generation:
select avg ( _ ) , _ from _ group by _ | select avg ( rankings.ranking ) , players.first_name from players join rankings on players.player_id = rankings.player_id group by players.first_name
SQL = SELECT avg(ranking) ,  first_name FROM players JOIN rankings ON players.player_id  =  rankings.player_id GROUP BY first_name
natsql:
select avg ( _ ) , _ from _ group by _ | select avg ( rankings.ranking ) , players.first_name from players join rankings on players.player_id = rankings.player_id group by players.first_name

SQL:
SELECT avg(ranking) ,  first_name FROM players JOIN rankings ON players.player_id  =  rankings.player_id GROUP BY first_name
self correction:
SELECT avg(rankings.ranking) AS average_ranking, players.first_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name

index is 470
SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
What are the first names of all players, and their average rankings?
schema_links:
What are the first names of all players, and their average rankings? | players : players.first_name , players.player_id , players.last_name , players.hand , players.birth_date , players.* | rankings : rankings.ranking , rankings.ranking_points , rankings.player_id , rankings.ranking_date , rankings.tours , rankings.* | matches : matches.loser_rank , matches.minutes , matches.round , matches.score , matches.surface , matches.*
natsql and SQL generation:
select _ , avg ( _ ) from _ group by _ | select players.first_name , avg ( rankings.ranking ) from players join rankings on players.player_id = rankings.player_id group by players.first_name
SQL = SELECT first_name ,  AVG (ranking) FROM players JOIN rankings ON players.player_id  =  rankings.player_id GROUP BY first_name
natsql:
select _ , avg ( _ ) from _ group by _ | select players.first_name , avg ( rankings.ranking ) from players join rankings on players.player_id = rankings.player_id group by players.first_name

SQL:
SELECT first_name ,  AVG (ranking) FROM players JOIN rankings ON players.player_id  =  rankings.player_id GROUP BY first_name
self correction:
SELECT players.first_name, AVG(rankings.ranking)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name

index is 471
SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
Find the total ranking points for each player and their first name.
schema_links:
Find the total ranking points for each player and their first name. | players : players.first_name , players.player_id , players.last_name , players.hand , players.birth_date , players.* | rankings : rankings.ranking_points , rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*
natsql and SQL generation:
select _ , sum ( _ ) from _ group by _ | select players.first_name , sum ( rankings.ranking_points ) from players join rankings on players.player_id = rankings.player_id group by players.first_name
SQL = SELECT T1.first_name , sum(T2.ranking_points) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
natsql:
select _ , sum ( _ ) from _ group by _ | select players.first_name , sum ( rankings.ranking_points ) from players join rankings on players.player_id = rankings.player_id group by players.first_name

SQL:
SELECT T1.first_name , sum(T2.ranking_points) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
self correction:
SELECT T1.first_name, SUM(T2.ranking_points) AS total_ranking_points FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name

index is 472
SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
What are the first names of all players, and their total ranking points?
schema_links:
What are the first names of all players, and their total ranking points? | players : players.first_name , players.player_id , players.last_name , players.hand , players.birth_date , players.* | rankings : rankings.ranking_points , rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*
natsql and SQL generation:
select _ , sum ( _ ) from _ group by _ | select players.first_name , sum ( rankings.ranking_points ) from players join rankings on players.player_id = rankings.player_id group by players.first_name
SQL = SELECT first_name ,  SUM(ranking_points) FROM players JOIN rankings ON players.player_id  =  rankings.player_id GROUP BY first_name
natsql:
select _ , sum ( _ ) from _ group by _ | select players.first_name , sum ( rankings.ranking_points ) from players join rankings on players.player_id = rankings.player_id group by players.first_name

SQL:
SELECT first_name ,  SUM(ranking_points) FROM players JOIN rankings ON players.player_id  =  rankings.player_id GROUP BY first_name
self correction:
SELECT players.first_name, SUM(rankings.ranking_points)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name

index is 473
SELECT count(*) ,  country_code FROM players GROUP BY country_code
find the number of players for each country.
schema_links:
find the number of players for each country. | players : players.country_code , players.player_id , players.first_name , players.last_name , players.hand , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*
natsql and SQL generation:
select @.@ , count ( _ ) from _ group by @.@ | select players.country_code , count ( players.* ) from players group by players.country_code
SQL = SELECT country_code , count(*) FROM players GROUP BY country_code
natsql:
select @.@ , count ( _ ) from _ group by @.@ | select players.country_code , count ( players.* ) from players group by players.country_code

SQL:
SELECT country_code , count(*) FROM players GROUP BY country_code
self correction:
SELECT country_code, COUNT(*) FROM players GROUP BY country_code

index is 474
SELECT count(*) ,  country_code FROM players GROUP BY country_code
How many players are from each country?
schema_links:
How many players are from each country? | players : players.country_code , players.player_id , players.hand , players.first_name , players.last_name , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select players.country_code , count ( players.* ) from players group by players.country_code
SQL = SELECT country_code ,  count(*) FROM players GROUP BY country_code
natsql:
select _ , count ( _ ) from _ group by _ | select players.country_code , count ( players.* ) from players group by players.country_code

SQL:
SELECT country_code ,  count(*) FROM players GROUP BY country_code
self correction:
SELECT country_code, COUNT(*)  FROM players  GROUP BY country_code

index is 475
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
find the code of the country where has the greatest number of players.
schema_links:
find the code of the country where has the greatest number of players. | players : players.country_code , players.player_id , players.hand , players.first_name , players.last_name , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.*
natsql and SQL generation:
select _ from _ order by count ( _ ) desc limit _ | select players.country_code from players order by count ( players.player_id ) desc limit 1
SQL = SELECT country_code FROM players GROUP BY country_code ORDER BY count(player_id) DESC LIMIT 1
natsql:
select _ from _ order by count ( _ ) desc limit _ | select players.country_code from players order by count ( players.player_id ) desc limit 1

SQL:
SELECT country_code FROM players GROUP BY country_code ORDER BY count(player_id) DESC LIMIT 1
self correction:
SELECT country_code, COUNT(player_id) AS player_count FROM players GROUP BY country_code ORDER BY player_count DESC LIMIT 1

index is 476
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
What is the code of the country with the most players?
schema_links:
What is the code of the country with the most players? | players : players.country_code , players.player_id , players.hand , players.first_name , players.last_name , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.round , matches.score , matches.match_num , matches.minutes , matches.surface , matches.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select players.country_code from players group by players.country_code order by count ( players.* ) desc limit 1
SQL = SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select players.country_code from players group by players.country_code order by count ( players.* ) desc limit 1

SQL:
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT country_code, COUNT(*) AS player_count FROM players GROUP BY country_code ORDER BY player_count DESC LIMIT 1

index is 477
SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50
Find the codes of countries that have more than 50 players.
schema_links:
Find the codes of countries that have more than 50 players. | players : players.country_code , players.player_id , players.hand , players.first_name , players.last_name , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*
natsql and SQL generation:
select distinct _ from _ where count ( _ ) > _ group by _ | select distinct players.country_code from players where count ( players.player_id ) > 50 group by players.country_code
SQL = SELECT DISTINCT country_code FROM players GROUP BY country_code HAVING count(player_id) > 50
natsql:
select distinct _ from _ where count ( _ ) > _ group by _ | select distinct players.country_code from players where count ( players.player_id ) > 50 group by players.country_code

SQL:
SELECT DISTINCT country_code FROM players GROUP BY country_code HAVING count(player_id) > 50
self correction:
SELECT DISTINCT country_code  FROM players  GROUP BY country_code  HAVING COUNT(player_id) > 50

index is 478
SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50
What are the codes of countries with more than 50 players?
schema_links:
What are the codes of countries with more than 50 players? | players : players.country_code , players.player_id , players.hand , players.first_name , players.last_name , players.* | rankings : rankings.player_id , rankings.ranking , rankings.ranking_points , rankings.tours , rankings.ranking_date , rankings.* | matches : matches.round , matches.score , matches.match_num , matches.minutes , matches.surface , matches.*
natsql and SQL generation:
select distinct _ from _ where count ( _ ) > _ group by _ | select distinct players.country_code from players where count ( players.* ) > 50 group by players.country_code
SQL = SELECT DISTINCT country_code FROM players GROUP BY country_code HAVING count(*)  >  50
natsql:
select distinct _ from _ where count ( _ ) > _ group by _ | select distinct players.country_code from players where count ( players.* ) > 50 group by players.country_code

SQL:
SELECT DISTINCT country_code FROM players GROUP BY country_code HAVING count(*)  >  50
self correction:
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50

index is 479
SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date
Find the total number of tours for each ranking date.
schema_links:
Find the total number of tours for each ranking date. | rankings : rankings.ranking_date , rankings.tours , rankings.ranking , rankings.ranking_points , rankings.player_id , rankings.* | players : players.last_name ( Date ) , players.player_id , players.hand , players.first_name , players.birth_date , players.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*
natsql and SQL generation:
select _ , sum ( _ ) from _ group by _ | select rankings.ranking_date , sum ( rankings.tours ) from rankings group by rankings.ranking_date
SQL = SELECT ranking_date , sum(tours) FROM rankings GROUP BY ranking_date
natsql:
select _ , sum ( _ ) from _ group by _ | select rankings.ranking_date , sum ( rankings.tours ) from rankings group by rankings.ranking_date

SQL:
SELECT ranking_date , sum(tours) FROM rankings GROUP BY ranking_date
self correction:
SELECT ranking_date, sum(tours)  FROM rankings  GROUP BY ranking_date

index is 480
SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date
How many total tours were there for each ranking date?
schema_links:
How many total tours were there for each ranking date? | rankings : rankings.ranking_date , rankings.tours , rankings.ranking , rankings.ranking_points , rankings.player_id , rankings.* | players : players.last_name ( Date ) , players.hand , players.player_id , players.first_name , players.birth_date , players.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*
natsql and SQL generation:
select _ , sum ( _ ) from _ group by _ | select ranking_date , sum ( tours ) from rankings group by ranking_date
SQL = SELECT ranking_date ,  SUM(tours) FROM rankings GROUP BY ranking_date
natsql:
select _ , sum ( _ ) from _ group by _ | select ranking_date , sum ( tours ) from rankings group by ranking_date

SQL:
SELECT ranking_date ,  SUM(tours) FROM rankings GROUP BY ranking_date
self correction:
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date

index is 481
SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR
Find the number of matches happened in each year.
schema_links:
Find the number of matches happened in each year. | matches : matches.year , matches.match_num , matches.loser_name , matches.round , matches.score , matches.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select matches.year , count ( matches.* ) from matches group by matches.year
SQL = SELECT year , count(*) FROM matches GROUP BY year
natsql:
select _ , count ( _ ) from _ group by _ | select matches.year , count ( matches.* ) from matches group by matches.year

SQL:
SELECT year , count(*) FROM matches GROUP BY year
self correction:
SELECT year, COUNT(*)  FROM matches  GROUP BY year

index is 482
SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR
How many matches were played in each year?
schema_links:
How many matches were played in each year? | matches : matches.year , matches.match_num , matches.loser_name , matches.minutes , matches.round , matches.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select year , count ( * ) from matches group by year
SQL = SELECT year ,  COUNT(*) FROM matches GROUP BY year
natsql:
select _ , count ( _ ) from _ group by _ | select year , count ( * ) from matches group by year

SQL:
SELECT year ,  COUNT(*) FROM matches GROUP BY year
self correction:
SELECT year, COUNT(*)  FROM matches  GROUP BY year

index is 483
SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3
Find the name and rank of the 3 youngest winners across all matches.
schema_links:
Find the name and rank of the 3 youngest winners across all matches. | matches : matches.winner_name , matches.winner_rank , matches.winner_age , matches.year , matches.loser_age , matches.* | players : players.birth_date , players.player_id , players.first_name , players.last_name , players.hand , players.* | rankings : rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.ranking_date , rankings.*
natsql and SQL generation:
select _ , _ from _ order by _ asc limit _ | select matches.winner_name , matches.winner_rank from matches order by matches.winner_age asc limit 3
SQL = SELECT winner_name , winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3
natsql:
select _ , _ from _ order by _ asc limit _ | select matches.winner_name , matches.winner_rank from matches order by matches.winner_age asc limit 3

SQL:
SELECT winner_name , winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3
self correction:
SELECT players.first_name, players.last_name, rankings.ranking FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id ORDER BY players.birth_date DESC LIMIT 3

index is 484
SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3
What are the names and ranks of the three youngest winners across all matches?
schema_links:
What are the names and ranks of the three youngest winners across all matches? | matches : matches.winner_name , matches.winner_rank , matches.winner_age , matches.year , matches.loser_age , matches.* | players : players.birth_date , players.player_id , players.first_name , players.hand , players.last_name , players.* | rankings : rankings.ranking , rankings.ranking_points , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.*
natsql and SQL generation:
select _ , _ from _ order by _ asc limit _ | select matches.winner_name , matches.winner_rank from matches order by matches.winner_age asc limit 3
SQL = SELECT winner_name ,  winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3
natsql:
select _ , _ from _ order by _ asc limit _ | select matches.winner_name , matches.winner_rank from matches order by matches.winner_age asc limit 3

SQL:
SELECT winner_name ,  winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3
self correction:
SELECT players.first_name, players.last_name, matches.winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY matches.winner_age ASC LIMIT 3

index is 485
SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'
How many different winners both participated in the WTA Championships and were left handed?
schema_links:
How many different winners both participated in the WTA Championships and were left handed? | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.* | matches : matches.tourney_name ( WTA Championships ) , matches.winner_hand , matches.winner_entry , matches.winner_id , matches.winner_name , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select count ( distinct _ ) from _ where _ = _ and _ = _ | select count ( distinct matches.winner_id ) from matches where matches.tourney_name = 'WTA Championships' and matches.winner_hand = 'L'
SQL = SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'
natsql:
select count ( distinct _ ) from _ where _ = _ and _ = _ | select count ( distinct matches.winner_id ) from matches where matches.tourney_name = 'WTA Championships' and matches.winner_hand = 'L'

SQL:
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'
self correction:
SELECT COUNT(DISTINCT winner_id) FROM matches  JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = 'WTA Championships' AND players.hand = 'L'

index is 486
SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'
Find the number of left handed winners who participated in the WTA Championships.
schema_links:
Find the number of left handed winners who participated in the WTA Championships. | players : players.hand , players.player_id , players.first_name , players.birth_date , players.last_name , players.* | matches : matches.tourney_name ( WTA Championships ) , matches.winner_hand , matches.tourney_id , matches.loser_hand , matches.winner_id , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select count ( _ ) from _ where @ = _ and @ = 'WTA Championships' | select count ( players.player_id ) from players join matches on players.player_id = matches.winner_id where players.hand = 'L' and matches.tourney_name = 'WTA Championships'
SQL = SELECT count(player_id) FROM players JOIN matches ON players.player_id = matches.winner_id WHERE players.hand = 'L' AND matches.tourney_name = 'WTA Championships'
natsql:
select count ( _ ) from _ where @ = _ and @ = 'WTA Championships' | select count ( players.player_id ) from players join matches on players.player_id = matches.winner_id where players.hand = 'L' and matches.tourney_name = 'WTA Championships'

SQL:
SELECT count(player_id) FROM players JOIN matches ON players.player_id = matches.winner_id WHERE players.hand = 'L' AND matches.tourney_name = 'WTA Championships'
self correction:
SELECT COUNT(DISTINCT players.player_id)  FROM players  JOIN matches ON players.player_id = matches.winner_id  WHERE players.hand = 'L'  AND matches.tourney_name = 'WTA Championships'

index is 487
SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
Find the first name, country code and birth date of the winner who has the highest rank points in all matches.
schema_links:
Find the first name, country code and birth date of the winner who has the highest rank points in all matches. | players : players.first_name , players.birth_date , players.country_code , players.last_name ( Date ) , players.player_id , players.* | matches : matches.winner_rank_points , matches.winner_name , matches.winner_rank , matches.winner_hand , matches.loser_rank_points , matches.* | rankings : rankings.ranking_points , rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.*
natsql and SQL generation:
select _ , _ , _ from _ where _ = ( select max ( _ ) from _ ) | select players.first_name , players.country_code , players.birth_date from players where players.player_id = ( select player_id from rankings where ranking_points = ( select max(ranking_points) from rankings ) )
SQL = SELECT first_name , country_code , birth_date FROM players WHERE player_id = (SELECT player_id FROM rankings WHERE ranking_points = (SELECT max(ranking_points) FROM rankings))
natsql:
select _ , _ , _ from _ where _ = ( select max ( _ ) from _ ) | select players.first_name , players.country_code , players.birth_date from players where players.player_id = ( select player_id from rankings where ranking_points = ( select max(ranking_points) from rankings ) )

SQL:
SELECT first_name , country_code , birth_date FROM players WHERE player_id = (SELECT player_id FROM rankings WHERE ranking_points = (SELECT max(ranking_points) FROM rankings))
self correction:
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.ranking_points = (     SELECT MAX(ranking_points)     FROM rankings ) LIMIT 1;

index is 488
SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
What is the first name, country code, and birth date of the player with the most winner rank points across all matches?
schema_links:
What is the first name, country code, and birth date of the player with the most winner rank points across all matches? | players : players.first_name , players.birth_date , players.country_code , players.player_id , players.last_name ( Date ) , players.* | matches : matches.winner_rank_points , matches.match_num , matches.winner_rank , matches.loser_rank , matches.loser_rank_points , matches.* | rankings : rankings.ranking_points , rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.*
natsql and SQL generation:
select _ from _ order by _ desc limit _ | select players.first_name , players.country_code , players.birth_date from players order by players.ranking_points desc limit 1
SQL = SELECT first_name ,  country_code ,  birth_date FROM players ORDER BY ranking_points DESC LIMIT 1
natsql:
select _ from _ order by _ desc limit _ | select players.first_name , players.country_code , players.birth_date from players order by players.ranking_points desc limit 1

SQL:
SELECT first_name ,  country_code ,  birth_date FROM players ORDER BY ranking_points DESC LIMIT 1
self correction:
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY rankings.ranking_points DESC LIMIT 1

index is 489
SELECT count(*) ,  hand FROM players GROUP BY hand
Find the number of players for each hand type.
schema_links:
Find the number of players for each hand type. | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.tours , rankings.ranking_date , rankings.player_id , rankings.ranking_points , rankings.* | matches : matches.loser_hand , matches.minutes , matches.round , matches.score , matches.surface , matches.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select players.hand , count ( players.player_id ) from players group by players.hand
SQL = SELECT hand ,  COUNT(player_id) FROM players GROUP BY hand
natsql:
select _ , count ( _ ) from _ group by _ | select players.hand , count ( players.player_id ) from players group by players.hand

SQL:
SELECT hand ,  COUNT(player_id) FROM players GROUP BY hand
self correction:
SELECT hand, COUNT(*)  FROM players  GROUP BY hand

index is 490
SELECT count(*) ,  hand FROM players GROUP BY hand
How many players are there for each hand type?
schema_links:
How many players are there for each hand type? | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.loser_hand , matches.minutes , matches.round , matches.score , matches.surface , matches.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select players.hand , count ( players.* ) from players group by players.hand
SQL = SELECT hand ,  COUNT(*) FROM players GROUP BY hand
natsql:
select _ , count ( _ ) from _ group by _ | select players.hand , count ( players.* ) from players group by players.hand

SQL:
SELECT hand ,  COUNT(*) FROM players GROUP BY hand
self correction:
SELECT hand, COUNT(*) AS player_count FROM players GROUP BY hand

index is 491
SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'
How many ships ended up being 'Captured'?
schema_links:
How many ships ended up being 'Captured'? | ship : ship.disposition_of_ship ( Captured ) , ship.id , ship.name , ship.ship_type , ship.location , ship.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.* | battle : battle.id , battle.name , battle.date , battle.result , battle.bulgarian_commander , battle.*
natsql and SQL generation:
select count(*) from ship where ship.disposition_of_ship = 'Captured'
SQL = SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured'
natsql:
select count(*) from ship where ship.disposition_of_ship = 'Captured'

SQL:
SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured'
self correction:
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'

index is 492
SELECT name ,  tonnage FROM ship ORDER BY name DESC
List the name and tonnage ordered by in descending alphaetical order for the names.
schema_links:
List the name and tonnage ordered by in descending alphaetical order for the names. | ship : ship.tonnage , ship.name , ship.id , ship.ship_type , ship.location , ship.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.* | battle : battle.id , battle.name , battle.date , battle.result , battle.bulgarian_commander , battle.*
natsql and SQL generation:
select _ , _ from _ order by _ desc | select ship.name , ship.tonnage from ship order by ship.name desc
SQL = SELECT name , tonnage FROM ship ORDER BY name DESC
natsql:
select _ , _ from _ order by _ desc | select ship.name , ship.tonnage from ship order by ship.name desc

SQL:
SELECT name , tonnage FROM ship ORDER BY name DESC
self correction:
SELECT name, tonnage FROM ship ORDER BY name DESC, tonnage DESC

index is 493
SELECT name ,  date FROM battle
List the name, date and result of each battle.
schema_links:
List the name, date and result of each battle. | battle : battle.name , battle.date , battle.result , battle.id , battle.bulgarian_commander , battle.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.* | ship : ship.id , ship.name , ship.location , ship.lost_in_battle , ship.tonnage , ship.*
natsql and SQL generation:
select _ , _ , _ from _ | select battle.name , battle.date , battle.result from battle
SQL = SELECT name ,  date ,  result FROM battle

input = Find the total number of killed and injured in each battle. | battle : battle.name , battle.date , battle.result , battle.id , battle.bulgarian_commander , battle.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.* | ship : ship.id , ship.name , ship.location , ship.lost_in_battle , ship.tonnage , ship.*
natsql = select sum ( _ ) , sum ( _ ) from _ group by _ | select sum ( death.killed ) , sum ( death.injured ) from death group by death.id
SQL = SELECT sum(killed) ,  sum(injured) FROM death GROUP BY id

input = Find the names of ships that were lost in battles. | ship : ship.id , ship.name , ship.location , ship.lost_in_battle , ship.tonnage , ship.* | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured , death.*
natsql = select distinct _ from _ where _ is not null | select distinct ship.name from ship where lost_in_battle is not null
SQL = SELECT DISTINCT name FROM ship WHERE lost_in_battle IS NOT NULL

input = Find the names of battles in which the Bulgarian commander was victorious. | battle : battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.result , battle.* | death : death.caused_by_ship_id , death.id , death.note , death.killed , death.injured , death.* | ship : ship.id , ship.name , ship.location , ship.lost_in_battle , ship.tonnage , ship.*
natsql = select _ from _ where _ = _ | select battle.name from battle where battle.result = 'victory' and battle.bulgarian_commander = 'Bulgarian commander'
SQL = SELECT name FROM battle WHERE result = 'victory' AND bulgarian_commander = 'Bulgarian commander'
natsql:
select _ , _ , _ from _ | select battle.name , battle.date , battle.result from battle

SQL:
SELECT name ,  date ,  result FROM battle

input = Find the total number of killed and injured in each battle. | battle : battle.name , battle.date , battle.result , battle.id , battle.bulgarian_commander , battle.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.* | ship : ship.id , ship.name , ship.location , ship.lost_in_battle , ship.tonnage , ship.*
natsql = select sum ( _ ) , sum ( _ ) from _ group by _ | select sum ( death.killed ) , sum ( death.injured ) from death group by death.id

self correction:
SELECT battle.name, battle.date, battle.result FROM battle

index is 494
SELECT max(killed) ,  min(killed) FROM death
What is maximum and minimum death toll caused each time?
schema_links:
What is maximum and minimum death toll caused each time? | death : death.killed , death.caused_by_ship_id , death.id , death.note , death.injured , death.* | battle : battle.id , battle.name , battle.date , battle.result , battle.bulgarian_commander , battle.* | ship : ship.name , ship.id , ship.ship_type , ship.location , ship.lost_in_battle , ship.*
natsql and SQL generation:
select max ( _ ) , min ( _ ) , _ from _ group by _ | select max ( death.killed ) , min ( death.killed ) , battle.name from battle join death on battle.id = death.caused_by_ship_id group by battle.name
SQL = SELECT MAX(killed) ,  MIN(killed) ,  battle.name FROM battle JOIN death ON battle.id  =  death.caused_by_ship_id GROUP BY battle.name
natsql:
select max ( _ ) , min ( _ ) , _ from _ group by _ | select max ( death.killed ) , min ( death.killed ) , battle.name from battle join death on battle.id = death.caused_by_ship_id group by battle.name

SQL:
SELECT MAX(killed) ,  MIN(killed) ,  battle.name FROM battle JOIN death ON battle.id  =  death.caused_by_ship_id GROUP BY battle.name
self correction:
SELECT MAX(death.killed), MIN(death.killed), battle.name  FROM battle  JOIN death ON battle.id = death.caused_by_ship_id  GROUP BY battle.name

index is 495
SELECT avg(injured) FROM death
What is the average number of injuries caused each time?
schema_links:
What is the average number of injuries caused each time? | death : death.injured , death.id , death.caused_by_ship_id , death.note , death.killed , death.* | battle : battle.result , battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.* | ship : ship.lost_in_battle , ship.id , ship.name , ship.ship_type , ship.location , ship.*
natsql and SQL generation:
select avg ( _ ) from _ | select avg ( death.injured ) from death
SQL = SELECT AVG(injured) FROM death
natsql:
select avg ( _ ) from _ | select avg ( death.injured ) from death

SQL:
SELECT AVG(injured) FROM death
self correction:
SELECT AVG(injured) FROM death

index is 496
SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'
What are the death and injury situations caused by the ship with tonnage 't'?
schema_links:
What are the death and injury situations caused by the ship with tonnage 't'? | ship : ship.tonnage , ship.name , ship.id , ship.location , ship.lost_in_battle , ship.* | death : death.injured , death.killed , death.caused_by_ship_id , death.id , death.note , death.* | battle : battle.id , battle.name , battle.date , battle.result , battle.bulgarian_commander , battle.*
natsql and SQL generation:
select _ , _ from _ where _ = 't' | select death.* from death join ship on death.caused_by_ship_id = ship.id where ship.tonnage = 't'
SQL = SELECT killed , injured FROM death JOIN ship ON death.caused_by_ship_id  =  ship.id WHERE ship.tonnage  =  't'
natsql:
select _ , _ from _ where _ = 't' | select death.* from death join ship on death.caused_by_ship_id = ship.id where ship.tonnage = 't'

SQL:
SELECT killed , injured FROM death JOIN ship ON death.caused_by_ship_id  =  ship.id WHERE ship.tonnage  =  't'
self correction:
SELECT death.killed, death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't'

index is 497
SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'
What are the name and results of the battles when the bulgarian commander is not 'Boril'
schema_links:
What are the name and results of the battles when the bulgarian commander is not 'Boril' | battle : battle.bulgarian_commander ( Boril ) , battle.name , battle.result , battle.id , battle.date , battle.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.* | ship : ship.id , ship.name , ship.location , ship.lost_in_battle , ship.tonnage , ship.*
natsql and SQL generation:
select _ , _ from _ where @.@ != 'Boril' | select battle.name , battle.result from battle where battle.bulgarian_commander != 'Boril'
SQL = SELECT name , result FROM battle WHERE bulgarian_commander  !=  'Boril'
natsql:
select _ , _ from _ where @.@ != 'Boril' | select battle.name , battle.result from battle where battle.bulgarian_commander != 'Boril'

SQL:
SELECT name , result FROM battle WHERE bulgarian_commander  !=  'Boril'
self correction:
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril'

index is 498
SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'
What are the different ids and names of the battles that lost any 'Brig' type shipes?
schema_links:
What are the different ids and names of the battles that lost any 'Brig' type shipes? | battle : battle.name , battle.id , battle.result , battle.date , battle.bulgarian_commander , battle.* | ship : ship.ship_type ( Brig ) , ship.lost_in_battle , ship.name , ship.id , ship.location , ship.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.*
natsql and SQL generation:
select distinct _ , _ from _ where @.@ = @.@ and @.@ = 'Brig' | select distinct battle.id , battle.name from battle where battle.id = ship.lost_in_battle and ship.ship_type = 'Brig'
SQL = SELECT DISTINCT battle.id ,  battle.name FROM battle JOIN ship ON battle.id  =  ship.lost_in_battle WHERE ship.ship_type  =  'Brig'
natsql:
select distinct _ , _ from _ where @.@ = @.@ and @.@ = 'Brig' | select distinct battle.id , battle.name from battle where battle.id = ship.lost_in_battle and ship.ship_type = 'Brig'

SQL:
SELECT DISTINCT battle.id ,  battle.name FROM battle JOIN ship ON battle.id  =  ship.lost_in_battle WHERE ship.ship_type  =  'Brig'
self correction:
SELECT battle.id, battle.name  FROM battle  JOIN ship ON battle.id = ship.lost_in_battle  WHERE ship.ship_type = 'Brig'

index is 499
SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10
What are the ids and names of the battles that led to more than 10 people killed in total.
schema_links:
What are the ids and names of the battles that led to more than 10 people killed in total. | battle : battle.id , battle.name , battle.result , battle.date , battle.bulgarian_commander , battle.* | death : death.killed , death.caused_by_ship_id , death.id , death.note , death.injured , death.* | ship : ship.name , ship.id , ship.location , ship.lost_in_battle , ship.tonnage , ship.*
natsql and SQL generation:
select _ , _ from _ where sum ( _ ) > _ group by _ | select battle.id , battle.name from battle join death on battle.id = death.caused_by_ship_id group by battle.id , battle.name having sum ( death.killed ) > 10
SQL = SELECT id, name FROM battle JOIN death ON battle.id = death.caused_by_ship_id GROUP BY id, name HAVING sum(killed) > 10
natsql:
select _ , _ from _ where sum ( _ ) > _ group by _ | select battle.id , battle.name from battle join death on battle.id = death.caused_by_ship_id group by battle.id , battle.name having sum ( death.killed ) > 10

SQL:
SELECT id, name FROM battle JOIN death ON battle.id = death.caused_by_ship_id GROUP BY id, name HAVING sum(killed) > 10
self correction:
SELECT id, name FROM battle JOIN ship ON battle.id = ship.lost_in_battle JOIN death ON ship.id = death.caused_by_ship_id GROUP BY battle.id, battle.name HAVING sum(death.killed) > 10

index is 500
SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1
What is the ship id and name that caused most total injuries?
schema_links:
What is the ship id and name that caused most total injuries? | ship : ship.name , ship.id , ship.ship_type , ship.lost_in_battle , ship.location , ship.* | death : death.injured , death.caused_by_ship_id , death.id , death.killed , death.note , death.* | battle : battle.id , battle.name , battle.date , battle.result , battle.bulgarian_commander , battle.*
natsql and SQL generation:
select _ , _ from _ order by sum ( _ ) desc limit _ | select ship.id , ship.name from ship order by sum ( death.injured ) desc limit 1
SQL = SELECT id , name FROM ship GROUP BY id, name ORDER BY sum(injured) DESC LIMIT 1
natsql:
select _ , _ from _ order by sum ( _ ) desc limit _ | select ship.id , ship.name from ship order by sum ( death.injured ) desc limit 1

SQL:
SELECT id , name FROM ship GROUP BY id, name ORDER BY sum(injured) DESC LIMIT 1
self correction:
SELECT ship.id, ship.name FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1

index is 501
SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'
What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?
schema_links:
What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'? | battle : battle.bulgarian_commander ( Kaloyan ) , battle.latin_commander ( Baldwin I ) , battle.name , battle.result , battle.id , battle.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.* | ship : ship.id , ship.name , ship.location , ship.lost_in_battle , ship.tonnage , ship.*
natsql and SQL generation:
select distinct _ from _ where @.@ = _ and @.@ = _ | select distinct battle.name from battle where battle.bulgarian_commander = 'Kaloyan' and battle.latin_commander = 'Baldwin I'
SQL = SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'
natsql:
select distinct _ from _ where @.@ = _ and @.@ = _ | select distinct battle.name from battle where battle.bulgarian_commander = 'Kaloyan' and battle.latin_commander = 'Baldwin I'

SQL:
SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'
self correction:
SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'

index is 502
SELECT count(DISTINCT RESULT) FROM battle
How many different results are there for the battles?
schema_links:
How many different results are there for the battles? | battle : battle.result , battle.name , battle.id , battle.date , battle.bulgarian_commander , battle.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.* | ship : ship.id , ship.name , ship.location , ship.lost_in_battle , ship.tonnage , ship.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct battle.result ) from battle
SQL = SELECT count(DISTINCT result) FROM battle
natsql:
select count ( distinct _ ) from _ | select count ( distinct battle.result ) from battle

SQL:
SELECT count(DISTINCT result) FROM battle
self correction:
SELECT count(DISTINCT result) AS result_count FROM battle

index is 503
SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );
How many battles did not lose any ship with tonnage '225'?
schema_links:
How many battles did not lose any ship with tonnage '225'? | ship : ship.tonnage , ship.lost_in_battle , ship.id , ship.name , ship.location , ship.* | battle : battle.result , battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.*
natsql and SQL generation:
select count ( _ ) from _ where _ = _ and _ is null | select count ( * ) from battle where result  =  'victory' and id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage  =  '225')
natsql:
select count ( _ ) from _ where _ = _ and _ is null | select count ( * ) from battle where result  =  'victory' and id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage  =  '225')
SQL:
SELECT count(*) FROM battle WHERE result = 'victory' AND id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225')
self correction:
SELECT count(*)  FROM battle  WHERE result = 'victory'  AND id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225')

index is 504
SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'
List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'
schema_links:
List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta' | battle : battle.name , battle.date , battle.result , battle.id , battle.bulgarian_commander , battle.* | ship : ship.name ( HMS Atalanta , Lettice ) , ship.lost_in_battle , ship.id , ship.ship_type , ship.location , ship.* | death : death.killed , death.id , death.note , death.injured , death.caused_by_ship_id , death.*
natsql and SQL generation:
select _ , _ from _ where _ in ( _ , _ ) | select battle.name , battle.date from battle where battle.id in ( select lost_in_battle from ship where ship.name in ( 'HMS Atalanta' , 'Lettice' ) )
SQL = SELECT name , date FROM battle WHERE id IN (SELECT lost_in_battle FROM ship WHERE name IN ('HMS Atalanta', 'Lettice'))
natsql:
select _ , _ from _ where _ in ( _ , _ ) | select battle.name , battle.date from battle where battle.id in ( select lost_in_battle from ship where ship.name in ( 'HMS Atalanta' , 'Lettice' ) )

SQL:
SELECT name , date FROM battle WHERE id IN (SELECT lost_in_battle FROM ship WHERE name IN ('HMS Atalanta', 'Lettice'))
self correction:
SELECT name, date FROM battle WHERE id IN (   SELECT lost_in_battle   FROM ship   WHERE name IN ('HMS Atalanta', 'Lettice') )

index is 505
SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'
Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.
schema_links:
Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'. | ship : ship.location ( English Channel ) , ship.lost_in_battle , ship.name , ship.id , ship.ship_type , ship.* | battle : battle.bulgarian_commander , battle.name , battle.result , battle.id , battle.date , battle.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.*
natsql and SQL generation:
select _ , _ , _ from _ where _.@ is null | select battle.name , battle.result , battle.bulgarian_commander from battle where not exists (select * from ship where ship.lost_in_battle = battle.id and ship.location = 'English Channel')
SQL = SELECT name ,  result ,  bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel')
natsql:
select _ , _ , _ from _ where _.@ is null | select battle.name , battle.result , battle.bulgarian_commander from battle where not exists (select * from ship where ship.lost_in_battle = battle.id and ship.location = 'English Channel')

SQL:
SELECT name ,  result ,  bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel')
self correction:
SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel')

index is 506
SELECT note FROM death WHERE note LIKE '%East%'
What are the notes of the death events which has substring 'East'?
schema_links:
What are the notes of the death events which has substring 'East'? | death : death.note , death.killed , death.caused_by_ship_id , death.id , death.injured , death.* | battle : battle.id , battle.name , battle.date , battle.result , battle.bulgarian_commander , battle.* | ship : ship.name , ship.id , ship.ship_type , ship.location , ship.lost_in_battle , ship.*
natsql and SQL generation:
select _ from _ where _ like '%East%' | select death.note from death where death.note like '%East%'
SQL = SELECT note FROM death WHERE note LIKE '%East%'
natsql:
select _ from _ where _ like '%East%' | select death.note from death where death.note like '%East%'

SQL:
SELECT note FROM death WHERE note LIKE '%East%'
self correction:
SELECT note FROM death WHERE note LIKE '%East%'

index is 507
SELECT line_1 ,  line_2 FROM addresses
what are all the addresses including line 1 and line 2?
schema_links:
what are all the addresses including line 1 and line 2? | addresses : addresses.line_1 , addresses.line_2 , addresses.other_address_details , addresses.address_id , addresses.line_3 , addresses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | students : students.email_address , students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.* | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.*
natsql and SQL generation:
select _ , _ from _ | select addresses.line_1 , addresses.line_2 from addresses
natsql:
select _ , _ from _ | select addresses.line_1 , addresses.line_2 from addresses
SQL:
SELECT line_1, line_2 FROM addresses
self correction:
SELECT addresses.line_1, addresses.line_2 FROM addresses

index is 508
SELECT line_1 ,  line_2 FROM addresses
What is the first and second line for all addresses?
schema_links:
What is the first and second line for all addresses? | addresses : addresses.line_2 , addresses.line_1 , addresses.address_id , addresses.line_3 , addresses.city , addresses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.* | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.*
natsql and SQL generation:
select _ , _ from _ | select addresses.line_1 , addresses.line_2 from addresses
SQL = SELECT line_1 ,  line_2 FROM addresses
natsql:
select _ , _ from _ | select addresses.line_1 , addresses.line_2 from addresses

SQL:
SELECT line_1 ,  line_2 FROM addresses
self correction:
SELECT line_1, line_2  FROM Addresses

index is 509
SELECT count(*) FROM Courses
How many courses in total are listed?
schema_links:
How many courses in total are listed? | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details , sections.*
natsql and SQL generation:
select count(*) from courses
SQL = SELECT count(*) FROM courses
natsql:
select count(*) from courses

SQL:
SELECT count(*) FROM courses
self correction:
SELECT count(*) FROM Courses

index is 510
SELECT count(*) FROM Courses
How many courses are there?
schema_links:
How many courses are there? | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | sections : sections.course_id , sections.section_id , sections.section_name , sections.section_description , sections.other_details , sections.* | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.*
natsql and SQL generation:
select count ( * ) from _ | select count ( * ) from courses
SQL = SELECT count(*) FROM courses
natsql:
select count ( * ) from _ | select count ( * ) from courses

SQL:
SELECT count(*) FROM courses
self correction:
SELECT count(*) FROM Courses

index is 511
SELECT course_description FROM Courses WHERE course_name  =  'math'
How is the math course described?
schema_links:
How is the math course described? | courses : courses.course_name ( math ) , courses.course_description , courses.course_id , courses.other_details , courses.* | departments : departments.department_name ( math ) , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.* | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details , sections.*
natsql and SQL generation:
select _ , _ from _ where _ = 'math' | select courses.course_description from courses where courses.course_name = 'math'
SQL = SELECT course_description FROM courses WHERE course_name = 'math'
natsql:
select _ , _ from _ where _ = 'math' | select courses.course_description from courses where courses.course_name = 'math'

SQL:
SELECT course_description FROM courses WHERE course_name = 'math'
self correction:
SELECT course_description FROM Courses WHERE course_name = 'math'

index is 512
SELECT course_description FROM Courses WHERE course_name  =  'math'
What are the descriptions for all the math courses?
schema_links:
What are the descriptions for all the math courses? | courses : courses.course_description , courses.course_name ( math ) , courses.course_id , courses.other_details , courses.* | departments : departments.department_name ( math ) , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.* | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details , sections.*
natsql and SQL generation:
select _ from _ where _ = _ | select courses.course_description from courses where courses.course_name = 'math'
SQL = SELECT course_description FROM courses WHERE course_name = 'math'
natsql:
select _ from _ where _ = _ | select courses.course_description from courses where courses.course_name = 'math'

SQL:
SELECT course_description FROM courses WHERE course_name = 'math'
self correction:
SELECT Courses.course_description FROM Courses WHERE Courses.course_name = 'math'

index is 513
SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'
What is the zip code of the address in the city Port Chelsea?
schema_links:
What is the zip code of the address in the city Port Chelsea? | addresses : addresses.city ( Port Chelsea ) , addresses.zip_postcode , addresses.address_id , addresses.country , addresses.line_1 , addresses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql and SQL generation:
select _ from _ where _ = 'Port Chelsea' | select addresses.zip_postcode from addresses where addresses.city = 'Port Chelsea'
SQL = SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'
natsql:
select _ from _ where _ = 'Port Chelsea' | select addresses.zip_postcode from addresses where addresses.city = 'Port Chelsea'

SQL:
SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'
self correction:
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'

index is 514
SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'
What is the zip code for Port Chelsea?
schema_links:
What is the zip code for Port Chelsea? | addresses : addresses.city ( Port Chelsea ) , addresses.zip_postcode , addresses.country , addresses.address_id , addresses.line_1 , addresses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.* | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.*
natsql and SQL generation:
select _ from _ where @.@ = _ | select addresses.zip_postcode from addresses where addresses.city = 'Port Chelsea'
SQL = SELECT zip_postcode FROM addresses WHERE city  =  'Port Chelsea'
natsql:
select _ from _ where @.@ = _ | select addresses.zip_postcode from addresses where addresses.city = 'Port Chelsea'

SQL:
SELECT zip_postcode FROM addresses WHERE city  =  'Port Chelsea'
self correction:
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'

index is 515
SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1
Which department offers the most number of degrees? List department name and id.
schema_links:
Which department offers the most number of degrees? List department name and id. | degree_programs : degree_programs.department_id , degree_programs.degree_program_id , degree_programs.degree_summary_description , degree_programs.degree_summary_name , degree_programs.other_details , degree_programs.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | addresses : addresses.line_2 , addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql and SQL generation:
select _ , _ from _ group by _ order by count ( _ ) desc limit _ | select department.department_name , department.department_id from department group by department.department_id order by count ( degree_programs.department_id ) desc limit 1
SQL = SELECT department_name ,  department_id FROM department GROUP BY department_id ORDER BY count(*) DESC LIMIT 1
natsql:
select _ , _ from _ group by _ order by count ( _ ) desc limit _ | select department.department_name , department.department_id from department group by department.department_id order by count ( degree_programs.department_id ) desc limit 1

SQL:
SELECT department_name ,  department_id FROM department GROUP BY department_id ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT Departments.department_name, Departments.department_id FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id GROUP BY Departments.department_id ORDER BY COUNT(Degree_Programs.degree_program_id) DESC LIMIT 1

index is 516
select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1
What is the name and id of the department with the most number of degrees ?
schema_links:
What is the name and id of the department with the most number of degrees ? | degree_programs : degree_programs.department_id , degree_programs.degree_program_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.* | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.*
natsql and SQL generation:
select _ , _ from _ group by _ order by count ( _ ) desc limit _ | select department.department_name , department.department_id from department group by department.department_name order by count ( degree_programs.department_id ) desc limit 1
SQL = SELECT department_name ,  department_id FROM departments GROUP BY department_name ORDER BY count(*) DESC LIMIT 1
natsql:
select _ , _ from _ group by _ order by count ( _ ) desc limit _ | select department.department_name , department.department_id from department group by department.department_name order by count ( degree_programs.department_id ) desc limit 1

SQL:
SELECT department_name ,  department_id FROM departments GROUP BY department_name ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT departments.department_name, departments.department_id FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY departments.department_id ORDER BY COUNT(degree_programs.degree_program_id) DESC LIMIT 1

index is 517
SELECT count(DISTINCT department_id) FROM Degree_Programs
How many departments offer any degree?
schema_links:
How many departments offer any degree? | degree_programs : degree_programs.department_id , degree_programs.degree_program_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | courses : courses.course_name , courses.course_description , courses.course_id , courses.other_details , courses.* | sections : sections.section_name , sections.section_id , sections.course_id , sections.section_description , sections.other_details , sections.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct department.department_id ) from department join degree_programs on department.department_id = degree_programs.department_id
SQL = SELECT count(DISTINCT department.department_id) FROM department JOIN degree_programs ON department.department_id = degree_programs.department_id
natsql:
select count ( distinct _ ) from _ | select count ( distinct department.department_id ) from department join degree_programs on department.department_id = degree_programs.department_id

SQL:
SELECT count(DISTINCT department.department_id) FROM department JOIN degree_programs ON department.department_id = degree_programs.department_id
self correction:
SELECT COUNT(DISTINCT departments.department_id) FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id

index is 518
SELECT count(DISTINCT department_id) FROM Degree_Programs
How many different departments offer degrees?
schema_links:
How many different departments offer degrees? | degree_programs : degree_programs.department_id , degree_programs.degree_program_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | sections : sections.section_name , sections.section_id , sections.course_id , sections.section_description , sections.other_details , sections.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct degree_programs.department_id ) from degree_programs
SQL = SELECT COUNT(DISTINCT department_id) FROM degree_programs
natsql:
select count ( distinct _ ) from _ | select count ( distinct degree_programs.department_id ) from degree_programs

SQL:
SELECT COUNT(DISTINCT department_id) FROM degree_programs
self correction:
SELECT COUNT(DISTINCT department_id) FROM Departments

index is 519
SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs
How many different degree names are offered?
schema_links:
How many different degree names are offered? | degree_programs : degree_programs.degree_summary_name , degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | student_enrolment : student_enrolment.degree_program_id , student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | courses : courses.course_name , courses.course_description , courses.course_id , courses.other_details , courses.* | sections : sections.section_name , sections.section_id , sections.course_id , sections.section_description , sections.other_details , sections.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct degree_programs.degree_summary_name ) from degree_programs
SQL = SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs
natsql:
select count ( distinct _ ) from _ | select count ( distinct degree_programs.degree_summary_name ) from degree_programs

SQL:
SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs
self correction:
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs

index is 520
SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs
How many different degrees are offered?
schema_links:
How many different degrees are offered? | degree_programs : degree_programs.degree_summary_name , degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | student_enrolment : student_enrolment.degree_program_id , student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | sections : sections.section_name , sections.course_id , sections.section_description , sections.section_id , sections.other_details , sections.* | courses : courses.course_name , courses.course_description , courses.course_id , courses.other_details , courses.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct degree_programs.degree_program_id ) from degree_programs
SQL = SELECT count(DISTINCT degree_program_id) FROM degree_programs
natsql:
select count ( distinct _ ) from _ | select count ( distinct degree_programs.degree_program_id ) from degree_programs

SQL:
SELECT count(DISTINCT degree_program_id) FROM degree_programs
self correction:
SELECT count(DISTINCT degree_program_id) FROM Degree_Programs

index is 521
SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'
How many degrees does the engineering department offer?
schema_links:
How many degrees does the engineering department offer? | degree_programs : degree_programs.department_id , degree_programs.degree_program_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | addresses : addresses.line_2 , addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.*
natsql and SQL generation:
select count ( distinct _ ) from _ where _ | select count ( distinct degree_programs.degree_program_id ) from degree_programs where degree_programs.department_id = ( select department_id from departments where department_name = 'engineering' )
SQL = SELECT count(DISTINCT degree_program_id) FROM degree_programs WHERE department_id  =  (SELECT department_id FROM departments WHERE department_name = 'engineering')
natsql:
select count ( distinct _ ) from _ where _ | select count ( distinct degree_programs.degree_program_id ) from degree_programs where degree_programs.department_id = ( select department_id from departments where department_name = 'engineering' )

SQL:
SELECT count(DISTINCT degree_program_id) FROM degree_programs WHERE department_id  =  (SELECT department_id FROM departments WHERE department_name = 'engineering')
self correction:
SELECT count(DISTINCT degree_program_id)  FROM Degree_Programs  WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering')

index is 522
SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'
How many degrees does the engineering department have?
schema_links:
How many degrees does the engineering department have? | degree_programs : degree_programs.department_id , degree_programs.degree_program_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.line_2 , addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.* | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.*
natsql and SQL generation:
select count ( _ ) from _ where _ | select count ( degree_programs.degree_program_id ) from degree_programs join departments on degree_programs.department_id = departments.department_id where departments.department_name = 'engineering'
SQL = SELECT count(degree_program_id) FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id WHERE departments.department_name = 'engineering'
natsql:
select count ( _ ) from _ where _ | select count ( degree_programs.degree_program_id ) from degree_programs join departments on degree_programs.department_id = departments.department_id where departments.department_name = 'engineering'

SQL:
SELECT count(degree_program_id) FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id WHERE departments.department_name = 'engineering'
self correction:
SELECT COUNT(Degree_Programs.degree_program_id)  FROM Degree_Programs  JOIN Departments ON Degree_Programs.department_id = Departments.department_id  WHERE Departments.department_name = 'engineering'

index is 523
SELECT section_name ,  section_description FROM Sections
What are the names and descriptions of all the sections?
schema_links:
What are the names and descriptions of all the sections? | sections : sections.section_description , sections.section_name , sections.section_id , sections.course_id , sections.other_details , sections.* | courses : courses.course_description , courses.course_name , courses.course_id , courses.other_details , courses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.*
natsql and SQL generation:
select _ , _ from _ | select section.section_name , section.section_description from section
SQL = SELECT section_name ,  section_description FROM section
natsql:
select _ , _ from _ | select section.section_name , section.section_description from section

SQL:
SELECT section_name ,  section_description FROM section
self correction:
SELECT Sections.section_name, Sections.section_description  FROM Sections

index is 524
SELECT section_name ,  section_description FROM Sections
What are the names and descriptions for all the sections?
schema_links:
What are the names and descriptions for all the sections? | sections : sections.section_description , sections.section_name , sections.section_id , sections.course_id , sections.other_details , sections.* | courses : courses.course_name , courses.course_description , courses.course_id , courses.other_details , courses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.*
natsql and SQL generation:
select _ , _ from _ | select sections.section_name , sections.section_description from sections
SQL = SELECT section_name , section_description FROM sections
natsql:
select _ , _ from _ | select sections.section_name , sections.section_description from sections

SQL:
SELECT section_name , section_description FROM sections
self correction:
SELECT section_name, section_description  FROM Sections

index is 525
SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2
What are the names and id of courses having at most 2 sections?
schema_links:
What are the names and id of courses having at most 2 sections? | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.* | sections : sections.course_id , sections.section_id , sections.section_name , sections.section_description , sections.other_details , sections.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.*
natsql and SQL generation:
select _ , _ from _ where count ( _ ) <= _ group by _ | select courses.course_name , courses.course_id from courses where count ( sections.course_id ) <= 2 group by courses.course_name
SQL = SELECT course_name ,  course_id FROM courses GROUP BY course_name HAVING count(*)  <=  2
natsql:
select _ , _ from _ where count ( _ ) <= _ group by _ | select courses.course_name , courses.course_id from courses where count ( sections.course_id ) <= 2 group by courses.course_name

SQL:
SELECT course_name ,  course_id FROM courses GROUP BY course_name HAVING count(*)  <=  2
self correction:
SELECT Courses.course_name, Courses.course_id  FROM Courses  JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_name, Courses.course_id  HAVING COUNT(Sections.section_id) <= 2

index is 526
SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2
What are the names and ids of every course with less than 2 sections?
schema_links:
What are the names and ids of every course with less than 2 sections? | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | sections : sections.course_id , sections.section_id , sections.section_name , sections.section_description , sections.other_details , sections.* | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.*
natsql and SQL generation:
select _ , _ from _ where count ( _ ) < _ group by _ | select courses.course_name , courses.course_id from courses where count ( sections.section_id ) < 2 group by courses.course_name , courses.course_id
SQL = SELECT course_name ,  course_id FROM courses JOIN sections ON courses.course_id  =  sections.course_id GROUP BY course_name ,  course_id HAVING count(section_id) < 2
natsql:
select _ , _ from _ where count ( _ ) < _ group by _ | select courses.course_name , courses.course_id from courses where count ( sections.section_id ) < 2 group by courses.course_name , courses.course_id

SQL:
SELECT course_name ,  course_id FROM courses JOIN sections ON courses.course_id  =  sections.course_id GROUP BY course_name ,  course_id HAVING count(section_id) < 2
self correction:
SELECT courses.course_name, courses.course_id  FROM courses  LEFT JOIN sections ON courses.course_id = sections.course_id  GROUP BY courses.course_name, courses.course_id  HAVING COUNT(sections.section_id) < 2

index is 527
SELECT section_name FROM Sections ORDER BY section_name DESC
List the section_name in reversed lexicographical order.
schema_links:
List the section_name in reversed lexicographical order. | sections : sections.section_name , sections.section_description , sections.section_id , sections.course_id , sections.other_details , sections.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql and SQL generation:
select _ from _ order by _ desc | select section.section_name from sections order by section.section_name desc
SQL = SELECT section_name FROM sections ORDER BY section_name DESC
natsql:
select _ from _ order by _ desc | select section.section_name from sections order by section.section_name desc

SQL:
SELECT section_name FROM sections ORDER BY section_name DESC
self correction:
SELECT sections.section_name  FROM sections  ORDER BY sections.section_name DESC

index is 528
SELECT section_name FROM Sections ORDER BY section_name DESC
What are the names of the sections in reverse alphabetical order?
schema_links:
What are the names of the sections in reverse alphabetical order? | sections : sections.section_name , sections.section_description , sections.section_id , sections.course_id , sections.other_details , sections.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql and SQL generation:
select _ from _ order by _ desc | select sections.section_name from sections order by sections.section_name desc
SQL = SELECT section_name FROM sections ORDER BY section_name DESC
natsql:
select _ from _ order by _ desc | select sections.section_name from sections order by sections.section_name desc

SQL:
SELECT section_name FROM sections ORDER BY section_name DESC
self correction:
SELECT section_name  FROM Sections  ORDER BY section_name DESC

index is 529
SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1
What is the semester which most student registered in? Show both the name and the id.
schema_links:
What is the semester which most student registered in? Show both the name and the id. | semesters : semesters.semester_name , semesters.semester_id , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment : student_enrolment.semester_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.degree_program_id , student_enrolment.other_details , student_enrolment.* | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.* | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ order by count ( _ ) desc limit _ | select semesters.semester_name , semesters.semester_id from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id group by semesters.semester_name , semesters.semester_id order by count ( student_enrolment.student_enrolment_id ) desc limit 1
natsql:
select _ , count ( _ ) from _ group by _ order by count ( _ ) desc limit _ | select semesters.semester_name , semesters.semester_id from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id group by semesters.semester_name , semesters.semester_id order by count ( student_enrolment.student_enrolment_id ) desc limit 1
SQL:
SELECT semester_name, semester_id FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semester_name, semester_id ORDER BY count(student_enrolment.student_enrolment_id) DESC LIMIT 1
self correction:
SELECT semester_name, semester_id  FROM semesters  JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id  GROUP BY semester_id  ORDER BY COUNT(student_enrolment.student_enrolment_id) DESC  LIMIT 1

index is 530
SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1
For each semester, what is the name and id of the one with the most students registered?
schema_links:
For each semester, what is the name and id of the one with the most students registered? | semesters : semesters.semester_name , semesters.semester_id , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment : student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.other_details , student_enrolment.* | students : students.student_id , students.first_name , students.current_address_id , students.permanent_address_id , students.middle_name , students.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.*
natsql and SQL generation:
select _ , _ from _ group by _ order by count ( _ ) desc limit _ | select semesters.semester_name , semesters.semester_id from semesters group by semesters.semester_name , semesters.semester_id order by count ( student_enrolment.student_id ) desc limit 1
SQL = SELECT semester_name ,  semester_id FROM semesters GROUP BY semester_name , semester_id ORDER BY COUNT(student_id) DESC LIMIT 1
natsql:
select _ , _ from _ group by _ order by count ( _ ) desc limit _ | select semesters.semester_name , semesters.semester_id from semesters group by semesters.semester_name , semesters.semester_id order by count ( student_enrolment.student_id ) desc limit 1

SQL:
SELECT semester_name ,  semester_id FROM semesters GROUP BY semester_name , semester_id ORDER BY COUNT(student_id) DESC LIMIT 1
self correction:
SELECT semesters.semester_name, semesters.semester_id  FROM semesters  INNER JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id  GROUP BY semesters.semester_id  ORDER BY COUNT(student_enrolment.student_id) DESC  LIMIT 1

index is 531
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
What is the description of the department whose name has the substring the computer?
schema_links:
What is the description of the department whose name has the substring the computer? | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.line_2 , addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.* | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql and SQL generation:
select _ from _ where @.@ like %_%
select department_description from departments where department_name like '%computer%'
natsql:
select _ from _ where @.@ like %_%
select department_description from departments where department_name like '%computer%'
SQL:
SELECT department_description FROM departments WHERE department_name LIKE '%computer%'
self correction:
SELECT department_description FROM departments WHERE department_name LIKE '%computer%'

index is 532
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
What is the department description for the one whose name has the word computer?
schema_links:
What is the department description for the one whose name has the word computer? | departments : departments.department_description , departments.department_name , departments.department_id , departments.other_details , departments.* | students : students.first_name , students.last_name , students.middle_name , students.email_address , students.student_id , students.* | addresses : addresses.line_2 , addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql and SQL generation:
select _ from _ where _ like '%computer%' | select department.department_description from department where department.department_name like '%computer%'
SQL = SELECT department_description FROM department WHERE department_name LIKE '%computer%'
natsql:
select _ from _ where _ like '%computer%' | select department.department_description from department where department.department_name like '%computer%'

SQL:
SELECT department_description FROM department WHERE department_name LIKE '%computer%'
self correction:
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'

index is 533
SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.
schema_links:
Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id. | students : students.first_name , students.middle_name , students.last_name , students.student_id , students.permanent_address_id , students.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.semester_id , student_enrolment.degree_program_id , student_enrolment.student_id , student_enrolment.other_details , student_enrolment.* | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.* | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.*
natsql and SQL generation:
select _ , _ , _ , _ from _ where count ( distinct _ ) > _ group by _ | select students.first_name , students.middle_name , students.last_name , students.student_id from students where count ( distinct student_enrolment.degree_program_id ) > 2 group by students.first_name , students.middle_name , students.last_name , students.student_id
SQL = SELECT first_name ,  middle_name ,  last_name ,  student_id FROM students GROUP BY first_name ,  middle_name ,  last_name ,  student_id HAVING count(DISTINCT student_enrolment.degree_program_id)  >  2
natsql:
select _ , _ , _ , _ from _ where count ( distinct _ ) > _ group by _ | select students.first_name , students.middle_name , students.last_name , students.student_id from students where count ( distinct student_enrolment.degree_program_id ) > 2 group by students.first_name , students.middle_name , students.last_name , students.student_id

SQL:
SELECT first_name ,  middle_name ,  last_name ,  student_id FROM students GROUP BY first_name ,  middle_name ,  last_name ,  student_id HAVING count(DISTINCT student_enrolment.degree_program_id)  >  2
self correction:
SELECT first_name, middle_name, last_name, student_id  FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY first_name, middle_name, last_name, student_id HAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) > 2

index is 534
SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?
schema_links:
What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester? | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.degree_program_id , student_enrolment.other_details , student_enrolment.* | students : students.first_name , students.last_name , students.middle_name , students.student_id , students.email_address , students.* | semesters : semesters.semester_name , semesters.semester_id , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*
natsql and SQL generation:
select _ , _ , _ , _ from _ where count ( distinct _ ) = _ and count ( distinct _ ) = _ group by _ | select students.first_name , students.middle_name , students.last_name , students.student_id from students join student_enrolment on students.student_id = student_enrolment.student_id join student_enrolment_courses on student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id where count ( distinct student_enrolment.degree_program_id ) = 2 and count ( distinct student_enrolment.semester_id ) = 1 group by students.student_id
SQL = SELECT first_name ,  middle_name ,  last_name ,  student_id FROM students WHERE student_id IN (SELECT student_id FROM student_enrolment GROUP BY student_id HAVING count(DISTINCT degree_program_id) = 2 AND count(DISTINCT semester_id) = 1)
natsql:
select _ , _ , _ , _ from _ where count ( distinct _ ) = _ and count ( distinct _ ) = _ group by _ | select students.first_name , students.middle_name , students.last_name , students.student_id from students join student_enrolment on students.student_id = student_enrolment.student_id join student_enrolment_courses on student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id where count ( distinct student_enrolment.degree_program_id ) = 2 and count ( distinct student_enrolment.semester_id ) = 1 group by students.student_id

SQL:
SELECT first_name ,  middle_name ,  last_name ,  student_id FROM students WHERE student_id IN (SELECT student_id FROM student_enrolment GROUP BY student_id HAVING count(DISTINCT degree_program_id) = 2 AND count(DISTINCT semester_id) = 1)
self correction:
SELECT first_name, middle_name, last_name, student_id  FROM Students  WHERE student_id IN (   SELECT student_id    FROM Student_Enrolment    GROUP BY student_id    HAVING COUNT(DISTINCT degree_program_id) = 2    AND COUNT(DISTINCT semester_id) = 1 )

index is 535
SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'
Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.
schema_links:
Who is enrolled in a Bachelor degree program? List the first name, middle name, last name. | students : students.first_name , students.middle_name , students.last_name , students.student_id , students.email_address , students.* | degree_programs : degree_programs.degree_summary_name ( Bachelor ) , degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.*
natsql and SQL generation:
select _ , _ , _ from _ where _ = _ and _ = _ | select students.first_name , students.middle_name , students.last_name from students where student_enrolment.degree_program_id = degree_programs.degree_program_id and degree_programs.degree_summary_name = 'Bachelor'
SQL = SELECT first_name ,  middle_name ,  last_name FROM students JOIN student_enrolment ON students.student_id  =  student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id  =  degree_programs.degree_program_id WHERE degree_summary_name  =  'Bachelor'
natsql:
select _ , _ , _ from _ where _ = _ and _ = _ | select students.first_name , students.middle_name , students.last_name from students where student_enrolment.degree_program_id = degree_programs.degree_program_id and degree_programs.degree_summary_name = 'Bachelor'

SQL:
SELECT first_name ,  middle_name ,  last_name FROM students JOIN student_enrolment ON students.student_id  =  student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id  =  degree_programs.degree_program_id WHERE degree_summary_name  =  'Bachelor'
self correction:
SELECT students.first_name, students.middle_name, students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_name = 'Bachelor'

index is 536
SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'
What are the first, middle, and last names for everybody enrolled in a Bachelors program?
schema_links:
What are the first, middle, and last names for everybody enrolled in a Bachelors program? | students : students.last_name , students.first_name , students.middle_name , students.student_id , students.email_address , students.* | student_enrolment : student_enrolment.degree_program_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | degree_programs : degree_programs.degree_summary_name , degree_programs.department_id , degree_programs.degree_summary_description , degree_programs.degree_program_id , degree_programs.other_details , degree_programs.* | courses : courses.course_name , courses.course_description , courses.course_id , courses.other_details , courses.*
natsql and SQL generation:
select _ , _ , _ from _ where _ | select students.first_name , students.middle_name , students.last_name from students join student_enrolment on students.student_id = student_enrolment.student_id join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id where degree_programs.degree_summary_name = 'Bachelors'
SQL = SELECT first_name , middle_name , last_name FROM students JOIN student_enrolment ON students.student_id  =  student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id  =  degree_programs.degree_program_id WHERE degree_programs.degree_summary_name  =  'Bachelors'
natsql:
select _ , _ , _ from _ where _ | select students.first_name , students.middle_name , students.last_name from students join student_enrolment on students.student_id = student_enrolment.student_id join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id where degree_programs.degree_summary_name = 'Bachelors'

SQL:
SELECT first_name , middle_name , last_name FROM students JOIN student_enrolment ON students.student_id  =  student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id  =  degree_programs.degree_program_id WHERE degree_programs.degree_summary_name  =  'Bachelors'
self correction:
SELECT first_name, middle_name, last_name  FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  WHERE Degree_Programs.degree_summary_name = 'Bachelors'

index is 537
SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1
Find the kind of program which most number of students are enrolled in?
schema_links:
Find the kind of program which most number of students are enrolled in? | student_enrolment : student_enrolment.degree_program_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | degree_programs : degree_programs.degree_summary_name , degree_programs.degree_program_id , degree_programs.degree_summary_description , degree_programs.department_id , degree_programs.other_details , degree_programs.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | sections : sections.section_name , sections.course_id , sections.section_description , sections.section_id , sections.other_details , sections.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select degree_programs.degree_summary_name from student_enrolment_courses join degree_programs on student_enrolment_courses.student_enrolment_id = degree_programs.degree_program_id group by degree_programs.degree_summary_name order by count(*) desc limit 1
SQL = SELECT degree_summary_name FROM degree_programs JOIN student_enrolment ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY degree_summary_name ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select degree_programs.degree_summary_name from student_enrolment_courses join degree_programs on student_enrolment_courses.student_enrolment_id = degree_programs.degree_program_id group by degree_programs.degree_summary_name order by count(*) desc limit 1

SQL:
SELECT degree_summary_name FROM degree_programs JOIN student_enrolment ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY degree_summary_name ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1

index is 538
SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1
What is the degree summary name that has the most number of students enrolled?
schema_links:
What is the degree summary name that has the most number of students enrolled? | degree_programs : degree_programs.degree_summary_name , degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | student_enrolment : student_enrolment.degree_program_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | courses : courses.course_name , courses.course_description , courses.course_id , courses.other_details , courses.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_summary_name order by count ( student_enrolment.student_id ) desc limit 1
SQL = SELECT degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY COUNT(student_id) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_summary_name order by count ( student_enrolment.student_id ) desc limit 1

SQL:
SELECT degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY COUNT(student_id) DESC LIMIT 1
self correction:
SELECT degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY COUNT(Student_Enrolment.student_id) DESC LIMIT 1

index is 539
SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1
Find the program which most number of students are enrolled in. List both the id and the summary.
schema_links:
Find the program which most number of students are enrolled in. List both the id and the summary. | student_enrolment : student_enrolment.degree_program_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | degree_programs : degree_programs.degree_summary_name , degree_programs.degree_program_id , degree_programs.degree_summary_description , degree_programs.department_id , degree_programs.other_details , degree_programs.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | addresses : addresses.line_2 , addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.*
natsql and SQL generation:
select _ , _ from _ group by _ order by count ( _ ) desc limit _ | select degree_programs.degree_program_id , degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_program_id , degree_programs.degree_summary_name order by count ( student_enrolment.student_id ) desc limit 1
natsql:
select _ , _ from _ group by _ order by count ( _ ) desc limit _ | select degree_programs.degree_program_id , degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_program_id , degree_programs.degree_summary_name order by count ( student_enrolment.student_id ) desc limit 1
SQL:
SELECT degree_program_id, degree_summary_name
FROM degree_programs
JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id
GROUP BY degree_program_id, degree_summary_name
ORDER BY COUNT(student_id) DESC
LIMIT 1
self correction:
SELECT degree_programs.degree_program_id, degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.degree_program_id, degree_summary_name ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1

index is 540
SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1
What is the program id and the summary of the degree that has the most students enrolled?
schema_links:
What is the program id and the summary of the degree that has the most students enrolled? | degree_programs : degree_programs.degree_summary_name , degree_programs.degree_program_id , degree_programs.degree_summary_description , degree_programs.department_id , degree_programs.other_details , degree_programs.* | student_enrolment : student_enrolment.degree_program_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.*
natsql and SQL generation:
select _ , _ from _ group by _ order by count ( _ ) desc limit _ | select degree_programs.degree_program_id , degree_programs.degree_summary_description from degree_programs group by degree_programs.degree_program_id , degree_programs.degree_summary_description order by count ( student_enrolment.student_id ) desc limit 1
SQL = SELECT degree_program_id ,  degree_summary_description FROM degree_programs GROUP BY degree_program_id ,  degree_summary_description ORDER BY count(student_id) DESC LIMIT 1
natsql:
select _ , _ from _ group by _ order by count ( _ ) desc limit _ | select degree_programs.degree_program_id , degree_programs.degree_summary_description from degree_programs group by degree_programs.degree_program_id , degree_programs.degree_summary_description order by count ( student_enrolment.student_id ) desc limit 1

SQL:
SELECT degree_program_id ,  degree_summary_description FROM degree_programs GROUP BY degree_program_id ,  degree_summary_description ORDER BY count(student_id) DESC LIMIT 1
self correction:
SELECT degree_program_id, degree_summary_description FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description ORDER BY COUNT(Student_Enrolment.student_id) DESC LIMIT 1

index is 541
SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.
schema_links:
Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id. | students : students.first_name , students.last_name , students.middle_name , students.student_id , students.email_address , students.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.* | addresses : addresses.line_2 , addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.*
natsql and SQL generation:
select _ , _ , _ , _ , count ( _ ) from _ group by _ order by count ( _ ) desc limit _ | select students.id , students.first_name , students.middle_name , students.last_name , count ( student_enrolment.student_id ) from students join student_enrolment on students.id = student_enrolment.student_id group by students.id order by count ( student_enrolment.student_id ) desc limit 1
SQL = SELECT T1.id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(T2.student_id) FROM students AS T1 JOIN student_enrolment AS T2 ON T1.id  =  T2.student_id GROUP BY T1.id ORDER BY count(T2.student_id) DESC LIMIT 1
natsql:
select _ , _ , _ , _ , count ( _ ) from _ group by _ order by count ( _ ) desc limit _ | select students.id , students.first_name , students.middle_name , students.last_name , count ( student_enrolment.student_id ) from students join student_enrolment on students.id = student_enrolment.student_id group by students.id order by count ( student_enrolment.student_id ) desc limit 1

SQL:
SELECT T1.id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(T2.student_id) FROM students AS T1 JOIN student_enrolment AS T2 ON T1.id  =  T2.student_id GROUP BY T1.id ORDER BY count(T2.student_id) DESC LIMIT 1
self correction:
SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(T2.student_id) AS enrollment_count FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id, T1.first_name, T1.middle_name, T1.last_name ORDER BY enrollment_count DESC LIMIT 1

index is 542
SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?
schema_links:
What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program? | students : students.first_name , students.last_name , students.middle_name , students.student_id , students.cell_mobile_number , students.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.* | addresses : addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.country , addresses.*
natsql and SQL generation:
select _ , _ , _ , _ , count ( _ ) from _ group by _ order by count ( _ ) desc limit _ | select students.first_name , students.middle_name , students.last_name , students.student_id , count ( student_enrolment.student_enrolment_id ) from students join student_enrolment on students.student_id = student_enrolment.student_id group by students.student_id order by count ( student_enrolment.student_enrolment_id ) desc limit 1
natsql:
select _ , _ , _ , _ , count ( _ ) from _ group by _ order by count ( _ ) desc limit _ | select students.first_name , students.middle_name , students.last_name , students.student_id , count ( student_enrolment.student_enrolment_id ) from students join student_enrolment on students.student_id = student_enrolment.student_id group by students.student_id order by count ( student_enrolment.student_enrolment_id ) desc limit 1
SQL:
SELECT first_name, middle_name, last_name, student_id, count(student_enrolment_id) FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id ORDER BY count(student_enrolment_id) DESC LIMIT 1
self correction:
SELECT Students.first_name, Students.middle_name, Students.last_name, Students.student_id, COUNT(Student_Enrolment.student_enrolment_id)  FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  GROUP BY Students.student_id  ORDER BY COUNT(Student_Enrolment.student_enrolment_id) DESC  LIMIT 1

index is 543
SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )
Which semesters do not have any student enrolled? List the semester name.
schema_links:
Which semesters do not have any student enrolled? List the semester name. | semesters : semesters.semester_name , semesters.semester_description , semesters.semester_id , semesters.other_details , semesters.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.degree_program_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | courses : courses.course_name , courses.course_description , courses.course_id , courses.other_details , courses.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ ) | select semesters.semester_name from semesters where semesters.semester_id not in ( select student_enrolment.semester_id from student_enrolment ) 
SQL = SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment)
natsql:
select _ from _ where _ not in ( select _ from _ ) | select semesters.semester_name from semesters where semesters.semester_id not in ( select student_enrolment.semester_id from student_enrolment ) 

SQL:
SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment)
self correction:
SELECT semesters.semester_name FROM semesters LEFT JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id WHERE student_enrolment.semester_id IS NULL

index is 544
SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )
What is the name of the semester with no students enrolled?
schema_links:
What is the name of the semester with no students enrolled? | semesters : semesters.semester_name , semesters.semester_id , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.degree_program_id , student_enrolment.other_details , student_enrolment.* | courses : courses.course_name , courses.course_description , courses.course_id , courses.other_details , courses.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.*
natsql and SQL generation:
select _ from _ where not exists ( select _ from _ where _ ) | select semesters.semester_name from semesters where not exists ( select student_enrolment.semester_id from student_enrolment where semesters.semester_id = student_enrolment.semester_id )
SQL = SELECT semester_name FROM semesters WHERE NOT EXISTS (SELECT semester_id FROM student_enrolment WHERE semesters.semester_id = student_enrolment.semester_id)
natsql:
select _ from _ where not exists ( select _ from _ where _ ) | select semesters.semester_name from semesters where not exists ( select student_enrolment.semester_id from student_enrolment where semesters.semester_id = student_enrolment.semester_id )

SQL:
SELECT semester_name FROM semesters WHERE NOT EXISTS (SELECT semester_id FROM student_enrolment WHERE semesters.semester_id = student_enrolment.semester_id)
self correction:
SELECT semester_name  FROM Semesters  WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)

index is 545
SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id
What are all the course names of the courses which ever have students enrolled in?
schema_links:
What are all the course names of the courses which ever have students enrolled in? | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.*
natsql and SQL generation:
select distinct _ from _ where exists ( select * from _ ) | select distinct courses.course_name from courses where exists ( select * from student_enrolment_courses )
SQL = SELECT DISTINCT course_name FROM courses WHERE EXISTS (SELECT * FROM student_enrolment_courses)
natsql:
select distinct _ from _ where exists ( select * from _ ) | select distinct courses.course_name from courses where exists ( select * from student_enrolment_courses )

SQL:
SELECT DISTINCT course_name FROM courses WHERE EXISTS (SELECT * FROM student_enrolment_courses)
self correction:
SELECT 

index is 546
SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id
What are the names of all courses that have some students enrolled?
schema_links:
What are the names of all courses that have some students enrolled? | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.*
natsql and SQL generation:
select distinct _ from _ where exists ( select * from _ ) | select distinct courses.course_name from courses where exists ( select * from student_enrolment_courses )
SQL = SELECT DISTINCT course_name FROM courses WHERE EXISTS (SELECT * FROM student_enrolment_courses)
natsql:
select distinct _ from _ where exists ( select * from _ ) | select distinct courses.course_name from courses where exists ( select * from student_enrolment_courses )

SQL:
SELECT DISTINCT course_name FROM courses WHERE EXISTS (SELECT * FROM student_enrolment_courses)
self correction:
SELECT course_name FROM Courses WHERE course_id IN (   SELECT DISTINCT course_id   FROM Student_Enrolment_Courses )

index is 547
SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1
What's the name of the course with most number of enrollments?
schema_links:
What's the name of the course with most number of enrollments? | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.*
natsql and SQL generation:
select _ from _ group by _ order by count ( * ) desc limit _ | select courses.course_name from student_enrolment_courses inner join courses on student_enrolment_courses.course_id = courses.course_id group by courses.course_name order by count ( * ) desc limit 1
SQL = SELECT course_name FROM student_enrolment_courses INNER JOIN courses ON student_enrolment_courses.course_id = courses.course_id GROUP BY course_name ORDER BY COUNT(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( * ) desc limit _ | select courses.course_name from student_enrolment_courses inner join courses on student_enrolment_courses.course_id = courses.course_id group by courses.course_name order by count ( * ) desc limit 1

SQL:
SELECT course_name FROM student_enrolment_courses INNER JOIN courses ON student_enrolment_courses.course_id = courses.course_id GROUP BY course_name ORDER BY COUNT(*) DESC LIMIT 1
self correction:
SELECT courses.course_name  FROM student_enrolment_courses  INNER JOIN courses ON student_enrolment_courses.course_id = courses.course_id  GROUP BY courses.course_name  ORDER BY COUNT(*) DESC  LIMIT 1

index is 548
SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1
What is the name of the course with the most students enrolled?
schema_links:
What is the name of the course with the most students enrolled? | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id group by courses.course_name order by count(*) desc limit 1
SQL = SELECT course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY course_name ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id group by courses.course_name order by count(*) desc limit 1

SQL:
SELECT course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY course_name ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT courses.course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY courses.course_name ORDER BY COUNT(*) DESC LIMIT 1

index is 549
SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.
schema_links:
Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program. | students : students.last_name , students.date_first_registered , students.current_address_id , students.student_id , students.date_left , students.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | addresses : addresses.state_province_county , addresses.address_id , addresses.city , addresses.country , addresses.line_1 , addresses.* | degree_programs : degree_programs.degree_summary_description , degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.other_details , degree_programs.*
natsql and SQL generation:
select _ from _ where @.@ = _ and _ not in ( select _ from _ ) | select students.last_name from students join addresses on students.current_address_id = addresses.address_id where addresses.state_province_county = 'North Carolina' and students.student_id not in ( select student_enrolment.student_id from student_enrolment )
SQL = SELECT last_name FROM students JOIN addresses ON students.current_address_id  =  addresses.address_id WHERE state_province_county  =  'North Carolina' AND students.student_id NOT IN (SELECT student_id FROM student_enrolment)
natsql:
select _ from _ where @.@ = _ and _ not in ( select _ from _ ) | select students.last_name from students join addresses on students.current_address_id = addresses.address_id where addresses.state_province_county = 'North Carolina' and students.student_id not in ( select student_enrolment.student_id from student_enrolment )

SQL:
SELECT last_name FROM students JOIN addresses ON students.current_address_id  =  addresses.address_id WHERE state_province_county  =  'North Carolina' AND students.student_id NOT IN (SELECT student_id FROM student_enrolment)
self correction:
SELECT students.last_name  FROM students  JOIN addresses ON students.current_address_id = addresses.address_id  WHERE addresses.state_province_county = 'North Carolina'  AND students.student_id NOT IN (SELECT student_id FROM student_enrolment)

index is 550
SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
What are the last name of the students who live in North Carolina but have not registered in any degree programs?
schema_links:
What are the last name of the students who live in North Carolina but have not registered in any degree programs? | students : students.last_name , students.date_first_registered , students.student_id , students.date_left , students.first_name , students.* | addresses : addresses.state_province_county , addresses.country , addresses.address_id , addresses.city , addresses.zip_postcode , addresses.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | degree_programs : degree_programs.degree_summary_description , degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.other_details , degree_programs.*
natsql and SQL generation:
select _ from _ where @.@ = _ and _ not in ( select _ from _ ) | select students.last_name from students where addresses.state_province_county = 'North Carolina' and students.student_id not in ( select student_enrolment.student_id from student_enrolment )
natsql:
select _ from _ where @.@ = _ and _ not in ( select _ from _ ) | select students.last_name from students where addresses.state_province_county = 'North Carolina' and students.student_id not in ( select student_enrolment.student_id from student_enrolment )
SQL:
SELECT last_name FROM students
WHERE students.student_id NOT IN (
    SELECT student_id FROM student_enrolment
)
AND students.permanent_address_id IN (
    SELECT address_id FROM addresses
    WHERE state_province_county = 'North Carolina'
)
self correction:
SELECT students.last_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id LEFT JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE addresses.state_province_county = 'North Carolina' AND student_enrolment.student_id IS NULL

index is 551
SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2
Show the date and id of the transcript with at least 2 course results.
schema_links:
Show the date and id of the transcript with at least 2 course results. | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details , transcripts.* | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id , transcript_contents.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | courses : courses.course_name , courses.course_description , courses.course_id , courses.other_details , courses.*
natsql and SQL generation:
select _ , _ from _ where count ( _ ) >= _ group by _ | select transcripts.transcript_date , transcripts.transcript_id from transcripts join transcript_contents on transcripts.transcript_id = transcript_contents.transcript_id group by transcripts.transcript_id having count(transcript_contents.student_course_id) >= 2
SQL = SELECT transcript_date ,  transcript_id FROM transcripts JOIN transcript_contents ON transcripts.transcript_id  =  transcript_contents.transcript_id GROUP BY transcript_id HAVING count(student_course_id) >= 2
natsql:
select _ , _ from _ where count ( _ ) >= _ group by _ | select transcripts.transcript_date , transcripts.transcript_id from transcripts join transcript_contents on transcripts.transcript_id = transcript_contents.transcript_id group by transcripts.transcript_id having count(transcript_contents.student_course_id) >= 2

SQL:
SELECT transcript_date ,  transcript_id FROM transcripts JOIN transcript_contents ON transcripts.transcript_id  =  transcript_contents.transcript_id GROUP BY transcript_id HAVING count(student_course_id) >= 2
self correction:
SELECT transcript_date, transcript_id FROM Transcripts JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id GROUP BY transcript_date, transcript_id HAVING COUNT(Transcript_Contents.student_course_id) >= 2

index is 552
SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2
What is the date and id of the transcript with at least 2 courses listed?
schema_links:
What is the date and id of the transcript with at least 2 courses listed? | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id , transcript_contents.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql and SQL generation:
select _ , _ from _ where count ( _ ) >= _ group by _ | select transcripts.transcript_date , transcripts.transcript_id from transcripts where count ( transcript_contents.* ) >= 2 group by transcripts.transcript_date , transcripts.transcript_id
SQL = SELECT transcript_date ,  transcript_id FROM transcripts GROUP BY transcript_date ,  transcript_id HAVING count(*)  >=  2
natsql:
select _ , _ from _ where count ( _ ) >= _ group by _ | select transcripts.transcript_date , transcripts.transcript_id from transcripts where count ( transcript_contents.* ) >= 2 group by transcripts.transcript_date , transcripts.transcript_id

SQL:
SELECT transcript_date ,  transcript_id FROM transcripts GROUP BY transcript_date ,  transcript_id HAVING count(*)  >=  2
self correction:
SELECT transcript_date, transcript_id FROM Transcripts JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id JOIN Student_Enrolment_Courses ON Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id GROUP BY transcript_date, transcript_id HAVING COUNT(DISTINCT Student_Enrolment_Courses.course_id) >= 2

index is 553
SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'
What is the phone number of the man with the first name Timmothy and the last name Ward?
schema_links:
What is the phone number of the man with the first name Timmothy and the last name Ward? | students : students.first_name ( Timmothy ) , students.last_name ( Ward ) , students.cell_mobile_number , students.student_id , students.middle_name , students.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql and SQL generation:
select _ from _ where _ = _ and _ = _ | select students.cell_mobile_number from students where students.first_name = 'Timmothy' and students.last_name = 'Ward'
SQL = SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
natsql:
select _ from _ where _ = _ and _ = _ | select students.cell_mobile_number from students where students.first_name = 'Timmothy' and students.last_name = 'Ward'

SQL:
SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
self correction:
SELECT cell_mobile_number  FROM Students  WHERE first_name = 'Timmothy' AND last_name = 'Ward'

index is 554
select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'
What is the mobile phone number of the student named Timmothy Ward ?
schema_links:
What is the mobile phone number of the student named Timmothy Ward ? | students : students.first_name ( Timmothy ) , students.cell_mobile_number , students.last_name ( Ward ) , students.student_id , students.middle_name , students.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.* | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.*
natsql and SQL generation:
select _ from _ where _ and _ | select students.cell_mobile_number from students where students.first_name = 'Timmothy' and students.last_name = 'Ward'
SQL = SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
natsql:
select _ from _ where _ and _ | select students.cell_mobile_number from students where students.first_name = 'Timmothy' and students.last_name = 'Ward'

SQL:
SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
self correction:
SELECT cell_mobile_number  FROM Students  WHERE first_name = 'Timmothy' AND last_name = 'Ward'

index is 555
SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
Who is the first student to register? List the first name, middle name and last name.
schema_links:
Who is the first student to register? List the first name, middle name and last name. | students : students.last_name , students.first_name , students.middle_name , students.date_first_registered , students.student_id , students.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details , student_enrolment.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.*
natsql and SQL generation:
select _ , _ , _ from _ order by _ limit _ | select students.first_name , students.middle_name , students.last_name from students order by students.date_first_registered limit 1
SQL = SELECT first_name ,  middle_name ,  last_name FROM students ORDER BY date_first_registered LIMIT 1
natsql:
select _ , _ , _ from _ order by _ limit _ | select students.first_name , students.middle_name , students.last_name from students order by students.date_first_registered limit 1

SQL:
SELECT first_name ,  middle_name ,  last_name FROM students ORDER BY date_first_registered LIMIT 1
self correction:
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1

index is 556
SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
What is the first, middle, and last name of the first student to register?
schema_links:
What is the first, middle, and last name of the first student to register? | students : students.last_name , students.first_name , students.middle_name , students.date_first_registered , students.student_id , students.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.*
natsql and SQL generation:
select _ , _ , _ from _ order by _ limit _ | select students.first_name , students.middle_name , students.last_name from students order by students.date_first_registered limit 1
SQL = SELECT first_name ,  middle_name ,  last_name FROM students ORDER BY date_first_registered LIMIT 1
natsql:
select _ , _ , _ from _ order by _ limit _ | select students.first_name , students.middle_name , students.last_name from students order by students.date_first_registered limit 1

SQL:
SELECT first_name ,  middle_name ,  last_name FROM students ORDER BY date_first_registered LIMIT 1
self correction:
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered LIMIT 1

index is 557
SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1
Who is the earliest graduate of the school? List the first name, middle name and last name.
schema_links:
Who is the earliest graduate of the school? List the first name, middle name and last name. | students : students.first_name , students.middle_name , students.last_name , students.date_first_registered , students.date_left , students.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.* | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.*
natsql and SQL generation:
select _ , _ , _ from _ order by _ limit _ | select students.first_name , students.middle_name , students.last_name from students order by students.date_first_registered limit 1
SQL = SELECT first_name ,  middle_name ,  last_name FROM students ORDER BY date_first_registered LIMIT 1
natsql:
select _ , _ , _ from _ order by _ limit _ | select students.first_name , students.middle_name , students.last_name from students order by students.date_first_registered limit 1

SQL:
SELECT first_name ,  middle_name ,  last_name FROM students ORDER BY date_first_registered LIMIT 1
self correction:
SELECT students.first_name, students.middle_name, students.last_name FROM students ORDER BY students.date_first_registered LIMIT 1

index is 558
SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1
What is the first, middle, and last name of the earliest school graduate?
schema_links:
What is the first, middle, and last name of the earliest school graduate? | students : students.last_name , students.first_name , students.middle_name , students.date_first_registered , students.date_left , students.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql and SQL generation:
select _ , _ , _ from _ order by _ limit _ | select students.first_name , students.middle_name , students.last_name from students order by students.date_first_registered limit 1
SQL = SELECT first_name , middle_name , last_name FROM students ORDER BY date_first_registered LIMIT 1
natsql:
select _ , _ , _ from _ order by _ limit _ | select students.first_name , students.middle_name , students.last_name from students order by students.date_first_registered limit 1

SQL:
SELECT first_name , middle_name , last_name FROM students ORDER BY date_first_registered LIMIT 1
self correction:
SELECT Students.first_name, Students.middle_name, Students.last_name  FROM Students ORDER BY Students.date_first_registered ASC LIMIT 1

index is 559
SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
Whose permanent address is different from his or her current address? List his or her first name.
schema_links:
Whose permanent address is different from his or her current address? List his or her first name. | students : students.first_name , students.permanent_address_id , students.current_address_id , students.student_id , students.last_name , students.* | addresses : addresses.address_id , addresses.country , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql and SQL generation:
select _ from _ where _ != _ | select students.first_name from students join addresses on students.permanent_address_id != addresses.address_id and students.current_address_id = addresses.address_id
SQL = SELECT first_name FROM students JOIN addresses ON students.permanent_address_id  !=  addresses.address_id AND students.current_address_id  =  addresses.address_id
natsql:
select _ from _ where _ != _ | select students.first_name from students join addresses on students.permanent_address_id != addresses.address_id and students.current_address_id = addresses.address_id

SQL:
SELECT first_name FROM students JOIN addresses ON students.permanent_address_id  !=  addresses.address_id AND students.current_address_id  =  addresses.address_id
self correction:
SELECT first_name FROM students JOIN addresses ON students.permanent_address_id != addresses.address_id WHERE students.current_address_id = addresses.address_id

index is 560
SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
What is the first name of the student whose permanent address is different from his or her current one?
schema_links:
What is the first name of the student whose permanent address is different from his or her current one? | students : students.first_name , students.permanent_address_id , students.current_address_id , students.student_id , students.last_name , students.* | addresses : addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql and SQL generation:
select _ from _ where _ != _ | select students.first_name from students where students.permanent_address_id != students.current_address_id
SQL = SELECT first_name FROM students WHERE permanent_address_id != current_address_id
natsql:
select _ from _ where _ != _ | select students.first_name from students where students.permanent_address_id != students.current_address_id

SQL:
SELECT first_name FROM students WHERE permanent_address_id != current_address_id
self correction:
SELECT Students.first_name FROM Students JOIN Addresses AS perm ON Students.permanent_address_id = perm.address_id JOIN Addresses AS curr ON Students.current_address_id = curr.address_id WHERE perm.address_id != curr.address_id;

index is 561
SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
Which address holds the most number of students currently? List the address id and all lines.
schema_links:
Which address holds the most number of students currently? List the address id and all lines. | students : students.current_address_id , students.permanent_address_id , students.student_id , students.date_first_registered , students.date_left , students.* | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.other_address_details , addresses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.*
natsql and SQL generation:
select @.@ , @.@ , @.@ from @ where count ( @.@ ) = max ( count ( @.@ ) ) group by @.@  | select addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 from students join addresses on students.current_address_id = addresses.address_id group by addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 order by count(*) desc limit 1
SQL = SELECT address_id , line_1 , line_2 , line_3 FROM addresses WHERE address_id IN (SELECT current_address_id FROM students) GROUP BY address_id , line_1 , line_2 , line_3 ORDER BY count(*) DESC LIMIT 1
natsql:
select @.@ , @.@ , @.@ from @ where count ( @.@ ) = max ( count ( @.@ ) ) group by @.@  | select addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 from students join addresses on students.current_address_id = addresses.address_id group by addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 order by count(*) desc limit 1

SQL:
SELECT address_id , line_1 , line_2 , line_3 FROM addresses WHERE address_id IN (SELECT current_address_id FROM students) GROUP BY address_id , line_1 , line_2 , line_3 ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3  FROM addresses  JOIN students ON addresses.address_id = students.current_address_id  GROUP BY addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3  ORDER BY COUNT(*) DESC  LIMIT 1

index is 562
SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
What is the id, line 1, and line 2 of the address with the most students?
schema_links:
What is the id, line 1, and line 2 of the address with the most students? | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.* | students : students.current_address_id , students.permanent_address_id , students.student_id , students.date_left , students.other_student_details , students.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.*
natsql and SQL generation:
select _ , _ , _ from _ where _ = ( select _ from _ group by _ order by count ( _ ) desc limit _ ) | select addresses.address_id , addresses.line_1 , addresses.line_2 from addresses where addresses.address_id = ( select student.current_address_id from student group by student.current_address_id order by count ( * ) desc limit 1 )
SQL = SELECT address_id , line_1 , line_2 FROM addresses WHERE address_id  =  (SELECT current_address_id FROM students GROUP BY current_address_id ORDER BY count(*) DESC LIMIT 1)
natsql:
select _ , _ , _ from _ where _ = ( select _ from _ group by _ order by count ( _ ) desc limit _ ) | select addresses.address_id , addresses.line_1 , addresses.line_2 from addresses where addresses.address_id = ( select student.current_address_id from student group by student.current_address_id order by count ( * ) desc limit 1 )

SQL:
SELECT address_id , line_1 , line_2 FROM addresses WHERE address_id  =  (SELECT current_address_id FROM students GROUP BY current_address_id ORDER BY count(*) DESC LIMIT 1)
self correction:
SELECT addresses.address_id, addresses.line_1, addresses.line_2  FROM addresses  JOIN students ON addresses.address_id = students.current_address_id GROUP BY addresses.address_id, addresses.line_1, addresses.line_2 ORDER BY COUNT(*) DESC  LIMIT 1

index is 563
SELECT avg(transcript_date) FROM Transcripts
On average, when were the transcripts printed?
schema_links:
On average, when were the transcripts printed? | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.*
natsql and SQL generation:
select avg ( _ ) from _ | select avg(transcript_date) from transcripts
SQL = SELECT AVG(transcript_date) FROM transcripts
natsql:
select avg ( _ ) from _ | select avg(transcript_date) from transcripts

SQL:
SELECT AVG(transcript_date) FROM transcripts
self correction:
SELECT AVG(transcript_date) FROM Transcripts

index is 564
SELECT avg(transcript_date) FROM Transcripts
What is the average transcript date?
schema_links:
What is the average transcript date? | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.* | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id , transcript_contents.*
natsql and SQL generation:
select avg ( _ ) from _ | select avg ( transcript_date ) from transcripts
SQL = SELECT avg(transcript_date) FROM transcripts
natsql:
select avg ( _ ) from _ | select avg ( transcript_date ) from transcripts

SQL:
SELECT avg(transcript_date) FROM transcripts
self correction:
SELECT avg(transcript_date) FROM Transcripts

index is 565
SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
When is the first transcript released? List the date and details.
schema_links:
When is the first transcript released? List the date and details. | transcripts : transcripts.transcript_date , transcripts.other_details , transcripts.transcript_id , transcripts.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.*
natsql and SQL generation:
select _ , _ from _ order by _ limit _ | select transcript.transcript_date , transcript.other_details from transcript order by transcript.transcript_date limit 1
SQL = SELECT transcript_date ,  other_details FROM transcripts ORDER BY transcript_date LIMIT 1
natsql:
select _ , _ from _ order by _ limit _ | select transcript.transcript_date , transcript.other_details from transcript order by transcript.transcript_date limit 1

SQL:
SELECT transcript_date ,  other_details FROM transcripts ORDER BY transcript_date LIMIT 1
self correction:
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date LIMIT 1

index is 566
SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
What is the earliest date of a transcript release, and what details can you tell me?
schema_links:
What is the earliest date of a transcript release, and what details can you tell me? | transcripts : transcripts.transcript_date , transcripts.other_details , transcripts.transcript_id , transcripts.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.* | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.*
natsql and SQL generation:
select min ( transcripts.transcript_date ) , transcripts.* from transcripts | select min(transcript_date), other_details from transcripts
SQL = SELECT MIN(transcript_date), other_details FROM transcripts
natsql:
select min ( transcripts.transcript_date ) , transcripts.* from transcripts | select min(transcript_date), other_details from transcripts

SQL:
SELECT MIN(transcript_date), other_details FROM transcripts
self correction:
SELECT MIN(transcript_date), other_details FROM Transcripts GROUP BY other_details

index is 567
SELECT count(*) FROM Transcripts
How many transcripts are released?
schema_links:
How many transcripts are released? | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details , transcripts.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( transcripts.transcript_id ) from transcripts
SQL = SELECT count(transcript_id) FROM transcripts
natsql:
select count ( _ ) from _ | select count ( transcripts.transcript_id ) from transcripts

SQL:
SELECT count(transcript_id) FROM transcripts
self correction:
SELECT count(transcript_id) FROM Transcripts

index is 568
SELECT count(*) FROM Transcripts
How many transcripts are listed?
schema_links:
How many transcripts are listed? | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details , transcripts.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.*
natsql and SQL generation:
select count ( * ) from transcripts
SQL = SELECT count(*) FROM transcripts
natsql:
select count ( * ) from transcripts

SQL:
SELECT count(*) FROM transcripts
self correction:
SELECT count(*) FROM Transcripts

index is 569
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
What is the last transcript release date?
schema_links:
What is the last transcript release date? | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.*
natsql and SQL generation:
select max ( _ ) from _ | select max(transcript_date) from transcripts
SQL = SELECT MAX(transcript_date) FROM transcripts
natsql:
select max ( _ ) from _ | select max(transcript_date) from transcripts

SQL:
SELECT MAX(transcript_date) FROM transcripts
self correction:
SELECT MAX(transcript_date) AS last_transcript_release_date FROM Transcripts

index is 570
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
When was the last transcript released?
schema_links:
When was the last transcript released? | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id , transcript_contents.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.*
natsql and SQL generation:
select max ( _ ) from _ | select max(transcript_date) from transcripts
SQL = SELECT MAX(transcript_date) FROM transcripts
natsql:
select max ( _ ) from _ | select max(transcript_date) from transcripts

SQL:
SELECT MAX(transcript_date) FROM transcripts
self correction:
SELECT MAX(transcript_date) FROM Transcripts

index is 571
SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.
schema_links:
How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id. | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.* | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details , transcripts.* | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id , transcript_contents.*
natsql and SQL generation:
select max ( count ( _ ) ) , _ from _ group by _ | select max ( count ( student_enrolment_courses.student_course_id ) ) , student_enrolment_courses.student_enrolment_id from student_enrolment_courses group by student_enrolment_courses.student_course_id
SQL = SELECT MAX(count(*)), student_course_id FROM transcript_contents GROUP BY student_course_id
natsql:
select max ( count ( _ ) ) , _ from _ group by _ | select max ( count ( student_enrolment_courses.student_course_id ) ) , student_enrolment_courses.student_enrolment_id from student_enrolment_courses group by student_enrolment_courses.student_course_id

SQL:
SELECT MAX(count(*)), student_course_id FROM transcript_contents GROUP BY student_course_id
self correction:
SELECT MAX(enrollment_count) AS max_enrollment_count, student_course_id FROM (   SELECT COUNT(*) AS enrollment_count, student_course_id   FROM Transcript_Contents   GROUP BY student_course_id ) AS subquery ORDER BY max_enrollment_count DESC LIMIT 1

index is 572
SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?
schema_links:
What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id? | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id , transcript_contents.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details , transcripts.*
natsql and SQL generation:
select max ( count ( _ ) ) , _ from _ group by _ | select max ( count ( student_enrolment_courses.course_id ) ) , student_enrolment_courses.student_enrolment_id from student_enrolment_courses group by student_enrolment_courses.course_id
SQL = SELECT MAX(count(T1.course_id)) , T2.student_enrolment_id FROM student_enrolment_courses AS T1 JOIN Student_Enrolment AS T2 ON T1.student_enrolment_id  =  T2.student_enrolment_id GROUP BY T1.course_id
natsql:
select max ( count ( _ ) ) , _ from _ group by _ | select max ( count ( student_enrolment_courses.course_id ) ) , student_enrolment_courses.student_enrolment_id from student_enrolment_courses group by student_enrolment_courses.course_id

SQL:
SELECT MAX(count(T1.course_id)) , T2.student_enrolment_id FROM student_enrolment_courses AS T1 JOIN Student_Enrolment AS T2 ON T1.student_enrolment_id  =  T2.student_enrolment_id GROUP BY T1.course_id
self correction:
SELECT MAX(T1.course_count) AS max_course_count, T2.student_enrolment_id FROM (     SELECT COUNT(*) AS course_count, student_enrolment_id, course_id     FROM Student_Enrolment_Courses     GROUP BY student_enrolment_id, course_id ) AS T1 JOIN Student_Enrolment AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id GROUP BY T2.student_enrolment_id ORDER BY max_course_count DESC LIMIT 1

index is 573
SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1
Show the date of the transcript which shows the least number of results, also list the id.
schema_links:
Show the date of the transcript which shows the least number of results, also list the id. | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id , transcript_contents.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.*
natsql and SQL generation:
select _ from _ order by count ( _ ) limit _ | select transcripts.transcript_date , transcripts.transcript_id from transcripts order by count ( transcripts.* ) limit 1
SQL = SELECT transcript_date , transcript_id FROM transcripts ORDER BY count(*) LIMIT 1
natsql:
select _ from _ order by count ( _ ) limit _ | select transcripts.transcript_date , transcripts.transcript_id from transcripts order by count ( transcripts.* ) limit 1

SQL:
SELECT transcript_date , transcript_id FROM transcripts ORDER BY count(*) LIMIT 1
self correction:
SELECT transcripts.transcript_date, transcripts.transcript_id FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id JOIN student_enrolment_courses ON transcript_contents.student_course_id = student_enrolment_courses.student_course_id GROUP BY transcripts.transcript_date, transcripts.transcript_id ORDER BY COUNT(*) ASC LIMIT 1;

index is 574
SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1
What is the date and id of the transcript with the least number of results?
schema_links:
What is the date and id of the transcript with the least number of results? | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id , transcript_contents.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.semester_id , student_enrolment.degree_program_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*
natsql and SQL generation:
select _ , _ from _ order by count ( _ ) asc limit _ | select transcript.transcript_date , transcript.transcript_id from transcript order by count ( transcript_contents.* ) asc limit 1
SQL = SELECT transcript_date ,  transcript_id FROM transcripts AS T1 JOIN transcript_contents AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1
natsql:
select _ , _ from _ order by count ( _ ) asc limit _ | select transcript.transcript_date , transcript.transcript_id from transcript order by count ( transcript_contents.* ) asc limit 1

SQL:
SELECT transcript_date ,  transcript_id FROM transcripts AS T1 JOIN transcript_contents AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1
self correction:
SELECT T1.transcript_date, T1.transcript_id  FROM Transcripts AS T1  JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id  GROUP BY T1.transcript_id  ORDER BY COUNT(*) ASC  LIMIT 1

index is 575
SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
Find the semester when both Master students and Bachelor students got enrolled in.
schema_links:
Find the semester when both Master students and Bachelor students got enrolled in. | student_enrolment : student_enrolment.semester_id , student_enrolment.degree_program_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.other_details , student_enrolment.* | degree_programs : degree_programs.degree_summary_name ( Bachelor , Master ) , degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | semesters : semesters.semester_name , semesters.semester_id , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*
natsql and SQL generation:
select _ from _ where _ and _ | select semesters.semester_name from semesters where (select count ( distinct student_enrolment.degree_program_id ) from student_enrolment where semesters.semester_id = student_enrolment.semester_id and (student_enrolment.degree_program_id = 'Bachelor' or student_enrolment.degree_program_id = 'Master')) > 1
SQL = SELECT semester_name FROM semesters WHERE (SELECT count(DISTINCT degree_program_id) FROM student_enrolment WHERE semester_id = semesters.semester_id AND (degree_program_id = 'Bachelor' OR degree_program_id = 'Master')) > 1
natsql:
select _ from _ where _ and _ | select semesters.semester_name from semesters where (select count ( distinct student_enrolment.degree_program_id ) from student_enrolment where semesters.semester_id = student_enrolment.semester_id and (student_enrolment.degree_program_id = 'Bachelor' or student_enrolment.degree_program_id = 'Master')) > 1

SQL:
SELECT semester_name FROM semesters WHERE (SELECT count(DISTINCT degree_program_id) FROM student_enrolment WHERE semester_id = semesters.semester_id AND (degree_program_id = 'Bachelor' OR degree_program_id = 'Master')) > 1
self correction:
SELECT semester_name  FROM Semesters  WHERE semester_id IN (   SELECT semester_id    FROM Student_Enrolment    WHERE degree_program_id IN ('Bachelor', 'Master')   GROUP BY semester_id    HAVING COUNT(DISTINCT degree_program_id) > 1 )

index is 576
SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
What is the id of the semester that had both Masters and Bachelors students enrolled?
schema_links:
What is the id of the semester that had both Masters and Bachelors students enrolled? | student_enrolment : student_enrolment.semester_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.degree_program_id , student_enrolment.other_details , student_enrolment.* | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | courses : courses.course_name , courses.course_description , courses.course_id , courses.other_details , courses.*
natsql and SQL generation:
select semester_id from student_enrolment where degree_program_id in (select degree_program_id from degree_programs where degree_summary_name = 'Masters') and semester_id in (select semester_id from student_enrolment where degree_program_id in (select degree_program_id from degree_programs where degree_summary_name = 'Bachelors')) group by semester_id having count(distinct degree_program_id) > 1

SQL = SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters') AND semester_id IN (SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelors')) GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) > 1
natsql:
select semester_id from student_enrolment where degree_program_id in (select degree_program_id from degree_programs where degree_summary_name = 'Masters') and semester_id in (select semester_id from student_enrolment where degree_program_id in (select degree_program_id from degree_programs where degree_summary_name = 'Bachelors')) group by semester_id having count(distinct degree_program_id) > 1


SQL:
SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Masters') AND semester_id IN (SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelors')) GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) > 1
self correction:
SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (   SELECT degree_program_id   FROM degree_programs   WHERE degree_summary_name = 'Masters' ) AND semester_id IN (   SELECT semester_id   FROM student_enrolment   WHERE degree_program_id IN (     SELECT degree_program_id     FROM degree_programs     WHERE degree_summary_name = 'Bachelors'   ) ) GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) > 1;

index is 577
SELECT count(DISTINCT current_address_id) FROM Students
How many different addresses do the students currently live?
schema_links:
How many different addresses do the students currently live? | students : students.current_address_id , students.student_id , students.first_name , students.permanent_address_id , students.last_name , students.* | addresses : addresses.address_id , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct students.current_address_id ) from students
SQL = SELECT count(DISTINCT current_address_id) FROM students
natsql:
select count ( distinct _ ) from _ | select count ( distinct students.current_address_id ) from students

SQL:
SELECT count(DISTINCT current_address_id) FROM students
self correction:
SELECT count(DISTINCT Students.current_address_id) FROM Students

index is 578
SELECT count(DISTINCT current_address_id) FROM Students
What are the different addresses that have students living there?
schema_links:
What are the different addresses that have students living there? | students : students.current_address_id , students.permanent_address_id , students.email_address , students.student_id , students.first_name , students.* | addresses : addresses.address_id , addresses.other_address_details , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.*
natsql and SQL generation:
select distinct _ from _ where _ is not null | select distinct addresses.line_1, addresses.line_2, addresses.line_3, addresses.city, addresses.zip_postcode, addresses.state_province_county, addresses.country, addresses.other_address_details from addresses where addresses.address_id in (select distinct students.current_address_id from students) or addresses.address_id in (select distinct students.permanent_address_id from students)
SQL = SELECT DISTINCT line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details FROM addresses WHERE address_id IN (SELECT DISTINCT current_address_id FROM students) OR address_id IN (SELECT DISTINCT permanent_address_id FROM students)
natsql:
select distinct _ from _ where _ is not null | select distinct addresses.line_1, addresses.line_2, addresses.line_3, addresses.city, addresses.zip_postcode, addresses.state_province_county, addresses.country, addresses.other_address_details from addresses where addresses.address_id in (select distinct students.current_address_id from students) or addresses.address_id in (select distinct students.permanent_address_id from students)

SQL:
SELECT DISTINCT line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details FROM addresses WHERE address_id IN (SELECT DISTINCT current_address_id FROM students) OR address_id IN (SELECT DISTINCT permanent_address_id FROM students)
self correction:
SELECT line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details  FROM Addresses  WHERE address_id IN (SELECT current_address_id FROM Students) OR address_id IN (SELECT permanent_address_id FROM Students)

index is 579
SELECT other_student_details FROM Students ORDER BY other_student_details DESC
List all the student details in reversed lexicographical order.
schema_links:
List all the student details in reversed lexicographical order. | students : students.other_student_details , students.email_address , students.student_id , students.first_name , students.date_left , students.* | addresses : addresses.line_2 , addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details , sections.*
natsql and SQL generation:
select * from _ order by _ desc | select * from students order by students.first_name desc
SQL = SELECT * FROM students ORDER BY first_name DESC
natsql:
select * from _ order by _ desc | select * from students order by students.first_name desc

SQL:
SELECT * FROM students ORDER BY first_name DESC
self correction:
SELECT * FROM Students ORDER BY last_name DESC

index is 580
SELECT other_student_details FROM Students ORDER BY other_student_details DESC
What other details can you tell me about students in reverse alphabetical order?
schema_links:
What other details can you tell me about students in reverse alphabetical order? | students : students.other_student_details , students.first_name , students.last_name , students.student_id , students.email_address , students.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.* | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.*
natsql and SQL generation:
select _ from _ order by _ desc | select students.* from students order by students.last_name desc
SQL = SELECT * FROM students ORDER BY last_name DESC
natsql:
select _ from _ order by _ desc | select students.* from students order by students.last_name desc

SQL:
SELECT * FROM students ORDER BY last_name DESC
self correction:
SELECT Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details  FROM Students  ORDER BY Students.last_name DESC

index is 581
SELECT section_description FROM Sections WHERE section_name  =  'h'
Describe the section h.
schema_links:
Describe the section h. | sections : sections.section_name , sections.section_description , sections.section_id , sections.course_id , sections.other_details , sections.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql and SQL generation:
SELECT * FROM sections WHERE section_id = 'h'

SQL = SELECT * FROM sections WHERE section_id = 'h'
natsql:
SELECT * FROM sections WHERE section_id = 'h'


SQL:
SELECT * FROM sections WHERE section_id = 'h'
self correction:
SELECT section_id, course_id, section_name, section_description, other_details FROM sections WHERE section_id = 'h'

index is 582
SELECT section_description FROM Sections WHERE section_name  =  'h'
What is the description for the section named h?
schema_links:
What is the description for the section named h? | sections : sections.section_name , sections.section_description , sections.section_id , sections.course_id , sections.other_details , sections.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | courses : courses.course_description , courses.course_id , courses.course_name , courses.other_details , courses.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.*
natsql and SQL generation:
select _ from _ where _ = _ | select section.section_description from section where section.section_name = 'h'
SQL = SELECT section_description FROM section WHERE section_name  =  'h'
natsql:
select _ from _ where _ = _ | select section.section_description from section where section.section_name = 'h'

SQL:
SELECT section_description FROM section WHERE section_name  =  'h'
self correction:
SELECT Sections.section_description FROM Sections WHERE Sections.section_name = 'h'

index is 583
select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'
Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .
schema_links:
Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 . | students : students.first_name , students.cell_mobile_number , students.permanent_address_id , students.student_id , students.date_first_registered , students.* | addresses : addresses.country ( Haiti ) , addresses.address_id , addresses.city , addresses.line_1 , addresses.line_2 , addresses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.*
natsql and SQL generation:
select _ from _ where @.@ = _ or @.@ = _ | select students.first_name from students join addresses on students.permanent_address_id = addresses.address_id where addresses.country = 'Haiti' or students.cell_mobile_number = '09700166582'
SQL = SELECT first_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.country = 'Haiti' OR students.cell_mobile_number = '09700166582'
natsql:
select _ from _ where @.@ = _ or @.@ = _ | select students.first_name from students join addresses on students.permanent_address_id = addresses.address_id where addresses.country = 'Haiti' or students.cell_mobile_number = '09700166582'

SQL:
SELECT first_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.country = 'Haiti' OR students.cell_mobile_number = '09700166582'
self correction:
SELECT students.first_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.country = 'Haiti' OR students.cell_mobile_number = '09700166582'

index is 584
select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'
What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?
schema_links:
What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ? | students : students.first_name , students.cell_mobile_number , students.permanent_address_id , students.student_id , students.date_first_registered , students.* | addresses : addresses.country ( Haiti ) , addresses.address_id , addresses.city , addresses.line_1 , addresses.line_2 , addresses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.*
natsql and SQL generation:
select _ from _ where _ or _ | select students.first_name from students where students.cell_mobile_number = '09700166582' or addresses.country = 'Haiti'
SQL = SELECT first_name FROM students WHERE cell_mobile_number = '09700166582' OR permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti')
natsql:
select _ from _ where _ or _ | select students.first_name from students where students.cell_mobile_number = '09700166582' or addresses.country = 'Haiti'

SQL:
SELECT first_name FROM students WHERE cell_mobile_number = '09700166582' OR permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti')
self correction:
SELECT first_name  FROM Students  WHERE cell_mobile_number = '09700166582'     OR permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti')

index is 585
SELECT Title FROM Cartoon ORDER BY title
List the title of all cartoons in alphabetical order.
schema_links:
List the title of all cartoons in alphabetical order. | cartoon : cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.directed_by , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql and SQL generation:
select _ from _ order by _ | select cartoon.title from cartoon order by cartoon.title
SQL = SELECT title FROM cartoon ORDER BY title
natsql:
select _ from _ order by _ | select cartoon.title from cartoon order by cartoon.title

SQL:
SELECT title FROM cartoon ORDER BY title
self correction:
SELECT cartoon.title FROM cartoon ORDER BY cartoon.title

index is 586
SELECT Title FROM Cartoon ORDER BY title
What are the titles of the cartoons sorted alphabetically?
schema_links:
What are the titles of the cartoons sorted alphabetically? | cartoon : cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.production_code , cartoon.* | tv_series : tv_series.episode , tv_series.id , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql and SQL generation:
select _ from _ order by _ | select cartoon.title from cartoon order by cartoon.title
SQL = SELECT title FROM Cartoon ORDER BY title
natsql:
select _ from _ order by _ | select cartoon.title from cartoon order by cartoon.title

SQL:
SELECT title FROM Cartoon ORDER BY title
self correction:
SELECT title FROM Cartoon ORDER BY title ASC

index is 587
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";
List all cartoon directed by "Ben Jones".
schema_links:
List all cartoon directed by "Ben Jones". | cartoon : cartoon.directed_by ( Ben Jones ) , cartoon.title , cartoon.id , cartoon.written_by , cartoon.channel , cartoon.* | tv_series : tv_series.episode , tv_series.id , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql and SQL generation:
select _ from _ where _ | select cartoon.title from cartoon where cartoon.directed_by = "Ben Jones"
SQL = SELECT title FROM cartoon WHERE directed_by = "Ben Jones"
natsql:
select _ from _ where _ | select cartoon.title from cartoon where cartoon.directed_by = "Ben Jones"

SQL:
SELECT title FROM cartoon WHERE directed_by = "Ben Jones"
self correction:
SELECT cartoon.title FROM cartoon JOIN TV_Channel ON cartoon.Channel = TV_Channel.id WHERE cartoon.directed_by = "Ben Jones"

index is 588
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";
What are the names of all cartoons directed by Ben Jones?
schema_links:
What are the names of all cartoons directed by Ben Jones? | cartoon : cartoon.directed_by ( Ben Jones ) , cartoon.title , cartoon.id , cartoon.channel , cartoon.written_by , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql and SQL generation:
select _ from _ where _ = _ | select cartoon.title from cartoon where cartoon.directed_by = "Ben Jones"
SQL = SELECT title FROM cartoon WHERE directed_by = "Ben Jones"
natsql:
select _ from _ where _ = _ | select cartoon.title from cartoon where cartoon.directed_by = "Ben Jones"

SQL:
SELECT title FROM cartoon WHERE directed_by = "Ben Jones"
self correction:
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones"

index is 589
SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
How many cartoons were written by "Joseph Kuhr"?
schema_links:
How many cartoons were written by "Joseph Kuhr"? | cartoon : cartoon.written_by ( Joseph Kuhr ) , cartoon.title , cartoon.id , cartoon.channel , cartoon.directed_by , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql and SQL generation:
select count ( _ ) from _ where _ | select count ( cartoon.title ) from cartoon where cartoon.written_by = "Joseph Kuhr"
SQL = SELECT count(title) FROM cartoon WHERE written_by = 'Joseph Kuhr'
natsql:
select count ( _ ) from _ where _ | select count ( cartoon.title ) from cartoon where cartoon.written_by = "Joseph Kuhr"

SQL:
SELECT count(title) FROM cartoon WHERE written_by = 'Joseph Kuhr'
self correction:
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'

index is 590
SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
What is the number of cartoones written by Joseph Kuhr?
schema_links:
What is the number of cartoones written by Joseph Kuhr? | cartoon : cartoon.written_by ( Joseph Kuhr ) , cartoon.title , cartoon.id , cartoon.channel , cartoon.directed_by , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql and SQL generation:
select count ( _ ) from _ where _ = 'Joseph Kuhr' | select count ( cartoon.title ) from cartoon where cartoon.written_by = 'Joseph Kuhr'
SQL = SELECT count(*) FROM cartoon WHERE written_by = 'Joseph Kuhr'
natsql:
select count ( _ ) from _ where _ = 'Joseph Kuhr' | select count ( cartoon.title ) from cartoon where cartoon.written_by = 'Joseph Kuhr'

SQL:
SELECT count(*) FROM cartoon WHERE written_by = 'Joseph Kuhr'
self correction:
SELECT count(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'

index is 591
SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date
list all cartoon titles and their directors ordered by their air date
schema_links:
list all cartoon titles and their directors ordered by their air date | cartoon : cartoon.directed_by , cartoon.original_air_date , cartoon.title , cartoon.id , cartoon.written_by , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql and SQL generation:
select _ , _ from _ order by _ | select cartoon.title , cartoon.directed_by from cartoon order by cartoon.original_air_date
SQL = SELECT title ,  directed_by FROM cartoon ORDER BY original_air_date
natsql:
select _ , _ from _ order by _ | select cartoon.title , cartoon.directed_by from cartoon order by cartoon.original_air_date

SQL:
SELECT title ,  directed_by FROM cartoon ORDER BY original_air_date
self correction:
SELECT cartoon.title, cartoon.directed_by FROM cartoon JOIN TV_Channel ON cartoon.channel = TV_Channel.id ORDER BY cartoon.original_air_date;

index is 592
SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date
What is the name and directors of all the cartoons that are ordered by air date?
schema_links:
What is the name and directors of all the cartoons that are ordered by air date? | cartoon : cartoon.directed_by , cartoon.original_air_date , cartoon.title , cartoon.id , cartoon.channel , cartoon.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql and SQL generation:
select _ , _ from _ order by _ | select cartoon.title , cartoon.directed_by from cartoon order by cartoon.original_air_date
SQL = SELECT title , directed_by FROM Cartoon ORDER BY original_air_date
natsql:
select _ , _ from _ order by _ | select cartoon.title , cartoon.directed_by from cartoon order by cartoon.original_air_date

SQL:
SELECT title , directed_by FROM Cartoon ORDER BY original_air_date
self correction:
SELECT title, directed_by  FROM Cartoon  ORDER BY Original_air_date

index is 593
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
List the title of all cartoon directed by "Ben Jones" or "Brandon Vietti".
schema_links:
List the title of all cartoon directed by "Ben Jones" or "Brandon Vietti". | cartoon : cartoon.directed_by ( Ben Jones , Brandon Vietti ) , cartoon.title , cartoon.id , cartoon.channel , cartoon.written_by , cartoon.* | tv_series : tv_series.episode , tv_series.id , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql and SQL generation:
select _ from _ where _ = _ or _ = _ | select cartoon.title from cartoon where cartoon.directed_by = 'Ben Jones' or cartoon.directed_by = 'Brandon Vietti'
SQL = SELECT title FROM Cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti'
natsql:
select _ from _ where _ = _ or _ = _ | select cartoon.title from cartoon where cartoon.directed_by = 'Ben Jones' or cartoon.directed_by = 'Brandon Vietti'

SQL:
SELECT title FROM Cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Brandon Vietti'
self correction:
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'

index is 594
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?
schema_links:
What are the titles of all cartoons directed by Ben Jones or Brandon Vietti? | cartoon : cartoon.directed_by ( Ben Jones , Brandon Vietti ) , cartoon.title , cartoon.id , cartoon.channel , cartoon.written_by , cartoon.* | tv_series : tv_series.episode , tv_series.id , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql and SQL generation:
select _ from _ where _ in ( _ , _ ) | select cartoon.title from cartoon where cartoon.directed_by in ( 'Ben Jones' , 'Brandon Vietti' )
SQL = SELECT title FROM cartoon WHERE directed_by IN ('Ben Jones', 'Brandon Vietti')
natsql:
select _ from _ where _ in ( _ , _ ) | select cartoon.title from cartoon where cartoon.directed_by in ( 'Ben Jones' , 'Brandon Vietti' )

SQL:
SELECT title FROM cartoon WHERE directed_by IN ('Ben Jones', 'Brandon Vietti')
self correction:
SELECT title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti')

index is 595
SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;
Which country has the most of TV Channels? List the country and number of TV Channels it has.
schema_links:
Which country has the most of TV Channels? List the country and number of TV Channels it has. | tv_channel : tv_channel.country , tv_channel.id , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ order by count ( _ ) desc limit _ | select tv_channel.country , count ( tv_channel.* ) from tv_channel group by tv_channel.country order by count ( tv_channel.* ) desc limit 1
SQL = SELECT country ,  count(*) FROM tv_channel GROUP BY country ORDER BY count(*) DESC LIMIT 1
natsql:
select _ , count ( _ ) from _ group by _ order by count ( _ ) desc limit _ | select tv_channel.country , count ( tv_channel.* ) from tv_channel group by tv_channel.country order by count ( tv_channel.* ) desc limit 1

SQL:
SELECT country ,  count(*) FROM tv_channel GROUP BY country ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT TV_Channel.Country, COUNT(*) AS num_channels FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY num_channels DESC LIMIT 1

index is 596
SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;
What is the country with the most number of TV Channels and how many does it have?
schema_links:
What is the country with the most number of TV Channels and how many does it have? | tv_channel : tv_channel.country , tv_channel.id , tv_channel.content , tv_channel.language , tv_channel.series_name , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ , count ( * ) from _ group by _ order by count ( * ) desc limit _ | select tv_channel.country , count ( * ) from tv_channel group by tv_channel.country order by count ( * ) desc limit 1
SQL = SELECT country ,  count(*) FROM tv_channel GROUP BY country ORDER BY count(*) DESC LIMIT 1
natsql:
select _ , count ( * ) from _ group by _ order by count ( * ) desc limit _ | select tv_channel.country , count ( * ) from tv_channel group by tv_channel.country order by count ( * ) desc limit 1

SQL:
SELECT country ,  count(*) FROM tv_channel GROUP BY country ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT TV_Channel.Country, COUNT(*) AS channel_count FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY channel_count DESC LIMIT 1

index is 597
SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;
List the number of different series names and contents in the TV Channel table.
schema_links:
List the number of different series names and contents in the TV Channel table. | tv_channel : tv_channel.series_name , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.episode , tv_series.id , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select count ( distinct _ ) , count ( distinct _ ) from _
SQL = SELECT COUNT(DISTINCT series_name) , COUNT(DISTINCT content) FROM TV_Channel
natsql:
select count ( distinct _ ) , count ( distinct _ ) from _

SQL:
SELECT COUNT(DISTINCT series_name) , COUNT(DISTINCT content) FROM TV_Channel
self correction:
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel

index is 598
SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;
How many different series and contents are listed in the TV Channel table?
schema_links:
How many different series and contents are listed in the TV Channel table? | tv_channel : tv_channel.content , tv_channel.series_name , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.air_date , tv_series.share , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select count ( distinct _ ) , count ( distinct _ ) from _
SQL = SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel
natsql:
select count ( distinct _ ) , count ( distinct _ ) from _

SQL:
SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel
self correction:
SELECT count(DISTINCT series_name), count(DISTINCT Content) FROM TV_Channel

index is 599
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
What is the content of TV Channel with serial name "Sky Radio"?
schema_links:
What is the content of TV Channel with serial name "Sky Radio"? | tv_channel : tv_channel.series_name ( Sky Radio ) , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.episode , tv_series.id , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ from _ where _ = _ | select tv_channel.content from tv_channel where tv_channel.series_name = "Sky Radio"
SQL = SELECT content FROM tv_channel WHERE series_name = "Sky Radio"
natsql:
select _ from _ where _ = _ | select tv_channel.content from tv_channel where tv_channel.series_name = "Sky Radio"

SQL:
SELECT content FROM tv_channel WHERE series_name = "Sky Radio"
self correction:
SELECT content FROM TV_Channel WHERE series_name = "Sky Radio"

index is 600
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
What is the content of the series Sky Radio?
schema_links:
What is the content of the series Sky Radio? | tv_channel : tv_channel.series_name ( Sky Radio ) , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.episode , tv_series.id , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ from _ where @.@ = _ | select tv_channel.content from tv_channel where tv_channel.series_name = 'Sky Radio'
SQL = SELECT content FROM tv_channel WHERE series_name = 'Sky Radio'
natsql:
select _ from _ where @.@ = _ | select tv_channel.content from tv_channel where tv_channel.series_name = 'Sky Radio'

SQL:
SELECT content FROM tv_channel WHERE series_name = 'Sky Radio'
self correction:
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'

index is 601
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
What is the Package Option of TV Channel with serial name "Sky Radio"?
schema_links:
What is the Package Option of TV Channel with serial name "Sky Radio"? | tv_channel : tv_channel.series_name ( Sky Radio ) , tv_channel.package_option ( Option ) , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ from _ where @.@ = _ | select tv_channel.package_option from tv_channel where tv_channel.series_name = "Sky Radio"
SQL = SELECT package_option FROM tv_channel WHERE series_name = "Sky Radio"
natsql:
select _ from _ where @.@ = _ | select tv_channel.package_option from tv_channel where tv_channel.series_name = "Sky Radio"

SQL:
SELECT package_option FROM tv_channel WHERE series_name = "Sky Radio"
self correction:
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio"

index is 602
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
What are the Package Options of the TV Channels whose series names are Sky Radio?
schema_links:
What are the Package Options of the TV Channels whose series names are Sky Radio? | tv_channel : tv_channel.series_name ( Sky Radio ) , tv_channel.package_option ( Option ) , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.* | tv_series : tv_series.rating , tv_series.id , tv_series.episode , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ from _ where _ = _ | select tv_channel.package_option from tv_channel where tv_channel.series_name = 'Sky Radio'
SQL = SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio'
natsql:
select _ from _ where _ = _ | select tv_channel.package_option from tv_channel where tv_channel.series_name = 'Sky Radio'

SQL:
SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio'
self correction:
SELECT Package_Option FROM TV_Channel  JOIN TV_series ON TV_series.Channel = TV_Channel.id  WHERE TV_Channel.series_name = 'Sky Radio'

index is 603
SELECT count(*) FROM TV_Channel WHERE LANGUAGE = "English";
How many TV Channel using language English?
schema_links:
How many TV Channel using language English? | tv_channel : tv_channel.language ( English ) , tv_channel.id , tv_channel.country , tv_channel.content , tv_channel.series_name , tv_channel.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select count ( distinct _ ) from _ where _ = _ | select count ( distinct tv_channel.id ) from tv_channel where tv_channel.language = 'English'
SQL = SELECT COUNT(DISTINCT id) FROM TV_Channel WHERE Language = 'English'
natsql:
select count ( distinct _ ) from _ where _ = _ | select count ( distinct tv_channel.id ) from tv_channel where tv_channel.language = 'English'

SQL:
SELECT COUNT(DISTINCT id) FROM TV_Channel WHERE Language = 'English'
self correction:
SELECT COUNT(DISTINCT id) FROM TV_Channel WHERE Language = 'English'

index is 604
SELECT count(*) FROM TV_Channel WHERE LANGUAGE = "English";
How many TV Channels use the English language?
schema_links:
How many TV Channels use the English language? | tv_channel : tv_channel.language ( English ) , tv_channel.id , tv_channel.country , tv_channel.content , tv_channel.series_name , tv_channel.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select count ( _ ) from _ where _ | select count ( * ) from tv_channel where language = 'English'
SQL = SELECT count(*) FROM TV_Channel WHERE Language = 'English'
natsql:
select count ( _ ) from _ where _ | select count ( * ) from tv_channel where language = 'English'

SQL:
SELECT count(*) FROM TV_Channel WHERE Language = 'English'
self correction:
SELECT count(*) FROM TV_Channel WHERE Language = 'English'

index is 605
SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
List the language used least number of TV Channel. List language and number of TV Channel.
schema_links:
List the language used least number of TV Channel. List language and number of TV Channel. | tv_channel : tv_channel.language , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.series_name , tv_channel.* | tv_series : tv_series.rating , tv_series.id , tv_series.episode , tv_series.air_date , tv_series.share , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ , count ( * ) from _ group by _ order by count ( * ) asc limit _ | select tv_channel.language , count ( * ) from tv_channel group by tv_channel.language order by count ( * ) asc
SQL = SELECT language , count(*) FROM tv_channel GROUP BY language ORDER BY count(*) ASC
natsql:
select _ , count ( * ) from _ group by _ order by count ( * ) asc limit _ | select tv_channel.language , count ( * ) from tv_channel group by tv_channel.language order by count ( * ) asc

SQL:
SELECT language , count(*) FROM tv_channel GROUP BY language ORDER BY count(*) ASC
self correction:
SELECT TV_Channel.Language, COUNT(*) AS num_of_channels FROM TV_Channel GROUP BY TV_Channel.Language ORDER BY num_of_channels ASC;

index is 606
SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
What are the languages used by the least number of TV Channels and how many channels use it?
schema_links:
What are the languages used by the least number of TV Channels and how many channels use it? | tv_channel : tv_channel.language , tv_channel.id , tv_channel.country , tv_channel.content , tv_channel.series_name , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ order by count ( _ ) asc limit _ | select tv_channel.language , count ( tv_channel.* ) from tv_channel group by tv_channel.language order by count ( tv_channel.* ) asc limit 1
SQL = SELECT language ,  COUNT(*) FROM tv_channel GROUP BY language ORDER BY COUNT(*) ASC LIMIT 1
natsql:
select _ , count ( _ ) from _ group by _ order by count ( _ ) asc limit _ | select tv_channel.language , count ( tv_channel.* ) from tv_channel group by tv_channel.language order by count ( tv_channel.* ) asc limit 1

SQL:
SELECT language ,  COUNT(*) FROM tv_channel GROUP BY language ORDER BY COUNT(*) ASC LIMIT 1
self correction:
SELECT tv_channel.language, COUNT(*) AS channel_count FROM tv_channel GROUP BY tv_channel.language ORDER BY channel_count ASC LIMIT 1

index is 607
SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE
List each language and the number of TV Channels using it.
schema_links:
List each language and the number of TV Channels using it. | tv_channel : tv_channel.language , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.series_name , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ , count ( * ) from _ group by _ | select tv_channel.language , count ( * ) from tv_channel group by tv_channel.language
SQL = SELECT language , count(*) FROM tv_channel GROUP BY language
natsql:
select _ , count ( * ) from _ group by _ | select tv_channel.language , count ( * ) from tv_channel group by tv_channel.language

SQL:
SELECT language , count(*) FROM tv_channel GROUP BY language
self correction:
SELECT TV_Channel.Language, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY TV_Channel.Language

index is 608
SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE
For each language, list the number of TV Channels that use it.
schema_links:
For each language, list the number of TV Channels that use it. | tv_channel : tv_channel.language , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.series_name , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select tv_channel.language , count ( tv_channel.* ) from tv_channel group by tv_channel.language
SQL = SELECT language , COUNT(*) FROM tv_channel GROUP BY language
natsql:
select _ , count ( _ ) from _ group by _ | select tv_channel.language , count ( tv_channel.* ) from tv_channel group by tv_channel.language

SQL:
SELECT language , COUNT(*) FROM tv_channel GROUP BY language
self correction:
SELECT TV_Channel.Language, COUNT(*) FROM TV_Channel GROUP BY TV_Channel.Language

index is 609
SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!";
What is the TV Channel that shows the cartoon "The Rise of the Blue Beetle!"? List the TV Channel's series name.
schema_links:
What is the TV Channel that shows the cartoon "The Rise of the Blue Beetle!"? List the TV Channel's series name. | tv_channel : tv_channel.series_name , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | cartoon : cartoon.title ( The Rise of the Blue Beetle! ) , cartoon.channel , cartoon.id , cartoon.directed_by , cartoon.written_by , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.channel , tv_series.air_date , tv_series.*
natsql and SQL generation:
select _ from _ where _ = _ | select tv_channel.series_name from tv_channel where cartoon.title = "The Rise of the Blue Beetle!"
SQL = SELECT series_name FROM TV_Channel WHERE Cartoon.title = "The Rise of the Blue Beetle!"
natsql:
select _ from _ where _ = _ | select tv_channel.series_name from tv_channel where cartoon.title = "The Rise of the Blue Beetle!"

SQL:
SELECT series_name FROM TV_Channel WHERE Cartoon.title = "The Rise of the Blue Beetle!"
self correction:
SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = "The Rise of the Blue Beetle!";

index is 610
SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!";
What is the series name of the TV Channel that shows the cartoon "The Rise of the Blue Beetle"?
schema_links:
What is the series name of the TV Channel that shows the cartoon "The Rise of the Blue Beetle"? | tv_channel : tv_channel.series_name , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | cartoon : cartoon.title ( The Rise of the Blue Beetle! ) , cartoon.channel , cartoon.id , cartoon.directed_by , cartoon.written_by , cartoon.* | tv_series : tv_series.episode , tv_series.channel , tv_series.id , tv_series.rating , tv_series.air_date , tv_series.*
natsql and SQL generation:
select _ from _ where _ = "The Rise of the Blue Beetle" | select tv_channel.series_name from tv_channel where tv_channel.id = (select cartoon.channel from cartoon where cartoon.title = "The Rise of the Blue Beetle")
SQL = SELECT series_name FROM tv_channel WHERE id = (SELECT channel FROM cartoon WHERE title = "The Rise of the Blue Beetle")
natsql:
select _ from _ where _ = "The Rise of the Blue Beetle" | select tv_channel.series_name from tv_channel where tv_channel.id = (select cartoon.channel from cartoon where cartoon.title = "The Rise of the Blue Beetle")

SQL:
SELECT series_name FROM tv_channel WHERE id = (SELECT channel FROM cartoon WHERE title = "The Rise of the Blue Beetle")
self correction:
SELECT series_name  FROM TV_Channel  JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = "The Rise of the Blue Beetle"

index is 611
SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
List the title of all  Cartoons showed on TV Channel with series name "Sky Radio".
schema_links:
List the title of all  Cartoons showed on TV Channel with series name "Sky Radio". | tv_channel : tv_channel.series_name ( Sky Radio ) , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | cartoon : cartoon.title , cartoon.channel , cartoon.id , cartoon.production_code , cartoon.directed_by , cartoon.* | tv_series : tv_series.episode , tv_series.id , tv_series.rating , tv_series.share , tv_series.channel , tv_series.*
natsql and SQL generation:
select _ from _ where _ = "Sky Radio" | select cartoon.title from cartoon join tv_channel on cartoon.channel = tv_channel.id where tv_channel.series_name = "Sky Radio"
SQL = SELECT title FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE tv_channel.series_name = "Sky Radio"
natsql:
select _ from _ where _ = "Sky Radio" | select cartoon.title from cartoon join tv_channel on cartoon.channel = tv_channel.id where tv_channel.series_name = "Sky Radio"

SQL:
SELECT title FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE tv_channel.series_name = "Sky Radio"
self correction:
SELECT cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"

index is 612
SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
What is the title of all the cartools that are on the TV Channel with the series name "Sky Radio"?
schema_links:
What is the title of all the cartools that are on the TV Channel with the series name "Sky Radio"? | tv_channel : tv_channel.series_name ( Sky Radio ) , tv_channel.content , tv_channel.id , tv_channel.language , tv_channel.country , tv_channel.* | cartoon : cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.directed_by , cartoon.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.air_date , tv_series.share , tv_series.*
natsql and SQL generation:
select _ from _ where @.@ = "Sky Radio" | select cartoon.title from cartoon where cartoon.channel = (select id from tv_channel where tv_channel.series_name = "Sky Radio")
SQL = SELECT title FROM cartoon WHERE channel = (SELECT id FROM tv_channel WHERE series_name = "Sky Radio")
natsql:
select _ from _ where @.@ = "Sky Radio" | select cartoon.title from cartoon where cartoon.channel = (select id from tv_channel where tv_channel.series_name = "Sky Radio")

SQL:
SELECT title FROM cartoon WHERE channel = (SELECT id FROM tv_channel WHERE series_name = "Sky Radio")
self correction:
SELECT Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"

index is 613
SELECT Episode FROM TV_series ORDER BY rating
List the Episode of all TV series sorted by rating.
schema_links:
List the Episode of all TV series sorted by rating. | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ from _ order by _ | select tv_series.episode from tv_series order by tv_series.rating
SQL = SELECT episode FROM tv_series ORDER BY rating
natsql:
select _ from _ order by _ | select tv_series.episode from tv_series order by tv_series.rating

SQL:
SELECT episode FROM tv_series ORDER BY rating
self correction:
SELECT TV_series.Episode FROM TV_series ORDER BY TV_series.Rating

index is 614
SELECT Episode FROM TV_series ORDER BY rating
What are all of the episodes ordered by ratings?
schema_links:
What are all of the episodes ordered by ratings? | tv_series : tv_series.episode , tv_series.rating , tv_series.channel , tv_series.id , tv_series.air_date , tv_series.* | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ from _ order by _ | select cartoon.title from cartoon order by cartoon.rating
SQL = SELECT title FROM cartoon ORDER BY rating
natsql:
select _ from _ order by _ | select cartoon.title from cartoon order by cartoon.rating

SQL:
SELECT title FROM cartoon ORDER BY rating
self correction:
SELECT TV_series.Episode  FROM TV_series  JOIN Cartoon ON TV_series.id = Cartoon.id  ORDER BY TV_series.Rating

index is 615
SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
List top 3 highest Rating  TV series. List the TV series's Episode and Rating.
schema_links:
List top 3 highest Rating  TV series. List the TV series's Episode and Rating. | tv_series : tv_series.rating , tv_series.episode , tv_series.id , tv_series.air_date , tv_series.share , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ , _ from _ order by _ desc limit _ | select tv_series.episode , tv_series.rating from tv_series order by tv_series.rating desc limit 3
SQL = SELECT episode , rating FROM tv_series ORDER BY rating DESC LIMIT 3
natsql:
select _ , _ from _ order by _ desc limit _ | select tv_series.episode , tv_series.rating from tv_series order by tv_series.rating desc limit 3

SQL:
SELECT episode , rating FROM tv_series ORDER BY rating DESC LIMIT 3
self correction:
SELECT tv_series.Episode, tv_series.Rating  FROM tv_series  ORDER BY tv_series.Rating DESC  LIMIT 3

index is 616
SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
What are 3 most highly rated episodes in the TV series table and what were those ratings?
schema_links:
What are 3 most highly rated episodes in the TV series table and what were those ratings? | tv_series : tv_series.rating , tv_series.episode , tv_series.id , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ , _ from _ order by _ desc limit _ | select tv_series.episode , tv_series.rating from tv_series order by tv_series.rating desc limit 3
SQL = SELECT episode , rating FROM tv_series ORDER BY rating DESC LIMIT 3
natsql:
select _ , _ from _ order by _ desc limit _ | select tv_series.episode , tv_series.rating from tv_series order by tv_series.rating desc limit 3

SQL:
SELECT episode , rating FROM tv_series ORDER BY rating DESC LIMIT 3
self correction:
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3

index is 617
SELECT max(SHARE) , min(SHARE) FROM TV_series;
What is minimum and maximum share of TV series?
schema_links:
What is minimum and maximum share of TV series? | tv_series : tv_series.share , tv_series.episode , tv_series.rating , tv_series.id , tv_series.18_49_rating_share , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql and SQL generation:
select min ( _ ) , max ( _ ) from _ | select min(tv_series.share) , max(tv_series.share) from tv_series
SQL = SELECT min(share) , max(share) FROM tv_series
natsql:
select min ( _ ) , max ( _ ) from _ | select min(tv_series.share) , max(tv_series.share) from tv_series

SQL:
SELECT min(share) , max(share) FROM tv_series
self correction:
SELECT MIN(Share), MAX(Share) FROM TV_series

index is 618
SELECT max(SHARE) , min(SHARE) FROM TV_series;
What is the maximum and minimum share for the TV series?
schema_links:
What is the maximum and minimum share for the TV series? | tv_series : tv_series.share , tv_series.episode , tv_series.18_49_rating_share , tv_series.id , tv_series.rating , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.* | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.*
natsql and SQL generation:
select max ( _ ) , min ( _ ) from _ | select max ( tv_series.share ) , min ( tv_series.share ) from tv_series
SQL = SELECT max(share) , min(share) FROM TV_series
natsql:
select max ( _ ) , min ( _ ) from _ | select max ( tv_series.share ) , min ( tv_series.share ) from tv_series

SQL:
SELECT max(share) , min(share) FROM TV_series
self correction:
SELECT MAX(Share), MIN(Share) FROM TV_series

index is 619
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
What is the air date of TV series with Episode "A Love of a Lifetime"?
schema_links:
What is the air date of TV series with Episode "A Love of a Lifetime"? | tv_series : tv_series.episode ( A Love of a Lifetime ) , tv_series.air_date , tv_series.rating , tv_series.id , tv_series.share , tv_series.* | cartoon : cartoon.title , cartoon.id , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql and SQL generation:
select _ from _ where _ = "A Love of a Lifetime" | select tv_series.air_date from tv_series where tv_series.episode = "A Love of a Lifetime"
SQL = SELECT air_date FROM tv_series WHERE episode = "A Love of a Lifetime"
natsql:
select _ from _ where _ = "A Love of a Lifetime" | select tv_series.air_date from tv_series where tv_series.episode = "A Love of a Lifetime"

SQL:
SELECT air_date FROM tv_series WHERE episode = "A Love of a Lifetime"
self correction:
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime"

index is 620
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
When did the episode "A Love of a Lifetime" air?
schema_links:
When did the episode "A Love of a Lifetime" air? | tv_series : tv_series.episode ( A Love of a Lifetime ) , tv_series.air_date , tv_series.rating , tv_series.id , tv_series.share , tv_series.* | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ from _ where _ | select tv_series.air_date from tv_series where tv_series.episode = "A Love of a Lifetime"
SQL = SELECT air_date FROM tv_series WHERE episode = "A Love of a Lifetime"
natsql:
select _ from _ where _ | select tv_series.air_date from tv_series where tv_series.episode = "A Love of a Lifetime"

SQL:
SELECT air_date FROM tv_series WHERE episode = "A Love of a Lifetime"
self correction:
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime"

index is 621
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
What is Weekly Rank of TV series with Episode "A Love of a Lifetime"?
schema_links:
What is Weekly Rank of TV series with Episode "A Love of a Lifetime"? | tv_series : tv_series.episode ( A Love of a Lifetime ) , tv_series.weekly_rank , tv_series.rating , tv_series.id , tv_series.share , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ from _ where _ = _ | select tv_series.weekly_rank from tv_series where tv_series.episode = "A Love of a Lifetime"
SQL = SELECT weekly_rank FROM tv_series WHERE episode = "A Love of a Lifetime"
natsql:
select _ from _ where _ = _ | select tv_series.weekly_rank from tv_series where tv_series.episode = "A Love of a Lifetime"

SQL:
SELECT weekly_rank FROM tv_series WHERE episode = "A Love of a Lifetime"
self correction:
SELECT weekly_rank FROM TV_series WHERE Episode = "A Love of a Lifetime"

index is 622
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
What is the weekly rank for the episode "A Love of a Lifetime"?
schema_links:
What is the weekly rank for the episode "A Love of a Lifetime"? | tv_series : tv_series.episode ( A Love of a Lifetime ) , tv_series.weekly_rank , tv_series.rating , tv_series.id , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ from _ where _ = "A Love of a Lifetime" | select tv_series.weekly_rank from tv_series where tv_series.episode = "A Love of a Lifetime"
SQL = SELECT weekly_rank FROM tv_series WHERE episode = "A Love of a Lifetime"
natsql:
select _ from _ where _ = "A Love of a Lifetime" | select tv_series.weekly_rank from tv_series where tv_series.episode = "A Love of a Lifetime"

SQL:
SELECT weekly_rank FROM tv_series WHERE episode = "A Love of a Lifetime"
self correction:
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime"

index is 623
SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";
What is the TV Channel of TV series with Episode "A Love of a Lifetime"? List the TV Channel's series name.
schema_links:
What is the TV Channel of TV series with Episode "A Love of a Lifetime"? List the TV Channel's series name. | tv_channel : tv_channel.series_name , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.episode ( A Love of a Lifetime ) , tv_series.channel , tv_series.rating , tv_series.id , tv_series.share , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ from _ where _ ( "A Love of a Lifetime" ) | select tv_channel.series_name from tv_channel where tv_series.episode = "A Love of a Lifetime"
SQL = SELECT series_name FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_series.episode = 'A Love of a Lifetime'
natsql:
select _ from _ where _ ( "A Love of a Lifetime" ) | select tv_channel.series_name from tv_channel where tv_series.episode = "A Love of a Lifetime"

SQL:
SELECT series_name FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel WHERE tv_series.episode = 'A Love of a Lifetime'
self correction:
SELECT TV_Channel.series_name  FROM TV_Channel  JOIN TV_series ON TV_Channel.id = TV_series.Channel  WHERE TV_series.Episode = 'A Love of a Lifetime'

index is 624
SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";
What is the name of the series that has the episode "A Love of a Lifetime"?
schema_links:
What is the name of the series that has the episode "A Love of a Lifetime"? | tv_series : tv_series.episode ( A Love of a Lifetime ) , tv_series.rating , tv_series.id , tv_series.channel , tv_series.share , tv_series.* | tv_channel : tv_channel.series_name , tv_channel.id , tv_channel.language , tv_channel.content , tv_channel.country , tv_channel.* | cartoon : cartoon.title , cartoon.id , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ from _ where _ = "A Love of a Lifetime" | select cartoon.title from cartoon where cartoon.episode = "A Love of a Lifetime"
SQL = SELECT title FROM cartoon WHERE episode = "A Love of a Lifetime"
natsql:
select _ from _ where _ = "A Love of a Lifetime" | select cartoon.title from cartoon where cartoon.episode = "A Love of a Lifetime"

SQL:
SELECT title FROM cartoon WHERE episode = "A Love of a Lifetime"
self correction:
SELECT title FROM cartoon JOIN tv_series ON cartoon.channel = tv_series.channel WHERE tv_series.episode = "A Love of a Lifetime"

index is 625
SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
List the Episode of all  TV series showed on TV Channel with series name "Sky Radio".
schema_links:
List the Episode of all  TV series showed on TV Channel with series name "Sky Radio". | tv_channel : tv_channel.series_name ( Sky Radio ) , tv_channel.id , tv_channel.content , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.episode , tv_series.id , tv_series.rating , tv_series.channel , tv_series.share , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ from _ where @.@ = _ | select tv_series.episode from tv_series where tv_series.channel = (select tv_channel.id from tv_channel where tv_channel.series_name = "Sky Radio")
SQL = SELECT episode FROM tv_series WHERE channel  =  (SELECT id FROM tv_channel WHERE series_name  =  "Sky Radio")
natsql:
select _ from _ where @.@ = _ | select tv_series.episode from tv_series where tv_series.channel = (select tv_channel.id from tv_channel where tv_channel.series_name = "Sky Radio")

SQL:
SELECT episode FROM tv_series WHERE channel  =  (SELECT id FROM tv_channel WHERE series_name  =  "Sky Radio")
self correction:
SELECT Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"

index is 626
SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
What is the episode for the TV series named "Sky Radio"?
schema_links:
What is the episode for the TV series named "Sky Radio"? | tv_channel : tv_channel.series_name ( Sky Radio ) , tv_channel.content , tv_channel.language , tv_channel.id , tv_channel.country , tv_channel.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.air_date , tv_series.share , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ from _ where _ = "Sky Radio" | select tv_series.episode from tv_series where tv_channel.series_name = "Sky Radio"
SQL = SELECT episode FROM tv_series WHERE id  =  (SELECT id FROM tv_channel WHERE series_name = "Sky Radio")
natsql:
select _ from _ where _ = "Sky Radio" | select tv_series.episode from tv_series where tv_channel.series_name = "Sky Radio"

SQL:
SELECT episode FROM tv_series WHERE id  =  (SELECT id FROM tv_channel WHERE series_name = "Sky Radio")
self correction:
SELECT Episode FROM TV_series WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = "Sky Radio")

index is 627
SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by
Find the number of cartoons directed by each of the listed directors.
schema_links:
Find the number of cartoons directed by each of the listed directors. | cartoon : cartoon.directed_by , cartoon.title , cartoon.id , cartoon.production_code , cartoon.channel , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select cartoon.directed_by , count ( cartoon.* ) from cartoon group by cartoon.directed_by
SQL = SELECT directed_by , count(*) FROM cartoon GROUP BY directed_by
natsql:
select _ , count ( _ ) from _ group by _ | select cartoon.directed_by , count ( cartoon.* ) from cartoon group by cartoon.directed_by

SQL:
SELECT directed_by , count(*) FROM cartoon GROUP BY directed_by
self correction:
SELECT directed_by, COUNT(*) AS cartoon_count FROM Cartoon GROUP BY directed_by

index is 628
SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by
How many cartoons did each director create?
schema_links:
How many cartoons did each director create? | cartoon : cartoon.directed_by , cartoon.title , cartoon.id , cartoon.production_code , cartoon.channel , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select cartoon.directed_by , count ( cartoon.* ) from cartoon group by cartoon.directed_by
SQL = SELECT directed_by ,  COUNT(*) FROM cartoon GROUP BY directed_by
natsql:
select _ , count ( _ ) from _ group by _ | select cartoon.directed_by , count ( cartoon.* ) from cartoon group by cartoon.directed_by

SQL:
SELECT directed_by ,  COUNT(*) FROM cartoon GROUP BY directed_by
self correction:
SELECT directed_by, COUNT(*)  FROM Cartoon  GROUP BY directed_by

index is 629
select production_code ,  channel from cartoon order by original_air_date desc limit 1
Find the production code and channel of the most recently aired cartoon .
schema_links:
Find the production code and channel of the most recently aired cartoon . | cartoon : cartoon.production_code , cartoon.original_air_date , cartoon.channel , cartoon.title , cartoon.id , cartoon.* | tv_series : tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.id , tv_series.share , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql and SQL generation:
select _ , _ from _ order by _ desc limit _ | select cartoon.production_code , cartoon.channel from cartoon order by cartoon.original_air_date desc limit 1
SQL = SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1
natsql:
select _ , _ from _ order by _ desc limit _ | select cartoon.production_code , cartoon.channel from cartoon order by cartoon.original_air_date desc limit 1

SQL:
SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1
self correction:
SELECT cartoon.production_code, tv_channel.series_name  FROM cartoon  JOIN tv_channel ON cartoon.channel = tv_channel.id  ORDER BY cartoon.original_air_date DESC  LIMIT 1

index is 630
select production_code ,  channel from cartoon order by original_air_date desc limit 1
What is the produdction code and channel of the most recent cartoon ?
schema_links:
What is the produdction code and channel of the most recent cartoon ? | cartoon : cartoon.production_code , cartoon.channel , cartoon.original_air_date , cartoon.title , cartoon.id , cartoon.* | tv_series : tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.id , tv_series.share , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql and SQL generation:
select _ , _ from _ order by _ desc limit _ | select cartoon.production_code , cartoon.channel from cartoon order by cartoon.original_air_date desc limit 1
SQL = SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1
natsql:
select _ , _ from _ order by _ desc limit _ | select cartoon.production_code , cartoon.channel from cartoon order by cartoon.original_air_date desc limit 1

SQL:
SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1
self correction:
SELECT cartoon.production_code, tv_channel.series_name FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id ORDER BY cartoon.original_air_date DESC LIMIT 1

index is 631
SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"
Find the package choice and series name of the TV channel that has high definition TV.
schema_links:
Find the package choice and series name of the TV channel that has high definition TV. | tv_channel : tv_channel.series_name , tv_channel.hight_definition_tv , tv_channel.package_option , tv_channel.content , tv_channel.id , tv_channel.* | tv_series : tv_series.rating , tv_series.id , tv_series.episode , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ , _ from _ where _ | select tv_channel.package_option , tv_channel.series_name from tv_channel where tv_channel.hight_definition_tv = True
SQL = SELECT package_option , series_name FROM tv_channel WHERE hight_definition_tv  =  True
natsql:
select _ , _ from _ where _ | select tv_channel.package_option , tv_channel.series_name from tv_channel where tv_channel.hight_definition_tv = True

SQL:
SELECT package_option , series_name FROM tv_channel WHERE hight_definition_tv  =  True
self correction:
SELECT package_option, series_name FROM TV_Channel WHERE High_definition_TV = 1

index is 632
SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"
What are the package options and the name of the series for the TV Channel that supports high definition TV?
schema_links:
What are the package options and the name of the series for the TV Channel that supports high definition TV? | tv_channel : tv_channel.package_option ( Option ) , tv_channel.series_name , tv_channel.hight_definition_tv , tv_channel.id , tv_channel.content , tv_channel.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ , _ from _ where @.@ = _ | select tv_channel.package_option , tv_series.series_name from tv_channel where tv_channel.hight_definition_tv = true
SQL = SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = true
natsql:
select _ , _ from _ where @.@ = _ | select tv_channel.package_option , tv_series.series_name from tv_channel where tv_channel.hight_definition_tv = true

SQL:
SELECT package_option, series_name FROM tv_channel WHERE hight_definition_tv = true
self correction:
SELECT package_option, series_name FROM TV_Channel WHERE High_definition_TV = true

index is 633
SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
which countries' tv channels are playing some cartoon written by Todd Casey?
schema_links:
which countries' tv channels are playing some cartoon written by Todd Casey? | tv_channel : tv_channel.country , tv_channel.content , tv_channel.language , tv_channel.id , tv_channel.series_name , tv_channel.* | cartoon : cartoon.written_by ( Todd Casey ) , cartoon.title , cartoon.channel , cartoon.id , cartoon.directed_by , cartoon.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.air_date , tv_series.share , tv_series.*
natsql and SQL generation:
select _ from _ where _ in ( select _ from _ where _ ) | select distinct tv_channel.country from tv_channel where tv_channel.id in ( select cartoon.channel from cartoon where cartoon.written_by = 'Todd Casey' )
SQL = SELECT DISTINCT country FROM tv_channel WHERE id IN (SELECT channel FROM cartoon WHERE written_by = 'Todd Casey')
natsql:
select _ from _ where _ in ( select _ from _ where _ ) | select distinct tv_channel.country from tv_channel where tv_channel.id in ( select cartoon.channel from cartoon where cartoon.written_by = 'Todd Casey' )

SQL:
SELECT DISTINCT country FROM tv_channel WHERE id IN (SELECT channel FROM cartoon WHERE written_by = 'Todd Casey')
self correction:
SELECT TV_Channel.Country FROM TV_Channel WHERE TV_Channel.id IN (     SELECT Cartoon.Channel     FROM Cartoon     WHERE Cartoon.Written_by = 'Todd Casey' )

index is 634
SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
What are the countries that have cartoons on TV that were written by Todd Casey?
schema_links:
What are the countries that have cartoons on TV that were written by Todd Casey? | cartoon : cartoon.written_by ( Todd Casey ) , cartoon.title , cartoon.id , cartoon.channel , cartoon.directed_by , cartoon.* | tv_channel : tv_channel.country , tv_channel.content , tv_channel.language , tv_channel.id , tv_channel.series_name , tv_channel.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.air_date , tv_series.share , tv_series.*
natsql and SQL generation:
select distinct @.@ from @ where @.@ = 'Todd Casey' | select distinct tv_channel.country from cartoon, tv_channel where cartoon.written_by = 'Todd Casey' and cartoon.channel = tv_channel.id
SQL = SELECT DISTINCT country FROM tv_channel WHERE id IN (SELECT channel FROM cartoon WHERE written_by = 'Todd Casey')
natsql:
select distinct @.@ from @ where @.@ = 'Todd Casey' | select distinct tv_channel.country from cartoon, tv_channel where cartoon.written_by = 'Todd Casey' and cartoon.channel = tv_channel.id

SQL:
SELECT DISTINCT country FROM tv_channel WHERE id IN (SELECT channel FROM cartoon WHERE written_by = 'Todd Casey')
self correction:
SELECT country FROM TV_Channel WHERE id IN (   SELECT Channel   FROM Cartoon   WHERE Written_by = 'Todd Casey' )

index is 635
SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
which countries' tv channels are not playing any cartoon written by Todd Casey?
schema_links:
which countries' tv channels are not playing any cartoon written by Todd Casey? | cartoon : cartoon.written_by ( Todd Casey ) , cartoon.title , cartoon.id , cartoon.channel , cartoon.directed_by , cartoon.* | tv_channel : tv_channel.country , tv_channel.content , tv_channel.language , tv_channel.id , tv_channel.series_name , tv_channel.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.air_date , tv_series.share , tv_series.*
natsql and SQL generation:
select distinct _ from _ where _ not in (select _ from _ where _ = _) | select distinct tv_channel.country from tv_channel where tv_channel.id not in (select cartoon.channel from cartoon where cartoon.written_by = 'Todd Casey')
SQL = SELECT DISTINCT country FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE written_by = 'Todd Casey')
natsql:
select distinct _ from _ where _ not in (select _ from _ where _ = _) | select distinct tv_channel.country from tv_channel where tv_channel.id not in (select cartoon.channel from cartoon where cartoon.written_by = 'Todd Casey')

SQL:
SELECT DISTINCT country FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE written_by = 'Todd Casey')
self correction:
SELECT DISTINCT Country  FROM TV_Channel  WHERE id NOT IN (   SELECT Channel    FROM Cartoon    WHERE Written_by = 'Todd Casey' )

index is 636
SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
What are the countries that are not playing cartoons written by Todd Casey?
schema_links:
What are the countries that are not playing cartoons written by Todd Casey? | cartoon : cartoon.written_by ( Todd Casey ) , cartoon.title , cartoon.channel , cartoon.id , cartoon.directed_by , cartoon.* | tv_channel : tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.id , tv_channel.series_name , tv_channel.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.air_date , tv_series.share , tv_series.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ where _ = _ ) | select distinct tv_channel.country from tv_channel where tv_channel.id not in ( select cartoon.channel from cartoon where cartoon.written_by = 'Todd Casey' )
SQL = SELECT DISTINCT country FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE written_by = 'Todd Casey')
natsql:
select _ from _ where _ not in ( select _ from _ where _ = _ ) | select distinct tv_channel.country from tv_channel where tv_channel.id not in ( select cartoon.channel from cartoon where cartoon.written_by = 'Todd Casey' )

SQL:
SELECT DISTINCT country FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE written_by = 'Todd Casey')
self correction:
SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')

index is 637
SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?
schema_links:
Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang? | tv_channel : tv_channel.series_name , tv_channel.country , tv_channel.id , tv_channel.language , tv_channel.content , tv_channel.* | cartoon : cartoon.directed_by ( Ben Jones , Michael Chang ) , cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.* | tv_series : tv_series.episode , tv_series.rating , tv_series.channel , tv_series.id , tv_series.air_date , tv_series.*
natsql and SQL generation:
select _ , _ from _ where _ and _ group by _ | select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones' and cartoon.directed_by = 'Michael Chang' group by tv_channel.series_name , tv_channel.country
SQL = SELECT series_name ,  country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by  =  'Ben Jones' AND Cartoon.Directed_by  =  'Michael Chang' GROUP BY series_name ,  country
natsql:
select _ , _ from _ where _ and _ group by _ | select tv_channel.series_name , tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = 'Ben Jones' and cartoon.directed_by = 'Michael Chang' group by tv_channel.series_name , tv_channel.country

SQL:
SELECT series_name ,  country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by  =  'Ben Jones' AND Cartoon.Directed_by  =  'Michael Chang' GROUP BY series_name ,  country
self correction:
SELECT series_name, country  FROM TV_Channel  JOIN Cartoon ON TV_Channel.id = Cartoon.Channel  WHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Michael Chang'  GROUP BY series_name, country

index is 638
SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?
schema_links:
What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang? | tv_channel : tv_channel.series_name , tv_channel.country , tv_channel.content , tv_channel.id , tv_channel.language , tv_channel.* | cartoon : cartoon.directed_by ( Ben Jones , Michael Chang ) , cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.channel , tv_series.air_date , tv_series.*
natsql and SQL generation:
SELECT _ , _ FROM _ WHERE _ AND _ | SELECT TV_Channel.series_name , TV_Channel.country FROM TV_Channel WHERE Cartoon.Directed_by = 'Ben Jones' AND Cartoon.Directed_by = 'Michael Chang'
SQL = SELECT series_name ,  country FROM TV_Channel WHERE id IN (SELECT channel FROM Cartoon WHERE Directed_by = 'Ben Jones' AND Directed_by = 'Michael Chang')
natsql:
SELECT _ , _ FROM _ WHERE _ AND _ | SELECT TV_Channel.series_name , TV_Channel.country FROM TV_Channel WHERE Cartoon.Directed_by = 'Ben Jones' AND Cartoon.Directed_by = 'Michael Chang'

SQL:
SELECT series_name ,  country FROM TV_Channel WHERE id IN (SELECT channel FROM Cartoon WHERE Directed_by = 'Ben Jones' AND Directed_by = 'Michael Chang')
self correction:
SELECT series_name, country FROM TV_Channel WHERE id IN (     SELECT Channel     FROM Cartoon     WHERE Directed_by = 'Ben Jones'         OR Directed_by = 'Michael Chang' )

index is 639
SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'
find the pixel aspect ratio and nation of the tv channels that do not use English.
schema_links:
find the pixel aspect ratio and nation of the tv channels that do not use English. | tv_channel : tv_channel.language ( English ) , tv_channel.pixel_aspect_ratio_par , tv_channel.country , tv_channel.id , tv_channel.content , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ , _ from _ where _ <> _ | select tv_channel.pixel_aspect_ratio_PAR , tv_channel.Country from tv_channel where tv_channel.Language <> 'English'
SQL = SELECT pixel_aspect_ratio_PAR ,  Country FROM TV_Channel WHERE Language  <>  'English'
natsql:
select _ , _ from _ where _ <> _ | select tv_channel.pixel_aspect_ratio_PAR , tv_channel.Country from tv_channel where tv_channel.Language <> 'English'

SQL:
SELECT pixel_aspect_ratio_PAR ,  Country FROM TV_Channel WHERE Language  <>  'English'
self correction:
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> 'English'

index is 640
SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'
What is the pixel aspect ratio and country of origin for all TV channels that do not use English?
schema_links:
What is the pixel aspect ratio and country of origin for all TV channels that do not use English? | tv_channel : tv_channel.language ( English ) , tv_channel.pixel_aspect_ratio_par , tv_channel.country , tv_channel.id , tv_channel.content , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ , _ from _ where @.@ != _ | select tv_channel.pixel_aspect_ratio_PAR , tv_channel.country from tv_channel where tv_channel.language != 'English'
SQL = SELECT pixel_aspect_ratio_PAR , country FROM TV_Channel WHERE Language != 'English'
natsql:
select _ , _ from _ where @.@ != _ | select tv_channel.pixel_aspect_ratio_PAR , tv_channel.country from tv_channel where tv_channel.language != 'English'

SQL:
SELECT pixel_aspect_ratio_PAR , country FROM TV_Channel WHERE Language != 'English'
self correction:
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country  FROM TV_Channel  WHERE TV_Channel.Language != 'English'

index is 641
SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2
find id of the tv channels that from the countries where have more than two tv channels.
schema_links:
find id of the tv channels that from the countries where have more than two tv channels. | tv_channel : tv_channel.id , tv_channel.country , tv_channel.content , tv_channel.language , tv_channel.series_name , tv_channel.* | tv_series : tv_series.rating , tv_series.id , tv_series.episode , tv_series.air_date , tv_series.share , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ from _ where count ( _ ) > _ group by _ | select tv_channel.id from tv_channel where count ( tv_channel.* ) > 2 group by tv_channel.id
SQL = SELECT id FROM tv_channel GROUP BY id HAVING count(*)  >  2
natsql:
select _ from _ where count ( _ ) > _ group by _ | select tv_channel.id from tv_channel where count ( tv_channel.* ) > 2 group by tv_channel.id

SQL:
SELECT id FROM tv_channel GROUP BY id HAVING count(*)  >  2
self correction:
SELECT TV_Channel.id FROM TV_Channel GROUP BY Country HAVING count(*) > 2

index is 642
SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2
What are the ids of all tv channels that have more than 2 TV channels?
schema_links:
What are the ids of all tv channels that have more than 2 TV channels? | tv_channel : tv_channel.id , tv_channel.content , tv_channel.country , tv_channel.language , tv_channel.series_name , tv_channel.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ from _ where count ( _ ) > _ group by _ | select tv_channel.id from tv_channel where count ( tv_channel.* ) > 2 group by tv_channel.id
SQL = SELECT id FROM TV_Channel GROUP BY id HAVING count(*)  >  2
natsql:
select _ from _ where count ( _ ) > _ group by _ | select tv_channel.id from tv_channel where count ( tv_channel.* ) > 2 group by tv_channel.id

SQL:
SELECT id FROM TV_Channel GROUP BY id HAVING count(*)  >  2
self correction:
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.id HAVING COUNT(*) > 2

index is 643
SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'
find the id of tv channels that do not play any cartoon directed by Ben Jones.
schema_links:
find the id of tv channels that do not play any cartoon directed by Ben Jones. | cartoon : cartoon.directed_by ( Ben Jones ) , cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.* | tv_channel : tv_channel.id , tv_channel.content , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.channel , tv_series.air_date , tv_series.*
natsql and SQL generation:
select _ from _ where not exists ( select * from _ where @.@ = _ ) | select tv_channel.id from tv_channel where not exists ( select * from cartoon where cartoon.directed_by = 'Ben Jones' and cartoon.channel = tv_channel.id )
SQL = SELECT id FROM tv_channel WHERE NOT EXISTS (SELECT * FROM cartoon WHERE directed_by = 'Ben Jones' AND channel = tv_channel.id)
natsql:
select _ from _ where not exists ( select * from _ where @.@ = _ ) | select tv_channel.id from tv_channel where not exists ( select * from cartoon where cartoon.directed_by = 'Ben Jones' and cartoon.channel = tv_channel.id )

SQL:
SELECT id FROM tv_channel WHERE NOT EXISTS (SELECT * FROM cartoon WHERE directed_by = 'Ben Jones' AND channel = tv_channel.id)
self correction:
SELECT id FROM TV_Channel WHERE id NOT IN (   SELECT channel   FROM Cartoon   WHERE Directed_by = 'Ben Jones' )

index is 644
SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'
What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?
schema_links:
What are the ids of the TV channels that do not have any cartoons directed by Ben Jones? | cartoon : cartoon.directed_by ( Ben Jones ) , cartoon.id , cartoon.title , cartoon.channel , cartoon.written_by , cartoon.* | tv_channel : tv_channel.id , tv_channel.content , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.air_date , tv_series.share , tv_series.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ where _ ( _ ) _ ) | select tv_channel.id from tv_channel where tv_channel.id not in ( select cartoon.channel from cartoon where cartoon.directed_by = 'Ben Jones' )
SQL = SELECT id FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')
natsql:
select _ from _ where _ not in ( select _ from _ where _ ( _ ) _ ) | select tv_channel.id from tv_channel where tv_channel.id not in ( select cartoon.channel from cartoon where cartoon.directed_by = 'Ben Jones' )

SQL:
SELECT id FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')
self correction:
SELECT tv_channel.id FROM tv_channel LEFT JOIN cartoon ON cartoon.channel = tv_channel.id AND cartoon.directed_by = 'Ben Jones' WHERE cartoon.id IS NULL

index is 645
SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')
find the package option of the tv channel that do not have any cartoon directed by Ben Jones.
schema_links:
find the package option of the tv channel that do not have any cartoon directed by Ben Jones. | tv_channel : tv_channel.package_option ( Option ) , tv_channel.content , tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.* | cartoon : cartoon.directed_by ( Ben Jones ) , cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.* | tv_series : tv_series.episode , tv_series.id , tv_series.rating , tv_series.share , tv_series.channel , tv_series.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ where _ ) | select tv_channel.package_option from tv_channel where tv_channel.id not in ( select cartoon.channel from cartoon where cartoon.directed_by = 'Ben Jones' )
SQL = SELECT package_option FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')
natsql:
select _ from _ where _ not in ( select _ from _ where _ ) | select tv_channel.package_option from tv_channel where tv_channel.id not in ( select cartoon.channel from cartoon where cartoon.directed_by = 'Ben Jones' )

SQL:
SELECT package_option FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')
self correction:
SELECT package_option FROM TV_Channel WHERE id NOT IN (   SELECT Channel   FROM Cartoon   WHERE Directed_by = 'Ben Jones' )

index is 646
SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')
What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?
schema_links:
What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones? | cartoon : cartoon.directed_by ( Ben Jones ) , cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.* | tv_channel : tv_channel.package_option ( Option ) , tv_channel.content , tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.air_date , tv_series.share , tv_series.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ where @.@ = _ ) | select tv_channel.package_option from tv_channel where tv_channel.id not in ( select cartoon.channel from cartoon where cartoon.directed_by = 'Ben Jones' )
SQL = SELECT package_option FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')
natsql:
select _ from _ where _ not in ( select _ from _ where @.@ = _ ) | select tv_channel.package_option from tv_channel where tv_channel.id not in ( select cartoon.channel from cartoon where cartoon.directed_by = 'Ben Jones' )

SQL:
SELECT package_option FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')
self correction:
SELECT package_option  FROM tv_channel  WHERE id NOT IN (   SELECT channel    FROM cartoon    WHERE directed_by = 'Ben Jones' )

index is 647
SELECT count(*) FROM poker_player
How many poker players are there?
schema_links:
How many poker players are there? | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.best_finish , poker_player.money_rank , poker_player.earnings , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( poker_player.poker_player_id ) from poker_player
SQL = SELECT count(Poker_Player_ID) FROM poker_player
natsql:
select count ( _ ) from _ | select count ( poker_player.poker_player_id ) from poker_player

SQL:
SELECT count(Poker_Player_ID) FROM poker_player
self correction:
SELECT COUNT(DISTINCT Poker_Player_ID) FROM poker_player

index is 648
SELECT count(*) FROM poker_player
Count the number of poker players.
schema_links:
Count the number of poker players. | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.earnings , poker_player.final_table_made , poker_player.best_finish , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( poker_player.poker_player_id ) from poker_player
SQL = SELECT count(poker_player_id) FROM poker_player
natsql:
select count ( _ ) from _ | select count ( poker_player.poker_player_id ) from poker_player

SQL:
SELECT count(poker_player_id) FROM poker_player
self correction:
SELECT COUNT(*) FROM poker_player

index is 649
SELECT Earnings FROM poker_player ORDER BY Earnings DESC
List the earnings of poker players in descending order.
schema_links:
List the earnings of poker players in descending order. | poker_player : poker_player.earnings , poker_player.money_rank , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql and SQL generation:
select _ from _ order by _ desc | select poker_player.earnings from poker_player order by poker_player.earnings desc
SQL = SELECT earnings FROM poker_player ORDER BY earnings DESC
natsql:
select _ from _ order by _ desc | select poker_player.earnings from poker_player order by poker_player.earnings desc

SQL:
SELECT earnings FROM poker_player ORDER BY earnings DESC
self correction:
SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC

index is 650
SELECT Earnings FROM poker_player ORDER BY Earnings DESC
What are the earnings of poker players, ordered descending by value?
schema_links:
What are the earnings of poker players, ordered descending by value? | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql and SQL generation:
select _ from _ order by _ desc | select poker_player.earnings from poker_player order by poker_player.earnings desc
SQL = SELECT earnings FROM poker_player ORDER BY earnings DESC
natsql:
select _ from _ order by _ desc | select poker_player.earnings from poker_player order by poker_player.earnings desc

SQL:
SELECT earnings FROM poker_player ORDER BY earnings DESC
self correction:
SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC

index is 651
SELECT Final_Table_Made ,  Best_Finish FROM poker_player
List the final tables made and the best finishes of poker players.
schema_links:
List the final tables made and the best finishes of poker players. | poker_player : poker_player.final_table_made , poker_player.best_finish , poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql and SQL generation:
select _ , _ from _ | select poker_player.final_table_made , poker_player.best_finish from poker_player
SQL = SELECT final_table_made , best_finish FROM poker_player
natsql:
select _ , _ from _ | select poker_player.final_table_made , poker_player.best_finish from poker_player

SQL:
SELECT final_table_made , best_finish FROM poker_player
self correction:
SELECT final_table_made, best_finish  FROM poker_player

index is 652
SELECT Final_Table_Made ,  Best_Finish FROM poker_player
What are the final tables made and best finishes for all poker players?
schema_links:
What are the final tables made and best finishes for all poker players? | poker_player : poker_player.final_table_made , poker_player.best_finish , poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql and SQL generation:
select _ , _ from _ | select poker_player.final_table_made , poker_player.best_finish from poker_player
SQL = SELECT final_table_made ,  best_finish FROM poker_player
natsql:
select _ , _ from _ | select poker_player.final_table_made , poker_player.best_finish from poker_player

SQL:
SELECT final_table_made ,  best_finish FROM poker_player
self correction:
SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player

index is 653
SELECT avg(Earnings) FROM poker_player
What is the average earnings of poker players?
schema_links:
What is the average earnings of poker players? | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql and SQL generation:
select avg ( _ ) from _ | select avg ( poker_player.earnings ) from poker_player
SQL = SELECT avg(earnings) FROM poker_player
natsql:
select avg ( _ ) from _ | select avg ( poker_player.earnings ) from poker_player

SQL:
SELECT avg(earnings) FROM poker_player
self correction:
SELECT avg(Earnings) FROM poker_player

index is 654
SELECT avg(Earnings) FROM poker_player
Return the average earnings across all poker players.
schema_links:
Return the average earnings across all poker players. | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql and SQL generation:
select avg ( _ ) from _ | select avg ( poker_player.earnings ) from poker_player
SQL = SELECT avg(earnings) FROM poker_player
natsql:
select avg ( _ ) from _ | select avg ( poker_player.earnings ) from poker_player

SQL:
SELECT avg(earnings) FROM poker_player
self correction:
SELECT avg(Earnings) FROM poker_player

index is 655
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
What is the money rank of the poker player with the highest earnings?
schema_links:
What is the money rank of the poker player with the highest earnings? | poker_player : poker_player.money_rank , poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql and SQL generation:
select _ from _ order by _ desc limit _ | select poker_player.money_rank from poker_player order by poker_player.earnings desc limit 1
SQL = SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1
natsql:
select _ from _ order by _ desc limit _ | select poker_player.money_rank from poker_player order by poker_player.earnings desc limit 1

SQL:
SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1
self correction:
SELECT poker_player.money_rank  FROM poker_player  ORDER BY poker_player.earnings DESC  LIMIT 1

index is 656
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
Return the money rank of the player with the greatest earnings.
schema_links:
Return the money rank of the player with the greatest earnings. | poker_player : poker_player.money_rank , poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql and SQL generation:
select _ from _ where @.@ = max ( _ ) | select poker_player.money_rank from poker_player where @.@ = max ( poker_player.earnings )
SQL = SELECT money_rank FROM poker_player WHERE earnings  =  (SELECT max(earnings) FROM poker_player)
natsql:
select _ from _ where @.@ = max ( _ ) | select poker_player.money_rank from poker_player where @.@ = max ( poker_player.earnings )

SQL:
SELECT money_rank FROM poker_player WHERE earnings  =  (SELECT max(earnings) FROM poker_player)
self correction:
SELECT money_rank  FROM poker_player  WHERE earnings = (   SELECT MAX(earnings)    FROM poker_player )

index is 657
SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000
What is the maximum number of final tables made among poker players with earnings less than 200000?
schema_links:
What is the maximum number of final tables made among poker players with earnings less than 200000? | poker_player : poker_player.final_table_made , poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.best_finish , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql and SQL generation:
select max ( _ ) from _ where _ < _ | select max ( poker_player.final_table_made ) from poker_player where poker_player.earnings < 200000
SQL = SELECT max(final_table_made) FROM poker_player WHERE earnings  <  200000
natsql:
select max ( _ ) from _ where _ < _ | select max ( poker_player.final_table_made ) from poker_player where poker_player.earnings < 200000

SQL:
SELECT max(final_table_made) FROM poker_player WHERE earnings  <  200000
self correction:
SELECT COUNT(*) AS max_final_tables FROM poker_player WHERE earnings < 200000 GROUP BY Poker_Player_ID ORDER BY max_final_tables DESC LIMIT 1

index is 658
SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000
Return the maximum final tables made across all poker players who have earnings below 200000.
schema_links:
Return the maximum final tables made across all poker players who have earnings below 200000. | poker_player : poker_player.final_table_made , poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.best_finish , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql and SQL generation:
select max ( _ ) from _ where _ < _ | select max ( poker_player.final_table_made ) from poker_player where poker_player.earnings < 200000
SQL = SELECT max(final_table_made) FROM poker_player WHERE earnings  <  200000
natsql:
select max ( _ ) from _ where _ < _ | select max ( poker_player.final_table_made ) from poker_player where poker_player.earnings < 200000

SQL:
SELECT max(final_table_made) FROM poker_player WHERE earnings  <  200000
self correction:
SELECT max(final_table_made)  FROM poker_player  WHERE earnings < 200000

index is 659
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID
What are the names of poker players?
schema_links:
What are the names of poker players? | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.best_finish , poker_player.money_rank , poker_player.*
natsql and SQL generation:
select _ from _ | select people.name from people
SQL = SELECT name FROM people
natsql:
select _ from _ | select people.name from people

SQL:
SELECT name FROM people
self correction:
SELECT name FROM people

index is 660
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID
Return the names of all the poker players.
schema_links:
Return the names of all the poker players. | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.best_finish , poker_player.earnings , poker_player.final_table_made , poker_player.*
natsql and SQL generation:
select _ from _ | select people.name from people
SQL = SELECT name FROM people
natsql:
select _ from _ | select people.name from people

SQL:
SELECT name FROM people
self correction:
SELECT people.Name FROM people 

index is 661
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000
What are the names of poker players whose earnings is higher than 300000?
schema_links:
What are the names of poker players whose earnings is higher than 300000? | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ from _ where @.@ > _ | select people.name from people join poker_player on people.people_id = poker_player.people_id where poker_player.earnings > 300000
SQL = SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.earnings  >  300000
natsql:
select _ from _ where @.@ > _ | select people.name from people join poker_player on people.people_id = poker_player.people_id where poker_player.earnings > 300000

SQL:
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.earnings  >  300000
self correction:
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000

index is 662
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000
Give the names of poker players who have earnings above 300000.
schema_links:
Give the names of poker players who have earnings above 300000. | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ from _ where _ > _ | select people.name from people join poker_player on people.people_id = poker_player.people_id where poker_player.earnings > 300000
SQL = SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE earnings  >  300000
natsql:
select _ from _ where _ > _ | select people.name from people join poker_player on people.people_id = poker_player.people_id where poker_player.earnings > 300000

SQL:
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE earnings  >  300000
self correction:
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000

index is 663
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made
List the names of poker players ordered by the final tables made in ascending order.
schema_links:
List the names of poker players ordered by the final tables made in ascending order. | poker_player : poker_player.final_table_made , poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.best_finish , poker_player.* | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.*
natsql and SQL generation:
select _ from _ order by _ asc | select people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.final_table_made asc
SQL = SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY final_table_made ASC
natsql:
select _ from _ order by _ asc | select people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.final_table_made asc

SQL:
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY final_table_made ASC
self correction:
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC

index is 664
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made
What are the names of poker players, ordered ascending by the number of final tables they have made?
schema_links:
What are the names of poker players, ordered ascending by the number of final tables they have made? | poker_player : poker_player.final_table_made , poker_player.poker_player_id , poker_player.people_id , poker_player.earnings , poker_player.best_finish , poker_player.* | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.*
natsql and SQL generation:
select _ from _ order by _ asc | select people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.final_table_made asc
SQL = SELECT T1.name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made ASC
natsql:
select _ from _ order by _ asc | select people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.final_table_made asc

SQL:
SELECT T1.name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made ASC
self correction:
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made ASC

index is 665
SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1
What is the birth date of the poker player with the lowest earnings?
schema_links:
What is the birth date of the poker player with the lowest earnings? | people : people.birth_date , people.name , people.nationality , people.height , people.people_id , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ from _ order by _ limit _ | select people.birth_date from poker_player, people where poker_player.people_id = people.people_id order by poker_player.earnings limit 1
SQL = SELECT birth_date FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY earnings LIMIT 1
natsql:
select _ from _ order by _ limit _ | select people.birth_date from poker_player, people where poker_player.people_id = people.people_id order by poker_player.earnings limit 1

SQL:
SELECT birth_date FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY earnings LIMIT 1
self correction:
SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings ASC LIMIT 1

index is 666
SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1
Return the birth date of the poker player with the lowest earnings.
schema_links:
Return the birth date of the poker player with the lowest earnings. | people : people.birth_date , people.name , people.nationality , people.height , people.people_id , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ from _ order by _ limit _ | select people.birth_date from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings limit 1
SQL = SELECT birth_date FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Earnings LIMIT 1
natsql:
select _ from _ order by _ limit _ | select people.birth_date from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings limit 1

SQL:
SELECT birth_date FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Earnings LIMIT 1
self correction:
SELECT birth_date FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings ASC LIMIT 1

index is 667
SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1
What is the money rank of the tallest poker player?
schema_links:
What is the money rank of the tallest poker player? | poker_player : poker_player.money_rank , poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.* | people : people.height , people.name , people.nationality , people.people_id , people.birth_date , people.*
natsql and SQL generation:
select _ from _ order by _ desc limit _ | select poker_player.money_rank from poker_player, people where poker_player.people_id = people.people_id order by people.height desc limit 1
SQL = SELECT money_rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY height DESC LIMIT 1
natsql:
select _ from _ order by _ desc limit _ | select poker_player.money_rank from poker_player, people where poker_player.people_id = people.people_id order by people.height desc limit 1

SQL:
SELECT money_rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY height DESC LIMIT 1
self correction:
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1

index is 668
SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1
Return the money rank of the poker player with the greatest height.
schema_links:
Return the money rank of the poker player with the greatest height. | poker_player : poker_player.money_rank , poker_player.people_id , poker_player.earnings , poker_player.poker_player_id , poker_player.final_table_made , poker_player.* | people : people.height , people.name , people.people_id , people.nationality , people.birth_date , people.*
natsql and SQL generation:
select _ from _ where @.@ = max ( _ ) | select poker_player.money_rank from poker_player where @.@ = max ( people.height )
SQL = SELECT money_rank FROM poker_player WHERE People_ID  =  (SELECT People_ID FROM people ORDER BY height DESC LIMIT 1)
natsql:
select _ from _ where @.@ = max ( _ ) | select poker_player.money_rank from poker_player where @.@ = max ( people.height )

SQL:
SELECT money_rank FROM poker_player WHERE People_ID  =  (SELECT People_ID FROM people ORDER BY height DESC LIMIT 1)
self correction:
SELECT Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height = (     SELECT MAX(Height)      FROM people )

index is 669
SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200
What is the average earnings of poker players with height higher than 200?
schema_links:
What is the average earnings of poker players with height higher than 200? | people : people.height , people.name , people.people_id , people.nationality , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select avg ( _ ) from _ where @.@ > _ | select avg ( poker_player.earnings ) from people join poker_player on people.people_id = poker_player.people_id where people.height > 200
SQL = SELECT AVG(earnings) FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE height > 200
natsql:
select avg ( _ ) from _ where @.@ > _ | select avg ( poker_player.earnings ) from people join poker_player on people.people_id = poker_player.people_id where people.height > 200

SQL:
SELECT AVG(earnings) FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE height > 200
self correction:
SELECT AVG(poker_player.Earnings) FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE people.Height > 200

index is 670
SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200
Give average earnings of poker players who are taller than 200.
schema_links:
Give average earnings of poker players who are taller than 200. | people : people.height , people.name , people.people_id , people.nationality , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select avg ( _ ) from _ where @.@ > _ | select avg ( poker_player.earnings ) from people join poker_player on people.people_id = poker_player.people_id where people.height > 200
SQL = SELECT AVG(earnings) FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE height > 200
natsql:
select avg ( _ ) from _ where @.@ > _ | select avg ( poker_player.earnings ) from people join poker_player on people.people_id = poker_player.people_id where people.height > 200

SQL:
SELECT AVG(earnings) FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE height > 200
self correction:
SELECT AVG(poker_player.Earnings)  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  WHERE people.Height > 200

index is 671
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC
What are the names of poker players in descending order of earnings?
schema_links:
What are the names of poker players in descending order of earnings? | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ from _ order by _ desc | select people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings desc
SQL = SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY earnings DESC
natsql:
select _ from _ order by _ desc | select people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings desc

SQL:
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY earnings DESC
self correction:
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC

index is 672
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC
Return the names of poker players sorted by their earnings descending.
schema_links:
Return the names of poker players sorted by their earnings descending. | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ from _ order by _ desc | select people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings desc
SQL = SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY earnings DESC
natsql:
select _ from _ order by _ desc | select people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings desc

SQL:
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY earnings DESC
self correction:
SELECT name  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Earnings DESC

index is 673
SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality
What are different nationalities of people and the corresponding number of people from each nation?
schema_links:
What are different nationalities of people and the corresponding number of people from each nation? | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select people.nationality , count ( people.* ) from people group by people.nationality
SQL = SELECT nationality ,  COUNT(*) FROM people GROUP BY nationality
natsql:
select _ , count ( _ ) from _ group by _ | select people.nationality , count ( people.* ) from people group by people.nationality

SQL:
SELECT nationality ,  COUNT(*) FROM people GROUP BY nationality
self correction:
SELECT nationality, COUNT(*)  FROM people  GROUP BY nationality

index is 674
SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality
How many people are there of each nationality?
schema_links:
How many people are there of each nationality? | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ , count ( * ) from _ group by _ | select people.nationality , count ( * ) from people group by people.nationality
SQL = SELECT nationality ,  COUNT(*) FROM people GROUP BY nationality
natsql:
select _ , count ( * ) from _ group by _ | select people.nationality , count ( * ) from people group by people.nationality

SQL:
SELECT nationality ,  COUNT(*) FROM people GROUP BY nationality
self correction:
SELECT nationality, COUNT(*)  FROM people  GROUP BY nationality

index is 675
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
What is the most common nationality of people?
schema_links:
What is the most common nationality of people? | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select people.nationality from people group by people.nationality order by count ( people.nationality ) desc limit 1
SQL = SELECT nationality FROM people GROUP BY nationality ORDER BY count(nationality) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select people.nationality from people group by people.nationality order by count ( people.nationality ) desc limit 1

SQL:
SELECT nationality FROM people GROUP BY nationality ORDER BY count(nationality) DESC LIMIT 1
self correction:
SELECT nationality, COUNT(*) AS count  FROM people  GROUP BY nationality  ORDER BY count DESC  LIMIT 1

index is 676
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
Give the nationality that is most common across all people.
schema_links:
Give the nationality that is most common across all people. | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select people.nationality from people group by people.nationality order by count ( people.* ) desc limit 1
SQL = SELECT nationality FROM people GROUP BY nationality ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select people.nationality from people group by people.nationality order by count ( people.* ) desc limit 1

SQL:
SELECT nationality FROM people GROUP BY nationality ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1

index is 677
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2
What are the nationalities that are shared by at least two people?
schema_links:
What are the nationalities that are shared by at least two people? | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ from _ where count ( _ ) > _ group by _ | select people.nationality from people group by people.nationality having count(*) > 1
SQL = SELECT nationality FROM people GROUP BY nationality HAVING count(*) > 1
natsql:
select _ from _ where count ( _ ) > _ group by _ | select people.nationality from people group by people.nationality having count(*) > 1

SQL:
SELECT nationality FROM people GROUP BY nationality HAVING count(*) > 1
self correction:
SELECT Nationality FROM people GROUP BY nationality HAVING COUNT(DISTINCT People_ID) > 1

index is 678
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2
Return the nationalities for which there are two or more people.
schema_links:
Return the nationalities for which there are two or more people. | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ from _ group by _ having count ( _ ) >= _ | select people.nationality from people group by people.nationality having count ( people.* ) >= 2
SQL = SELECT nationality FROM people GROUP BY nationality HAVING count(*) >= 2
natsql:
select _ from _ group by _ having count ( _ ) >= _ | select people.nationality from people group by people.nationality having count ( people.* ) >= 2

SQL:
SELECT nationality FROM people GROUP BY nationality HAVING count(*) >= 2
self correction:
SELECT Nationality FROM people GROUP BY nationality HAVING count(*) >= 2

index is 679
SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC
List the names and birth dates of people in ascending alphabetical order of name.
schema_links:
List the names and birth dates of people in ascending alphabetical order of name. | people : people.birth_date , people.name , people.nationality , people.height , people.people_id , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ , _ from _ order by _ asc | select people.name , people.birth_date from people order by people.name asc
SQL = SELECT name ,  birth_date FROM people ORDER BY name ASC
natsql:
select _ , _ from _ order by _ asc | select people.name , people.birth_date from people order by people.name asc

SQL:
SELECT name ,  birth_date FROM people ORDER BY name ASC
self correction:
SELECT name, birth_date  FROM people  ORDER BY name ASC

index is 680
SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC
What are the names and birth dates of people, ordered by their names in alphabetical order?
schema_links:
What are the names and birth dates of people, ordered by their names in alphabetical order? | people : people.birth_date , people.name , people.nationality , people.height , people.people_id , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ , _ from _ order by _ | select people.name , people.birth_date from people order by people.name
SQL = SELECT name , birth_date FROM people ORDER BY name
natsql:
select _ , _ from _ order by _ | select people.name , people.birth_date from people order by people.name

SQL:
SELECT name , birth_date FROM people ORDER BY name
self correction:
SELECT name, birth_date FROM people ORDER BY name ASC

index is 681
SELECT Name FROM people WHERE Nationality != "Russia"
Show names of people whose nationality is not "Russia".
schema_links:
Show names of people whose nationality is not "Russia". | people : people.nationality ( Russia ) , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ from _ where @.@ != 'Russia' | select people.name from people where people.nationality != 'Russia'
SQL = SELECT name FROM people WHERE nationality != 'Russia'
natsql:
select _ from _ where @.@ != 'Russia' | select people.name from people where people.nationality != 'Russia'

SQL:
SELECT name FROM people WHERE nationality != 'Russia'
self correction:
SELECT name FROM people WHERE Nationality != 'Russia'

index is 682
SELECT Name FROM people WHERE Nationality != "Russia"
What are the names of people who are not from Russia?
schema_links:
What are the names of people who are not from Russia? | people : people.nationality ( Russia ) , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ from _ where _ <> _ | select people.name from people where people.nationality <> 'Russia'
SQL = SELECT name FROM people WHERE nationality <> 'Russia'
natsql:
select _ from _ where _ <> _ | select people.name from people where people.nationality <> 'Russia'

SQL:
SELECT name FROM people WHERE nationality <> 'Russia'
self correction:
SELECT name  FROM people  WHERE nationality <> 'Russia'

index is 683
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
List the names of people that are not poker players.
schema_links:
List the names of people that are not poker players. | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.poker_player_id , poker_player.earnings , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ ) | select people.name from people where people.people_id not in ( select poker_player.people_id from poker_player )
SQL = SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player)
natsql:
select _ from _ where _ not in ( select _ from _ ) | select people.name from people where people.people_id not in ( select poker_player.people_id from poker_player )

SQL:
SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player)
self correction:
SELECT name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)

index is 684
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
What are the names of people who do not play poker?
schema_links:
What are the names of people who do not play poker? | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.poker_player_id , poker_player.earnings , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ ) | select people.name from people where people.people_id not in ( select poker_player.people_id from poker_player )
SQL = SELECT name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
natsql:
select _ from _ where _ not in ( select _ from _ ) | select people.name from people where people.people_id not in ( select poker_player.people_id from poker_player )

SQL:
SELECT name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
self correction:
SELECT name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)

index is 685
SELECT count(DISTINCT Nationality) FROM people
How many distinct nationalities are there?
schema_links:
How many distinct nationalities are there? | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct people.nationality ) from people
SQL = SELECT COUNT(DISTINCT nationality) FROM people
natsql:
select count ( distinct _ ) from _ | select count ( distinct people.nationality ) from people

SQL:
SELECT COUNT(DISTINCT nationality) FROM people
self correction:
SELECT COUNT(DISTINCT Nationality) FROM people

index is 686
SELECT count(DISTINCT Nationality) FROM people
Count the number of different nationalities.
schema_links:
Count the number of different nationalities. | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct people.nationality ) from people
SQL = SELECT COUNT(DISTINCT nationality) FROM people
natsql:
select count ( distinct _ ) from _ | select count ( distinct people.nationality ) from people

SQL:
SELECT COUNT(DISTINCT nationality) FROM people
self correction:
SELECT COUNT(DISTINCT Nationality) FROM people

index is 687
SELECT count(*) FROM area_code_state
How many states are there?
schema_links:
How many states are there? | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.* | votes : votes.state , votes.created , votes.vote_id , votes.phone_number , votes.contestant_number , votes.* | contestants : contestants.contestant_number , contestants.contestant_name , contestants.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct area_code_state.state ) from area_code_state
SQL = SELECT count(DISTINCT state) FROM area_code_state
natsql:
select count ( distinct _ ) from _ | select count ( distinct area_code_state.state ) from area_code_state

SQL:
SELECT count(DISTINCT state) FROM area_code_state
self correction:
SELECT count(DISTINCT state) FROM AREA_CODE_STATE

index is 688
SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC
List the contestant numbers and names, ordered by contestant name descending.
schema_links:
List the contestant numbers and names, ordered by contestant name descending. | contestants : contestants.contestant_name , contestants.contestant_number , contestants.* | votes : votes.state , votes.created , votes.vote_id , votes.phone_number , votes.contestant_number , votes.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.*
natsql and SQL generation:
select _ , _ from _ order by _ desc | select contestants.contestant_number , contestants.contestant_name from contestants order by contestants.contestant_name desc
SQL = SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC
natsql:
select _ , _ from _ order by _ desc | select contestants.contestant_number , contestants.contestant_name from contestants order by contestants.contestant_name desc

SQL:
SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC
self correction:
SELECT contestant_number, contestant_name  FROM CONTESTANTS  ORDER BY contestant_name DESC

index is 689
SELECT vote_id ,  phone_number ,  state FROM votes
List the vote ids, phone numbers and states of all votes.
schema_links:
List the vote ids, phone numbers and states of all votes. | votes : votes.vote_id , votes.phone_number , votes.state , votes.created , votes.contestant_number , votes.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.* | contestants : contestants.contestant_number , contestants.contestant_name , contestants.*
natsql and SQL generation:
select _ , _ , _ from _
SQL = SELECT vote_id, phone_number, state FROM votes
natsql:
select _ , _ , _ from _

SQL:
SELECT vote_id, phone_number, state FROM votes
self correction:
SELECT vote_id, phone_number, state FROM VOTES

index is 690
SELECT max(area_code) ,  min(area_code) FROM area_code_state
What are the maximum and minimum values of area codes?
schema_links:
What are the maximum and minimum values of area codes? | area_code_state : area_code_state.area_code , area_code_state.state , area_code_state.* | votes : votes.state , votes.created , votes.vote_id , votes.phone_number , votes.contestant_number , votes.* | contestants : contestants.contestant_number , contestants.contestant_name , contestants.*
natsql and SQL generation:
select max ( _ ) , min ( _ ) from _ | select max ( area_code_state.area_code ) , min ( area_code_state.area_code ) from area_code_state
SQL = SELECT max(area_code) , min(area_code) FROM area_code_state
natsql:
select max ( _ ) , min ( _ ) from _ | select max ( area_code_state.area_code ) , min ( area_code_state.area_code ) from area_code_state

SQL:
SELECT max(area_code) , min(area_code) FROM area_code_state
self correction:
SELECT max(area_code), min(area_code) FROM AREA_CODE_STATE;

index is 691
SELECT max(created) FROM votes WHERE state  =  'CA'
What is last date created of votes from the state 'CA'?
schema_links:
What is last date created of votes from the state 'CA'? | votes : votes.created , votes.state ( CA ) , votes.vote_id , votes.phone_number , votes.contestant_number , votes.* | area_code_state : area_code_state.state ( CA ) , area_code_state.area_code , area_code_state.* | contestants : contestants.contestant_number , contestants.contestant_name , contestants.*
natsql and SQL generation:
select max ( votes.created ) from votes where votes.state = 'CA'
SQL = SELECT max(created) FROM votes WHERE state = 'CA'
natsql:
select max ( votes.created ) from votes where votes.state = 'CA'

SQL:
SELECT max(created) FROM votes WHERE state = 'CA'
self correction:
SELECT max(created) AS last_date_created FROM VOTES WHERE state = 'CA'

index is 692
SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'
What are the names of the contestants whose names are not 'Jessie Alloway'
schema_links:
What are the names of the contestants whose names are not 'Jessie Alloway' | contestants : contestants.contestant_name ( Jessie Alloway ) , contestants.contestant_number , contestants.* | votes : votes.state , votes.created , votes.vote_id , votes.phone_number , votes.contestant_number , votes.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.*
natsql and SQL generation:
select _ from _ where _ != 'Jessie Alloway' | select contestants.contestant_name from contestants where contestants.contestant_name != 'Jessie Alloway'
SQL = SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'
natsql:
select _ from _ where _ != 'Jessie Alloway' | select contestants.contestant_name from contestants where contestants.contestant_name != 'Jessie Alloway'

SQL:
SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'
self correction:
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway'

index is 693
SELECT DISTINCT state ,  created FROM votes
What are the distinct states and create time of all votes?
schema_links:
What are the distinct states and create time of all votes? | votes : votes.state , votes.created , votes.vote_id , votes.phone_number , votes.contestant_number , votes.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.* | contestants : contestants.contestant_number , contestants.contestant_name , contestants.*
natsql and SQL generation:
select distinct _ , _ from _ | select distinct votes.state , votes.created from votes
SQL = SELECT DISTINCT state ,  created FROM votes
natsql:
select distinct _ , _ from _ | select distinct votes.state , votes.created from votes

SQL:
SELECT DISTINCT state ,  created FROM votes
self correction:
SELECT DISTINCT state, created FROM VOTES

index is 694
SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2
What are the contestant numbers and names of the contestants who had at least two votes?
schema_links:
What are the contestant numbers and names of the contestants who had at least two votes? | contestants : contestants.contestant_name , contestants.contestant_number , contestants.* | votes : votes.contestant_number , votes.created , votes.state , votes.vote_id , votes.phone_number , votes.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.*
natsql and SQL generation:
select _ , _ from _ where count ( _ ) >= _ group by _ | select contestants.contestant_number , contestants.contestant_name from contestants where count ( votes.* ) >= 2 group by contestants.contestant_number , contestants.contestant_name
SQL = SELECT contestant_number ,  contestant_name FROM contestants GROUP BY contestant_number , contestant_name HAVING count(*)  >=  2
natsql:
select _ , _ from _ where count ( _ ) >= _ group by _ | select contestants.contestant_number , contestants.contestant_name from contestants where count ( votes.* ) >= 2 group by contestants.contestant_number , contestants.contestant_name

SQL:
SELECT contestant_number ,  contestant_name FROM contestants GROUP BY contestant_number , contestant_name HAVING count(*)  >=  2
self correction:
SELECT contestant_number, contestant_name  FROM contestants  JOIN votes ON contestants.contestant_number = votes.contestant_number  GROUP BY contestants.contestant_number, contestants.contestant_name  HAVING count(votes.vote_id) >= 2

index is 695
SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1
Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?
schema_links:
Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes? | contestants : contestants.contestant_number , contestants.contestant_name , contestants.* | votes : votes.contestant_number , votes.created , votes.state , votes.vote_id , votes.phone_number , votes.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.*
natsql and SQL generation:
select _ , _ from _ where _ = min ( _ ) group by _ | select contestants.contestant_number , contestants.contestant_name from contestants where votes.vote_id = min ( votes.vote_id ) group by contestants.contestant_number , contestants.contestant_name
SQL = SELECT contestant_number , contestant_name FROM contestants WHERE vote_id  =  (SELECT min(vote_id) FROM votes) GROUP BY contestant_number, contestant_name
natsql:
select _ , _ from _ where _ = min ( _ ) group by _ | select contestants.contestant_number , contestants.contestant_name from contestants where votes.vote_id = min ( votes.vote_id ) group by contestants.contestant_number , contestants.contestant_name

SQL:
SELECT contestant_number , contestant_name FROM contestants WHERE vote_id  =  (SELECT min(vote_id) FROM votes) GROUP BY contestant_number, contestant_name
self correction:
SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number IN (     SELECT contestant_number     FROM votes     GROUP BY contestant_number     HAVING COUNT(vote_id) = (         SELECT COUNT(vote_id)         FROM votes         GROUP BY contestant_number         ORDER BY COUNT(vote_id) ASC         LIMIT 1     ) )

index is 696
SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'
What are the number of votes from state 'NY' or 'CA'?
schema_links:
What are the number of votes from state 'NY' or 'CA'? | area_code_state : area_code_state.state ( CA , NY ) , area_code_state.area_code , area_code_state.* | votes : votes.state ( CA , NY ) , votes.created , votes.vote_id , votes.phone_number , votes.contestant_number , votes.* | contestants : contestants.contestant_number , contestants.contestant_name , contestants.*
natsql and SQL generation:
select count ( _ ) from _ where @.@ = 'NY' or @.@ = 'CA' | select count ( votes.* ) from votes where votes.state = 'NY' or votes.state = 'CA'
SQL = SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'
natsql:
select count ( _ ) from _ where @.@ = 'NY' or @.@ = 'CA' | select count ( votes.* ) from votes where votes.state = 'NY' or votes.state = 'CA'

SQL:
SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'
self correction:
SELECT COUNT(*) FROM VOTES WHERE state = 'NY' OR state = 'CA'

index is 697
SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )
How many contestants did not get voted?
schema_links:
How many contestants did not get voted? | contestants : contestants.contestant_name , contestants.contestant_number , contestants.* | votes : votes.contestant_number , votes.vote_id , votes.state , votes.created , votes.phone_number , votes.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.*
natsql and SQL generation:
select count ( * ) from _ where _ not in ( select _ from _ ) | select count ( * ) from contestants where contestant_number not in ( select contestant_number from votes )
SQL = SELECT count(*) FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes)
natsql:
select count ( * ) from _ where _ not in ( select _ from _ ) | select count ( * ) from contestants where contestant_number not in ( select contestant_number from votes )

SQL:
SELECT count(*) FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes)
self correction:
SELECT count(*) FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes)

index is 698
SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1
What is the area code in which the most voters voted?
schema_links:
What is the area code in which the most voters voted? | votes : votes.created , votes.vote_id , votes.state , votes.phone_number , votes.contestant_number , votes.* | area_code_state : area_code_state.area_code , area_code_state.state , area_code_state.* | contestants : contestants.contestant_name , contestants.contestant_number , contestants.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select area_code_state.area_code from votes, area_code_state where votes.state = area_code_state.state group by area_code_state.area_code order by count(votes.*) desc limit 1
SQL = SELECT area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state = T2.state GROUP BY area_code ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select area_code_state.area_code from votes, area_code_state where votes.state = area_code_state.state group by area_code_state.area_code order by count(votes.*) desc limit 1

SQL:
SELECT area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state = T2.state GROUP BY area_code ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT area_code  FROM area_code_state AS T1  JOIN votes AS T2 ON T1.state = T2.state  GROUP BY T1.area_code  ORDER BY COUNT(*) DESC  LIMIT 1

index is 699
SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'
What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?
schema_links:
What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'? | votes : votes.phone_number , votes.state , votes.created , votes.vote_id , votes.contestant_number , votes.* | contestants : contestants.contestant_name ( Tabatha Gehling ) , contestants.contestant_number , contestants.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.*
natsql and SQL generation:
select _ , _ , _ from _ where _ = _ | select votes.created , votes.state , votes.phone_number from votes where votes.contestant_number = (SELECT contestant_number FROM contestants WHERE contestant_name = 'Tabatha Gehling')
SQL = SELECT created , state , phone_number FROM votes WHERE contestant_number = (SELECT contestant_number FROM contestants WHERE contestant_name = 'Tabatha Gehling')
natsql:
select _ , _ , _ from _ where _ = _ | select votes.created , votes.state , votes.phone_number from votes where votes.contestant_number = (SELECT contestant_number FROM contestants WHERE contestant_name = 'Tabatha Gehling')

SQL:
SELECT created , state , phone_number FROM votes WHERE contestant_number = (SELECT contestant_number FROM contestants WHERE contestant_name = 'Tabatha Gehling')
self correction:
SELECT created, state, phone_number  FROM VOTES  WHERE contestant_number = (     SELECT contestant_number      FROM CONTESTANTS      WHERE contestant_name = 'Tabatha Gehling' )

index is 700
SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'
List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.
schema_links:
List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'. | contestants : contestants.contestant_name ( Kelly Clauss , Tabatha Gehling ) , contestants.contestant_number , contestants.* | votes : votes.created , votes.vote_id , votes.state , votes.phone_number , votes.contestant_number , votes.* | area_code_state : area_code_state.area_code , area_code_state.state , area_code_state.*
natsql and SQL generation:
select _ from _ where _ = _ and _ = _ | select area_code_state.area_code from area_code_state where (select count(*) from votes where contestant_number in (select contestant_number from contestants where contestant_name = 'Tabatha Gehling' or contestant_name = 'Kelly Clauss') and state = area_code_state.state) >= 2
SQL = SELECT area_code FROM area_code_state WHERE (SELECT count(*) FROM votes WHERE contestant_number IN (SELECT contestant_number FROM contestants WHERE contestant_name = 'Tabatha Gehling' OR contestant_name = 'Kelly Clauss') AND state = area_code_state.state) >= 2
natsql:
select _ from _ where _ = _ and _ = _ | select area_code_state.area_code from area_code_state where (select count(*) from votes where contestant_number in (select contestant_number from contestants where contestant_name = 'Tabatha Gehling' or contestant_name = 'Kelly Clauss') and state = area_code_state.state) >= 2

SQL:
SELECT area_code FROM area_code_state WHERE (SELECT count(*) FROM votes WHERE contestant_number IN (SELECT contestant_number FROM contestants WHERE contestant_name = 'Tabatha Gehling' OR contestant_name = 'Kelly Clauss') AND state = area_code_state.state) >= 2
self correction:
SELECT area_code FROM area_code_state WHERE state IN (   SELECT state   FROM votes   WHERE contestant_number IN (     SELECT contestant_number     FROM contestants     WHERE contestant_name IN ('Tabatha Gehling', 'Kelly Clauss')   )   GROUP BY state   HAVING COUNT(DISTINCT contestant_number) = 2 )

index is 701
select contestant_name from contestants where contestant_name like "%al%"
Return the names of the contestants whose names contain the substring 'Al' .
schema_links:
Return the names of the contestants whose names contain the substring 'Al' . | contestants : contestants.contestant_name , contestants.contestant_number , contestants.* | area_code_state : area_code_state.state ( AL ) , area_code_state.area_code , area_code_state.* | votes : votes.state , votes.created , votes.vote_id , votes.phone_number , votes.contestant_number , votes.*
natsql and SQL generation:
select _ from _ where _ like '%Al%' | select contestants.contestant_name from contestants where contestants.contestant_name like '%Al%'
SQL = SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%'
natsql:
select _ from _ where _ like '%Al%' | select contestants.contestant_name from contestants where contestants.contestant_name like '%Al%'

SQL:
SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%'
self correction:
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'

index is 702
SELECT Name FROM country WHERE IndepYear  >  1950
What are the names of all the countries that became independent after 1950?
schema_links:
What are the names of all the countries that became independent after 1950? | country : country.indepyear , country.name , country.localname , country.code , country.continent , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql and SQL generation:
select _ from _ where _ > _ | select country.name from country where country.indepyear > 1950
SQL = SELECT name FROM country WHERE indepyear > 1950
natsql:
select _ from _ where _ > _ | select country.name from country where country.indepyear > 1950

SQL:
SELECT name FROM country WHERE indepyear > 1950
self correction:
SELECT country.Name FROM country WHERE country.IndepYear > 1950

index is 703
SELECT Name FROM country WHERE IndepYear  >  1950
Give the names of the nations that were founded after 1950.
schema_links:
Give the names of the nations that were founded after 1950. | country : country.indepyear , country.name , country.localname , country.continent , country.region , country.* | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ from _ where _ > _ | select country.name from country where country.indepyear > 1950
SQL = SELECT name FROM country WHERE indepyear > 1950
natsql:
select _ from _ where _ > _ | select country.name from country where country.indepyear > 1950

SQL:
SELECT name FROM country WHERE indepyear > 1950
self correction:
SELECT name FROM country WHERE IndepYear > 1950

index is 704
SELECT count(*) FROM country WHERE GovernmentForm  =  "Republic"
How many countries have a republic as their form of government?
schema_links:
How many countries have a republic as their form of government? | country : country.governmentform ( Republic ) , country.name , country.code , country.continent , country.region , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select count ( distinct _ ) from _ where _ = _ | select count ( distinct country.code ) from country where country.governmentform = 'Republic'
SQL = SELECT count(DISTINCT code) FROM country WHERE governmentform  =  'Republic'
natsql:
select count ( distinct _ ) from _ where _ = _ | select count ( distinct country.code ) from country where country.governmentform = 'Republic'

SQL:
SELECT count(DISTINCT code) FROM country WHERE governmentform  =  'Republic'
self correction:
SELECT count(DISTINCT Code) FROM country WHERE GovernmentForm = 'Republic'

index is 705
SELECT count(*) FROM country WHERE GovernmentForm  =  "Republic"
How many countries have governments that are republics?
schema_links:
How many countries have governments that are republics? | country : country.governmentform ( Republic ) , country.name , country.code , country.continent , country.region , country.* | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select count ( distinct _ ) from _ where _ | select count ( distinct country.code ) from country where country.governmentform = 'Republic'
SQL = SELECT count(DISTINCT code) FROM country WHERE governmentform = 'Republic'
natsql:
select count ( distinct _ ) from _ where _ | select count ( distinct country.code ) from country where country.governmentform = 'Republic'

SQL:
SELECT count(DISTINCT code) FROM country WHERE governmentform = 'Republic'
self correction:
SELECT count(DISTINCT Code) FROM country WHERE GovernmentForm = 'Republic'

index is 706
SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"
What is the total surface area of the countries in the Caribbean region?
schema_links:
What is the total surface area of the countries in the Caribbean region? | country : country.surfacearea , country.region ( Caribbean ) , country.name , country.code , country.continent , country.* | countrylanguage : countrylanguage.language ( Caribbean ) , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql and SQL generation:
select sum ( country.surfacearea ) from country where country.region = 'Caribbean'
SQL = SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean'
natsql:
select sum ( country.surfacearea ) from country where country.region = 'Caribbean'

SQL:
SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean'
self correction:
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'

index is 707
SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"
How much surface area do the countires in the Carribean cover together?
schema_links:
How much surface area do the countires in the Carribean cover together? | country : country.surfacearea , country.continent , country.region , country.name , country.code , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql and SQL generation:
select sum ( _ ) from _ where _ | select sum ( country.surfacearea ) from country where country.continent = 'Caribbean'
SQL = SELECT sum(surfacearea) FROM country WHERE continent = 'Caribbean'
natsql:
select sum ( _ ) from _ where _ | select sum ( country.surfacearea ) from country where country.continent = 'Caribbean'

SQL:
SELECT sum(surfacearea) FROM country WHERE continent = 'Caribbean'
self correction:
SELECT SUM(SurfaceArea)  FROM country  WHERE Continent = 'Caribbean'

index is 708
SELECT Continent FROM country WHERE Name  =  "Anguilla"
Which continent is Anguilla in?
schema_links:
Which continent is Anguilla in? | country : country.continent , country.name ( Anguilla ) , country.localname ( Anguilla ) , country.region , country.surfacearea , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql and SQL generation:
select _ from _ where _ ( _ ) = _ | select country.continent from country where country.name = 'Anguilla'
SQL = SELECT continent FROM country WHERE name = 'Anguilla'
natsql:
select _ from _ where _ ( _ ) = _ | select country.continent from country where country.name = 'Anguilla'

SQL:
SELECT continent FROM country WHERE name = 'Anguilla'
self correction:
SELECT continent FROM country WHERE name = 'Anguilla'

index is 709
SELECT Continent FROM country WHERE Name  =  "Anguilla"
What is the continent name which Anguilla belongs to?
schema_links:
What is the continent name which Anguilla belongs to? | country : country.name ( Anguilla ) , country.continent , country.localname ( Anguilla ) , country.region , country.population , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql and SQL generation:
select _ from _ where @.@ = _ | select country.continent from country where country.name = 'Anguilla'
SQL = SELECT continent FROM country WHERE name = 'Anguilla'
natsql:
select _ from _ where @.@ = _ | select country.continent from country where country.name = 'Anguilla'

SQL:
SELECT continent FROM country WHERE name = 'Anguilla'
self correction:
SELECT Continent FROM country WHERE Name = 'Anguilla'

index is 710
SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"
Which region is the city Kabul located in?
schema_links:
Which region is the city Kabul located in? | city : city.name ( Kabul ) , city.district , city.countrycode , city.population , city.id , city.* | country : country.region , country.continent , country.population , country.code , country.name , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql and SQL generation:
select _ from _ where _ = _ | select country.region from country where city.name = 'Kabul'
SQL = SELECT region FROM country JOIN city ON country.code = city.countrycode WHERE city.name = 'Kabul'
natsql:
select _ from _ where _ = _ | select country.region from country where city.name = 'Kabul'

SQL:
SELECT region FROM country JOIN city ON country.code = city.countrycode WHERE city.name = 'Kabul'
self correction:
SELECT country.Region  FROM city  JOIN country ON country.Code = city.CountryCode  WHERE city.Name = 'Kabul'

index is 711
SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"
What region is Kabul in?
schema_links:
What region is Kabul in? | country : country.region , country.name , country.population , country.capital , country.code , country.* | city : city.name ( Kabul ) , city.district , city.population , city.id , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql and SQL generation:
select _ from _ where _ = _ | select country.region from country where country.name = 'Kabul'
SQL = SELECT region FROM country WHERE name = 'Kabul'
natsql:
select _ from _ where _ = _ | select country.region from country where country.name = 'Kabul'

SQL:
SELECT region FROM country WHERE name = 'Kabul'
self correction:
SELECT Region FROM country WHERE Name = 'Kabul'

index is 712
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1
Which language is the most popular in Aruba?
schema_links:
Which language is the most popular in Aruba? | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.* | country : country.name ( Aruba ) , country.localname ( Aruba ) , country.population , country.continent , country.region , country.* | city : city.name , city.population , city.id , city.countrycode , city.district , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ from _ where _ = ( select _ from _ where _ = 'Aruba' ) and _ = max ( _ ) | select countrylanguage.language from countrylanguage where countrylanguage.countrycode = ( select country.code from country where country.name = 'Aruba' ) and countrylanguage.percentage = max ( countrylanguage.percentage )
SQL = SELECT language FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba') AND percentage = (SELECT max(percentage) FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba'))
natsql:
select _ from _ where _ = ( select _ from _ where _ = 'Aruba' ) and _ = max ( _ ) | select countrylanguage.language from countrylanguage where countrylanguage.countrycode = ( select country.code from country where country.name = 'Aruba' ) and countrylanguage.percentage = max ( countrylanguage.percentage )

SQL:
SELECT language FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba') AND percentage = (SELECT max(percentage) FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba'))
self correction:
SELECT language FROM countrylanguage WHERE countrycode = (   SELECT code   FROM country   WHERE name = 'Aruba' ) ORDER BY percentage DESC LIMIT 1

index is 713
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1
What language is predominantly spoken in Aruba?
schema_links:
What language is predominantly spoken in Aruba? | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | country : country.name ( Aruba ) , country.localname ( Aruba ) , country.continent , country.region , country.population , country.* | city : city.name , city.id , city.countrycode , city.district , city.population , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ from _ where _ = ( select _ from _ where _ = _ ) | select countrylanguage.language from countrylanguage where countrylanguage.countrycode = ( select country.code from country where country.name = 'Aruba' )
SQL = SELECT language FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba')
natsql:
select _ from _ where _ = ( select _ from _ where _ = _ ) | select countrylanguage.language from countrylanguage where countrylanguage.countrycode = ( select country.code from country where country.name = 'Aruba' )

SQL:
SELECT language FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba')
self correction:
SELECT language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba')

index is 714
SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"
What are the population and life expectancies in Brazil?
schema_links:
What are the population and life expectancies in Brazil? | country : country.name ( Brazil ) , country.lifeexpectancy , country.population , country.continent , country.region , country.* | city : city.population , city.id , city.name , city.district , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ , _ from _ where _ | select country.population , country.lifeexpectancy from country where country.name = 'Brazil'
SQL = SELECT population , lifeexpectancy FROM country WHERE name = 'Brazil'
natsql:
select _ , _ from _ where _ | select country.population , country.lifeexpectancy from country where country.name = 'Brazil'

SQL:
SELECT population , lifeexpectancy FROM country WHERE name = 'Brazil'
self correction:
SELECT population, lifeexpectancy FROM country WHERE Name = 'Brazil'

index is 715
SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"
Give me Brazil’s population and life expectancies.
schema_links:
Give me Brazil's population and life expectancies. | country : country.name ( Brazil ) , country.lifeexpectancy , country.population , country.code , country.continent , country.* | city : city.population , city.id , city.name , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql and SQL generation:
select _ , _ from _ where _ ( Brazil ) | select country.population , country.lifeexpectancy from country where country.name = 'Brazil'
SQL = SELECT population , lifeexpectancy FROM country WHERE name = 'Brazil'
natsql:
select _ , _ from _ where _ ( Brazil ) | select country.population , country.lifeexpectancy from country where country.name = 'Brazil'

SQL:
SELECT population , lifeexpectancy FROM country WHERE name = 'Brazil'
self correction:
SELECT Population, LifeExpectancy FROM country WHERE name = 'Brazil'

index is 716
SELECT Population ,  Region FROM country WHERE Name  =  "Angola"
What are the region and population of Angola?
schema_links:
What are the region and population of Angola? | country : country.name ( Angola ) , country.region , country.population , country.localname ( Angola ) , country.code , country.* | city : city.population , city.name , city.id , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql and SQL generation:
select _ , _ from _ where _ ( Angola ) | select country.region , country.population from country where country.name = 'Angola'
SQL = SELECT region ,  population FROM country WHERE name  =  'Angola'
natsql:
select _ , _ from _ where _ ( Angola ) | select country.region , country.population from country where country.name = 'Angola'

SQL:
SELECT region ,  population FROM country WHERE name  =  'Angola'
self correction:
SELECT region, population FROM country WHERE Name = 'Angola'

index is 717
SELECT Population ,  Region FROM country WHERE Name  =  "Angola"
What region does Angola belong to and what is its population?
schema_links:
What region does Angola belong to and what is its population? | country : country.region , country.population , country.name ( Angola ) , country.localname ( Angola ) , country.continent , country.* | city : city.population , city.name , city.district , city.id , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql and SQL generation:
select _ , _ from _ where _ = _ | select country.region , country.population from country where country.name = 'Angola'
SQL = SELECT region , population FROM country WHERE name = 'Angola'
natsql:
select _ , _ from _ where _ = _ | select country.region , country.population from country where country.name = 'Angola'

SQL:
SELECT region , population FROM country WHERE name = 'Angola'
self correction:
SELECT Region, Population FROM country WHERE name = 'Angola'

index is 718
SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"
What is the average expected life expectancy for countries in the region of Central Africa?
schema_links:
What is the average expected life expectancy for countries in the region of Central Africa? | country : country.region ( Central Africa ) , country.lifeexpectancy , country.continent ( Africa ) , country.name , country.surfacearea , country.* | city : city.district ( Central ) , city.id , city.name , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql and SQL generation:
select avg ( _ ) from _ where _ = _ | select avg ( country.lifeexpectancy ) from country where country.region = 'Central Africa'
SQL = SELECT avg(lifeexpectancy) FROM country WHERE region = 'Central Africa'
natsql:
select avg ( _ ) from _ where _ = _ | select avg ( country.lifeexpectancy ) from country where country.region = 'Central Africa'

SQL:
SELECT avg(lifeexpectancy) FROM country WHERE region = 'Central Africa'
self correction:
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'

index is 719
SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"
How long is the people’s average life expectancy in Central Africa?
schema_links:
How long is the people's average life expectancy in Central Africa? | country : country.region ( Central Africa ) , country.lifeexpectancy , country.continent ( Africa ) , country.name , country.population , country.* | city : city.district ( Central ) , city.id , city.name , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql and SQL generation:
select avg ( _ ) from _ where @ = _ and @ = _ | select avg ( country.lifeexpectancy ) from country where region = 'Central Africa' and continent = 'Africa'
SQL = SELECT avg(lifeexpectancy) FROM country WHERE region = 'Central Africa' AND continent = 'Africa'
natsql:
select avg ( _ ) from _ where @ = _ and @ = _ | select avg ( country.lifeexpectancy ) from country where region = 'Central Africa' and continent = 'Africa'

SQL:
SELECT avg(lifeexpectancy) FROM country WHERE region = 'Central Africa' AND continent = 'Africa'
self correction:
SELECT avg(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Region = 'Central Africa'

index is 720
SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1
What is the name of country that has the shortest life expectancy in Asia?
schema_links:
What is the name of country that has the shortest life expectancy in Asia? | country : country.continent ( Asia ) , country.lifeexpectancy , country.name , country.region , country.code , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql and SQL generation:
select _ from _ where _ = ( select min ( _ ) from _ where _ = _ ) | select country.name from country where country.continent = 'Asia' and country.lifeexpectancy = ( select min(country.lifeexpectancy) from country where country.continent = 'Asia' )
SQL = SELECT name FROM country WHERE continent = 'Asia' AND lifeexpectancy = (SELECT MIN(lifeexpectancy) FROM country WHERE continent = 'Asia')
natsql:
select _ from _ where _ = ( select min ( _ ) from _ where _ = _ ) | select country.name from country where country.continent = 'Asia' and country.lifeexpectancy = ( select min(country.lifeexpectancy) from country where country.continent = 'Asia' )

SQL:
SELECT name FROM country WHERE continent = 'Asia' AND lifeexpectancy = (SELECT MIN(lifeexpectancy) FROM country WHERE continent = 'Asia')
self correction:
SELECT name  FROM country  WHERE continent = 'Asia'  AND lifeexpectancy = (   SELECT MIN(lifeexpectancy)    FROM country    WHERE continent = 'Asia' ) ORDER BY lifeexpectancy ASC  LIMIT 1

index is 721
SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1
Give the name of the country in Asia with the lowest life expectancy.
schema_links:
Give the name of the country in Asia with the lowest life expectancy. | country : country.continent ( Asia ) , country.lifeexpectancy , country.name , country.region , country.code , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql and SQL generation:
select _ from _ where _ = min ( _ ) | select country.name from country where country.continent = 'Asia' and country.lifeexpectancy = (select min(lifeexpectancy) from country where continent = 'Asia')
SQL = SELECT name FROM country WHERE continent = 'Asia' AND lifeexpectancy = (SELECT min(lifeexpectancy) FROM country WHERE continent = 'Asia')
natsql:
select _ from _ where _ = min ( _ ) | select country.name from country where country.continent = 'Asia' and country.lifeexpectancy = (select min(lifeexpectancy) from country where continent = 'Asia')

SQL:
SELECT name FROM country WHERE continent = 'Asia' AND lifeexpectancy = (SELECT min(lifeexpectancy) FROM country WHERE continent = 'Asia')
self correction:
SELECT name FROM country WHERE continent = 'Asia' AND lifeexpectancy = (SELECT min(lifeexpectancy) FROM country WHERE continent = 'Asia') ORDER BY lifeexpectancy ASC LIMIT 1

index is 722
SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"
What is the total population and maximum GNP in Asia?
schema_links:
What is the total population and maximum GNP in Asia? | country : country.continent ( Asia ) , country.gnp , country.population , country.region , country.name , country.* | city : city.population , city.id , city.name , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql and SQL generation:
select sum ( _ ) , max ( _ ) from _ where _ | select sum ( country.population ) , max ( country.gnp ) from country where country.continent = 'Asia'
SQL = SELECT sum(population) , max(GNP) FROM country WHERE continent = 'Asia'
natsql:
select sum ( _ ) , max ( _ ) from _ where _ | select sum ( country.population ) , max ( country.gnp ) from country where country.continent = 'Asia'

SQL:
SELECT sum(population) , max(GNP) FROM country WHERE continent = 'Asia'
self correction:
SELECT sum(population) AS total_population, max(GNP) AS maximum_GNP FROM country WHERE continent = 'Asia'

index is 723
SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"
How many people live in Asia, and what is the largest GNP among them?
schema_links:
How many people live in Asia, and what is the largest GNP among them? | country : country.continent ( Asia ) , country.gnp , country.population , country.name , country.region , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select sum ( _ ) , max ( _ ) from _ where _ | select sum ( country.population ) , max ( country.gnp ) from country where country.continent = 'Asia'
SQL = SELECT SUM(population) ,  MAX(gnp) FROM country WHERE continent = 'Asia'
natsql:
select sum ( _ ) , max ( _ ) from _ where _ | select sum ( country.population ) , max ( country.gnp ) from country where country.continent = 'Asia'

SQL:
SELECT SUM(population) ,  MAX(gnp) FROM country WHERE continent = 'Asia'
self correction:
SELECT SUM(population) AS TotalPopulation, MAX(GNP) AS LargestGNP FROM country WHERE continent = 'Asia'

index is 724
SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"
What is the average life expectancy in African countries that are republics?
schema_links:
What is the average life expectancy in African countries that are republics? | country : country.lifeexpectancy , country.governmentform ( Republic ) , country.continent ( Africa ) , country.name , country.region , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql and SQL generation:
select avg ( _ ) from _ where _ and _ | select avg ( country.lifeexpectancy ) from country where country.governmentform = 'Republic' and country.continent = 'Africa'
SQL = SELECT avg(lifeexpectancy) FROM country WHERE governmentform = 'Republic' AND continent = 'Africa'
natsql:
select avg ( _ ) from _ where _ and _ | select avg ( country.lifeexpectancy ) from country where country.governmentform = 'Republic' and country.continent = 'Africa'

SQL:
SELECT avg(lifeexpectancy) FROM country WHERE governmentform = 'Republic' AND continent = 'Africa'
self correction:
SELECT avg(LifeExpectancy) FROM country WHERE GovernmentForm = 'Republic' AND Continent = 'Africa'

index is 725
SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"
Give the average life expectancy for countries in Africa which are republics?
schema_links:
Give the average life expectancy for countries in Africa which are republics? | country : country.lifeexpectancy , country.governmentform ( Republic ) , country.continent ( Africa ) , country.name , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql and SQL generation:
select avg ( country.lifeexpectancy ) from country where country.continent = 'Africa' and country.governmentform = 'Republic'
SQL = SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic'
natsql:
select avg ( country.lifeexpectancy ) from country where country.continent = 'Africa' and country.governmentform = 'Republic'

SQL:
SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic'
self correction:
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'

index is 726
SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"
What is the total surface area of the continents Asia and Europe?
schema_links:
What is the total surface area of the continents Asia and Europe? | country : country.continent ( Asia , Europe ) , country.surfacearea , country.name , country.code , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql and SQL generation:
select sum ( _ ) from _ where @.@ in ( _ , _ ) | select sum(country.surfacearea) from country where country.continent in ('Asia', 'Europe')
SQL = SELECT sum(surfacearea) FROM country WHERE continent IN ('Asia', 'Europe')
natsql:
select sum ( _ ) from _ where @.@ in ( _ , _ ) | select sum(country.surfacearea) from country where country.continent in ('Asia', 'Europe')

SQL:
SELECT sum(surfacearea) FROM country WHERE continent IN ('Asia', 'Europe')
self correction:
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE continent IN ('Asia', 'Europe')

index is 727
SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"
Give the total surface area covered by countries in Asia or Europe.
schema_links:
Give the total surface area covered by countries in Asia or Europe. | country : country.continent ( Asia , Europe ) , country.surfacearea , country.name , country.code , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql and SQL generation:
select sum ( _ ) from _ where _ or _ | select sum ( country.surfacearea ) from country where country.continent = 'Asia' or country.continent = 'Europe'
SQL = SELECT sum(surfacearea) FROM country WHERE continent = 'Asia' OR continent = 'Europe'
natsql:
select sum ( _ ) from _ where _ or _ | select sum ( country.surfacearea ) from country where country.continent = 'Asia' or country.continent = 'Europe'

SQL:
SELECT sum(surfacearea) FROM country WHERE continent = 'Asia' OR continent = 'Europe'
self correction:
SELECT sum(SurfaceArea) as TotalSurfaceArea FROM country WHERE continent = 'Asia' OR continent = 'Europe'

index is 728
SELECT sum(Population) FROM city WHERE District  =  "Gelderland"
How many people live in Gelderland district?
schema_links:
How many people live in Gelderland district? | city : city.district ( Gelderland ) , city.population , city.name , city.id , city.countrycode , city.* | country : country.population , country.name , country.region , country.code , country.continent , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql and SQL generation:
select sum ( _ ) from _ where _ = _ | select sum ( city.population ) from city where city.district = 'Gelderland'
SQL = SELECT sum(population) FROM city WHERE district = 'Gelderland'
natsql:
select sum ( _ ) from _ where _ = _ | select sum ( city.population ) from city where city.district = 'Gelderland'

SQL:
SELECT sum(population) FROM city WHERE district = 'Gelderland'
self correction:
SELECT sum(population) FROM city WHERE district = 'Gelderland'

index is 729
SELECT sum(Population) FROM city WHERE District  =  "Gelderland"
What is the total population of Gelderland district?
schema_links:
What is the total population of Gelderland district? | city : city.district ( Gelderland ) , city.population , city.name , city.id , city.countrycode , city.* | country : country.name , country.population , country.continent , country.region , country.code , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql and SQL generation:
select sum ( _ ) from _ where @.@ = _ | select sum ( city.population ) from city where city.district = 'Gelderland'
SQL = SELECT sum(population) FROM city WHERE district = 'Gelderland'
natsql:
select sum ( _ ) from _ where @.@ = _ | select sum ( city.population ) from city where city.district = 'Gelderland'

SQL:
SELECT sum(population) FROM city WHERE district = 'Gelderland'
self correction:
SELECT SUM(population) FROM city WHERE district = 'Gelderland'

index is 730
SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"
What is the average GNP and total population in all nations whose government is US territory?
schema_links:
What is the average GNP and total population in all nations whose government is US territory? | country : country.gnp , country.governmentform ( US Territory ) , country.population , country.name , country.code2 ( US ) , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.population , city.id , city.name , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select avg ( _ ) , sum ( _ ) from _ where _ = 'US Territory' | select avg ( country.gnp ) , sum ( country.population ) from country where country.governmentform = 'US Territory'
SQL = SELECT avg(GNP) , sum(population) FROM country WHERE governmentform  =  'US Territory'
natsql:
select avg ( _ ) , sum ( _ ) from _ where _ = 'US Territory' | select avg ( country.gnp ) , sum ( country.population ) from country where country.governmentform = 'US Territory'

SQL:
SELECT avg(GNP) , sum(population) FROM country WHERE governmentform  =  'US Territory'
self correction:
SELECT avg(GNP) , sum(population)  FROM country  WHERE governmentform  =  'US Territory'

index is 731
SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"
Give the mean GNP and total population of nations which are considered US territory.
schema_links:
Give the mean GNP and total population of nations which are considered US territory. | country : country.gnp , country.governmentform ( US Territory ) , country.population , country.code2 ( US ) , country.name , country.* | city : city.population , city.id , city.name , city.district , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select avg ( _ ) , sum ( _ ) from _ where _ = 'US' | select avg ( country.gnp ) , sum ( country.population ) from country where country.governmentform = 'US Territory'
SQL = SELECT avg(GNP) ,  sum(population) FROM country WHERE governmentform = 'US Territory'
natsql:
select avg ( _ ) , sum ( _ ) from _ where _ = 'US' | select avg ( country.gnp ) , sum ( country.population ) from country where country.governmentform = 'US Territory'

SQL:
SELECT avg(GNP) ,  sum(population) FROM country WHERE governmentform = 'US Territory'
self correction:
SELECT avg(GNP) AS Mean_GNP, sum(population) AS Total_Population FROM country WHERE governmentform = 'US Territory'

index is 732
SELECT count(DISTINCT LANGUAGE) FROM countrylanguage
How many unique languages are spoken in the world?
schema_links:
How many unique languages are spoken in the world? | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.name , country.code , country.continent , country.region , country.population , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct countrylanguage.language ) from countrylanguage
SQL = SELECT count(DISTINCT language) FROM countrylanguage
natsql:
select count ( distinct _ ) from _ | select count ( distinct countrylanguage.language ) from countrylanguage

SQL:
SELECT count(DISTINCT language) FROM countrylanguage
self correction:
SELECT count(DISTINCT Language) FROM countrylanguage

index is 733
SELECT count(DISTINCT LANGUAGE) FROM countrylanguage
What is the number of distinct languages used around the world?
schema_links:
What is the number of distinct languages used around the world? | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | country : country.name , country.region , country.code , country.continent , country.population , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct countrylanguage.language ) from countrylanguage
SQL = SELECT count(DISTINCT language) FROM countrylanguage
natsql:
select count ( distinct _ ) from _ | select count ( distinct countrylanguage.language ) from countrylanguage

SQL:
SELECT count(DISTINCT language) FROM countrylanguage
self correction:
SELECT count(DISTINCT Language) AS NumberOfLanguages FROM countrylanguage

index is 734
SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa"
How many type of governments are in Africa?
schema_links:
How many type of governments are in Africa? | country : country.continent ( Africa ) , country.governmentform , country.name , country.region , country.headofstate , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select count ( distinct _ ) from _ where _ = _ | select count ( distinct country.governmentform ) from country where country.continent = 'Africa'
SQL = SELECT count(DISTINCT governmentform) FROM country WHERE continent = 'Africa'
natsql:
select count ( distinct _ ) from _ where _ = _ | select count ( distinct country.governmentform ) from country where country.continent = 'Africa'

SQL:
SELECT count(DISTINCT governmentform) FROM country WHERE continent = 'Africa'
self correction:
SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'

index is 735
SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa"
How many different forms of governments are there in Africa?
schema_links:
How many different forms of governments are there in Africa? | country : country.continent ( Africa ) , country.governmentform , country.name , country.code , country.region , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select count ( distinct _ ) from _ where _ | select count ( distinct country.governmentform ) from country where country.continent = 'Africa'
SQL = SELECT count(DISTINCT governmentform) FROM country WHERE continent = 'Africa'
natsql:
select count ( distinct _ ) from _ where _ | select count ( distinct country.governmentform ) from country where country.continent = 'Africa'

SQL:
SELECT count(DISTINCT governmentform) FROM country WHERE continent = 'Africa'
self correction:
SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'

index is 736
SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"
What is the total number of languages used in Aruba?
schema_links:
What is the total number of languages used in Aruba? | country : country.name ( Aruba ) , country.localname ( Aruba ) , country.continent , country.region , country.population , country.* | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | city : city.id , city.name , city.countrycode , city.district , city.population , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select count ( distinct _ ) from _ where _ = _ | select count ( distinct countrylanguage.language ) from countrylanguage where countrylanguage.countrycode = 'ABW'
SQL = SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW'
natsql:
select count ( distinct _ ) from _ where _ = _ | select count ( distinct countrylanguage.language ) from countrylanguage where countrylanguage.countrycode = 'ABW'

SQL:
SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW'
self correction:
SELECT COUNT(DISTINCT Language) AS TotalLanguages FROM countrylanguage WHERE CountryCode = 'ABW'

index is 737
SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"
How many languages are spoken in Aruba?
schema_links:
How many languages are spoken in Aruba? | country : country.name ( Aruba ) , country.localname ( Aruba ) , country.continent , country.region , country.population , country.* | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | city : city.name , city.id , city.countrycode , city.district , city.population , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select count ( distinct _ ) from _ where _ = _ | select count ( distinct countrylanguage.language ) from countrylanguage where countrylanguage.countrycode = 'ABW'
SQL = SELECT count(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW'
natsql:
select count ( distinct _ ) from _ where _ = _ | select count ( distinct countrylanguage.language ) from countrylanguage where countrylanguage.countrycode = 'ABW'

SQL:
SELECT count(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW'
self correction:
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW'

index is 738
SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"
How many official languages does Afghanistan have?
schema_links:
How many official languages does Afghanistan have? | country : country.name ( Afghanistan ) , country.continent , country.region , country.population , country.code , country.* | countrylanguage : countrylanguage.isofficial , countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select count ( distinct _ ) from _ where _ = _ | select count ( distinct countrylanguage.language ) from countrylanguage where countrylanguage.countrycode = 'AFG' and countrylanguage.isofficial = 'T'
SQL = SELECT count(DISTINCT language) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = 'T'
natsql:
select count ( distinct _ ) from _ where _ = _ | select count ( distinct countrylanguage.language ) from countrylanguage where countrylanguage.countrycode = 'AFG' and countrylanguage.isofficial = 'T'

SQL:
SELECT count(DISTINCT language) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = 'T'
self correction:
SELECT count(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'

index is 739
SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"
How many official languages are spoken in Afghanistan?
schema_links:
How many official languages are spoken in Afghanistan? | country : country.name ( Afghanistan ) , country.continent , country.region , country.code , country.surfacearea , country.* | countrylanguage : countrylanguage.isofficial , countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select count ( _ ) from _ where _ = _ | select count ( countrylanguage.language ) from countrylanguage where countrylanguage.isofficial = 'T' and countrylanguage.countrycode = (select country.code from country where country.name = 'Afghanistan')
SQL = SELECT count(language) FROM countrylanguage WHERE isofficial = 'T' AND countrycode = (SELECT code FROM country WHERE name = 'Afghanistan')
natsql:
select count ( _ ) from _ where _ = _ | select count ( countrylanguage.language ) from countrylanguage where countrylanguage.isofficial = 'T' and countrylanguage.countrycode = (select country.code from country where country.name = 'Afghanistan')

SQL:
SELECT count(language) FROM countrylanguage WHERE isofficial = 'T' AND countrycode = (SELECT code FROM country WHERE name = 'Afghanistan')
self correction:
SELECT COUNT(DISTINCT language) FROM countrylanguage  WHERE IsOfficial = 'T'  AND CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan')

index is 740
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
What is name of the country that speaks the largest number of languages?
schema_links:
What is name of the country that speaks the largest number of languages? | country : country.name , country.continent , country.population , country.localname , country.code , country.* | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql and SQL generation:
select _ from _ group by _ order by count ( * ) desc limit _ | select country.name from countrylanguage join country on countrylanguage.countrycode = country.code group by country.name order by count ( countrylanguage.language ) desc limit 1
SQL = SELECT name FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY country.name ORDER BY count(language) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( * ) desc limit _ | select country.name from countrylanguage join country on countrylanguage.countrycode = country.code group by country.name order by count ( countrylanguage.language ) desc limit 1

SQL:
SELECT name FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY country.name ORDER BY count(language) DESC LIMIT 1
self correction:
SELECT country.Name  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  GROUP BY country.Code  ORDER BY COUNT(countrylanguage.Language) DESC  LIMIT 1

index is 741
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
Give the name of the nation that uses the greatest amount of languages.
schema_links:
Give the name of the nation that uses the greatest amount of languages. | country : country.name , country.localname , country.continent , country.headofstate , country.code , country.* | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql and SQL generation:
select _ from _ where @.@ = max ( count ( _ ) ) group by _ | select country.name from countrylanguage join country on countrylanguage.countrycode = country.code group by country.name having count(distinct countrylanguage.language) = (select max(cnt) from (select count(distinct language) as cnt from countrylanguage group by countrycode))
SQL = SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage GROUP BY countrycode HAVING COUNT(DISTINCT language) = (SELECT MAX(cnt) FROM (SELECT COUNT(DISTINCT language) AS cnt FROM countrylanguage GROUP BY countrycode)))
natsql:
select _ from _ where @.@ = max ( count ( _ ) ) group by _ | select country.name from countrylanguage join country on countrylanguage.countrycode = country.code group by country.name having count(distinct countrylanguage.language) = (select max(cnt) from (select count(distinct language) as cnt from countrylanguage group by countrycode))

SQL:
SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage GROUP BY countrycode HAVING COUNT(DISTINCT language) = (SELECT MAX(cnt) FROM (SELECT COUNT(DISTINCT language) AS cnt FROM countrylanguage GROUP BY countrycode)))
self correction:
SELECT name FROM country WHERE code IN (     SELECT countrycode     FROM countrylanguage     GROUP BY countrycode     HAVING COUNT(DISTINCT language) = (         SELECT MAX(cnt)         FROM (             SELECT COUNT(DISTINCT language) AS cnt             FROM countrylanguage             GROUP BY countrycode         )     ) )

index is 742
SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1
Which continent has the most diverse languages?
schema_links:
Which continent has the most diverse languages? | country : country.continent , country.name , country.code , country.region , country.surfacearea , country.* | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ from _ group by _ order by count ( distinct _ ) desc limit _ | select country.continent from countrylanguage group by countrylanguage.continent order by count ( distinct countrylanguage.language ) desc limit 1
SQL = SELECT continent FROM countrylanguage GROUP BY continent ORDER BY count(DISTINCT language) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( distinct _ ) desc limit _ | select country.continent from countrylanguage group by countrylanguage.continent order by count ( distinct countrylanguage.language ) desc limit 1

SQL:
SELECT continent FROM countrylanguage GROUP BY continent ORDER BY count(DISTINCT language) DESC LIMIT 1
self correction:
SELECT continent FROM countrylanguage GROUP BY continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1

index is 743
SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1
Which continent speaks the most languages?
schema_links:
Which continent speaks the most languages? | country : country.continent , country.name , country.code , country.region , country.surfacearea , country.* | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select country.continent from countrylanguage group by country.continent order by count ( countrylanguage.language ) desc limit 1
SQL = SELECT continent FROM countrylanguage GROUP BY continent ORDER BY count(language) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select country.continent from countrylanguage group by country.continent order by count ( countrylanguage.language ) desc limit 1

SQL:
SELECT continent FROM countrylanguage GROUP BY continent ORDER BY count(language) DESC LIMIT 1
self correction:
SELECT continent FROM countrylanguage GROUP BY continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1

index is 744
SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
How many countries speak both English and Dutch?
schema_links:
How many countries speak both English and Dutch? | countrylanguage : countrylanguage.language ( Dutch , English ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.name , country.code , country.continent , country.region , country.population , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select count ( distinct _ ) from _ where _ = _ or _ = _ group by _ | select count ( distinct countrylanguage.countrycode ) from countrylanguage where countrylanguage.language = 'Dutch' or countrylanguage.language = 'English' group by countrylanguage.countrycode
SQL = SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = 'Dutch' OR language = 'English' GROUP BY countrycode
natsql:
select count ( distinct _ ) from _ where _ = _ or _ = _ group by _ | select count ( distinct countrylanguage.countrycode ) from countrylanguage where countrylanguage.language = 'Dutch' or countrylanguage.language = 'English' group by countrylanguage.countrycode

SQL:
SELECT COUNT(DISTINCT countrycode) FROM countrylanguage WHERE language = 'Dutch' OR language = 'English' GROUP BY countrycode
self correction:
SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language IN ('Dutch', 'English')

index is 745
SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
What is the number of nations that use English and Dutch?
schema_links:
What is the number of nations that use English and Dutch? | countrylanguage : countrylanguage.language ( Dutch , English ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.name , country.code , country.continent , country.region , country.population , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select count ( distinct _ ) from _ where _ in ( _ , _ ) | select count ( distinct country.code ) from countrylanguage where countrylanguage.language in ( 'Dutch' , 'English' )
SQL = SELECT count(DISTINCT T1.code) FROM countrylanguage AS T1 WHERE T1.language IN ('Dutch', 'English')
natsql:
select count ( distinct _ ) from _ where _ in ( _ , _ ) | select count ( distinct country.code ) from countrylanguage where countrylanguage.language in ( 'Dutch' , 'English' )

SQL:
SELECT count(DISTINCT T1.code) FROM countrylanguage AS T1 WHERE T1.language IN ('Dutch', 'English')
self correction:
SELECT count(DISTINCT T1.CountryCode) FROM countrylanguage AS T1 WHERE T1.Language IN ('Dutch', 'English')

index is 746
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
What are the names of nations speak both English and French?
schema_links:
What are the names of nations speak both English and French? | countrylanguage : countrylanguage.language ( English , French ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.name , country.localname , country.continent , country.region , country.code , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select distinct _ from _ where _ and _ | select distinct country.name from countrylanguage, country where countrylanguage.language in ('English', 'French') and countrylanguage.countrycode = country.code
SQL = SELECT DISTINCT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language IN ('English', 'French') GROUP BY countrycode HAVING COUNT(DISTINCT language) = 2)
natsql:
select distinct _ from _ where _ and _ | select distinct country.name from countrylanguage, country where countrylanguage.language in ('English', 'French') and countrylanguage.countrycode = country.code

SQL:
SELECT DISTINCT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language IN ('English', 'French') GROUP BY countrycode HAVING COUNT(DISTINCT language) = 2)
self correction:
SELECT DISTINCT name  FROM country  WHERE code IN (     SELECT countrycode      FROM countrylanguage      WHERE language IN ('English', 'French')      GROUP BY countrycode      HAVING COUNT(DISTINCT language) = 2 )

index is 747
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
Give the names of nations that speak both English and French.
schema_links:
Give the names of nations that speak both English and French. | countrylanguage : countrylanguage.language ( English , French ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.name , country.localname , country.code , country.continent , country.region , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ from _ where _ in ( _ ) and _ in ( _ ) | select country.name from country where country.code in (select countrylanguage.countrycode from countrylanguage where countrylanguage.language = 'English') and country.code in (select countrylanguage.countrycode from countrylanguage where countrylanguage.language = 'French')
SQL = SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English') AND code IN (SELECT countrycode FROM countrylanguage WHERE language = 'French')
natsql:
select _ from _ where _ in ( _ ) and _ in ( _ ) | select country.name from country where country.code in (select countrylanguage.countrycode from countrylanguage where countrylanguage.language = 'English') and country.code in (select countrylanguage.countrycode from countrylanguage where countrylanguage.language = 'French')

SQL:
SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English') AND code IN (SELECT countrycode FROM countrylanguage WHERE language = 'French')
self correction:
SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English') AND code IN (SELECT countrycode FROM countrylanguage WHERE language = 'French');

index is 748
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
What are the names of nations where both English and French are official languages?
schema_links:
What are the names of nations where both English and French are official languages? | countrylanguage : countrylanguage.language ( English , French ) , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | country : country.name , country.localname , country.continent , country.region , country.code , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql and SQL generation:
select _ from _ where ( _ and _ ) | select country.name from country where (countrylanguage.language = 'English' and countrylanguage.isofficial = 'T' and countrylanguage.countrycode = country.code) and (countrylanguage.language = 'French' and countrylanguage.isofficial = 'T' and countrylanguage.countrycode = country.code)
SQL = SELECT name FROM country WHERE (SELECT COUNT(*) FROM countrylanguage WHERE language = 'English' AND isOfficial = 'T' AND countrycode = country.Code) > 0 AND (SELECT COUNT(*) FROM countrylanguage WHERE language = 'French' AND isOfficial = 'T' AND countrycode = country.Code) > 0
natsql:
select _ from _ where ( _ and _ ) | select country.name from country where (countrylanguage.language = 'English' and countrylanguage.isofficial = 'T' and countrylanguage.countrycode = country.code) and (countrylanguage.language = 'French' and countrylanguage.isofficial = 'T' and countrylanguage.countrycode = country.code)

SQL:
SELECT name FROM country WHERE (SELECT COUNT(*) FROM countrylanguage WHERE language = 'English' AND isOfficial = 'T' AND countrycode = country.Code) > 0 AND (SELECT COUNT(*) FROM countrylanguage WHERE language = 'French' AND isOfficial = 'T' AND countrycode = country.Code) > 0
self correction:
SELECT name  FROM country  WHERE country.Code IN (     SELECT countrycode      FROM countrylanguage      WHERE language = 'English' AND isOfficial = 'T' )  AND country.Code IN (     SELECT countrycode      FROM countrylanguage      WHERE language = 'French' AND isOfficial = 'T' )

index is 749
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
Give the names of countries with English and French as official languages.
schema_links:
Give the names of countries with English and French as official languages. | countrylanguage : countrylanguage.language ( English , French ) , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | country : country.name , country.continent , country.region , country.localname , country.code , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql and SQL generation:
select _ from _ where @.@ = _ and @.@ = _ | select country.name from countrylanguage cl1 join countrylanguage cl2 on cl1.countrycode = cl2.countrycode join country on cl1.countrycode = country.code where cl1.language = 'English' and cl1.isofficial = 'T' and cl2.language = 'French' and cl2.isofficial = 'T'
SQL = SELECT country.name FROM countrylanguage cl1 JOIN countrylanguage cl2 ON cl1.countrycode = cl2.countrycode JOIN country ON cl1.countrycode = country.code WHERE cl1.language = 'English' AND cl1.isofficial = 'T' AND cl2.language = 'French' AND cl2.isofficial = 'T'
natsql:
select _ from _ where @.@ = _ and @.@ = _ | select country.name from countrylanguage cl1 join countrylanguage cl2 on cl1.countrycode = cl2.countrycode join country on cl1.countrycode = country.code where cl1.language = 'English' and cl1.isofficial = 'T' and cl2.language = 'French' and cl2.isofficial = 'T'

SQL:
SELECT country.name FROM countrylanguage cl1 JOIN countrylanguage cl2 ON cl1.countrycode = cl2.countrycode JOIN country ON cl1.countrycode = country.code WHERE cl1.language = 'English' AND cl1.isofficial = 'T' AND cl2.language = 'French' AND cl2.isofficial = 'T'
self correction:
SELECT country.Name FROM countrylanguage AS cl1 JOIN country ON cl1.CountryCode = country.Code WHERE cl1.Language = 'English' AND cl1.IsOfficial = 'T' INTERSECT SELECT country.Name FROM countrylanguage AS cl2 JOIN country ON cl2.CountryCode = country.Code WHERE cl2.Language = 'French' AND cl2.IsOfficial = 'T'

index is 750
SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"
What is the number of distinct continents where Chinese is spoken?
schema_links:
What is the number of distinct continents where Chinese is spoken? | countrylanguage : countrylanguage.language ( Chinese ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.continent , country.name , country.region , country.code , country.surfacearea , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select count ( distinct _ ) from _ where _ = _ | select count ( distinct country.continent ) from countrylanguage where countrylanguage.language = 'Chinese'
SQL = SELECT count(DISTINCT continent) FROM countrylanguage WHERE language = 'Chinese'
natsql:
select count ( distinct _ ) from _ where _ = _ | select count ( distinct country.continent ) from countrylanguage where countrylanguage.language = 'Chinese'

SQL:
SELECT count(DISTINCT continent) FROM countrylanguage WHERE language = 'Chinese'
self correction:
SELECT COUNT(DISTINCT country.Continent) AS distinct_continents FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'Chinese'

index is 751
SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"
How many continents speak Chinese?
schema_links:
How many continents speak Chinese? | countrylanguage : countrylanguage.language ( Chinese ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.continent , country.code , country.name , country.region , country.surfacearea , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select count ( distinct _ ) from _ where _ | select count ( distinct country.continent ) from countrylanguage where countrylanguage.language = 'Chinese'
SQL = SELECT count(DISTINCT continent) FROM countrylanguage WHERE language = 'Chinese'
natsql:
select count ( distinct _ ) from _ where _ | select count ( distinct country.continent ) from countrylanguage where countrylanguage.language = 'Chinese'

SQL:
SELECT count(DISTINCT continent) FROM countrylanguage WHERE language = 'Chinese'
self correction:
SELECT COUNT(DISTINCT Continent) FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'Chinese'

index is 752
SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
What are the regions that use English or Dutch?
schema_links:
What are the regions that use English or Dutch? | countrylanguage : countrylanguage.language ( Dutch , English ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.region , country.continent , country.name , country.population , country.code , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select distinct _ from _ where _ in ( _ , _ ) | select distinct country.region from countrylanguage where countrylanguage.language in ('English', 'Dutch')
SQL = SELECT DISTINCT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language IN ('English', 'Dutch'))
natsql:
select distinct _ from _ where _ in ( _ , _ ) | select distinct country.region from countrylanguage where countrylanguage.language in ('English', 'Dutch')

SQL:
SELECT DISTINCT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language IN ('English', 'Dutch'))
self correction:
SELECT region FROM country WHERE code IN (   SELECT countrycode    FROM countrylanguage    WHERE language IN ('English', 'Dutch') ) GROUP BY region

index is 753
SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
Which regions speak Dutch or English?
schema_links:
Which regions speak Dutch or English? | country : country.region , country.continent , country.name , country.localname , country.population , country.* | countrylanguage : countrylanguage.language ( Dutch , English ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select distinct _ from _ where _ in ( _ , _ ) | select distinct country.region from country where countrylanguage.language = 'Dutch' or countrylanguage.language = 'English'
SQL = SELECT DISTINCT region FROM country WHERE country.code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch' OR language = 'English')
natsql:
select distinct _ from _ where _ in ( _ , _ ) | select distinct country.region from country where countrylanguage.language = 'Dutch' or countrylanguage.language = 'English'

SQL:
SELECT DISTINCT region FROM country WHERE country.code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch' OR language = 'English')
self correction:
SELECT region FROM country  WHERE country.Code IN  (SELECT CountryCode FROM countrylanguage  WHERE Language IN ('Dutch', 'English'))

index is 754
select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "english" and isofficial  =  "t" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "dutch" and isofficial  =  "t"
What are the countries where either English or Dutch is the official language ?
schema_links:
What are the countries where either English or Dutch is the official language ? | countrylanguage : countrylanguage.language ( Dutch , English ) , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | country : country.name , country.localname , country.continent , country.code , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.name , city.id , city.district , city.population , city.countrycode , city.*
natsql and SQL generation:
select distinct _ from _ where _ | select distinct country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' or countrylanguage.language = 'Dutch' and countrylanguage.isofficial = 'T'
natsql:
select distinct _ from _ where _ | select distinct country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language = 'English' or countrylanguage.language = 'Dutch' and countrylanguage.isofficial = 'T'
SQL:
SELECT DISTINCT country.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE (countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch') AND countrylanguage.isofficial = 'T'
self correction:
SELECT country.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE (countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch') AND countrylanguage.isofficial = 'T'

index is 755
SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND IsOfficial  =  "T" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch" AND IsOfficial  =  "T"
Which countries have either English or Dutch as an official language?
schema_links:
Which countries have either English or Dutch as an official language? | countrylanguage : countrylanguage.language ( Dutch , English ) , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | country : country.name , country.localname , country.continent , country.code , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql and SQL generation:
select distinct _ from _ where _ in ( _ , _ ) and _ = 'T' | select distinct country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language in ('English', 'Dutch') and countrylanguage.isofficial = 'T'
SQL = SELECT DISTINCT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language IN ('English', 'Dutch') AND isofficial = 'T')
natsql:
select distinct _ from _ where _ in ( _ , _ ) and _ = 'T' | select distinct country.name from countrylanguage join country on countrylanguage.countrycode = country.code where countrylanguage.language in ('English', 'Dutch') and countrylanguage.isofficial = 'T'

SQL:
SELECT DISTINCT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language IN ('English', 'Dutch') AND isofficial = 'T')
self correction:
SELECT DISTINCT Name FROM country WHERE Code IN (     SELECT CountryCode     FROM countrylanguage     WHERE Language IN ('English', 'Dutch')         AND IsOfficial = 'T' )

index is 756
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1
Which language is the most popular on the Asian continent?
schema_links:
Which language is the most popular on the Asian continent? | country : country.continent ( Asia ) , country.region , country.name , country.population , country.code , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ from _ where _ = _ and _ = _ group by _ order by sum ( _ ) desc limit _ | select countrylanguage.language from countrylanguage where countrylanguage.percentage = (select max(countrylanguage.percentage) from countrylanguage where countrylanguage.language in (select countrylanguage.language from countrylanguage where countrylanguage.countrycode in (select country.code from country where country.continent = 'Asia'))) and countrylanguage.countrycode in (select country.code from country where country.continent = 'Asia') group by countrylanguage.language
SQL = SELECT language FROM countrylanguage WHERE percentage = (SELECT max(percentage) FROM countrylanguage WHERE language IN (SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia'))) AND countrycode IN (SELECT code FROM country WHERE continent = 'Asia') GROUP BY language
natsql:
select _ from _ where _ = _ and _ = _ group by _ order by sum ( _ ) desc limit _ | select countrylanguage.language from countrylanguage where countrylanguage.percentage = (select max(countrylanguage.percentage) from countrylanguage where countrylanguage.language in (select countrylanguage.language from countrylanguage where countrylanguage.countrycode in (select country.code from country where country.continent = 'Asia'))) and countrylanguage.countrycode in (select country.code from country where country.continent = 'Asia') group by countrylanguage.language

SQL:
SELECT language FROM countrylanguage WHERE percentage = (SELECT max(percentage) FROM countrylanguage WHERE language IN (SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia'))) AND countrycode IN (SELECT code FROM country WHERE continent = 'Asia') GROUP BY language
self correction:
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY countrylanguage.Language HAVING MAX(countrylanguage.Percentage) = (   SELECT MAX(Percentage)   FROM countrylanguage   JOIN country ON countrylanguage.CountryCode = country.Code   WHERE country.Continent = 'Asia' )

index is 757
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1
What is the language that is used by the largest number of Asian nations?
schema_links:
What is the language that is used by the largest number of Asian nations? | country : country.continent ( Asia ) , country.name , country.region , country.code , country.population , country.* | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql and SQL generation:
select _ from _ where _ = ( select _ from _ where _ = max ( _ ) ) | select countrylanguage.language from countrylanguage where countrylanguage.countrycode in ( select country.code from country where country.continent = 'Asia' ) group by countrylanguage.language order by count ( * ) desc limit 1
SQL = SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia') GROUP BY language ORDER BY COUNT(*) DESC LIMIT 1
natsql:
select _ from _ where _ = ( select _ from _ where _ = max ( _ ) ) | select countrylanguage.language from countrylanguage where countrylanguage.countrycode in ( select country.code from country where country.continent = 'Asia' ) group by countrylanguage.language order by count ( * ) desc limit 1

SQL:
SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE continent = 'Asia') GROUP BY language ORDER BY COUNT(*) DESC LIMIT 1
self correction:
SELECT language FROM countrylanguage WHERE CountryCode IN (     SELECT Code     FROM country     WHERE Continent = 'Asia' ) GROUP BY language ORDER BY COUNT(*) DESC LIMIT 1

index is 758
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1
Which languages are spoken by only one country in republic governments?
schema_links:
Which languages are spoken by only one country in republic governments? | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.governmentform ( Republic ) , country.name , country.code , country.continent , country.region , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ from _ where _ and _ | select countrylanguage.language from countrylanguage where countrylanguage.countrycode in (select country.code from country where country.governmentform = 'Republic') group by countrylanguage.language having count(countrylanguage.countrycode) = 1
SQL = SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE governmentform = 'Republic') GROUP BY language HAVING count(countrycode) = 1
natsql:
select _ from _ where _ and _ | select countrylanguage.language from countrylanguage where countrylanguage.countrycode in (select country.code from country where country.governmentform = 'Republic') group by countrylanguage.language having count(countrylanguage.countrycode) = 1

SQL:
SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE governmentform = 'Republic') GROUP BY language HAVING count(countrycode) = 1
self correction:
SELECT language  FROM countrylanguage  WHERE countrycode IN (     SELECT code      FROM country      WHERE governmentform = 'Republic' )  GROUP BY language  HAVING COUNT(DISTINCT countrycode) = 1

index is 759
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1
What languages are only used by a single country with a republic government?
schema_links:
What languages are only used by a single country with a republic government? | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | country : country.governmentform ( Republic ) , country.name , country.region , country.code , country.continent , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select distinct _ from _ where _ and _ | select distinct countrylanguage.language from countrylanguage where countrylanguage.countrycode in (select country.code from country where country.governmentform = 'Republic') group by countrylanguage.language having count(*) = 1
SQL = SELECT DISTINCT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE governmentform = 'Republic') GROUP BY language HAVING count(*) = 1
natsql:
select distinct _ from _ where _ and _ | select distinct countrylanguage.language from countrylanguage where countrylanguage.countrycode in (select country.code from country where country.governmentform = 'Republic') group by countrylanguage.language having count(*) = 1

SQL:
SELECT DISTINCT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE governmentform = 'Republic') GROUP BY language HAVING count(*) = 1
self correction:
SELECT language FROM countrylanguage WHERE countrycode IN (     SELECT code     FROM country     WHERE governmentform = 'Republic' ) GROUP BY language HAVING COUNT(*) = 1

index is 760
SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1
Find the city with the largest population that uses English.
schema_links:
Find the city with the largest population that uses English. | city : city.name , city.population , city.id , city.district , city.countrycode , city.* | countrylanguage : countrylanguage.language ( English ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.name , country.population , country.code , country.continent , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ from _ where _ and _ = max ( _ ) | select city.name from city where city.population = ( select max ( city.population ) from city ) and countrylanguage.language = 'English'
SQL = SELECT name FROM city WHERE population  =  (SELECT max(population) FROM city) AND CountryCode IN (SELECT code FROM countrylanguage WHERE Language  =  'English')
natsql:
select _ from _ where _ and _ = max ( _ ) | select city.name from city where city.population = ( select max ( city.population ) from city ) and countrylanguage.language = 'English'

SQL:
SELECT name FROM city WHERE population  =  (SELECT max(population) FROM city) AND CountryCode IN (SELECT code FROM countrylanguage WHERE Language  =  'English')
self correction:
SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE city.Population = (   SELECT MAX(city.Population)   FROM city   JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode   WHERE countrylanguage.Language = 'English' )

index is 761
SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1
What is the most populace city that speaks English?
schema_links:
What is the most populace city that speaks English? | countrylanguage : countrylanguage.language ( English ) , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | city : city.population , city.name , city.id , city.district , city.countrycode , city.* | country : country.name , country.region , country.population , country.code , country.continent , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ from _ where _ = ( select _ from _ where _ = _ ) and _ = ( select max ( _ ) from _ where _ = ( select _ from _ where _ = _ ) ) | select city.name from city where city.countrycode = ( select country.code from countrylanguage where countrylanguage.language = 'English' and countrylanguage.isofficial = 'T' ) and city.population = ( select max ( city.population ) from city where city.countrycode = ( select country.code from countrylanguage where countrylanguage.language = 'English' and countrylanguage.isofficial = 'T' ) )
SQL = SELECT name FROM city WHERE countrycode  =  (SELECT code FROM countrylanguage WHERE language  =  'English' AND isofficial  =  'T') AND population  =  (SELECT max(population) FROM city WHERE countrycode  =  (SELECT code FROM countrylanguage WHERE language  =  'English' AND isofficial  =  'T'))
natsql:
select _ from _ where _ = ( select _ from _ where _ = _ ) and _ = ( select max ( _ ) from _ where _ = ( select _ from _ where _ = _ ) ) | select city.name from city where city.countrycode = ( select country.code from countrylanguage where countrylanguage.language = 'English' and countrylanguage.isofficial = 'T' ) and city.population = ( select max ( city.population ) from city where city.countrycode = ( select country.code from countrylanguage where countrylanguage.language = 'English' and countrylanguage.isofficial = 'T' ) )

SQL:
SELECT name FROM city WHERE countrycode  =  (SELECT code FROM countrylanguage WHERE language  =  'English' AND isofficial  =  'T') AND population  =  (SELECT max(population) FROM city WHERE countrycode  =  (SELECT code FROM countrylanguage WHERE language  =  'English' AND isofficial  =  'T'))
self correction:
SELECT city.Name  FROM city  JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode  JOIN country ON city.CountryCode = country.Code  WHERE countrylanguage.Language = 'English'  AND countrylanguage.IsOfficial = 'T'  ORDER BY city.Population DESC  LIMIT 1

index is 762
SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1
Find the name, population and expected life length of asian country with the largest area?
schema_links:
Find the name, population and expected life length of asian country with the largest area? | country : country.continent ( Asia ) , country.lifeexpectancy , country.name , country.surfacearea , country.population , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ , _ , _ from _ where _ = ( select max ( _ ) from _ where _ = _ ) | select country.name , country.population , country.lifeexpectancy from country where country.continent = 'Asia' and country.surfacearea = ( select max ( country.surfacearea ) from country where country.continent = 'Asia' )
SQL = SELECT name , population , lifeexpectancy FROM country WHERE continent = 'Asia' AND surfacearea = (SELECT MAX(surfacearea) FROM country WHERE continent = 'Asia')
natsql:
select _ , _ , _ from _ where _ = ( select max ( _ ) from _ where _ = _ ) | select country.name , country.population , country.lifeexpectancy from country where country.continent = 'Asia' and country.surfacearea = ( select max ( country.surfacearea ) from country where country.continent = 'Asia' )

SQL:
SELECT name , population , lifeexpectancy FROM country WHERE continent = 'Asia' AND surfacearea = (SELECT MAX(surfacearea) FROM country WHERE continent = 'Asia')
self correction:
SELECT country.name, country.population, country.lifeexpectancy FROM country WHERE country.continent = 'Asia' AND country.surfacearea = (     SELECT MAX(country.surfacearea)     FROM country     WHERE country.continent = 'Asia' )

index is 763
SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1
What are the name, population, and life expectancy of the largest Asian country by land?
schema_links:
What are the name, population, and life expectancy of the largest Asian country by land? | country : country.continent ( Asia ) , country.lifeexpectancy , country.name , country.population , country.surfacearea , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ , _ , _ from _ where continent = 'Asia' order by surfacearea desc limit _ | select country.name , country.population , country.lifeexpectancy from country where continent = 'Asia' order by surfacearea desc limit 1
SQL = SELECT name , population , lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1
natsql:
select _ , _ , _ from _ where continent = 'Asia' order by surfacearea desc limit _ | select country.name , country.population , country.lifeexpectancy from country where continent = 'Asia' order by surfacearea desc limit 1

SQL:
SELECT name , population , lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1
self correction:
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = 'Asia' ORDER BY country.SurfaceArea DESC LIMIT 1

index is 764
SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
What is average life expectancy in the countries where English is not the official language?
schema_links:
What is average life expectancy in the countries where English is not the official language? | countrylanguage : countrylanguage.language ( English ) , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | country : country.lifeexpectancy , country.name , country.code , country.continent , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql and SQL generation:
select avg ( _ ) from _ where _ <> 'English' | select avg ( country.lifeexpectancy ) from country where country.code not in ( select countrycode from countrylanguage where language = 'English' and isofficial = true )
SQL = SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = true)
natsql:
select avg ( _ ) from _ where _ <> 'English' | select avg ( country.lifeexpectancy ) from country where country.code not in ( select countrycode from countrylanguage where language = 'English' and isofficial = true )

SQL:
SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = true)
self correction:
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 1)

index is 765
SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
Give the mean life expectancy of countries in which English is not the official language.
schema_links:
Give the mean life expectancy of countries in which English is not the official language. | countrylanguage : countrylanguage.language ( English ) , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | country : country.lifeexpectancy , country.name , country.code , country.continent , country.region , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select avg ( country.lifeexpectancy ) from country where country.code not in ( select countrylanguage.countrycode from countrylanguage where countrylanguage.language = 'English' and countrylanguage.isofficial = true )
SQL = SELECT avg(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')
natsql:
select avg ( country.lifeexpectancy ) from country where country.code not in ( select countrylanguage.countrycode from countrylanguage where countrylanguage.language = 'English' and countrylanguage.isofficial = true )

SQL:
SELECT avg(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')
self correction:
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language != 'English' AND IsOfficial = 'T')

index is 766
SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")
What is the total number of people living in the nations that do not use English?
schema_links:
What is the total number of people living in the nations that do not use English? | countrylanguage : countrylanguage.language ( English ) , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | country : country.population , country.name , country.localname , country.code , country.continent , country.* | city : city.name , city.population , city.id , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select sum ( _ ) from _ where _ not in ( select _ from _ where _ ) | select sum(country.population) from country where country.code not in (select countrylanguage.countrycode from countrylanguage where countrylanguage.language = 'English')
natsql:
select sum ( _ ) from _ where _ not in ( select _ from _ where _ ) | select sum(country.population) from country where country.code not in (select countrylanguage.countrycode from countrylanguage where countrylanguage.language = 'English')
SQL:
select sum ( _ ) from _ where _ not in ( select _ from _ where _ ) | select sum(country.population) from country where country.code not in (select countrylanguage.countrycode from countrylanguage where countrylanguage.language = 'English')
self correction:
SELECT SELECT SUM(country.Population) FROM country WHERE country.Code NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = 'English')

index is 767
SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")
How many people live in countries that do not speak English?
schema_links:
How many people live in countries that do not speak English? | countrylanguage : countrylanguage.language ( English ) , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | country : country.population , country.name , country.code , country.continent , country.region , country.* | city : city.population , city.id , city.name , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select sum ( _ ) from _ where _ not in ( select _ from _ where _ = 'English' ) | select sum(country.population) from country where country.code not in (select countrylanguage.countrycode from countrylanguage where countrylanguage.language = 'English')
SQL = SELECT sum(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')
natsql:
select sum ( _ ) from _ where _ not in ( select _ from _ where _ = 'English' ) | select sum(country.population) from country where country.code not in (select countrylanguage.countrycode from countrylanguage where countrylanguage.language = 'English')

SQL:
SELECT sum(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')
self correction:
SELECT sum(Population)  FROM country  WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')

index is 768
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"
What is the official language spoken in the country whose head of state is Beatrix?
schema_links:
What is the official language spoken in the country whose head of state is Beatrix? | countrylanguage : countrylanguage.isofficial , countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.* | country : country.headofstate ( Beatrix ) , country.name , country.region , country.population , country.code , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql and SQL generation:
select _ from _ where _ = _ | select countrylanguage.language from countrylanguage where country.headofstate = 'Beatrix'
SQL = SELECT language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.headofstate = 'Beatrix'
natsql:
select _ from _ where _ = _ | select countrylanguage.language from countrylanguage where country.headofstate = 'Beatrix'

SQL:
SELECT language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.headofstate = 'Beatrix'
self correction:
SELECT countrylanguage.Language  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T' 

index is 769
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"
What is the official language used in the country the name of whose head of state is Beatrix.
schema_links:
What is the official language used in the country the name of whose head of state is Beatrix. | countrylanguage : countrylanguage.isofficial , countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.* | country : country.headofstate ( Beatrix ) , country.name , country.continent , country.population , country.code , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ from _ where _ = ( select _ from _ where _ = _ ) | select countrylanguage.language from countrylanguage where countrylanguage.isofficial = 'T' and countrylanguage.countrycode = (select country.code from country where country.headofstate = 'Beatrix') 
SQL = SELECT language FROM countrylanguage WHERE isofficial = 'T' AND countrycode = (SELECT code FROM country WHERE headofstate = 'Beatrix')
natsql:
select _ from _ where _ = ( select _ from _ where _ = _ ) | select countrylanguage.language from countrylanguage where countrylanguage.isofficial = 'T' and countrylanguage.countrycode = (select country.code from country where country.headofstate = 'Beatrix') 

SQL:
SELECT language FROM countrylanguage WHERE isofficial = 'T' AND countrycode = (SELECT code FROM country WHERE headofstate = 'Beatrix')
self correction:
SELECT countrylanguage.Language  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  WHERE countrylanguage.IsOfficial = 'T'  AND country.Name = (SELECT Name FROM country WHERE country.HeadOfState = 'Beatrix')

index is 770
SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"
What is the total number of unique official languages spoken in the countries that are founded before 1930?
schema_links:
What is the total number of unique official languages spoken in the countries that are founded before 1930? | countrylanguage : countrylanguage.isofficial , countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | country : country.indepyear , country.name , country.continent , country.population , country.headofstate , country.* | city : city.id , city.name , city.countrycode , city.district , city.population , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select count ( distinct _ ) from _ where _ < _ | select count ( distinct countrylanguage.language ) from countrylanguage join country on countrylanguage.countrycode = country.code where country.indepyear < 1930 and countrylanguage.isofficial = 'T'
SQL = SELECT count(DISTINCT language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.IndepYear < 1930 AND countrylanguage.IsOfficial = 'T'
natsql:
select count ( distinct _ ) from _ where _ < _ | select count ( distinct countrylanguage.language ) from countrylanguage join country on countrylanguage.countrycode = country.code where country.indepyear < 1930 and countrylanguage.isofficial = 'T'

SQL:
SELECT count(DISTINCT language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.IndepYear < 1930 AND countrylanguage.IsOfficial = 'T'
self correction:
SELECT COUNT(DISTINCT countrylanguage.Language) AS TotalUniqueLanguages FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.IndepYear < 1930 AND countrylanguage.IsOfficial = 'T'

index is 771
SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"
For the countries founded before 1930, what is the total number of distinct official languages?
schema_links:
For the countries founded before 1930, what is the total number of distinct official languages? | country : country.indepyear , country.name , country.continent , country.code , country.localname , country.* | countrylanguage : countrylanguage.isofficial , countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.id , city.name , city.countrycode , city.district , city.population , city.*
natsql and SQL generation:
select count ( distinct _ ) from _ where _ < _ | select count ( distinct countrylanguage.language ) from country join countrylanguage on country.code = countrylanguage.countrycode where country.indepyear < 1930
SQL = SELECT count(DISTINCT language) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE indepyear < 1930
natsql:
select count ( distinct _ ) from _ where _ < _ | select count ( distinct countrylanguage.language ) from country join countrylanguage on country.code = countrylanguage.countrycode where country.indepyear < 1930

SQL:
SELECT count(DISTINCT language) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE indepyear < 1930
self correction:
SELECT count(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 1930

index is 772
SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")
What are the countries that have greater surface area than any country in Europe?
schema_links:
What are the countries that have greater surface area than any country in Europe? | country : country.continent ( Europe ) , country.surfacearea , country.name , country.localname , country.region , country.* | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql and SQL generation:
select _ from _ where @.@ > all ( select @.@ from _ where _ = 'Europe' ) | select country.name from country where country.surfacearea > all ( select country.surfacearea from country where country.continent = 'Europe' )
SQL = SELECT name FROM country WHERE surfacearea > ALL (SELECT surfacearea FROM country WHERE continent = 'Europe')
natsql:
select _ from _ where @.@ > all ( select @.@ from _ where _ = 'Europe' ) | select country.name from country where country.surfacearea > all ( select country.surfacearea from country where country.continent = 'Europe' )

SQL:
SELECT name FROM country WHERE surfacearea > ALL (SELECT surfacearea FROM country WHERE continent = 'Europe')
self correction:
SELECT name  FROM country  WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')

index is 773
SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")
Which countries have greater area than that of any country in Europe?
schema_links:
Which countries have greater area than that of any country in Europe? | country : country.continent ( Europe ) , country.surfacearea , country.name , country.localname , country.region , country.* | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql and SQL generation:
select distinct _ from _ where _ > ( select max ( _ ) from _ where _ = _ ) | select distinct country.name from country where country.surfacearea > ( select max ( country.surfacearea ) from country where country.continent = 'Europe' )
SQL = SELECT DISTINCT name FROM country WHERE surfacearea > (SELECT max(surfacearea) FROM country WHERE continent = 'Europe')
natsql:
select distinct _ from _ where _ > ( select max ( _ ) from _ where _ = _ ) | select distinct country.name from country where country.surfacearea > ( select max ( country.surfacearea ) from country where country.continent = 'Europe' )

SQL:
SELECT DISTINCT name FROM country WHERE surfacearea > (SELECT max(surfacearea) FROM country WHERE continent = 'Europe')
self correction:
SELECT DISTINCT name FROM country WHERE surfacearea > (   SELECT MAX(surfacearea)   FROM country   WHERE continent = 'Europe' )

index is 774
SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  "Asia")
What are the African countries that have a  population less than any country in Asia?
schema_links:
What are the African countries that have a  population less than any country in Asia? | country : country.continent ( Africa , Asia ) , country.name , country.population , country.localname , country.code , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ from _ where @.@ < any ( select @.@ from @ where @.@ = _ ) and @.@ = _ | select country.name from country where country.continent = 'Africa' and country.population < any (select country.population from country where country.continent = 'Asia')
natsql:
select _ from _ where @.@ < any ( select @.@ from @ where @.@ = _ ) and @.@ = _ | select country.name from country where country.continent = 'Africa' and country.population < any (select country.population from country where country.continent = 'Asia')
SQL:
select _ from _ where @.@ < any ( select @.@ from @ where @.@ = _ ) and @.@ = _ | select country.name from country where country.continent = 'Africa' and country.population < any (select country.population from country where country.continent = 'Asia')
self correction:
SELECT country.Name  FROM country  WHERE country.Continent = 'Africa'  AND country.Population < ANY (     SELECT country.Population      FROM country      WHERE country.Continent = 'Asia' )

index is 775
SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  "Asia")
Which African countries have a smaller population than that of any country in Asia?
schema_links:
Which African countries have a smaller population than that of any country in Asia? | country : country.continent ( Africa , Asia ) , country.population , country.name , country.code , country.region , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ from _ where _.population < any ( select _.population from _ where _.continent = _ ) and _.continent = _ | select country.name from country where country.continent = 'Africa' and country.population < any (select population from country where continent = 'Asia')
SQL = SELECT name FROM country WHERE continent = 'Africa' AND population < ANY (SELECT population FROM country WHERE continent = 'Asia')
natsql:
select _ from _ where _.population < any ( select _.population from _ where _.continent = _ ) and _.continent = _ | select country.name from country where country.continent = 'Africa' and country.population < any (select population from country where continent = 'Asia')

SQL:
SELECT name FROM country WHERE continent = 'Africa' AND population < ANY (SELECT population FROM country WHERE continent = 'Asia')
self correction:
SELECT country.Name FROM country WHERE country.Continent = 'Africa' AND country.Population < (SELECT MIN(Population) FROM country WHERE country.Continent = 'Asia')

index is 776
SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  "Africa")
Which Asian countries have a population that is larger than any country in Africa?
schema_links:
Which Asian countries have a population that is larger than any country in Africa? | country : country.continent ( Africa , Asia ) , country.population , country.name , country.region , country.code , country.* | city : city.population , city.id , city.name , city.district , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ from _ where @.@ > all ( select _ from _ where @.@ = _ ) and @.@ = _ or @.@ = _ | select country.name from country where country.continent = 'Asia' and country.population > all (select population from country where continent = 'Africa')
natsql:
select _ from _ where @.@ > all ( select _ from _ where @.@ = _ ) and @.@ = _ or @.@ = _ | select country.name from country where country.continent = 'Asia' and country.population > all (select population from country where continent = 'Africa')
SQL:
select _ from _ where @.@ > all ( select _ from _ where @.@ = _ ) and @.@ = _ or @.@ = _ | select country.name from country where country.continent = 'Asia' and country.population > all (select population from country where continent = 'Africa')
self correction:
SELECT country.name  FROM country WHERE country.continent = 'Asia'    AND country.population > ALL (SELECT population                                  FROM country                                  WHERE continent = 'Africa')

index is 777
SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  "Africa")
What are the Asian countries which have a population larger than that of any country in Africa?
schema_links:
What are the Asian countries which have a population larger than that of any country in Africa? | country : country.continent ( Africa , Asia ) , country.name , country.population , country.region , country.localname , country.* | city : city.population , city.id , city.name , city.district , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select distinct _ from _ where _.population > ( select max ( _.population ) from _ where _.continent = _ ) | select distinct country.name from country where country.continent = 'Asia' and country.population > (select max(country.population) from country where country.continent = 'Africa')
SQL = SELECT DISTINCT name FROM country WHERE continent = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE continent = 'Africa')
natsql:
select distinct _ from _ where _.population > ( select max ( _.population ) from _ where _.continent = _ ) | select distinct country.name from country where country.continent = 'Asia' and country.population > (select max(country.population) from country where country.continent = 'Africa')

SQL:
SELECT DISTINCT name FROM country WHERE continent = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE continent = 'Africa')
self correction:
SELECT name FROM country WHERE continent = 'Asia'   AND population > (     SELECT MAX(population)     FROM country     WHERE continent = 'Africa'   )

index is 778
SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
What are the country codes for countries that do not speak English?
schema_links:
What are the country codes for countries that do not speak English? | countrylanguage : countrylanguage.language ( English ) , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | country : country.name , country.code , country.continent , country.region , country.population , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ from _ where @.@ != _ | select country.code from country where country.code not in (select countrylanguage.countrycode from countrylanguage where countrylanguage.language = 'English')
SQL = SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')
natsql:
select _ from _ where @.@ != _ | select country.code from country where country.code not in (select countrylanguage.countrycode from countrylanguage where countrylanguage.language = 'English')

SQL:
SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')
self correction:
SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English');

index is 779
SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
Return the country codes for countries that do not speak English.
schema_links:
Return the country codes for countries that do not speak English. | countrylanguage : countrylanguage.language ( English ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.name , country.code , country.region , country.population , country.localname , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ where _ = _ ) | select country.code from country where country.code not in ( select countrylanguage.countrycode from countrylanguage where countrylanguage.language = 'English' )
SQL = SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')
natsql:
select _ from _ where _ not in ( select _ from _ where _ = _ ) | select country.code from country where country.code not in ( select countrylanguage.countrycode from countrylanguage where countrylanguage.language = 'English' )

SQL:
SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')
self correction:
SELECT country.Code  FROM country  WHERE country.Code NOT IN (     SELECT countrylanguage.CountryCode      FROM countrylanguage      WHERE countrylanguage.Language = 'English' )

index is 780
SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"
What are the country codes of countries where people use languages other than English?
schema_links:
What are the country codes of countries where people use languages other than English? | countrylanguage : countrylanguage.language ( English ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.name , country.code , country.continent , country.region , country.population , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select distinct _ from _ where _ <> _ | select distinct countrylanguage.countrycode from countrylanguage where countrylanguage.language <> 'English'
SQL = SELECT DISTINCT countrycode FROM countrylanguage WHERE language <> 'English'
natsql:
select distinct _ from _ where _ <> _ | select distinct countrylanguage.countrycode from countrylanguage where countrylanguage.language <> 'English'

SQL:
SELECT DISTINCT countrycode FROM countrylanguage WHERE language <> 'English'
self correction:
SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language <> 'English'

index is 781
SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"
Give the country codes for countries in which people speak langauges that are not English.
schema_links:
Give the country codes for countries in which people speak langauges that are not English. | countrylanguage : countrylanguage.language ( English ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.name , country.code , country.continent , country.region , country.population , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ where _ ) | select country.code from country where country.code not in ( select countrylanguage.countrycode from countrylanguage where countrylanguage.language = 'English' )
SQL = SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')
natsql:
select _ from _ where _ not in ( select _ from _ where _ ) | select country.code from country where country.code not in ( select countrylanguage.countrycode from countrylanguage where countrylanguage.language = 'English' )

SQL:
SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')
self correction:
SELECT country.Code  FROM country  LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language <> 'English' OR countrylanguage.Language IS NULL;

index is 782
SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
What are the codes of the countries that do not speak English and whose government forms are not Republic?
schema_links:
What are the codes of the countries that do not speak English and whose government forms are not Republic? | countrylanguage : countrylanguage.language ( English ) , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | country : country.governmentform ( Republic ) , country.code , country.name , country.population , country.localname , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ from _ where @.@ != _ and @.@ != _ | select country.code from countrylanguage where language != 'English' and country.code not in (select code from country where governmentform = 'Republic')
SQL = SELECT code FROM countrylanguage WHERE language != 'English' AND code NOT IN (SELECT code FROM country WHERE governmentform = 'Republic')
natsql:
select _ from _ where @.@ != _ and @.@ != _ | select country.code from countrylanguage where language != 'English' and country.code not in (select code from country where governmentform = 'Republic')

SQL:
SELECT code FROM countrylanguage WHERE language != 'English' AND code NOT IN (SELECT code FROM country WHERE governmentform = 'Republic')
self correction:
SELECT countrylanguage.CountryCode  FROM countrylanguage  WHERE Language != 'English'  AND CountryCode NOT IN (SELECT Code FROM country WHERE GovernmentForm != 'Republic')

index is 783
SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
Return the codes of countries that do not speak English and do not have Republics for governments.
schema_links:
Return the codes of countries that do not speak English and do not have Republics for governments. | countrylanguage : countrylanguage.language ( English ) , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | country : country.governmentform ( Republic ) , country.code , country.name , country.localname , country.continent , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ where _ = _ ) and _ not in ( select _ from _ where _ = _ ) | select country.code from country where country.code not in ( select countrylanguage.countrycode from countrylanguage where countrylanguage.language = 'English' ) and country.governmentform != 'Republic'
SQL = SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English') AND governmentform != 'Republic'
natsql:
select _ from _ where _ not in ( select _ from _ where _ = _ ) and _ not in ( select _ from _ where _ = _ ) | select country.code from country where country.code not in ( select countrylanguage.countrycode from countrylanguage where countrylanguage.language = 'English' ) and country.governmentform != 'Republic'

SQL:
SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English') AND governmentform != 'Republic'
self correction:
SELECT code FROM country WHERE code NOT IN (     SELECT countrycode FROM countrylanguage WHERE language = 'English' ) AND governmentform <> 'Republic'

index is 784
SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
Which cities are in European countries where English is not the official language?
schema_links:
Which cities are in European countries where English is not the official language? | country : country.continent ( Europe ) , country.name , country.code , country.region , country.population , country.* | city : city.name , city.id , city.countrycode , city.district , city.population , city.* | countrylanguage : countrylanguage.language ( English ) , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select distinct _ from _ where _ and _ | select distinct city.name from city, country, countrylanguage where city.countrycode = country.code and country.continent = 'Europe' and countrylanguage.countrycode = country.code and countrylanguage.language <> 'English'
SQL = SELECT DISTINCT city.name FROM city, country, countrylanguage WHERE city.CountryCode = country.Code AND country.Continent = 'Europe' AND countrylanguage.CountryCode = country.Code AND countrylanguage.Language <> 'English'
natsql:
select distinct _ from _ where _ and _ | select distinct city.name from city, country, countrylanguage where city.countrycode = country.code and country.continent = 'Europe' and countrylanguage.countrycode = country.code and countrylanguage.language <> 'English'

SQL:
SELECT DISTINCT city.name FROM city, country, countrylanguage WHERE city.CountryCode = country.Code AND country.Continent = 'Europe' AND countrylanguage.CountryCode = country.Code AND countrylanguage.Language <> 'English'
self correction:
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language <> 'English'

index is 785
SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
What are the names of cities in Europe for which English is not the official language?
schema_links:
What are the names of cities in Europe for which English is not the official language? | country : country.continent ( Europe ) , country.name , country.region , country.code , country.population , country.* | countrylanguage : countrylanguage.language ( English ) , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | city : city.name , city.id , city.countrycode , city.district , city.population , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select distinct _ from _ where _ and _ | select distinct city.name from city, country, countrylanguage where country.continent = 'Europe' and countrylanguage.language <> 'English' and country.code = countrylanguage.countrycode and city.countrycode = country.code
SQL = SELECT DISTINCT name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Europe' AND countrylanguage.language <> 'English'
natsql:
select distinct _ from _ where _ and _ | select distinct city.name from city, country, countrylanguage where country.continent = 'Europe' and countrylanguage.language <> 'English' and country.code = countrylanguage.countrycode and city.countrycode = country.code

SQL:
SELECT DISTINCT name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Europe' AND countrylanguage.language <> 'English'
self correction:
SELECT name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.Continent = 'Europe'  AND countrylanguage.Language <> 'English'

index is 786
select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  "asia"
Which unique cities are in Asian countries where Chinese is the official language ?
schema_links:
Which unique cities are in Asian countries where Chinese is the official language ? | city : city.name , city.id , city.countrycode , city.district , city.population , city.* | country : country.continent ( Asia ) , country.name , country.code , country.region , country.population , country.* | countrylanguage : countrylanguage.language ( Chinese ) , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select distinct _ from _ where _ and _ | select distinct city.name from city, country, countrylanguage where country.continent = 'Asia' and countrylanguage.language = 'Chinese' and countrylanguage.isofficial = 'T' and city.countrycode = country.code
SQL = SELECT DISTINCT name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE country.continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
natsql:
select distinct _ from _ where _ and _ | select distinct city.name from city, country, countrylanguage where country.continent = 'Asia' and countrylanguage.language = 'Chinese' and countrylanguage.isofficial = 'T' and city.countrycode = country.code

SQL:
SELECT DISTINCT name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE country.continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
self correction:
SELECT DISTINCT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode  WHERE country.Continent = 'Asia'  AND countrylanguage.Language = 'Chinese'  AND countrylanguage.IsOfficial = 'T'

index is 787
SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  "Asia"
Return the different names of cities that are in Asia and for which Chinese is the official language.
schema_links:
Return the different names of cities that are in Asia and for which Chinese is the official language. | country : country.continent ( Asia ) , country.region , country.name , country.code , country.population , country.* | countrylanguage : countrylanguage.language ( Chinese ) , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | city : city.name , city.id , city.countrycode , city.district , city.population , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select distinct _ from _ where _ and _ | select distinct city.name from city join country on city.countrycode = country.code join countrylanguage on country.code = countrylanguage.countrycode where country.continent = 'Asia' and countrylanguage.language = 'Chinese' and countrylanguage.isofficial = 'T'
SQL = SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'
natsql:
select distinct _ from _ where _ and _ | select distinct city.name from city join country on city.countrycode = country.code join countrylanguage on country.code = countrylanguage.countrycode where country.continent = 'Asia' and countrylanguage.language = 'Chinese' and countrylanguage.isofficial = 'T'

SQL:
SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T'
self correction:
SELECT DISTINCT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.Continent = 'Asia'    AND countrylanguage.Language = 'Chinese'    AND countrylanguage.IsOfficial = 'T'

index is 788
SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1
What are the name, independence year, and surface area of the country with the smallest population?
schema_links:
What are the name, independence year, and surface area of the country with the smallest population? | country : country.surfacearea , country.indepyear , country.name , country.population , country.localname , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.name ( Independence ) , city.population , city.id , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ , _ , _ from _ where _ = ( select min ( _ ) from _ ) | select country.name , country.indepyear , country.surfacearea from country where country.population = ( select min ( country.population ) from country )
SQL = SELECT name , indepyear , surfacearea FROM country WHERE population  =  (SELECT min(population) FROM country)
natsql:
select _ , _ , _ from _ where _ = ( select min ( _ ) from _ ) | select country.name , country.indepyear , country.surfacearea from country where country.population = ( select min ( country.population ) from country )

SQL:
SELECT name , indepyear , surfacearea FROM country WHERE population  =  (SELECT min(population) FROM country)
self correction:
SELECT name, indepyear, surfacearea FROM country WHERE population = (   SELECT MIN(population)   FROM country )

index is 789
SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1
Give the name, year of independence, and surface area of the country that has the lowest population.
schema_links:
Give the name, year of independence, and surface area of the country that has the lowest population. | country : country.surfacearea , country.indepyear , country.name , country.population , country.localname , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.name ( Independence ) , city.id , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ , _ , _ from _ where _ = ( select min ( _ ) from _ ) | select country.name , country.indepyear , country.surfacearea from country where country.population = ( select min ( country.population ) from country )
SQL = SELECT name ,  indepyear ,  surfacearea FROM country WHERE population  =  (SELECT min(population) FROM country)
natsql:
select _ , _ , _ from _ where _ = ( select min ( _ ) from _ ) | select country.name , country.indepyear , country.surfacearea from country where country.population = ( select min ( country.population ) from country )

SQL:
SELECT name ,  indepyear ,  surfacearea FROM country WHERE population  =  (SELECT min(population) FROM country)
self correction:
SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT min(population) FROM country)

index is 790
SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
What are the population, name and leader of the country with the largest area?
schema_links:
What are the population, name and leader of the country with the largest area? | country : country.surfacearea , country.name , country.population , country.headofstate , country.localname , country.* | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | city : city.population , city.name , city.id , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ from _ order by _ desc limit _ | select country.population , country.name , country.headofstate from country order by country.surfacearea desc limit 1
SQL = SELECT population , name , headofstate FROM country ORDER BY surfacearea DESC LIMIT 1
natsql:
select _ from _ order by _ desc limit _ | select country.population , country.name , country.headofstate from country order by country.surfacearea desc limit 1

SQL:
SELECT population , name , headofstate FROM country ORDER BY surfacearea DESC LIMIT 1
self correction:
SELECT population, name, headofstate FROM country WHERE surfacearea = (   SELECT MAX(surfacearea)   FROM country )

index is 791
SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
Give the name, population, and head of state for the country that has the largest area.
schema_links:
Give the name, population, and head of state for the country that has the largest area. | country : country.headofstate , country.surfacearea , country.name , country.population , country.continent , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.population , city.id , city.name , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ from _ order by _ desc limit _ | select country.name, country.population, country.headofstate from country order by country.surfacearea desc limit 1
SQL = SELECT name, population, headofstate FROM country ORDER BY surfacearea DESC LIMIT 1
natsql:
select _ from _ order by _ desc limit _ | select country.name, country.population, country.headofstate from country order by country.surfacearea desc limit 1

SQL:
SELECT name, population, headofstate FROM country ORDER BY surfacearea DESC LIMIT 1
self correction:
SELECT country.Name, country.Population, country.HeadOfState FROM country ORDER BY country.SurfaceArea DESC LIMIT 1

index is 792
SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2
Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.
schema_links:
Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages. | country : country.name , country.code , country.continent , country.population , country.localname , country.* | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql and SQL generation:
select _ , count ( _ ) from _ where count ( _ ) >= _ group by _ | select country.name , count ( countrylanguage.language ) from country join countrylanguage on country.code = countrylanguage.countrycode group by country.name having count ( countrylanguage.language ) >= 3
SQL = SELECT country.name , COUNT(countrylanguage.language) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING COUNT(countrylanguage.language) >= 3
natsql:
select _ , count ( _ ) from _ where count ( _ ) >= _ group by _ | select country.name , count ( countrylanguage.language ) from country join countrylanguage on country.code = countrylanguage.countrycode group by country.name having count ( countrylanguage.language ) >= 3

SQL:
SELECT country.name , COUNT(countrylanguage.language) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING COUNT(countrylanguage.language) >= 3
self correction:
SELECT country.Name, COUNT(countrylanguage.Language) AS LanguageCount  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  GROUP BY country.Name  HAVING LanguageCount >= 3

index is 793
SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2
What are the names of countries that speak more than 2 languages, as well as how many languages they speak?
schema_links:
What are the names of countries that speak more than 2 languages, as well as how many languages they speak? | country : country.name , country.localname , country.code , country.population , country.headofstate , country.* | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ having count ( _ ) > _ | select country.name , count ( countrylanguage.language ) from country join countrylanguage on country.code = countrylanguage.countrycode group by country.name having count ( countrylanguage.language ) > 2
SQL = SELECT country.name , count(countrylanguage.language) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING count(countrylanguage.language) > 2
natsql:
select _ , count ( _ ) from _ group by _ having count ( _ ) > _ | select country.name , count ( countrylanguage.language ) from country join countrylanguage on country.code = countrylanguage.countrycode group by country.name having count ( countrylanguage.language ) > 2

SQL:
SELECT country.name , count(countrylanguage.language) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING count(countrylanguage.language) > 2
self correction:
SELECT country.Name, COUNT(DISTINCT countrylanguage.Language) AS LanguageCount FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING LanguageCount > 2

index is 794
SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District
Find the number of cities in each district whose population is greater than the average population of cities?
schema_links:
Find the number of cities in each district whose population is greater than the average population of cities? | city : city.district , city.population , city.id , city.name , city.countrycode , city.* | country : country.name , country.code , country.continent , country.region , country.population , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql and SQL generation:
select _ , count ( _ ) from _ where _ > ( select avg ( _ ) from _ ) group by _ | select city.district , count ( city.id ) from city where city.population > ( select avg ( city.population ) from city ) group by city.district
SQL = SELECT district ,  count(id) FROM city GROUP BY district HAVING population  >  (SELECT avg(population) FROM city)
natsql:
select _ , count ( _ ) from _ where _ > ( select avg ( _ ) from _ ) group by _ | select city.district , count ( city.id ) from city where city.population > ( select avg ( city.population ) from city ) group by city.district

SQL:
SELECT district ,  count(id) FROM city GROUP BY district HAVING population  >  (SELECT avg(population) FROM city)
self correction:
SELECT district, COUNT(ID) FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district

index is 795
SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District
How many cities in each district have a population that is above the average population across all cities?
schema_links:
How many cities in each district have a population that is above the average population across all cities? | city : city.district , city.population , city.id , city.name , city.countrycode , city.* | country : country.name , country.population , country.code , country.continent , country.region , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql and SQL generation:
select count ( _ ) , _ from _ where @.@ > avg ( @ ) group by _ | select count ( city.* ) , city.district from city where city.population > (SELECT avg(population) FROM city) group by city.district
SQL = SELECT count(*) , district FROM city WHERE population  >  (SELECT avg(population) FROM city) GROUP BY district
natsql:
select count ( _ ) , _ from _ where @.@ > avg ( @ ) group by _ | select count ( city.* ) , city.district from city where city.population > (SELECT avg(population) FROM city) group by city.district

SQL:
SELECT count(*) , district FROM city WHERE population  >  (SELECT avg(population) FROM city) GROUP BY district
self correction:
SELECT COUNT(*) AS city_count, district FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district

index is 796
SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72
Find the government form name and total population for each government form whose average life expectancy is longer than 72.
schema_links:
Find the government form name and total population for each government form whose average life expectancy is longer than 72. | country : country.lifeexpectancy , country.governmentform , country.name , country.population , country.localname , country.* | city : city.name , city.population , city.id , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql and SQL generation:
select _ , sum ( _ ) from _ where avg ( _ ) > _ group by _ | select country.governmentform , sum ( country.population ) from country where avg ( country.lifeexpectancy ) > 72 group by country.governmentform
SQL = SELECT governmentform ,  SUM (population) FROM country GROUP BY governmentform HAVING AVG (lifeexpectancy)  >  72
natsql:
select _ , sum ( _ ) from _ where avg ( _ ) > _ group by _ | select country.governmentform , sum ( country.population ) from country where avg ( country.lifeexpectancy ) > 72 group by country.governmentform

SQL:
SELECT governmentform ,  SUM (population) FROM country GROUP BY governmentform HAVING AVG (lifeexpectancy)  >  72
self correction:
SELECT governmentform, SUM(population)  FROM country  GROUP BY governmentform  HAVING AVG(lifeexpectancy) > 72

index is 797
SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72
What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?
schema_links:
What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72? | country : country.lifeexpectancy , country.governmentform , country.population , country.name , country.headofstate , country.* | city : city.population , city.name , city.id , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql and SQL generation:
select _ , sum ( _ ) from _ where avg ( _ ) > _ group by _ | select country.governmentform , sum ( country.population ) from country where country.lifeexpectancy > 72 group by country.governmentform
SQL = SELECT governmentform ,  SUM(population) FROM country WHERE lifeexpectancy  >  72 GROUP BY governmentform
natsql:
select _ , sum ( _ ) from _ where avg ( _ ) > _ group by _ | select country.governmentform , sum ( country.population ) from country where country.lifeexpectancy > 72 group by country.governmentform

SQL:
SELECT governmentform ,  SUM(population) FROM country WHERE lifeexpectancy  >  72 GROUP BY governmentform
self correction:
SELECT governmentform, SUM(population) AS total_population  FROM country  WHERE lifeexpectancy > 72  GROUP BY governmentform

index is 798
SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72
Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?
schema_links:
Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72? | country : country.lifeexpectancy , country.continent , country.population , country.name , country.region , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql and SQL generation:
select avg ( _ ) , sum ( _ ) , _ from _ where avg ( _ ) < _ group by _ | select avg ( country.lifeexpectancy ) , sum ( country.population ) , country.continent from country where avg ( country.lifeexpectancy ) < 72 group by country.continent
SQL = SELECT avg(lifeexpectancy) ,  sum(population) ,  continent FROM country GROUP BY continent HAVING avg(lifeexpectancy)  <  72
natsql:
select avg ( _ ) , sum ( _ ) , _ from _ where avg ( _ ) < _ group by _ | select avg ( country.lifeexpectancy ) , sum ( country.population ) , country.continent from country where avg ( country.lifeexpectancy ) < 72 group by country.continent

SQL:
SELECT avg(lifeexpectancy) ,  sum(population) ,  continent FROM country GROUP BY continent HAVING avg(lifeexpectancy)  <  72
self correction:
SELECT avg(lifeexpectancy) AS avg_life_expectancy, sum(population) AS total_population, continent FROM country GROUP BY continent HAVING avg(lifeexpectancy) < 72

index is 799
SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72
What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?
schema_links:
What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72? | country : country.lifeexpectancy , country.continent , country.population , country.name , country.region , country.* | city : city.population , city.id , city.name , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql and SQL generation:
select _ , sum ( _ ) , avg ( _ ) from _ where avg ( _ ) < _ group by _ | select country.continent , sum ( country.population ) , avg ( country.lifeexpectancy ) from country where avg ( country.lifeexpectancy ) < 72 group by country.continent
SQL = SELECT continent ,  sum(population) ,  avg(lifeExpectancy) FROM country GROUP BY continent HAVING avg(lifeExpectancy)  <  72
natsql:
select _ , sum ( _ ) , avg ( _ ) from _ where avg ( _ ) < _ group by _ | select country.continent , sum ( country.population ) , avg ( country.lifeexpectancy ) from country where avg ( country.lifeexpectancy ) < 72 group by country.continent

SQL:
SELECT continent ,  sum(population) ,  avg(lifeExpectancy) FROM country GROUP BY continent HAVING avg(lifeExpectancy)  <  72
self correction:
SELECT continent, SUM(population), AVG(lifeExpectancy) FROM country GROUP BY continent HAVING AVG(lifeExpectancy) < 72

index is 800
SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
What are the names and areas of countries with the top 5 largest area?
schema_links:
What are the names and areas of countries with the top 5 largest area? | country : country.surfacearea , country.name , country.region , country.population , country.continent , country.* | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.name , city.id , city.district , city.population , city.countrycode , city.*
natsql and SQL generation:
select _ , _ from _ order by _ desc limit _ | select country.name , country.surfacearea from country order by country.surfacearea desc limit 5
SQL = SELECT name , surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5
natsql:
select _ , _ from _ order by _ desc limit _ | select country.name , country.surfacearea from country order by country.surfacearea desc limit 5

SQL:
SELECT name , surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5
self correction:
SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.SurfaceArea DESC LIMIT 5

index is 801
SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
Return the names and surface areas of the 5 largest countries.
schema_links:
Return the names and surface areas of the 5 largest countries. | country : country.surfacearea , country.name , country.population , country.continent , country.region , country.* | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql and SQL generation:
select _ , _ from _ order by _ desc limit _ | select country.name , country.surfacearea from country order by country.surfacearea desc limit 5
SQL = SELECT name , surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5
natsql:
select _ , _ from _ order by _ desc limit _ | select country.name , country.surfacearea from country order by country.surfacearea desc limit 5

SQL:
SELECT name , surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5
self correction:
SELECT name, surfacearea  FROM country  ORDER BY surfacearea DESC  LIMIT 5

index is 802
SELECT Name FROM country ORDER BY Population DESC LIMIT 3
What are names of countries with the top 3 largest population?
schema_links:
What are names of countries with the top 3 largest population? | country : country.name , country.population , country.localname , country.continent , country.region , country.* | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | city : city.population , city.id , city.name , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ from _ order by _ desc limit _ | select country.name from country order by country.population desc limit 3
SQL = SELECT name FROM country ORDER BY population DESC LIMIT 3
natsql:
select _ from _ order by _ desc limit _ | select country.name from country order by country.population desc limit 3

SQL:
SELECT name FROM country ORDER BY population DESC LIMIT 3
self correction:
SELECT country.Name FROM country ORDER BY country.Population DESC LIMIT 3

index is 803
SELECT Name FROM country ORDER BY Population DESC LIMIT 3
Return the names of the 3 most populated countries.
schema_links:
Return the names of the 3 most populated countries. | country : country.name , country.population , country.localname , country.continent , country.region , country.* | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | city : city.population , city.id , city.name , city.countrycode , city.district , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ from _ order by _ desc limit _ | select country.name from country order by country.population desc limit 3
SQL = SELECT name FROM country ORDER BY population DESC LIMIT 3
natsql:
select _ from _ order by _ desc limit _ | select country.name from country order by country.population desc limit 3

SQL:
SELECT name FROM country ORDER BY population DESC LIMIT 3
self correction:
SELECT country.Name FROM country ORDER BY country.Population DESC LIMIT 3

index is 804
SELECT Name FROM country ORDER BY Population ASC LIMIT 3
What are the names of the nations with the 3 lowest populations?
schema_links:
What are the names of the nations with the 3 lowest populations? | country : country.name , country.population , country.localname , country.continent , country.region , country.* | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | city : city.population , city.id , city.name , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ from _ order by _ limit _ | select country.name from country order by country.population asc limit 3
SQL = SELECT name FROM country ORDER BY population ASC LIMIT 3
natsql:
select _ from _ order by _ limit _ | select country.name from country order by country.population asc limit 3

SQL:
SELECT name FROM country ORDER BY population ASC LIMIT 3
self correction:
SELECT name FROM country ORDER BY population ASC LIMIT 3

index is 805
SELECT Name FROM country ORDER BY Population ASC LIMIT 3
Return the names of the 3 countries with the fewest people.
schema_links:
Return the names of the 3 countries with the fewest people. | country : country.name , country.population , country.localname , country.continent , country.region , country.* | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | city : city.population , city.id , city.name , city.countrycode , city.district , city.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.*
natsql and SQL generation:
select _ from _ order by _ limit _ | select country.name from country order by country.population asc limit 3
SQL = SELECT name FROM country ORDER BY population ASC LIMIT 3
natsql:
select _ from _ order by _ limit _ | select country.name from country order by country.population asc limit 3

SQL:
SELECT name FROM country ORDER BY population ASC LIMIT 3
self correction:
SELECT country.Name FROM country ORDER BY country.Population ASC LIMIT 3

index is 806
SELECT count(*) FROM country WHERE continent  =  "Asia"
how many countries are in Asia?
schema_links:
how many countries are in Asia? | country : country.continent ( Asia ) , country.name , country.region , country.population , country.code , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select count ( * ) from _ where @.@ = _ | select count ( * ) from country where continent = 'Asia'
SQL = SELECT count(*) FROM country WHERE continent = 'Asia'
natsql:
select count ( * ) from _ where @.@ = _ | select count ( * ) from country where continent = 'Asia'

SQL:
SELECT count(*) FROM country WHERE continent = 'Asia'
self correction:
SELECT count(*) FROM country WHERE continent = 'Asia'

index is 807
SELECT count(*) FROM country WHERE continent  =  "Asia"
Count the number of countries in Asia.
schema_links:
Count the number of countries in Asia. | country : country.continent ( Asia ) , country.name , country.region , country.population , country.code , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select count ( distinct _ ) from _ where _ = _ | select count ( distinct country.name ) from country where country.continent = 'Asia'
SQL = SELECT count(DISTINCT name) FROM country WHERE continent = 'Asia'
natsql:
select count ( distinct _ ) from _ where _ = _ | select count ( distinct country.name ) from country where country.continent = 'Asia'

SQL:
SELECT count(DISTINCT name) FROM country WHERE continent = 'Asia'
self correction:
SELECT COUNT(DISTINCT Name) FROM country WHERE Continent = 'Asia'

index is 808
SELECT Name FROM country WHERE continent  =  "Europe" AND Population  =  "80000"
What are the names of the countries that are in the continent of Europe and have a population of 80000?
schema_links:
What are the names of the countries that are in the continent of Europe and have a population of 80000? | country : country.continent ( Europe ) , country.name , country.population , country.region , country.surfacearea , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.population , city.id , city.name , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ from _ where _ and _ | select country.name from country where country.continent = 'Europe' and country.population = 80000
SQL = SELECT name FROM country WHERE continent = 'Europe' AND population = 80000
natsql:
select _ from _ where _ and _ | select country.name from country where country.continent = 'Europe' and country.population = 80000

SQL:
SELECT name FROM country WHERE continent = 'Europe' AND population = 80000
self correction:
SELECT name FROM country WHERE continent = 'Europe' AND population = 80000

index is 809
SELECT Name FROM country WHERE continent  =  "Europe" AND Population  =  "80000"
Give the names of countries that are in Europe and have a population equal to 80000.
schema_links:
Give the names of countries that are in Europe and have a population equal to 80000. | country : country.continent ( Europe ) , country.name , country.population , country.code , country.region , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ from _ where _ and _ | select country.name from country where country.continent = 'Europe' and country.population = 80000
SQL = SELECT name FROM country WHERE continent = 'Europe' AND population = 80000
natsql:
select _ from _ where _ and _ | select country.name from country where country.continent = 'Europe' and country.population = 80000

SQL:
SELECT name FROM country WHERE continent = 'Europe' AND population = 80000
self correction:
SELECT name  FROM country  WHERE continent = 'Europe'  AND population = 80000

index is 810
select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000
What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?
schema_links:
What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ? | country : country.continent ( North America ) , country.surfacearea , country.population , country.region ( North America ) , country.name , country.* | city : city.population , city.id , city.name , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql and SQL generation:
select sum ( _ ) , avg ( _ ) from _ where _ > _ and _ = _ | select sum ( country.population ) , avg ( country.surfacearea ) from country where country.continent = 'North America' and country.surfacearea > 3000
SQL = SELECT sum(population) , avg(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000
natsql:
select sum ( _ ) , avg ( _ ) from _ where _ > _ and _ = _ | select sum ( country.population ) , avg ( country.surfacearea ) from country where country.continent = 'North America' and country.surfacearea > 3000

SQL:
SELECT sum(population) , avg(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000
self correction:
SELECT sum(population) AS total_population, avg(surfacearea) AS average_area FROM country WHERE continent = 'North America' AND surfacearea > 3000

index is 811
select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000
Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .
schema_links:
Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 . | country : country.surfacearea , country.continent ( North America ) , country.population , country.region ( North America ) , country.name , country.* | city : city.population , city.id , city.name , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql and SQL generation:
select sum ( _ ) , avg ( _ ) from _ where _ > _ and _ > _ group by _ | select sum ( country.population ) , avg ( country.surfacearea ) from country where country.continent = 'North America' and country.surfacearea > 3000 group by country.continent
SQL = SELECT sum(population) , avg(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000 GROUP BY continent
natsql:
select sum ( _ ) , avg ( _ ) from _ where _ > _ and _ > _ group by _ | select sum ( country.population ) , avg ( country.surfacearea ) from country where country.continent = 'North America' and country.surfacearea > 3000 group by country.continent

SQL:
SELECT sum(population) , avg(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000 GROUP BY continent
self correction:
SELECT sum(population) AS total_population, avg(surfacearea) AS average_surface_area FROM country WHERE continent = 'North America' AND surfacearea > 3000 GROUP BY continent

index is 812
SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000
What are the cities whose population is between 160000 and 900000?
schema_links:
What are the cities whose population is between 160000 and 900000? | city : city.name , city.population , city.id , city.district , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | country : country.name , country.code , country.continent , country.region , country.population , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql and SQL generation:
select _ from _ where _ between _ and _ | select city.name from city where city.population between 160000 and 900000
SQL = SELECT name FROM city WHERE population BETWEEN 160000 AND 900000
natsql:
select _ from _ where _ between _ and _ | select city.name from city where city.population between 160000 and 900000

SQL:
SELECT name FROM city WHERE population BETWEEN 160000 AND 900000
self correction:
SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000

index is 813
select name from city where population between 160000 and 900000
Return the names of cities that have a population between 160000 and 900000 .
schema_links:
Return the names of cities that have a population between 160000 and 900000 . | city : city.name , city.population , city.id , city.district , city.countrycode , city.* | country : country.name , country.code , country.continent , country.region , country.population , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*
natsql and SQL generation:
select _ from _ where _ between _ and _ | select city.name from city where city.population between 160000 and 900000
SQL = SELECT name FROM city WHERE population BETWEEN 160000 AND 900000
natsql:
select _ from _ where _ between _ and _ | select city.name from city where city.population between 160000 and 900000

SQL:
SELECT name FROM city WHERE population BETWEEN 160000 AND 900000
self correction:
SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000

index is 814
SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1
Which language is spoken by the largest number of countries?
schema_links:
Which language is spoken by the largest number of countries? | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | country : country.name , country.region , country.population , country.code , country.continent , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select countrylanguage.language from countrylanguage group by countrylanguage.language order by count ( * ) desc limit 1
SQL = SELECT language FROM countrylanguage GROUP BY language ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select countrylanguage.language from countrylanguage group by countrylanguage.language order by count ( * ) desc limit 1

SQL:
SELECT language FROM countrylanguage GROUP BY language ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT countrylanguage.Language  FROM countrylanguage  GROUP BY countrylanguage.Language  ORDER BY COUNT(*) DESC  LIMIT 1

index is 815
SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1
Give the language that is spoken in the most countries.
schema_links:
Give the language that is spoken in the most countries. | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | country : country.name , country.region , country.population , country.headofstate , country.code , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select countrylanguage.language from countrylanguage group by countrylanguage.language order by count ( countrylanguage.countrycode ) desc limit 1
SQL = SELECT language FROM countrylanguage GROUP BY language ORDER BY count(countrycode) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select countrylanguage.language from countrylanguage group by countrylanguage.language order by count ( countrylanguage.countrycode ) desc limit 1

SQL:
SELECT language FROM countrylanguage GROUP BY language ORDER BY count(countrycode) DESC LIMIT 1
self correction:
SELECT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language ORDER BY COUNT(DISTINCT countrylanguage.CountryCode) DESC LIMIT 1

index is 816
SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
What is the language spoken by the largest percentage of people in each country?
schema_links:
What is the language spoken by the largest percentage of people in each country? | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | country : country.name , country.localname , country.continent , country.population , country.code , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*
natsql and SQL generation:
select _ from _ where _ = ( select max ( _ ) from _ ) group by _ | select country.name from countrylanguage where countrylanguage.percentage = ( select max ( countrylanguage.percentage ) from countrylanguage ) group by countrylanguage.countrycode
SQL = SELECT T2.name FROM (SELECT countrycode, MAX(percentage) AS max_percentage FROM countrylanguage GROUP BY countrycode) AS T1 JOIN countrylanguage AS T2 ON T1.countrycode  =  T2.countrycode AND T1.max_percentage  =  T2.percentage GROUP BY T2.countrycode
natsql:
select _ from _ where _ = ( select max ( _ ) from _ ) group by _ | select country.name from countrylanguage where countrylanguage.percentage = ( select max ( countrylanguage.percentage ) from countrylanguage ) group by countrylanguage.countrycode

SQL:
SELECT T2.name FROM (SELECT countrycode, MAX(percentage) AS max_percentage FROM countrylanguage GROUP BY countrycode) AS T1 JOIN countrylanguage AS T2 ON T1.countrycode  =  T2.countrycode AND T1.max_percentage  =  T2.percentage GROUP BY T2.countrycode
self correction:
SELECT T2.Language FROM (SELECT CountryCode, MAX(Percentage) AS max_percentage FROM countrylanguage GROUP BY CountryCode) AS T1  JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode AND T1.max_percentage = T2.Percentage  GROUP BY T2.CountryCode

index is 817
SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?
schema_links:
What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each? | countrylanguage : countrylanguage.countrycode , countrylanguage.language , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.name , country.localname , country.code , country.continent , country.population , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ , _ from _ group by _ having max ( _ ) | select countrylanguage.countrycode , countrylanguage.language from countrylanguage group by countrylanguage.countrycode having max ( countrylanguage.percentage )
SQL = SELECT countrycode ,  language FROM countrylanguage GROUP BY countrycode HAVING MAX(percentage)
natsql:
select _ , _ from _ group by _ having max ( _ ) | select countrylanguage.countrycode , countrylanguage.language from countrylanguage group by countrylanguage.countrycode having max ( countrylanguage.percentage )

SQL:
SELECT countrycode ,  language FROM countrylanguage GROUP BY countrycode HAVING MAX(percentage)
self correction:
SELECT countrycode, language  FROM countrylanguage  WHERE percentage = (SELECT MAX(percentage) FROM countrylanguage) GROUP BY countrycode

index is 818
SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
What is the total number of countries where Spanish is spoken by the largest percentage of people?
schema_links:
What is the total number of countries where Spanish is spoken by the largest percentage of people? | countrylanguage : countrylanguage.language ( Spanish ) , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | country : country.name , country.population , country.code , country.continent , country.region , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select count ( distinct _ ) from _ where @.@ = max ( _ ) | select count ( distinct countrylanguage.countrycode ) from countrylanguage where countrylanguage.language = 'Spanish' and countrylanguage.percentage = (select max ( countrylanguage.percentage ) from countrylanguage where countrylanguage.language = 'Spanish')
SQL = SELECT count(DISTINCT countrycode) FROM countrylanguage WHERE language = 'Spanish' AND percentage = (SELECT max(percentage) FROM countrylanguage WHERE language = 'Spanish')
natsql:
select count ( distinct _ ) from _ where @.@ = max ( _ ) | select count ( distinct countrylanguage.countrycode ) from countrylanguage where countrylanguage.language = 'Spanish' and countrylanguage.percentage = (select max ( countrylanguage.percentage ) from countrylanguage where countrylanguage.language = 'Spanish')

SQL:
SELECT count(DISTINCT countrycode) FROM countrylanguage WHERE language = 'Spanish' AND percentage = (SELECT max(percentage) FROM countrylanguage WHERE language = 'Spanish')
self correction:
SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')

index is 819
SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
Count the number of countries for which Spanish is the predominantly spoken language.
schema_links:
Count the number of countries for which Spanish is the predominantly spoken language. | countrylanguage : countrylanguage.language ( Spanish ) , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | country : country.name , country.region , country.population , country.code , country.continent , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select count ( distinct _ ) from _ where _ = _ group by _ | select count ( distinct countrylanguage.countrycode ) from countrylanguage where countrylanguage.language = 'Spanish' and countrylanguage.isofficial = 'T' and countrylanguage.percentage > 50 group by countrylanguage.language
SQL = SELECT count(DISTINCT countrycode) FROM countrylanguage WHERE language = 'Spanish' AND isofficial = 'T' AND percentage > 50 GROUP BY language
natsql:
select count ( distinct _ ) from _ where _ = _ group by _ | select count ( distinct countrylanguage.countrycode ) from countrylanguage where countrylanguage.language = 'Spanish' and countrylanguage.isofficial = 'T' and countrylanguage.percentage > 50 group by countrylanguage.language

SQL:
SELECT count(DISTINCT countrycode) FROM countrylanguage WHERE language = 'Spanish' AND isofficial = 'T' AND percentage > 50 GROUP BY language
self correction:
SELECT COUNT(DISTINCT CountryCode)  FROM countrylanguage  WHERE Language = 'Spanish'  AND IsOfficial = 'T'  AND Percentage > 50

index is 820
SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
What are the codes of countries where Spanish is spoken by the largest percentage of people?
schema_links:
What are the codes of countries where Spanish is spoken by the largest percentage of people? | countrylanguage : countrylanguage.language ( Spanish ) , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.name , country.population , country.code , country.continent , country.region , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ from _ where _ = ( select _ from _ where _ = max ( _ ) ) | select countrylanguage.countrycode from countrylanguage where countrylanguage.language = 'Spanish' and countrylanguage.percentage = ( select max ( countrylanguage.percentage ) from countrylanguage where countrylanguage.language = 'Spanish' )
SQL = SELECT countrycode FROM countrylanguage WHERE language  =  'Spanish' AND percentage  =  (SELECT max(percentage) FROM countrylanguage WHERE language  =  'Spanish')
natsql:
select _ from _ where _ = ( select _ from _ where _ = max ( _ ) ) | select countrylanguage.countrycode from countrylanguage where countrylanguage.language = 'Spanish' and countrylanguage.percentage = ( select max ( countrylanguage.percentage ) from countrylanguage where countrylanguage.language = 'Spanish' )

SQL:
SELECT countrycode FROM countrylanguage WHERE language  =  'Spanish' AND percentage  =  (SELECT max(percentage) FROM countrylanguage WHERE language  =  'Spanish')
self correction:
SELECT countrycode  FROM countrylanguage  WHERE language = 'Spanish'  GROUP BY countrycode  HAVING percentage = (SELECT MAX(percentage)                      FROM countrylanguage                      WHERE language = 'Spanish')

index is 821
SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
Return the codes of countries for which Spanish is the predominantly spoken language.
schema_links:
Return the codes of countries for which Spanish is the predominantly spoken language. | countrylanguage : countrylanguage.language ( Spanish ) , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | country : country.name , country.code , country.continent , country.region , country.population , country.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.*
natsql and SQL generation:
select _ from _ where _ | select countrylanguage.countrycode from countrylanguage where countrylanguage.language = 'Spanish' and countrylanguage.percentage > 50
SQL = SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' AND percentage > 50
natsql:
select _ from _ where _ | select countrylanguage.countrycode from countrylanguage where countrylanguage.language = 'Spanish' and countrylanguage.percentage > 50

SQL:
SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' AND percentage > 50
self correction:
SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' AND percentage > 50;

index is 822
SELECT count(*) FROM conductor
How many conductors are there?
schema_links:
How many conductors are there? | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work , conductor.* | performance : performance.official_ratings_(millions) , performance.type , performance.date , performance.share , performance.performance_id , performance.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( conductor.conductor_id ) from conductor
SQL = SELECT count(Conductor_ID) FROM conductor
natsql:
select count ( _ ) from _ | select count ( conductor.conductor_id ) from conductor

SQL:
SELECT count(Conductor_ID) FROM conductor
self correction:
SELECT COUNT(Conductor_ID) FROM conductor

index is 823
SELECT count(*) FROM conductor
Count the number of conductors.
schema_links:
Count the number of conductors. | conductor : conductor.conductor_id , conductor.name , conductor.age , conductor.nationality , conductor.year_of_work , conductor.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct conductor.conductor_id ) from conductor
SQL = SELECT count(DISTINCT conductor_id) FROM conductor
natsql:
select count ( distinct _ ) from _ | select count ( distinct conductor.conductor_id ) from conductor

SQL:
SELECT count(DISTINCT conductor_id) FROM conductor
self correction:
SELECT COUNT(DISTINCT Conductor_ID) FROM conductor

index is 824
SELECT Name FROM conductor ORDER BY Age ASC
List the names of conductors in ascending order of age.
schema_links:
List the names of conductors in ascending order of age. | conductor : conductor.name , conductor.age , conductor.conductor_id , conductor.nationality , conductor.year_of_work , conductor.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql and SQL generation:
select _ from _ order by _ | select conductor.name from conductor order by conductor.age asc
SQL = SELECT name FROM conductor ORDER BY age ASC
natsql:
select _ from _ order by _ | select conductor.name from conductor order by conductor.age asc

SQL:
SELECT name FROM conductor ORDER BY age ASC
self correction:
SELECT name FROM conductor ORDER BY age ASC

index is 825
SELECT Name FROM conductor ORDER BY Age ASC
What are the names of conductors, ordered by age?
schema_links:
What are the names of conductors, ordered by age? | conductor : conductor.name , conductor.age , conductor.conductor_id , conductor.nationality , conductor.year_of_work , conductor.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | performance : performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.performance_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql and SQL generation:
select _ from _ order by _ | select conductor.name from conductor order by conductor.age
SQL = SELECT name FROM conductor ORDER BY age
natsql:
select _ from _ order by _ | select conductor.name from conductor order by conductor.age

SQL:
SELECT name FROM conductor ORDER BY age
self correction:
SELECT name  FROM conductor  ORDER BY age

index is 826
SELECT Name FROM conductor WHERE Nationality != 'USA'
What are the names of conductors whose nationalities are not "USA"?
schema_links:
What are the names of conductors whose nationalities are not "USA"? | conductor : conductor.nationality ( USA ) , conductor.name , conductor.conductor_id , conductor.age , conductor.year_of_work , conductor.* | performance : performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.performance_id , performance.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql and SQL generation:
select _ from _ where @.@ != _ | select conductor.name from conductor where conductor.nationality != "USA"
SQL = SELECT name FROM conductor WHERE nationality != 'USA'
natsql:
select _ from _ where @.@ != _ | select conductor.name from conductor where conductor.nationality != "USA"

SQL:
SELECT name FROM conductor WHERE nationality != 'USA'
self correction:
SELECT name FROM conductor WHERE nationality <> 'USA'

index is 827
SELECT Name FROM conductor WHERE Nationality != 'USA'
Return the names of conductors that do not have the nationality "USA".
schema_links:
Return the names of conductors that do not have the nationality "USA". | conductor : conductor.nationality ( USA ) , conductor.name , conductor.conductor_id , conductor.age , conductor.year_of_work , conductor.* | performance : performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.performance_id , performance.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql and SQL generation:
select _ from _ where _ <> _ | select conductor.name from conductor where conductor.nationality <> "USA"
SQL = SELECT name FROM conductor WHERE nationality <> "USA"
natsql:
select _ from _ where _ <> _ | select conductor.name from conductor where conductor.nationality <> "USA"

SQL:
SELECT name FROM conductor WHERE nationality <> "USA"
self correction:
SELECT name FROM conductor WHERE Nationality <> "USA"

index is 828
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
What are the record companies of orchestras in descending order of years in which they were founded?
schema_links:
What are the record companies of orchestras in descending order of years in which they were founded? | orchestra : orchestra.record_company , orchestra.year_of_founded , orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.* | performance : performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.performance_id , performance.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql and SQL generation:
select _ from _ order by _ desc | select orchestra.record_company from orchestra order by orchestra.year_of_founded desc
SQL = SELECT record_company FROM orchestra ORDER BY year_of_founded DESC
natsql:
select _ from _ order by _ desc | select orchestra.record_company from orchestra order by orchestra.year_of_founded desc

SQL:
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC
self correction:
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC

index is 829
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
Return the record companies of orchestras, sorted descending by the years in which they were founded.
schema_links:
Return the record companies of orchestras, sorted descending by the years in which they were founded. | orchestra : orchestra.record_company , orchestra.year_of_founded , orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql and SQL generation:
select _ from _ order by _ desc | select orchestra.record_company from orchestra order by orchestra.year_of_founded desc
SQL = SELECT record_company FROM orchestra ORDER BY year_of_founded DESC
natsql:
select _ from _ order by _ desc | select orchestra.record_company from orchestra order by orchestra.year_of_founded desc

SQL:
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC
self correction:
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC

index is 830
SELECT avg(Attendance) FROM SHOW
What is the average attendance of shows?
schema_links:
What is the average attendance of shows? | show : show.attendance , show.show_id , show.performance_id , show.result , show.if_first_show , show.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.*
natsql and SQL generation:
select avg ( _ ) from _ | select avg ( show.attendance ) from show
SQL = SELECT avg(attendance) FROM show
natsql:
select avg ( _ ) from _ | select avg ( show.attendance ) from show

SQL:
SELECT avg(attendance) FROM show
self correction:
SELECT avg(Attendance) FROM show

index is 831
SELECT avg(Attendance) FROM SHOW
Return the average attendance across all shows.
schema_links:
Return the average attendance across all shows. | show : show.attendance , show.show_id , show.result , show.performance_id , show.if_first_show , show.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.*
natsql and SQL generation:
select avg ( _ ) from _ | select avg ( show.attendance ) from show
SQL = SELECT avg(attendance) FROM show
natsql:
select avg ( _ ) from _ | select avg ( show.attendance ) from show

SQL:
SELECT avg(attendance) FROM show
self correction:
SELECT AVG(Attendance) FROM show

index is 832
SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"
What are the maximum and minimum share of performances whose type is not "Live final".
schema_links:
What are the maximum and minimum share of performances whose type is not "Live final". | performance : performance.type ( Live final ) , performance.share , performance.performance_id , performance.orchestra_id , performance.date , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.*
natsql and SQL generation:
select max ( _ ) , min ( _ ) from _ where _ | select max ( performance.share ) , min ( performance.share ) from performance where performance.type <> 'Live final'
SQL = SELECT max(share) , min(share) FROM performance WHERE type <> 'Live final'
natsql:
select max ( _ ) , min ( _ ) from _ where _ | select max ( performance.share ) , min ( performance.share ) from performance where performance.type <> 'Live final'

SQL:
SELECT max(share) , min(share) FROM performance WHERE type <> 'Live final'
self correction:
SELECT max(Share), min(Share) FROM performance WHERE Type <> 'Live final'

index is 833
SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"
Return the maximum and minimum shares for performances that do not have the type "Live final".
schema_links:
Return the maximum and minimum shares for performances that do not have the type "Live final". | performance : performance.type ( Live final ) , performance.share , performance.performance_id , performance.date , performance.orchestra_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.*
natsql and SQL generation:
select max ( _ ) , min ( _ ) from _ where _ <> _ | select max ( performance.share ) , min ( performance.share ) from performance where performance.type <> "Live final"
SQL = SELECT max(share) ,  min(share) FROM performance WHERE type <> "Live final"
natsql:
select max ( _ ) , min ( _ ) from _ where _ <> _ | select max ( performance.share ) , min ( performance.share ) from performance where performance.type <> "Live final"

SQL:
SELECT max(share) ,  min(share) FROM performance WHERE type <> "Live final"
self correction:
SELECT max(share), min(share) FROM performance WHERE type <> 'Live final'

index is 834
SELECT count(DISTINCT Nationality) FROM conductor
How many different nationalities do conductors have?
schema_links:
How many different nationalities do conductors have? | conductor : conductor.nationality , conductor.conductor_id , conductor.name , conductor.age , conductor.year_of_work , conductor.* | performance : performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.performance_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct conductor.nationality ) from conductor
SQL = SELECT count(DISTINCT nationality) FROM conductor
natsql:
select count ( distinct _ ) from _ | select count ( distinct conductor.nationality ) from conductor

SQL:
SELECT count(DISTINCT nationality) FROM conductor
self correction:
SELECT count(DISTINCT Nationality) FROM conductor

index is 835
SELECT count(DISTINCT Nationality) FROM conductor
Count the number of different nationalities of conductors.
schema_links:
Count the number of different nationalities of conductors. | conductor : conductor.nationality , conductor.conductor_id , conductor.name , conductor.age , conductor.year_of_work , conductor.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct conductor.nationality ) from conductor
SQL = SELECT count(DISTINCT nationality) FROM conductor
natsql:
select count ( distinct _ ) from _ | select count ( distinct conductor.nationality ) from conductor

SQL:
SELECT count(DISTINCT nationality) FROM conductor
self correction:
SELECT COUNT(DISTINCT Nationality) FROM conductor

index is 836
SELECT Name FROM conductor ORDER BY Year_of_Work DESC
List names of conductors in descending order of years of work.
schema_links:
List names of conductors in descending order of years of work. | conductor : conductor.year_of_work , conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql and SQL generation:

natsql:

SQL:

self correction:
SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC;

index is 837
SELECT Name FROM conductor ORDER BY Year_of_Work DESC
What are the names of conductors, sorted descending by the number of years they have worked?
schema_links:
What are the names of conductors, sorted descending by the number of years they have worked? | conductor : conductor.year_of_work , conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | performance : performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.performance_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql and SQL generation:
select _ from _ order by _ desc | select conductor.name from conductor order by conductor.year_of_work desc
SQL = SELECT name FROM conductor ORDER BY year_of_work DESC
natsql:
select _ from _ order by _ desc | select conductor.name from conductor order by conductor.year_of_work desc

SQL:
SELECT name FROM conductor ORDER BY year_of_work DESC
self correction:
SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC

index is 838
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
List the name of the conductor with the most years of work.
schema_links:
List the name of the conductor with the most years of work. | conductor : conductor.year_of_work , conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql and SQL generation:
select _ from _ order by _ desc limit _ | select conductor.name from conductor order by conductor.year_of_work desc limit 1
SQL = SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1
natsql:
select _ from _ order by _ desc limit _ | select conductor.name from conductor order by conductor.year_of_work desc limit 1

SQL:
SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1
self correction:
SELECT name  FROM conductor  ORDER BY Year_of_Work DESC  LIMIT 1

index is 839
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
What is the name of the conductor who has worked the greatest number of years?
schema_links:
What is the name of the conductor who has worked the greatest number of years? | conductor : conductor.year_of_work , conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.* | orchestra : orchestra.orchestra , orchestra.conductor_id , orchestra.orchestra_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | performance : performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.performance_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql and SQL generation:
select _ from _ order by _ desc limit _ | select conductor.name from conductor order by conductor.year_of_work desc limit 1
SQL = SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1
natsql:
select _ from _ order by _ desc limit _ | select conductor.name from conductor order by conductor.year_of_work desc limit 1

SQL:
SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1
self correction:
SELECT c.name FROM conductor c ORDER BY c.year_of_work DESC LIMIT 1

index is 840
SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID
Show the names of conductors and the orchestras they have conducted.
schema_links:
Show the names of conductors and the orchestras they have conducted. | conductor : conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.year_of_work , conductor.* | orchestra : orchestra.orchestra , orchestra.conductor_id , orchestra.orchestra_id , orchestra.year_of_founded , orchestra.record_company , orchestra.* | performance : performance.orchestra_id , performance.type , performance.date , performance.share , performance.performance_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql and SQL generation:
select _ , _ from _ | select conductor.name , orchestra.orchestra from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id
SQL = SELECT conductor.name ,  orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id  =  orchestra.conductor_id
natsql:
select _ , _ from _ | select conductor.name , orchestra.orchestra from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id

SQL:
SELECT conductor.name ,  orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id  =  orchestra.conductor_id
self correction:
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID

index is 841
SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID
What are the names of conductors as well as the corresonding orchestras that they have conducted?
schema_links:
What are the names of conductors as well as the corresonding orchestras that they have conducted? | conductor : conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.year_of_work , conductor.* | orchestra : orchestra.orchestra , orchestra.conductor_id , orchestra.orchestra_id , orchestra.year_of_founded , orchestra.record_company , orchestra.* | performance : performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql and SQL generation:
select _ , _ from _ | select conductor.name , orchestra.orchestra from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id
SQL = SELECT conductor.name , orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id
natsql:
select _ , _ from _ | select conductor.name , orchestra.orchestra from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id

SQL:
SELECT conductor.name , orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id
self correction:
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID

index is 842
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1
Show the names of conductors that have conducted more than one orchestras.
schema_links:
Show the names of conductors that have conducted more than one orchestras. | conductor : conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.year_of_work , conductor.* | orchestra : orchestra.conductor_id , orchestra.orchestra , orchestra.orchestra_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | performance : performance.orchestra_id , performance.type , performance.date , performance.share , performance.performance_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql and SQL generation:
select _ from _ where count ( _ ) > _ group by _ | select conductor.name from conductor where count ( conductor.orchestra_id ) > 1 group by conductor.name
SQL = SELECT name FROM conductor GROUP BY name HAVING count(orchestra_id) > 1
natsql:
select _ from _ where count ( _ ) > _ group by _ | select conductor.name from conductor where count ( conductor.orchestra_id ) > 1 group by conductor.name

SQL:
SELECT name FROM conductor GROUP BY name HAVING count(orchestra_id) > 1
self correction:
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1

index is 843
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1
What are the names of conductors who have conducted at more than one orchestra?
schema_links:
What are the names of conductors who have conducted at more than one orchestra? | conductor : conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.year_of_work , conductor.* | orchestra : orchestra.conductor_id , orchestra.orchestra , orchestra.orchestra_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | performance : performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql and SQL generation:
select _ from _ where count ( _ ) > _ group by _ | select conductor.name from conductor where count ( conductor.* ) > 1 group by conductor.name
SQL = SELECT name FROM conductor GROUP BY name HAVING count(*)  >  1
natsql:
select _ from _ where count ( _ ) > _ group by _ | select conductor.name from conductor where count ( conductor.* ) > 1 group by conductor.name

SQL:
SELECT name FROM conductor GROUP BY name HAVING count(*)  >  1
self correction:
SELECT name FROM conductor GROUP BY name HAVING COUNT(DISTINCT Orchestra_ID) > 1

index is 844
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1
Show the name of the conductor that has conducted the most number of orchestras.
schema_links:
Show the name of the conductor that has conducted the most number of orchestras. | conductor : conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.year_of_work , conductor.* | orchestra : orchestra.conductor_id , orchestra.orchestra , orchestra.orchestra_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | performance : performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select conductor.name from conductor group by conductor.name order by count ( orchestra.orchestra_id ) desc limit 1
SQL = SELECT name FROM conductor GROUP BY name ORDER BY count(orchestra_id) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select conductor.name from conductor group by conductor.name order by count ( orchestra.orchestra_id ) desc limit 1

SQL:
SELECT name FROM conductor GROUP BY name ORDER BY count(orchestra_id) DESC LIMIT 1
self correction:
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY COUNT(orchestra.Orchestra_ID) DESC LIMIT 1

index is 845
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1
What is the name of the conductor who has conducted the most orchestras?
schema_links:
What is the name of the conductor who has conducted the most orchestras? | conductor : conductor.name , conductor.conductor_id , conductor.age , conductor.year_of_work , conductor.nationality , conductor.* | orchestra : orchestra.conductor_id , orchestra.orchestra , orchestra.orchestra_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | performance : performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select conductor.name from conductor group by conductor.name order by count ( orchestra.orchestra_id ) desc limit 1
SQL = SELECT name FROM conductor GROUP BY name ORDER BY count(orchestra_id) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select conductor.name from conductor group by conductor.name order by count ( orchestra.orchestra_id ) desc limit 1

SQL:
SELECT name FROM conductor GROUP BY name ORDER BY count(orchestra_id) DESC LIMIT 1
self correction:
SELECT conductor.Name FROM conductor JOIN orchestra ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Name ORDER BY COUNT(orchestra.Orchestra_ID) DESC LIMIT 1

index is 846
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008
Please show the name of the conductor that has conducted orchestras founded after 2008.
schema_links:
Please show the name of the conductor that has conducted orchestras founded after 2008. | conductor : conductor.name , conductor.conductor_id , conductor.age , conductor.year_of_work , conductor.nationality , conductor.* | orchestra : orchestra.year_of_founded , orchestra.orchestra , orchestra.conductor_id , orchestra.orchestra_id , orchestra.record_company , orchestra.* | performance : performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql and SQL generation:
select _ from _ where _ > _ | select conductor.name from conductor where conductor.year_of_work > 2008
SQL = SELECT name FROM conductor WHERE year_of_work > 2008
natsql:
select _ from _ where _ > _ | select conductor.name from conductor where conductor.year_of_work > 2008

SQL:
SELECT name FROM conductor WHERE year_of_work > 2008
self correction:
SELECT name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008

index is 847
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008
What are the names of conductors who have conducted orchestras founded after the year 2008?
schema_links:
What are the names of conductors who have conducted orchestras founded after the year 2008? | conductor : conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.year_of_work , conductor.* | orchestra : orchestra.year_of_founded , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.orchestra_id , orchestra.* | performance : performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql and SQL generation:
select _ from _ where @.@ > _ | select conductor.name from conductor where orchestra.year_of_founded > 2008
SQL = SELECT name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra WHERE Year_of_Founded > 2008)
natsql:
select _ from _ where @.@ > _ | select conductor.name from conductor where orchestra.year_of_founded > 2008

SQL:
SELECT name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra WHERE Year_of_Founded > 2008)
self correction:
SELECT name FROM conductor WHERE Conductor_ID IN (   SELECT Conductor_ID   FROM orchestra   WHERE Year_of_Founded > 2008 )

index is 848
SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company
Please show the different record companies and the corresponding number of orchestras.
schema_links:
Please show the different record companies and the corresponding number of orchestras. | orchestra : orchestra.record_company , orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.year_of_founded , orchestra.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.*
natsql and SQL generation:
select _ , count ( distinct _ ) from _ group by _ | select orchestra.record_company , count ( distinct orchestra.orchestra_id ) from orchestra group by orchestra.record_company
SQL = SELECT record_company ,  COUNT(DISTINCT orchestra_id) FROM orchestra GROUP BY record_company
natsql:
select _ , count ( distinct _ ) from _ group by _ | select orchestra.record_company , count ( distinct orchestra.orchestra_id ) from orchestra group by orchestra.record_company

SQL:
SELECT record_company ,  COUNT(DISTINCT orchestra_id) FROM orchestra GROUP BY record_company
self correction:
SELECT record_company, COUNT(DISTINCT Orchestra_ID)  FROM orchestra  GROUP BY record_company

index is 849
SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company
How many orchestras does each record company manage?
schema_links:
How many orchestras does each record company manage? | orchestra : orchestra.record_company , orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.year_of_founded , orchestra.* | performance : performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.performance_id , performance.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql and SQL generation:
select count ( distinct _ ) , _ from _ group by _ | select count ( distinct orchestra.orchestra_id ) , orchestra.record_company from orchestra group by orchestra.record_company
SQL = SELECT COUNT(DISTINCT orchestra_id) ,  record_company FROM orchestra GROUP BY record_company
natsql:
select count ( distinct _ ) , _ from _ group by _ | select count ( distinct orchestra.orchestra_id ) , orchestra.record_company from orchestra group by orchestra.record_company

SQL:
SELECT COUNT(DISTINCT orchestra_id) ,  record_company FROM orchestra GROUP BY record_company
self correction:
SELECT COUNT(DISTINCT Orchestra_ID) AS num_orchestras, Record_Company FROM orchestra GROUP BY Record_Company

index is 850
SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
Please show the record formats of orchestras in ascending order of count.
schema_links:
Please show the record formats of orchestras in ascending order of count. | orchestra : orchestra.major_record_format , orchestra.orchestra , orchestra.record_company , orchestra.orchestra_id , orchestra.conductor_id , orchestra.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) asc | select orchestra.major_record_format from orchestra group by orchestra.major_record_format order by count ( orchestra.major_record_format ) asc
SQL = SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY count(major_record_format) ASC
natsql:
select _ from _ group by _ order by count ( _ ) asc | select orchestra.major_record_format from orchestra group by orchestra.major_record_format order by count ( orchestra.major_record_format ) asc

SQL:
SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY count(major_record_format) ASC
self correction:
SELECT major_record_format, COUNT(*) AS format_count FROM orchestra GROUP BY major_record_format ORDER BY format_count ASC

index is 851
SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
What are the major record formats of orchestras, sorted by their frequency?
schema_links:
What are the major record formats of orchestras, sorted by their frequency? | orchestra : orchestra.major_record_format , orchestra.orchestra , orchestra.orchestra_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | performance : performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ order by count ( _ ) desc | select orchestra.major_record_format from orchestra group by orchestra.major_record_format order by count ( orchestra.major_record_format ) desc
SQL = SELECT major_record_format, COUNT(major_record_format) FROM orchestra GROUP BY major_record_format ORDER BY COUNT(major_record_format) DESC
natsql:
select _ , count ( _ ) from _ group by _ order by count ( _ ) desc | select orchestra.major_record_format from orchestra group by orchestra.major_record_format order by count ( orchestra.major_record_format ) desc

SQL:
SELECT major_record_format, COUNT(major_record_format) FROM orchestra GROUP BY major_record_format ORDER BY COUNT(major_record_format) DESC
self correction:
SELECT major_record_format, COUNT(major_record_format)  FROM orchestra  GROUP BY major_record_format  ORDER BY COUNT(major_record_format) DESC

index is 852
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
List the record company shared by the most number of orchestras.
schema_links:
List the record company shared by the most number of orchestras. | orchestra : orchestra.record_company , orchestra.orchestra , orchestra.year_of_founded , orchestra.orchestra_id , orchestra.conductor_id , orchestra.* | performance : performance.orchestra_id , performance.type , performance.date , performance.share , performance.performance_id , performance.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select orchestra.record_company from orchestra group by orchestra.record_company order by count ( orchestra.* ) desc limit 1
SQL = SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select orchestra.record_company from orchestra group by orchestra.record_company order by count ( orchestra.* ) desc limit 1

SQL:
SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(*) DESC LIMIT 1
self correction:
SELECT record_company, COUNT(*) AS num_orchestras FROM orchestra GROUP BY record_company ORDER BY num_orchestras DESC LIMIT 1

index is 853
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
What is the record company used by the greatest number of orchestras?
schema_links:
What is the record company used by the greatest number of orchestras? | orchestra : orchestra.record_company , orchestra.orchestra , orchestra.year_of_founded , orchestra.orchestra_id , orchestra.conductor_id , orchestra.* | performance : performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select orchestra.record_company from orchestra group by orchestra.record_company order by count ( orchestra.orchestra_id ) desc limit 1
SQL = SELECT record_company FROM orchestra GROUP BY record_company ORDER BY count(orchestra_id) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select orchestra.record_company from orchestra group by orchestra.record_company order by count ( orchestra.orchestra_id ) desc limit 1

SQL:
SELECT record_company FROM orchestra GROUP BY record_company ORDER BY count(orchestra_id) DESC LIMIT 1
self correction:
SELECT record_company, COUNT(orchestra_id) AS num_orchestras FROM orchestra GROUP BY record_company ORDER BY num_orchestras DESC LIMIT 1

index is 854
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
List the names of orchestras that have no performance.
schema_links:
List the names of orchestras that have no performance. | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.year_of_founded , orchestra.record_company , orchestra.conductor_id , orchestra.* | performance : performance.orchestra_id , performance.date , performance.type , performance.share , performance.performance_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.*
natsql and SQL generation:
select _ from _ where not exists ( select _ from _ where _ = _ ) | select orchestra.orchestra from orchestra where not exists ( select performance.orchestra_id from performance where orchestra.orchestra_id = performance.orchestra_id )
SQL = SELECT orchestra FROM orchestra WHERE NOT EXISTS (SELECT orchestra_id FROM performance WHERE orchestra.orchestra_id = performance.orchestra_id)
natsql:
select _ from _ where not exists ( select _ from _ where _ = _ ) | select orchestra.orchestra from orchestra where not exists ( select performance.orchestra_id from performance where orchestra.orchestra_id = performance.orchestra_id )

SQL:
SELECT orchestra FROM orchestra WHERE NOT EXISTS (SELECT orchestra_id FROM performance WHERE orchestra.orchestra_id = performance.orchestra_id)
self correction:
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)

index is 855
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
What are the orchestras that do not have any performances?
schema_links:
What are the orchestras that do not have any performances? | orchestra : orchestra.orchestra , orchestra.year_of_founded , orchestra.orchestra_id , orchestra.record_company , orchestra.conductor_id , orchestra.* | performance : performance.orchestra_id , performance.date , performance.type , performance.share , performance.performance_id , performance.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.*
natsql and SQL generation:
select _ from _ where not exists ( select _ from _ where _._ = _._ ) | select orchestra.orchestra from orchestra where not exists ( select performance.* from performance where orchestra.orchestra_id = performance.orchestra_id )
SQL = SELECT orchestra FROM orchestra WHERE NOT EXISTS (SELECT * FROM performance WHERE orchestra.orchestra_id = performance.orchestra_id)
natsql:
select _ from _ where not exists ( select _ from _ where _._ = _._ ) | select orchestra.orchestra from orchestra where not exists ( select performance.* from performance where orchestra.orchestra_id = performance.orchestra_id )

SQL:
SELECT orchestra FROM orchestra WHERE NOT EXISTS (SELECT * FROM performance WHERE orchestra.orchestra_id = performance.orchestra_id)
self correction:
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)

index is 856
SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003
Show the record companies shared by orchestras founded before 2003 and after 2003.
schema_links:
Show the record companies shared by orchestras founded before 2003 and after 2003. | orchestra : orchestra.record_company , orchestra.year_of_founded , orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.* | performance : performance.orchestra_id , performance.type , performance.date , performance.share , performance.performance_id , performance.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql and SQL generation:
select distinct _ from _ where _ and _ | select distinct orchestra.record_company from orchestra where orchestra.year_of_founded < 2003 and orchestra.year_of_founded > 2003
SQL = SELECT DISTINCT record_company FROM orchestra WHERE year_of_founded < 2003 AND year_of_founded > 2003
natsql:
select distinct _ from _ where _ and _ | select distinct orchestra.record_company from orchestra where orchestra.year_of_founded < 2003 and orchestra.year_of_founded > 2003

SQL:
SELECT DISTINCT record_company FROM orchestra WHERE year_of_founded < 2003 AND year_of_founded > 2003
self correction:
SELECT SELECT DISTINCT Record_Company FROM orchestra WHERE year_of_founded < 2003 OR year_of_founded > 2003

index is 857
SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003
What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?
schema_links:
What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003? | orchestra : orchestra.record_company , orchestra.year_of_founded , orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.* | performance : performance.orchestra_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.share , performance.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql and SQL generation:
select _ from _ where _ in ( select _ from _ where _ > _ ) and _ in ( select _ from _ where _ < _ ) | select orchestra.record_company from orchestra where orchestra.year_of_founded < 2003 and orchestra.year_of_founded > 2003 group by orchestra.record_company
SQL = SELECT record_company FROM orchestra WHERE year_of_founded  <  2003 AND year_of_founded  >  2003 GROUP BY record_company
natsql:
select _ from _ where _ in ( select _ from _ where _ > _ ) and _ in ( select _ from _ where _ < _ ) | select orchestra.record_company from orchestra where orchestra.year_of_founded < 2003 and orchestra.year_of_founded > 2003 group by orchestra.record_company

SQL:
SELECT record_company FROM orchestra WHERE year_of_founded  <  2003 AND year_of_founded  >  2003 GROUP BY record_company
self correction:
SELECT There is an issue with the given SQL query. The condition `year_of_founded < 2003 AND year_of_founded > 2003` will not retrieve any records because no year can be both less than 2003 and greater than 2003 at the same time. Additionally, the query is missing the table join condition to connect the `orchestra` table with the `conductor` table.  Here's the fixed SQLite SQL query:  ```sql SELECT DISTINCT o.record_company FROM orchestra o JOIN conductor c ON o.conductor_id = c.conductor_id WHERE o.year_of_founded < 2003 OR o.year_of_founded > 2003 GROUP BY o.record_company; ```  This query selects the distinct record companies from the `orchestra` table, considering only the orchestras that were founded either before 2003 or after 2003. The `JOIN` clause connects the `orchestra` table with the `conductor` table using the `conductor_id` foreign key. The `GROUP BY` clause is used to group the results by the `record_company` column.

index is 858
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"
Find the number of orchestras whose record format is "CD" or "DVD".
schema_links:
Find the number of orchestras whose record format is "CD" or "DVD". | orchestra : orchestra.major_record_format ( CD , DVD ) , orchestra.orchestra , orchestra.record_company , orchestra.orchestra_id , orchestra.conductor_id , orchestra.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql and SQL generation:
select count ( distinct _ ) from _ where @.@ = "CD" or @.@ = "DVD" | select count ( distinct orchestra.orchestra_id ) from orchestra where orchestra.major_record_format = "CD" or orchestra.major_record_format = "DVD"
SQL = SELECT count(DISTINCT orchestra_id) FROM orchestra WHERE major_record_format = "CD" OR major_record_format = "DVD"
natsql:
select count ( distinct _ ) from _ where @.@ = "CD" or @.@ = "DVD" | select count ( distinct orchestra.orchestra_id ) from orchestra where orchestra.major_record_format = "CD" or orchestra.major_record_format = "DVD"

SQL:
SELECT count(DISTINCT orchestra_id) FROM orchestra WHERE major_record_format = "CD" OR major_record_format = "DVD"
self correction:
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'

index is 859
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"
Count the number of orchestras that have CD or DVD as their record format.
schema_links:
Count the number of orchestras that have CD or DVD as their record format. | orchestra : orchestra.major_record_format ( CD , DVD ) , orchestra.orchestra , orchestra.record_company , orchestra.orchestra_id , orchestra.conductor_id , orchestra.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.*
natsql and SQL generation:
select count ( distinct _ ) from _ where _ in ( _ , _ ) | select count ( distinct orchestra.orchestra_id ) from orchestra where orchestra.major_record_format in ( 'CD' , 'DVD' )
SQL = SELECT COUNT(DISTINCT orchestra_id) FROM orchestra WHERE major_record_format IN ('CD', 'DVD')
natsql:
select count ( distinct _ ) from _ where _ in ( _ , _ ) | select count ( distinct orchestra.orchestra_id ) from orchestra where orchestra.major_record_format in ( 'CD' , 'DVD' )

SQL:
SELECT COUNT(DISTINCT orchestra_id) FROM orchestra WHERE major_record_format IN ('CD', 'DVD')
self correction:
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')

index is 860
SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1
Show the years in which orchestras that have given more than one performance are founded.
schema_links:
Show the years in which orchestras that have given more than one performance are founded. | orchestra : orchestra.year_of_founded , orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.* | performance : performance.orchestra_id , performance.performance_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.* | show : show.performance_id , show.result , show.attendance , show.show_id , show.if_first_show , show.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.*
natsql and SQL generation:
select distinct _ from _ where count ( _ ) > _ group by _ | select distinct orchestra.year_of_founded from orchestra where count ( orchestra.performance_id ) > 1 group by orchestra.year_of_founded
SQL = SELECT DISTINCT year_of_founded FROM orchestra GROUP BY year_of_founded HAVING count(performance_id)  >  1
natsql:
select distinct _ from _ where count ( _ ) > _ group by _ | select distinct orchestra.year_of_founded from orchestra where count ( orchestra.performance_id ) > 1 group by orchestra.year_of_founded

SQL:
SELECT DISTINCT year_of_founded FROM orchestra GROUP BY year_of_founded HAVING count(performance_id)  >  1
self correction:
SELECT year_of_founded FROM orchestra JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID GROUP BY orchestra.year_of_founded HAVING count(DISTINCT performance.Performance_ID) > 1

index is 861
SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1
What are years of founding for orchestras that have had more than a single performance?
schema_links:
What are years of founding for orchestras that have had more than a single performance? | performance : performance.orchestra_id , performance.performance_id , performance.type , performance.date , performance.official_ratings_(millions) , performance.* | orchestra : orchestra.year_of_founded , orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.* | show : show.performance_id , show.result , show.attendance , show.show_id , show.if_first_show , show.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.*
natsql and SQL generation:
select _ from _ where count ( _ ) > _ group by _ | select orchestra.year_of_founded from orchestra where count ( orchestra.* ) > 1 group by orchestra.year_of_founded
SQL = SELECT year_of_founded FROM orchestra GROUP BY year_of_founded HAVING count(*)  >  1
natsql:
select _ from _ where count ( _ ) > _ group by _ | select orchestra.year_of_founded from orchestra where count ( orchestra.* ) > 1 group by orchestra.year_of_founded

SQL:
SELECT year_of_founded FROM orchestra GROUP BY year_of_founded HAVING count(*)  >  1
self correction:
SELECT year_of_founded FROM orchestra  JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID GROUP BY orchestra.year_of_founded HAVING COUNT(DISTINCT performance.Performance_ID) > 1

index is 862
SELECT count(*) FROM Highschooler
How many high schoolers are there?
schema_links:
How many high schoolers are there? | highschooler : highschooler.id , highschooler.grade , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select count ( _ ) from _
 | select count ( highschooler.id ) from highschooler
SQL = SELECT count(id) FROM highschooler
natsql:
select count ( _ ) from _
 | select count ( highschooler.id ) from highschooler

SQL:
SELECT count(id) FROM highschooler
self correction:
SELECT count(ID) FROM Highschooler

index is 863
SELECT count(*) FROM Highschooler
Count the number of high schoolers.
schema_links:
Count the number of high schoolers. | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( highschooler.id ) from highschooler
SQL = SELECT count(*) FROM highschooler
natsql:
select count ( _ ) from _ | select count ( highschooler.id ) from highschooler

SQL:
SELECT count(*) FROM highschooler
self correction:
SELECT COUNT(*) FROM Highschooler

index is 864
SELECT name ,  grade FROM Highschooler
Show the names and grades of each high schooler.
schema_links:
Show the names and grades of each high schooler. | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select _ , _ from _ | select highschooler.name , highschooler.grade from highschooler
SQL = SELECT name , grade FROM highschooler
natsql:
select _ , _ from _ | select highschooler.name , highschooler.grade from highschooler

SQL:
SELECT name , grade FROM highschooler
self correction:
SELECT name, grade FROM Highschooler

index is 865
SELECT name ,  grade FROM Highschooler
What are the names and grades for each high schooler?
schema_links:
What are the names and grades for each high schooler? | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select _ , _ from _ | select highschooler.name , highschooler.grade from highschooler
SQL = SELECT name , grade FROM highschooler
natsql:
select _ , _ from _ | select highschooler.name , highschooler.grade from highschooler

SQL:
SELECT name , grade FROM highschooler
self correction:
SELECT name, grade FROM Highschooler

index is 866
SELECT grade FROM Highschooler
Show all the grades of the high schoolers.
schema_links:
Show all the grades of the high schoolers. | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select _ from _ | select highschooler.grade from highschooler
SQL = SELECT grade FROM highschooler
natsql:
select _ from _ | select highschooler.grade from highschooler

SQL:
SELECT grade FROM highschooler
self correction:
SELECT grade FROM Highschooler

index is 867
SELECT grade FROM Highschooler
What is the grade of each high schooler?
schema_links:
What is the grade of each high schooler? | highschooler : highschooler.grade , highschooler.name , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select _ from _ | select highschooler.grade from highschooler
natsql:
select _ from _ | select highschooler.grade from highschooler
SQL:
SELECT grade FROM highschooler
self correction:
SELECT grade FROM Highschooler

index is 868
SELECT grade FROM Highschooler WHERE name  =  "Kyle"
What grade is Kyle in?
schema_links:
What grade is Kyle in? | highschooler : highschooler.name ( Kyle ) , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select _ from _ where _ = "Kyle" | select highschooler.grade from highschooler where highschooler.name = "Kyle"
SQL = SELECT grade FROM highschooler WHERE name = "Kyle"
natsql:
select _ from _ where _ = "Kyle" | select highschooler.grade from highschooler where highschooler.name = "Kyle"

SQL:
SELECT grade FROM highschooler WHERE name = "Kyle"
self correction:
SELECT grade FROM Highschooler WHERE name = "Kyle"

index is 869
SELECT grade FROM Highschooler WHERE name  =  "Kyle"
Return the grade for the high schooler named Kyle.
schema_links:
Return the grade for the high schooler named Kyle. | highschooler : highschooler.name ( Kyle ) , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select _ from _ where @.@ = "Kyle" | select highschooler.grade from highschooler where highschooler.name = "Kyle"
SQL = SELECT grade FROM highschooler WHERE name = "Kyle"
natsql:
select _ from _ where @.@ = "Kyle" | select highschooler.grade from highschooler where highschooler.name = "Kyle"

SQL:
SELECT grade FROM highschooler WHERE name = "Kyle"
self correction:
SELECT grade FROM Highschooler WHERE name = "Kyle"

index is 870
SELECT name FROM Highschooler WHERE grade  =  10
Show the names of all high schoolers in grade 10.
schema_links:
Show the names of all high schoolers in grade 10. | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select _ from _ where _ | select highschooler.name from highschooler where highschooler.grade = 10
SQL = SELECT name FROM highschooler WHERE grade = 10
natsql:
select _ from _ where _ | select highschooler.name from highschooler where highschooler.grade = 10

SQL:
SELECT name FROM highschooler WHERE grade = 10
self correction:
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10

index is 871
SELECT name FROM Highschooler WHERE grade  =  10
What are the names of all high schoolers in grade 10?
schema_links:
What are the names of all high schoolers in grade 10? | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select _ from _ where _ | select highschooler.name from highschooler where highschooler.grade = 10
SQL = SELECT name FROM highschooler WHERE grade  =  10
natsql:
select _ from _ where _ | select highschooler.name from highschooler where highschooler.grade = 10

SQL:
SELECT name FROM highschooler WHERE grade  =  10
self correction:
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10

index is 872
SELECT ID FROM Highschooler WHERE name  =  "Kyle"
Show the ID of the high schooler named Kyle.
schema_links:
Show the ID of the high schooler named Kyle. | highschooler : highschooler.name ( Kyle ) , highschooler.id , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select _ from _ where _ ( _ ) | select highschooler.id from highschooler where highschooler.name = 'Kyle'
SQL = SELECT id FROM highschooler WHERE name  =  'Kyle'
natsql:
select _ from _ where _ ( _ ) | select highschooler.id from highschooler where highschooler.name = 'Kyle'

SQL:
SELECT id FROM highschooler WHERE name  =  'Kyle'
self correction:
SELECT ID FROM Highschooler WHERE name = 'Kyle'

index is 873
SELECT ID FROM Highschooler WHERE name  =  "Kyle"
What is Kyle's id?
schema_links:
What is Kyle's id? | highschooler : highschooler.name ( Kyle ) , highschooler.id , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select _ from _ where @.@ = "Kyle" | select highschooler.id from highschooler where highschooler.name = "Kyle"
SQL = SELECT id FROM highschooler WHERE name = "Kyle"
natsql:
select _ from _ where @.@ = "Kyle" | select highschooler.id from highschooler where highschooler.name = "Kyle"

SQL:
SELECT id FROM highschooler WHERE name = "Kyle"
self correction:
SELECT ID FROM Highschooler WHERE name = "Kyle"

index is 874
SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10
How many high schoolers are there in grade 9 or 10?
schema_links:
How many high schoolers are there in grade 9 or 10? | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | likes : likes.student_id , likes.liked_id , likes.* | friend : friend.student_id , friend.friend_id , friend.*
natsql and SQL generation:
select count ( * ) from _ where _ = _ or _ = _ | select count ( * ) from highschooler where grade = 9 or grade = 10
SQL = SELECT count(*) FROM highschooler WHERE grade = 9 OR grade = 10
natsql:
select count ( * ) from _ where _ = _ or _ = _ | select count ( * ) from highschooler where grade = 9 or grade = 10

SQL:
SELECT count(*) FROM highschooler WHERE grade = 9 OR grade = 10
self correction:
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)

index is 875
SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10
Count the number of high schoolers in grades 9 or 10.
schema_links:
Count the number of high schoolers in grades 9 or 10. | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select count ( * ) from _ where _ = _ or _ = _ | select count ( * ) from highschooler where grade = 9 or grade = 10
SQL = SELECT count(*) FROM highschooler WHERE grade  =  9 OR grade  =  10
natsql:
select count ( * ) from _ where _ = _ or _ = _ | select count ( * ) from highschooler where grade = 9 or grade = 10

SQL:
SELECT count(*) FROM highschooler WHERE grade  =  9 OR grade  =  10
self correction:
SELECT count(*) FROM Highschooler WHERE grade IN (9, 10)

index is 876
SELECT grade ,  count(*) FROM Highschooler GROUP BY grade
Show the number of high schoolers for each grade.
schema_links:
Show the number of high schoolers for each grade. | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select grade , count ( * ) from highschooler group by grade
SQL = SELECT grade , count(*) FROM highschooler GROUP BY grade
natsql:
select _ , count ( _ ) from _ group by _ | select grade , count ( * ) from highschooler group by grade

SQL:
SELECT grade , count(*) FROM highschooler GROUP BY grade
self correction:
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade

index is 877
SELECT grade ,  count(*) FROM Highschooler GROUP BY grade
How many high schoolers are in each grade?
schema_links:
How many high schoolers are in each grade? | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select grade , count ( * ) from highschooler group by grade
SQL = SELECT grade , count(*) FROM highschooler GROUP BY grade
natsql:
select _ , count ( _ ) from _ group by _ | select grade , count ( * ) from highschooler group by grade

SQL:
SELECT grade , count(*) FROM highschooler GROUP BY grade
self correction:
SELECT grade, COUNT(*)  FROM Highschooler  GROUP BY grade

index is 878
SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
Which grade has the most high schoolers?
schema_links:
Which grade has the most high schoolers? | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select highschooler.grade from highschooler group by highschooler.grade order by count ( highschooler.* ) desc limit 1
SQL = SELECT grade FROM highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select highschooler.grade from highschooler group by highschooler.grade order by count ( highschooler.* ) desc limit 1

SQL:
SELECT grade FROM highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT grade, COUNT(*) AS count FROM Highschooler GROUP BY grade ORDER BY count DESC LIMIT 1

index is 879
SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
Return the grade that has the greatest number of high schoolers.
schema_links:
Return the grade that has the greatest number of high schoolers. | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select highschooler.grade from highschooler group by highschooler.grade order by count ( highschooler.* ) desc limit 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select highschooler.grade from highschooler group by highschooler.grade order by count ( highschooler.* ) desc limit 1
SQL:
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1
self correction:
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1

index is 880
SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4
Show me all grades that have at least 4 students.
schema_links:
Show me all grades that have at least 4 students. | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select _ from _ group by _ having count ( distinct _ ) >= _ | select grade from takes group by grade having count ( distinct id ) >= 4
SQL = SELECT grade FROM takes GROUP BY grade HAVING count(DISTINCT ID) >= 4
natsql:
select _ from _ group by _ having count ( distinct _ ) >= _ | select grade from takes group by grade having count ( distinct id ) >= 4

SQL:
SELECT grade FROM takes GROUP BY grade HAVING count(DISTINCT ID) >= 4
self correction:
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(DISTINCT ID) >= 4

index is 881
SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4
Which grades have 4 or more high schoolers?
schema_links:
Which grades have 4 or more high schoolers? | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select distinct _ from _ group by _ having count ( _ ) >= _ | select distinct highschooler.grade from highschooler group by highschooler.grade having count ( highschooler.* ) >= 4
SQL = SELECT DISTINCT grade FROM highschooler GROUP BY grade HAVING count(*)  >=  4
natsql:
select distinct _ from _ group by _ having count ( _ ) >= _ | select distinct highschooler.grade from highschooler group by highschooler.grade having count ( highschooler.* ) >= 4

SQL:
SELECT DISTINCT grade FROM highschooler GROUP BY grade HAVING count(*)  >=  4
self correction:
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4

index is 882
SELECT student_id ,  count(*) FROM Friend GROUP BY student_id
Show the student IDs and numbers of friends corresponding to each.
schema_links:
Show the student IDs and numbers of friends corresponding to each. | friend : friend.student_id , friend.friend_id , friend.* | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select _ , _ from _ | select friend.student_id , count ( friend.friend_id ) from friend group by friend.student_id
SQL = SELECT student_id ,  COUNT(friend_id) FROM friend GROUP BY student_id
natsql:
select _ , _ from _ | select friend.student_id , count ( friend.friend_id ) from friend group by friend.student_id

SQL:
SELECT student_id ,  COUNT(friend_id) FROM friend GROUP BY student_id
self correction:
SELECT student_id, COUNT(friend_id)  FROM Friend  GROUP BY student_id

index is 883
SELECT student_id ,  count(*) FROM Friend GROUP BY student_id
How many friends does each student have?
schema_links:
How many friends does each student have? | friend : friend.student_id , friend.friend_id , friend.* | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select highschooler.id , count ( friend.friend_id ) from highschooler join friend on highschooler.id = friend.student_id group by highschooler.id
SQL = SELECT T1.id ,  count(T2.friend_id) FROM highschooler AS T1 LEFT JOIN friend AS T2 ON T1.id  =  T2.student_id GROUP BY T1.id
natsql:
select _ , count ( _ ) from _ group by _ | select highschooler.id , count ( friend.friend_id ) from highschooler join friend on highschooler.id = friend.student_id group by highschooler.id

SQL:
SELECT T1.id ,  count(T2.friend_id) FROM highschooler AS T1 LEFT JOIN friend AS T2 ON T1.id  =  T2.student_id GROUP BY T1.id
self correction:
SELECT T1.ID, COUNT(T2.friend_id) AS friend_count  FROM Highschooler AS T1  LEFT JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.ID

index is 884
SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
Show the names of high school students and their corresponding number of friends.
schema_links:
Show the names of high school students and their corresponding number of friends. | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select highschooler.name , count ( friend.friend_id ) from highschooler join friend on highschooler.id = friend.student_id group by highschooler.name
SQL = SELECT T1.name ,  count(T2.friend_id) FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id GROUP BY T1.name
natsql:
select _ , count ( _ ) from _ group by _ | select highschooler.name , count ( friend.friend_id ) from highschooler join friend on highschooler.id = friend.student_id group by highschooler.name

SQL:
SELECT T1.name ,  count(T2.friend_id) FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id GROUP BY T1.name
self correction:
SELECT T1.name, COUNT(T2.friend_id)  FROM Highschooler AS T1  JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.name

index is 885
SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
What are the names of the high schoolers and how many friends does each have?
schema_links:
What are the names of the high schoolers and how many friends does each have? | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select highschooler.name , count ( friend.friend_id ) from highschooler join friend on highschooler.id = friend.student_id group by highschooler.name
SQL = SELECT highschooler.name ,  COUNT(friend_id) FROM highschooler JOIN friend ON highschooler.id  =  friend.student_id GROUP BY highschooler.name
natsql:
select _ , count ( _ ) from _ group by _ | select highschooler.name , count ( friend.friend_id ) from highschooler join friend on highschooler.id = friend.student_id group by highschooler.name

SQL:
SELECT highschooler.name ,  COUNT(friend_id) FROM highschooler JOIN friend ON highschooler.id  =  friend.student_id GROUP BY highschooler.name
self correction:
SELECT highschooler.name, COUNT(friend.friend_id) FROM highschooler JOIN friend ON highschooler.ID = friend.student_id GROUP BY highschooler.name

index is 886
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
What is the name of the high schooler who has the greatest number of friends?
schema_links:
What is the name of the high schooler who has the greatest number of friends? | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select _ from _ order by count ( _ ) desc limit _ | select highschooler.name from highschooler order by count ( friend.* ) desc limit 1
SQL = SELECT name FROM highschooler GROUP BY name ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ order by count ( _ ) desc limit _ | select highschooler.name from highschooler order by count ( friend.* ) desc limit 1

SQL:
SELECT name FROM highschooler GROUP BY name ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT Highschooler.name FROM highschooler JOIN friend ON friend.student_id = highschooler.ID GROUP BY highschooler.ID, highschooler.name ORDER BY COUNT(friend.friend_id) DESC LIMIT 1

index is 887
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Return the name of the high school student with the most friends.
schema_links:
Return the name of the high school student with the most friends. | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select highschooler.name from highschooler group by highschooler.id order by count ( friend.friend_id ) desc limit 1
SQL = SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id GROUP BY T1.id ORDER BY count(T2.friend_id) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select highschooler.name from highschooler group by highschooler.id order by count ( friend.friend_id ) desc limit 1

SQL:
SELECT T1.name FROM highschooler AS T1 JOIN friend AS T2 ON T1.id  =  T2.student_id GROUP BY T1.id ORDER BY count(T2.friend_id) DESC LIMIT 1
self correction:
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID ORDER BY COUNT(T2.friend_id) DESC LIMIT 1

index is 888
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3
Show the names of high schoolers who have at least 3 friends.
schema_links:
Show the names of high schoolers who have at least 3 friends. | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select _ from _ group by _ having count ( _ ) >= _ | select highschooler.name from highschooler group by highschooler.name having count ( friend.student_id ) >= 3
SQL = SELECT name FROM Highschooler GROUP BY name HAVING COUNT(*)  >=  3
natsql:
select _ from _ group by _ having count ( _ ) >= _ | select highschooler.name from highschooler group by highschooler.name having count ( friend.student_id ) >= 3

SQL:
SELECT name FROM Highschooler GROUP BY name HAVING COUNT(*)  >=  3
self correction:
SELECT name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name HAVING COUNT(Friend.friend_id) >= 3

index is 889
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3
What are the names of high schoolers who have 3 or more friends?
schema_links:
What are the names of high schoolers who have 3 or more friends? | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select _ from _ where count ( _ ) >= _ group by _ | select highschooler.name from highschooler where count ( friend.* ) >= 3 group by highschooler.name
SQL = SELECT name FROM highschooler GROUP BY name HAVING count(*)  >=  3
natsql:
select _ from _ where count ( _ ) >= _ group by _ | select highschooler.name from highschooler where count ( friend.* ) >= 3 group by highschooler.name

SQL:
SELECT name FROM highschooler GROUP BY name HAVING count(*)  >=  3
self correction:
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name HAVING COUNT(Friend.friend_id) >= 3

index is 890
SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"
Show the names of all of the high schooler Kyle's friends.
schema_links:
Show the names of all of the high schooler Kyle's friends. | highschooler : highschooler.name ( Kyle ) , highschooler.id , highschooler.grade , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select _ from _ where _ = _ | select Highschooler.name from Highschooler join Friend on Highschooler.ID = Friend.friend_id where Highschooler.name = 'Kyle'
natsql:
select _ from _ where _ = _ | select Highschooler.name from Highschooler join Friend on Highschooler.ID = Friend.friend_id where Highschooler.name = 'Kyle'
SQL:
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id WHERE Highschooler.name = 'Kyle'
self correction:
SELECT Highschooler.name  FROM Highschooler  JOIN Friend ON Highschooler.ID = Friend.friend_id  WHERE Friend.student_id = (     SELECT ID      FROM Highschooler      WHERE name = 'Kyle' )

index is 891
SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"
Return the names of friends of the high school student Kyle.
schema_links:
Return the names of friends of the high school student Kyle. | highschooler : highschooler.name ( Kyle ) , highschooler.id , highschooler.grade , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select _ from _ where @.@ ( _ ) = @.@ ( 'Kyle' ) | select T2.name from Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id WHERE T1.name  =  'Kyle'
natsql:
select _ from _ where @.@ ( _ ) = @.@ ( 'Kyle' ) | select T2.name from Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id WHERE T1.name  =  'Kyle'
SQL:
SELECT T2.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.name = 'Kyle'
self correction:
SELECT T2.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id JOIN Highschooler AS T3 ON T2.friend_id = T3.ID WHERE T1.name = 'Kyle'

index is 892
SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
How many friends does the high school student Kyle have?
schema_links:
How many friends does the high school student Kyle have? | highschooler : highschooler.name ( Kyle ) , highschooler.id , highschooler.grade , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select count ( _ ) from _ where @.@ = _ | select count ( friend.friend_id ) from highschooler join friend on highschooler.id = friend.student_id where highschooler.name = 'Kyle'
SQL = SELECT count(friend_id) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.name = 'Kyle'
natsql:
select count ( _ ) from _ where @.@ = _ | select count ( friend.friend_id ) from highschooler join friend on highschooler.id = friend.student_id where highschooler.name = 'Kyle'

SQL:
SELECT count(friend_id) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.name = 'Kyle'
self correction:
SELECT count(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id WHERE Highschooler.name = 'Kyle'

index is 893
SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
Count the number of friends Kyle has.
schema_links:
Count the number of friends Kyle has. | highschooler : highschooler.name ( Kyle ) , highschooler.id , highschooler.grade , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select count ( _ ) from _ where _ = "Kyle" | select count ( * ) from highschooler where name = "Kyle"
SQL = SELECT count(*) FROM highschooler WHERE name = 'Kyle'
natsql:
select count ( _ ) from _ where _ = "Kyle" | select count ( * ) from highschooler where name = "Kyle"

SQL:
SELECT count(*) FROM highschooler WHERE name = 'Kyle'
self correction:
SELECT count(*) FROM Friend JOIN Highschooler ON Friend.friend_id = Highschooler.ID WHERE Highschooler.name = 'Kyle'

index is 894
SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend
Show ids of all students who do not have any friends.
schema_links:
Show ids of all students who do not have any friends. | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select _ from _ where not exists ( select _ from _ where @.@ = @.@ ) | select highschooler.id from highschooler where not exists ( select * from friend where highschooler.id = friend.student_id )
SQL = SELECT id FROM highschooler WHERE NOT EXISTS (SELECT * FROM friend WHERE highschooler.id = friend.student_id)
natsql:
select _ from _ where not exists ( select _ from _ where @.@ = @.@ ) | select highschooler.id from highschooler where not exists ( select * from friend where highschooler.id = friend.student_id )

SQL:
SELECT id FROM highschooler WHERE NOT EXISTS (SELECT * FROM friend WHERE highschooler.id = friend.student_id)
self correction:
SELECT Highschooler.ID FROM Highschooler WHERE NOT EXISTS (     SELECT *     FROM Friend     WHERE Highschooler.ID = Friend.student_id )

index is 895
SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend
What are the ids of high school students who do not have friends?
schema_links:
What are the ids of high school students who do not have friends? | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select _ from _ where not exists ( select _ from _ where _._ = _._ ) | select highschooler.id from highschooler where not exists ( select friend.student_id from friend where friend.student_id = highschooler.id )
SQL = SELECT id FROM highschooler WHERE NOT EXISTS (SELECT student_id FROM friend WHERE friend.student_id  =  highschooler.id)
natsql:
select _ from _ where not exists ( select _ from _ where _._ = _._ ) | select highschooler.id from highschooler where not exists ( select friend.student_id from friend where friend.student_id = highschooler.id )

SQL:
SELECT id FROM highschooler WHERE NOT EXISTS (SELECT student_id FROM friend WHERE friend.student_id  =  highschooler.id)
self correction:
SELECT Highschooler.ID  FROM Highschooler  WHERE Highschooler.ID NOT IN (SELECT friend.student_id FROM Friend)

index is 896
SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id
Show names of all high school students who do not have any friends.
schema_links:
Show names of all high school students who do not have any friends. | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select _ from _ where not exists ( select * from _ where _._ = _._ ) | select highschooler.name from highschooler where not exists ( select * from friend where friend.student_id = highschooler.id )
SQL = SELECT name FROM Highschooler WHERE NOT EXISTS (SELECT * FROM Friend WHERE Friend.student_id = Highschooler.ID)
natsql:
select _ from _ where not exists ( select * from _ where _._ = _._ ) | select highschooler.name from highschooler where not exists ( select * from friend where friend.student_id = highschooler.id )

SQL:
SELECT name FROM Highschooler WHERE NOT EXISTS (SELECT * FROM Friend WHERE Friend.student_id = Highschooler.ID)
self correction:
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)

index is 897
SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id
What are the names of students who have no friends?
schema_links:
What are the names of students who have no friends? | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select _ from _ where not exists ( select _ from _ where _._ = _._ ) | select highschooler.name from highschooler where not exists ( select * from friend where friend.student_id = highschooler.id )
SQL = SELECT name FROM highschooler WHERE NOT EXISTS (SELECT * FROM friend WHERE friend.student_id = highschooler.id)
natsql:
select _ from _ where not exists ( select _ from _ where _._ = _._ ) | select highschooler.name from highschooler where not exists ( select * from friend where friend.student_id = highschooler.id )

SQL:
SELECT name FROM highschooler WHERE NOT EXISTS (SELECT * FROM friend WHERE friend.student_id = highschooler.id)
self correction:
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)

index is 898
SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes
Show the ids of high schoolers who have friends and are also liked by someone else.
schema_links:
Show the ids of high schoolers who have friends and are also liked by someone else. | likes : likes.student_id , likes.liked_id , likes.* | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.*
natsql and SQL generation:
select distinct _ from _ where exists ( select * from _ where _ ) and exists ( select * from _ where _ ) | select distinct highschooler.id from highschooler where exists ( select * from friend where friend.student_id = highschooler.id ) and exists ( select * from likes where likes.student_id = highschooler.id )
SQL = SELECT DISTINCT T1.id FROM highschooler AS T1 WHERE EXISTS ( SELECT * FROM friend AS T2 WHERE T2.student_id  =  T1.id ) AND EXISTS ( SELECT * FROM Likes AS T3 WHERE T3.student_id  =  T1.id )
natsql:
select distinct _ from _ where exists ( select * from _ where _ ) and exists ( select * from _ where _ ) | select distinct highschooler.id from highschooler where exists ( select * from friend where friend.student_id = highschooler.id ) and exists ( select * from likes where likes.student_id = highschooler.id )

SQL:
SELECT DISTINCT T1.id FROM highschooler AS T1 WHERE EXISTS ( SELECT * FROM friend AS T2 WHERE T2.student_id  =  T1.id ) AND EXISTS ( SELECT * FROM Likes AS T3 WHERE T3.student_id  =  T1.id )
self correction:
SELECT T1.ID  FROM Highschooler AS T1  WHERE EXISTS (     SELECT *      FROM Friend AS T2      WHERE T2.student_id = T1.ID )  AND EXISTS (     SELECT *      FROM Likes AS T3      WHERE T3.liked_id = T1.ID )

index is 899
SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes
What are the ids of students who both have friends and are liked?
schema_links:
What are the ids of students who both have friends and are liked? | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.* | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.*
natsql and SQL generation:
select distinct _ from _ where _ in ( select _ from _ ) and _ in ( select _ from _ ) | select distinct friend.student_id from friend where friend.student_id in ( select distinct highschooler.id from highschooler ) and friend.student_id in ( select distinct likes.student_id from likes )
SQL = SELECT DISTINCT T1.student_id FROM friend AS T1 WHERE T1.student_id IN (SELECT DISTINCT T2.id FROM highschooler AS T2) AND T1.student_id IN (SELECT DISTINCT T3.student_id FROM likes AS T3)
natsql:
select distinct _ from _ where _ in ( select _ from _ ) and _ in ( select _ from _ ) | select distinct friend.student_id from friend where friend.student_id in ( select distinct highschooler.id from highschooler ) and friend.student_id in ( select distinct likes.student_id from likes )

SQL:
SELECT DISTINCT T1.student_id FROM friend AS T1 WHERE T1.student_id IN (SELECT DISTINCT T2.id FROM highschooler AS T2) AND T1.student_id IN (SELECT DISTINCT T3.student_id FROM likes AS T3)
self correction:
SELECT T1.student_id FROM Friend AS T1 WHERE T1.student_id IN (     SELECT DISTINCT T2.ID     FROM Highschooler AS T2 ) AND T1.student_id IN (     SELECT DISTINCT T3.student_id     FROM Likes AS T3 )

index is 900
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id
Show name of all students who have some friends and also are liked by someone else.
schema_links:
Show name of all students who have some friends and also are liked by someone else. | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | likes : likes.liked_id , likes.student_id , likes.* | friend : friend.friend_id , friend.student_id , friend.*
natsql and SQL generation:
select distinct _ from _ where exists ( select * from _ where @.@ = @.@ ) and exists ( select * from _ where @.@ = @.@ ) | select distinct highschooler.name from highschooler where exists ( select * from friend where highschooler.id = friend.student_id ) and exists ( select * from likes where highschooler.id = likes.student_id )
SQL = SELECT DISTINCT name FROM highschooler WHERE EXISTS (SELECT * FROM friend WHERE highschooler.id = friend.student_id) AND EXISTS (SELECT * FROM likes WHERE highschooler.id = likes.student_id)
natsql:
select distinct _ from _ where exists ( select * from _ where @.@ = @.@ ) and exists ( select * from _ where @.@ = @.@ ) | select distinct highschooler.name from highschooler where exists ( select * from friend where highschooler.id = friend.student_id ) and exists ( select * from likes where highschooler.id = likes.student_id )

SQL:
SELECT DISTINCT name FROM highschooler WHERE EXISTS (SELECT * FROM friend WHERE highschooler.id = friend.student_id) AND EXISTS (SELECT * FROM likes WHERE highschooler.id = likes.student_id)
self correction:
SELECT DISTINCT highschooler.name FROM highschooler WHERE EXISTS (   SELECT *   FROM friend   WHERE highschooler.ID = friend.student_id ) AND EXISTS (   SELECT *   FROM likes   WHERE highschooler.ID = likes.student_id )

index is 901
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id
What are the names of high schoolers who both have friends and are liked?
schema_links:
What are the names of high schoolers who both have friends and are liked? | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.liked_id , likes.student_id , likes.*
natsql and SQL generation:
select _ from _ where exists ( select _ from _ where _ ) and exists ( select _ from _ where _ ) | select highschooler.name from highschooler where exists ( select * from friend where highschooler.id = friend.student_id ) and exists ( select * from likes where highschooler.id = likes.student_id )
SQL = SELECT name FROM highschooler WHERE EXISTS (SELECT * FROM friend WHERE highschooler.id = friend.student_id) AND EXISTS (SELECT * FROM likes WHERE highschooler.id = likes.student_id)
natsql:
select _ from _ where exists ( select _ from _ where _ ) and exists ( select _ from _ where _ ) | select highschooler.name from highschooler where exists ( select * from friend where highschooler.id = friend.student_id ) and exists ( select * from likes where highschooler.id = likes.student_id )

SQL:
SELECT name FROM highschooler WHERE EXISTS (SELECT * FROM friend WHERE highschooler.id = friend.student_id) AND EXISTS (SELECT * FROM likes WHERE highschooler.id = likes.student_id)
self correction:
SELECT Highschooler.name FROM Highschooler WHERE EXISTS (   SELECT *   FROM Friend   WHERE Highschooler.ID = Friend.student_id ) AND EXISTS (   SELECT *   FROM Likes   WHERE Highschooler.ID = Likes.student_id )

index is 902
SELECT student_id ,  count(*) FROM Likes GROUP BY student_id
Count the number of likes for each student id.
schema_links:
Count the number of likes for each student id. | likes : likes.student_id , likes.liked_id , likes.* | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.*
natsql and SQL generation:
select count ( _ ) , _ from _ group by _ | select count ( likes.* ) , likes.student_id from likes group by likes.student_id
SQL = SELECT count(*) ,  student_id FROM likes GROUP BY student_id
natsql:
select count ( _ ) , _ from _ group by _ | select count ( likes.* ) , likes.student_id from likes group by likes.student_id

SQL:
SELECT count(*) ,  student_id FROM likes GROUP BY student_id
self correction:
SELECT COUNT(*) AS like_count, student_id FROM Likes GROUP BY student_id

index is 903
SELECT student_id ,  count(*) FROM Likes GROUP BY student_id
How many likes correspond to each student id?
schema_links:
How many likes correspond to each student id? | likes : likes.student_id , likes.liked_id , likes.* | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.*
natsql and SQL generation:
select _, count (_) from _ group by _ | select likes.student_id, count (likes.*) from likes group by likes.student_id
SQL = SELECT student_id, count(*) FROM likes GROUP BY student_id
natsql:
select _, count (_) from _ group by _ | select likes.student_id, count (likes.*) from likes group by likes.student_id

SQL:
SELECT student_id, count(*) FROM likes GROUP BY student_id
self correction:
SELECT student_id, COUNT(*) AS likes_count FROM Likes GROUP BY student_id

index is 904
SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
Show the names of high schoolers who have likes, and numbers of likes for each.
schema_links:
Show the names of high schoolers who have likes, and numbers of likes for each. | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | likes : likes.liked_id , likes.student_id , likes.* | friend : friend.student_id , friend.friend_id , friend.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select highschooler.name , count ( likes.* ) from highschooler join likes on highschooler.id = likes.student_id group by highschooler.name
SQL = SELECT T1.name ,  count(T2.*) FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id GROUP BY T1.name
natsql:
select _ , count ( _ ) from _ group by _ | select highschooler.name , count ( likes.* ) from highschooler join likes on highschooler.id = likes.student_id group by highschooler.name

SQL:
SELECT T1.name ,  count(T2.*) FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id GROUP BY T1.name
self correction:
SELECT T1.name, COUNT(T2.*)  FROM Highschooler AS T1  JOIN Likes AS T2 ON T1.ID = T2.student_id  GROUP BY T1.name

index is 905
SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
What are the names of high schoolers who have likes, and how many likes does each have?
schema_links:
What are the names of high schoolers who have likes, and how many likes does each have? | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | likes : likes.student_id , likes.liked_id , likes.* | friend : friend.student_id , friend.friend_id , friend.*
natsql and SQL generation:
select _ , count ( _ ) from _ where _ = _ group by _ | select highschooler.name , count ( likes.liked_id ) from highschooler join likes on highschooler.id = likes.student_id group by highschooler.name
SQL = SELECT highschooler.name , count(likes.liked_id) FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name
natsql:
select _ , count ( _ ) from _ where _ = _ group by _ | select highschooler.name , count ( likes.liked_id ) from highschooler join likes on highschooler.id = likes.student_id group by highschooler.name

SQL:
SELECT highschooler.name , count(likes.liked_id) FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name
self correction:
SELECT highschooler.name, COUNT(likes.liked_id) FROM highschooler JOIN likes ON highschooler.ID = likes.student_id GROUP BY highschooler.name

index is 906
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
What is the name of the high schooler who has the greatest number of likes?
schema_links:
What is the name of the high schooler who has the greatest number of likes? | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | likes : likes.student_id , likes.liked_id , likes.* | friend : friend.student_id , friend.friend_id , friend.*
natsql and SQL generation:
select _ from _ order by _ desc limit _ | select highschooler.name from highschooler order by highschooler.id desc limit 1
SQL = SELECT name FROM highschooler ORDER BY id DESC LIMIT 1
natsql:
select _ from _ order by _ desc limit _ | select highschooler.name from highschooler order by highschooler.id desc limit 1

SQL:
SELECT name FROM highschooler ORDER BY id DESC LIMIT 1
self correction:
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID ORDER BY COUNT(Likes.liked_id) DESC LIMIT 1

index is 907
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Give the name of the student with the most likes.
schema_links:
Give the name of the student with the most likes. | likes : likes.student_id , likes.liked_id , likes.* | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.*
natsql and SQL generation:
select _ from _ order by count ( _ ) desc limit _ | select highschooler.name from highschooler order by count ( highschooler.name ) desc limit 1
SQL = SELECT T2.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id GROUP BY T2.student_id ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ order by count ( _ ) desc limit _ | select highschooler.name from highschooler order by count ( highschooler.name ) desc limit 1

SQL:
SELECT T2.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id GROUP BY T2.student_id ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID ORDER BY COUNT(*) DESC LIMIT 1

index is 908
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2
Show the names of students who have at least 2 likes.
schema_links:
Show the names of students who have at least 2 likes. | likes : likes.student_id , likes.liked_id , likes.* | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.*
natsql and SQL generation:
select distinct _ from _ where count ( _ ) >= _ group by _ | select distinct highschooler.name from highschooler where count ( likes.* ) >= 2 group by highschooler.name
SQL = SELECT DISTINCT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id GROUP BY T1.name HAVING COUNT(*)  >=  2
natsql:
select distinct _ from _ where count ( _ ) >= _ group by _ | select distinct highschooler.name from highschooler where count ( likes.* ) >= 2 group by highschooler.name

SQL:
SELECT DISTINCT T1.name FROM highschooler AS T1 JOIN likes AS T2 ON T1.id  =  T2.student_id GROUP BY T1.name HAVING COUNT(*)  >=  2
self correction:
SELECT T1.name  FROM Highschooler AS T1  JOIN Likes AS T2 ON T1.ID = T2.student_id  GROUP BY T1.name  HAVING COUNT(T2.liked_id) >= 2

index is 909
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2
What are the names of students who have 2 or more likes?
schema_links:
What are the names of students who have 2 or more likes? | likes : likes.student_id , likes.liked_id , likes.* | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.*
natsql and SQL generation:
select _ from _ where count ( _ ) >= _ group by _ | select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by highschooler.name having count(*) >= 2
SQL = SELECT name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY name HAVING COUNT(*) >= 2
natsql:
select _ from _ where count ( _ ) >= _ group by _ | select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by highschooler.name having count(*) >= 2

SQL:
SELECT name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY name HAVING COUNT(*) >= 2
self correction:
SELECT name FROM Highschooler  JOIN Likes ON Highschooler.ID = Likes.student_id  GROUP BY Highschooler.name  HAVING COUNT(Likes.liked_id) >= 2

index is 910
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2
Show the names of students who have a grade higher than 5 and have at least 2 friends.
schema_links:
Show the names of students who have a grade higher than 5 and have at least 2 friends. | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select distinct _ from _ where _ > _ and _ >= _ group by _ | select distinct highschooler.name from highschooler join friend on highschooler.id = friend.student_id join likes on highschooler.id = likes.student_id where highschooler.grade > 5 and count(distinct friend.friend_id) >= 2 group by highschooler.name
SQL = SELECT DISTINCT name FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON highschooler.id = likes.student_id WHERE grade > 5 AND COUNT(DISTINCT friend.friend_id) >= 2 GROUP BY name
natsql:
select distinct _ from _ where _ > _ and _ >= _ group by _ | select distinct highschooler.name from highschooler join friend on highschooler.id = friend.student_id join likes on highschooler.id = likes.student_id where highschooler.grade > 5 and count(distinct friend.friend_id) >= 2 group by highschooler.name

SQL:
SELECT DISTINCT name FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON highschooler.id = likes.student_id WHERE grade > 5 AND COUNT(DISTINCT friend.friend_id) >= 2 GROUP BY name
self correction:
SELECT name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id JOIN Likes ON Highschooler.ID = Likes.student_id WHERE Highschooler.grade > 5 GROUP BY Highschooler.ID, Highschooler.name HAVING COUNT(DISTINCT Friend.friend_id) >= 2

index is 911
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2
What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?
schema_links:
What are the names of high schoolers who have a grade of over 5 and have 2 or more friends? | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select _ from _ where _ > _ and _ >= _ | select highschooler.name from highschooler where highschooler.grade > 5 and (select count(*) from friend where friend.student_id = highschooler.id) >= 2
SQL = SELECT name FROM highschooler WHERE grade > 5 AND (SELECT count(*) FROM friend WHERE friend.student_id = highschooler.id) >= 2
natsql:
select _ from _ where _ > _ and _ >= _ | select highschooler.name from highschooler where highschooler.grade > 5 and (select count(*) from friend where friend.student_id = highschooler.id) >= 2

SQL:
SELECT name FROM highschooler WHERE grade > 5 AND (SELECT count(*) FROM friend WHERE friend.student_id = highschooler.id) >= 2
self correction:
SELECT name FROM Highschooler WHERE grade > 5 AND ID IN (   SELECT student_id   FROM Friend   GROUP BY student_id   HAVING COUNT(*) >= 2 )

index is 912
SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
How many likes does Kyle have?
schema_links:
How many likes does Kyle have? | highschooler : highschooler.name ( Kyle ) , highschooler.id , highschooler.grade , highschooler.* | likes : likes.liked_id , likes.student_id , likes.* | friend : friend.student_id , friend.friend_id , friend.*
natsql and SQL generation:
select count ( * ) from likes where likes.student_id = ( select id from highschooler where name = 'Kyle' )
SQL = SELECT COUNT(*) FROM likes WHERE student_id  =  (SELECT id FROM highschooler WHERE name  =  'Kyle')
natsql:
select count ( * ) from likes where likes.student_id = ( select id from highschooler where name = 'Kyle' )

SQL:
SELECT COUNT(*) FROM likes WHERE student_id  =  (SELECT id FROM highschooler WHERE name  =  'Kyle')
self correction:
SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')

index is 913
SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
Return the number of likes that the high schooler named Kyle has.
schema_links:
Return the number of likes that the high schooler named Kyle has. | highschooler : highschooler.name ( Kyle ) , highschooler.id , highschooler.grade , highschooler.* | likes : likes.liked_id , likes.student_id , likes.* | friend : friend.student_id , friend.friend_id , friend.*
natsql and SQL generation:
select count ( _ ) from _ where _ = @ | select count ( likes.liked_id ) from likes where likes.student_id = (select highschooler.id from highschooler where highschooler.name = 'Kyle')
SQL = SELECT count(liked_id) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
natsql:
select count ( _ ) from _ where _ = @ | select count ( likes.liked_id ) from likes where likes.student_id = (select highschooler.id from highschooler where highschooler.name = 'Kyle')

SQL:
SELECT count(liked_id) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
self correction:
SELECT count(liked_id) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')

index is 914
SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
Find the average grade of all students who have some friends.
schema_links:
Find the average grade of all students who have some friends. | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select avg ( _ ) from _ where _ in ( select _ from _ ) | select avg ( highschooler.grade ) from highschooler where highschooler.id in ( select distinct friend.student_id from friend )
SQL = SELECT avg(grade) FROM highschooler WHERE id IN (SELECT DISTINCT student_id FROM friend)
natsql:
select avg ( _ ) from _ where _ in ( select _ from _ ) | select avg ( highschooler.grade ) from highschooler where highschooler.id in ( select distinct friend.student_id from friend )

SQL:
SELECT avg(grade) FROM highschooler WHERE id IN (SELECT DISTINCT student_id FROM friend)
self correction:
SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend)

index is 915
SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
What is the average grade of students who have friends?
schema_links:
What is the average grade of students who have friends? | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select avg ( _ ) from _ where _ in ( select _ from _ ) | select avg ( highschooler.grade ) from highschooler where highschooler.id in ( select friend.student_id from friend )
SQL = SELECT avg(grade) FROM highschooler WHERE id IN (SELECT student_id FROM friend)
natsql:
select avg ( _ ) from _ where _ in ( select _ from _ ) | select avg ( highschooler.grade ) from highschooler where highschooler.id in ( select friend.student_id from friend )

SQL:
SELECT avg(grade) FROM highschooler WHERE id IN (SELECT student_id FROM friend)
self correction:
SELECT avg(grade)  FROM Highschooler  WHERE ID IN (SELECT student_id FROM Friend)

index is 916
SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
Find the minimum grade of students who have no friends.
schema_links:
Find the minimum grade of students who have no friends. | highschooler : highschooler.grade , highschooler.name , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select min ( _ ) from _ where _ not in ( select _ from _ ) | select min ( highschooler.grade ) from highschooler where highschooler.id not in ( select friend.student_id from friend )
natsql:
select min ( _ ) from _ where _ not in ( select _ from _ ) | select min ( highschooler.grade ) from highschooler where highschooler.id not in ( select friend.student_id from friend )
SQL:
SELECT min(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)
self correction:
SELECT min(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)

index is 917
SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
What is the lowest grade of students who do not have any friends?
schema_links:
What is the lowest grade of students who do not have any friends? | highschooler : highschooler.grade , highschooler.name , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*
natsql and SQL generation:
select min ( _ ) from _ where @.@ is null | select min ( highschooler.grade ) from highschooler where highschooler.id not in ( select distinct friend.student_id from friend )
SQL = SELECT min(grade) FROM highschooler WHERE id NOT IN (SELECT DISTINCT student_id FROM friend)
natsql:
select min ( _ ) from _ where @.@ is null | select min ( highschooler.grade ) from highschooler where highschooler.id not in ( select distinct friend.student_id from friend )

SQL:
SELECT min(grade) FROM highschooler WHERE id NOT IN (SELECT DISTINCT student_id FROM friend)
self correction:
SELECT min(grade)  FROM Highschooler  WHERE ID NOT IN (SELECT DISTINCT student_id FROM Friend)

index is 918
SELECT state FROM Owners INTERSECT SELECT state FROM Professionals
Which states have both owners and professionals living there?
schema_links:
Which states have both owners and professionals living there? | professionals : professionals.state , professionals.professional_id , professionals.role_code , professionals.street , professionals.city , professionals.* | owners : owners.state , owners.owner_id , owners.first_name , owners.email_address , owners.last_name , owners.* | dogs : dogs.owner_id , dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.* | breeds : breeds.breed_code , breeds.breed_name , breeds.*
natsql and SQL generation:
select _ from _ where _ in ( select _ from _ ) and _ in ( select _ from _ ) | select distinct owners.state from owners where owners.state in ( select distinct owners.state from owners ) and owners.state in ( select distinct professionals.state from professionals )
SQL = SELECT DISTINCT state FROM owners WHERE state IN (SELECT DISTINCT state FROM professionals)
natsql:
select _ from _ where _ in ( select _ from _ ) and _ in ( select _ from _ ) | select distinct owners.state from owners where owners.state in ( select distinct owners.state from owners ) and owners.state in ( select distinct professionals.state from professionals )

SQL:
SELECT DISTINCT state FROM owners WHERE state IN (SELECT DISTINCT state FROM professionals)
self correction:
SELECT DISTINCT state  FROM Owners  WHERE state IN (SELECT DISTINCT state FROM Professionals)

index is 919
SELECT state FROM Owners INTERSECT SELECT state FROM Professionals
Find the states where both owners and professionals live.
schema_links:
Find the states where both owners and professionals live. | professionals : professionals.state , professionals.professional_id , professionals.role_code , professionals.street , professionals.city , professionals.* | owners : owners.state , owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | breeds : breeds.breed_code , breeds.breed_name , breeds.*
natsql and SQL generation:
select distinct _ from _ intersect select distinct _ from _ | select distinct professionals.state from professionals intersect select distinct owners.state from owners
SQL = SELECT DISTINCT state FROM professionals INTERSECT SELECT DISTINCT state FROM owners
natsql:
select distinct _ from _ intersect select distinct _ from _ | select distinct professionals.state from professionals intersect select distinct owners.state from owners

SQL:
SELECT DISTINCT state FROM professionals INTERSECT SELECT DISTINCT state FROM owners
self correction:
SELECT DISTINCT state FROM Owners INNER JOIN Professionals ON Owners.state = Professionals.state

index is 920
SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )
What is the average age of the dogs who have gone through any treatments?
schema_links:
What is the average age of the dogs who have gone through any treatments? | dogs : dogs.age , dogs.dog_id , dogs.name , dogs.owner_id , dogs.breed_code , dogs.* | treatments : treatments.dog_id , treatments.date_of_treatment , treatments.treatment_id , treatments.professional_id , treatments.treatment_type_code , treatments.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | owners : owners.street , owners.city , owners.state , owners.cell_number , owners.owner_id , owners.*
natsql and SQL generation:
select avg ( _ ) from _ | select avg ( dogs.age ) from dogs join treatments on dogs.dog_id = treatments.dog_id
SQL = SELECT AVG(age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id
natsql:
select avg ( _ ) from _ | select avg ( dogs.age ) from dogs join treatments on dogs.dog_id = treatments.dog_id

SQL:
SELECT AVG(age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id
self correction:
SELECT AVG(dogs.age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id

index is 921
SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )
Find the average age of the dogs who went through treatments.
schema_links:
Find the average age of the dogs who went through treatments. | dogs : dogs.age , dogs.dog_id , dogs.name , dogs.breed_code , dogs.owner_id , dogs.* | treatments : treatments.dog_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.treatment_id , treatments.professional_id , treatments.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description , treatment_types.*
natsql and SQL generation:
select avg ( _ ) from _ | select avg ( dogs.age ) from dogs join treatments on dogs.dog_id = treatments.dog_id
SQL = SELECT AVG(age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id
natsql:
select avg ( _ ) from _ | select avg ( dogs.age ) from dogs join treatments on dogs.dog_id = treatments.dog_id

SQL:
SELECT AVG(age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id
self correction:
SELECT AVG(dogs.age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id

index is 922
SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.
schema_links:
Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone. | professionals : professionals.state ( Indiana ) , professionals.last_name , professionals.cell_number , professionals.professional_id , professionals.home_phone , professionals.* | treatments : treatments.professional_id , treatments.treatment_id , treatments.treatment_type_code , treatments.dog_id , treatments.date_of_treatment , treatments.* | owners : owners.state ( Indiana ) , owners.street , owners.city , owners.cell_number , owners.owner_id , owners.* | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description , treatment_types.*
natsql and SQL generation:
select _ , _ , _ from _ where @.@ = _ or count ( _ ) > _ group by _ | select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals where professionals.state = 'Indiana' or count ( treatments.* ) > 2 group by professionals.professional_id
SQL = SELECT professional_id , last_name , cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING count(*) > 2)
natsql:
select _ , _ , _ from _ where @.@ = _ or count ( _ ) > _ group by _ | select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals where professionals.state = 'Indiana' or count ( treatments.* ) > 2 group by professionals.professional_id

SQL:
SELECT professional_id , last_name , cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING count(*) > 2)
self correction:
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)

index is 923
SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.
schema_links:
Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments. | professionals : professionals.state ( Indiana ) , professionals.professional_id , professionals.last_name , professionals.cell_number , professionals.home_phone , professionals.* | treatments : treatments.professional_id , treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.* | owners : owners.state ( Indiana ) , owners.first_name , owners.last_name , owners.street , owners.city , owners.* | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description , treatment_types.*
natsql and SQL generation:
select _ , _ , _ from _ where @.@ = _ or count ( _ ) > _ | select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals where professionals.state = 'Indiana' or (select count ( treatments.* ) from treatments where treatments.professional_id = professionals.professional_id) > 2
SQL = SELECT professional_id ,  last_name ,  cell_number FROM professionals WHERE state  =  'Indiana' OR (SELECT count(*) FROM treatments WHERE professional_id = professionals.professional_id)  >  2
natsql:
select _ , _ , _ from _ where @.@ = _ or count ( _ ) > _ | select professionals.professional_id , professionals.last_name , professionals.cell_number from professionals where professionals.state = 'Indiana' or (select count ( treatments.* ) from treatments where treatments.professional_id = professionals.professional_id) > 2

SQL:
SELECT professional_id ,  last_name ,  cell_number FROM professionals WHERE state  =  'Indiana' OR (SELECT count(*) FROM treatments WHERE professional_id = professionals.professional_id)  >  2
self correction:
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (     SELECT professional_id     FROM Treatments     GROUP BY professional_id     HAVING COUNT(*) > 2 )

index is 924
select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )
Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .
schema_links:
Which dogs have not cost their owner more than 1000 for treatment ? List the dog names . | dogs : dogs.name , dogs.owner_id , dogs.dog_id , dogs.breed_code , dogs.date_adopted , dogs.* | treatments : treatments.cost_of_treatment , treatments.treatment_type_code , treatments.treatment_id , treatments.dog_id , treatments.date_of_treatment , treatments.* | owners : owners.owner_id , owners.first_name , owners.street , owners.city , owners.state , owners.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*
natsql and SQL generation:
select _ from _ where _ | select dogs.name from dogs where not exists (select * from treatments where treatments.dog_id = dogs.dog_id and treatments.cost_of_treatment > 1000)
SQL = SELECT name FROM dogs WHERE NOT EXISTS (SELECT * FROM treatments WHERE treatments.dog_id = dogs.dog_id AND treatments.cost_of_treatment > 1000)
natsql:
select _ from _ where _ | select dogs.name from dogs where not exists (select * from treatments where treatments.dog_id = dogs.dog_id and treatments.cost_of_treatment > 1000)

SQL:
SELECT name FROM dogs WHERE NOT EXISTS (SELECT * FROM treatments WHERE treatments.dog_id = dogs.dog_id AND treatments.cost_of_treatment > 1000)
self correction:
SELECT name  FROM Dogs  WHERE dog_id NOT IN (     SELECT dog_id      FROM Treatments      WHERE cost_of_treatment > 1000 )

index is 925
select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )
What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?
schema_links:
What are the names of the dogs for which the owner has not spend more than 1000 for treatment ? | dogs : dogs.name , dogs.owner_id , dogs.dog_id , dogs.breed_code , dogs.age , dogs.* | treatments : treatments.cost_of_treatment , treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.* | owners : owners.owner_id , owners.first_name , owners.street , owners.city , owners.state , owners.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*
natsql and SQL generation:
select distinct _ from _ where not exists ( select _ from _ where @.@ > _ ) | select distinct dogs.name from dogs where not exists ( select treatments.cost_of_treatment from treatments where treatments.owner_id = dogs.owner_id and treatments.cost_of_treatment > 1000 )
SQL = SELECT DISTINCT T1.name FROM dogs AS T1 WHERE NOT EXISTS (SELECT T2.cost_of_treatment FROM treatments AS T2 WHERE T2.owner_id  =  T1.owner_id AND T2.cost_of_treatment  >  1000)
natsql:
select distinct _ from _ where not exists ( select _ from _ where @.@ > _ ) | select distinct dogs.name from dogs where not exists ( select treatments.cost_of_treatment from treatments where treatments.owner_id = dogs.owner_id and treatments.cost_of_treatment > 1000 )

SQL:
SELECT DISTINCT T1.name FROM dogs AS T1 WHERE NOT EXISTS (SELECT T2.cost_of_treatment FROM treatments AS T2 WHERE T2.owner_id  =  T1.owner_id AND T2.cost_of_treatment  >  1000)
self correction:
SELECT T1.name  FROM Dogs AS T1  WHERE NOT EXISTS (     SELECT T2.cost_of_treatment      FROM Treatments AS T2      INNER JOIN Dogs AS T3 ON T3.dog_id = T2.dog_id     INNER JOIN Owners AS T4 ON T4.owner_id = T3.owner_id     WHERE T4.owner_id = T1.owner_id AND T2.cost_of_treatment > 1000 )

index is 926
SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs
Which first names are used for professionals or owners but are not used as dog names?
schema_links:
Which first names are used for professionals or owners but are not used as dog names? | professionals : professionals.first_name , professionals.professional_id , professionals.role_code , professionals.last_name , professionals.home_phone , professionals.* | dogs : dogs.name , dogs.dog_id , dogs.owner_id , dogs.age , dogs.gender , dogs.* | owners : owners.first_name , owners.owner_id , owners.email_address , owners.home_phone , owners.cell_number , owners.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ ) | select professionals.first_name from professionals where professionals.first_name not in ( select dogs.name from dogs ) union select owners.first_name from owners where owners.first_name not in ( select dogs.name from dogs )
SQL = SELECT first_name FROM professionals WHERE first_name NOT IN (SELECT name FROM dogs) UNION SELECT first_name FROM owners WHERE first_name NOT IN (SELECT name FROM dogs)
natsql:
select _ from _ where _ not in ( select _ from _ ) | select professionals.first_name from professionals where professionals.first_name not in ( select dogs.name from dogs ) union select owners.first_name from owners where owners.first_name not in ( select dogs.name from dogs )

SQL:
SELECT first_name FROM professionals WHERE first_name NOT IN (SELECT name FROM dogs) UNION SELECT first_name FROM owners WHERE first_name NOT IN (SELECT name FROM dogs)
self correction:
SELECT first_name FROM professionals WHERE first_name NOT IN (SELECT name FROM dogs)  UNION  SELECT first_name FROM owners WHERE first_name NOT IN (SELECT name FROM dogs)

index is 927
SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs
Find the first names that are used for professionals or owners but are not used as dog names.
schema_links:
Find the first names that are used for professionals or owners but are not used as dog names. | professionals : professionals.first_name , professionals.professional_id , professionals.role_code , professionals.street , professionals.city , professionals.* | dogs : dogs.name , dogs.dog_id , dogs.owner_id , dogs.age , dogs.gender , dogs.* | owners : owners.first_name , owners.owner_id , owners.last_name , owners.street , owners.city , owners.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*
natsql and SQL generation:
select distinct _ from _ where _ not in ( select _ from _ ) or _ not in ( select _ from _ ) | select distinct professionals.first_name from professionals where professionals.first_name not in ( select dogs.name from dogs ) or professionals.first_name not in ( select owners.first_name from owners )
SQL = SELECT DISTINCT T1.first_name FROM professionals AS T1 WHERE T1.first_name NOT IN (SELECT T2.name FROM dogs AS T2) OR T1.first_name NOT IN (SELECT T3.first_name FROM owners AS T3)
natsql:
select distinct _ from _ where _ not in ( select _ from _ ) or _ not in ( select _ from _ ) | select distinct professionals.first_name from professionals where professionals.first_name not in ( select dogs.name from dogs ) or professionals.first_name not in ( select owners.first_name from owners )

SQL:
SELECT DISTINCT T1.first_name FROM professionals AS T1 WHERE T1.first_name NOT IN (SELECT T2.name FROM dogs AS T2) OR T1.first_name NOT IN (SELECT T3.first_name FROM owners AS T3)
self correction:
SELECT DISTINCT T1.first_name  FROM Professionals AS T1  WHERE T1.first_name NOT IN (     SELECT T2.name      FROM Dogs AS T2 ) AND T1.first_name NOT IN (     SELECT T3.first_name      FROM Owners AS T3 )

index is 928
SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
Which professional did not operate any treatment on dogs? List the professional's id, role and email.
schema_links:
Which professional did not operate any treatment on dogs? List the professional's id, role and email. | professionals : professionals.professional_id , professionals.email_address , professionals.role_code , professionals.first_name , professionals.street , professionals.* | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.email_address , owners.owner_id , owners.*
natsql and SQL generation:
select _ , _ , _ from _ where not exists ( select * from _ where @.@ = @.@ ) | select professionals.professional_id , professionals.role_code , professionals.email_address from professionals where not exists ( select * from treatments where treatments.professional_id = professionals.professional_id )
SQL = SELECT professional_id ,  role_code ,  email_address FROM professionals WHERE NOT EXISTS (SELECT * FROM treatments WHERE treatments.professional_id = professionals.professional_id)
natsql:
select _ , _ , _ from _ where not exists ( select * from _ where @.@ = @.@ ) | select professionals.professional_id , professionals.role_code , professionals.email_address from professionals where not exists ( select * from treatments where treatments.professional_id = professionals.professional_id )

SQL:
SELECT professional_id ,  role_code ,  email_address FROM professionals WHERE NOT EXISTS (SELECT * FROM treatments WHERE treatments.professional_id = professionals.professional_id)
self correction:
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (     SELECT professional_id     FROM Treatments )

index is 929
SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
Give me the id, role and email of the professionals who did not perform any treatment on dogs.
schema_links:
Give me the id, role and email of the professionals who did not perform any treatment on dogs. | professionals : professionals.professional_id , professionals.email_address , professionals.role_code , professionals.street , professionals.city , professionals.* | treatments : treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.cost_of_treatment , treatments.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.email_address , owners.owner_id , owners.*
natsql and SQL generation:
select _ , _ , _ from _ where not exists ( select * from _ where _.professional_id = _.professional_id ) | select professionals.professional_id , professionals.role_code , professionals.email_address from professionals where not exists ( select * from treatments where treatments.professional_id = professionals.professional_id )
SQL = SELECT professional_id , role_code , email_address FROM professionals WHERE NOT EXISTS (SELECT * FROM treatments WHERE treatments.professional_id  =  professionals.professional_id)
natsql:
select _ , _ , _ from _ where not exists ( select * from _ where _.professional_id = _.professional_id ) | select professionals.professional_id , professionals.role_code , professionals.email_address from professionals where not exists ( select * from treatments where treatments.professional_id = professionals.professional_id )

SQL:
SELECT professional_id , role_code , email_address FROM professionals WHERE NOT EXISTS (SELECT * FROM treatments WHERE treatments.professional_id  =  professionals.professional_id)
self correction:
SELECT professional_id, role_code, email_address  FROM Professionals  WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)

index is 930
SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
Which owner owns the most dogs? List the owner id, first name and last name.
schema_links:
Which owner owns the most dogs? List the owner id, first name and last name. | owners : owners.first_name , owners.last_name , owners.owner_id , owners.email_address , owners.home_phone , owners.* | dogs : dogs.owner_id , dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.* | breeds : breeds.breed_code , breeds.breed_name , breeds.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql and SQL generation:
select _ , _ , _ from _ group by _ order by count ( _ ) desc limit _ | select owners.owner_id , owners.first_name , owners.last_name from owners group by owners.owner_id , owners.first_name , owners.last_name order by count ( dogs.owner_id ) desc limit 1
SQL = SELECT owner_id ,  first_name ,  last_name FROM owners GROUP BY owner_id, first_name, last_name ORDER BY count(*) DESC LIMIT 1
natsql:
select _ , _ , _ from _ group by _ order by count ( _ ) desc limit _ | select owners.owner_id , owners.first_name , owners.last_name from owners group by owners.owner_id , owners.first_name , owners.last_name order by count ( dogs.owner_id ) desc limit 1

SQL:
SELECT owner_id ,  first_name ,  last_name FROM owners GROUP BY owner_id, first_name, last_name ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT owner_id, first_name, last_name  FROM Owners  GROUP BY owner_id, first_name, last_name  ORDER BY COUNT(*) DESC  LIMIT 1

index is 931
SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
Return the owner id, first name and last name of the owner who has the most dogs.
schema_links:
Return the owner id, first name and last name of the owner who has the most dogs. | owners : owners.first_name , owners.last_name , owners.owner_id , owners.email_address , owners.home_phone , owners.* | dogs : dogs.owner_id , dogs.dog_id , dogs.name , dogs.age , dogs.gender , dogs.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql and SQL generation:
select _ , _ , _ from _ group by _ order by count ( _ ) desc limit _ | select owners.owner_id , owners.first_name , owners.last_name from owners group by owners.owner_id order by count ( dogs.* ) desc limit 1
SQL = SELECT owner_id ,  first_name ,  last_name FROM owners GROUP BY owner_id ORDER BY count(*) DESC LIMIT 1
natsql:
select _ , _ , _ from _ group by _ order by count ( _ ) desc limit _ | select owners.owner_id , owners.first_name , owners.last_name from owners group by owners.owner_id order by count ( dogs.* ) desc limit 1

SQL:
SELECT owner_id ,  first_name ,  last_name FROM owners GROUP BY owner_id ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1

index is 932
SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
Which professionals have done at least two treatments? List the professional's id, role, and first name.
schema_links:
Which professionals have done at least two treatments? List the professional's id, role, and first name. | professionals : professionals.professional_id , professionals.first_name , professionals.role_code , professionals.street , professionals.city , professionals.* | treatments : treatments.professional_id , treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.* | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description , treatment_types.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*
natsql and SQL generation:
select _ , _ , _ from _ where count ( _ ) >= _ group by _ | select professionals.professional_id , professionals.role_code , professionals.first_name from professionals where count ( treatments.professional_id ) >= 2 group by professionals.professional_id
SQL = SELECT professional_id , role_code , first_name FROM professionals GROUP BY professional_id HAVING count(*)  >=  2
natsql:
select _ , _ , _ from _ where count ( _ ) >= _ group by _ | select professionals.professional_id , professionals.role_code , professionals.first_name from professionals where count ( treatments.professional_id ) >= 2 group by professionals.professional_id

SQL:
SELECT professional_id , role_code , first_name FROM professionals GROUP BY professional_id HAVING count(*)  >=  2
self correction:
SELECT professional_id, role_code, first_name FROM Professionals GROUP BY professional_id, role_code, first_name HAVING COUNT(*) >= 2

index is 933
SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
What are the id, role, and first name of the professionals who have performed two or more treatments?
schema_links:
What are the id, role, and first name of the professionals who have performed two or more treatments? | professionals : professionals.professional_id , professionals.first_name , professionals.role_code , professionals.street , professionals.city , professionals.* | treatments : treatments.professional_id , treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.* | owners : owners.first_name , owners.street , owners.city , owners.state , owners.owner_id , owners.* | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description , treatment_types.*
natsql and SQL generation:
select _ , _ , _ from _ where count ( _ ) >= _ group by _ | select professionals.professional_id , professionals.role_code , professionals.first_name from professionals where count ( treatments.* ) >= 2 group by professionals.professional_id , professionals.role_code , professionals.first_name
SQL = SELECT professional_id , role_code , first_name FROM professionals GROUP BY professional_id , role_code , first_name HAVING count(*) >= 2
natsql:
select _ , _ , _ from _ where count ( _ ) >= _ group by _ | select professionals.professional_id , professionals.role_code , professionals.first_name from professionals where count ( treatments.* ) >= 2 group by professionals.professional_id , professionals.role_code , professionals.first_name

SQL:
SELECT professional_id , role_code , first_name FROM professionals GROUP BY professional_id , role_code , first_name HAVING count(*) >= 2
self correction:
SELECT professional_id, role_code, first_name FROM Professionals GROUP BY professional_id, role_code, first_name HAVING COUNT(*) >= 2

index is 934
SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1
What is the name of the breed with the most dogs?
schema_links:
What is the name of the breed with the most dogs? | breeds : breeds.breed_name , breeds.breed_code , breeds.* | dogs : dogs.breed_code , dogs.owner_id , dogs.name , dogs.dog_id , dogs.size_code , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select breeds.breed_name from breeds group by breeds.breed_name order by count ( breeds.* ) desc limit 1
SQL = SELECT breed_name FROM breeds GROUP BY breed_name ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select breeds.breed_name from breeds group by breeds.breed_name order by count ( breeds.* ) desc limit 1

SQL:
SELECT breed_name FROM breeds GROUP BY breed_name ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT breed_name  FROM Breeds  GROUP BY breed_name  ORDER BY COUNT(*) DESC  LIMIT 1

index is 935
SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1
Which breed do the most dogs have? Give me the breed name.
schema_links:
Which breed do the most dogs have? Give me the breed name. | breeds : breeds.breed_name , breeds.breed_code , breeds.* | dogs : dogs.breed_code , dogs.owner_id , dogs.dog_id , dogs.name , dogs.age , dogs.* | owners : owners.street , owners.city , owners.state , owners.cell_number , owners.owner_id , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql and SQL generation:
select _ from _ group by _ order by count ( * ) desc limit _ | select breeds.breed_name from breeds group by breeds.breed_name order by count ( * ) desc limit 1
SQL = SELECT breed_name FROM breeds GROUP BY breed_name ORDER BY COUNT(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( * ) desc limit _ | select breeds.breed_name from breeds group by breeds.breed_name order by count ( * ) desc limit 1

SQL:
SELECT breed_name FROM breeds GROUP BY breed_name ORDER BY COUNT(*) DESC LIMIT 1
self correction:
SELECT breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY breed_name ORDER BY COUNT(*) DESC LIMIT 1

index is 936
SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.
schema_links:
Which owner has paid for the most treatments on his or her dogs? List the owner id and last name. | owners : owners.owner_id , owners.last_name , owners.first_name , owners.email_address , owners.cell_number , owners.* | treatments : treatments.cost_of_treatment , treatments.dog_id , treatments.treatment_id , treatments.professional_id , treatments.treatment_type_code , treatments.* | dogs : dogs.owner_id , dogs.name , dogs.dog_id , dogs.breed_code , dogs.age , dogs.* | treatment_types : treatment_types.treatment_type_description , treatment_types.treatment_type_code , treatment_types.*
natsql and SQL generation:
select _ , _ from _ group by _ order by sum ( _ ) desc limit _ | select owners.owner_id , owners.last_name from owners group by owners.owner_id , owners.last_name order by sum ( treatments.cost_of_treatment ) desc limit 1
SQL = SELECT owner_id , last_name FROM owners GROUP BY owner_id , last_name ORDER BY sum(cost_of_treatment) DESC LIMIT 1
natsql:
select _ , _ from _ group by _ order by sum ( _ ) desc limit _ | select owners.owner_id , owners.last_name from owners group by owners.owner_id , owners.last_name order by sum ( treatments.cost_of_treatment ) desc limit 1

SQL:
SELECT owner_id , last_name FROM owners GROUP BY owner_id , last_name ORDER BY sum(cost_of_treatment) DESC LIMIT 1
self correction:
SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.last_name ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1

index is 937
SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.
schema_links:
Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs. | owners : owners.last_name , owners.owner_id , owners.first_name , owners.email_address , owners.home_phone , owners.* | treatments : treatments.cost_of_treatment , treatments.dog_id , treatments.treatment_id , treatments.professional_id , treatments.treatment_type_code , treatments.* | dogs : dogs.owner_id , dogs.dog_id , dogs.name , dogs.breed_code , dogs.age , dogs.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*
natsql and SQL generation:
select _ , _ from _ where _ = ( select max ( _ ) from _ ) | select owners.owner_id , owners.last_name from owners where owners.owner_id = ( select dogs.owner_id from treatments join dogs on treatments.dog_id = dogs.dog_id group by dogs.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1 )
SQL = SELECT owner_id ,  last_name FROM owners WHERE owner_id  =  (SELECT owner_id FROM dogs JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owner_id ORDER BY sum(cost_of_treatment) DESC LIMIT 1)
natsql:
select _ , _ from _ where _ = ( select max ( _ ) from _ ) | select owners.owner_id , owners.last_name from owners where owners.owner_id = ( select dogs.owner_id from treatments join dogs on treatments.dog_id = dogs.dog_id group by dogs.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1 )

SQL:
SELECT owner_id ,  last_name FROM owners WHERE owner_id  =  (SELECT owner_id FROM dogs JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owner_id ORDER BY sum(cost_of_treatment) DESC LIMIT 1)
self correction:
SELECT Owners.owner_id, Owners.last_name FROM Owners WHERE owner_id = (   SELECT owner_id   FROM Dogs   JOIN Treatments ON Treatments.dog_id = Dogs.dog_id   GROUP BY Dogs.owner_id   ORDER BY SUM(Treatments.cost_of_treatment) DESC   LIMIT 1 )

index is 938
SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1
What is the description of the treatment type that costs the least money in total?
schema_links:
What is the description of the treatment type that costs the least money in total? | treatments : treatments.cost_of_treatment , treatments.treatment_type_code , treatments.date_of_treatment , treatments.treatment_id , treatments.dog_id , treatments.* | treatment_types : treatment_types.treatment_type_description , treatment_types.treatment_type_code , treatment_types.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*
natsql and SQL generation:
select _ from _ order by _ limit _ | select treatment_types.treatment_type_description from treatment_types order by treatments.cost_of_treatment asc limit 1
SQL = SELECT treatment_type_description FROM treatment_types ORDER BY (SELECT SUM(cost_of_treatment) FROM treatments WHERE treatment_types.treatment_type_code = treatments.treatment_type_code) ASC LIMIT 1
natsql:
select _ from _ order by _ limit _ | select treatment_types.treatment_type_description from treatment_types order by treatments.cost_of_treatment asc limit 1

SQL:
SELECT treatment_type_description FROM treatment_types ORDER BY (SELECT SUM(cost_of_treatment) FROM treatments WHERE treatment_types.treatment_type_code = treatments.treatment_type_code) ASC LIMIT 1
self correction:
SELECT Treatment_Types.treatment_type_description FROM Treatment_Types JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code GROUP BY Treatment_Types.treatment_type_description ORDER BY SUM(Treatments.cost_of_treatment) ASC LIMIT 1

index is 939
SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1
Give me the description of the treatment type whose total cost is the lowest.
schema_links:
Give me the description of the treatment type whose total cost is the lowest. | treatments : treatments.cost_of_treatment , treatments.treatment_type_code , treatments.treatment_id , treatments.date_of_treatment , treatments.dog_id , treatments.* | treatment_types : treatment_types.treatment_type_description , treatment_types.treatment_type_code , treatment_types.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*
natsql and SQL generation:
select _ from _ order by sum ( _ ) asc limit _ | select treatment_types.treatment_type_description from treatments join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code group by treatments.treatment_type_code order by sum ( treatments.cost_of_treatment ) asc limit 1
SQL = SELECT treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code  =  treatment_types.treatment_type_code GROUP BY treatments.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1
natsql:
select _ from _ order by sum ( _ ) asc limit _ | select treatment_types.treatment_type_description from treatments join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code group by treatments.treatment_type_code order by sum ( treatments.cost_of_treatment ) asc limit 1

SQL:
SELECT treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code  =  treatment_types.treatment_type_code GROUP BY treatments.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1
self correction:
SELECT treatment_type_description  FROM Treatment_Types  JOIN Treatments ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code  GROUP BY Treatments.treatment_type_code  ORDER BY SUM(cost_of_treatment) ASC  LIMIT 1

index is 940
SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1
Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.
schema_links:
Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code. | dogs : dogs.owner_id , dogs.date_adopted , dogs.name , dogs.dog_id , dogs.weight , dogs.* | charges : charges.charge_amount , charges.charge_type , charges.charge_id , charges.* | owners : owners.zip_code , owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*
natsql and SQL generation:
select _ , _ from _ group by _ order by sum ( _ ) desc limit _ | select owners.owner_id , owners.zip_code from owners join dogs on owners.owner_id = dogs.owner_id join treatments on dogs.dog_id = treatments.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1
SQL = SELECT owners.owner_id , owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id ORDER BY sum(treatments.cost_of_treatment) DESC LIMIT 1
natsql:
select _ , _ from _ group by _ order by sum ( _ ) desc limit _ | select owners.owner_id , owners.zip_code from owners join dogs on owners.owner_id = dogs.owner_id join treatments on dogs.dog_id = treatments.dog_id group by owners.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1

SQL:
SELECT owners.owner_id , owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id ORDER BY sum(treatments.cost_of_treatment) DESC LIMIT 1
self correction:
SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1

index is 941
SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1
Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.
schema_links:
Find the owner id and zip code of the owner who spent the most money in total for his or her dogs. | dogs : dogs.owner_id , dogs.date_adopted , dogs.name , dogs.dog_id , dogs.breed_code , dogs.* | owners : owners.zip_code , owners.owner_id , owners.first_name , owners.last_name , owners.street , owners.* | treatments : treatments.cost_of_treatment , treatments.dog_id , treatments.treatment_id , treatments.professional_id , treatments.treatment_type_code , treatments.* | charges : charges.charge_amount , charges.charge_type , charges.charge_id , charges.*
natsql and SQL generation:
select _ , _ from _ where _ = ( select _ from _ group by _ order by sum ( _ ) desc limit _ ) | select owners.owner_id , owners.zip_code from owners where owners.owner_id = ( select dogs.owner_id from treatments join dogs on treatments.dog_id = dogs.dog_id group by dogs.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1 )
SQL = SELECT owners.owner_id ,  owners.zip_code FROM owners WHERE owners.owner_id  =  (SELECT dogs.owner_id FROM treatments JOIN dogs ON treatments.dog_id  =  dogs.dog_id GROUP BY dogs.owner_id ORDER BY sum(cost_of_treatment) DESC LIMIT 1)
natsql:
select _ , _ from _ where _ = ( select _ from _ group by _ order by sum ( _ ) desc limit _ ) | select owners.owner_id , owners.zip_code from owners where owners.owner_id = ( select dogs.owner_id from treatments join dogs on treatments.dog_id = dogs.dog_id group by dogs.owner_id order by sum ( treatments.cost_of_treatment ) desc limit 1 )

SQL:
SELECT owners.owner_id ,  owners.zip_code FROM owners WHERE owners.owner_id  =  (SELECT dogs.owner_id FROM treatments JOIN dogs ON treatments.dog_id  =  dogs.dog_id GROUP BY dogs.owner_id ORDER BY sum(cost_of_treatment) DESC LIMIT 1)
self correction:
SELECT owners.owner_id, owners.zip_code  FROM owners  WHERE owners.owner_id = (     SELECT dogs.owner_id      FROM treatments      JOIN dogs ON treatments.dog_id = dogs.dog_id      GROUP BY dogs.owner_id      ORDER BY SUM(cost_of_treatment) DESC      LIMIT 1 )

index is 942
SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
Which professionals have done at least two types of treatments? List the professional id and cell phone.
schema_links:
Which professionals have done at least two types of treatments? List the professional id and cell phone. | professionals : professionals.professional_id , professionals.cell_number , professionals.home_phone , professionals.role_code , professionals.first_name , professionals.* | treatments : treatments.professional_id , treatments.treatment_type_code , treatments.treatment_id , treatments.dog_id , treatments.date_of_treatment , treatments.* | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description , treatment_types.* | owners : owners.street , owners.city , owners.state , owners.cell_number , owners.owner_id , owners.*
natsql and SQL generation:
select _ , _ from _ where count ( distinct _ ) >= _ group by _ | select professionals.professional_id , professionals.cell_number from professionals where count ( distinct treatments.treatment_type_code ) >= 2 group by professionals.professional_id , professionals.cell_number
SQL = SELECT professional_id , cell_number FROM professionals GROUP BY professional_id , cell_number HAVING count(DISTINCT treatment_type_code)  >=  2
natsql:
select _ , _ from _ where count ( distinct _ ) >= _ group by _ | select professionals.professional_id , professionals.cell_number from professionals where count ( distinct treatments.treatment_type_code ) >= 2 group by professionals.professional_id , professionals.cell_number

SQL:
SELECT professional_id , cell_number FROM professionals GROUP BY professional_id , cell_number HAVING count(DISTINCT treatment_type_code)  >=  2
self correction:
SELECT professional_id, cell_number  FROM Professionals  JOIN Treatments ON Professionals.professional_id = Treatments.professional_id  GROUP BY Professionals.professional_id, Professionals.cell_number  HAVING COUNT(DISTINCT Treatments.treatment_type_code) >= 2

index is 943
SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
Find the id and cell phone of the professionals who operate two or more types of treatments.
schema_links:
Find the id and cell phone of the professionals who operate two or more types of treatments. | professionals : professionals.professional_id , professionals.cell_number , professionals.home_phone , professionals.role_code , professionals.first_name , professionals.* | treatments : treatments.professional_id , treatments.treatment_type_code , treatments.treatment_id , treatments.dog_id , treatments.date_of_treatment , treatments.* | treatment_types : treatment_types.treatment_type_description , treatment_types.treatment_type_code , treatment_types.* | owners : owners.street , owners.city , owners.state , owners.home_phone , owners.cell_number , owners.*
natsql and SQL generation:
select _ , _ from _ where count ( distinct _ ) > _ group by _ | select professionals.professional_id , professionals.cell_number from professionals where count ( distinct treatments.treatment_type_code ) > 1 group by professionals.professional_id
SQL = SELECT professional_id ,  cell_number FROM professionals GROUP BY professional_id HAVING count(DISTINCT treatment_type_code)  >  1
natsql:
select _ , _ from _ where count ( distinct _ ) > _ group by _ | select professionals.professional_id , professionals.cell_number from professionals where count ( distinct treatments.treatment_type_code ) > 1 group by professionals.professional_id

SQL:
SELECT professional_id ,  cell_number FROM professionals GROUP BY professional_id HAVING count(DISTINCT treatment_type_code)  >  1
self correction:
SELECT professional_id, cell_number  FROM Professionals  GROUP BY professional_id  HAVING COUNT(DISTINCT treatment_type_code) > 1

index is 944
SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )
What are the first name and last name of the professionals who have done treatment with cost below average?
schema_links:
What are the first name and last name of the professionals who have done treatment with cost below average? | professionals : professionals.last_name , professionals.first_name , professionals.role_code , professionals.professional_id , professionals.street , professionals.* | treatments : treatments.cost_of_treatment , treatments.professional_id , treatments.treatment_type_code , treatments.treatment_id , treatments.dog_id , treatments.* | owners : owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.*
natsql and SQL generation:
select _ , _ from _ where _ < avg ( _ ) | select professionals.first_name , professionals.last_name from professionals where treatments.cost_of_treatment < avg ( treatments.cost_of_treatment )
SQL = SELECT first_name ,  last_name FROM professionals WHERE cost_of_treatment  <  (SELECT avg(cost_of_treatment) FROM treatments)
natsql:
select _ , _ from _ where _ < avg ( _ ) | select professionals.first_name , professionals.last_name from professionals where treatments.cost_of_treatment < avg ( treatments.cost_of_treatment )

SQL:
SELECT first_name ,  last_name FROM professionals WHERE cost_of_treatment  <  (SELECT avg(cost_of_treatment) FROM treatments)
self correction:
SELECT Professionals.first_name, Professionals.last_name  FROM Professionals  WHERE Professionals.professional_id IN (   SELECT Treatments.professional_id   FROM Treatments   WHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments) )

index is 945
SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )
Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.
schema_links:
Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names. | professionals : professionals.first_name , professionals.last_name , professionals.professional_id , professionals.role_code , professionals.street , professionals.* | treatments : treatments.cost_of_treatment , treatments.professional_id , treatments.treatment_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.* | owners : owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.* | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description , treatment_types.*
natsql and SQL generation:
select _ , _ from _ where @.@ < avg ( _ ) | select professionals.first_name , professionals.last_name from professionals where treatments.cost_of_treatment < (select avg(treatments.cost_of_treatment) from treatments) group by professionals.first_name, professionals.last_name
SQL = SELECT first_name ,  last_name FROM professionals WHERE cost_of_treatment  <  (SELECT avg(cost_of_treatment) FROM treatments)
natsql:
select _ , _ from _ where @.@ < avg ( _ ) | select professionals.first_name , professionals.last_name from professionals where treatments.cost_of_treatment < (select avg(treatments.cost_of_treatment) from treatments) group by professionals.first_name, professionals.last_name

SQL:
SELECT first_name ,  last_name FROM professionals WHERE cost_of_treatment  <  (SELECT avg(cost_of_treatment) FROM treatments)
self correction:
SELECT professionals.first_name, professionals.last_name FROM professionals INNER JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)

index is 946
SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id
List the date of each treatment, together with the first name of the professional who operated it.
schema_links:
List the date of each treatment, together with the first name of the professional who operated it. | treatments : treatments.date_of_treatment , treatments.professional_id , treatments.treatment_id , treatments.treatment_type_code , treatments.dog_id , treatments.* | professionals : professionals.first_name , professionals.professional_id , professionals.role_code , professionals.street , professionals.city , professionals.* | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description , treatment_types.* | owners : owners.first_name , owners.street , owners.city , owners.state , owners.owner_id , owners.*
natsql and SQL generation:
select _ , _ from _ | select treatments.date_of_treatment , professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id
SQL = SELECT date_of_treatment , first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id
natsql:
select _ , _ from _ | select treatments.date_of_treatment , professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id

SQL:
SELECT date_of_treatment , first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id
self correction:
SELECT treatments.date_of_treatment, professionals.first_name  FROM treatments  JOIN professionals ON treatments.professional_id = professionals.professional_id;

index is 947
SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id
What are the date and the operating professional's first name of each treatment?
schema_links:
What are the date and the operating professional's first name of each treatment? | treatments : treatments.date_of_treatment , treatments.professional_id , treatments.treatment_id , treatments.treatment_type_code , treatments.dog_id , treatments.* | professionals : professionals.first_name , professionals.role_code , professionals.professional_id , professionals.street , professionals.city , professionals.* | treatment_types : treatment_types.treatment_type_description , treatment_types.treatment_type_code , treatment_types.* | owners : owners.first_name , owners.street , owners.city , owners.state , owners.cell_number , owners.*
natsql and SQL generation:
select _ , _ from _ | select treatments.date_of_treatment , professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id
natsql:
select _ , _ from _ | select treatments.date_of_treatment , professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id
SQL:
SELECT date_of_treatment, first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id
self correction:
SELECT treatments.date_of_treatment, professionals.first_name  FROM treatments  JOIN professionals ON treatments.professional_id = professionals.professional_id

index is 948
SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code
List the cost of each treatment and the corresponding treatment type description.
schema_links:
List the cost of each treatment and the corresponding treatment type description. | treatments : treatments.cost_of_treatment , treatments.treatment_type_code , treatments.treatment_id , treatments.dog_id , treatments.date_of_treatment , treatments.* | treatment_types : treatment_types.treatment_type_description , treatment_types.treatment_type_code , treatment_types.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*
natsql and SQL generation:
select _ , _ from _ | select treatments.cost_of_treatment , treatment_types.treatment_type_description from treatments join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code
SQL = SELECT cost_of_treatment ,  treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code  =  treatment_types.treatment_type_code
natsql:
select _ , _ from _ | select treatments.cost_of_treatment , treatment_types.treatment_type_description from treatments join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code

SQL:
SELECT cost_of_treatment ,  treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code  =  treatment_types.treatment_type_code
self correction:
SELECT cost_of_treatment, treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code

index is 949
SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code
What are the cost and treatment type description of each treatment?
schema_links:
What are the cost and treatment type description of each treatment? | treatments : treatments.cost_of_treatment , treatments.treatment_type_code , treatments.treatment_id , treatments.dog_id , treatments.date_of_treatment , treatments.* | treatment_types : treatment_types.treatment_type_description , treatment_types.treatment_type_code , treatment_types.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*
natsql and SQL generation:
select _ , _ from _ , _ where _ | select treatments.cost_of_treatment , treatment_types.treatment_type_description from treatments , treatment_types where treatments.treatment_type_code = treatment_types.treatment_type_code
SQL = SELECT cost_of_treatment ,  treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code  =  treatment_types.treatment_type_code
natsql:
select _ , _ from _ , _ where _ | select treatments.cost_of_treatment , treatment_types.treatment_type_description from treatments , treatment_types where treatments.treatment_type_code = treatment_types.treatment_type_code

SQL:
SELECT cost_of_treatment ,  treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code  =  treatment_types.treatment_type_code
self correction:
SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code

index is 950
SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
List each owner's first name, last name, and the size of his for her dog.
schema_links:
List each owner's first name, last name, and the size of his for her dog. | owners : owners.first_name , owners.last_name , owners.owner_id , owners.email_address , owners.state , owners.* | dogs : dogs.size_code , dogs.owner_id , dogs.name , dogs.breed_code , dogs.dog_id , dogs.* | sizes : sizes.size_description , sizes.size_code , sizes.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*
natsql and SQL generation:
select _ , _ , _ from _ , _ where _ = _ and _ = _ | select owners.first_name , owners.last_name , sizes.size_description from owners , dogs where owners.owner_id = dogs.owner_id and dogs.size_code = sizes.size_code
SQL = SELECT owners.first_name , owners.last_name , sizes.size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code
natsql:
select _ , _ , _ from _ , _ where _ = _ and _ = _ | select owners.first_name , owners.last_name , sizes.size_description from owners , dogs where owners.owner_id = dogs.owner_id and dogs.size_code = sizes.size_code

SQL:
SELECT owners.first_name , owners.last_name , sizes.size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code
self correction:
SELECT owners.first_name, owners.last_name, sizes.size_description  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  JOIN sizes ON dogs.size_code = sizes.size_code

index is 951
SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
What are each owner's first name, last name, and the size of their dog?
schema_links:
What are each owner's first name, last name, and the size of their dog? | owners : owners.last_name , owners.first_name , owners.email_address , owners.owner_id , owners.home_phone , owners.* | dogs : dogs.size_code , dogs.name , dogs.owner_id , dogs.breed_code , dogs.gender , dogs.* | sizes : sizes.size_description , sizes.size_code , sizes.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*
natsql and SQL generation:
select _ , _ , _ from _ join _ on _ where _ | select owners.first_name , owners.last_name , sizes.size_description from owners join dogs on owners.owner_id = dogs.owner_id join sizes on dogs.size_code = sizes.size_code
SQL = SELECT owners.first_name ,  owners.last_name ,  sizes.size_description FROM owners JOIN dogs ON owners.owner_id  =  dogs.owner_id JOIN sizes ON dogs.size_code  =  sizes.size_code
natsql:
select _ , _ , _ from _ join _ on _ where _ | select owners.first_name , owners.last_name , sizes.size_description from owners join dogs on owners.owner_id = dogs.owner_id join sizes on dogs.size_code = sizes.size_code

SQL:
SELECT owners.first_name ,  owners.last_name ,  sizes.size_description FROM owners JOIN dogs ON owners.owner_id  =  dogs.owner_id JOIN sizes ON dogs.size_code  =  sizes.size_code
self correction:
SELECT owners.first_name, owners.last_name, sizes.size_description  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  JOIN sizes ON

index is 952
SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
List pairs of the owner's first name and the dogs's name.
schema_links:
List pairs of the owner's first name and the dogs's name. | dogs : dogs.name , dogs.owner_id , dogs.dog_id , dogs.age , dogs.gender , dogs.* | owners : owners.first_name , owners.owner_id , owners.last_name , owners.email_address , owners.home_phone , owners.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql and SQL generation:
select _ , _ from _ , _ where _ | select owners.first_name , dogs.name from owners , dogs where owners.owner_id = dogs.owner_id
SQL = SELECT owners.first_name , dogs.name FROM owners , dogs WHERE owners.owner_id  =  dogs.owner_id
natsql:
select _ , _ from _ , _ where _ | select owners.first_name , dogs.name from owners , dogs where owners.owner_id = dogs.owner_id

SQL:
SELECT owners.first_name , dogs.name FROM owners , dogs WHERE owners.owner_id  =  dogs.owner_id
self correction:
SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id

index is 953
SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
What are each owner's first name and their dogs's name?
schema_links:
What are each owner's first name and their dogs's name? | dogs : dogs.name , dogs.owner_id , dogs.dog_id , dogs.age , dogs.gender , dogs.* | owners : owners.first_name , owners.owner_id , owners.last_name , owners.email_address , owners.state , owners.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql and SQL generation:
select _ , _ from _ join _ on @.@ = @.@ | select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id
SQL = SELECT owners.first_name , dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id
natsql:
select _ , _ from _ join _ on @.@ = @.@ | select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id

SQL:
SELECT owners.first_name , dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id
self correction:
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id

index is 954
SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )
List the names of the dogs of the rarest breed and the treatment dates of them.
schema_links:
List the names of the dogs of the rarest breed and the treatment dates of them. | treatments : treatments.date_of_treatment , treatments.dog_id , treatments.treatment_id , treatments.treatment_type_code , treatments.cost_of_treatment , treatments.* | dogs : dogs.name , dogs.breed_code , dogs.dog_id , dogs.owner_id , dogs.date_arrived , dogs.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*
natsql and SQL generation:
select _ , _ from _ where _ = ( select _ from _ order by count ( _ ) asc limit _ ) | select dogs.name , treatments.date_of_treatment from dogs join breeds on dogs.breed_code = breeds.breed_code join treatments on dogs.dog_id = treatments.dog_id where breeds.breed_code = ( select breeds.breed_code from breeds order by count(dogs.breed_code) asc limit 1 )
SQL = SELECT T1.name ,  T2.date_of_treatment FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  (SELECT T3.breed_code FROM breeds AS T3 ORDER BY count(T1.breed_code) ASC LIMIT 1)
natsql:
select _ , _ from _ where _ = ( select _ from _ order by count ( _ ) asc limit _ ) | select dogs.name , treatments.date_of_treatment from dogs join breeds on dogs.breed_code = breeds.breed_code join treatments on dogs.dog_id = treatments.dog_id where breeds.breed_code = ( select breeds.breed_code from breeds order by count(dogs.breed_code) asc limit 1 )

SQL:
SELECT T1.name ,  T2.date_of_treatment FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  (SELECT T3.breed_code FROM breeds AS T3 ORDER BY count(T1.breed_code) ASC LIMIT 1)
self correction:
SELECT T1.name, T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = (     SELECT T3.breed_code     FROM Breeds AS T3     GROUP BY T3.breed_code     ORDER BY COUNT(T1.breed_code) ASC     LIMIT 1 )

index is 955
SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )
Which dogs are of the rarest breed? Show their names and treatment dates.
schema_links:
Which dogs are of the rarest breed? Show their names and treatment dates. | dogs : dogs.name , dogs.breed_code , dogs.date_adopted , dogs.date_arrived , dogs.date_departed , dogs.* | treatments : treatments.date_of_treatment , treatments.treatment_id , treatments.cost_of_treatment , treatments.treatment_type_code , treatments.dog_id , treatments.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | owners : owners.street , owners.city , owners.state , owners.cell_number , owners.owner_id , owners.*
natsql and SQL generation:
select _ , _ from _ where @.@ = ( select min ( _ ) from _ ) | select dogs.name , treatments.date_of_treatment from dogs join breeds on dogs.breed_code = breeds.breed_code join treatments on dogs.dog_id = treatments.dog_id where breeds.breed_code = ( select breed_code from breeds where count ( breeds.* ) = ( select min ( count ( breeds.* ) ) from breeds ) ) group by dogs.name , treatments.date_of_treatment
SQL = SELECT dogs.name , treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE breeds.breed_code IN (SELECT breed_code FROM breeds GROUP BY breed_code HAVING COUNT(*) = (SELECT MIN(count(*)) FROM breeds)) GROUP BY dogs.name , treatments.date_of_treatment
natsql:
select _ , _ from _ where @.@ = ( select min ( _ ) from _ ) | select dogs.name , treatments.date_of_treatment from dogs join breeds on dogs.breed_code = breeds.breed_code join treatments on dogs.dog_id = treatments.dog_id where breeds.breed_code = ( select breed_code from breeds where count ( breeds.* ) = ( select min ( count ( breeds.* ) ) from breeds ) ) group by dogs.name , treatments.date_of_treatment

SQL:
SELECT dogs.name , treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE breeds.breed_code IN (SELECT breed_code FROM breeds GROUP BY breed_code HAVING COUNT(*) = (SELECT MIN(count(*)) FROM breeds)) GROUP BY dogs.name , treatments.date_of_treatment
self correction:
SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE breeds.breed_code IN (     SELECT breed_code     FROM breeds     GROUP BY breed_code     HAVING COUNT(*) = (         SELECT MIN(count(*))         FROM breeds     ) ) GROUP BY dogs.name, treatments.date_of_treatment

index is 956
SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'
Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.
schema_links:
Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name. | dogs : dogs.name , dogs.owner_id , dogs.dog_id , dogs.breed_code , dogs.age , dogs.* | owners : owners.state ( Virginia ) , owners.first_name , owners.owner_id , owners.last_name , owners.email_address , owners.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql and SQL generation:
select _ , _ from _ where @.@ = _ and @.@ = _ | select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id where owners.state = 'Virginia'
SQL = SELECT owners.first_name ,  dogs.name FROM owners JOIN dogs ON owners.owner_id  =  dogs.owner_id WHERE owners.state = 'Virginia'
natsql:
select _ , _ from _ where @.@ = _ and @.@ = _ | select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id where owners.state = 'Virginia'

SQL:
SELECT owners.first_name ,  dogs.name FROM owners JOIN dogs ON owners.owner_id  =  dogs.owner_id WHERE owners.state = 'Virginia'
self correction:
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.state = 'Virginia'

index is 957
SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'
Find the first names of owners living in Virginia and the names of dogs they own.
schema_links:
Find the first names of owners living in Virginia and the names of dogs they own. | dogs : dogs.name , dogs.owner_id , dogs.dog_id , dogs.age , dogs.gender , dogs.* | owners : owners.state ( Virginia ) , owners.first_name , owners.owner_id , owners.last_name , owners.email_address , owners.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql and SQL generation:
select _ , _ from _ where @.@ = _ and @.@ = _ | select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id where owners.state = 'Virginia'
natsql:
select _ , _ from _ where @.@ = _ and @.@ = _ | select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id where owners.state = 'Virginia'
SQL:
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.state = 'Virginia'
self correction:
SELECT owners.first_name, dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia'

index is 958
SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id
What are the arriving date and the departing date of the dogs who have gone through a treatment?
schema_links:
What are the arriving date and the departing date of the dogs who have gone through a treatment? | dogs : dogs.date_arrived , dogs.date_departed , dogs.date_adopted , dogs.dog_id , dogs.name , dogs.* | treatments : treatments.dog_id , treatments.date_of_treatment , treatments.treatment_id , treatments.treatment_type_code , treatments.cost_of_treatment , treatments.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*
natsql and SQL generation:
select _ , _ from _ | select dogs.date_arrived , dogs.date_departed from dogs where treatments.dog_id = dogs.dog_id
SQL = SELECT date_arrived ,  date_departed FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)
natsql:
select _ , _ from _ | select dogs.date_arrived , dogs.date_departed from dogs where treatments.dog_id = dogs.dog_id

SQL:
SELECT date_arrived ,  date_departed FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)
self correction:
SELECT date_arrived, date_departed FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)

index is 959
SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id
Find the arriving date and the departing date of the dogs that received a treatment.
schema_links:
Find the arriving date and the departing date of the dogs that received a treatment. | dogs : dogs.date_arrived , dogs.date_departed , dogs.date_adopted , dogs.dog_id , dogs.name , dogs.* | treatments : treatments.dog_id , treatments.date_of_treatment , treatments.treatment_id , treatments.treatment_type_code , treatments.professional_id , treatments.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | breeds : breeds.breed_code , breeds.breed_name , breeds.*
natsql and SQL generation:
select _ , _ from _ where _ | select dogs.date_arrived , dogs.date_departed from dogs where dogs.dog_id in (select treatments.dog_id from treatments)
SQL = SELECT date_arrived , date_departed FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)
natsql:
select _ , _ from _ where _ | select dogs.date_arrived , dogs.date_departed from dogs where dogs.dog_id in (select treatments.dog_id from treatments)

SQL:
SELECT date_arrived , date_departed FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)
self correction:
SELECT dogs.date_arrived, dogs.date_departed  FROM dogs  INNER JOIN treatments ON dogs.dog_id = treatments.dog_id

index is 960
SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )
List the last name of the owner owning the youngest dog.
schema_links:
List the last name of the owner owning the youngest dog. | dogs : dogs.age , dogs.date_of_birth , dogs.owner_id , dogs.name , dogs.dog_id , dogs.* | owners : owners.last_name , owners.first_name , owners.owner_id , owners.email_address , owners.cell_number , owners.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql and SQL generation:
select _ from _ order by _ limit _ | select owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id order by dogs.age asc limit 1
SQL = SELECT last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id ORDER BY dogs.age ASC LIMIT 1
natsql:
select _ from _ order by _ limit _ | select owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id order by dogs.age asc limit 1

SQL:
SELECT last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id ORDER BY dogs.age ASC LIMIT 1
self correction:
SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id ORDER BY dogs.age DESC LIMIT 1

index is 961
SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )
Who owns the youngest dog? Give me his or her last name.
schema_links:
Who owns the youngest dog? Give me his or her last name. | dogs : dogs.age , dogs.name , dogs.date_of_birth , dogs.owner_id , dogs.dog_id , dogs.* | owners : owners.last_name , owners.first_name , owners.email_address , owners.owner_id , owners.cell_number , owners.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql and SQL generation:
select @.@ from _ order by _ limit _ | select owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id order by dogs.date_of_birth limit 1
SQL = SELECT last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id ORDER BY dogs.date_of_birth LIMIT 1
natsql:
select @.@ from _ order by _ limit _ | select owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id order by dogs.date_of_birth limit 1

SQL:
SELECT last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id ORDER BY dogs.date_of_birth LIMIT 1
self correction:
SELECT owners.last_name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  ORDER BY dogs.date_of_birth  LIMIT 1

index is 962
SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'
List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.
schema_links:
List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin. | professionals : professionals.state ( Hawaii , Wisconsin ) , professionals.email_address , professionals.professional_id , professionals.role_code , professionals.first_name , professionals.* | owners : owners.state ( Wisconsin ) , owners.email_address , owners.street , owners.city , owners.owner_id , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | breeds : breeds.breed_code , breeds.breed_name , breeds.*
natsql and SQL generation:
select _ from _ where _ = _ or _ = _ | select professionals.email_address from professionals where professionals.state = 'Hawaii' or professionals.state = 'Wisconsin'
SQL = SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'
natsql:
select _ from _ where _ = _ or _ = _ | select professionals.email_address from professionals where professionals.state = 'Hawaii' or professionals.state = 'Wisconsin'

SQL:
SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'
self correction:
SELECT email_address  FROM Professionals  WHERE state IN ('Hawaii', 'Wisconsin')

index is 963
SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'
What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?
schema_links:
What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin? | professionals : professionals.state ( Hawaii , Wisconsin ) , professionals.email_address , professionals.role_code , professionals.professional_id , professionals.first_name , professionals.* | owners : owners.state ( Wisconsin ) , owners.email_address , owners.first_name , owners.street , owners.city , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | breeds : breeds.breed_code , breeds.breed_name , breeds.*
natsql and SQL generation:
select _ from _ where @.@ in ( _ , _ ) | select professionals.email_address from professionals where professionals.state in ( 'Hawaii' , 'Wisconsin' )
SQL = SELECT email_address FROM professionals WHERE state  IN  ('Hawaii', 'Wisconsin')
natsql:
select _ from _ where @.@ in ( _ , _ ) | select professionals.email_address from professionals where professionals.state in ( 'Hawaii' , 'Wisconsin' )

SQL:
SELECT email_address FROM professionals WHERE state  IN  ('Hawaii', 'Wisconsin')
self correction:
SELECT email_address  FROM Professionals  WHERE state IN ('Hawaii', 'Wisconsin')

index is 964
SELECT date_arrived ,  date_departed FROM Dogs
What are the arriving date and the departing date of all the dogs?
schema_links:
What are the arriving date and the departing date of all the dogs? | dogs : dogs.date_arrived , dogs.date_departed , dogs.name , dogs.date_adopted , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.cell_number , owners.owner_id , owners.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql and SQL generation:
select _ , _ from _ | select dogs.date_arrived , dogs.date_departed from dogs
SQL = SELECT date_arrived ,  date_departed FROM dogs
natsql:
select _ , _ from _ | select dogs.date_arrived , dogs.date_departed from dogs

SQL:
SELECT date_arrived ,  date_departed FROM dogs
self correction:
SELECT date_arrived, date_departed FROM Dogs

index is 965
SELECT date_arrived ,  date_departed FROM Dogs
List the arrival date and the departure date for all the dogs.
schema_links:
List the arrival date and the departure date for all the dogs. | dogs : dogs.date_arrived , dogs.date_departed , dogs.name , dogs.date_adopted , dogs.dog_id , dogs.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql and SQL generation:
select _ , _ from _ | select dogs.date_arrived , dogs.date_departed from dogs
SQL = SELECT date_arrived ,  date_departed FROM dogs
natsql:
select _ , _ from _ | select dogs.date_arrived , dogs.date_departed from dogs

SQL:
SELECT date_arrived ,  date_departed FROM dogs
self correction:
SELECT date_arrived, date_departed FROM Dogs

index is 966
SELECT count(DISTINCT dog_id) FROM Treatments
How many dogs went through any treatments?
schema_links:
How many dogs went through any treatments? | treatments : treatments.dog_id , treatments.treatment_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.professional_id , treatments.* | dogs : dogs.owner_id , dogs.breed_code , dogs.dog_id , dogs.size_code , dogs.name , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | breeds : breeds.breed_code , breeds.breed_name , breeds.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct treatments.dog_id ) from treatments
SQL = SELECT count(DISTINCT dog_id) FROM treatments
natsql:
select count ( distinct _ ) from _ | select count ( distinct treatments.dog_id ) from treatments

SQL:
SELECT count(DISTINCT dog_id) FROM treatments
self correction:
SELECT COUNT(DISTINCT dog_id) FROM Treatments

index is 967
SELECT count(DISTINCT dog_id) FROM Treatments
Count the number of dogs that went through a treatment.
schema_links:
Count the number of dogs that went through a treatment. | treatments : treatments.dog_id , treatments.treatment_id , treatments.treatment_type_code , treatments.professional_id , treatments.date_of_treatment , treatments.* | dogs : dogs.owner_id , dogs.dog_id , dogs.breed_code , dogs.name , dogs.age , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description , treatment_types.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct treatments.dog_id ) from treatments
SQL = SELECT count(DISTINCT dog_id) FROM treatments
natsql:
select count ( distinct _ ) from _ | select count ( distinct treatments.dog_id ) from treatments

SQL:
SELECT count(DISTINCT dog_id) FROM treatments
self correction:
SELECT COUNT(DISTINCT dog_id) FROM Treatments

index is 968
SELECT count(DISTINCT professional_id) FROM Treatments
How many professionals have performed any treatment to dogs?
schema_links:
How many professionals have performed any treatment to dogs? | treatments : treatments.professional_id , treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.* | professionals : professionals.role_code , professionals.professional_id , professionals.street , professionals.city , professionals.state , professionals.* | dogs : dogs.owner_id , dogs.name , dogs.dog_id , dogs.breed_code , dogs.age , dogs.* | owners : owners.street , owners.city , owners.state , owners.cell_number , owners.owner_id , owners.*
natsql and SQL generation:
select count ( distinct _ ) from _ where _ is not null | select count ( distinct professionals.professional_id ) from professionals join treatments on professionals.professional_id = treatments.professional_id
SQL = SELECT count(DISTINCT professional_id) FROM treatments WHERE professional_id IS NOT NULL
natsql:
select count ( distinct _ ) from _ where _ is not null | select count ( distinct professionals.professional_id ) from professionals join treatments on professionals.professional_id = treatments.professional_id

SQL:
SELECT count(DISTINCT professional_id) FROM treatments WHERE professional_id IS NOT NULL
self correction:
SELECT COUNT(DISTINCT professional_id) FROM Treatments WHERE professional_id IS NOT NULL

index is 969
SELECT count(DISTINCT professional_id) FROM Treatments
Find the number of professionals who have ever treated dogs.
schema_links:
Find the number of professionals who have ever treated dogs. | treatments : treatments.professional_id , treatments.dog_id , treatments.treatment_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.* | professionals : professionals.professional_id , professionals.role_code , professionals.street , professionals.city , professionals.state , professionals.* | dogs : dogs.name , dogs.dog_id , dogs.owner_id , dogs.breed_code , dogs.age , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*
natsql and SQL generation:
select count ( distinct _ ) from _ where _ | select count ( distinct professionals.professional_id ) from professionals where professionals.professional_id in ( select treatments.professional_id from treatments )
SQL = SELECT count(DISTINCT professional_id) FROM treatments

input = Find the average age of dogs treated by each professional. | treatments : treatments.professional_id , treatments.dog_id , treatments.treatment_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.* | professionals : professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.* | dogs : dogs.owner_id , dogs.breed_code , dogs.abandoned_yn , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.* | owners : owners.last_name , owners.email_address , owners.home_phone , owners.owner_id , owners.street , owners.city , owners.*
natsql = select _ , avg ( _ ) from _ group by _ | select professionals.professional_id , avg ( dogs.age ) from professionals join treatments on professionals.professional_id = treatments.professional_id join dogs on treatments.dog_id = dogs.dog_id group by professionals.professional_id
SQL = SELECT professional_id ,  AVG (age) FROM treatments AS T1 JOIN dogs AS T2 ON T1.dog_id  =  T2.dog_id GROUP BY professional_id
natsql:
select count ( distinct _ ) from _ where _ | select count ( distinct professionals.professional_id ) from professionals where professionals.professional_id in ( select treatments.professional_id from treatments )

SQL:
SELECT count(DISTINCT professional_id) FROM treatments

input = Find the average age of dogs treated by each professional. | treatments : treatments.professional_id , treatments.dog_id , treatments.treatment_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.* | professionals : professionals.role_code , professionals.first_name , professionals.street , professionals.city , professionals.state , professionals.last_name , professionals.email_address , professionals.home_phone , professionals.* | dogs : dogs.owner_id , dogs.breed_code , dogs.abandoned_yn , dogs.size_code , dogs.name , dogs.age , dogs.date_of_birth , dogs.gender , dogs.* | owners : owners.last_name , owners.email_address , owners.home_phone , owners.owner_id , owners.street , owners.city , owners.*
natsql = select _ , avg ( _ ) from _ group by _ | select professionals.professional_id , avg ( dogs.age ) from professionals join treatments on professionals.professional_id = treatments.professional_id join dogs on treatments.dog_id = dogs.dog_id group by professionals.professional_id

self correction:
SELECT professionals.professional_id, avg(dogs.age) FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN dogs ON treatments.dog_id = dogs.dog_id GROUP BY professionals.professional_id

index is 970
SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'
Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.
schema_links:
Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state. | professionals : professionals.city , professionals.state , professionals.street , professionals.role_code , professionals.first_name , professionals.* | owners : owners.state , owners.street , owners.city , owners.cell_number , owners.owner_id , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.*
natsql and SQL generation:
select _ , _ , _ , _ from _ where _ like '%West%' | select professionals.role_code , professionals.street , professionals.city , professionals.state from professionals where professionals.city like '%West%'
SQL = SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'
natsql:
select _ , _ , _ , _ from _ where _ like '%West%' | select professionals.role_code , professionals.street , professionals.city , professionals.state from professionals where professionals.city like '%West%'

SQL:
SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'
self correction:
SELECT role_code, street, city, state  FROM Professionals  WHERE city LIKE '%West%'

index is 971
SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'
Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.
schema_links:
Find the role, street, city and state of the professionals living in a city that contains the substring 'West'. | professionals : professionals.state , professionals.street , professionals.city , professionals.role_code , professionals.professional_id , professionals.* | owners : owners.street , owners.city , owners.state , owners.cell_number , owners.owner_id , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | breeds : breeds.breed_code , breeds.breed_name , breeds.*
natsql and SQL generation:
select _ , _ , _ , _ from _ where _ like '%West%' | select professionals.role_code , professionals.street , professionals.city , professionals.state from professionals where professionals.city like '%West%' 
SQL = SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'
natsql:
select _ , _ , _ , _ from _ where _ like '%West%' | select professionals.role_code , professionals.street , professionals.city , professionals.state from professionals where professionals.city like '%West%' 

SQL:
SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'
self correction:
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'

index is 972
SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'
Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.
schema_links:
Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email. | owners : owners.first_name , owners.last_name , owners.email_address , owners.state , owners.owner_id , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.* | breeds : breeds.breed_code , breeds.breed_name , breeds.*
natsql and SQL generation:
select _ , _ , _ from _ where @.@ like '%North%' | select owners.first_name , owners.last_name , owners.email_address from owners where owners.state like '%North%'
SQL = SELECT first_name ,  last_name ,  email_address FROM owners WHERE state LIKE '%North%'
natsql:
select _ , _ , _ from _ where @.@ like '%North%' | select owners.first_name , owners.last_name , owners.email_address from owners where owners.state like '%North%'

SQL:
SELECT first_name ,  last_name ,  email_address FROM owners WHERE state LIKE '%North%'
self correction:
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'

index is 973
SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'
Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.
schema_links:
Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'. | owners : owners.first_name , owners.last_name , owners.email_address , owners.state , owners.owner_id , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | professionals : professionals.street , professionals.city , professionals.state , professionals.email_address , professionals.professional_id , professionals.* | breeds : breeds.breed_code , breeds.breed_name , breeds.*
natsql and SQL generation:
select _ , _ , _ from _ where _ like '%%' | select owners.first_name , owners.last_name , owners.email_address from owners where owners.state like '%North%'
SQL = SELECT first_name ,  last_name ,  email_address FROM owners WHERE state LIKE '%North%'
natsql:
select _ , _ , _ from _ where _ like '%%' | select owners.first_name , owners.last_name , owners.email_address from owners where owners.state like '%North%'

SQL:
SELECT first_name ,  last_name ,  email_address FROM owners WHERE state LIKE '%North%'
self correction:
SELECT owners.first_name, owners.last_name, owners.email_address  FROM owners  WHERE owners.state LIKE '%North%'

index is 974
SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )
How many dogs have an age below the average?
schema_links:
How many dogs have an age below the average? | dogs : dogs.age , dogs.breed_code , dogs.dog_id , dogs.owner_id , dogs.name , dogs.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql and SQL generation:
select count ( _ ) from _ where @.@ < avg ( _ ) | select count ( dogs.* ) from dogs where dogs.age < (select avg ( age ) from dogs)
SQL = SELECT count(*) FROM dogs WHERE age  <  (SELECT avg(age) FROM dogs)
natsql:
select count ( _ ) from _ where @.@ < avg ( _ ) | select count ( dogs.* ) from dogs where dogs.age < (select avg ( age ) from dogs)

SQL:
SELECT count(*) FROM dogs WHERE age  <  (SELECT avg(age) FROM dogs)
self correction:
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)

index is 975
SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )
Count the number of dogs of an age below the average.
schema_links:
Count the number of dogs of an age below the average. | dogs : dogs.age , dogs.dog_id , dogs.owner_id , dogs.breed_code , dogs.name , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql and SQL generation:
select count ( _ ) from _ where _ < avg ( _ ) | select count ( dogs.* ) from dogs where age < (select avg ( age ) from dogs)
SQL = SELECT count(*) FROM dogs WHERE age  <  (SELECT avg(age) FROM dogs)
natsql:
select count ( _ ) from _ where _ < avg ( _ ) | select count ( dogs.* ) from dogs where age < (select avg ( age ) from dogs)

SQL:
SELECT count(*) FROM dogs WHERE age  <  (SELECT avg(age) FROM dogs)
self correction:
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)

index is 976
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
How much does the most recent treatment cost?
schema_links:
How much does the most recent treatment cost? | treatments : treatments.date_of_treatment , treatments.cost_of_treatment , treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.* | dogs : dogs.owner_id , dogs.breed_code , dogs.name , dogs.age , dogs.gender , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description , treatment_types.*
natsql and SQL generation:
select max ( _ ) from _ | select max ( treatments.cost_of_treatment ) from treatments
SQL = SELECT MAX(cost_of_treatment) FROM treatments
natsql:
select max ( _ ) from _ | select max ( treatments.cost_of_treatment ) from treatments

SQL:
SELECT MAX(cost_of_treatment) FROM treatments
self correction:
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1

index is 977
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
Show me the cost of the most recently performed treatment.
schema_links:
Show me the cost of the most recently performed treatment. | treatments : treatments.cost_of_treatment , treatments.date_of_treatment , treatments.treatment_id , treatments.treatment_type_code , treatments.dog_id , treatments.* | dogs : dogs.owner_id , dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description , treatment_types.*
natsql and SQL generation:
select _ from _ order by _ desc limit _ | select treatments.cost_of_treatment from treatments order by treatments.date_of_treatment desc limit 1
SQL = SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1
natsql:
select _ from _ order by _ desc limit _ | select treatments.cost_of_treatment from treatments order by treatments.date_of_treatment desc limit 1

SQL:
SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1
self correction:
SELECT Treatments.cost_of_treatment  FROM Treatments  ORDER BY Treatments.date_of_treatment DESC  LIMIT 1

index is 978
SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )
How many dogs have not gone through any treatment?
schema_links:
How many dogs have not gone through any treatment? | dogs : dogs.dog_id , dogs.owner_id , dogs.breed_code , dogs.name , dogs.date_adopted , dogs.* | treatments : treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.professional_id , treatments.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*
natsql and SQL generation:
select count ( * ) from _ where _ not in ( select _ from _ ) | select count ( * ) from dogs where dog_id not in ( select dog_id from treatments )
SQL = SELECT count(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)
natsql:
select count ( * ) from _ where _ not in ( select _ from _ ) | select count ( * ) from dogs where dog_id not in ( select dog_id from treatments )

SQL:
SELECT count(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)
self correction:
SELECT count(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)

index is 979
select count(*) from dogs where dog_id not in ( select dog_id from treatments )
Tell me the number of dogs that have not received any treatment .
schema_links:
Tell me the number of dogs that have not received any treatment . | dogs : dogs.dog_id , dogs.owner_id , dogs.breed_code , dogs.name , dogs.abandoned_yn , dogs.* | treatments : treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.cost_of_treatment , treatments.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*
natsql and SQL generation:
select count ( distinct _ ) from _ where not exists ( select _ from _ where _ = _ ) | select count ( distinct dogs.dog_id ) from dogs where not exists ( select * from treatments where dogs.dog_id = treatments.dog_id )
SQL = SELECT COUNT(DISTINCT dog_id) FROM dogs WHERE NOT EXISTS (SELECT * FROM treatments WHERE dogs.dog_id = treatments.dog_id)
natsql:
select count ( distinct _ ) from _ where not exists ( select _ from _ where _ = _ ) | select count ( distinct dogs.dog_id ) from dogs where not exists ( select * from treatments where dogs.dog_id = treatments.dog_id )

SQL:
SELECT COUNT(DISTINCT dog_id) FROM dogs WHERE NOT EXISTS (SELECT * FROM treatments WHERE dogs.dog_id = treatments.dog_id)
self correction:
SELECT COUNT(DISTINCT dog_id) FROM Dogs WHERE NOT EXISTS (SELECT * FROM Treatments WHERE Dogs.dog_id = Treatments.dog_id)

index is 980
SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )
How many owners temporarily do not have any dogs?
schema_links:
How many owners temporarily do not have any dogs? | owners : owners.owner_id , owners.home_phone , owners.cell_number , owners.first_name , owners.email_address , owners.* | dogs : dogs.owner_id , dogs.dog_id , dogs.breed_code , dogs.name , dogs.age , dogs.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | professionals : professionals.street , professionals.city , professionals.state , professionals.cell_number , professionals.professional_id , professionals.*
natsql and SQL generation:
select count ( distinct _ ) from _ where _ not in ( select distinct _ from _ ) | select count ( distinct owners.owner_id ) from owners where owners.owner_id not in ( select distinct dogs.owner_id from dogs )
SQL = SELECT count(DISTINCT T1.owner_id) FROM owners AS T1 WHERE T1.owner_id NOT IN (SELECT DISTINCT T2.owner_id FROM dogs AS T2)
natsql:
select count ( distinct _ ) from _ where _ not in ( select distinct _ from _ ) | select count ( distinct owners.owner_id ) from owners where owners.owner_id not in ( select distinct dogs.owner_id from dogs )

SQL:
SELECT count(DISTINCT T1.owner_id) FROM owners AS T1 WHERE T1.owner_id NOT IN (SELECT DISTINCT T2.owner_id FROM dogs AS T2)
self correction:
SELECT count(DISTINCT T1.owner_id)  FROM Owners AS T1  WHERE T1.owner_id NOT IN (SELECT DISTINCT T2.owner_id FROM Dogs AS T2)

index is 981
SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )
Find the number of owners who do not own any dogs at this moment.
schema_links:
Find the number of owners who do not own any dogs at this moment. | owners : owners.owner_id , owners.first_name , owners.cell_number , owners.last_name , owners.street , owners.* | dogs : dogs.owner_id , dogs.date_adopted , dogs.date_departed , dogs.dog_id , dogs.abandoned_yn , dogs.* | breeds : breeds.breed_code , breeds.breed_name , breeds.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql and SQL generation:
select count ( distinct _ ) from _ where _ not in ( select distinct _ from _ where _ ) | select count ( distinct owners.owner_id ) from owners where owners.owner_id not in ( select distinct dogs.owner_id from dogs )
SQL = SELECT count(DISTINCT T1.owner_id) FROM owners AS T1 WHERE T1.owner_id NOT IN (SELECT DISTINCT T2.owner_id FROM dogs AS T2)
natsql:
select count ( distinct _ ) from _ where _ not in ( select distinct _ from _ where _ ) | select count ( distinct owners.owner_id ) from owners where owners.owner_id not in ( select distinct dogs.owner_id from dogs )

SQL:
SELECT count(DISTINCT T1.owner_id) FROM owners AS T1 WHERE T1.owner_id NOT IN (SELECT DISTINCT T2.owner_id FROM dogs AS T2)
self correction:
SELECT count(DISTINCT T1.owner_id)  FROM owners AS T1  LEFT JOIN dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.owner_id IS NULL

index is 982
SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )
How many professionals did not operate any treatment on dogs?
schema_links:
How many professionals did not operate any treatment on dogs? | professionals : professionals.professional_id , professionals.role_code , professionals.home_phone , professionals.cell_number , professionals.street , professionals.* | treatments : treatments.professional_id , treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.* | dogs : dogs.dog_id , dogs.owner_id , dogs.breed_code , dogs.name , dogs.age , dogs.* | owners : owners.street , owners.city , owners.state , owners.cell_number , owners.owner_id , owners.*
natsql and SQL generation:
select count ( _ ) from _ where _ not in ( select _ from _ ) | select count ( professionals.professional_id ) from professionals where professionals.professional_id not in ( select treatments.professional_id from treatments )
SQL = SELECT count(professional_id) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments)
natsql:
select count ( _ ) from _ where _ not in ( select _ from _ ) | select count ( professionals.professional_id ) from professionals where professionals.professional_id not in ( select treatments.professional_id from treatments )

SQL:
SELECT count(professional_id) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments)
self correction:
SELECT COUNT(professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)

index is 983
SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )
Find the number of professionals who have not treated any dogs.
schema_links:
Find the number of professionals who have not treated any dogs. | professionals : professionals.professional_id , professionals.role_code , professionals.street , professionals.city , professionals.state , professionals.* | treatments : treatments.professional_id , treatments.treatment_id , treatments.treatment_type_code , treatments.dog_id , treatments.date_of_treatment , treatments.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.*
natsql and SQL generation:
select count ( distinct _ ) from _ where @.@ not in ( select @.@ from _ ) | select count ( distinct professionals.professional_id ) from professionals where professionals.professional_id not in ( select treatments.professional_id from treatments )
SQL = SELECT count(DISTINCT T1.professional_id) FROM professionals AS T1 WHERE T1.professional_id NOT IN (SELECT professional_id FROM treatments)
natsql:
select count ( distinct _ ) from _ where @.@ not in ( select @.@ from _ ) | select count ( distinct professionals.professional_id ) from professionals where professionals.professional_id not in ( select treatments.professional_id from treatments )

SQL:
SELECT count(DISTINCT T1.professional_id) FROM professionals AS T1 WHERE T1.professional_id NOT IN (SELECT professional_id FROM treatments)
self correction:
SELECT COUNT(DISTINCT T1.professional_id) AS num_professionals FROM Professionals AS T1 WHERE T1.professional_id NOT IN (SELECT professional_id FROM Treatments)

index is 984
SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1
List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.
schema_links:
List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no. | dogs : dogs.abandoned_yn , dogs.name , dogs.age , dogs.weight , dogs.dog_id , dogs.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | owners : owners.street , owners.city , owners.state , owners.cell_number , owners.owner_id , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql and SQL generation:
select _ , _ , _ from _ where _ = _ | select dogs.name , dogs.age , dogs.weight from dogs where dogs.abandoned_yn = 1
natsql:
select _ , _ , _ from _ where _ = _ | select dogs.name , dogs.age , dogs.weight from dogs where dogs.abandoned_yn = 1
SQL:
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1
self correction:
SELECT name, age, weight  FROM Dogs  WHERE abandoned_yn = 1

index is 985
SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1
What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.
schema_links:
What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables. | dogs : dogs.abandoned_yn , dogs.name , dogs.age , dogs.weight , dogs.dog_id , dogs.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql and SQL generation:
select _ , _ , _ from _ where @.@ = _ | select dogs.name , dogs.age , dogs.weight from dogs where dogs.abandoned_yn = 1
SQL = SELECT name , age , weight FROM dogs WHERE abandoned_yn = 1
natsql:
select _ , _ , _ from _ where @.@ = _ | select dogs.name , dogs.age , dogs.weight from dogs where dogs.abandoned_yn = 1

SQL:
SELECT name , age , weight FROM dogs WHERE abandoned_yn = 1
self correction:
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1

index is 986
SELECT avg(age) FROM Dogs
What is the average age of all the dogs?
schema_links:
What is the average age of all the dogs? | dogs : dogs.age , dogs.breed_code , dogs.name , dogs.dog_id , dogs.owner_id , dogs.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql and SQL generation:
select avg ( _ ) from _ | select avg ( dogs.age ) from dogs
SQL = SELECT avg(age) FROM dogs
natsql:
select avg ( _ ) from _ | select avg ( dogs.age ) from dogs

SQL:
SELECT avg(age) FROM dogs
self correction:
SELECT AVG(age) FROM Dogs

index is 987
SELECT avg(age) FROM Dogs
Compute the average age of all the dogs.
schema_links:
Compute the average age of all the dogs. | dogs : dogs.age , dogs.breed_code , dogs.name , dogs.dog_id , dogs.owner_id , dogs.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql and SQL generation:
select avg ( _ ) from _ | select avg ( dogs.age ) from dogs
SQL = SELECT avg(age) FROM dogs
natsql:
select avg ( _ ) from _ | select avg ( dogs.age ) from dogs

SQL:
SELECT avg(age) FROM dogs
self correction:
SELECT AVG(age) FROM Dogs

index is 988
SELECT max(age) FROM Dogs
What is the age of the oldest dog?
schema_links:
What is the age of the oldest dog? | dogs : dogs.age , dogs.name , dogs.breed_code , dogs.date_of_birth , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.cell_number , owners.owner_id , owners.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql and SQL generation:
select max ( _ ) from _ | select max ( dogs.age ) from dogs
SQL = SELECT max(age) FROM dogs
natsql:
select max ( _ ) from _ | select max ( dogs.age ) from dogs

SQL:
SELECT max(age) FROM dogs
self correction:
SELECT max(age) FROM Dogs

index is 989
SELECT max(age) FROM Dogs
Tell me the age of the oldest dog.
schema_links:
Tell me the age of the oldest dog. | dogs : dogs.age , dogs.name , dogs.breed_code , dogs.date_of_birth , dogs.dog_id , dogs.* | owners : owners.street , owners.city , owners.state , owners.cell_number , owners.owner_id , owners.* | breeds : breeds.breed_code , breeds.breed_name , breeds.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql and SQL generation:
select max ( _ ) from _ | select max ( dogs.age ) from dogs
SQL = SELECT max(age) FROM dogs
natsql:
select max ( _ ) from _ | select max ( dogs.age ) from dogs

SQL:
SELECT max(age) FROM dogs
self correction:
SELECT max(age) FROM Dogs

index is 990
SELECT charge_type ,  charge_amount FROM Charges
How much does each charge type costs? List both charge type and amount.
schema_links:
How much does each charge type costs? List both charge type and amount. | charges : charges.charge_type , charges.charge_amount , charges.charge_id , charges.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql and SQL generation:
select _ , _ from _ | select charges.charge_type , charges.charge_amount from charges
SQL = SELECT charge_type ,  charge_amount FROM charges
natsql:
select _ , _ from _ | select charges.charge_type , charges.charge_amount from charges

SQL:
SELECT charge_type ,  charge_amount FROM charges
self correction:
SELECT charge_type, charge_amount FROM Charges

index is 991
SELECT charge_type ,  charge_amount FROM Charges
List each charge type and its amount.
schema_links:
List each charge type and its amount. | charges : charges.charge_type , charges.charge_amount , charges.charge_id , charges.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql and SQL generation:
select _ , _ from _ | select charges.charge_type , charges.charge_amount from charges
SQL = SELECT charge_type ,  charge_amount FROM charges
natsql:
select _ , _ from _ | select charges.charge_type , charges.charge_amount from charges

SQL:
SELECT charge_type ,  charge_amount FROM charges
self correction:
SELECT charge_type, charge_amount FROM Charges

index is 992
SELECT max(charge_amount) FROM Charges
How much does the most expensive charge type costs?
schema_links:
How much does the most expensive charge type costs? | charges : charges.charge_type , charges.charge_amount , charges.charge_id , charges.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | dogs : dogs.owner_id , dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql and SQL generation:
select max ( _ ) from _ | select max ( charges.charge_amount ) from charges
SQL = SELECT max(charge_amount) FROM charges
natsql:
select max ( _ ) from _ | select max ( charges.charge_amount ) from charges

SQL:
SELECT max(charge_amount) FROM charges
self correction:
SELECT MAX(charge_amount) AS max_charge_amount FROM Charges

index is 993
SELECT max(charge_amount) FROM Charges
What is the charge amount of the most expensive charge type?
schema_links:
What is the charge amount of the most expensive charge type? | charges : charges.charge_type , charges.charge_amount , charges.charge_id , charges.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*
natsql and SQL generation:
select _ from _ order by _ desc limit _ | select charge_amount from charges order by charge_amount desc limit 1
SQL = SELECT charge_amount FROM charges ORDER BY charge_amount DESC LIMIT 1
natsql:
select _ from _ order by _ desc limit _ | select charge_amount from charges order by charge_amount desc limit 1

SQL:
SELECT charge_amount FROM charges ORDER BY charge_amount DESC LIMIT 1
self correction:
SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1

index is 994
SELECT email_address ,  cell_number ,  home_phone FROM professionals
List the email, cell phone and home phone of all the professionals.
schema_links:
List the email, cell phone and home phone of all the professionals. | professionals : professionals.home_phone , professionals.email_address , professionals.cell_number , professionals.professional_id , professionals.role_code , professionals.* | owners : owners.first_name , owners.street , owners.city , owners.state , owners.email_address , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | breeds : breeds.breed_code , breeds.breed_name , breeds.*
natsql and SQL generation:
select _ , _ , _ from _ | select professionals.email_address , professionals.cell_number , professionals.home_phone from professionals
SQL = SELECT email_address ,  cell_number ,  home_phone FROM professionals
natsql:
select _ , _ , _ from _ | select professionals.email_address , professionals.cell_number , professionals.home_phone from professionals

SQL:
SELECT email_address ,  cell_number ,  home_phone FROM professionals
self correction:
SELECT email_address, cell_number, home_phone FROM Professionals

index is 995
SELECT email_address ,  cell_number ,  home_phone FROM professionals
What are the email, cell phone and home phone of each professional?
schema_links:
What are the email, cell phone and home phone of each professional? | professionals : professionals.home_phone , professionals.email_address , professionals.cell_number , professionals.professional_id , professionals.role_code , professionals.* | owners : owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.* | breeds : breeds.breed_code , breeds.breed_name , breeds.*
natsql and SQL generation:
select _ , _ , _ from _ | select professionals.email_address , professionals.cell_number , professionals.home_phone from professionals
natsql:
select _ , _ , _ from _ | select professionals.email_address , professionals.cell_number , professionals.home_phone from professionals
SQL:
SELECT email_address, cell_number, home_phone FROM professionals
self correction:
SELECT email_address, cell_number, home_phone FROM Professionals

index is 996
SELECT DISTINCT breed_code ,  size_code FROM dogs
What are all the possible breed type and size type combinations?
schema_links:
What are all the possible breed type and size type combinations? | sizes : sizes.size_description , sizes.size_code , sizes.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | dogs : dogs.breed_code , dogs.size_code , dogs.name , dogs.dog_id , dogs.owner_id , dogs.* | treatment_types : treatment_types.treatment_type_description , treatment_types.treatment_type_code , treatment_types.*
natsql and SQL generation:
select _ , _ from _ , _ | select breeds.breed_name , sizes.size_description from breeds , sizes
SQL = SELECT breeds.breed_name , sizes.size_description FROM breeds , sizes
natsql:
select _ , _ from _ , _ | select breeds.breed_name , sizes.size_description from breeds , sizes

SQL:
SELECT breeds.breed_name , sizes.size_description FROM breeds , sizes
self correction:
SELECT breeds.breed_name, sizes.size_description FROM breeds CROSS JOIN sizes

index is 997
SELECT DISTINCT breed_code ,  size_code FROM dogs
Find the distinct breed type and size type combinations for dogs.
schema_links:
Find the distinct breed type and size type combinations for dogs. | dogs : dogs.breed_code , dogs.size_code , dogs.name , dogs.dog_id , dogs.age , dogs.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | sizes : sizes.size_description , sizes.size_code , sizes.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*
natsql and SQL generation:
select distinct _ , _ from _ | select distinct dogs.breed_code , dogs.size_code from dogs
SQL = SELECT DISTINCT breed_code ,  size_code FROM dogs
natsql:
select distinct _ , _ from _ | select distinct dogs.breed_code , dogs.size_code from dogs

SQL:
SELECT DISTINCT breed_code ,  size_code FROM dogs
self correction:
SELECT DISTINCT breed_code, size_code FROM Dogs

index is 998
SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code
List the first name of all the professionals along with the description of the treatment they have done.
schema_links:
List the first name of all the professionals along with the description of the treatment they have done. | professionals : professionals.first_name , professionals.professional_id , professionals.role_code , professionals.street , professionals.city , professionals.* | treatment_types : treatment_types.treatment_type_description , treatment_types.treatment_type_code , treatment_types.* | treatments : treatments.cost_of_treatment , treatments.professional_id , treatments.treatment_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.* | owners : owners.first_name , owners.street , owners.city , owners.state , owners.owner_id , owners.*
natsql and SQL generation:
select _ , _ from _ join _ on _ where _ | select professionals.first_name , treatment_types.treatment_type_description from professionals join treatments on professionals.professional_id = treatments.professional_id join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code
SQL = SELECT professionals.first_name , treatment_types.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
natsql:
select _ , _ from _ join _ on _ where _ | select professionals.first_name , treatment_types.treatment_type_description from professionals join treatments on professionals.professional_id = treatments.professional_id join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code

SQL:
SELECT professionals.first_name , treatment_types.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
self correction:
SELECT professionals.first_name, treatment_types.treatment_type_description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;

index is 999
SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code
What are each professional's first name and description of the treatment they have performed?
schema_links:
What are each professional's first name and description of the treatment they have performed? | professionals : professionals.first_name , professionals.role_code , professionals.professional_id , professionals.last_name , professionals.email_address , professionals.* | treatment_types : treatment_types.treatment_type_description , treatment_types.treatment_type_code , treatment_types.* | treatments : treatments.cost_of_treatment , treatments.treatment_type_code , treatments.professional_id , treatments.date_of_treatment , treatments.treatment_id , treatments.* | owners : owners.first_name , owners.street , owners.city , owners.state , owners.home_phone , owners.*
natsql and SQL generation:
select _ , _ from _ join _ on _ = _ | select professionals.first_name , treatment_types.treatment_type_description from professionals join treatments on professionals.professional_id = treatments.professional_id join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code
SQL = SELECT professionals.first_name , treatment_types.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
natsql:
select _ , _ from _ join _ on _ = _ | select professionals.first_name , treatment_types.treatment_type_description from professionals join treatments on professionals.professional_id = treatments.professional_id join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code

SQL:
SELECT professionals.first_name , treatment_types.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
self correction:
SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code

index is 1000
SELECT count(*) FROM singer
How many singers are there?
schema_links:
How many singers are there? | singer : singer.singer_id , singer.name , singer.net_worth_millions , singer.citizenship , singer.birth_year , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql and SQL generation:
select count ( * ) from _ | select count ( * ) from singer
SQL = SELECT count(*) FROM singer
natsql:
select count ( * ) from _ | select count ( * ) from singer

SQL:
SELECT count(*) FROM singer
self correction:
SELECT count(DISTINCT Singer_ID) FROM singer

index is 1001
SELECT count(*) FROM singer
What is the count of singers?
schema_links:
What is the count of singers? | singer : singer.net_worth_millions , singer.singer_id , singer.name , singer.citizenship , singer.birth_year , singer.* | song : song.title , song.singer_id , song.sales , song.song_id , song.highest_position , song.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( singer.singer_id ) from singer
SQL = SELECT count(*) FROM singer
natsql:
select count ( _ ) from _ | select count ( singer.singer_id ) from singer

SQL:
SELECT count(*) FROM singer
self correction:
SELECT COUNT(*) FROM singer

index is 1002
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
List the name of singers in ascending order of net worth.
schema_links:
List the name of singers in ascending order of net worth. | singer : singer.net_worth_millions , singer.name , singer.citizenship , singer.singer_id , singer.birth_year , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql and SQL generation:
select _ from _ order by _ asc | select singer.name from singer order by singer.net_worth_millions asc
SQL = SELECT name FROM singer ORDER BY net_worth_millions ASC
natsql:
select _ from _ order by _ asc | select singer.name from singer order by singer.net_worth_millions asc

SQL:
SELECT name FROM singer ORDER BY net_worth_millions ASC
self correction:
SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions ASC

index is 1003
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
What are the names of singers ordered by ascending net worth?
schema_links:
What are the names of singers ordered by ascending net worth? | singer : singer.net_worth_millions , singer.name , singer.singer_id , singer.citizenship , singer.birth_year , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql and SQL generation:
select _ from _ order by _ asc | select singer.name from singer order by singer.net_worth_millions asc
SQL = SELECT name FROM singer ORDER BY net_worth_millions ASC
natsql:
select _ from _ order by _ asc | select singer.name from singer order by singer.net_worth_millions asc

SQL:
SELECT name FROM singer ORDER BY net_worth_millions ASC
self correction:
SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions ASC

index is 1004
SELECT Birth_Year ,  Citizenship FROM singer
What are the birth year and citizenship of singers?
schema_links:
What are the birth year and citizenship of singers? | singer : singer.birth_year , singer.citizenship , singer.name , singer.net_worth_millions , singer.singer_id , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql and SQL generation:
select _ , _ from _ | select singer.birth_year , singer.citizenship from singer
SQL = SELECT birth_year ,  citizenship FROM singer
natsql:
select _ , _ from _ | select singer.birth_year , singer.citizenship from singer

SQL:
SELECT birth_year ,  citizenship FROM singer
self correction:
SELECT Birth_Year, Citizenship FROM singer

index is 1005
SELECT Birth_Year ,  Citizenship FROM singer
What are the birth years and citizenships of the singers?
schema_links:
What are the birth years and citizenships of the singers? | singer : singer.birth_year , singer.citizenship , singer.name , singer.singer_id , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql and SQL generation:
select _ , _ from _ | select singer.birth_year , singer.citizenship from singer
SQL = SELECT birth_year , citizenship FROM singer
natsql:
select _ , _ from _ | select singer.birth_year , singer.citizenship from singer

SQL:
SELECT birth_year , citizenship FROM singer
self correction:
SELECT birth_year, citizenship FROM singer

index is 1006
SELECT Name FROM singer WHERE Citizenship != "France"
List the name of singers whose citizenship is not "France".
schema_links:
List the name of singers whose citizenship is not "France". | singer : singer.citizenship ( France ) , singer.name , singer.singer_id , singer.birth_year , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql and SQL generation:
select _ from _ where @.@ != "France" | select singer.name from singer where singer.citizenship != "France"
SQL = SELECT name FROM singer WHERE citizenship != "France"
natsql:
select _ from _ where @.@ != "France" | select singer.name from singer where singer.citizenship != "France"

SQL:
SELECT name FROM singer WHERE citizenship != "France"
self correction:
SELECT name FROM singer WHERE citizenship <> "France"

index is 1007
SELECT Name FROM singer WHERE Citizenship != "France"
What are the names of the singers who are not French citizens?
schema_links:
What are the names of the singers who are not French citizens? | singer : singer.name , singer.citizenship , singer.singer_id , singer.birth_year , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql and SQL generation:
select _ from _ where _ != _ | select singer.name from singer where singer.citizenship != 'French'
SQL = SELECT name FROM singer WHERE citizenship != 'French'
natsql:
select _ from _ where _ != _ | select singer.name from singer where singer.citizenship != 'French'

SQL:
SELECT name FROM singer WHERE citizenship != 'French'
self correction:
SELECT name FROM singer WHERE citizenship <> 'French'

index is 1008
SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949
Show the name of singers whose birth year is either 1948 or 1949?
schema_links:
Show the name of singers whose birth year is either 1948 or 1949? | singer : singer.birth_year , singer.name , singer.singer_id , singer.citizenship , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql and SQL generation:
select _ from _ where _ | select singer.name from singer where singer.birth_year = 1948 or singer.birth_year = 1949
SQL = SELECT name FROM singer WHERE birth_year  =  1948 OR birth_year  =  1949
natsql:
select _ from _ where _ | select singer.name from singer where singer.birth_year = 1948 or singer.birth_year = 1949

SQL:
SELECT name FROM singer WHERE birth_year  =  1948 OR birth_year  =  1949
self correction:
SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949

index is 1009
SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949
What are the names of the singers whose birth years are either 1948 or 1949?
schema_links:
What are the names of the singers whose birth years are either 1948 or 1949? | singer : singer.birth_year , singer.name , singer.singer_id , singer.citizenship , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql and SQL generation:
select _ from _ where _ = _ or _ = _ | select singer.name from singer where singer.birth_year = 1948 or singer.birth_year = 1949
SQL = SELECT name FROM singer WHERE birth_year  =  1948 OR birth_year  =  1949
natsql:
select _ from _ where _ = _ or _ = _ | select singer.name from singer where singer.birth_year = 1948 or singer.birth_year = 1949

SQL:
SELECT name FROM singer WHERE birth_year  =  1948 OR birth_year  =  1949
self correction:
SELECT name FROM singer WHERE birth_year IN (1948, 1949)

index is 1010
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
What is the name of the singer with the largest net worth?
schema_links:
What is the name of the singer with the largest net worth? | singer : singer.net_worth_millions , singer.name , singer.singer_id , singer.citizenship , singer.birth_year , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql and SQL generation:
select _ from _ order by _ desc limit _ | select singer.name from singer order by singer.net_worth_millions desc limit 1
SQL = SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1
natsql:
select _ from _ order by _ desc limit _ | select singer.name from singer order by singer.net_worth_millions desc limit 1

SQL:
SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1
self correction:
SELECT name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1

index is 1011
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
What is the name of the singer who is worth the most?
schema_links:
What is the name of the singer who is worth the most? | singer : singer.net_worth_millions , singer.name , singer.singer_id , singer.citizenship , singer.birth_year , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql and SQL generation:
select _ from _ order by _ desc limit _ | select singer.name from singer order by singer.net_worth_millions desc limit 1
SQL = SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1
natsql:
select _ from _ order by _ desc limit _ | select singer.name from singer order by singer.net_worth_millions desc limit 1

SQL:
SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1
self correction:
SELECT name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1

index is 1012
SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship
Show different citizenship of singers and the number of singers of each citizenship.
schema_links:
Show different citizenship of singers and the number of singers of each citizenship. | singer : singer.citizenship , singer.name , singer.singer_id , singer.birth_year , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql and SQL generation:
select distinct _ , count ( _ ) from _ group by _ | select distinct singer.citizenship , count ( singer.citizenship ) from singer group by singer.citizenship
SQL = SELECT DISTINCT citizenship , count(*) FROM singer GROUP BY citizenship
natsql:
select distinct _ , count ( _ ) from _ group by _ | select distinct singer.citizenship , count ( singer.citizenship ) from singer group by singer.citizenship

SQL:
SELECT DISTINCT citizenship , count(*) FROM singer GROUP BY citizenship
self correction:
SELECT citizenship, COUNT(DISTINCT Singer_ID) FROM singer GROUP BY citizenship

index is 1013
SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship
For each citizenship, how many singers are from that country?
schema_links:
For each citizenship, how many singers are from that country? | singer : singer.citizenship , singer.name , singer.singer_id , singer.birth_year , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select singer.citizenship , count ( singer.* ) from singer group by singer.citizenship
SQL = SELECT citizenship ,  COUNT(*) FROM singer GROUP BY citizenship
natsql:
select _ , count ( _ ) from _ group by _ | select singer.citizenship , count ( singer.* ) from singer group by singer.citizenship

SQL:
SELECT citizenship ,  COUNT(*) FROM singer GROUP BY citizenship
self correction:
SELECT citizenship, COUNT(*) FROM singer GROUP BY citizenship

index is 1014
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1
Please show the most common citizenship of singers.
schema_links:
Please show the most common citizenship of singers. | singer : singer.citizenship , singer.name , singer.net_worth_millions , singer.singer_id , singer.birth_year , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ order by count ( _ ) desc limit _ | select singer.citizenship , count ( singer.* ) from singer group by singer.citizenship order by count ( singer.* ) desc limit 1
SQL = SELECT citizenship ,  COUNT(*) FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1
natsql:
select _ , count ( _ ) from _ group by _ order by count ( _ ) desc limit _ | select singer.citizenship , count ( singer.* ) from singer group by singer.citizenship order by count ( singer.* ) desc limit 1

SQL:
SELECT citizenship ,  COUNT(*) FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1
self correction:
SELECT citizenship, COUNT(*)  FROM singer  GROUP BY citizenship  ORDER BY COUNT(*) DESC  LIMIT 1

index is 1015
select citizenship from singer group by citizenship order by count(*) desc limit 1
What is the most common singer citizenship ?
schema_links:
What is the most common singer citizenship ? | singer : singer.citizenship , singer.name , singer.net_worth_millions , singer.singer_id , singer.birth_year , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select singer.citizenship from singer group by singer.citizenship order by count ( singer.citizenship ) desc limit 1
SQL = SELECT citizenship FROM singer GROUP BY citizenship ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select singer.citizenship from singer group by singer.citizenship order by count ( singer.citizenship ) desc limit 1

SQL:
SELECT citizenship FROM singer GROUP BY citizenship ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1

index is 1016
SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship
Show different citizenships and the maximum net worth of singers of each citizenship.
schema_links:
Show different citizenships and the maximum net worth of singers of each citizenship. | singer : singer.net_worth_millions , singer.citizenship , singer.name , singer.singer_id , singer.birth_year , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql and SQL generation:
select _ , max ( _ ) from _ group by _ | select singer.citizenship , max ( singer.net_worth_millions ) from singer group by singer.citizenship
SQL = SELECT citizenship ,  MAX(net_worth_millions) FROM singer GROUP BY citizenship
natsql:
select _ , max ( _ ) from _ group by _ | select singer.citizenship , max ( singer.net_worth_millions ) from singer group by singer.citizenship

SQL:
SELECT citizenship ,  MAX(net_worth_millions) FROM singer GROUP BY citizenship
self correction:
SELECT citizenship, MAX(net_worth_millions)  FROM singer  GROUP BY citizenship

index is 1017
SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship
For each citizenship, what is the maximum net worth?
schema_links:
For each citizenship, what is the maximum net worth? | singer : singer.net_worth_millions , singer.citizenship , singer.name , singer.singer_id , singer.birth_year , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql and SQL generation:
select _ , max ( _ ) from _ group by _ | select singer.citizenship , max ( singer.net_worth_millions ) from singer group by singer.citizenship
SQL = SELECT citizenship ,  MAX(net_worth_millions) FROM singer GROUP BY citizenship
natsql:
select _ , max ( _ ) from _ group by _ | select singer.citizenship , max ( singer.net_worth_millions ) from singer group by singer.citizenship

SQL:
SELECT citizenship ,  MAX(net_worth_millions) FROM singer GROUP BY citizenship
self correction:
SELECT citizenship, MAX(net_worth_millions) AS max_net_worth FROM singer GROUP BY citizenship

index is 1018
SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID
Show titles of songs and names of singers.
schema_links:
Show titles of songs and names of singers. | singer : singer.name , singer.singer_id , singer.citizenship , singer.birth_year , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql and SQL generation:
select _ , _ from _ | select song.title , singer.name from song join singer on song.singer_id = singer.singer_id
SQL = SELECT title ,  name FROM song JOIN singer ON song.Singer_ID  =  singer.Singer_ID
natsql:
select _ , _ from _ | select song.title , singer.name from song join singer on song.singer_id = singer.singer_id

SQL:
SELECT title ,  name FROM song JOIN singer ON song.Singer_ID  =  singer.Singer_ID
self correction:
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID

index is 1019
SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID
What are the song titles and singer names?
schema_links:
What are the song titles and singer names? | singer : singer.name , singer.singer_id , singer.net_worth_millions , singer.citizenship , singer.birth_year , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql and SQL generation:
select _ , _ from _
SQL = SELECT title, name FROM song JOIN singer ON song.singer_id = singer.Singer_ID
natsql:
select _ , _ from _

SQL:
SELECT title, name FROM song JOIN singer ON song.singer_id = singer.Singer_ID
self correction:
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID

index is 1020
SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000
Show distinct names of singers that have songs with sales more than 300000.
schema_links:
Show distinct names of singers that have songs with sales more than 300000. | singer : singer.name , singer.singer_id , singer.citizenship , singer.birth_year , singer.net_worth_millions , singer.* | song : song.sales , song.title , song.singer_id , song.song_id , song.highest_position , song.*
natsql and SQL generation:
select distinct _ from _ where _ > _ | select distinct singer.name from singer where song.sales > 300000
SQL = SELECT DISTINCT name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE sales > 300000
natsql:
select distinct _ from _ where _ > _ | select distinct singer.name from singer where song.sales > 300000

SQL:
SELECT DISTINCT name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE sales > 300000
self correction:
SELECT DISTINCT singer.Name  FROM singer  JOIN song ON singer.Singer_ID = song.Singer_ID  WHERE song.Sales > 300000

index is 1021
SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000
what are the different names of the singers that have sales more than 300000?
schema_links:
what are the different names of the singers that have sales more than 300000? | singer : singer.name , singer.singer_id , singer.net_worth_millions , singer.birth_year , singer.citizenship , singer.* | song : song.sales , song.singer_id , song.title , song.song_id , song.highest_position , song.*
natsql and SQL generation:
select distinct _ from _ where @.@ > _ | select distinct singer.name from singer where song.sales > 300000
SQL = SELECT DISTINCT name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE sales > 300000
natsql:
select distinct _ from _ where @.@ > _ | select distinct singer.name from singer where song.sales > 300000

SQL:
SELECT DISTINCT name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE sales > 300000
self correction:
SELECT name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Sales > 300000;

index is 1022
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1
Show the names of singers that have more than one song.
schema_links:
Show the names of singers that have more than one song. | singer : singer.name , singer.singer_id , singer.citizenship , singer.birth_year , singer.net_worth_millions , singer.* | song : song.singer_id , song.title , song.sales , song.song_id , song.highest_position , song.*
natsql and SQL generation:
select _ from _ where count ( _ ) > _ group by _ | select singer.name from singer where count ( singer.* ) > 1 group by singer.name
SQL = SELECT name FROM singer GROUP BY name HAVING count(*)  >  1
natsql:
select _ from _ where count ( _ ) > _ group by _ | select singer.name from singer where count ( singer.* ) > 1 group by singer.name

SQL:
SELECT name FROM singer GROUP BY name HAVING count(*)  >  1
self correction:
SELECT name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.name HAVING COUNT(song.Song_ID) > 1

index is 1023
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1
What are the names of the singers that have more than one songs?
schema_links:
What are the names of the singers that have more than one songs? | singer : singer.name , singer.singer_id , singer.net_worth_millions , singer.citizenship , singer.birth_year , singer.* | song : song.singer_id , song.title , song.sales , song.song_id , song.highest_position , song.*
natsql and SQL generation:
select _ from _ where count ( _ ) > _ group by _ | select singer.name from singer where count ( singer.singer_id ) > 1 group by singer.name
SQL = SELECT name FROM singer GROUP BY name HAVING count(*)  >  1
natsql:
select _ from _ where count ( _ ) > _ group by _ | select singer.name from singer where count ( singer.singer_id ) > 1 group by singer.name

SQL:
SELECT name FROM singer GROUP BY name HAVING count(*)  >  1
self correction:
SELECT name  FROM singer  WHERE Singer_ID IN (     SELECT Singer_ID     FROM song     GROUP BY Singer_ID     HAVING COUNT(*) > 1 )

index is 1024
SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name
Show the names of singers and the total sales of their songs.
schema_links:
Show the names of singers and the total sales of their songs. | singer : singer.name , singer.singer_id , singer.citizenship , singer.birth_year , singer.net_worth_millions , singer.* | song : song.sales , song.title , song.singer_id , song.song_id , song.highest_position , song.*
natsql and SQL generation:
select _ , sum ( _ ) from _ group by _ | select singer.name , sum ( song.sales ) from singer join song on singer.singer_id = song.singer_id group by singer.name
SQL = SELECT name , SUM(sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY name
natsql:
select _ , sum ( _ ) from _ group by _ | select singer.name , sum ( song.sales ) from singer join song on singer.singer_id = song.singer_id group by singer.name

SQL:
SELECT name , SUM(sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY name
self correction:
SELECT name, SUM(sales) AS total_sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY name

index is 1025
SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name
For each singer name, what is the total sales for their songs?
schema_links:
For each singer name, what is the total sales for their songs? | singer : singer.name , singer.singer_id , singer.net_worth_millions , singer.citizenship , singer.birth_year , singer.* | song : song.sales , song.singer_id , song.title , song.song_id , song.highest_position , song.*
natsql and SQL generation:
select _ , sum ( _ ) from _ group by _ | select singer.name , sum ( song.sales ) from singer join song on singer.singer_id = song.singer_id group by singer.name
SQL = SELECT singer.name , sum(song.sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.name
natsql:
select _ , sum ( _ ) from _ group by _ | select singer.name , sum ( song.sales ) from singer join song on singer.singer_id = song.singer_id group by singer.name

SQL:
SELECT singer.name , sum(song.sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.name
self correction:
SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name

index is 1026
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
List the name of singers that do not have any song.
schema_links:
List the name of singers that do not have any song. | singer : singer.name , singer.singer_id , singer.net_worth_millions , singer.citizenship , singer.birth_year , singer.* | song : song.title , song.singer_id , song.sales , song.song_id , song.highest_position , song.*
natsql and SQL generation:
select _ from _ where not exists ( select * from _ where _.singer_id = _.singer_id ) | select singer.name from singer where not exists ( select * from song where song.singer_id = singer.singer_id )
SQL = SELECT name FROM singer WHERE NOT EXISTS (SELECT * FROM song WHERE song.singer_id = singer.singer_id)
natsql:
select _ from _ where not exists ( select * from _ where _.singer_id = _.singer_id ) | select singer.name from singer where not exists ( select * from song where song.singer_id = singer.singer_id )

SQL:
SELECT name FROM singer WHERE NOT EXISTS (SELECT * FROM song WHERE song.singer_id = singer.singer_id)
self correction:
SELECT name  FROM singer  WHERE singer.Singer_ID NOT IN (SELECT singer.Singer_ID FROM song)

index is 1027
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
What is the sname of every sing that does not have any song?
schema_links:
What is the sname of every sing that does not have any song? | singer : singer.name , singer.singer_id , singer.birth_year , singer.net_worth_millions , singer.citizenship , singer.* | song : song.title , song.singer_id , song.sales , song.song_id , song.highest_position , song.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ ) | select singer.name from singer where singer.singer_id not in ( select song.singer_id from song )
SQL = SELECT name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
natsql:
select _ from _ where _ not in ( select _ from _ ) | select singer.name from singer where singer.singer_id not in ( select song.singer_id from song )

SQL:
SELECT name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
self correction:
SELECT name AS sname FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)

index is 1028
SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955
Show the citizenship shared by singers with birth year before 1945 and after 1955.
schema_links:
Show the citizenship shared by singers with birth year before 1945 and after 1955. | singer : singer.birth_year , singer.citizenship , singer.name , singer.singer_id , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql and SQL generation:
select distinct _ from _ where _ or _ | select distinct singer.citizenship from singer where singer.birth_year < 1945 or singer.birth_year > 1955
SQL = SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 OR birth_year > 1955
natsql:
select distinct _ from _ where _ or _ | select distinct singer.citizenship from singer where singer.birth_year < 1945 or singer.birth_year > 1955

SQL:
SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 OR birth_year > 1955
self correction:
SELECT citizenship  FROM singer  WHERE birth_year < 1945 OR birth_year > 1955

index is 1029
SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955
What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?
schema_links:
What are the citizenships that are shared by singers with a birth year before 1945 and after 1955? | singer : singer.birth_year , singer.citizenship , singer.name , singer.singer_id , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.*
natsql and SQL generation:
select distinct _ from _ where _ and _ | select distinct singer.citizenship from singer where singer.birth_year < 1945 and singer.birth_year > 1955
SQL = SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955
natsql:
select distinct _ from _ where _ and _ | select distinct singer.citizenship from singer where singer.birth_year < 1945 and singer.birth_year > 1955

SQL:
SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955
self correction:
SELECT The given SQLite SQL query has a logical error. The condition "birth_year < 1945 AND birth_year > 1955" is contradictory because no birth year can be both before 1945 and after 1955. Therefore, it's impossible for singers to have a birth year that satisfies this condition.  To fix the query and retrieve the citizenships shared by singers with a birth year before 1945 or after 1955, you can use the OR operator instead of the AND operator. Here's the corrected SQLite SQL query:  ```sql SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 OR birth_year > 1955; ```  This query will return the distinct citizenship values of singers who were born before 1945 or after 1955.

index is 1030
SELECT count(*) FROM Other_Available_Features
How many available features are there in total?
schema_links:
How many available features are there in total? | other_available_features : other_available_features.feature_id , other_available_features.feature_name , other_available_features.feature_type_code , other_available_features.feature_description , other_available_features.* | ref_feature_types : ref_feature_types.feature_type_name , ref_feature_types.feature_type_code , ref_feature_types.* | properties : properties.property_name , properties.property_address , properties.buyer_offered_price , properties.hse_feature_2 , properties.hse_feature_3 , properties.* | other_property_features : other_property_features.feature_id , other_property_features.property_id , other_property_features.property_feature_description , other_property_features.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( other_available_features.* ) from other_available_features
SQL = SELECT count(*) FROM other_available_features
natsql:
select count ( _ ) from _ | select count ( other_available_features.* ) from other_available_features

SQL:
SELECT count(*) FROM other_available_features
self correction:
SELECT count(*) FROM Other_Available_Features

index is 1031
SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  "AirCon"
What is the feature type name of feature AirCon?
schema_links:
What is the feature type name of feature AirCon? | ref_feature_types : ref_feature_types.feature_type_name , ref_feature_types.feature_type_code , ref_feature_types.* | other_available_features : other_available_features.feature_name ( AirCon ) , other_available_features.feature_id , other_available_features.feature_type_code , other_available_features.feature_description , other_available_features.* | properties : properties.property_name , properties.property_address , properties.buyer_offered_price , properties.hse_feature_2 , properties.property_id , properties.* | other_property_features : other_property_features.property_id , other_property_features.feature_id , other_property_features.property_feature_description , other_property_features.*
natsql and SQL generation:
select _ from _ where _ = _ | select ref_feature_types.feature_type_name from ref_feature_types where other_available_features.feature_name = 'AirCon' and ref_feature_types.feature_type_code = other_available_features.feature_type_code
SQL = SELECT feature_type_name FROM ref_feature_types WHERE feature_type_code  =  (SELECT feature_type_code FROM other_available_features WHERE feature_name  =  'AirCon')
natsql:
select _ from _ where _ = _ | select ref_feature_types.feature_type_name from ref_feature_types where other_available_features.feature_name = 'AirCon' and ref_feature_types.feature_type_code = other_available_features.feature_type_code

SQL:
SELECT feature_type_name FROM ref_feature_types WHERE feature_type_code  =  (SELECT feature_type_code FROM other_available_features WHERE feature_name  =  'AirCon')
self correction:
SELECT feature_type_name  FROM Ref_Feature_Types  WHERE feature_type_code = (     SELECT feature_type_code      FROM Other_Available_Features      WHERE feature_name = 'AirCon' )

index is 1032
SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code
Show the property type descriptions of properties belonging to that code.
schema_links:
Show the property type descriptions of properties belonging to that code. | properties : properties.property_type_code , properties.property_name , properties.property_address , properties.property_id , properties.date_sold , properties.* | ref_property_types : ref_property_types.property_type_description , ref_property_types.property_type_code , ref_property_types.* | other_property_features : other_property_features.property_feature_description , other_property_features.property_id , other_property_features.feature_id , other_property_features.* | other_available_features : other_available_features.feature_id , other_available_features.feature_type_code , other_available_features.feature_name , other_available_features.feature_description , other_available_features.*
natsql and SQL generation:
select _ from _ where @.@ = _ | select ref_property_types.property_type_description from ref_property_types where ref_property_types.property_type_code = properties.property_type_code
SQL = SELECT property_type_description FROM ref_property_types WHERE property_type_code  =  (SELECT property_type_code FROM properties)
natsql:
select _ from _ where @.@ = _ | select ref_property_types.property_type_description from ref_property_types where ref_property_types.property_type_code = properties.property_type_code

SQL:
SELECT property_type_description FROM ref_property_types WHERE property_type_code  =  (SELECT property_type_code FROM properties)
self correction:
SELECT property_type_description FROM ref_property_types JOIN properties ON ref_property_types.property_type_code = properties.property_type_code WHERE properties.property_id = 'property_code'

index is 1033
SELECT property_name FROM Properties WHERE property_type_code  =  "House" UNION SELECT property_name FROM Properties WHERE property_type_code  =  "Apartment" AND room_count  >  1
What are the names of properties that are either houses or apartments with more than 1 room?
schema_links:
What are the names of properties that are either houses or apartments with more than 1 room? | properties : properties.property_name , properties.room_count , properties.property_type_code ( Apartment , House ) , properties.property_address , properties.property_id , properties.* | ref_property_types : ref_property_types.property_type_code ( Apartment , House ) , ref_property_types.property_type_description , ref_property_types.* | other_property_features : other_property_features.property_id , other_property_features.feature_id , other_property_features.property_feature_description , other_property_features.* | other_available_features : other_available_features.feature_id , other_available_features.feature_type_code , other_available_features.feature_name , other_available_features.feature_description , other_available_features.*
natsql and SQL generation:
select _ from _ where ( @.@ = @ or @.@ = @ ) and @.@ > _ | select properties.property_name from properties where ( properties.property_type_code = 'Apartment' or properties.property_type_code = 'House' ) and properties.room_count > 1
SQL = SELECT property_name FROM properties WHERE (property_type_code = 'Apartment' OR property_type_code = 'House') AND room_count > 1
natsql:
select _ from _ where ( @.@ = @ or @.@ = @ ) and @.@ > _ | select properties.property_name from properties where ( properties.property_type_code = 'Apartment' or properties.property_type_code = 'House' ) and properties.room_count > 1

SQL:
SELECT property_name FROM properties WHERE (property_type_code = 'Apartment' OR property_type_code = 'House') AND room_count > 1
self correction:
SELECT properties.property_name FROM properties WHERE (properties.property_type_code = 'Apartment' OR properties.property_type_code = 'House') AND properties.room_count > 1
