SELECT Sections.* FROM Sections WHERE Sections.section_id = 'h'
SELECT section_description FROM Sections WHERE section_name = 'h'
SELECT first_name  FROM Students  JOIN Addresses ON Students.permanent_address_id = Addresses.address_id  WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'
SELECT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti') OR cell_mobile_number IN ('09700166582')
SELECT Title FROM Cartoon ORDER BY Title ASC
SELECT Title FROM Cartoon ORDER BY Title ASC
SELECT Title  FROM Cartoon  WHERE Directed_by = 'Ben Jones'
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'
SELECT COUNT(DISTINCT id) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id ORDER BY Cartoon.Original_air_date;
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id ORDER BY Cartoon.Original_air_date ASC
SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti')
SELECT Title  FROM Cartoon  WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'
SELECT Country, COUNT(*) AS NumChannels FROM TV_Channel GROUP BY Country ORDER BY NumChannels DESC LIMIT 1
SELECT Country, COUNT(id) AS channel_count  FROM TV_Channel  GROUP BY Country  ORDER BY channel_count DESC  LIMIT 1
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;
SELECT Content  FROM TV_Channel  WHERE series_name = 'Sky Radio'
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'
SELECT COUNT(*) FROM TV_Channel WHERE UPPER(Language) = 'ENGLISH'
SELECT TV_Channel.Language, COUNT(TV_Channel.id) AS Channel_Count FROM TV_Channel GROUP BY TV_Channel.Language ORDER BY Channel_Count ASC LIMIT 1
SELECT Language, COUNT(*) AS channel_count  FROM TV_Channel  GROUP BY Language  ORDER BY channel_count ASC  LIMIT 1
SELECT Language, COUNT(DISTINCT TV_Channel.id) AS num_channels FROM TV_Channel GROUP BY Language
SELECT Language, COUNT(DISTINCT id) FROM TV_Channel GROUP BY Language
SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T2.Channel = T1.id WHERE T2.Title = 'The Rise of the Blue Beetle!';
SELECT TV_Channel.series_name FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Title = 'The Rise of the Blue Beetle';
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
SELECT TV_series.Episode  FROM TV_series  ORDER BY TV_series.Rating DESC
SELECT TV_series.*, Cartoon.Title FROM TV_series JOIN Cartoon ON TV_series.Channel = Cartoon.Channel ORDER BY TV_series.Rating DESC
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3
SELECT TV_series.Episode, TV_series.Rating FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id ORDER BY TV_series.Rating DESC LIMIT 3
SELECT MIN(Share), MAX(Share) FROM TV_series
SELECT MAX(Share) AS Maximum_Share, MIN(Share) AS Minimum_Share FROM TV_series;
SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = 'A Love of a Lifetime'
SELECT TV_series.Air_Date FROM Cartoon JOIN TV_series ON Cartoon.id = TV_series.id JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'A Love of a Lifetime'
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime"
SELECT The provided tables, columns, foreign keys, and primary keys are not sufficient to generate the SQL query for the given question. To fix the query, we need access to the tables related to the episode and its weekly rank. Please provide the schema links or additional information related to these tables so that I can assist you further.
SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = 'A Love of a Lifetime'
SELECT series_name FROM TV_series WHERE Episode = 'A Love of a Lifetime'
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio'
SELECT TV_series.Episode FROM TV_series  JOIN TV_Channel ON TV_series.Channel = TV_Channel.id  WHERE TV_Channel.series_name = 'Sky Radio'
SELECT Directed_by, COUNT(*)   FROM Cartoon   WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti', 'Michael Chang')   GROUP BY Directed_by
SELECT Directed_by, COUNT(*)  FROM Cartoon  GROUP BY Directed_by
SELECT Cartoon.Production_code, TV_Channel.series_name AS Channel FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id ORDER BY Cartoon.Original_air_date DESC LIMIT 1
SELECT Production_code, Cartoon.Channel FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)
SELECT Package_Option, series_name FROM TV_Channel WHERE High_definition_TV = 1
SELECT Package_Option, series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE Hight_definition_TV = 1
SELECT Country  FROM TV_Channel  JOIN Cartoon ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Written_by = 'Todd Casey';
SELECT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel JOIN TV_series ON Cartoon.id = TV_series.id WHERE Cartoon.Written_by = 'Todd Casey'
SELECT DISTINCT T1.Country  FROM TV_Channel AS T1  LEFT JOIN Cartoon AS T2  ON T1.id = T2.Channel  WHERE T2.Written_by <> 'Todd Casey' OR T2.Written_by IS NULL
SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (     SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey' )
SELECT TV_Channel.series_name, TV_Channel.Country   FROM Cartoon   JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id   WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')
SELECT TV_Channel.series_name, TV_Channel.Country   FROM TV_Channel   JOIN Cartoon ON Cartoon.Channel = TV_Channel.id   WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE language != 'English'
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language IN ('Italian')
SELECT TV_Channel.id  FROM TV_Channel  GROUP BY TV_Channel.Country  HAVING COUNT(*) > 2
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.id HAVING COUNT(*) > 2
SELECT TV_Channel.id FROM TV_Channel LEFT JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by <> 'Ben Jones' OR Cartoon.Directed_by IS NULL
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones' AND Cartoon.Channel IS NOT NULL)
SELECT Package_Option FROM TV_Channel WHERE id NOT IN (   SELECT T1.id   FROM TV_Channel AS T1   LEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel   WHERE T2.Directed_by = 'Ben Jones' )
SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')
SELECT COUNT(DISTINCT Poker_Player_ID) FROM poker_player
SELECT COUNT(DISTINCT People_ID) FROM poker_player
SELECT poker_player.Earnings  FROM poker_player  ORDER BY Earnings DESC
SELECT poker_player.Earnings  FROM poker_player  ORDER BY poker_player.Earnings DESC
SELECT Final_Table_Made, Best_Finish FROM poker_player
SELECT Final_Table_Made, Best_Finish  FROM poker_player
SELECT AVG(Earnings) FROM poker_player
SELECT avg(Earnings) FROM poker_player
SELECT Money_Rank  FROM poker_player  WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)
SELECT poker_player.Money_Rank FROM poker_player ORDER BY poker_player.Earnings DESC LIMIT 1
SELECT MAX(Final_Table_Made)  FROM poker_player  WHERE Earnings < 200000;
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000
SELECT Name FROM people
SELECT Name FROM people
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC
SELECT T1.Name  FROM people AS T1  JOIN poker_player AS T2 ON T2.People_ID = T1.People_ID  ORDER BY T2.Final_Table_Made ASC
SELECT P.Birth_Date FROM people AS P JOIN poker_player AS PP ON P.People_ID = PP.People_ID ORDER BY PP.Earnings ASC LIMIT 1
SELECT people.Birth_Date  FROM poker_player  JOIN people ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Earnings ASC  LIMIT 1
SELECT Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1
SELECT AVG(poker_player.Earnings) AS Average_Earnings FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200
SELECT avg(poker_player.Earnings) FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  WHERE people.Height > 200
SELECT people.Name  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Earnings DESC
SELECT people.Name  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Earnings DESC
SELECT Nationality, COUNT(*)  FROM people  GROUP BY Nationality
SELECT Nationality, COUNT(*)  FROM people  GROUP BY Nationality
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
SELECT Nationality FROM people WHERE Nationality IN (   SELECT Nationality   FROM people   GROUP BY Nationality   HAVING COUNT(*) >= 2 )
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(DISTINCT People_ID) >= 2
SELECT Name, Birth_Date FROM people ORDER BY Name ASC
SELECT Name, Birth_Date FROM people ORDER BY Name ASC
SELECT Name FROM people WHERE Nationality <> 'Russia'
SELECT Name FROM people WHERE Nationality NOT IN ('Russia')
SELECT Name FROM people LEFT JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Poker_Player_ID IS NULL
SELECT Name  FROM people  WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
SELECT COUNT(DISTINCT Nationality) FROM people
SELECT COUNT(DISTINCT Nationality) FROM people
SELECT COUNT(DISTINCT state) AS state_count FROM AREA_CODE_STATE
SELECT contestant_number, contestant_name  FROM CONTESTANTS  ORDER BY contestant_name DESC
SELECT vote_id, phone_number, state FROM VOTES
SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE
SELECT MAX(created) FROM VOTES JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state WHERE VOTES.state = 'CA'
SELECT contestant_name  FROM CONTESTANTS  WHERE contestant_name <> 'Jessie Alloway'
SELECT DISTINCT state, created FROM VOTES
SELECT T1.contestant_number, T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number, T1.contestant_name HAVING COUNT(T2.vote_id) >= 2
SELECT contestant_number, contestant_name  FROM CONTESTANTS  WHERE contestant_number IN (   SELECT contestant_number    FROM VOTES    GROUP BY contestant_number    HAVING COUNT(*) = (     SELECT MIN(vote_count)      FROM (       SELECT contestant_number, COUNT(*) as vote_count        FROM VOTES        GROUP BY contestant_number     ) as vote_counts   ) )
SELECT COUNT(*) FROM VOTES WHERE state IN ('NY', 'CA')
SELECT count(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)
SELECT T2.area_code FROM VOTES AS T1 JOIN AREA_CODE_STATE AS T2 ON T1.state = T2.state GROUP BY T2.area_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT created, state, phone_number  FROM VOTES  JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number  WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling';
SELECT T1.area_code  FROM AREA_CODE_STATE AS T1  JOIN VOTES AS T2 ON T1.state = T2.state  JOIN CONTESTANTS AS T3 ON T2.contestant_number = T3.contestant_number  WHERE T3.contestant_name = 'Tabatha Gehling'  AND T1.area_code IN (     SELECT T1.area_code      FROM AREA_CODE_STATE AS T1      JOIN VOTES AS T2 ON T1.state = T2.state      JOIN CONTESTANTS AS T3 ON T2.contestant_number = T3.contestant_number      WHERE T3.contestant_name = 'Kelly Clauss' )
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'
SELECT country.Name FROM country WHERE country.IndepYear > 1950
SELECT Name FROM country WHERE IndepYear > 1950
SELECT COUNT(*) FROM country WHERE governmentform = 'Republic'
SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%'
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE region = 'Caribbean'
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'
SELECT Continent FROM country WHERE country.Code IN (SELECT CountryCode FROM city WHERE Name = 'Anguilla')
SELECT Continent FROM country WHERE Code = (SELECT CountryCode FROM city WHERE Name = 'Anguilla')
SELECT country.Region FROM country JOIN city ON city.CountryCode = country.Code WHERE city.Name = 'Kabul'
SELECT country.Region FROM country JOIN city ON city.CountryCode = country.Code WHERE city.Name = 'Kabul'
SELECT countrylanguage.Language  FROM countrylanguage  JOIN city ON city.CountryCode = countrylanguage.CountryCode  JOIN country ON country.Code = city.CountryCode  WHERE city.Name = 'Aruba'  GROUP BY countrylanguage.Language  ORDER BY SUM(countrylanguage.Percentage) DESC  LIMIT 1
SELECT T1.Language FROM countrylanguage AS T1 JOIN city AS T2 ON T2.CountryCode = T1.CountryCode JOIN country AS T3 ON T3.Code = T2.CountryCode WHERE T2.Name = 'Aruba' GROUP BY T1.Language ORDER BY T1.Percentage DESC LIMIT 1
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'
SELECT country.Population, country.LifeExpectancy FROM country WHERE country.Name = 'Brazil'
SELECT Region, Population FROM country WHERE Name = 'Angola'
SELECT Region, Population FROM country WHERE Name = 'Angola'
SELECT AVG(LifeExpectancy) FROM country WHERE region = 'Central Africa'
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND Region = 'Central Africa'
SELECT c.Name  FROM country c  WHERE c.Continent = 'Asia'  ORDER BY c.LifeExpectancy ASC  LIMIT 1
SELECT Name FROM country WHERE Continent = 'Asia' AND LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia')
SELECT sum(population) AS total_population, max(GNP) AS maximum_GNP   FROM country   WHERE Continent = 'Asia'
SELECT SUM(country.Population) AS TotalPopulation, MAX(country.GNP) AS LargestGNP FROM country WHERE country.Continent = 'Asia'
SELECT AVG(country.LifeExpectancy)  FROM country  JOIN city ON country.Code = city.CountryCode  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.Continent = 'Africa'  AND country.GovernmentForm LIKE '%Republic%'
SELECT avg(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe')
SELECT SUM(SurfaceArea) AS TotalSurfaceArea  FROM country  WHERE continent IN ('Asia', 'Europe')
SELECT SUM(Population) AS TotalPopulation FROM city WHERE District = 'Gelderland'
SELECT SUM(Population) AS TotalPopulation FROM city WHERE District = 'Gelderland'
SELECT AVG(country.GNP), SUM(country.Population) FROM country JOIN city ON country.Code = city.CountryCode JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.GovernmentForm LIKE '%US Territory%'
SELECT avg(GNP) AS Mean_GNP, sum(Population) AS Total_Population   FROM country   WHERE Region IN ('Caribbean', 'Southern and Central Asia', 'Central Africa', 'Southern Europe', 'Middle East', 'South America', 'Polynesia', 'Antarctica', 'Australia and New Zealand', 'Western Europe')   AND Continent = 'US'
SELECT COUNT(DISTINCT Language) FROM countrylanguage
SELECT COUNT(DISTINCT Language) FROM countrylanguage
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE continent = 'Africa'
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE continent = 'Africa'
SELECT COUNT(DISTINCT countrylanguage.Language) AS TotalLanguages  FROM country  JOIN city ON country.Code = city.CountryCode  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE city.Name = 'Aruba'
SELECT COUNT(DISTINCT T3.Language) FROM city AS T2 JOIN country AS T1 ON T2.CountryCode = T1.Code JOIN countrylanguage AS T3 ON T3.CountryCode = T1.Code WHERE T2.Name = 'Aruba'
SELECT COUNT(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = 'Afghanistan' AND countrylanguage.IsOfficial = 'T' AND countrylanguage.IsOfficial = 'T'
SELECT COUNT(DISTINCT Language) FROM countrylanguage   JOIN country ON countrylanguage.CountryCode = country.Code   WHERE country.Name = 'Afghanistan'   AND countrylanguage.IsOfficial = 'T'
SELECT T1.Name FROM country AS T1 JOIN (     SELECT CountryCode, COUNT(*) AS lang_count     FROM countrylanguage     GROUP BY CountryCode ) AS T2 ON T1.Code = T2.CountryCode ORDER BY T2.lang_count DESC LIMIT 1
SELECT C.Name FROM country AS C JOIN countrylanguage AS CL ON C.Code = CL.CountryCode GROUP BY C.Name ORDER BY COUNT(DISTINCT CL.Language) DESC LIMIT 1
SELECT T1.Continent, COUNT(DISTINCT T2.Language) AS LanguageCount FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY LanguageCount DESC LIMIT 1
SELECT country.Continent, COUNT(DISTINCT countrylanguage.Language) AS language_count FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Continent ORDER BY language_count DESC LIMIT 1
SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language IN ('English', 'Dutch') GROUP BY CountryCode HAVING COUNT(DISTINCT Language) = 2
SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language IN ('English', 'Dutch')
SELECT Name FROM country WHERE Code IN (   SELECT CountryCode FROM countrylanguage WHERE Language IN ('English', 'French') )
SELECT Name FROM country WHERE Code IN (   SELECT CountryCode FROM countrylanguage WHERE Language = 'English' ) INTERSECT SELECT Name FROM country WHERE Code IN (   SELECT CountryCode FROM countrylanguage WHERE Language = 'French' )
SELECT Name FROM country WHERE Code IN (     SELECT CountryCode     FROM countrylanguage     WHERE Language IN ('English', 'French')     AND IsOfficial = 'T'     GROUP BY CountryCode     HAVING COUNT(DISTINCT Language) = 2 )
SELECT country.Name  FROM countrylanguage  JOIN country ON country.Code = countrylanguage.CountryCode  WHERE (countrylanguage.Language IN ('English', 'French') AND countrylanguage.IsOfficial = 'T') GROUP BY country.Name
SELECT COUNT(DISTINCT T1.Continent) AS NumDistinctContinents FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese'
SELECT COUNT(DISTINCT country.Continent) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 1
SELECT country.Region FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'Dutch')
SELECT DISTINCT C.Region FROM country AS C JOIN countrylanguage AS CL ON C.Code = CL.CountryCode WHERE CL.Language IN ('Dutch', 'English')
SELECT Name  FROM country  WHERE Code IN (     SELECT CountryCode      FROM countrylanguage      WHERE Language IN ('English', 'Dutch')      AND IsOfficial = 'T' )
SELECT country.Name FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch')  AND countrylanguage.IsOfficial = 'T'
SELECT countrylanguage.Language   FROM countrylanguage   JOIN country ON country.Code = countrylanguage.CountryCode   WHERE country.Continent = 'Asia'   GROUP BY countrylanguage.Language   ORDER BY SUM(countrylanguage.Percentage) DESC   LIMIT 1
SELECT cl.Language FROM countrylanguage AS cl JOIN country AS c ON c.Code = cl.CountryCode WHERE c.Continent = 'Asia' GROUP BY cl.Language HAVING COUNT(*) = (   SELECT MAX(lang_count)   FROM (     SELECT COUNT(*) AS lang_count     FROM countrylanguage AS cl     JOIN country AS c ON c.Code = cl.CountryCode     WHERE c.Continent = 'Asia'     GROUP BY cl.Language   ) )
SELECT T1.Language  FROM countrylanguage AS T1  JOIN country AS T2 ON T1.CountryCode = T2.Code  WHERE T2.GovernmentForm = 'Republic'  GROUP BY T1.Language  HAVING COUNT(T1.Language) = 1
SELECT Language FROM countrylanguage AS CL  JOIN country AS C ON CL.CountryCode = C.Code  WHERE C.GovernmentForm = 'Republic'  GROUP BY Language  HAVING COUNT(DISTINCT C.Code) = 1
SELECT city.Name   FROM city   JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode   JOIN country ON city.CountryCode = country.Code   WHERE countrylanguage.Language = 'English'   GROUP BY city.Name   HAVING MAX(city.Population)   LIMIT 1
SELECT city.Name, MAX(city.Population) AS Population  FROM city  JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode  JOIN country ON city.CountryCode = country.Code  WHERE countrylanguage.Language = 'English'  AND countrylanguage.IsOfficial = 1  GROUP BY city.Name  ORDER BY Population DESC  LIMIT 1
SELECT Name, Population, LifeExpectancy  FROM country  WHERE Continent = 'Asia'  ORDER BY SurfaceArea DESC  LIMIT 1
SELECT country.Name, country.Population, country.LifeExpectancy  FROM country  WHERE country.Continent = 'Asia'  ORDER BY country.SurfaceArea DESC  LIMIT 1
SELECT avg(LifeExpectancy)   FROM country   WHERE Code NOT IN (   SELECT CountryCode     FROM countrylanguage     WHERE Language <> 'English'     AND IsOfficial = 'T' )
SELECT AVG(LifeExpectancy) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language <> 'English' AND countrylanguage.IsOfficial = 'F'
SELECT SUM(Population) AS TotalPopulation  FROM country  WHERE Code NOT IN (   SELECT CountryCode    FROM countrylanguage    WHERE LOWER(Language) <> 'english' )
SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != 'English')
SELECT countrylanguage.Language  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.HeadOfState = 'Beatrix'  AND countrylanguage.IsOfficial = 'T'
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Beatrix' AND T2.IsOfficial = 'T'
SELECT COUNT(DISTINCT countrylanguage.Language)  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.IndepYear < 1930  AND countrylanguage.IsOfficial = 'T'
SELECT count(DISTINCT countrylanguage.Language) AS TotalDistinctLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 1930
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')
SELECT Name  FROM country  WHERE Continent = 'Africa'  AND Population < (   SELECT MIN(Population)    FROM country    WHERE Continent = 'Asia' )
SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')
SELECT Name  FROM country  WHERE Population > (   SELECT MAX(Population)    FROM country    WHERE Continent = 'Africa' )  AND Continent = 'Asia'
SELECT country.Name FROM country WHERE country.Continent = 'Asia' AND country.Population > (     SELECT MAX(c.Population)     FROM country c     WHERE c.Continent = 'Africa' )
SELECT Code FROM country WHERE Code NOT IN (SELECT DISTINCT CountryCode FROM countrylanguage WHERE LOWER(Language) <> 'english')
SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language != 'English')
SELECT DISTINCT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language <> 'English'
SELECT Code FROM country WHERE Code IN (   SELECT CountryCode FROM countrylanguage WHERE Language <> 'English' )
SELECT Code FROM country WHERE Code NOT IN (     SELECT CountryCode     FROM countrylanguage     WHERE Language IN ('Dutch', 'Papiamento', 'Spanish', 'Balochi', 'Dari', 'Pashto', 'Turkmenian', 'Uzbek', 'Ambo') ) AND GovernmentForm NOT LIKE '%Republic%'
SELECT Code FROM country WHERE Code NOT IN (     SELECT CountryCode     FROM countrylanguage     WHERE Language = 'English' ) AND GovernmentForm NOT LIKE '%Republic%'
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Europe' AND countrylanguage.Language <> 'English' AND countrylanguage.IsOfficial = 'F'
SELECT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.Continent = 'Europe'  AND countrylanguage.Language <> 'English'  AND countrylanguage.IsOfficial = 'F'
SELECT DISTINCT city.Name  FROM city  JOIN country ON country.Code = city.CountryCode  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.Continent = 'Asia'  AND countrylanguage.Language = 'Chinese'  AND countrylanguage.IsOfficial = 1
SELECT DISTINCT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode  WHERE country.Continent = 'Asia'  AND countrylanguage.Language = 'Chinese'  AND countrylanguage.IsOfficial = 'T'
SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1
SELECT country.Name, country.IndepYear, country.SurfaceArea  FROM country  WHERE country.Population = (   SELECT MIN(country.Population)    FROM country )
SELECT Population, Name, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);
SELECT Name, Population, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)
SELECT SELECT country.Name, COUNT(countrylanguage.Language) AS LanguageCount FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING LanguageCount >= 3;
SELECT T1.Name, COUNT(DISTINCT T2.Language)  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  GROUP BY T1.Name  HAVING COUNT(DISTINCT T2.Language) > 2
SELECT district, COUNT(*)  FROM city  WHERE population > (SELECT AVG(population) FROM city)  GROUP BY district
SELECT country.Code, city.District, COUNT(city.Name) FROM city JOIN country ON city.CountryCode = country.Code GROUP BY city.District HAVING city.Population > (SELECT AVG(city.Population) FROM city)
SELECT GovernmentForm, SUM(Population) AS TotalPopulation  FROM country  GROUP BY GovernmentForm  HAVING AVG(LifeExpectancy) > 72;
SELECT GovernmentForm, SUM(Population)  FROM country  GROUP BY GovernmentForm  HAVING AVG(LifeExpectancy) > 72;
SELECT continent, AVG(LifeExpectancy) AS AverageLifeExpectancy, SUM(Population) AS TotalPopulation FROM country GROUP BY continent HAVING AVG(LifeExpectancy) < 72
SELECT country.continent, SUM(country.population), AVG(country.lifeexpectancy) FROM country GROUP BY country.continent HAVING AVG(country.lifeexpectancy) < 72
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
SELECT country.Name FROM country ORDER BY country.Population DESC LIMIT 3
SELECT Name  FROM country  ORDER BY Population DESC  LIMIT 3
SELECT Name FROM country ORDER BY Population ASC LIMIT 3
SELECT Name FROM country ORDER BY Population ASC LIMIT 3
SELECT COUNT(DISTINCT Code) FROM country WHERE continent = 'Asia'
SELECT COUNT(*) FROM country WHERE continent = 'Asia'
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000
SELECT country.Name  FROM country  WHERE country.Continent = 'Europe'  AND country.Population = 80000;
SELECT sum(Population) AS TotalPopulation, avg(SurfaceArea) AS AverageArea  FROM country  WHERE Continent = 'North America' AND SurfaceArea > 3000;
SELECT sum(country.Population) AS total_population, avg(country.SurfaceArea) AS average_surface_area  FROM country  WHERE country.Continent = 'North America'  AND country.SurfaceArea > 3000;
SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000
SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000
SELECT Language  FROM countrylanguage  GROUP BY Language  HAVING COUNT(*) = (     SELECT MAX(language_count)      FROM (         SELECT COUNT(*) AS language_count          FROM countrylanguage          GROUP BY Language     ) AS counts ) ORDER BY language_count DESC LIMIT 1
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1
SELECT T2.Name, T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Percentage = (     SELECT MAX(cl.Percentage)     FROM countrylanguage AS cl     WHERE cl.CountryCode = T2.Code ) GROUP BY T2.Name
SELECT T1.Code, T2.Language  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  GROUP BY T1.Code  HAVING T2.Percentage = (SELECT MAX(Percentage)                          FROM countrylanguage                          WHERE CountryCode = T1.Code)
SELECT COUNT(DISTINCT country.Code) AS TotalCountries FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Spanish' AND countrylanguage.Percentage = (     SELECT MAX(Percentage)     FROM countrylanguage     WHERE Language = 'Spanish' )
SELECT COUNT(DISTINCT T1.Code)  FROM country AS T1   JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode   WHERE T2.Language = 'Spanish' AND UPPER(T2.IsOfficial) = 'T'
SELECT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Spanish' GROUP BY country.Code HAVING MAX(countrylanguage.Percentage) ORDER BY countrylanguage.Percentage DESC LIMIT 1
SELECT country.Code  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  WHERE countrylanguage.Language = 'Spanish' AND countrylanguage.Percentage > 50
SELECT COUNT(Conductor_ID) FROM conductor
SELECT COUNT(DISTINCT Conductor_ID) FROM conductor
SELECT Name FROM conductor ORDER BY Age ASC
SELECT Name FROM conductor ORDER BY Age ASC
SELECT Name FROM conductor WHERE Nationality NOT IN ('USA')
SELECT Name  FROM conductor  WHERE Nationality <> 'USA'
SELECT orchestra.Record_Company  FROM orchestra  ORDER BY orchestra.Year_of_Founded DESC
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
SELECT AVG(Attendance) FROM show
SELECT AVG(Attendance) AS Average_Attendance FROM show
SELECT MAX(Share) AS Maximum_Share, MIN(Share) AS Minimum_Share FROM performance WHERE Type <> 'Live final';
SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share   FROM performance   WHERE Type != 'Live final'
SELECT COUNT(DISTINCT Nationality) AS Total_Nationalities FROM conductor
SELECT COUNT(DISTINCT Nationality) AS Num_Nationalities FROM conductor
SELECT conductor.Name  FROM conductor  ORDER BY conductor.Year_of_Work DESC
SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
SELECT Name, COUNT(Year_of_Work) AS WorkYears FROM conductor GROUP BY Name ORDER BY WorkYears DESC LIMIT 1
SELECT Name, Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID
SELECT T1.Name, T2.Orchestra  FROM conductor AS T1  JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID
SELECT SELECT conductor.Name FROM conductor INNER JOIN orchestra ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Name HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1;
SELECT Name FROM conductor GROUP BY Name HAVING COUNT(DISTINCT Orchestra_ID) > 1
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Name ORDER BY COUNT(T2.Orchestra_ID) DESC LIMIT 1
SELECT Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY COUNT(orchestra.Orchestra_ID) DESC LIMIT 1
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008;
SELECT Name FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS num_orchestras FROM orchestra GROUP BY Record_Company
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS num_orchestras FROM orchestra GROUP BY Record_Company
SELECT Major_Record_Format, COUNT(*) AS count  FROM orchestra  GROUP BY Major_Record_Format  ORDER BY count ASC
SELECT Major_Record_Format, COUNT(*) as Frequency  FROM orchestra  WHERE Major_Record_Format IS NOT NULL GROUP BY Major_Record_Format  ORDER BY Frequency DESC
SELECT Record_Company, COUNT(*) AS Num_Orchestras FROM orchestra GROUP BY Record_Company ORDER BY Num_Orchestras DESC LIMIT 1
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS Orchestra_Count FROM orchestra GROUP BY Record_Company HAVING COUNT(DISTINCT Orchestra_ID) = (     SELECT MAX(Orchestra_Count)     FROM (         SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS Orchestra_Count         FROM orchestra         GROUP BY Record_Company     ) AS counts )
SELECT Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003
SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded > 2003
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')
SELECT DISTINCT Year_of_Founded FROM orchestra JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID GROUP BY Year_of_Founded HAVING COUNT(DISTINCT performance.Performance_ID) > 1
SELECT Year_of_Founded FROM orchestra  WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance                         GROUP BY Orchestra_ID                         HAVING COUNT(*) > 1)
SELECT COUNT(ID) FROM Highschooler
SELECT COUNT(*) FROM Highschooler
SELECT name, grade  FROM Highschooler
SELECT name, grade FROM Highschooler
SELECT grade FROM Highschooler
SELECT grade FROM Highschooler
SELECT grade FROM Highschooler WHERE name = 'Kyle'
SELECT grade FROM Highschooler WHERE name = 'Kyle'
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10
SELECT name FROM Highschooler WHERE grade = 10
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.name = 'Kyle'
SELECT Highschooler.ID FROM Highschooler WHERE name = 'Kyle'
SELECT COUNT(DISTINCT ID) FROM Highschooler WHERE grade IN (9, 10)
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade
SELECT grade, COUNT(DISTINCT ID) FROM Highschooler GROUP BY grade
SELECT grade, COUNT(*) AS count  FROM Highschooler  GROUP BY grade  ORDER BY count DESC  LIMIT 1
SELECT grade, COUNT(*) as count FROM Highschooler GROUP BY grade ORDER BY count DESC LIMIT 1
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4
SELECT T1.ID, COUNT(DISTINCT T2.friend_id)  FROM Highschooler AS T1  JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.ID
SELECT Highschooler.ID, COUNT(Friend.friend_id) AS friend_count FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID
SELECT T1.name, COUNT(DISTINCT T2.friend_id)  FROM Highschooler AS T1  JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.name
SELECT T1.name, COUNT(T2.friend_id)  FROM Highschooler AS T1  LEFT JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.name
SELECT T1.name  FROM Highschooler AS T1  JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.ID  ORDER BY COUNT(T2.friend_id) DESC  LIMIT 1
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID ORDER BY COUNT(DISTINCT T2.friend_id) DESC LIMIT 1
SELECT T1.name  FROM Highschooler AS T1  WHERE T1.ID IN (SELECT friend_id                  FROM Friend                  GROUP BY friend_id                  HAVING COUNT(student_id) >= 3)
SELECT Highschooler.name  FROM Highschooler  JOIN Friend ON Highschooler.ID = Friend.student_id  GROUP BY Highschooler.ID, Highschooler.name  HAVING COUNT(Friend.friend_id) >= 3
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id JOIN Highschooler AS T3 ON T2.student_id = T3.ID WHERE T3.name = 'Kyle'
SELECT H2.name FROM Highschooler AS H1 JOIN Friend AS F ON H1.ID = F.friend_id JOIN Highschooler AS H2 ON F.student_id = H2.ID WHERE H1.name = 'Kyle';
SELECT COUNT(*) FROM Friend   JOIN Highschooler ON Friend.friend_id = Highschooler.ID   WHERE Highschooler.name = 'Kyle'   AND Friend.student_id = Highschooler.ID
SELECT count(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT Highschooler.ID FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.student_id IS NULL GROUP BY Highschooler.ID
SELECT Highschooler.ID  FROM Highschooler  LEFT JOIN Friend ON Highschooler.ID = Friend.student_id  WHERE Friend.friend_id IS NULL
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT Highschooler.name  FROM Highschooler  WHERE Highschooler.ID NOT IN (     SELECT Friend.student_id      FROM Friend )
SELECT DISTINCT HS.ID  FROM Highschooler AS HS  JOIN Friend AS F ON HS.ID = F.student_id  JOIN Likes AS L ON HS.ID = L.student_id  WHERE HS.ID IN (SELECT friend_id FROM Friend)  AND HS.ID IN (SELECT liked_id FROM Likes)
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.ID IN (SELECT Friend.student_id FROM Friend) AND Highschooler.ID IN (SELECT Likes.student_id FROM Likes)
SELECT name FROM Highschooler WHERE ID IN (   SELECT student_id   FROM Friend ) AND ID IN (   SELECT liked_id   FROM Likes )
SELECT DISTINCT H1.name  FROM Highschooler AS H1  JOIN Friend AS F1 ON H1.ID = F1.student_id  JOIN Likes AS L1 ON H1.ID = L1.student_id  JOIN Likes AS L2 ON H1.ID = L2.liked_id
SELECT Highschooler.ID, COUNT(Likes.*) AS like_count  FROM Highschooler  LEFT JOIN Likes ON Highschooler.ID = Likes.student_id  GROUP BY Highschooler.ID
SELECT student_id, COUNT(*) AS num_likes FROM Likes GROUP BY student_id
SELECT Highschooler.name, COUNT(Likes.student_id) AS num_likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name
SELECT T1.name, COUNT(T2.liked_id)  FROM Highschooler AS T1  JOIN Likes AS T2 ON T1.ID = T2.student_id  GROUP BY T1.ID, T1.name
SELECT T1.name FROM Highschooler AS T1 ORDER BY (SELECT COUNT(*) FROM Likes WHERE Likes.student_id = T1.ID) DESC LIMIT 1
SELECT T1.name  FROM Highschooler AS T1  WHERE T1.ID = (   SELECT T2.student_id    FROM Likes AS T2    GROUP BY T2.student_id    ORDER BY count(*) DESC    LIMIT 1 )
SELECT T1.name FROM Highschooler AS T1 JOIN Likes ON Likes.student_id = T1.ID GROUP BY T1.ID HAVING COUNT(Likes.liked_id) >= 2
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name HAVING count(*) >= 2
SELECT Highschooler.name  FROM Highschooler  JOIN Friend ON Highschooler.ID = Friend.student_id  GROUP BY Highschooler.ID  HAVING Highschooler.grade > 5 AND COUNT(DISTINCT Friend.friend_id) >= 2
SELECT name FROM Highschooler WHERE grade > 5   AND ID IN (     SELECT student_id     FROM Friend     GROUP BY student_id     HAVING count(*) >= 2   )
SELECT COUNT(*) AS like_count FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID WHERE Highschooler.name = 'Kyle'
SELECT COUNT(*) FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID WHERE Highschooler.name = 'Kyle'
SELECT AVG(T1.grade)  FROM Highschooler AS T1  WHERE T1.ID IN (     SELECT DISTINCT T2.student_id      FROM Friend AS T2 )
SELECT AVG(grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id
SELECT MIN(grade) AS minimum_grade FROM Highschooler WHERE ID NOT IN (     SELECT student_id     FROM Friend )
SELECT min(grade)  FROM Highschooler  WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT state FROM Owners WHERE state IN (     SELECT state     FROM Professionals )
SELECT state  FROM Owners  WHERE state IN (     SELECT state      FROM Professionals )
SELECT AVG(Dogs.age) AS average_age FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
SELECT avg(age) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (     SELECT professional_id     FROM Treatments     GROUP BY professional_id     HAVING COUNT(*) > 2 )
SELECT professional_id, last_name, cell_number   FROM Professionals   WHERE state IN ('Indiana', 'Connecticut', 'Wisconsin', 'Mississippi', 'Hawaii', 'NewMexico', 'NorthCarolina', 'SouthCarolina', 'California', 'Alabama')     OR professional_id IN (       SELECT professional_id         FROM Treatments         GROUP BY professional_id         HAVING COUNT(*) > 2    )
SELECT Dogs.name FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.name HAVING COALESCE(SUM(Treatments.cost_of_treatment), 0) <= 1000
SELECT D.name FROM Dogs AS D LEFT JOIN Treatments AS T ON D.dog_id = T.dog_id LEFT JOIN Owners AS O ON D.owner_id = O.owner_id GROUP BY D.dog_id, D.name HAVING COALESCE(SUM(T.cost_of_treatment), 0) <= 1000
SELECT Owners.first_name, Professionals.first_name FROM Owners LEFT JOIN Dogs ON Owners.first_name = Dogs.name LEFT JOIN Professionals ON Owners.first_name = Professionals.first_name WHERE Dogs.name IS NULL
SELECT first_name FROM (   SELECT first_name   FROM Owners   UNION   SELECT first_name   FROM Professionals ) AS all_names WHERE first_name NOT IN (   SELECT DISTINCT name   FROM Dogs )
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id GROUP BY Owners.owner_id ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1
SELECT professional_id, role_code, first_name FROM Professionals GROUP BY professional_id, role_code, first_name HAVING COUNT(*) >= 2
SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (     SELECT professional_id     FROM Treatments     GROUP BY professional_id     HAVING COUNT(*) >= 2 )
SELECT breed_name FROM Breeds WHERE breed_code IN (     SELECT breed_code     FROM Dogs     GROUP BY breed_code     HAVING count(*) = (         SELECT max(dog_count)         FROM (             SELECT breed_code, count(*) AS dog_count             FROM Dogs             GROUP BY breed_code         ) AS dog_counts     ) )
SELECT breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY Breeds.breed_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id ORDER BY COUNT(Treatments.treatment_id) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id JOIN Treatments ON Treatments.dog_id = Dogs.dog_id JOIN Charges ON Charges.charge_id = Treatments.charge_id GROUP BY Owners.owner_id, Owners.last_name ORDER BY SUM(Charges.charge_amount) DESC LIMIT 1;
SELECT Treatment_Types.treatment_type_description  FROM Treatment_Types  JOIN Treatments ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code  GROUP BY Treatment_Types.treatment_type_code  ORDER BY SUM(Treatments.cost_of_treatment) ASC  LIMIT 1
SELECT T1.treatment_type_description  FROM Treatment_Types AS T1  JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code  GROUP BY T1.treatment_type_description  ORDER BY SUM(T2.cost_of_treatment) ASC  LIMIT 1
SELECT Owners.owner_id, Owners.zip_code  FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Charges ON Dogs.charge_id = Charges.charge_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Charges.charge_amount) DESC LIMIT 1
SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id JOIN Professionals AS T4 ON T3.professional_id = T4.professional_id GROUP BY T1.owner_id, T1.zip_code ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1;
SELECT T1.professional_id, T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(DISTINCT T2.treatment_type_code) >= 2
SELECT T1.professional_id, T1.cell_number  FROM Professionals AS T1  JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T1.professional_id  HAVING COUNT(DISTINCT T2.treatment_type_code) >= 2.
SELECT first_name, last_name FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   WHERE cost_of_treatment < (     SELECT AVG(cost_of_treatment)     FROM Treatments   ) )
SELECT first_name, last_name FROM Professionals WHERE professional_id IN (     SELECT professional_id     FROM Treatments     WHERE cost_of_treatment < (         SELECT AVG(cost_of_treatment)         FROM Treatments     ) )
SELECT Treatments.date_of_treatment, Professionals.first_name  FROM Treatments  JOIN Professionals ON Treatments.professional_id = Professionals.professional_id
SELECT date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id
SELECT T1.cost_of_treatment, T2.treatment_type_description FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT first_name, last_name, size_description FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code
SELECT T1.first_name, T1.last_name, T4.size_description FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Sizes AS T4 ON T2.size_code = T4.size_code;
SELECT Owners.first_name, Dogs.name  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT T1.first_name, T2.name  FROM Owners AS T1  JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id
SELECT D.name, T.date_of_treatment FROM Dogs AS D JOIN Breeds AS B ON D.breed_code = B.breed_code JOIN Treatments AS T ON T.dog_id = D.dog_id WHERE B.breed_code = (     SELECT breed_code     FROM Breeds     GROUP BY breed_code     ORDER BY COUNT(*) ASC     LIMIT 1 )
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Breeds ON Dogs.breed_code = Breeds.breed_code WHERE Breeds.breed_name IN ('Eskimo', 'Husky', 'Bulldog');
SELECT Owners.first_name, Dogs.name  FROM Dogs   JOIN Owners ON Dogs.owner_id = Owners.owner_id   WHERE Owners.state = 'Virginia'
SELECT T1.first_name, T2.name   FROM Owners AS T1   JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id   WHERE T1.state = 'Virginia'
SELECT date_arrived, date_departed  FROM Dogs  JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
SELECT date_arrived, date_departed FROM Dogs JOIN Treatments ON Treatments.dog_id = Dogs.dog_id
SELECT last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY age LIMIT 1
SELECT last_name FROM Owners WHERE owner_id = (   SELECT owner_id   FROM Dogs   WHERE date_of_birth = (     SELECT MIN(date_of_birth)     FROM Dogs   ) ) LIMIT 1;
SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin')
SELECT email_address  FROM Professionals  WHERE state IN ('Hawaii', 'Wisconsin')
SELECT date_arrived, date_departed  FROM Dogs
SELECT date_arrived, date_departed  FROM Dogs
SELECT COUNT(DISTINCT T2.dog_id) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id
SELECT COUNT(DISTINCT Treatments.dog_id) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
SELECT COUNT(DISTINCT T1.professional_id) FROM Professionals AS T1 JOIN Treatments AS T2 ON T2.professional_id = T1.professional_id
SELECT count(DISTINCT Professionals.professional_id) AS num_professionals FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id;
SELECT role_code, street, city, state  FROM Professionals  WHERE city LIKE '%West%'
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'
SELECT COUNT(*)  FROM Dogs  WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(dog_id) AS dog_count FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
SELECT Treatments.cost_of_treatment  FROM Treatments  ORDER BY Treatments.date_of_treatment DESC  LIMIT 1
SELECT COUNT(Dogs.dog_id) FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.dog_id IS NULL
SELECT COUNT(DISTINCT Dogs.dog_id) FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.dog_id IS NULL
SELECT COUNT(owner_id) AS owner_count FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs)
SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs WHERE abandoned_yn = 'N' AND date_departed IS NULL)
SELECT count(T1.professional_id) FROM Professionals AS T1 LEFT JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.professional_id IS NULL GROUP BY T1.professional_id
SELECT COUNT(professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1
SELECT AVG(age) FROM Dogs
SELECT AVG(age) FROM Dogs
SELECT MAX(age) AS oldest_age FROM Dogs
SELECT MAX(age) AS oldest_age FROM Dogs
SELECT charge_type, charge_amount FROM Charges
SELECT charge_type, charge_amount FROM Charges
SELECT charge_type, MAX(charge_amount) FROM Charges
SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1
SELECT email_address, cell_number, home_phone FROM Professionals
SELECT email_address, cell_number, home_phone  FROM Professionals
SELECT Breeds.breed_name, Sizes.size_description  FROM Breeds  JOIN Dogs ON Dogs.breed_code = Breeds.breed_code  JOIN Sizes ON Dogs.size_code = Sizes.size_code GROUP BY Breeds.breed_name, Sizes.size_description
SELECT SELECT DISTINCT Dogs.breed_code, Dogs.size_code FROM Dogs
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Treatments.professional_id = Professionals.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
SELECT professionals.first_name, treatment_types.treatment_type_description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT COUNT(*) FROM singer
SELECT COUNT(*) FROM singer
SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions ASC
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
SELECT Birth_Year, Citizenship FROM singer
SELECT Birth_Year, Citizenship FROM singer
SELECT Name FROM singer WHERE Citizenship <> 'France'
SELECT Name FROM singer WHERE Citizenship NOT IN ('France')
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949
SELECT Name  FROM singer  WHERE Birth_Year = 1948 OR Birth_Year = 1949
SELECT singer.Name  FROM singer  ORDER BY singer.Net_Worth_Millions DESC  LIMIT 1
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship
SELECT Citizenship, COUNT(DISTINCT Singer_ID) FROM singer GROUP BY Citizenship
SELECT Citizenship, COUNT(*) AS Count  FROM singer  GROUP BY Citizenship  ORDER BY Count DESC  LIMIT 1
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1
SELECT Citizenship, MAX(Net_Worth_Millions)  FROM singer  GROUP BY Citizenship
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID
SELECT Title, Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID
SELECT DISTINCT T1.Name  FROM singer AS T1  JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  WHERE T2.Sales > 300000
SELECT Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Sales > 300000
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1
SELECT T1.Name, SUM(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name
SELECT T1.Name, SUM(T2.Sales)  FROM singer AS T1  JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Name
SELECT Name  FROM singer  WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song)
SELECT DISTINCT Citizenship  FROM singer  WHERE Birth_Year < 1945 OR Birth_Year > 1955
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955
SELECT COUNT(*) AS total_available_features FROM Other_Available_Features
SELECT Ref_Feature_Types.feature_type_name FROM Ref_Feature_Types JOIN Other_Available_Features ON Ref_Feature_Types.feature_type_code = Other_Available_Features.feature_type_code WHERE Other_Available_Features.feature_name = 'AirCon'
SELECT property_type_description  FROM Ref_Property_Types  WHERE property_type_code = 'code'
SELECT property_name FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code WHERE (Ref_Property_Types.property_type_description = 'House' OR Ref_Property_Types.property_type_description = 'Apartment') AND room_count > 1
