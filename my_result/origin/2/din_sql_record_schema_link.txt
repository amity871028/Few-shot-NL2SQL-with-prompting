[COUNT(singer.Singer_ID)]
[singer.*]
[singer.Name, singer.Country, singer.Age, ORDER BY singer.Age DESC]
[singer.Name, singer.Country, singer.Age]
[singer.Age, singer.Country, 'France']
[singer.Age, singer.Country, 'French']
[singer.Song_Name, singer.Song_release_year, singer.Age]
[singer.Song_Name, singer.Song_release_year, singer.Age]
[singer.Country,singer.Age,20]
[singer.Country, singer.Age, 20]
[singer.Country, COUNT(singer.Singer_ID)]
[COUNT(singer.Singer_ID),singer.Country]
[singer.Song_Name,singer.Age,average age]
[singer.Song_Name, singer.Age, average]
[stadium.Location, stadium.Name, stadium.Capacity, 5000, 10000]
[stadium.Location, stadium.Name, stadium.Capacity]
[stadium.Capacity, stadium.Average]
[stadium.Capacity, stadium.Highest]
[stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average]
[stadium.Name, stadium.Capacity, stadium.Highest, stadium.Average]
[concert.*, concert.Year, 2014, 2015]
[concert.*, concert.Year, 2014, 2015]
[stadium.Name, concert.Stadium_ID = stadium.Stadium_ID, concert.*]
[stadium.Stadium_ID, concert.concert_ID, concert.Stadium_ID = stadium.Stadium_ID]
[stadium.Name, stadium.Capacity, concert.concert_ID, concert.Year, concert.Stadium_ID = stadium.Stadium_ID, 2014]
[stadium.Name, stadium.Capacity, concert.Year, concert.Stadium_ID = stadium.Stadium_ID, 2013]
[concert.Year, concert.concert_ID]
[concert.Year]
[stadium.Name, concert.Stadium_ID = stadium.Stadium_ID]
[stadium.Name, concert.Stadium_ID]
[singer.Country, singer.Age, 40, 30]
[stadium.Name,concert.Stadium_ID = stadium.Stadium_ID,concert.Year,2014]
[stadium.Name,concert.Year,concert.Stadium_ID = stadium.Stadium_ID,2014]
[concert.concert_Name, concert.Theme, singer_in_concert.concert_ID]
[concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID)]
[singer.Name, COUNT(singer_in_concert.Singer_ID)]
[singer.Name, singer_in_concert.*, COUNT(singer_in_concert.concert_ID)]
[singer.Name, singer_in_concert.concert_ID, concert.Year, singer_in_concert.Singer_ID = singer.Singer_ID, singer_in_concert.concert_ID = concert.concert_ID, 2014]
[singer.Name,singer_in_concert.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID,concert.Year,2014]
[singer.Name, singer.Country, singer.Song_Name, 'Hey']
[singer.Name, singer.Country, singer.Song_Name, 'Hey']
[stadium.Name, stadium.Location, concert.Year, concert.Stadium_ID = stadium.Stadium_ID, 2014, 2015]
[stadium.Name, stadium.Location, concert.Stadium_ID = stadium.Stadium_ID, concert.Year, 2014, 2015]
[concert.concert_ID,concert.Stadium_ID = stadium.Stadium_ID,stadium.Capacity]
[COUNT(concert.concert_ID),stadium.Capacity,concert.Stadium_ID = stadium.Stadium_ID]
[COUNT(Pets.PetID),Pets.weight,10]
[Pets.weight, 10]
[Pets.weight, Pets.pet_age, Pets.PetType = 'dog']
[Pets.weight,Pets.pet_age,'dog']
[Pets.PetType, Pets.weight, Has_Pet.PetID = Pets.PetID]
[Pets.PetType, Pets.weight, Has_Pet.PetID = Pets.PetID]
[COUNT(Has_Pet.PetID),Has_Pet.StuID = Student.StuID,Student.Age,20]
[COUNT(Pets.PetID),Has_Pet.StuID,Student.Age,20]
[Pets.PetID, Has_Pet.PetID = Pets.PetID, Has_Pet.StuID = Student.StuID, Student.Sex, Dog]
[Pets.PetType, Student.Sex, Has_Pet.StuID = Student.StuID, Has_Pet.PetID = Pets.PetID, dog, female]
[Pets.PetType]
[Pets.PetType]
[Student.Fname, Has_Pet.StuID = Student.StuID, Has_Pet.PetID = Pets.PetID, Pets.PetType, 'cat', 'dog']
[Student.Fname, Pets.PetType, 'cat', 'dog']
[Student.Fname, Has_Pet.StuID = Student.StuID, Has_Pet.PetID = Pets.PetID, Pets.PetType = 'cat', Pets.PetType = 'dog']
[Student.Fname, Has_Pet.StuID = Student.StuID, Has_Pet.PetID = Pets.PetID, Pets.PetType, 'cat', 'dog']
[Student.Major, Student.Age, Pets.PetType != 'cat']
[Student.Major,Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID,Pets.PetType,'cat',Student.Age]
[Student.StuID, Has_Pet.StuID = Student.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, 'cat']
[Student.StuID, Pets.PetType, 'cat']
[Student.Fname, Student.Age, Pets.PetType, Has_Pet.StuID = Student.StuID, Has_Pet.PetID = Pets.PetID, 'dog', 'cat']
[Student.Fname, Pets.PetType, Has_Pet.StuID = Student.StuID, Has_Pet.PetID = Pets.PetID, 'dog', 'cat']
[Pets.PetType, Pets.weight, Pets.pet_age]
[Pets.pet_age,Pets.PetType,Pets.weight]
[Pets.PetID, Pets.weight, Pets.pet_age, 1]
[Pets.PetID, Pets.weight, Pets.pet_age, 1]
[Pets.pet_age, Pets.PetType]
[Pets.pet_age,Pets.PetType]
[Pets.weight,Pets.PetType]
[Pets.weight, Pets.PetType]
[Student.Fname, Student.Age, Has_Pet.StuID]
[Student.Fname,Student.Age,Has_Pet.StuID = Student.StuID]
[Pets.PetID, Has_Pet.StuID = Student.StuID, Has_Pet.PetID = Pets.PetID, Student.LName, 'Smith']
[Pets.PetID,Has_Pet.StuID,Student.LName,'Smith']
[COUNT(Pets.PetID), Student.StuID, Has_Pet.PetID, Has_Pet.StuID, Pets.PetID]
[Student.StuID, Has_Pet.StuID = Student.StuID, Has_Pet.PetID = Pets.PetID, COUNT(Has_Pet.PetID)]
[Student.Fname, Student.Sex, Has_Pet.StuID = Student.StuID, Has_Pet.PetID = Pets.PetID, >1]
[Student.Fname, Student.Sex, Has_Pet.StuID = Student.StuID]
[Student.LName,Has_Pet.PetID,Pets.pet_age,'cat',3]
[Student.LName,Has_Pet.PetID = Pets.PetID,Pets.pet_age,cat,3]
[Student.Age, Has_Pet.StuID, Student.StuID = Has_Pet.StuID]
[Student.Age,Has_Pet.StuID]
[continents.Continent]
[count(continents.ContId)]
[continents.ContId, continents.Continent, countries.Continent]
[continents.ContId, continents.Continent, countries.CountryName, countries.Continent = continents.ContId]
[countries.CountryName,countries.*,countries.Continent = continents.ContId]
[countries.CountryName]
[model_list.Model, car_makers.Maker, car_makers.FullName, car_makers.Id]
[car_makers.FullName,car_makers.Id,model_list.Model,COUNT(model_list.Model)]
[model_list.Model,cars_data.Horsepower,model_list.ModelId = car_names.Model,car_names.MakeId = cars_data.Id]
[model_list.Model, cars_data.Horsepower, car_names.MakeId = cars_data.Id, model_list.ModelId = car_names.Model]
[model_list.Model,model_list.ModelId = car_names.Model,car_names.MakeId = cars_data.Id,cars_data.Weight,average weight]
[model_list.Model, car_names.Model, cars_data.Weight, model_list.ModelId = car_names.Model, car_names.MakeId = cars_data.Id, average weight]
[car_makers.Maker, cars_data.Year, 1970, car_makers.Id = cars_data.Id]
[car_makers.Maker, cars_data.Year, car_makers.Id = cars_data.Id, 1970]
[car_makers.Maker, cars_data.Year, car_makers.Id = car_names.MakeId, car_names.Model = model_list.Model, model_list.Maker = car_makers.Id]
[car_makers.Maker,cars_data.Year]
[car_names.Model, cars_data.Year, 1980]
[model_list.Model,cars_data.Year,cars_data.Id = car_names.MakeId,model_list.Maker = car_makers.Id,1980]
[car_makers.Maker, countries.Continent = continents.ContId, car_makers.Country = countries.CountryId]
[continents.Continent, car_makers.*]
[countries.CountryName,car_makers.Country = countries.CountryId]
[countries.CountryName, car_makers.Country = countries.CountryId]
[car_names.Model,car_makers.FullName,car_makers.Id = car_names.MakeId]
[COUNT(car_names.Model), car_makers.Id, car_makers.FullName, car_makers.Id = model_list.Maker, car_names.MakeId = model_list.ModelId]
[cars_data.Accelerate, model_list.Maker = car_makers.Id, car_names.Model = model_list.Model, 'amc hornet sportabout (sw)']
[cars_data.Accelerate, car_makers.Maker, car_names.Model, car_makers.Id = car_names.MakeId, car_names.MakeId = cars_data.Id, "amc hornet sportabout (sw)"]
[car_makers.*,car_makers.Country = countries.CountryId,countries.CountryName,'France']
[car_makers.Id,car_makers.Country = countries.CountryId,countries.CountryName,'France']
[model_list.ModelId, car_makers.Id = car_names.MakeId, car_names.Model = model_list.Model, car_makers.Country = countries.CountryId, countries.CountryName = 'USA']
[COUNT(model_list.Model),countries.CountryName,countries.CountryId = car_makers.Country,'United States']
[cars_data.MPG, cars_data.Cylinders, 4]
[cars_data.MPG,cars_data.Cylinders,4]
[cars_data.Weight, cars_data.Cylinders, cars_data.Year, 8, 1974]
[cars_data.Weight, cars_data.Cylinders, cars_data.Year, 8, 1974]
[car_makers.Maker,model_list.Model,car_makers.Id = model_list.Maker]
[car_makers.Maker,model_list.Model,car_makers.Id = model_list.Maker,car_names.Model = model_list.Model,car_names.MakeId = cars_data.Id]
[countries.CountryName, countries.CountryId, car_makers.Country = countries.CountryId]
[countries.CountryName, countries.CountryId, car_makers.Country = countries.CountryId]
[cars_data.*, cars_data.Horsepower, 150]
[COUNT(cars_data.Id),cars_data.Horsepower,150]
[cars_data.Weight, cars_data.Year]
[cars_data.Weight, cars_data.Year]
[countries.CountryName, car_makers.Id, countries.Continent = continents.ContId, car_makers.Country = countries.CountryId, Europe, 3]
[countries.CountryName,countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,car_makers.*,'Europe',3]
[cars_data.Horsepower,car_makers.Maker,cars_data.Cylinders,car_makers.Id = cars_data.Id,3]
[cars_data.Horsepower,cars_data.Cylinders,car_makers.Maker,car_makers.Id = cars_data.Id,3]
[model_list.Model, cars_data.MPG, model_list.ModelId = car_names.Model, car_names.MakeId = cars_data.Id]
[model_list.Model]
[cars_data.Horsepower, cars_data.Year, 1980]
[cars_data.Horsepower,cars_data.Year,1980]
[cars_data.Edispl, car_names.Model, model_list.Maker, 'volvo']
[cars_data.Edispl, model_list.Maker = car_makers.Id, car_names.Model = model_list.Model, car_names.MakeId = cars_data.Id, 'volvo']
[cars_data.Accelerate,cars_data.Cylinders]
[cars_data.Accelerate, cars_data.Cylinders]
[model_list.Model,car_makers.Maker,model_list.Maker = car_makers.Id]
[model_list.Model]
[cars_data.*, cars_data.Cylinders, 4]
[COUNT(cars_data.Id), cars_data.Cylinders, 4]
[COUNT(cars_data.Id),cars_data.Year,1980]
[cars_data.Year,cars_data.*]
[model_list.*,car_makers.FullName,model_list.Maker = car_makers.Id,'American Motor Company']
[COUNT(model_list.ModelId),model_list.Maker,car_makers.Id = model_list.Maker,'American Motor Company']
[car_makers.Id, car_makers.FullName, model_list.Maker, 3]
[car_makers.Maker, car_makers.Id, model_list.Maker, 3]
[model_list.Model,car_makers.FullName,car_makers.Id = model_list.Maker,cars_data.Weight,cars_data.Id = car_names.MakeId,'General Motors',3500]
[model_list.Model, car_makers.Maker = car_makers.Id, car_names.Model = model_list.Model, cars_data.Weight, cars_data.Id = car_names.MakeId, car_makers.Id = model_list.Maker, 'General Motors', 3500]
[cars_data.Year, cars_data.Weight, 3000, 4000]
[cars_data.Year, cars_data.Weight, 4000, 3000]
[cars_data.Horsepower, cars_data.Accelerate]
[cars_data.Horsepower, cars_data.Accelerate]
[car_names.Model,car_makers.Maker,model_list.Model,cars_data.Cylinders,cars_data.Accelerate,car_names.MakeId = cars_data.Id,car_makers.Id = model_list.Maker,'volvo']
[car_makers.Maker, model_list.Model, cars_data.Cylinders, cars_data.Accelerate, car_makers.Id = model_list.Maker, car_names.MakeId = model_list.Model, cars_data.Id = car_names.MakeId]
[cars_data.Accelerate,cars_data.Horsepower]
[COUNT(cars_data.Id),MAX(cars_data.Horsepower)]
[countries.CountryName,car_makers.Country = countries.CountryId,2]
[countries.CountryName,car_makers.Id,car_makers.Country = countries.CountryId,2]
[cars_data.*,cars_data.Cylinders,6]
[]
[cars_data.Cylinders,cars_data.Horsepower,4]
[cars_data.Cylinders,cars_data.Horsepower,4]
[cars_data.Horsepower, cars_data.Cylinders, car_makers.Id, car_makers.Maker, lowest horsepower, cylinders <= 3]
[car_makers.Id = model_list.Maker, model_list.Model = car_names.Model, car_names.MakeId = cars_data.Id, cars_data.Horsepower, cars_data.Cylinders, minimum horsepower, 4]
[cars_data.MPG, cars_data.Cylinders, cars_data.Year, 8, 1980]
[cars_data.MPG, cars_data.Cylinders, cars_data.Year, 8, 1980]
[model_list.Model,cars_data.Weight,car_makers.Maker,model_list.Maker = car_makers.Id,3500,'Ford Motor Company']
[model_list.Model, cars_data.Weight, car_makers.Maker, model_list.Maker = car_makers.Id, 3500, 'Ford Motor Company']
[countries.CountryName,car_makers.Country = countries.CountryId]
[countries.CountryName,car_makers.Country = countries.CountryId]
[car_makers.Id, car_makers.Maker, model_list.Maker, 2, 3]
[car_makers.Id = model_list.Maker, car_makers.Maker, model_list.Maker, COUNT(model_list.Model) >= 2, car_names.Model = model_list.Model, car_names.Make, COUNT(car_names.Model) > 3, car_names.MakeId = cars_data.Id]
[countries.CountryId, countries.CountryName, car_makers.Id, car_names.Model, model_list.Maker, car_makers.Country = countries.CountryId, car_names.Model = model_list.Model]
[countries.CountryId, countries.CountryName, car_makers.Id, model_list.Maker, 3, "fiat"]
[airlines.Country,'JetBlue Airways']
[airlines.Country,'Jetblue Airways']
[airlines.Abbreviation,airlines.Airline,"JetBlue Airways"]
[airlines.Abbreviation,airlines.Airline,'Jetblue Airways']
[airlines.Airline, airlines.Abbreviation, airports.Country, airports.CountryAbbrev = airlines.uid, "USA"]
[airlines.Airline, airlines.Abbreviation, airlines.Country = airports.Country, airports.Country, 'USA']
[airports.AirportCode, airports.AirportName, airports.City, 'Anthony']
[airports.AirportCode, airports.AirportName, airports.City, 'Anthony']
[airlines.Airline]
[COUNT(airlines.uid)]
[COUNT(airports.*)]
[COUNT(airports.*)]
[COUNT(flights.*)]
[COUNT(flights.*)]
[airlines.Airline,'UAL']
[airlines.Airline, airlines.Abbreviation, 'UAL']
[airlines.Airline,airlines.Country,'USA']
[airlines.uid, airlines.Country, 'USA']
[airports.City, airports.Country, 'Alton']
[airports.City,airports.Country,airports.AirportName,'Alton']
[airports.AirportName, airports.AirportCode = 'AKO']
[airports.AirportName,airports.AirportCode,'AKO']
[airports.AirportName,airports.City,'Aberdeen']
[airports.AirportName, airports.City, "Aberdeen"]
[flights.*,flights.SourceAirport = airports.AirportCode,'APG']
[flights.FlightNo,flights.SourceAirport,flights.SourceAirport = airports.AirportCode,'APG']
[flights.DestAirport = airports.AirportCode,'ATO']
[flights.*,flights.DestAirport = airports.AirportCode,'ATO']
[flights.*,flights.SourceAirport = airports.AirportCode,airports.City,Aberdeen]
[COUNT(flights.FlightNo), flights.SourceAirport = airports.AirportCode, Aberdeen]
[flights.*,flights.DestAirport = airports.AirportCode,Aberdeen]
[flights.*, airports.City, airports.AirportName, flights.DestAirport = airports.AirportCode, Aberdeen]
[flights.FlightNo, flights.SourceAirport = airports.AirportCode, flights.DestAirport = airports.AirportCode, 'Ashley']
[flights.FlightNo, flights.SourceAirport = airports.AirportCode, flights.DestAirport = airports.AirportCode, airports.AirportName = 'Aberdeen', airports.AirportName = 'Ashley']
[COUNT(flights.FlightNo),flights.Airline = airlines.Abbreviation,'JetBlue Airways']
[COUNT(flights.FlightNo), flights.Airline = airlines.Abbreviation, 'Jetblue Airways']
[flights.FlightNo, airlines.Airline, flights.Airline = airlines.uid, flights.DestAirport = airports.AirportCode, airports.AirportCode]
[flights.FlightNo, flights.DestAirport, flights.DestAirport = airports.AirportCode, United Airlines, ASY]
[flights.*, flights.Airline = 'United Airlines', flights.SourceAirport, flights.SourceAirport = airports.AirportCode, airports.AirportCode]
[flights.FlightNo, flights.SourceAirport, 'United Airlines', 'AHD']
[flights.*, flights.Airline = airlines.Abbreviation, flights.DestAirport = airports.AirportCode, 'United Airlines', 'Aberdeen']
[COUNT(flights.FlightNo), flights.DestAirport = airports.AirportCode, airlines.uid = flights.Airline, "United Airlines", "Aberdeen"]
[airports.City, flights.DestAirport = airports.AirportCode, flights.*]
[airports.City,flights.DestAirport = airports.AirportCode]
[airports.City, flights.SourceAirport]
[airports.City, flights.SourceAirport]
[airports.AirportCode, flights.SourceAirport = airports.AirportCode, flights.DestAirport = airports.AirportCode, flights.*]
[airports.AirportCode, flights.SourceAirport = airports.AirportCode, flights.DestAirport = airports.AirportCode]
[airports.AirportCode, flights.SourceAirport = airports.AirportCode, flights.DestAirport = airports.AirportCode, flights.*]
[]
[airlines.Airline,flights.Airline]
[airlines.Airline,flights.Airline = airlines.Abbreviation]
[airlines.Abbreviation, airlines.Country, flights.Airline]
[airlines.Abbreviation,flights.Airline = airlines.uid,airlines.Country]
[airlines.Airline,airports.AirportCode,flights.SourceAirport,'AHD']
[airlines.Airline,flights.SourceAirport = airports.AirportCode,AHD]
[airlines.Airline,flights.DestAirport = airports.AirportCode,flights.Airline = airlines.uid,'AHD']
[airlines.Airline, flights.DestAirport = airports.AirportCode, 'AHD']
[airlines.Airline, flights.SourceAirport = airports.AirportCode, flights.DestAirport = airports.AirportCode, 'APG', 'CVO']
[airlines.Airline, flights.SourceAirport = airports.AirportCode, APG, CVO]
[airlines.Airline, flights.SourceAirport = airports.AirportCode, flights.DestAirport = airports.AirportCode, 'CVO', 'APG']
[flights.Airline, flights.SourceAirport = airports.AirportCode, 'CVO', 'APG']
[airlines.Airline,flights.Airline,flights.Airline = airlines.Abbreviation,10]
[airlines.Airline,flights.Airline,10]
[airlines.Airline,flights.Airline = airlines.Abbreviation,flights.*]
[airlines.Airline,flights.Airline = airlines.uid,flights.*]
[flights.FlightNo,flights.Airline = airlines.uid,airlines.Airline,'United Airlines']
[flights.FlightNo,flights.Airline = airlines.Abbreviation,'United Airlines']
[flights.FlightNo,flights.SourceAirport,flights.SourceAirport = airports.AirportCode,'APG']
[flights.FlightNo,flights.SourceAirport,flights.SourceAirport = airports.AirportCode,'APG']
[flights.FlightNo,flights.DestAirport = airports.AirportCode,airports.AirportCode,"APG"]
[flights.FlightNo, flights.DestAirport = airports.AirportCode, APG]
[flights.FlightNo, flights.SourceAirport = airports.AirportCode, 'Aberdeen']
[flights.FlightNo, flights.SourceAirport = airports.AirportCode, airports.AirportName, 'Aberdeen']
[flights.FlightNo,flights.DestAirport = airports.AirportCode,airports.City,'Aberdeen']
[flights.FlightNo, flights.DestAirport = airports.AirportCode, 'Aberdeen']
[flights.*, airports.City, flights.DestAirport = airports.AirportCode, 'Aberdeen', 'Abilene']
[flights.DestAirport = airports.AirportCode, 'Aberdeen', 'Abilene']
[airports.AirportName, flights.SourceAirport = airports.AirportCode, flights.DestAirport = airports.AirportCode]
[airports.AirportCode, flights.SourceAirport = airports.AirportCode, flights.DestAirport = airports.AirportCode]
[employee.Employee_ID]
[employee.Employee_ID]
[employee.Name, employee.Age]
[employee.Name,employee.Age]
[COUNT(employee.Employee_ID),employee.City]
[employee.Employee_ID, employee.City]
[employee.City, employee.Age, 30]
[employee.City,employee.Age,30]
[COUNT(shop.Shop_ID), shop.Location]
[shop.Shop_ID,shop.Location]
[shop.Manager_name, shop.District, shop.Number_products]
[shop.Manager_name, shop.District, shop.Number_products]
[shop.Number_products,shop.*]
[shop.Number_products]
[shop.Name, shop.Location, shop.District, shop.Number_products]
[shop.Number_products, shop.Name, shop.Location, shop.District]
[shop.Name, shop.Number_products, Average(shop.Number_products)]
[shop.Name, shop.Number_products]
[employee.Name, evaluation.Employee_ID = employee.Employee_ID, evaluation.*]
[evaluation.Employee_ID = employee.Employee_ID, employee.Name]
[employee.Name,evaluation.Bonus,evaluation.Employee_ID = employee.Employee_ID]
[evaluation.Employee_ID, evaluation.Bonus, employee.Name]
[employee.Name, evaluation.Employee_ID = employee.Employee_ID]
[employee.Name, evaluation.Employee_ID = employee.Employee_ID]
[shop.Name,hiring.Shop_ID = shop.Shop_ID]
[shop.Shop_ID, shop.Name, hiring.Shop_ID]
[shop.Name,hiring.Employee_ID,hiring.Shop_ID = shop.Shop_ID]
[shop.Name, hiring.Shop_ID = shop.Shop_ID]
[COUNT(hiring.Employee_ID),shop.Name,hiring.Shop_ID = shop.Shop_ID]
[shop.*,COUNT(employee.Employee_ID)]
[evaluation.Bonus]
[evaluation.Bonus]
[hiring.*]
[hiring.*]
[shop.District, shop.Number_products, 3000, 10000]
[shop.District, shop.Number_products, 3000, 10000]
[shop.Location]
[shop.Location]
[Documents.Document_ID]
[Documents.*]
[Documents.Document_ID, Documents.Document_Name, Documents.Document_Description]
[Documents.Document_ID, Documents.Document_Name, Documents.Document_Description]
[Documents.Document_Name,Documents.Template_ID,Documents.Document_Description,'w']
[Documents.Document_Name, Documents.Template_ID, Documents.Document_Description, 'w']
[Documents.Document_ID, Documents.Template_ID, Documents.Document_Description, 'Robbin CV']
[Documents.Document_ID, Documents.Template_ID, Documents.Document_Description, Documents.Document_Name, "Robbin CV"]
[Templates.Template_ID,Documents.Document_ID,Documents.Template_ID = Templates.Template_ID]
[Templates.Template_ID, Documents.Template_ID = Templates.Template_ID]
[Documents.*, Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code, Documents.Template_ID = Templates.Template_ID, 'PPT']
[COUNT(Documents.Document_ID), Ref_Template_Types.Template_Type_Description, Documents.Template_ID = Templates.Template_ID, Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code, 'PPT']
[Templates.Template_ID,Documents.Template_ID = Templates.Template_ID]
[Documents.Template_ID = Templates.Template_ID]
[Templates.Template_ID, Templates.Template_Type_Code, Documents.Template_ID]
[Templates.Template_ID, Templates.Template_Type_Code, Documents.Template_ID]
[Templates.Template_ID,Documents.Template_ID = Templates.Template_ID]
[Templates.Template_ID,Documents.Document_ID,Documents.Template_ID = Templates.Template_ID]
[Templates.Template_ID, Documents.Template_ID]
[Templates.Template_ID = Documents.Template_ID]
[Templates.Template_ID]
[Templates.Template_ID]
[Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code]
[Templates.Template_ID,Templates.Version_Number,Templates.Template_Type_Code,Ref_Template_Types.Template_Type_Code]
[Ref_Template_Types.Template_Type_Code,Templates.Template_ID]
[Ref_Template_Types.Template_Type_Code]
[Templates.Template_ID, Templates.Template_Type_Code, Ref_Template_Types.Template_Type_Code, PP, PPT]
[Templates.Template_ID, Templates.Template_Type_Code, Ref_Template_Types.Template_Type_Code, 'PP', 'PPT']
[Templates.Template_ID,Templates.Template_Type_Code,Ref_Template_Types.Template_Type_Code,'CV']
[COUNT(Templates.Template_ID),Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Ref_Template_Types.Template_Type_Description,'CV']
[Templates.Version_Number, Templates.Template_Type_Code, Templates.Version_Number > 5]
[Templates.Version_Number, Templates.Template_Type_Code, Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code, 5]
[Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID)]
[Ref_Template_Types.Template_Type_Code,Templates.Template_ID,Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code]
[Ref_Template_Types.Template_Type_Code,Templates.Template_Type_Code]
[Ref_Template_Types.Template_Type_Code, Templates.Template_Type_Code]
[Ref_Template_Types.Template_Type_Code,Templates.Template_Type_Code,Templates.Template_ID = Documents.Template_ID,3]
[Ref_Template_Types.Template_Type_Code,Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Templates.Template_ID,3]
[Templates.Version_Number, Templates.Template_Type_Code, Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code]
[Templates.Version_Number, Templates.Template_Type_Code, Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code]
[Templates.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Documents.Document_Name,'Data base']
[Templates.Template_Type_Code,Documents.Document_Name,Documents.Template_ID = Templates.Template_ID,'Data base']
[Documents.Document_Name, Documents.Template_ID = Templates.Template_ID, Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code, 'BK']
[Documents.Document_Name,Documents.Template_ID = Templates.Template_ID,'BK']
[Ref_Template_Types.Template_Type_Code,COUNT(Documents.Document_ID)]
[Ref_Template_Types.Template_Type_Code,COUNT(Documents.Document_ID),Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID]
[Ref_Template_Types.Template_Type_Code, Documents.*]
[Ref_Template_Types.Template_Type_Code, Documents.*, Templates.Template_ID, Documents.Template_ID = Templates.Template_ID, Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code]
[Ref_Template_Types.Template_Type_Code, Templates.Template_Type_Code, Documents.Template_ID]
[Ref_Template_Types.Template_Type_Code, Documents.Template_ID = Templates.Template_ID]
[Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description]
[Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description]
[Ref_Template_Types.Template_Type_Description,Ref_Template_Types.Template_Type_Code,'AD']
[Ref_Template_Types.Template_Type_Description,Ref_Template_Types.Template_Type_Code,Templates.Template_Type_Code,'AD']
[Ref_Template_Types.Template_Type_Code,Ref_Template_Types.Template_Type_Description,"Book"]
[Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, 'Book']
[Ref_Template_Types.Template_Type_Description,Templates.Template_ID,Documents.Template_ID,Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code]
[Ref_Template_Types.Template_Type_Description,Templates.Template_ID,Documents.Template_ID,Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Document_ID]
[Templates.Template_ID,Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Ref_Template_Types.Template_Type_Description,'Presentation']
[Templates.Template_ID,Templates.Template_Type_Description,Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,'Presentation']
[Paragraphs.*]
[Paragraphs.*]
[Paragraphs.*,Documents.Document_ID = Paragraphs.Document_ID,'Summer Show']
[COUNT(Paragraphs.Paragraph_ID),Documents.Document_Name,'Summer Show']
[Paragraphs.*,Paragraphs.Paragraph_Text,'Korea']
[Paragraphs.*,Paragraphs.Paragraph_Text,'Korea']
[Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text, Documents.Document_Name, Documents.Template_ID = Templates.Template_ID, 'Welcome to NY']
[Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text, Documents.Document_Name, Documents.Document_ID = Paragraphs.Document_ID, 'Welcome to NY']
[Paragraphs.Paragraph_Text,Documents.Document_Name,Documents.Document_ID = Paragraphs.Document_ID,'Customer reviews']
[Paragraphs.Paragraph_Text,Documents.Document_Name,Documents.Document_ID = Paragraphs.Document_ID,'Customer reviews']
[Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID)]
[Documents.Document_ID,COUNT(Paragraphs.Paragraph_ID),Paragraphs.Document_ID = Documents.Document_ID,ORDER BY Documents.Document_ID]
[Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID), Paragraphs.Document_ID = Documents.Document_ID]
[Documents.Document_ID, Documents.Document_Name, Paragraphs.Paragraph_ID, Documents.Document_ID = Paragraphs.Document_ID, COUNT(Paragraphs.Paragraph_ID)]
[Documents.Document_ID,Paragraphs.Document_ID,2]
[Documents.Document_ID, Paragraphs.Document_ID = Documents.Document_ID, Paragraphs.*]
[Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID), Paragraphs.Document_ID = Documents.Document_ID]
[Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID)]
[Documents.Document_ID,COUNT(Paragraphs.Paragraph_ID),Paragraphs.Document_ID = Documents.Document_ID]
[Documents.Document_ID, Paragraphs.Document_ID]
[Documents.Document_ID, Paragraphs.Document_ID]
[Documents.Document_ID,Paragraphs.Document_ID]
[Documents.Document_ID, Paragraphs.Paragraph_Text, 'Brazil', 'Ireland']
[Documents.Document_ID,Paragraphs.Paragraph_Text,'Brazil','Ireland']
[teacher.Teacher_ID]
[teacher.Teacher_ID]
[teacher.Name, teacher.Age]
[teacher.Name,teacher.Age]
[teacher.Age, teacher.Hometown]
[teacher.Age, teacher.Hometown]
[teacher.Name, teacher.Hometown, 'Little Lever Urban District']
[teacher.Name, teacher.Hometown, 'Little Lever Urban District']
[teacher.Name, teacher.Age, 32, 33]
[teacher.Name, teacher.Age, 32, 33]
[teacher.Hometown,teacher.Age]
[teacher.Name, teacher.Age, teacher.Hometown]
[teacher.Hometown,teacher.Teacher_ID]
[teacher.Hometown,COUNT(teacher.Teacher_ID)]
[teacher.Hometown, teacher.*]
[teacher.Hometown]
[teacher.Hometown]
[teacher.Hometown,teacher.Teacher_ID,2]
[teacher.Name, course.Course, course_arrange.Teacher_ID = teacher.Teacher_ID, course_arrange.Course_ID = course.Course_ID]
[teacher.Name, course.Course, course.Course_ID = course_arrange.Course_ID, teacher.Teacher_ID = course_arrange.Teacher_ID]
[teacher.Name, course.Course, course_arrange.Teacher_ID = teacher.Teacher_ID, course_arrange.Course_ID = course.Course_ID]
[teacher.Name, course.Course, course_arrange.Teacher_ID = teacher.Teacher_ID, course_arrange.Course_ID = course.Course_ID]
[teacher.Name, course.Course_ID = course_arrange.Course_ID, course_arrange.Teacher_ID = teacher.Teacher_ID, math]
[teacher.Name, course_arrange.Teacher_ID = teacher.Teacher_ID, course_arrange.Course_ID = course.Course_ID, course.Course, 'math']
[teacher.Name, course_arrange.Teacher_ID = teacher.Teacher_ID]
[teacher.Name,course_arrange.Teacher_ID = teacher.Teacher_ID,COUNT(course_arrange.Course_ID)]
[teacher.Name, course_arrange.Course_ID, course_arrange.Teacher_ID, 2]
[teacher.Name, course_arrange.Teacher_ID]
[teacher.Name,course_arrange.Teacher_ID = teacher.Teacher_ID]
[teacher.Name,teacher.Teacher_ID = course_arrange.Teacher_ID]
[visitor.*,visitor.Age,30]
[visitor.Name, visitor.Level_of_membership, 4]
[visitor.Age,visitor.Level_of_membership,4]
[visitor.Name, visitor.Level_of_membership, visitor.Level_of_membership > 4, visitor.Age]
[museum.Museum_ID, museum.Name, museum.Num_of_Staff]
[museum.Num_of_Staff,museum.*,museum.Open_Year,2009]
[museum.Open_Year,museum.Num_of_Staff,museum.Name,'Plaza Museum']
[museum.Name, museum.Num_of_Staff, museum.Open_Year, 2010]
[visitor.ID, visitor.Name, visitor.Age, visit.visitor_ID = visitor.ID, more than once]
[visitor.ID, visitor.Name, visitor.Level_of_membership, visit.Total_spent, visit.visitor_ID = visitor.ID, visit.Museum_ID = museum.Museum_ID]
[museum.Museum_ID, museum.Name, visit.Museum_ID]
[museum.Name,visit.Museum_ID = museum.Museum_ID]
[visitor.Name, visitor.Age, visit.Num_of_Ticket, visit.visitor_ID = visitor.ID]
[visit.Num_of_Ticket]
[SUM(visit.Total_spent), visit.Total_spent, visitor.Level_of_membership, visitor.ID, visit.visitor_ID = visitor.ID, visitor.Level_of_membership = 1]
[visitor.Name, museum.Open_Year, visit.Museum_ID = museum.Museum_ID, visit.visitor_ID = visitor.ID, 2009, 2011]
[visitor.*, visit.visitor_ID, museum.Museum_ID = visit.Museum_ID, museum.Open_Year, 2010]
[museum.Museum_ID, museum.Open_Year, museum.Open_Year, 2013, 2008]
[players.player_id]
[players.*]
[matches.*]
[matches.*]
[players.first_name, players.birth_date, players.country_code, 'USA']
[players.first_name, players.birth_date, players.country_code, 'USA']
[matches.loser_age, matches.winner_age, matches.winner_id = players.player_id, matches.loser_id = players.player_id, matches.*]
[players.birth_date, matches.loser_age, matches.winner_age, matches.winner_id = players.player_id, matches.loser_id = players.player_id]
[rankings.ranking, matches.winner_id = players.player_id]
[rankings.ranking, matches.winner_id = players.player_id]
[matches.loser_rank, matches.loser_id = players.player_id, matches.*]
[matches.loser_rank,matches.*]
[players.country_code,players.player_id]
[players.country_code]
[players.last_name,matches.loser_id = players.player_id]
[matches.loser_name]
[matches.tourney_name,matches.*]
[matches.tourney_name, matches.*]
[players.first_name, players.last_name, matches.year, matches.winner_id = players.player_id, 2013, 2016]
[players.first_name, players.last_name, matches.winner_id, matches.year, 2013, 2016]
[matches.*, matches.year, 2013, 2016]
[]
[players.country_code, players.first_name, matches.tourney_name, "WTA Championships", "Australian Open"]
[players.first_name, players.country_code, matches.tourney_name, matches.winner_id = players.player_id, "WTA Championships", "Australian Open"]
[players.first_name, players.country_code, players.birth_date]
[players.first_name, players.country_code, players.birth_date]
[players.first_name, players.last_name, players.birth_date]
[players.first_name, players.last_name, players.birth_date]
[players.first_name, players.last_name, players.hand, players.birth_date, 'L']
[players.first_name, players.last_name, players.hand, players.birth_date, left]
[players.first_name, players.country_code, rankings.tours, rankings.player_id = players.player_id]
[players.first_name, players.country_code, rankings.tours, rankings.player_id = players.player_id]
[matches.year]
[matches.year]
[players.first_name, players.last_name, rankings.ranking_points, matches.winner_id = players.player_id]
[players.first_name, players.last_name, matches.winner_id = players.player_id, rankings.ranking_points]
[players.first_name, players.last_name, rankings.ranking_points, matches.tourney_name, Australian Open]
[players.last_name, players.first_name, matches.winner_id = players.player_id, matches.tourney_name, rankings.ranking_points, matches.tourney_id = tournaments.tourney_id, Australian Open]
[players.first_name, players.last_name, matches.minutes, matches.loser_id = players.player_id, matches.winner_id = players.player_id]
[players.first_name, players.last_name, matches.minutes, matches.winner_id = players.player_id, matches.loser_id = players.player_id]
[rankings.ranking, players.first_name, rankings.player_id = players.player_id]
[players.first_name, rankings.ranking]
[rankings.ranking_points,players.first_name,rankings.player_id = players.player_id]
[players.first_name,rankings.ranking_points,rankings.player_id = players.player_id]
[players.country_code]
[players.*, players.country_code]
[players.country_code, players.*]
[players.country_code,players.*]
[players.country_code, players.player_id, 50]
[players.country_code,COUNT(players.player_id),50]
[rankings.tours, rankings.ranking_date, rankings.player_id = players.player_id]
[rankings.tours, rankings.ranking_date]
[matches.*, matches.year]
[matches.*, matches.year]
[players.first_name, players.last_name, rankings.ranking, matches.winner_id = players.player_id]
[players.first_name, players.last_name, rankings.ranking, matches.winner_id = players.player_id]
[players.player_id, matches.tourney_name, players.hand, matches.winner_id = players.player_id, "WTA Championships", "L"]
[players.player_id, players.hand, matches.tourney_name, matches.winner_id = players.player_id, WTA Championships, Left]
[players.first_name, players.country_code, players.birth_date, rankings.ranking_points, matches.winner_id = players.player_id, rankings.player_id = players.player_id]
[players.first_name, players.country_code, players.birth_date, matches.winner_rank_points, matches.winner_id = players.player_id]
[players.*, players.hand]
[players.*,players.hand]
[ship.*,ship.disposition_of_ship,'Captured']
[ship.name, ship.tonnage, ORDER BY ship.name DESC]
[battle.name, battle.date, battle.result]
[death.killed,death.caused_by_ship_id = ship.id]
[death.injured,death.caused_by_ship_id = ship.id]
[death.note, death.killed, death.injured, ship.id, ship.tonnage, death.caused_by_ship_id = ship.id, ship.tonnage = 't']
[battle.name, battle.result, battle.bulgarian_commander != 'Boril']
[battle.id, battle.name, ship.name, ship.ship_type, ship.lost_in_battle, 'Brig']
[battle.id, battle.name, death.killed, ship.lost_in_battle = battle.id, death.caused_by_ship_id = ship.id, 10]
[ship.id, ship.name, death.killed, death.injured, death.caused_by_ship_id = ship.id]
[battle.name, battle.bulgarian_commander, battle.latin_commander, 'Kaloyan', 'Baldwin I']
[battle.result]
[battle.*,ship.tonnage,ship.lost_in_battle = battle.id,225]
[battle.name, battle.date, ship.name, ship.lost_in_battle = battle.id, 'Lettice', 'HMS Atalanta']
[battle.name, battle.result, battle.bulgarian_commander, ship.location, 'English Channel']
[death.note,'East']
[Addresses.*, Addresses.line_1, Addresses.line_2]
[Addresses.line_1, Addresses.line_2]
[Courses.*]
[Courses.course_id]
[Courses.course_description,Courses.*]
[Courses.course_description,Courses.course_name,Courses.course_id = Sections.course_id,'Math']
[Addresses.zip_postcode,Addresses.city,'Port Chelsea']
[Addresses.zip_postcode,Addresses.city,'Port Chelsea']
[Departments.department_name, Departments.department_id, Degree_Programs.department_id = Departments.department_id]
[Departments.department_name, Departments.department_id, Degree_Programs.department_id]
[Departments.department_id,Degree_Programs.department_id = Departments.department_id]
[Departments.department_id, Degree_Programs.department_id]
[Degree_Programs.degree_summary_name,Degree_Programs.department_id = Departments.department_id]
[Degree_Programs.degree_summary_name, Degree_Programs.department_id = Departments.department_id]
[Degree_Programs.degree_program_id, Degree_Programs.department_id, 'engineering']
[Degree_Programs.degree_program_id,Degree_Programs.department_id = Departments.department_id,Departments.department_name,'engineering']
[Sections.section_name, Sections.section_description]
[Sections.section_name, Sections.section_description]
[Courses.course_id, Courses.course_name, Sections.course_id = Courses.course_id, Sections.*]
[Courses.course_name, Courses.course_id, Sections.course_id, 2]
[Sections.section_name]
[Sections.section_name]
[Semesters.semester_id, Semesters.semester_name, Student_Enrolment.semester_id]
[Semesters.*,Student_Enrolment.semester_id = Semesters.semester_id, COUNT(Student_Enrolment.student_id)]
[Departments.department_description, Departments.department_name, 'the computer']
[Departments.department_description, Departments.department_name, 'computer']
[Students.first_name, Students.middle_name, Students.last_name, Student_Enrolment.student_id, Student_Enrolment.semester_id, 2]
[Students.student_id, Students.first_name, Students.middle_name, Students.last_name, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, 2]
[Students.first_name, Students.middle_name, Students.last_name, Degree_Programs.degree_summary_name, Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id, Student_Enrolment.student_id = Students.student_id, 'Bachelor']
[Students.first_name, Students.middle_name, Students.last_name, Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name, Student_Enrolment.student_id = Students.student_id, "Bachelors"]
[Degree_Programs.degree_summary_name, Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id, Student_Enrolment.*]
[Degree_Programs.degree_summary_name, Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id, Student_Enrolment.*]
[Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name, Student_Enrolment.degree_program_id]
[Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description, COUNT(Student_Enrolment.student_id)]
[Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(Student_Enrolment.student_enrolment_id), Student_Enrolment.degree_program_id, Student_Enrolment.student_id = Students.student_id]
[Students.first_name, Students.middle_name, Students.last_name, Students.student_id, COUNT(Student_Enrolment.student_enrolment_id), Student_Enrolment.student_id = Students.student_id, Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id]
[Semesters.semester_name, Semesters.semester_id = Student_Enrolment.semester_id]
[Semesters.semester_name, Student_Enrolment.semester_id = Semesters.semester_id]
[Courses.course_name, Student_Enrolment_Courses.course_id = Courses.course_id]
[Courses.course_name,Student_Enrolment_Courses.course_id = Courses.course_id]
[Courses.course_name, Student_Enrolment_Courses.course_id = Courses.course_id, COUNT(Student_Enrolment_Courses.student_enrolment_id)]
[Courses.course_name, Student_Enrolment_Courses.course_id = Courses.course_id]
[Students.last_name,Addresses.state_province_county,'North Carolina',Student_Enrolment.student_id = Students.student_id]
[Students.last_name,Students.current_address_id = Addresses.address_id,Addresses.state_province_county,'North Carolina',Student_Enrolment.student_id = Students.student_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id]
[Transcripts.transcript_date, Transcripts.transcript_id, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id = Transcripts.transcript_id, 2]
[Transcripts.transcript_id, Transcripts.transcript_date, Transcript_Contents.transcript_id = Transcripts.transcript_id, Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.student_enrolment_id, 2]
[Students.cell_mobile_number,Students.first_name,Students.last_name,'Timmothy','Ward']
[Students.cell_mobile_number, Students.first_name = 'Timmothy', Students.last_name = 'Ward']
[Students.date_first_registered, Students.first_name, Students.middle_name, Students.last_name]
[Students.first_name, Students.middle_name, Students.last_name]
[Students.first_name, Students.middle_name, Students.last_name, Transcripts.transcript_date, Student_Enrolment.student_id]
[Students.first_name, Students.middle_name, Students.last_name, Transcripts.transcript_date, Transcripts.transcript_id = Transcript_Contents.transcript_id, Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id, Student_Enrolment.student_id = Students.student_id]
[Students.first_name, Students.current_address_id = Addresses.address_id, Students.permanent_address_id = Addresses.address_id]
[Students.first_name, Students.permanent_address_id = Addresses.address_id, Students.current_address_id = Addresses.address_id]
[Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3]
[Addresses.address_id, Addresses.line_1, Addresses.line_2, Students.current_address_id = Addresses.address_id, Students.permanent_address_id = Addresses.address_id]
[Transcripts.transcript_date]
[Transcripts.transcript_date]
[Transcripts.transcript_date,Transcripts.other_details]
[Transcripts.transcript_date,Transcripts.other_details]
[Transcripts.*]
[Transcripts.transcript_id]
[Transcripts.transcript_date]
[Transcripts.transcript_date]
[COUNT(Transcript_Contents.transcript_id),Student_Enrolment_Courses.student_enrolment_id,Student_Enrolment.student_enrolment_id,Transcript_Contents.student_course_id,Student_Enrolment_Courses.student_course_id]
[COUNT(Transcript_Contents.transcript_id),Student_Enrolment_Courses.student_enrolment_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]
[Transcripts.transcript_date,Transcripts.transcript_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.*]
[Transcripts.transcript_date, Transcripts.transcript_id, COUNT(Transcript_Contents.student_course_id)]
[Semesters.semester_name, Student_Enrolment.semester_id, Degree_Programs.degree_summary_name, Student_Enrolment.degree_program_id, "Master", "Bachelor"]
[Semesters.semester_id, Student_Enrolment.degree_program_id, "Masters", "Bachelors"]
[Addresses.address_id, Students.current_address_id]
[Addresses.* , Students.permanent_address_id = Addresses.address_id, Students.current_address_id = Addresses.address_id]
[]
[Students.other_student_details, Students.first_name, Students.middle_name, Students.last_name, Students.current_address_id = Addresses.address_id, Students.permanent_address_id = Addresses.address_id]
[Sections.*]
[Sections.section_description,Sections.section_name,'h']
[Students.first_name, Students.permanent_address_id = Addresses.address_id, Addresses.country, Students.cell_mobile_number]
[Students.first_name, Students.permanent_address_id = Addresses.address_id, Addresses.country = 'Haiti', Students.cell_mobile_number = '09700166582']
[Cartoon.Title, Cartoon.Channel = TV_Channel.id]
[Cartoon.Title]
[Cartoon.*, Cartoon.Directed_by, 'Ben Jones']
[Cartoon.Title, Cartoon.Directed_by, 'Ben Jones']
[Cartoon.*, Cartoon.Written_by, "Joseph Kuhr"]
[Cartoon.id, Cartoon.Written_by, "Joseph Kuhr"]
[Cartoon.Title, Cartoon.Directed_by, Cartoon.Original_air_date, Cartoon.Channel = TV_Channel.id]
[Cartoon.Title, Cartoon.Directed_by, Cartoon.Original_air_date]
[Cartoon.Title, Cartoon.Directed_by, 'Ben Jones', 'Brandon Vietti']
[Cartoon.Title, Cartoon.Directed_by, Ben Jones, Brandon Vietti]
[TV_Channel.Country, COUNT(TV_Channel.id)]
[TV_Channel.Country]
[TV_Channel.series_name, TV_Channel.Content]
[TV_series.series_name,TV_Channel.Content]
[TV_Channel.Content,TV_Channel.series_name,'Sky Radio']
[TV_Channel.Content,TV_Channel.series_name,TV_Channel.id = TV_series.Channel,'Sky Radio']
[TV_Channel.Package_Option, TV_Channel.series_name, 'Sky Radio']
[TV_Channel.Package_Option,TV_Channel.series_name,TV_Channel.id = TV_series.Channel,'Sky Radio']
[TV_Channel.id, English]
[TV_Channel.Language,'English']
[TV_Channel.Language, COUNT(TV_Channel.id)]
[TV_Channel.Language, Cartoon.Channel, TV_Channel.id, TV_series.Channel]
[TV_Channel.Language]
[TV_Channel.Language]
[TV_Channel.id,Cartoon.Channel = TV_Channel.id,'The Rise of the Blue Beetle!',TV_Channel.series_name]
[TV_series.series_name, Cartoon.Title, TV_series.Channel = TV_Channel.id, Cartoon.Channel = TV_Channel.id, 'The Rise of the Blue Beetle']
[Cartoon.Title, Cartoon.Channel = TV_Channel.id, TV_Channel.series_name, 'Sky Radio']
[Cartoon.Title,Cartoon.Channel = TV_Channel.id,TV_Channel.series_name,'Sky Radio']
[TV_series.Episode,TV_series.Rating,TV_series.Channel = TV_Channel.id]
[TV_series.*,TV_series.Rating,TV_series.Channel = TV_Channel.id]
[TV_series.Rating, TV_series.Episode, TV_series.Channel = TV_Channel.id]
[TV_series.Episode, TV_series.Rating, TV_series.Channel = TV_Channel.id]
[TV_series.Share]
[TV_series.Share]
[TV_series.Air_Date,TV_series.Episode,TV_series.Channel = TV_Channel.id,'A Love of a Lifetime']
[TV_series.Air_Date,TV_series.Episode,'A Love of a Lifetime']
[TV_series.Weekly_Rank, TV_series.Episode, 'A Love of a Lifetime']
[TV_series.Weekly_Rank,TV_series.Episode,'A Love of a Lifetime']
[TV_Channel.id, TV_series.Episode, TV_Channel.series_name, TV_series.Channel]
[TV_series.series_name,TV_series.Episode,'A Love of a Lifetime']
[TV_series.Episode, TV_series.Channel = TV_Channel.id, TV_Channel.series_name, 'Sky Radio']
[]
[Cartoon.id, Cartoon.Directed_by]
[Cartoon.id,Cartoon.Directed_by]
[Cartoon.Production_code,Cartoon.Channel = TV_Channel.id,TV_Channel.series_name,TV_series.Original_air_date]
[Cartoon.Production_code, Cartoon.Channel, Cartoon.Original_air_date, Cartoon.Channel = TV_Channel.id]
[TV_Channel.Package_Option, TV_series.series_name, TV_Channel.Hight_definition_TV, true]
[TV_Channel.Package_Option,TV_series.series_name,TV_Channel.Hight_definition_TV,true]
[TV_Channel.Country,Cartoon.Written_by,Cartoon.Channel = TV_Channel.id,Todd Casey]
[TV_Channel.Country, Cartoon.Channel = TV_Channel.id, Cartoon.Written_by, Todd Casey]
[TV_Channel.Country,TV_Channel.id = Cartoon.Channel,Cartoon.Written_by,'Todd Casey']
[TV_Channel.Country,Cartoon.Written_by,Cartoon.Channel = TV_Channel.id,'Todd Casey']
[TV_series.series_name, TV_Channel.Country, Cartoon.Directed_by, Ben Jones, Michael Chang]
[TV_Channel.series_name, TV_Channel.Country, Cartoon.Directed_by, Ben Jones, Michael Chang]
[TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country, TV_Channel.Language != "English"]
[TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country, TV_Channel.*, TV_Channel.Language, 'English']
[TV_Channel.id, TV_Channel.Country, 2]
[TV_Channel.id, count(TV_series.id) > 2]
[TV_Channel.id, Cartoon.Directed_by, Ben Jones]
[TV_Channel.id,Cartoon.Directed_by,'Ben Jones']
[TV_Channel.Package_Option, TV_Channel.id = Cartoon.Channel, Cartoon.Directed_by, 'Ben Jones']
[TV_Channel.Package_Option,TV_Channel.*,Cartoon.Directed_by,'Ben Jones']
[COUNT(poker_player.Poker_Player_ID),poker_player.People_ID = people.People_ID]
[poker_player.*]
[poker_player.Earnings, poker_player.People_ID = people.People_ID]
[poker_player.Earnings, poker_player.People_ID = people.People_ID]
[poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.People_ID = people.People_ID]
[poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.People_ID = people.People_ID, poker_player.*]
[poker_player.Earnings]
[poker_player.Earnings, poker_player.People_ID = people.People_ID]
[poker_player.Money_Rank, poker_player.Earnings]
[poker_player.Money_Rank, poker_player.Earnings, poker_player.People_ID = people.People_ID]
[poker_player.Final_Table_Made,poker_player.Earnings,200000]
[poker_player.Final_Table_Made, poker_player.Earnings, 200000]
[people.Name, poker_player.People_ID = people.People_ID]
[people.Name]
[people.Name, poker_player.Earnings, poker_player.People_ID = people.People_ID, 300000]
[people.Name,poker_player.Earnings,poker_player.People_ID = people.People_ID,300000]
[people.Name, poker_player.Final_Table_Made, ascending order]
[people.Name, poker_player.Final_Table_Made, poker_player.People_ID = people.People_ID]
[people.Birth_Date, poker_player.Earnings, poker_player.People_ID = people.People_ID]
[people.Birth_Date, poker_player.Earnings, poker_player.People_ID = people.People_ID]
[poker_player.Money_Rank, people.Height]
[poker_player.Money_Rank,poker_player.Poker_Player_ID,poker_player.People_ID = people.People_ID,people.Height]
[poker_player.Earnings,poker_player.People_ID = people.People_ID,people.Height,200]
[poker_player.Earnings,poker_player.People_ID = people.People_ID,people.Height,200]
[people.Name, poker_player.Earnings, poker_player.People_ID = people.People_ID]
[people.Name, poker_player.Earnings]
[people.Nationality]
[people.Nationality]
[people.Nationality, poker_player.People_ID = people.People_ID]
[people.Nationality]
[people.Nationality, poker_player.People_ID = people.People_ID]
[people.Nationality, poker_player.People_ID = people.People_ID]
[people.Name, people.Birth_Date, poker_player.People_ID = people.People_ID]
[people.Name, people.Birth_Date]
[people.Name, people.Nationality, 'Russia']
[people.Name,people.Nationality,'Russia']
[people.Name,poker_player.Poker_Player_ID is null]
[people.Name,poker_player.People_ID = people.People_ID]
[people.Nationality]
[people.Nationality]
[AREA_CODE_STATE.state]
[CONTESTANTS.contestant_number, CONTESTANTS.contestant_name]
[VOTES.vote_id, VOTES.phone_number, VOTES.state]
[AREA_CODE_STATE.area_code]
[VOTES.created,VOTES.state,AREA_CODE_STATE.state,'CA']
[CONTESTANTS.contestant_name,CONTESTANTS.contestant_name, 'Jessie Alloway']
[VOTES.state, VOTES.created]
[CONTESTANTS.contestant_number, CONTESTANTS.contestant_name, VOTES.contestant_number, 2]
[CONTESTANTS.contestant_number, CONTESTANTS.contestant_name, VOTES.vote_id]
[COUNT(VOTES.vote_id),VOTES.state,AREA_CODE_STATE.state,'NY','CA']
[CONTESTANTS.contestant_number,VOTES.contestant_number]
[AREA_CODE_STATE.area_code, VOTES.*]
[VOTES.created, VOTES.state, VOTES.phone_number, CONTESTANTS.contestant_name, VOTES.contestant_number = CONTESTANTS.contestant_number, 'Tabatha Gehling']
[AREA_CODE_STATE.area_code, CONTESTANTS.contestant_name, VOTES.state, VOTES.contestant_number, 'Tabatha Gehling', 'Kelly Clauss']
[CONTESTANTS.contestant_name,'Al']
[country.Name, country.IndepYear, 1950]
[country.Name, country.IndepYear, 1950]
[country.*, country.GovernmentForm, 'Republic']
[country.*, country.GovernmentForm, 'Republic']
[country.SurfaceArea, country.Region, "Caribbean"]
[country.SurfaceArea, country.Continent, 'Caribbean']
[country.Continent,city.CountryCode = country.Code,'Anguilla']
[country.Continent,city.CountryCode = country.Code,'Anguilla']
[country.Region, city.Name, city.CountryCode = country.Code, 'Kabul']
[country.Region, city.Name, city.CountryCode = country.Code, 'Kabul']
[countrylanguage.Language, city.Name, city.CountryCode = country.Code, countrylanguage.CountryCode = country.Code, Aruba]
[countrylanguage.Language, countrylanguage.Percentage, city.Name, city.CountryCode = country.Code, countrylanguage.CountryCode = country.Code, 'Aruba']
[country.Population,country.LifeExpectancy,city.CountryCode = country.Code,Brazil]
[country.Population,country.LifeExpectancy,city.CountryCode = country.Code,Brazil]
[country.Region,country.Population,country.Code = city.CountryCode,'Angola']
[country.Region,country.Population,country.Code = city.CountryCode,'Angola']
[country.LifeExpectancy,country.Region,'Central Africa']
[country.LifeExpectancy, country.Continent, country.Region, 'Central Africa']
[country.Name, country.LifeExpectancy, country.Continent, city.CountryCode = country.Code, countrylanguage.CountryCode = country.Code, Asia]
[country.Name,country.Continent,country.LifeExpectancy,Asia]
[country.Population, country.GNP, country.Continent, country.Code = city.CountryCode, country.Code = countrylanguage.CountryCode, Asia]
[country.Population, country.Continent, country.GNP, country.Code = city.CountryCode, country.Code = countrylanguage.CountryCode, 'Asia']
[country.LifeExpectancy, country.Continent, country.GovernmentForm, African, republics]
[country.LifeExpectancy, country.Continent, country.GovernmentForm, Africa, republic]
[country.SurfaceArea, country.Continent, country.Code = city.CountryCode, country.Code = countrylanguage.CountryCode, Asia, Europe]
[country.SurfaceArea,country.Continent,'Asia','Europe']
[city.Population,city.District,city.CountryCode = country.Code,'Gelderland']
[country.Population,city.Population,city.CountryCode = country.Code,'Gelderland']
[country.GNP,country.Population,country.GovernmentForm,city.CountryCode = country.Code,'US territory']
[country.GNP,country.Population,country.Continent,country.Code = city.CountryCode,country.Code = countrylanguage.CountryCode,US]
[countrylanguage.Language, countrylanguage.CountryCode = country.Code]
[countrylanguage.Language, country.Code = countrylanguage.CountryCode]
[country.GovernmentForm, country.Continent, 'Africa']
[country.GovernmentForm,country.Continent,Africa]
[COUNT(DISTINCT countrylanguage.Language),city.CountryCode = country.Code,'Aruba']
[countrylanguage.Language,country.Code = countrylanguage.CountryCode,'Aruba']
[COUNT(countrylanguage.Language), country.Name, country.Code = city.CountryCode, country.Code = countrylanguage.CountryCode, 'Afghanistan']
[COUNT(countrylanguage.Language),countrylanguage.CountryCode = country.Code,country.Code]
[country.Name, country.Code = countrylanguage.CountryCode, countrylanguage.Language]
[country.Name, country.Code = countrylanguage.CountryCode, countrylanguage.*]
[country.Continent, country.Code = countrylanguage.CountryCode, countrylanguage.Language]
[countrylanguage.Continent, countrylanguage.Language, country.Code = countrylanguage.CountryCode]
[country.*,country.Code = countrylanguage.CountryCode,countrylanguage.Language,English,Dutch]
[COUNT(country.Code), country.Code = countrylanguage.CountryCode, countrylanguage.Language, 'English', 'Dutch']
[country.Name, country.Code = countrylanguage.CountryCode, countrylanguage.Language, 'English', 'French']
[country.Name,country.Code = countrylanguage.CountryCode,countrylanguage.Language,English,French]
[country.Name, country.Code = countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, English, French, 'T']
[country.Name, countrylanguage.Language, countrylanguage.IsOfficial, country.Code = city.CountryCode, country.Code = countrylanguage.CountryCode, "English", "French", "T"]
[COUNT(DISTINCT country.Continent),countrylanguage.Language,country.Code = countrylanguage.CountryCode,'Chinese']
[country.Continent,country.Code = countrylanguage.CountryCode,'Chinese']
[country.Region,country.Code = countrylanguage.CountryCode,countrylanguage.Language,English, Dutch]
[country.Region, country.Code = city.CountryCode, country.Code = countrylanguage.CountryCode, countrylanguage.Language, 'Dutch', 'English']
[country.Name, country.Code = countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, English, Dutch, true]
[country.Name, country.Code = city.CountryCode, country.Code = countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, English, Dutch, Yes]
[countrylanguage.Language, countrylanguage.Percentage, country.Code = countrylanguage.CountryCode, country.Continent, 'Asia']
[countrylanguage.Language, country.Continent, country.Code = city.CountryCode, country.Code = countrylanguage.CountryCode, Asia]
[countrylanguage.Language, countrylanguage.CountryCode, country.Code, country.GovernmentForm, "republic"]
[countrylanguage.Language,countrylanguage.CountryCode,country.GovernmentForm,'Republic']
[city.Population, countrylanguage.Language, city.CountryCode = country.Code, countrylanguage.CountryCode = country.Code, English]
[city.Name, countrylanguage.Language, city.CountryCode = country.Code, countrylanguage.CountryCode = country.Code, 'English']
[country.Name, country.Population, country.LifeExpectancy, country.SurfaceArea, city.CountryCode = country.Code, countrylanguage.CountryCode = country.Code, Asian]
[country.Name, country.Population, country.LifeExpectancy, country.Continent = Asia, country.SurfaceArea = land]
[country.LifeExpectancy, country.Code = countrylanguage.CountryCode, countrylanguage.Language = "English", countrylanguage.IsOfficial = "No"]
[country.LifeExpectancy, country.Code = countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, English, not official]
[country.Population, country.Code = countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, English, No]
[country.Population, country.Code = countrylanguage.CountryCode, countrylanguage.Language, 'English']
[countrylanguage.Language,countrylanguage.CountryCode = country.Code,country.HeadOfState,'Beatrix']
[countrylanguage.Language,country.HeadOfState,countrylanguage.CountryCode = country.Code,'Beatrix']
[COUNT(DISTINCT countrylanguage.Language), country.IndepYear, country.Code = city.CountryCode, country.Code = countrylanguage.CountryCode, 1930]
[country.Code, country.IndepYear, COUNT(DISTINCT countrylanguage.Language), countrylanguage.CountryCode]
[country.Name,country.SurfaceArea,city.CountryCode = country.Code,Europe]
[country.Name,country.SurfaceArea,Europe]
[country.Name, country.Population, country.Continent, country.Code = city.CountryCode, countrylanguage.CountryCode = country.Code, Africa, Asia]
[country.Name, country.Population, country.Continent, city.CountryCode = country.Code, countrylanguage.CountryCode = country.Code, Africa, Asia]
[country.Name, country.Population, country.Continent, city.CountryCode = country.Code, countrylanguage.CountryCode = country.Code, 'Asia', 'Africa']
[country.Name, country.Population, country.Continent, country.Code = city.CountryCode, country.Code = countrylanguage.CountryCode, Asia, Africa]
[country.Code,countrylanguage.Language,'English']
[country.Code, countrylanguage.Language, country.Code = countrylanguage.CountryCode, English]
[country.Code,countrylanguage.Language,country.Code = countrylanguage.CountryCode,'English']
[country.Code, countrylanguage.CountryCode, countrylanguage.Language != 'English']
[country.Code, countrylanguage.Language, country.GovernmentForm, country.Code = countrylanguage.CountryCode, 'English', 'Republic']
[country.Code, countrylanguage.Language, country.GovernmentForm, city.CountryCode = country.Code, countrylanguage.CountryCode = country.Code, English, Republic]
[city.Name, country.Continent, countrylanguage.Language, countrylanguage.IsOfficial, city.CountryCode = country.Code, countrylanguage.CountryCode = country.Code, European, English, not official]
[city.Name, city.CountryCode, country.Code, countrylanguage.Language, countrylanguage.IsOfficial, Europe, English, 'F']
[city.Name, country.Continent, country.Code, countrylanguage.Language, countrylanguage.IsOfficial, city.CountryCode = country.Code, countrylanguage.CountryCode = country.Code, Asian, Chinese, true]
[city.Name, city.Continent, countrylanguage.Language, countrylanguage.IsOfficial, Asia, Chinese, True]
[country.Name, country.IndepYear, country.SurfaceArea, country.Population]
[country.Name, country.IndepYear, country.SurfaceArea, country.Population]
[country.Population, country.Name, country.HeadOfState]
[country.Name, country.Population, country.HeadOfState, country.SurfaceArea]
[country.Name, COUNT(countrylanguage.Language), country.Code = city.CountryCode, country.Code = countrylanguage.CountryCode, 3]
[country.Name, country.Code = countrylanguage.CountryCode, COUNT(countrylanguage.Language), 2]
[city.District,city.Population]
[city.District, city.Population]
[country.GovernmentForm, country.Population, country.LifeExpectancy, city.CountryCode = country.Code, countrylanguage.CountryCode = country.Code, 72]
[country.GovernmentForm, country.Population, country.LifeExpectancy, 72]
[country.Continent, country.LifeExpectancy, country.Population, city.CountryCode = country.Code, countrylanguage.CountryCode = country.Code, 72]
[country.Continent, country.Population, country.LifeExpectancy, 72]
[country.Name, country.SurfaceArea, 5]
[country.Name, country.SurfaceArea]
[country.Name, country.Population]
[country.Name]
[country.Name,country.Population]
[country.Name, country.Population]
[COUNT(country.Code),country.Continent,'Asia']
[COUNT(country.Code), country.Continent, "Asia"]
[country.Name, country.Continent, country.Population, 'Europe', 80000]
[country.Name, country.Continent, country.Population, country.Code = city.CountryCode, country.Code = countrylanguage.CountryCode, Europe, 80000]
[country.Population, country.SurfaceArea, country.Continent = 'North America', country.SurfaceArea > 3000]
[country.Population, country.SurfaceArea, country.Continent, city.CountryCode = country.Code, country.Code = countrylanguage.CountryCode, >3000, North America]
[city.*, city.Population, 160000, 900000]
[city.Name, city.Population, 160000, 900000]
[countrylanguage.Language, countrylanguage.CountryCode = country.Code, country.Name, country.Code]
[countrylanguage.Language,countrylanguage.CountryCode = country.Code]
[countrylanguage.Language,countrylanguage.Percentage,country.Name,countrylanguage.CountryCode = country.Code]
[country.Code, countrylanguage.Language, country.Code = countrylanguage.CountryCode]
[COUNT(country.Code), countrylanguage.Language, countrylanguage.Percentage, country.Code = countrylanguage.CountryCode, Spanish]
[COUNT(country.Code), country.Code = countrylanguage.CountryCode, countrylanguage.Language = 'Spanish', countrylanguage.IsOfficial = 'T']
[country.Code = countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.Percentage, Spanish]
[country.Code, countrylanguage.Language, countrylanguage.Percentage, country.Code = countrylanguage.CountryCode, Spanish]
[conductor.Conductor_ID]
[conductor.Conductor_ID]
[conductor.Name,conductor.Age]
[conductor.Name, conductor.Age]
[conductor.Name, conductor.Nationality, 'USA']
[conductor.Name, conductor.Nationality, 'USA']
[orchestra.Record_Company,orchestra.Year_of_Founded]
[orchestra.Record_Company,orchestra.Year_of_Founded]
[show.Attendance]
[show.Attendance]
[performance.Share, performance.Type, 'Live final']
[performance.Share,performance.Type,'Live final']
[conductor.Nationality]
[conductor.Nationality]
[conductor.Name, conductor.Year_of_Work]
[conductor.Name,conductor.Year_of_Work]
[conductor.Name, conductor.Year_of_Work]
[conductor.Name,conductor.Year_of_Work]
[conductor.Name, orchestra.Orchestra, orchestra.Conductor_ID = conductor.Conductor_ID]
[conductor.Name,orchestra.Orchestra,orchestra.Conductor_ID = conductor.Conductor_ID]
[conductor.Name, orchestra.Conductor_ID]
[conductor.Name, orchestra.Conductor_ID = conductor.Conductor_ID]
[conductor.Name, orchestra.Conductor_ID]
[conductor.Name,orchestra.Conductor_ID = conductor.Conductor_ID]
[conductor.Name,orchestra.Conductor_ID = conductor.Conductor_ID,orchestra.Year_of_Founded,2008]
[conductor.Name,orchestra.Conductor_ID = conductor.Conductor_ID,orchestra.Year_of_Founded,2008]
[orchestra.Record_Company, COUNT(orchestra.Orchestra_ID)]
[orchestra.*, orchestra.Record_Company]
[orchestra.Major_Record_Format]
[orchestra.Major_Record_Format]
[orchestra.Record_Company,orchestra.*]
[orchestra.Record_Company]
[orchestra.Orchestra, performance.*]
[orchestra.Orchestra, performance.Orchestra_ID]
[orchestra.Record_Company,orchestra.Year_of_Founded,2003]
[orchestra.Record_Company, orchestra.Year_of_Founded]
[orchestra.Orchestra_ID, orchestra.Major_Record_Format, 'CD', 'DVD']
[orchestra.Major_Record_Format, 'CD', 'DVD']
[orchestra.Year_of_Founded, performance.Orchestra_ID = orchestra.Orchestra_ID, performance.Performance_ID]
[orchestra.Year_of_Founded,performance.Orchestra_ID = orchestra.Orchestra_ID]
[Highschooler.ID]
[Highschooler.ID]
[Highschooler.name, Highschooler.grade]
[Highschooler.name, Highschooler.grade]
[Highschooler.grade]
[Highschooler.grade]
[Highschooler.grade, Highschooler.name, 'Kyle']
[Highschooler.grade, Highschooler.name, 'Kyle']
[Highschooler.name, Highschooler.grade, 10]
[Highschooler.name, Highschooler.grade, 10]
[Highschooler.ID, Highschooler.name, 'Kyle']
[Highschooler.ID]
[Highschooler.ID, Highschooler.grade, 9, 10]
[Highschooler.*, Highschooler.grade, 9, 10]
[Highschooler.ID, Highschooler.grade]
[Highschooler.*, Highschooler.grade]
[Highschooler.grade,Highschooler.ID]
[Highschooler.grade, Highschooler.*]
[Highschooler.grade,COUNT(Highschooler.ID),4]
[Highschooler.grade,4]
[Highschooler.ID, COUNT(Friend.friend_id), Friend.student_id = Highschooler.ID]
[COUNT(Friend.friend_id),Highschooler.ID,Friend.student_id = Highschooler.ID]
[Highschooler.name,Friend.friend_id,Highschooler.ID,Friend.student_id,COUNT(Friend.friend_id)]
[Highschooler.name,Friend.friend_id,Friend.student_id]
[Highschooler.name, Friend.student_id = Highschooler.ID]
[Highschooler.name, Friend.student_id = Highschooler.ID]
[Highschooler.name,Friend.student_id,3]
[Highschooler.name,Friend.student_id = Highschooler.ID,COUNT(Friend.friend_id),3]
[Highschooler.name,Friend.friend_id,Friend.student_id,Highschooler.ID,Kyle]
[Highschooler.name,Friend.friend_id,Friend.student_id,Highschooler.ID,'Kyle']
[Friend.friend_id, Friend.student_id = Highschooler.ID, Highschooler.ID, Highschooler.name, 'Kyle']
[Friend.student_id = Highschooler.ID, Highschooler.name, 'Kyle']
[Highschooler.ID,Friend.student_id = Highschooler.ID]
[Highschooler.ID, Friend.student_id]
[Highschooler.name,Friend.friend_id,Highschooler.ID = Friend.student_id]
[Highschooler.name, Friend.student_id = Highschooler.ID, Friend.friend_id = Highschooler.ID]
[Highschooler.ID, Friend.student_id = Highschooler.ID, Friend.friend_id = Highschooler.ID, Likes.student_id = Highschooler.ID, Likes.liked_id = Highschooler.ID]
[Highschooler.ID, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id]
[Highschooler.name, Friend.student_id, Likes.student_id, Likes.liked_id]
[Highschooler.name, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id]
[Likes.*, Highschooler.ID, Likes.student_id = Highschooler.ID]
[Likes.student_id, COUNT(Likes.student_id)]
[Highschooler.name,Likes.student_id]
[Highschooler.name,Likes.student_id,COUNT(Likes.liked_id),Highschooler.ID = Likes.student_id]
[Highschooler.name,Likes.student_id = Highschooler.ID,Likes.*]
[Highschooler.name, Likes.student_id = Highschooler.ID, Likes.*]
[Highschooler.name,Likes.student_id = Highschooler.ID]
[Highschooler.name,Likes.student_id,2]
[Highschooler.name,Highschooler.grade,Friend.student_id,2,5]
[Highschooler.name, Highschooler.grade, Friend.student_id = Highschooler.ID]
[COUNT(Likes.*),Highschooler.name,Likes.student_id = Highschooler.ID,'Kyle']
[COUNT(Likes.student_id),Likes.student_id = Highschooler.ID,Highschooler.ID,'Kyle']
[Highschooler.grade,Friend.student_id = Highschooler.ID]
[Highschooler.grade,Friend.student_id = Highschooler.ID]
[Highschooler.grade,Friend.student_id = Highschooler.ID]
[Highschooler.grade,Friend.friend_id, Friend.student_id]
[Owners.state,Professionals.state]
[Owners.state, Professionals.state]
[Dogs.age,Treatments.dog_id = Dogs.dog_id]
[Dogs.age,Treatments.dog_id = Dogs.dog_id]
[Professionals.professional_id, Professionals.last_name, Professionals.cell_number, Professionals.state, Treatments.professional_id, 'Indiana', >2]
[Professionals.professional_id, Professionals.last_name, Professionals.cell_number, Professionals.state, Treatments.professional_id, 'Indiana']
[Dogs.name,Treatments.cost_of_treatment,Dogs.dog_id = Treatments.dog_id,1000]
[Dogs.name, Treatments.cost_of_treatment, Dogs.owner_id = Owners.owner_id, Treatments.dog_id = Dogs.dog_id, 1000]
[Professionals.first_name, Owners.first_name, Dogs.name]
[Professionals.first_name, Owners.first_name, Dogs.name]
[Professionals.professional_id, Professionals.role_code, Professionals.email_address, Treatments.professional_id]
[Professionals.professional_id, Professionals.role_code, Professionals.email_address, Treatments.professional_id]
[Owners.owner_id, Owners.first_name, Owners.last_name, Dogs.owner_id]
[Owners.owner_id, Owners.first_name, Owners.last_name, Dogs.owner_id]
[Professionals.professional_id, Professionals.role_code, Professionals.first_name, Treatments.professional_id]
[Professionals.professional_id, Professionals.role_code, Professionals.first_name, Treatments.professional_id]
[Breeds.breed_name, Dogs.breed_code = Breeds.breed_code, Dogs.*]
[Breeds.breed_name,Dogs.breed_code = Breeds.breed_code]
[Owners.owner_id,Owners.last_name,Treatments.dog_id,Treatments.dog_id = Dogs.dog_id,Dogs.owner_id = Owners.owner_id]
[Owners.owner_id, Owners.last_name, Treatments.cost_of_treatment, Treatments.dog_id = Dogs.dog_id, Treatments.professional_id = Professionals.professional_id]
[Treatment_Types.treatment_type_description,Treatments.cost_of_treatment,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]
[Treatment_Types.treatment_type_description,Treatments.cost_of_treatment,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]
[Owners.owner_id,Owners.zip_code,Treatments.cost_of_treatment,Owners.owner_id = Dogs.owner_id,Treatments.dog_id = Dogs.dog_id]
[Owners.owner_id, Owners.zip_code, Treatments.cost_of_treatment, Treatments.dog_id = Dogs.dog_id, Dogs.owner_id = Owners.owner_id]
[Professionals.professional_id, Professionals.cell_number, Treatments.professional_id = Professionals.professional_id, Treatments.treatment_type_code = Treatment_Types.treatment_type_code]
[Professionals.professional_id, Professionals.cell_number, Treatments.professional_id, Treatments.treatment_type_code]
[Professionals.first_name, Professionals.last_name, Treatments.professional_id, Treatments.cost_of_treatment]
[Professionals.first_name, Professionals.last_name, Treatments.professional_id, Treatments.cost_of_treatment, average]
[Treatments.date_of_treatment,Treatments.professional_id = Professionals.professional_id,Professionals.first_name]
[Treatments.date_of_treatment,Professionals.first_name,Treatments.professional_id = Professionals.professional_id]
[Treatments.cost_of_treatment,Treatments.treatment_type_code = Treatment_Types.treatment_type_code,Treatment_Types.treatment_type_description]
[Treatments.cost_of_treatment, Treatment_Types.treatment_type_description, Treatments.treatment_type_code = Treatment_Types.treatment_type_code]
[Owners.first_name, Owners.last_name, Dogs.size_code, Dogs.owner_id = Owners.owner_id, Dogs.size_code = Sizes.size_code]
[Owners.first_name, Owners.last_name, Dogs.owner_id = Owners.owner_id, Sizes.size_description, Dogs.size_code = Sizes.size_code]
[Owners.first_name,Dogs.name,Dogs.owner_id = Owners.owner_id]
[Owners.first_name, Dogs.name, Dogs.owner_id = Owners.owner_id]
[Dogs.name, Breeds.breed_name, Treatments.date_of_treatment, Dogs.breed_code = Breeds.breed_code, Treatments.dog_id = Dogs.dog_id]
[Dogs.name, Breeds.breed_name, Treatments.date_of_treatment, Treatments.dog_id = Dogs.dog_id, Dogs.breed_code = Breeds.breed_code]
[Dogs.*, Owners.state = 'Virginia', Owners.first_name, Dogs.name]
[Owners.first_name,Owners.state,'Virginia',Dogs.name,Dogs.owner_id = Owners.owner_id]
[Dogs.date_arrived, Dogs.date_departed, Treatments.dog_id = Dogs.dog_id]
[Dogs.date_arrived, Dogs.date_departed, Treatments.dog_id = Dogs.dog_id]
[Owners.last_name, Dogs.age, Dogs.owner_id]
[Owners.last_name,Dogs.owner_id = Owners.owner_id]
[Professionals.email_address,Professionals.state,'Hawaii','Wisconsin']
[Professionals.email_address, Professionals.state, 'Hawaii', 'Wisconsin']
[Dogs.date_arrived, Dogs.date_departed, Dogs.*]
[Dogs.date_arrived, Dogs.date_departed]
[COUNT(DISTINCT Dogs.dog_id),Treatments.dog_id = Dogs.dog_id]
[COUNT(Dogs.dog_id), Treatments.dog_id = Dogs.dog_id]
[Professionals.professional_id, Treatments.professional_id = Professionals.professional_id, Treatments.dog_id = Dogs.dog_id]
[COUNT(Professionals.professional_id),Treatments.professional_id = Professionals.professional_id]
[Professionals.role_code, Professionals.street, Professionals.city, Professionals.state, Professionals.city = 'West']
[Professionals.role_code, Professionals.street, Professionals.city, Professionals.state, 'West']
[Owners.first_name, Owners.last_name, Owners.email_address, Owners.state, 'North']
[Owners.first_name, Owners.last_name, Owners.email_address, Owners.state, 'North']
[Dogs.age, average]
[COUNT(Dogs.dog_id),Dogs.age]
[Treatments.cost_of_treatment]
[Treatments.cost_of_treatment]
[Dogs.dog_id = Treatments.dog_id]
[COUNT(Dogs.dog_id),Treatments.dog_id = Dogs.dog_id]
[Owners.owner_id = Dogs.owner_id]
[Owners.owner_id = Dogs.owner_id]
[Professionals.professional_id = Treatments.professional_id]
[Professionals.professional_id = Treatments.professional_id]
[Dogs.name, Dogs.age, Dogs.weight, Dogs.abandoned_yn, 1]
[Dogs.name, Dogs.age, Dogs.weight, Dogs.abandoned_yn=1]
[Dogs.age]
[Dogs.age]
[Dogs.age]
[Dogs.age]
[Charges.charge_type, Charges.charge_amount]
[Charges.charge_type, Charges.charge_amount]
[Charges.charge_amount]
[Charges.charge_amount, Charges.charge_type]
[Professionals.email_address, Professionals.cell_number, Professionals.home_phone]
[Professionals.email_address, Professionals.cell_number, Professionals.home_phone]
[Breeds.breed_name, Dogs.breed_code = Breeds.breed_code, Sizes.size_description, Dogs.size_code = Sizes.size_code]
[Breeds.breed_name, Sizes.size_description, Dogs.*]
[Professionals.first_name, Treatment_Types.treatment_type_description]
[Professionals.first_name, Treatment_Types.treatment_type_description]
[COUNT(singer.Singer_ID)]
[singer.*]
[singer.Name, singer.Net_Worth_Millions]
[singer.Name, singer.Net_Worth_Millions]
[singer.Birth_Year, singer.Citizenship]
[singer.Birth_Year, singer.Citizenship]
[singer.Name, singer.Citizenship, 'France']
[singer.Name,singer.Citizenship,'French']
[singer.Name, singer.Birth_Year, 1948, 1949]
[singer.Name, singer.Birth_Year, 1948, 1949]
[singer.Name, singer.Net_Worth_Millions]
[singer.Name, singer.Net_Worth_Millions]
[singer.Citizenship]
[singer.Citizenship, singer.Singer_ID]
[singer.Citizenship]
[singer.Citizenship]
[singer.Citizenship,singer.Net_Worth_Millions]
[singer.Citizenship,singer.Net_Worth_Millions]
[song.Title,singer.Name,song.Singer_ID = singer.Singer_ID]
[song.Title, singer.Name]
[singer.Name, song.Sales, song.Singer_ID = singer.Singer_ID]
[singer.Name, song.Sales, song.Singer_ID = singer.Singer_ID, 300000]
[singer.Name, song.Singer_ID = singer.Singer_ID]
[singer.Name, song.Singer_ID = singer.Singer_ID]
[singer.Name, song.Sales, song.Singer_ID = singer.Singer_ID]
[singer.Name,song.Sales,song.Singer_ID = singer.Singer_ID]
[singer.Name, song.Singer_ID]
[singer.Name, song.Singer_ID = singer.Singer_ID]
[singer.Citizenship,singer.Birth_Year,1945,1955]
[singer.Citizenship, singer.Singer_ID, singer.Birth_Year, 1945, 1955]
[Other_Available_Features.*]
[Ref_Feature_Types.feature_type_name,Other_Available_Features.feature_name,'AirCon']
[]
[Properties.property_name, Properties.property_type_code = Ref_Property_Types.property_type_code, Properties.room_count, house, apartment, >1]
