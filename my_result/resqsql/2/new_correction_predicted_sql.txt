SELECT COUNT(Singer_ID) FROM singer
SELECT COUNT(*) FROM singer
SELECT name, country, age FROM singer ORDER BY age DESC
SELECT singer.Name, singer.Country, singer.Age FROM singer ORDER BY singer.Age DESC
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'
SELECT avg(Age), min(Age), max(Age) FROM singer WHERE Country = 'France'
SELECT singer.Name, singer.Song_Release_Year FROM singer ORDER BY singer.Age ASC LIMIT 1
SELECT s.name, s.song_release_year FROM singer s WHERE s.age = (   SELECT MIN(age) FROM singer )
SELECT DISTINCT Country FROM singer WHERE Age > 20
SELECT DISTINCT Country FROM singer WHERE Age > 20
SELECT country, COUNT(*) FROM singer GROUP BY country
SELECT country, COUNT(*) AS singer_count FROM singer GROUP BY country
SELECT singer.Song_Name  FROM singer  WHERE singer.Age > (SELECT AVG(Age) FROM singer)
SELECT s.song_name FROM singer s WHERE s.age > (SELECT AVG(age) FROM singer)
SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000
SELECT MAX(Capacity), AVG(Capacity) FROM stadium
SELECT avg(capacity) AS average_capacity, max(capacity) AS maximum_capacity FROM stadium
SELECT stadium.Name, stadium.Capacity FROM stadium ORDER BY stadium.Average DESC LIMIT 1
SELECT name, capacity FROM stadium ORDER BY average DESC LIMIT 1
SELECT COUNT(DISTINCT concert_ID) FROM concert WHERE Year = 2014 OR Year = 2015
SELECT count(DISTINCT concert_ID) FROM concert WHERE Year = 2014 OR Year = 2015
SELECT stadium.Name, COUNT(concert.concert_ID) AS Concert_Count FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name
SELECT COUNT(concert_ID) AS concert_count, stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name
SELECT name, capacity FROM stadium WHERE stadium_id IN (     SELECT stadium_id     FROM concert     WHERE year >= 2014 ) GROUP BY name, capacity ORDER BY COUNT(*) DESC LIMIT 1
SELECT name, capacity  FROM stadium  WHERE stadium_id = (     SELECT stadium_id      FROM concert      WHERE year > 2013      GROUP BY stadium_id      ORDER BY COUNT(concert_id) DESC      LIMIT 1 )
SELECT Year, COUNT(*) AS num_concerts FROM concert GROUP BY year ORDER BY num_concerts DESC LIMIT 1
SELECT year, COUNT(*) as concert_count FROM concert GROUP BY year ORDER BY concert_count DESC LIMIT 1
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT DISTINCT stadium_id FROM concert)
SELECT name FROM stadium WHERE stadium.Stadium_ID NOT IN (SELECT concert.Stadium_ID FROM concert)
SELECT DISTINCT Country  FROM singer  WHERE age > 40 OR age < 30
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)
SELECT name  FROM stadium  WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)
SELECT concert_name, theme, COUNT(singer_id)  FROM concert  JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID  GROUP BY concert_name, theme
SELECT concert.concert_Name, concert.Theme, COUNT(singer.Singer_ID) FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_Name, concert.Theme
SELECT singer.Name, COUNT(singer_in_concert.Singer_ID) AS concert_count FROM singer_in_concert JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID GROUP BY singer.Name
SELECT singer.Name, COUNT(singer_in_concert.concert_ID)  FROM singer_in_concert  JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID  GROUP BY singer.Name
SELECT singer.Name FROM singer_in_concert JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID JOIN singer ON singer_in_concert.singer_ID = singer.Singer_ID WHERE concert.Year = 2014
SELECT singer.Name  FROM singer_in_concert  JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID  JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID  WHERE concert.Year = 2014
SELECT singer.Name, singer.Country  FROM singer  WHERE singer.Song_Name LIKE '%Hey%'
SELECT name, country FROM singer WHERE Song_Name LIKE '%Hey%'
SELECT T2.Name, T2.Location FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T1.Year = 2014 AND T1.Stadium_ID IN (     SELECT Stadium_ID FROM concert WHERE Year = 2015 )
SELECT T1.Name, T1.Location  FROM stadium AS T1  JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID  WHERE T2.Year = 2014  INTERSECT  SELECT T1.Name, T1.Location  FROM stadium AS T1  JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID  WHERE T2.Year = 2015
SELECT COUNT(*)  FROM concert  WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1);
SELECT count(DISTINCT concert_ID) AS Number_of_Concerts FROM concert WHERE Stadium_ID = (   SELECT Stadium_ID   FROM stadium   WHERE Capacity = (     SELECT MAX(Capacity)     FROM stadium   ) )
SELECT COUNT(*) FROM Pets WHERE weight > 10
SELECT count(*) FROM Pets WHERE weight > 10
SELECT weight  FROM Pets  WHERE PetType = 'dog'  AND pet_age = (     SELECT MIN(pet_age)      FROM Pets      WHERE PetType = 'dog' )
SELECT weight FROM Pets WHERE PetType = 'dog' AND pet_age = (   SELECT MIN(pet_age)   FROM Pets   WHERE PetType = 'dog' )
SELECT MAX(weight) AS max_weight, pet_type FROM Pets GROUP BY pet_type
SELECT MAX(weight) AS max_weight, PetType FROM Pets GROUP BY PetType
SELECT COUNT(DISTINCT has_pet.PetID) FROM has_pet JOIN Student ON has_pet.StuID = Student.StuID JOIN Pets ON has_pet.PetID = Pets.PetID WHERE Student.Age > 20
SELECT count(DISTINCT has_pet.petid) FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE student.age > 20
SELECT 
SELECT count(DISTINCT pets.petid) FROM pets  JOIN has_pet ON pets.petid = has_pet.petid  JOIN student ON student.stuid = has_pet.stuid  WHERE pets.pettype = 'dog'  AND student.sex = 'female'
SELECT COUNT(DISTINCT PetType) FROM Pets
SELECT COUNT(DISTINCT PetType) FROM Pets
SELECT fname FROM Student WHERE StuID IN (   SELECT StuID   FROM Has_Pet   WHERE PetID IN (     SELECT PetID     FROM Pets     WHERE PetType IN ('cat', 'dog')   ) )
SELECT DISTINCT fname FROM Student WHERE EXISTS (     SELECT *     FROM Has_Pet     INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE Has_Pet.StuID = Student.StuID     AND (Pets.PetType = 'cat' OR Pets.PetType = 'dog') )
SELECT fname FROM Student WHERE StuID IN (   SELECT StuID   FROM Has_Pet   INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE PetType = 'cat' ) AND StuID IN (   SELECT StuID   FROM Has_Pet   INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE PetType = 'dog' )
SELECT DISTINCT fname  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType IN ('cat', 'dog') GROUP BY Student.StuID HAVING COUNT(DISTINCT Pets.PetType) = 2
SELECT major, age  FROM Student  WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))
SELECT major, age FROM Student WHERE StuID NOT IN (   SELECT StuID   FROM Has_Pet   WHERE PetID IN (     SELECT PetID     FROM Pets     WHERE PetType = 'cat'   ) )
SELECT Student.StuID  FROM Student  LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType != 'cat' OR Pets.PetType IS NULL
SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat')
SELECT fname, age  FROM Student  WHERE StuID IN (     SELECT Has_Pet.StuID      FROM Has_Pet      INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID      WHERE Pets.PetType = 'dog' )  AND StuID NOT IN (     SELECT Has_Pet.StuID      FROM Has_Pet      INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID      WHERE Pets.PetType = 'cat' )
SELECT fname FROM Student WHERE EXISTS (     SELECT *     FROM Has_Pet     INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE Has_Pet.StuID = Student.StuID AND Pets.PetType = 'dog' ) AND NOT EXISTS (     SELECT *     FROM Has_Pet     INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE Has_Pet.StuID = Student.StuID AND Pets.PetType = 'cat' );
SELECT pettype, weight FROM Pets WHERE pet_age = (     SELECT MIN(pet_age)     FROM Pets )
SELECT Pets.PetType, Pets.weight  FROM Pets  WHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1
SELECT Pets.PetID, Pets.weight  FROM Pets  WHERE Pets.pet_age > 1
SELECT pets.pettype, AVG(pets.pet_age), MAX(pets.pet_age) FROM pets GROUP BY pets.pettype
SELECT AVG(pet_age) AS average_age, MAX(pet_age) AS maximum_age, pet_type FROM Pets GROUP BY pet_type
SELECT pets.pettype, AVG(pets.weight) FROM pets GROUP BY pets.pettype
SELECT pettype, AVG(weight) AS average_weight FROM Pets GROUP BY pettype
SELECT student.Fname, student.Age FROM Student WHERE EXISTS (     SELECT *     FROM Has_Pet     WHERE Has_Pet.StuID = Student.StuID )
SELECT DISTINCT fname, age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)
SELECT has_pet.PetID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.LName = 'Smith'
SELECT Pets.PetID FROM Has_Pet JOIN Student ON Student.StuID = Has_Pet.StuID WHERE Student.LName = 'Smith'
SELECT COUNT(pets.PetID) AS num_pets, student.StuID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Pets.PetID = Has_Pet.PetID GROUP BY student.StuID
SELECT student.StuID, COUNT(has_pet.PetID)  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  GROUP BY student.StuID
SELECT fname, sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING COUNT(Has_Pet.PetID) > 1
SELECT student.fname, student.sex  FROM student  JOIN has_pet ON student.StuID = has_pet.StuID  GROUP BY student.fname, student.sex  HAVING COUNT(has_pet.PetID) > 1
SELECT student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3 ORDER BY Student.StuID DESC LIMIT 1;
SELECT lname  FROM student  WHERE EXISTS (     SELECT 1      FROM has_pet      INNER JOIN pets ON has_pet.petid = pets.petid      WHERE has_pet.stuid = student.stuid      AND pets.pettype = 'cat'      AND pets.pet_age = 3 ) ORDER BY lname DESC LIMIT 1
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT AVG(Age) AS AverageAge FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT count(DISTINCT ContId) FROM continents
SELECT COUNT(*) FROM continents
SELECT contid, continent, COUNT(countryname) AS country_count FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY contid, continent
SELECT contid, continent, COUNT(countryname) AS country_count FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY contid, continent;
SELECT COUNT(DISTINCT CountryName) FROM countries
SELECT COUNT(DISTINCT CountryName) FROM countries
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.ModelId) AS ModelCount FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.ModelId) AS NumModels FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id
SELECT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model WHERE T1.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model ORDER BY cars_data.Horsepower LIMIT 1
SELECT model FROM car_names  WHERE MakeId IN  (SELECT Id FROM cars_data  WHERE weight <  (SELECT AVG(weight) FROM cars_data))
SELECT model FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT DISTINCT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970;
SELECT SELECT DISTINCT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970
SELECT car_names.Make, MIN(cars_data.Year) FROM car_names  JOIN cars_data ON car_names.MakeId = cars_data.Id  GROUP BY car_names.Make
SELECT car_makers.Maker, MIN(cars_data.Year) AS Earliest_Year FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data) GROUP BY car_makers.Maker
SELECT DISTINCT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Year > 1980;
SELECT continents.continent, COUNT(DISTINCT car_makers.id) AS maker_count FROM continents JOIN countries ON continents.contid = countries.continentid JOIN car_makers ON car_makers.country = countries.countryid GROUP BY continents.continent
SELECT continents.Continent, COUNT(DISTINCT car_makers.Id) FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY continents.Continent
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Maker) DESC LIMIT 1
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Maker) DESC LIMIT 1
SELECT COUNT(model_list.ModelId) AS model_count, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName
SELECT COUNT(T3.Model) AS Number_of_Models, T1.Id, T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T1.Id, T1.FullName
SELECT cars_data.Accelerate  FROM car_names  JOIN cars_data ON car_names.MakeId = cars_data.Id  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_names.Make = 'amc hornet'  AND car_names.Model = 'amc hornet sportabout (sw)'  AND car_makers.Maker = 'amc';
SELECT cars_data.Accelerate FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_names.Make = 'amc hornet' AND model_list.Model = 'amc hornet sportabout (sw)'
SELECT count(DISTINCT Maker) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'france')
SELECT COUNT(DISTINCT Maker) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France')
SELECT count(DISTINCT car_names.ModelId) FROM car_names JOIN model_list ON car_names.ModelId = model_list.ModelId JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'usa'
SELECT COUNT(DISTINCT model_list.ModelId)  FROM model_list  JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN countries ON car_makers.Country = countries.CountryId  WHERE countries.CountryName = 'United States'
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4
SELECT avg(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT min(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974
SELECT car_makers.Maker, car_names.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId
SELECT car_makers.Maker, car_names.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId
SELECT CountryName, CountryId  FROM countries  WHERE CountryId IN (SELECT Country FROM car_makers)
SELECT countryname, countryid FROM countries WHERE countryid IN (SELECT country FROM car_makers)
SELECT count(*) FROM cars_data WHERE Horsepower > 150
SELECT count(*) FROM cars_data WHERE Horsepower > 150
SELECT year, AVG(Weight) FROM cars_data GROUP BY year
SELECT AVG(Weight), Year FROM cars_data GROUP BY Year
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'Europe' GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3
SELECT countries.CountryName  FROM countries  JOIN car_makers ON countries.CountryId = car_makers.Country  WHERE countries.Continent = 'Europe'  GROUP BY countries.CountryName  HAVING COUNT(DISTINCT car_makers.Id) >= 3
SELECT MAX(cars_data.Horsepower) AS max_horsepower, car_makers.Maker AS make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3 GROUP BY car_makers.Maker
SELECT MAX(cars_data.Horsepower) AS MaxHorsepower, car_makers.Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3 GROUP BY car_makers.Maker
SELECT model_list.Model FROM cars_data JOIN model_list ON cars_data.Id = model_list.ModelId ORDER BY cars_data.MPG DESC LIMIT 1
SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId ORDER BY cars_data.MPG DESC LIMIT 1
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980
SELECT AVG(cars_data.Edispl) AS average_edispl FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'volvo'
SELECT AVG(Edispl)  FROM cars_data  WHERE Id IN (   SELECT MakeId    FROM car_names    INNER JOIN model_list ON car_names.Model = model_list.Model    INNER JOIN car_makers ON model_list.Maker = car_makers.Id    WHERE car_makers.Maker = 'volvo' )
SELECT MAX(Accelerate) AS max_accelerate, Cylinders FROM cars_data GROUP BY Cylinders
SELECT cylinders, MAX(accelerate)  FROM cars_data  GROUP BY cylinders
SELECT model, COUNT(*) AS car_count FROM model_list GROUP BY model ORDER BY car_count DESC LIMIT 1
SELECT model  FROM model_list  GROUP BY model  ORDER BY COUNT(DISTINCT ModelId) DESC  LIMIT 1
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4
SELECT COUNT(Id) FROM cars_data WHERE Cylinders > 4
SELECT count(*) FROM cars_data WHERE Year = 1980
SELECT count(*) FROM cars_data WHERE Year = 1980
SELECT COUNT(DISTINCT ModelId)  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  WHERE car_makers.FullName = 'American Motor Company'
SELECT COUNT(Model) FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE FullName = 'American Motor Company')
SELECT fullname, id  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  GROUP BY fullname, id  HAVING COUNT(model_list.ModelId) > 3
SELECT car_makers.Maker, car_makers.Id  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  GROUP BY car_makers.Maker, car_makers.Id  HAVING COUNT(model_list.ModelId) > 3
SELECT DISTINCT T2.Model  FROM model_list AS T2  JOIN car_names AS T1 ON T2.Model = T1.Model  JOIN car_makers AS T3 ON T1.MakeId = T3.Id  JOIN cars_data AS T4 ON T1.MakeId = T4.Id  WHERE T3.FullName = 'General Motors' OR T4.Weight > 3500
SELECT model  FROM model_list  JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN car_names ON model_list.Model = car_names.ModelId  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500  GROUP BY model
SELECT DISTINCT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000
SELECT DISTINCT Year  FROM cars_data  WHERE Weight < 4000 OR Weight > 3000;
SELECT cars_data.Horsepower  FROM cars_data  WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)
SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Accelerate = (SELECT MAX(cars_data.Accelerate) FROM cars_data)
SELECT cylinders FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE accelerate = (     SELECT MIN(accelerate)     FROM cars_data     JOIN car_names ON cars_data.Id = car_names.MakeId     WHERE car_names.model = 'volvo' )
SELECT cylinders FROM cars_data WHERE id IN (   SELECT MIN(id)   FROM cars_data   WHERE id IN (     SELECT MakeId     FROM car_names     WHERE Model IN (       SELECT Model       FROM model_list       WHERE Maker = 'volvo'     )   ) )
SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT count(DISTINCT T1.CountryId)  FROM countries AS T1  JOIN car_makers AS T2 ON T1.CountryId = T2.Country  GROUP BY T1.CountryId  HAVING count(DISTINCT T2.Id) > 2
SELECT count(DISTINCT T1.CountryId)  FROM countries AS T1  JOIN car_makers AS T2 ON T1.CountryId = T2.Country  GROUP BY T1.CountryId  HAVING count(DISTINCT T2.Id) > 2
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6
SELECT model_list.Model FROM cars_data JOIN model_list ON cars_data.Id = model_list.ModelId WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1
SELECT model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Cylinders = 4 GROUP BY model HAVING cars_data.Horsepower = MAX(cars_data.Horsepower)
SELECT car_names.makeid, car_names.make  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  WHERE cars_data.horsepower > (     SELECT MIN(horsepower)      FROM cars_data )  AND cars_data.cylinders <= 3
SELECT car_names.MakeId, car_names.Make  FROM car_names  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data)  AND cars_data.Cylinders < 4
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 AND Year < 1980
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker != 'Ford Motor Company'
SELECT DISTINCT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T1.Weight < 3500 AND T4.Maker <> 'Ford Motor Company'
SELECT countryname FROM countries LEFT JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Country IS NULL
SELECT countryname FROM countries WHERE countryid NOT IN (SELECT country FROM car_makers)
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT model_list.Model) >= 2 AND COUNT(DISTINCT car_makers.Id) > 3
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT model_list.Model) > 1 AND COUNT(*) > 3
SELECT countries.CountryId, countries.CountryName  FROM countries  JOIN car_makers ON car_makers.Country = countries.CountryId  JOIN model_list ON car_makers.Id = model_list.Maker  JOIN car_names ON model_list.Model = car_names.Model  GROUP BY countries.CountryId, countries.CountryName  HAVING COUNT(DISTINCT car_makers.Id) > 3 OR car_names.Make = 'fiat'
SELECT countries.CountryId, countries.CountryName FROM countries WHERE countries.CountryId IN (   SELECT car_makers.Country   FROM car_makers   GROUP BY car_makers.Country   HAVING COUNT(car_makers.Id) > 3 ) OR countries.CountryId IN (   SELECT car_makers.Country   FROM car_names   JOIN model_list ON car_names.Model = model_list.ModelId   JOIN car_makers ON model_list.Maker = car_makers.Id   WHERE car_names.Make = 'fiat' ) GROUP BY countries.CountryId, countries.CountryName
SELECT Country FROM airlines WHERE Airline = "JetBlue Airways"
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT Abbreviation FROM airlines WHERE Airline = "JetBlue Airways"
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT Airline, Abbreviation  FROM airlines  WHERE Country = "USA"
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'
SELECT airportcode, airportname FROM airports WHERE city = 'Anthony'
SELECT airportcode, airportname FROM airports WHERE City = 'Anthony'
SELECT COUNT(DISTINCT Airline) FROM airlines
SELECT count(*) FROM airlines
SELECT count(*) FROM airports
SELECT COUNT(*) FROM airports
SELECT count(*) FROM flights
SELECT count(*) FROM flights
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
SELECT Abbreviation  FROM airlines  WHERE Abbreviation = 'UAL'
SELECT COUNT(*) FROM airlines WHERE Country = 'USA'
SELECT COUNT(*) FROM airlines WHERE Country = 'USA'
SELECT City, Country FROM airports WHERE AirportName = 'Alton';
SELECT city, country  FROM airports  WHERE airportname = 'Alton' AND airportcode IN      (SELECT sourceairport FROM flights      JOIN airports ON flights.destairport = airports.airportcode)
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
SELECT AirportName FROM airports WHERE City = 'Aberdeen'
SELECT AirportName FROM airports WHERE City = 'Aberdeen'
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'
SELECT count(*) FROM airports  JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = 'Aberdeen'
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen'
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = "Aberdeen"
SELECT count(*) FROM flights WHERE DestAirport = 'Aberdeen'
SELECT COUNT(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN airports AS dest_airports ON flights.destairport = dest_airports.airportcode WHERE airports.city = 'Aberdeen' AND dest_airports.city = 'Ashley'
SELECT count(FlightNo) FROM flights JOIN airports AS source ON flights.SourceAirport = source.AirportCode JOIN airports AS dest ON flights.DestAirport = dest.AirportCode WHERE source.City = 'Aberdeen' AND dest.City = 'Ashley'
SELECT count(*) FROM flights WHERE Airline = 'JetBlue Airways'
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue Airways'
SELECT COUNT(*)  FROM flights  WHERE Airline = 'United Airlines'  AND DestAirport = 'ASY'
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.SourceAirport = airports.AirportCode OR flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.AirportCode = 'AHD';
SELECT count(*) FROM flights WHERE SourceAirport = 'AHD' AND Airline = 'United Airlines'
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode JOIN airlines ON flights.Airline = airlines.uid WHERE airports.City = 'Aberdeen' AND airlines.Airline = 'United Airlines'
SELECT count(*)  FROM flights  JOIN airports ON flights.destairport = airports.airportcode  JOIN airlines ON flights.airline = airlines.uid  WHERE airports.city = 'Aberdeen'  AND airlines.abbreviation = 'UA'
SELECT airports.City FROM airports JOIN flights ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1
SELECT airports.City FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY COUNT(flights.DestAirport) DESC LIMIT 1
SELECT airports.City  FROM airports  JOIN flights ON airports.AirportCode = flights.SourceAirport  GROUP BY airports.City  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT airports.City  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  GROUP BY airports.City  ORDER BY COUNT(flights.SourceAirport) DESC  LIMIT 1
SELECT airports.AirportCode  FROM airports  JOIN flights ON airports.AirportCode = flights.DestAirport  GROUP BY airports.AirportCode  ORDER BY COUNT(flights.DestAirport) DESC  LIMIT 1
SELECT airports.AirportCode FROM flights GROUP BY flights.DestAirport ORDER BY COUNT(flights.DestAirport) DESC LIMIT 1
SELECT airports.AirportCode FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.AirportCode ORDER BY COUNT(flights.FlightNo) LIMIT 1
SELECT airports.AirportCode FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.AirportCode ORDER BY COUNT(*) ASC LIMIT 1
SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline ORDER BY num_flights DESC LIMIT 1
SELECT airlines.Airline  FROM flights  JOIN airlines ON flights.Airline = airlines.Abbreviation  GROUP BY airlines.Airline  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT abbreviation, country FROM airlines WHERE uid IN (   SELECT Airline   FROM flights   GROUP BY Airline   HAVING COUNT(*) = (     SELECT MIN(cnt)     FROM (       SELECT COUNT(*) as cnt       FROM flights       GROUP BY Airline     )   ) )
SELECT airlines.abbreviation, airlines.country FROM flights JOIN airlines ON flights.airline = airlines.uid GROUP BY airlines.abbreviation, airlines.country HAVING COUNT(*) = (     SELECT MIN(count(*))     FROM (         SELECT COUNT(*) AS count         FROM flights         GROUP BY airline     ) )
SELECT airlines.Airline  FROM airlines  WHERE EXISTS (   SELECT 1    FROM flights    WHERE flights.SourceAirport = 'AHD'    AND flights.Airline = airlines.uid )
SELECT airlines.Airline  FROM airlines  INNER JOIN flights ON flights.Airline = airlines.uid  INNER JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.AirportCode = 'AHD'
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD'
SELECT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  WHERE flights.DestAirport = 'AHD';
SELECT airlines.Airline  FROM flights  JOIN airlines ON flights.Airline = airlines.uid  WHERE flights.SourceAirport IN ('APG', 'CVO')    AND flights.DestAirport IN ('APG', 'CVO')  GROUP BY airlines.Airline  HAVING COUNT(DISTINCT flights.SourceAirport) = 2
SELECT airline  FROM airlines  WHERE uid IN (   SELECT airline    FROM flights    WHERE sourceairport IN ('APG', 'CVO') AND destairport IN ('APG', 'CVO') )  GROUP BY airline  HAVING COUNT(DISTINCT sourceairport) = 2;
SELECT airline FROM airlines WHERE uid IN (SELECT Airline FROM flights WHERE SourceAirport = 'CVO') AND uid NOT IN (SELECT Airline FROM flights WHERE SourceAirport = 'APG');
SELECT DISTINCT Airline  FROM airlines  WHERE AirportCode = 'CVO'  AND Airline NOT IN (SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'APG')
SELECT airlines.airline  FROM airlines  JOIN flights ON airlines.uid = flights.airline  GROUP BY airlines.airline  HAVING COUNT(flights.flightno) >= 10
SELECT airlines.Airline  FROM flights  JOIN airlines ON flights.Airline = airlines.Airline  GROUP BY airlines.Airline  HAVING COUNT(flights.FlightNo) >= 10
SELECT airlines.Airline FROM flights  JOIN airlines ON flights.Airline = airlines.Airline  GROUP BY airlines.Airline  HAVING COUNT(flights.FlightNo) < 200
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING count(*) < 200
SELECT flights.FlightNo FROM flights  JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = "United Airlines"
SELECT flightno FROM flights WHERE Airline = 'United Airlines'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'APG'
SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'APG'
SELECT flightno  FROM flights  WHERE destairport = "APG"
SELECT flights.FlightNo  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG'
SELECT flights.FlightNo  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = "Aberdeen";
SELECT flightno FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen'
SELECT flights.flightno  FROM flights  JOIN airports ON flights.destairport = airports.airportcode  WHERE airports.city = 'Aberdeen'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT COUNT(DISTINCT FlightNo) FROM flights WHERE DestAirport IN (   SELECT AirportCode FROM airports WHERE City = 'Aberdeen' OR City = 'Abilene' )
SELECT count(*) FROM flights WHERE DestAirport IN ('Aberdeen', 'Abilene')
SELECT airportname FROM airports WHERE airportcode NOT IN (   SELECT sourceairport   FROM flights   UNION   SELECT destairport   FROM flights )
SELECT airports.AirportName  FROM airports  LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport  WHERE flights.SourceAirport IS NULL AND flights.DestAirport IS NULL
SELECT COUNT(*) FROM employee
SELECT COUNT(*) FROM employee
SELECT employee.Name FROM employee ORDER BY employee.Age ASC
SELECT employee.Name FROM employee ORDER BY employee.Age ASC;
SELECT city, COUNT(Employee_ID) AS num_employees FROM employee GROUP BY city
SELECT city, COUNT(Employee_ID) AS employee_count FROM employee GROUP BY city
SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(DISTINCT employee_id) > 1
SELECT employee.city  FROM employee  WHERE age < 30  GROUP BY employee.city  HAVING COUNT(*) > 1
SELECT COUNT(DISTINCT shop_id) AS number_of_shops, location FROM shop GROUP BY location
SELECT COUNT(DISTINCT Shop_ID) AS shop_count, Location FROM shop GROUP BY Location
SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop)
SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (   SELECT MAX(Number_products)   FROM shop )
SELECT MIN(Number_products), MAX(Number_products) FROM shop
SELECT MIN(Number_products), MAX(Number_products) FROM shop
SELECT shop.Name, shop.Location, shop.District FROM shop ORDER BY shop.Number_products DESC
SELECT name, location, district FROM shop ORDER BY number_products DESC
SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)
SELECT name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)
SELECT employee.Name FROM employee JOIN evaluation ON evaluation.Employee_ID = employee.Employee_ID GROUP BY employee.Employee_ID, employee.Name ORDER BY COUNT(evaluation.Employee_ID) DESC LIMIT 1
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.Name ORDER BY COUNT(evaluation.Employee_ID) DESC LIMIT 1
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1
SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
SELECT name  FROM employee  WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1
SELECT shop.Name  FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID, shop.Name ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
SELECT name  FROM shop  WHERE shop.Shop_ID NOT IN (SELECT hiring.Shop_ID FROM hiring)
SELECT COUNT(DISTINCT employee.Employee_ID) AS Total_Employees, shop.Name  FROM employee  JOIN hiring ON employee.Employee_ID = hiring.Employee_ID  JOIN shop ON shop.Shop_ID = hiring.Shop_ID  GROUP BY shop.Name
SELECT COUNT(employee.employee_id) AS num_employees, shop.name  FROM shop  JOIN hiring ON shop.shop_id = hiring.shop_id  JOIN employee ON hiring.employee_id = employee.employee_id  GROUP BY shop.shop_id, shop.name
SELECT SUM(Bonus) AS TotalBonus FROM evaluation
SELECT SUM(Bonus) AS TotalBonus FROM evaluation;
SELECT hiring.*  FROM hiring
SELECT * FROM hiring
SELECT district  FROM shop  WHERE district IN (   SELECT district    FROM shop    WHERE number_products < 3000    GROUP BY district   INTERSECT   SELECT district    FROM shop    WHERE number_products > 10000    GROUP BY district )
SELECT DISTINCT district FROM shop WHERE number_products < 3000 OR number_products > 10000 GROUP BY district
SELECT COUNT(DISTINCT Location) FROM shop
SELECT COUNT(DISTINCT Location) FROM shop
SELECT count(*) FROM Documents
SELECT COUNT(*) FROM Documents
SELECT document_id, document_name, document_description FROM Documents
SELECT document_id, document_name, document_description FROM documents
SELECT document_name, template_id FROM documents WHERE document_description LIKE '%w%'
SELECT document_name, template_id FROM Documents WHERE document_description LIKE '%w%';
SELECT document_id, template_id, document_description FROM documents WHERE document_name = "Robbin CV"
SELECT documents.document_id, documents.template_id, documents.document_description  FROM documents  WHERE documents.document_name = 'Robbin CV'
SELECT COUNT(DISTINCT templates.Template_ID) FROM templates JOIN documents ON templates.Template_ID = documents.Template_ID
SELECT count(DISTINCT Template_ID) FROM Documents
SELECT count(DISTINCT Document_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code = 'PPT'
SELECT COUNT(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'PPT'
SELECT Templates.Template_ID, COUNT(Documents.Template_ID) FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID
SELECT Templates.Template_ID, COUNT(Documents.Template_ID) AS Usage_Count FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID
SELECT templates.template_id, templates.template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id GROUP BY templates.template_id, templates.template_type_code ORDER BY COUNT(documents.template_id) DESC LIMIT 1
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1
SELECT Templates.Template_ID  FROM Templates  JOIN Documents ON Templates.Template_ID = Documents.Template_ID  GROUP BY Templates.Template_ID  HAVING COUNT(DISTINCT Documents.Document_ID) > 1
SELECT Templates.Template_ID FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1
SELECT templates.Template_ID  FROM templates  LEFT JOIN documents ON templates.Template_ID = documents.Template_ID  WHERE documents.Document_ID IS NULL
SELECT templates.Template_ID FROM templates LEFT JOIN documents ON templates.Template_ID = documents.Template_ID WHERE documents.Template_ID IS NULL
SELECT COUNT(*) FROM Templates
SELECT COUNT(*) FROM Templates
SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates
SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates
SELECT DISTINCT Template_Type_Code FROM Templates
SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code = 'PP' OR Ref_Template_Types.Template_Type_Code = 'PPT'
SELECT templates.template_id  FROM templates  WHERE templates.template_type_code IN ('PP', 'PPT')
SELECT count(DISTINCT Template_ID) FROM Templates WHERE Template_Type_Code = 'CV'
SELECT COUNT(Template_ID) FROM Templates WHERE Template_Type_Code = 'CV'
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5
SELECT Templates.Version_Number, Templates.Template_Type_Code  FROM Templates  WHERE Templates.Version_Number > 5
SELECT ref_template_types.template_type_code, COUNT(templates.template_id)  FROM ref_template_types  JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  GROUP BY ref_template_types.template_type_code
SELECT ref_template_types.template_type_code, COUNT(templates.template_id)  FROM ref_template_types  JOIN templates ON templates.template_type_code = ref_template_types.template_type_code  GROUP BY ref_template_types.template_type_code
SELECT Ref_Template_Types.Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_Type_Code ORDER BY COUNT(Templates.Template_ID) DESC LIMIT 1
SELECT template_type_code  FROM ref_template_types  GROUP BY template_type_code  HAVING count(*) < 3
SELECT Ref_Template_Types.Template_Type_Code FROM Templates INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_Type_Code HAVING COUNT(Templates.Template_ID) < 3
SELECT MIN(Version_Number) AS Smallest_Version_Number, Template_Type_Code FROM Templates GROUP BY Template_Type_Code
SELECT Version_Number, Template_Type_Code  FROM Templates  ORDER BY Version_Number ASC  LIMIT 1
SELECT template_type_code FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_name = "Data base"
SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Data base'
SELECT documents.document_name  FROM templates  JOIN documents ON templates.template_id = documents.template_id  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_code = 'BK'
SELECT document_name FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'BK')
SELECT T1.Template_Type_Code, COUNT(T3.Document_ID) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID GROUP BY T1.Template_Type_Code
SELECT Ref_Template_Types.Template_Type_Code, COUNT(DISTINCT Documents.Document_ID) AS Document_Count FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code
SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1
SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_Type_Code ORDER BY COUNT(Documents.Template_ID) DESC LIMIT 1
SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN (SELECT template_type_code FROM templates)
SELECT ref_template_types.template_type_code FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code WHERE templates.template_id IS NULL
SELECT template_type_code, template_type_description  FROM Ref_Template_Types
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
SELECT template_type_description  FROM ref_template_types  WHERE template_type_code = "AD"
SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD'
SELECT template_type_code  FROM ref_template_types  WHERE template_type_description = "Book"
SELECT template_type_code  FROM ref_template_types  WHERE template_type_description = "Book"
SELECT DISTINCT ref_template_types.template_type_description  FROM ref_template_types  JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  JOIN documents ON templates.template_id = documents.template_id
SELECT DISTINCT Template_Details FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID
SELECT templates.template_id  FROM templates  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_description = 'Presentation'
SELECT Templates.Template_ID FROM Templates  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation';
SELECT COUNT(Paragraph_ID) FROM Paragraphs;
SELECT COUNT(*) FROM Paragraphs
SELECT COUNT(*) FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show'
SELECT COUNT(Paragraph_ID) AS Paragraph_Count FROM Paragraphs WHERE Document_ID = (   SELECT Document_ID   FROM Documents   WHERE Document_Name = 'Summer Show' )
SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details FROM Paragraphs WHERE Paragraph_Text = 'Korea';
SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'
SELECT paragraph_id, paragraph_text FROM paragraphs WHERE document_id = (     SELECT document_id     FROM documents     WHERE document_name = 'Welcome to NY' )
SELECT paragraph_id, paragraph_text  FROM paragraphs  JOIN documents ON paragraphs.document_id = documents.document_id  WHERE documents.document_name = 'Welcome to NY'
SELECT Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = "Customer reviews"
SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews'
SELECT documents.document_id, COUNT(paragraphs.paragraph_id)  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  ORDER BY documents.document_id
SELECT document_id, COUNT(paragraph_id) AS paragraph_count FROM paragraphs GROUP BY document_id ORDER BY document_id
SELECT document_id, document_name, COUNT(paragraph_id) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS paragraph_count FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name
SELECT document_id  FROM paragraphs  GROUP BY document_id  HAVING count(*) > 1
SELECT documents.document_id  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  HAVING COUNT(paragraphs.paragraph_id) >= 2
SELECT documents.document_id, documents.document_name  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id, documents.document_name  ORDER BY COUNT(paragraphs.paragraph_id) DESC  LIMIT 1
SELECT documents.document_id, documents.document_name  FROM documents  JOIN (SELECT document_id, COUNT(*) AS paragraph_count        FROM paragraphs        GROUP BY document_id) AS paragraph_counts  ON documents.document_id = paragraph_counts.document_id  ORDER BY paragraph_counts.paragraph_count DESC  LIMIT 1
SELECT documents.document_id  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  ORDER BY COUNT(paragraphs.paragraph_id) ASC  LIMIT 1
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY COUNT(Paragraphs.Paragraph_ID) ASC LIMIT 1
SELECT Documents.Document_ID FROM Paragraphs GROUP BY Documents.Document_ID HAVING COUNT(DISTINCT Paragraphs.Paragraph_ID) >= 1 AND COUNT(DISTINCT Paragraphs.Paragraph_ID) <= 2
SELECT documents.document_id  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  HAVING count(paragraphs.paragraph_id) >= 1 AND count(paragraphs.paragraph_id) <= 2
SELECT document_id  FROM Paragraphs  WHERE paragraph_text IN ('Brazil', 'Ireland');
SELECT DISTINCT document_id  FROM paragraphs  WHERE paragraph_text IN ('Brazil', 'Ireland');
SELECT COUNT(Teacher_ID) FROM teacher
SELECT count(*) AS Total_Count_of_Teachers FROM teacher
SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC
SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC
SELECT Age, Hometown FROM teacher
SELECT teacher.age, teacher.hometown FROM teacher
SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'
SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'
SELECT teacher.Name FROM teacher WHERE teacher.Age IN (32, 33)
SELECT name FROM teacher WHERE age = 32 OR age = 33
SELECT teacher.Hometown  FROM teacher  ORDER BY teacher.Age ASC  LIMIT 1
SELECT teacher.Hometown  FROM teacher  ORDER BY teacher.Age ASC  LIMIT 1
SELECT hometown, COUNT(*)  FROM teacher  GROUP BY hometown
SELECT hometown, COUNT(DISTINCT teacher.Teacher_ID)  FROM teacher  GROUP BY hometown
SELECT teacher.Hometown FROM teacher GROUP BY teacher.Hometown ORDER BY COUNT(*) DESC LIMIT 1
SELECT teacher.hometown FROM teacher GROUP BY teacher.hometown ORDER BY COUNT(*) DESC LIMIT 1
SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(DISTINCT teacher_id) > 1
SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(DISTINCT teacher_id) >= 2
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course.Course_ID = course_arrange.Course_ID ORDER BY teacher.Name ASC
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course.Course_ID = course_arrange.Course_ID WHERE course.Course = 'Math'
SELECT name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'Math'
SELECT name, COUNT(course_arrange.Course_ID) FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name
SELECT T1.name, COUNT(T2.Course_ID) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.name
SELECT teacher.Name FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2
SELECT name  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  GROUP BY teacher.Teacher_ID, name  HAVING COUNT(course_arrange.Course_ID) >= 2
SELECT name  FROM teacher  WHERE teacher_id NOT IN (SELECT DISTINCT teacher_id FROM course_arrange)
SELECT name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)
SELECT count(*) FROM visitor WHERE Age < 30
SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Level_of_membership DESC
SELECT avg(Age) FROM visitor WHERE Level_of_membership <= 4
SELECT visitor.Name, visitor.Level_of_membership  FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Age ASC
SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009
SELECT open_year, num_of_staff FROM museum WHERE name = 'Plaza Museum'
SELECT name FROM museum WHERE num_of_staff > (   SELECT MIN(num_of_staff)   FROM museum   WHERE open_year > 2010 )
SELECT visitor.ID, visitor.Name, visitor.Age  FROM visitor  INNER JOIN visit ON visitor.ID = visit.visitor_ID  GROUP BY visitor.ID, visitor.Name, visitor.Age  HAVING COUNT(visit.Museum_ID) > 1
SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.ID IN (     SELECT visit.visitor_ID     FROM visit     GROUP BY visit.visitor_ID     HAVING SUM(visit.Total_spent) = (         SELECT MAX(total_spent)         FROM visit     ) )
SELECT museum_id, name  FROM museum  GROUP BY museum_id, name  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT museum.Name  FROM museum  WHERE NOT EXISTS (SELECT * FROM visit WHERE museum.Museum_ID = visit.Museum_ID)
SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID ORDER BY visit.Num_of_Ticket DESC LIMIT 1
SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit
SELECT SUM(Total_spent) AS total_ticket_expense FROM visit WHERE visitor_ID IN (SELECT ID FROM visitor WHERE Level_of_membership = 1)
SELECT T1.Name  FROM visitor AS T1  WHERE T1.ID IN (     SELECT T2.visitor_ID      FROM visit AS T2      INNER JOIN museum AS T3 ON T2.Museum_ID = T3.Museum_ID      WHERE T3.Open_Year < 2009 )  AND T1.ID IN (     SELECT T4.visitor_ID      FROM visit AS T4      INNER JOIN museum AS T5 ON T4.Museum_ID = T5.Museum_ID      WHERE T5.Open_Year > 2011 )
SELECT count(DISTINCT visitor_ID) FROM visit WHERE visitor_ID NOT IN (     SELECT DISTINCT visitor_ID     FROM visit     INNER JOIN museum ON visit.Museum_ID = museum.Museum_ID     WHERE museum.Open_Year > 2010 )
SELECT count(DISTINCT Museum_ID) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008
SELECT count(player_id) FROM players
SELECT count(*) FROM players
SELECT count(*) FROM matches
SELECT COUNT(*) FROM matches
SELECT first_name, birth_date  FROM players  WHERE country_code = 'USA'
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SELECT avg(loser_age) AS average_loser_age, avg(winner_age) AS average_winner_age FROM matches
SELECT avg(loser_age), avg(winner_age) FROM matches
SELECT avg(winner_rank) AS average_rank FROM matches GROUP BY winner_rank
SELECT AVG(winner_rank) FROM matches
SELECT MAX(loser_rank) AS highest_rank FROM matches
SELECT max(loser_rank) AS best_rank_of_losers FROM matches
SELECT count(DISTINCT country_code) FROM players
SELECT count(DISTINCT country_code) FROM players
SELECT COUNT(DISTINCT loser_name) FROM matches
SELECT COUNT(DISTINCT loser_name) FROM matches
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10
SELECT DISTINCT winner_name  FROM matches  WHERE year = 2013    AND winner_name IN (SELECT winner_name FROM matches WHERE year = 2016)
SELECT T1.first_name, T1.last_name  FROM players AS T1  WHERE T1.player_id IN (     SELECT T2.winner_id      FROM matches AS T2      WHERE T2.year = 2013 ) AND T1.player_id IN (     SELECT T3.winner_id      FROM matches AS T3      WHERE T3.year = 2016 )
SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016
SELECT players.country_code, players.first_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'Australian Open' AND matches.tourney_name = 'WTA Championships'
SELECT first_name, country_code  FROM players  WHERE player_id IN (   SELECT winner_id    FROM matches    WHERE tourney_name = 'Australian Open'     AND winner_id IN (       SELECT winner_id        FROM matches        WHERE tourney_name = 'WTA Championships'     ) )
SELECT first_name, country_code  FROM players  WHERE birth_date = (SELECT MIN(birth_date) FROM players)
SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date LIMIT 1
SELECT first_name, last_name FROM players ORDER BY birth_date;
SELECT first_name, last_name FROM players ORDER BY birth_date
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date
SELECT first_name, last_name FROM players WHERE hand = 'left' ORDER BY birth_date
SELECT first_name, country_code  FROM players  WHERE player_id = (   SELECT player_id    FROM rankings    WHERE tours = (     SELECT MAX(tours)      FROM rankings   ) )
SELECT first_name, country_code FROM players ORDER BY tours DESC LIMIT 1
SELECT year, COUNT(match_num) AS match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1
SELECT winner_name, SUM(winner_rank_points) AS total_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY winner_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT winner_name, SUM(winner_rank_points) AS total_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY winner_name ORDER BY total_rank_points DESC LIMIT 1
SELECT matches.winner_name  FROM matches  WHERE matches.tourney_name = 'Australian Open'  AND matches.winner_rank_points = (     SELECT MAX(matches.winner_rank_points)      FROM matches      WHERE matches.tourney_name = 'Australian Open' )
SELECT matches.winner_name FROM matches JOIN tournaments ON matches.tourney_id = tournaments.tourney_id WHERE tournaments.tourney_name = 'Australian Open' ORDER BY matches.winner_rank_points DESC LIMIT 1
SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)
SELECT matches.winner_name, matches.loser_name FROM matches WHERE minutes = (   SELECT MAX(minutes) FROM matches )
SELECT avg(rankings.ranking) AS average_ranking, players.first_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name
SELECT players.first_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name
SELECT T1.first_name, SUM(T2.ranking_points) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id, T1.first_name
SELECT players.first_name, SUM(rankings.ranking_points)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name
SELECT country_code, COUNT(*)  FROM players  GROUP BY country_code
SELECT country_code, COUNT(*) FROM players GROUP BY country_code
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1
SELECT country_code, COUNT(*) AS player_count FROM players GROUP BY country_code ORDER BY player_count DESC LIMIT 1
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50
SELECT DISTINCT country_code  FROM players  GROUP BY country_code  HAVING COUNT(*) > 50
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date
SELECT year, COUNT(*) FROM matches GROUP BY year
SELECT year, COUNT(*)  FROM matches  GROUP BY year
SELECT matches.winner_name, matches.winner_rank FROM matches ORDER BY matches.winner_age ASC LIMIT 3
SELECT players.first_name, players.last_name, rankings.ranking  FROM matches  JOIN players ON matches.winner_id = players.player_id  JOIN rankings ON rankings.player_id = players.player_id  ORDER BY matches.winner_age ASC  LIMIT 3
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'
SELECT COUNT(DISTINCT players.player_id)  FROM players  JOIN matches ON players.player_id = matches.winner_id  WHERE players.hand = 'L'  AND matches.tourney_name = 'WTA Championships'
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings) LIMIT 1;
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON matches.winner_id = players.player_id GROUP BY players.player_id ORDER BY SUM(rankings.ranking_points) DESC LIMIT 1
SELECT hand, COUNT(*) FROM players GROUP BY hand
SELECT hand, COUNT(DISTINCT player_id) FROM players GROUP BY hand
SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured'
SELECT name, tonnage FROM ship ORDER BY name DESC, tonnage DESC
SELECT battle.name, battle.date, battle.result FROM battle;
SELECT MAX(death.killed), MIN(death.killed), battle.name  FROM battle  JOIN ship ON ship.lost_in_battle = battle.id  JOIN death ON death.caused_by_ship_id = ship.id  GROUP BY battle.name
SELECT AVG(injured) FROM death
SELECT death.killed, death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't'
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril'
SELECT battle.id, battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig'
SELECT id, name FROM battle JOIN ship ON battle.id = ship.lost_in_battle JOIN death ON ship.id = death.caused_by_ship_id GROUP BY battle.id, battle.name HAVING sum(death.killed) > 10
SELECT ship.id, ship.name FROM ship JOIN death ON death.caused_by_ship_id = ship.id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1
SELECT DISTINCT name  FROM battle  WHERE bulgarian_commander = 'Kaloyan'  AND latin_commander = 'Baldwin I'
SELECT count(DISTINCT result) AS result_count FROM battle
SELECT COUNT(*) FROM battle WHERE result = 'victory' AND id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225')
SELECT name, date FROM battle WHERE id IN (   SELECT lost_in_battle   FROM ship   WHERE name IN ('HMS Atalanta', 'Lettice') )
SELECT name, result, bulgarian_commander  FROM battle  WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel');
SELECT note FROM death WHERE note LIKE '%East%'
SELECT addresses.line_1, addresses.line_2 FROM addresses
SELECT line_1, line_2  FROM Addresses
SELECT count(*) FROM Courses
SELECT count(*) FROM Courses
SELECT course_description  FROM Courses  WHERE course_name = 'math';
SELECT courses.course_description  FROM courses  WHERE courses.course_name = 'math'
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
SELECT Departments.department_name, Departments.department_id  FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id GROUP BY Departments.department_id  ORDER BY COUNT(Degree_Programs.degree_program_id) DESC  LIMIT 1
SELECT Departments.department_name, Departments.department_id  FROM Departments  JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id GROUP BY Departments.department_id, Departments.department_name  ORDER BY COUNT(Degree_Programs.degree_program_id) DESC  LIMIT 1
SELECT COUNT(DISTINCT Departments.department_id) FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id
SELECT COUNT(DISTINCT department_id) FROM Departments
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs
SELECT count(DISTINCT degree_program_id) FROM Degree_Programs
SELECT count(DISTINCT degree_program_id)  FROM Degree_Programs  WHERE department_id = (     SELECT department_id      FROM Departments      WHERE department_name = 'engineering' )
SELECT count(degree_program_id) AS degree_count FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = 'engineering'
SELECT section_name, section_description FROM Sections
SELECT section_name, section_description FROM Sections
SELECT course_name, course_id FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_name, Courses.course_id HAVING COUNT(Sections.section_id) <= 2
SELECT courses.course_name, courses.course_id  FROM courses  JOIN sections ON courses.course_id = sections.course_id  GROUP BY courses.course_name, courses.course_id  HAVING COUNT(sections.section_id) < 2
SELECT section_name FROM Sections ORDER BY section_name DESC
SELECT section_name FROM Sections ORDER BY section_name DESC
SELECT semester_name, semester_id FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY semester_name, semester_id ORDER BY COUNT(Student_Enrolment.student_enrolment_id) DESC LIMIT 1
SELECT Semesters.semester_name, Semesters.semester_id  FROM Semesters  JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id  GROUP BY Semesters.semester_name, Semesters.semester_id  ORDER BY COUNT(Student_Enrolment.student_id) DESC  LIMIT 1
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.first_name, students.middle_name, students.last_name, students.student_id HAVING COUNT(DISTINCT student_enrolment.degree_program_id) > 2
SELECT first_name, middle_name, last_name, student_id  FROM Students  WHERE student_id IN (     SELECT student_id      FROM Student_Enrolment      GROUP BY student_id      HAVING COUNT(DISTINCT degree_program_id) = 2      AND COUNT(DISTINCT semester_id) = 1 )
SELECT first_name, middle_name, last_name  FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  WHERE degree_summary_name = 'Bachelor'
SELECT students.first_name, students.middle_name, students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name = 'Bachelors'
SELECT degree_summary_name  FROM Degree_Programs  JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id  GROUP BY degree_summary_name  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT degree_summary_name  FROM Degree_Programs  JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id  GROUP BY degree_summary_name  ORDER BY COUNT(Student_Enrolment.student_id) DESC  LIMIT 1
SELECT Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name ORDER BY COUNT(Student_Enrolment.student_enrolment_id) DESC LIMIT 1;
SELECT degree_program_id, degree_summary_description  FROM Degree_Programs  JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id  GROUP BY Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description  ORDER BY COUNT(Student_Enrolment.student_id) DESC  LIMIT 1
SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(T2.student_id) AS enrollments FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id, T1.first_name, T1.middle_name, T1.last_name ORDER BY enrollments DESC LIMIT 1
SELECT first_name, middle_name, last_name, students.student_id, COUNT(student_enrolment_id) AS enrollment_count FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY enrollment_count DESC LIMIT 1
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)
SELECT semester_name  FROM semesters  WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment)
SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses)
SELECT course_name FROM Courses WHERE course_id IN (   SELECT course_id   FROM Student_Enrolment_Courses )
SELECT course_name FROM student_enrolment_courses INNER JOIN courses ON student_enrolment_courses.course_id = courses.course_id GROUP BY student_enrolment_courses.course_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id WHERE addresses.state_province_county = 'North Carolina' AND students.student_id NOT IN (SELECT student_id FROM Student_Enrolment)
SELECT Students.last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id LEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id LEFT JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Addresses.state_province_county = 'North Carolina' AND Student_Enrolment.degree_program_id IS NULL
SELECT transcripts.transcript_date, transcripts.transcript_id  FROM transcripts  JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id  GROUP BY transcripts.transcript_id  HAVING COUNT(transcript_contents.student_course_id) >= 2
SELECT transcript_date, transcript_id FROM Transcripts JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id JOIN Student_Enrolment_Courses ON Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id GROUP BY transcript_date, transcript_id HAVING COUNT(DISTINCT Student_Enrolment_Courses.course_id) >= 2;
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1
SELECT Students.first_name, Students.middle_name, Students.last_name  FROM Students  ORDER BY Students.date_first_registered  LIMIT 1
SELECT first_name, middle_name, last_name  FROM Students  ORDER BY date_first_registered  LIMIT 1
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered LIMIT 1
SELECT first_name FROM students JOIN addresses ON students.permanent_address_id != addresses.address_id WHERE students.current_address_id = addresses.address_id
SELECT Students.first_name  FROM Students  INNER JOIN Addresses AS permanent ON Students.permanent_address_id = permanent.address_id  INNER JOIN Addresses AS current ON Students.current_address_id = current.address_id  WHERE permanent.line_1 != current.line_1
SELECT addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3 FROM addresses JOIN students ON addresses.address_id = students.current_address_id GROUP BY addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3 ORDER BY COUNT(*) DESC LIMIT 1
SELECT address_id, line_1, line_2 FROM Addresses WHERE address_id = (   SELECT current_address_id   FROM Students   GROUP BY current_address_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT AVG(transcript_date) FROM Transcripts
SELECT avg(transcript_date) FROM Transcripts
SELECT transcript_date, other_details  FROM Transcripts  ORDER BY transcript_date  LIMIT 1
SELECT MIN(transcript_date) AS earliest_date, other_details FROM Transcripts GROUP BY other_details
SELECT count(transcript_id) FROM Transcripts
SELECT count(*) FROM Transcripts
SELECT MAX(transcript_date) FROM Transcripts
SELECT MAX(transcript_date) FROM Transcripts
SELECT MAX(enrollment_count) AS max_enrollment_count, student_course_id FROM (   SELECT COUNT(*) AS enrollment_count, student_course_id   FROM Transcript_Contents   GROUP BY student_course_id ) AS subquery ORDER BY max_enrollment_count DESC LIMIT 1;
SELECT MAX(COUNT(T1.course_id)), T1.student_enrolment_id FROM Student_Enrolment_Courses AS T1 JOIN Student_Enrolment AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id GROUP BY T1.student_enrolment_id ORDER BY MAX(COUNT(T1.course_id)) DESC LIMIT 1
SELECT transcript_date, transcript_id FROM Transcripts GROUP BY transcript_date, transcript_id ORDER BY COUNT(*) ASC LIMIT 1
SELECT T1.transcript_date, T1.transcript_id  FROM Transcripts AS T1  JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id  GROUP BY T1.transcript_id  ORDER BY COUNT(*) ASC  LIMIT 1
SELECT semester_name  FROM semesters  WHERE semester_id IN (     SELECT semester_id      FROM student_enrolment      WHERE degree_program_id IN ('Bachelor', 'Master')     GROUP BY semester_id      HAVING COUNT(DISTINCT degree_program_id) > 1 )
SELECT Semesters.semester_id  FROM Student_Enrolment WHERE semester_id IN (     SELECT semester_id     FROM Student_Enrolment     WHERE degree_program_id IN (         SELECT degree_program_id         FROM Degree_Programs         WHERE degree_summary_name = 'Masters'     ) ) AND semester_id IN (     SELECT semester_id     FROM Student_Enrolment     WHERE degree_program_id IN (         SELECT degree_program_id         FROM Degree_Programs         WHERE degree_summary_name = 'Bachelors'     ) ) GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) > 1
SELECT count(DISTINCT Students.current_address_id) FROM Students
SELECT line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details  FROM addresses  WHERE address_id IN (     SELECT DISTINCT current_address_id      FROM students ) OR address_id IN (     SELECT DISTINCT permanent_address_id      FROM students )
SELECT Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details FROM Students ORDER BY Students.first_name DESC, Students.last_name DESC
SELECT Students.last_name, Students.first_name, Students.middle_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details FROM Students ORDER BY Students.last_name DESC
SELECT * FROM Sections WHERE section_name = 'h'
SELECT section_description FROM Sections WHERE section_name = 'h'
SELECT first_name  FROM Students  JOIN Addresses ON Students.permanent_address_id = Addresses.address_id  WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'
SELECT first_name FROM Students WHERE cell_mobile_number = '09700166582'    OR permanent_address_id IN (       SELECT address_id       FROM Addresses       WHERE country = 'Haiti'    )
SELECT Title FROM Cartoon ORDER BY Title ASC
SELECT title FROM Cartoon ORDER BY title ASC
SELECT Cartoon.Title  FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Directed_by = "Ben Jones"
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones"
SELECT COUNT(id) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
SELECT cartoon.title, cartoon.directed_by FROM cartoon ORDER BY cartoon.original_air_date;
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon ORDER BY Cartoon.Original_air_date;
SELECT title FROM Cartoon WHERE directed_by IN ('Ben Jones', 'Brandon Vietti')
SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti')
SELECT TV_Channel.Country, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY Channel_Count DESC LIMIT 1
SELECT TV_Channel.Country, COUNT(*) AS channel_count  FROM TV_Channel  GROUP BY TV_Channel.Country  ORDER BY channel_count DESC  LIMIT 1
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel
SELECT count(DISTINCT series_name), count(DISTINCT Content) FROM TV_Channel
SELECT content FROM tv_channel WHERE series_name = 'Sky Radio'
SELECT content FROM tv_channel WHERE series_name = 'Sky Radio'
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio"
SELECT Package_Option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = 'Sky Radio'
SELECT COUNT(DISTINCT id) FROM TV_Channel WHERE Language = 'English'
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'
SELECT TV_Channel.Language, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY TV_Channel.Language ORDER BY Channel_Count ASC;
SELECT TV_Channel.Language, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY TV_Channel.Language ORDER BY Channel_Count ASC LIMIT 1
SELECT TV_Channel.Language, COUNT(*)  FROM TV_Channel  GROUP BY TV_Channel.Language
SELECT TV_Channel.Language, COUNT(DISTINCT TV_Channel.id) AS Channel_Count FROM TV_Channel GROUP BY TV_Channel.Language
SELECT series_name FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = "The Rise of the Blue Beetle!";
SELECT series_name FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = "The Rise of the Blue Beetle"
SELECT cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"
SELECT Title  FROM Cartoon  WHERE Channel = (   SELECT id    FROM TV_Channel    WHERE series_name = "Sky Radio" )
SELECT TV_series.Episode  FROM TV_series  ORDER BY TV_series.Rating
SELECT TV_series.Episode FROM TV_series JOIN Cartoon ON Cartoon.id = TV_series.id ORDER BY TV_series.Rating;
SELECT tv_series.episode, tv_series.rating  FROM tv_series  ORDER BY tv_series.rating DESC  LIMIT 3
SELECT tv_series.Episode, tv_series.Rating  FROM tv_series  ORDER BY tv_series.Rating DESC  LIMIT 3
SELECT min(Share), max(Share) FROM TV_series
SELECT MAX(Share), MIN(Share) FROM TV_series;
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime"
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime"
SELECT tv_series.weekly_rank  FROM tv_series  JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.title = "A Love of a Lifetime"
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime"
SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = 'A Love of a Lifetime'
SELECT title FROM cartoon JOIN tv_series ON cartoon.channel = tv_series.channel WHERE tv_series.episode = "A Love of a Lifetime"
SELECT tv_series.Episode  FROM tv_series  JOIN tv_channel ON tv_series.Channel = tv_channel.id WHERE tv_channel.series_name = "Sky Radio"
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"
SELECT cartoon.directed_by, COUNT(*) FROM cartoon JOIN TV_Channel ON cartoon.Channel = TV_Channel.id GROUP BY cartoon.directed_by
SELECT Directed_by, COUNT(*)  FROM Cartoon  GROUP BY Directed_by
SELECT cartoon.production_code, tv_channel.series_name FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id ORDER BY cartoon.original_air_date DESC LIMIT 1
SELECT cartoon.production_code, tv_channel.series_name FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id ORDER BY cartoon.original_air_date DESC LIMIT 1
SELECT Package_Option, series_name FROM TV_Channel WHERE High_definition_TV = 'True'
SELECT package_option, series_name FROM TV_Channel WHERE High_definition_TV = 1
SELECT country FROM TV_Channel WHERE id IN (   SELECT Channel   FROM Cartoon   WHERE Written_by = 'Todd Casey' )
SELECT DISTINCT tv_channel.country  FROM tv_channel  JOIN cartoon ON cartoon.channel = tv_channel.id  WHERE cartoon.written_by = 'Todd Casey'
SELECT DISTINCT country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')
SELECT country FROM TV_Channel WHERE id NOT IN (     SELECT Channel     FROM Cartoon     WHERE Written_by = 'Todd Casey' )
SELECT series_name, country  FROM TV_Channel  JOIN Cartoon ON TV_Channel.id = Cartoon.Channel  WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')  GROUP BY series_name, country
SELECT series_name, country  FROM TV_Channel  WHERE id IN (   SELECT Channel    FROM Cartoon    WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Michael Chang' )
SELECT TV_Channel.pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language <> 'English'
SELECT pixel_aspect_ratio_PAR, Country  FROM TV_Channel  WHERE Language != 'English'
SELECT TV_Channel.id  FROM TV_Channel  GROUP BY TV_Channel.id  HAVING COUNT(*) > 2
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.id HAVING COUNT(*) > 2
SELECT tv_channel.id FROM tv_channel WHERE tv_channel.id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')
SELECT tv_channel.id FROM tv_channel WHERE tv_channel.id NOT IN (   SELECT cartoon.channel   FROM cartoon   WHERE cartoon.directed_by = 'Ben Jones' )
SELECT package_option FROM TV_Channel WHERE id NOT IN (   SELECT Channel   FROM Cartoon   WHERE Directed_by = 'Ben Jones' )
SELECT package_option FROM tv_channel WHERE id NOT IN (     SELECT channel     FROM cartoon     WHERE directed_by = 'Ben Jones' )
SELECT COUNT(Poker_Player_ID) FROM poker_player
SELECT COUNT(*) FROM poker_player
SELECT poker_player.Earnings  FROM poker_player  ORDER BY poker_player.Earnings DESC
SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC
SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player
SELECT final_table_made, best_finish FROM poker_player
SELECT AVG(Earnings) FROM poker_player
SELECT avg(Earnings) FROM poker_player
SELECT poker_player.money_rank  FROM poker_player ORDER BY poker_player.earnings DESC  LIMIT 1
SELECT money_rank FROM poker_player WHERE earnings = (SELECT max(earnings) FROM poker_player)
SELECT MAX(Final_Table_Made)  FROM poker_player  WHERE Earnings < 200000
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000
SELECT people.Name FROM people 
SELECT name FROM poker_player INNER JOIN people ON poker_player.People_ID = people.People_ID
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000
SELECT name  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Final_Table_Made ASC
SELECT T1.Name  FROM people AS T1  JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  ORDER BY T2.Final_Table_Made ASC
SELECT birth_date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings ASC LIMIT 1
SELECT people.Birth_Date  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Earnings  LIMIT 1
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1
SELECT poker_player.money_rank  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  ORDER BY people.Height DESC  LIMIT 1
SELECT AVG(poker_player.Earnings) FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE people.Height > 200
SELECT AVG(poker_player.Earnings) FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE people.Height > 200
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC
SELECT nationality, COUNT(*)  FROM people  GROUP BY nationality
SELECT nationality, COUNT(*)  FROM people  GROUP BY nationality
SELECT Nationality, COUNT(*) AS count FROM people GROUP BY nationality ORDER BY count DESC LIMIT 1
SELECT Nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1
SELECT Nationality FROM people GROUP BY nationality HAVING COUNT(DISTINCT People_ID) > 1
SELECT Nationality  FROM people  GROUP BY Nationality  HAVING COUNT(*) >= 2
SELECT name, birth_date  FROM people  ORDER BY name ASC
SELECT name, birth_date FROM people ORDER BY name ASC
SELECT name FROM people WHERE Nationality != 'Russia'
SELECT name FROM people WHERE Nationality <> 'Russia'
SELECT name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
SELECT name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
SELECT COUNT(DISTINCT Nationality) FROM people
SELECT COUNT(DISTINCT Nationality) FROM people
SELECT count(DISTINCT state) FROM AREA_CODE_STATE
SELECT contestant_number, contestant_name  FROM CONTESTANTS  ORDER BY contestant_name DESC
SELECT vote_id, phone_number, state FROM VOTES;
SELECT max(area_code), min(area_code) FROM AREA_CODE_STATE
SELECT MAX(created) AS last_date_created FROM VOTES WHERE state = 'CA'
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name <> 'Jessie Alloway'
SELECT DISTINCT state, created FROM VOTES
SELECT contestant_number, contestant_name  FROM contestants  GROUP BY contestant_number, contestant_name  HAVING COUNT(*) >= 2
SELECT contestant_number, contestant_name  FROM contestants  WHERE contestant_number IN (   SELECT contestant_number    FROM votes    GROUP BY contestant_number    HAVING COUNT(vote_id) = (     SELECT MIN(vote_count)      FROM (       SELECT COUNT(vote_id) as vote_count        FROM votes        GROUP BY contestant_number     )   ) )
SELECT COUNT(*) FROM VOTES WHERE state = 'NY' OR state = 'CA'
SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)
SELECT area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state = T2.state GROUP BY area_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT created, state, phone_number FROM VOTES WHERE contestant_number = (   SELECT contestant_number   FROM CONTESTANTS   WHERE contestant_name = 'Tabatha Gehling' )
SELECT area_code FROM area_code_state WHERE area_code IN (     SELECT state     FROM votes     WHERE contestant_number IN (         SELECT contestant_number         FROM contestants         WHERE contestant_name IN ('Tabatha Gehling', 'Kelly Clauss')     )     GROUP BY state     HAVING COUNT(DISTINCT contestant_number) = 2 )
SELECT contestant_name  FROM contestants  WHERE contestant_name LIKE '%Al%'
SELECT name  FROM country  WHERE IndepYear > 1950
SELECT name FROM country WHERE IndepYear > 1950
SELECT COUNT(DISTINCT Code) FROM country WHERE GovernmentForm = 'Republic'
SELECT COUNT(DISTINCT Code) FROM country WHERE GovernmentForm = 'Republic'
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Region = 'Caribbean'
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Caribbean'
SELECT Continent FROM country WHERE name = 'Anguilla'
SELECT continent FROM country WHERE Name = 'Anguilla'
SELECT region FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Name = 'Kabul'
SELECT Region FROM country WHERE Name = 'Kabul'
SELECT language  FROM countrylanguage  WHERE countrycode = (     SELECT code      FROM country      WHERE name = 'Aruba' )  AND percentage = (     SELECT max(percentage)      FROM countrylanguage      WHERE countrycode = (         SELECT code          FROM country          WHERE name = 'Aruba'     ) )
SELECT language FROM countrylanguage WHERE countrycode = (     SELECT code     FROM country     WHERE name = 'Aruba' ) 
SELECT Population, LifeExpectancy FROM country WHERE name = 'Brazil'
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'
SELECT Region, Population FROM country WHERE name = 'Angola'
SELECT region, population FROM country WHERE name = 'Angola'
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'
SELECT avg(LifeExpectancy)  FROM country  WHERE Region = 'Central Africa'
SELECT name FROM country WHERE continent = 'Asia' AND lifeexpectancy = (SELECT MIN(lifeexpectancy) FROM country WHERE continent = 'Asia' AND lifeexpectancy IS NOT NULL)
SELECT name FROM country WHERE continent = 'Asia' AND lifeexpectancy = (SELECT MIN(lifeexpectancy) FROM country WHERE continent = 'Asia')
SELECT SUM(population) AS total_population, MAX(GNP) AS maximum_GNP FROM country WHERE continent = 'Asia'
SELECT SUM(population), MAX(GNP) FROM country WHERE Continent = 'Asia'
SELECT AVG(LifeExpectancy) FROM country WHERE GovernmentForm = 'Republic' AND Continent = 'Africa'
SELECT AVG(LifeExpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic'
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE continent IN ('Asia', 'Europe')
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE continent = 'Asia' OR continent = 'Europe'
SELECT SUM(population) AS TotalPopulation FROM city WHERE district = 'Gelderland'
SELECT SUM(Population) FROM city WHERE District = 'Gelderland'
SELECT avg(GNP) AS average_GNP, sum(population) AS total_population  FROM country  WHERE governmentform = 'US Territory'
SELECT avg(GNP) , sum(population)  FROM country  WHERE governmentform = 'US Territory'
SELECT count(DISTINCT Language) FROM countrylanguage
SELECT count(DISTINCT Language) AS Number_of_Languages FROM countrylanguage
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW'
SELECT COUNT(DISTINCT Language) AS LanguageCount FROM countrylanguage WHERE CountryCode = 'ABW'
SELECT count(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'
SELECT count(DISTINCT language) FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan')
SELECT country.Name  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  GROUP BY country.Name  ORDER BY COUNT(countrylanguage.Language) DESC  LIMIT 1
SELECT name  FROM country  WHERE code IN (     SELECT countrycode      FROM countrylanguage      GROUP BY countrycode      HAVING COUNT(DISTINCT language) = (         SELECT MAX(cnt)          FROM (             SELECT COUNT(DISTINCT language) AS cnt              FROM countrylanguage              GROUP BY countrycode         )     ) )
SELECT continent FROM countrylanguage GROUP BY continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1
SELECT continent FROM countrylanguage GROUP BY continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1
SELECT COUNT(DISTINCT countrycode)  FROM countrylanguage  WHERE language IN ('Dutch', 'English') GROUP BY countrycode
SELECT COUNT(DISTINCT T1.CountryCode) FROM countrylanguage AS T1 WHERE T1.Language IN ('Dutch', 'English')
SELECT DISTINCT c.Name  FROM country c  INNER JOIN countrylanguage cl ON c.Code = cl.CountryCode  WHERE cl.Language IN ('English', 'French')  GROUP BY c.Name  HAVING COUNT(DISTINCT cl.Language) = 2
SELECT name FROM country  WHERE code IN (   SELECT countrycode    FROM countrylanguage    WHERE language = 'English'    AND isofficial = 1 )  AND code IN (   SELECT countrycode    FROM countrylanguage    WHERE language = 'French'    AND isofficial = 1 )
SELECT name  FROM country  WHERE country.Code IN (   SELECT countrycode    FROM countrylanguage    WHERE language = 'English'      AND isOfficial = 'T' )  AND country.Code IN (   SELECT countrycode    FROM countrylanguage    WHERE language = 'French'      AND isOfficial = 'T' )
SELECT country.Name FROM countrylanguage AS cl1 JOIN countrylanguage AS cl2 ON cl1.CountryCode = cl2.CountryCode JOIN country ON cl1.CountryCode = country.Code WHERE cl1.Language = 'English'      AND cl1.IsOfficial = 'T'      AND cl2.Language = 'French'      AND cl2.IsOfficial = 'T';
SELECT COUNT(DISTINCT country.Continent) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'Chinese'
SELECT COUNT(DISTINCT country.Continent)  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  WHERE countrylanguage.Language = 'Chinese'
SELECT DISTINCT Region FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language IN ('English', 'Dutch'));
SELECT DISTINCT region  FROM country  WHERE country.Code IN (   SELECT countrylanguage.CountryCode    FROM countrylanguage    WHERE countrylanguage.Language = 'Dutch' OR countrylanguage.Language = 'English' )
SELECT country.Name FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch') AND countrylanguage.IsOfficial = 'T'
SELECT DISTINCT name  FROM country  WHERE code IN (     SELECT countrycode      FROM countrylanguage      WHERE language IN ('English', 'Dutch')          AND isofficial = 'T' )
SELECT language  FROM countrylanguage  WHERE percentage = (     SELECT MAX(percentage)      FROM countrylanguage      WHERE language IN (         SELECT language          FROM countrylanguage          WHERE countrycode IN (             SELECT code              FROM country              WHERE continent = 'Asia'         )     ) )  AND countrycode IN (     SELECT code      FROM country      WHERE continent = 'Asia' )  GROUP BY language;
SELECT language FROM countrylanguage WHERE CountryCode IN (     SELECT Code     FROM country     WHERE Continent = 'Asia' ) GROUP BY language ORDER BY COUNT(*) DESC LIMIT 1
SELECT language  FROM countrylanguage  WHERE countrycode IN (SELECT code FROM country WHERE governmentform = 'Republic')  GROUP BY language  HAVING COUNT(countrycode) = 1
SELECT language FROM countrylanguage WHERE countrycode IN (   SELECT code   FROM country   WHERE governmentform = 'Republic' ) GROUP BY language HAVING COUNT(*) = 1
SELECT city.Name  FROM city  JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode  WHERE countrylanguage.Language = 'English'  ORDER BY city.Population DESC  LIMIT 1
SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T' ORDER BY city.Population DESC LIMIT 1
SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = 'Asia' ORDER BY country.SurfaceArea DESC LIMIT 1
SELECT AVG(LifeExpectancy)  FROM country  WHERE Code NOT IN (   SELECT CountryCode    FROM countrylanguage    WHERE Language = 'English' AND IsOfficial = 1 )
SELECT avg(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language <> 'English' AND IsOfficial = 'T')
SELECT SELECT SUM(country.population)  FROM country  WHERE country.code NOT IN (SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = 'English')
SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')
SELECT countrylanguage.Language  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  WHERE country.HeadOfState = 'Beatrix'  AND countrylanguage.IsOfficial = 1
SELECT language FROM countrylanguage WHERE isofficial = 'T' AND countrycode = (   SELECT code   FROM country   WHERE headofstate = 'Beatrix' )
SELECT count(DISTINCT countrylanguage.Language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.IndepYear < 1930 AND countrylanguage.IsOfficial = 'T'
SELECT count(DISTINCT countrylanguage.Language) FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.IndepYear < 1930
SELECT country.Name  FROM country  WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')
SELECT DISTINCT Name FROM country WHERE SurfaceArea > (   SELECT MAX(SurfaceArea)   FROM country   WHERE Continent = 'Europe' )
SELECT country.name  FROM country  WHERE country.continent = 'Africa'    AND country.population < ANY (SELECT MIN(country.population) FROM country WHERE country.continent = 'Asia')
SELECT name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')
SELECT country.name  FROM country  WHERE country.continent = 'Asia'    AND country.population > ALL (SELECT population FROM country WHERE continent = 'Africa')
SELECT DISTINCT name  FROM country  WHERE continent = 'Asia'  AND population > (     SELECT MAX(population)      FROM country      WHERE continent = 'Africa'     )
SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English');
SELECT code  FROM country  WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')
SELECT country.Code  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language <> 'English'
SELECT code FROM country WHERE code NOT IN (     SELECT countrycode     FROM countrylanguage     WHERE language <> 'English' )
SELECT countrylanguage.CountryCode FROM countrylanguage WHERE language != 'English' AND CountryCode NOT IN (     SELECT code     FROM country     WHERE governmentform != 'Republic' )
SELECT code FROM country WHERE code NOT IN (   SELECT countrycode FROM countrylanguage WHERE language = 'English' ) AND governmentform NOT LIKE '%Republic%'
SELECT DISTINCT city.Name  FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Europe'  AND countrylanguage.Language <> 'English'
SELECT DISTINCT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.Continent = 'Europe'  AND countrylanguage.Language <> 'English'
SELECT DISTINCT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.Continent = 'Asia'  AND countrylanguage.Language = 'Chinese'  AND countrylanguage.IsOfficial = 'T'
SELECT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.Continent = 'Asia'  AND countrylanguage.Language = 'Chinese'  AND countrylanguage.IsOfficial = 'T'
SELECT name, indepyear, surfacearea FROM country WHERE population = (SELECT min(population) FROM country)
SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country WHERE country.Population = (SELECT MIN(Population) FROM country)
SELECT Population, Name, HeadOfState  FROM country  WHERE surfacearea = (SELECT MAX(surfacearea) FROM country)
SELECT country.Name, country.Population, country.HeadOfState  FROM country  ORDER BY country.SurfaceArea DESC  LIMIT 1
SELECT country.Name, COUNT(countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(DISTINCT countrylanguage.Language) >= 3
SELECT country.name, COUNT(DISTINCT countrylanguage.language) AS language_count FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING language_count > 2
SELECT district, COUNT(id) FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district
SELECT COUNT(*) AS city_count, district  FROM city  WHERE population > (SELECT AVG(population) FROM city)  GROUP BY district
SELECT governmentform, SUM(population) AS total_population FROM country GROUP BY governmentform HAVING AVG(lifeexpectancy) > 72;
SELECT governmentform, SUM(population)  FROM country  WHERE lifeexpectancy > 72  GROUP BY governmentform
SELECT avg(LifeExpectancy) AS avg_life_expectancy, sum(Population) AS total_population, Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72
SELECT continent, SUM(population), AVG(lifeExpectancy) FROM country GROUP BY continent HAVING AVG(lifeExpectancy) < 72
SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5
SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5
SELECT name FROM country ORDER BY Population DESC LIMIT 3
SELECT name FROM country ORDER BY Population DESC LIMIT 3
SELECT name FROM country ORDER BY population ASC LIMIT 3
SELECT name  FROM country  ORDER BY population  LIMIT 3;
SELECT count(*) FROM country WHERE continent = 'Asia'
SELECT COUNT(DISTINCT Name) FROM country WHERE Continent = 'Asia'
SELECT name FROM country WHERE continent = 'Europe'   AND population = 80000
SELECT name FROM country WHERE continent = 'Europe' AND population = 80000
SELECT sum(Population) AS total_population, avg(SurfaceArea) AS average_area FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000
SELECT sum(population) as total_population, avg(surfacearea) as average_surface_area FROM country WHERE continent = 'North America' AND surfacearea > 3000 GROUP BY continent
SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000
SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000
SELECT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language ORDER BY COUNT(countrylanguage.Language) DESC LIMIT 1
SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1
SELECT T2.CountryCode, T2.Language FROM (   SELECT countrycode, MAX(percentage) AS max_percentage   FROM countrylanguage   GROUP BY countrycode ) AS T1 JOIN countrylanguage AS T2 ON T1.countrycode = T2.countrycode AND T1.max_percentage = T2.percentage
SELECT countrycode, language FROM countrylanguage GROUP BY countrycode HAVING percentage = (SELECT MAX(percentage) FROM countrylanguage)
SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')
SELECT COUNT(DISTINCT CountryCode)  FROM countrylanguage  WHERE Language = 'Spanish'  AND IsOfficial = 'T'  AND Percentage > 50;
SELECT countrycode  FROM countrylanguage  WHERE language = 'Spanish'  GROUP BY countrycode  HAVING percentage = MAX(percentage)  ORDER BY percentage DESC  LIMIT 1
SELECT country.Code FROM countrylanguage WHERE Language = 'Spanish' AND Percentage > 50
SELECT COUNT(Conductor_ID) FROM conductor
SELECT COUNT(DISTINCT Conductor_ID) FROM conductor
SELECT name FROM conductor ORDER BY Age ASC
SELECT name FROM conductor ORDER BY age
SELECT name FROM conductor WHERE nationality != 'USA'
SELECT name FROM conductor WHERE nationality != "USA"
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC
SELECT record_company FROM orchestra ORDER BY year_of_founded DESC
SELECT AVG(Attendance) AS Average_Attendance FROM show
SELECT avg(Attendance) FROM show
SELECT MAX(share), MIN(share)  FROM performance  WHERE type <> 'Live final'
SELECT MAX(Share), MIN(Share) FROM performance WHERE Type <> 'Live final'
SELECT count(DISTINCT Nationality) FROM conductor
SELECT count(DISTINCT Nationality) FROM conductor
SELECT 
SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC
SELECT name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC LIMIT 1
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID
SELECT name FROM conductor GROUP BY name HAVING COUNT(DISTINCT orchestra_id) > 1
SELECT conductor.Name FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name ORDER BY COUNT(orchestra.Orchestra_ID) DESC LIMIT 1
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name ORDER BY COUNT(DISTINCT orchestra.Orchestra_ID) DESC LIMIT 1
SELECT conductor.Name  FROM conductor  JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID  WHERE orchestra.Year_of_Founded > 2008
SELECT name FROM conductor WHERE Conductor_ID IN (   SELECT Conductor_ID   FROM orchestra   WHERE Year_of_Founded > 2008 )
SELECT record_company, COUNT(DISTINCT orchestra_id)  FROM orchestra  GROUP BY record_company
SELECT COUNT(DISTINCT orchestra.Orchestra_ID) AS total_orchestras, orchestra.Record_Company FROM orchestra GROUP BY orchestra.Record_Company
SELECT major_record_format, COUNT(*) as record_count FROM orchestra GROUP BY major_record_format ORDER BY record_count ASC
SELECT major_record_format, COUNT(*) AS frequency FROM orchestra GROUP BY major_record_format ORDER BY frequency DESC
SELECT orchestra.Record_Company FROM orchestra GROUP BY orchestra.Record_Company ORDER BY COUNT(*) DESC LIMIT 1
SELECT record_company, COUNT(orchestra_id) AS orchestra_count FROM orchestra GROUP BY record_company ORDER BY orchestra_count DESC LIMIT 1
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL
SELECT DISTINCT record_company  FROM orchestra  WHERE year_of_founded < 2003 OR year_of_founded > 2003
SELECT record_company FROM orchestra WHERE year_of_founded < 2003 INTERSECT SELECT record_company FROM orchestra WHERE year_of_founded > 2003;
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')
SELECT year_of_founded FROM orchestra GROUP BY year_of_founded HAVING COUNT(DISTINCT performance_id) > 1
SELECT year_of_founded  FROM orchestra  INNER JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID  GROUP BY orchestra.year_of_founded  HAVING count(DISTINCT performance.Performance_ID) > 1
SELECT COUNT(ID) FROM Highschooler
SELECT COUNT(*) FROM Highschooler
SELECT Highschooler.name, Highschooler.grade FROM Highschooler
SELECT name, grade FROM Highschooler
SELECT grade FROM Highschooler
SELECT grade FROM Highschooler
SELECT grade FROM Highschooler WHERE name = "Kyle"
SELECT grade FROM Highschooler WHERE name = "Kyle"
SELECT name FROM Highschooler WHERE grade = 10
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10
SELECT ID FROM Highschooler WHERE name = 'Kyle'
SELECT ID FROM Highschooler WHERE name = "Kyle"
SELECT COUNT(DISTINCT ID) FROM Highschooler WHERE grade = 9 OR grade = 10
SELECT COUNT(*) FROM Highschooler WHERE grade = 9 OR grade = 10
SELECT grade, COUNT(*)  FROM Highschooler  GROUP BY grade
SELECT grade, COUNT(*)  FROM Highschooler  GROUP BY grade
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1
SELECT grade, COUNT(*) AS count FROM Highschooler GROUP BY grade ORDER BY count DESC LIMIT 1
SELECT grade  FROM Highschooler  GROUP BY grade  HAVING count(DISTINCT ID) >= 4
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4
SELECT Highschooler.ID, COUNT(friend_id) AS friend_count FROM Friend JOIN Highschooler ON Friend.student_id = Highschooler.ID GROUP BY Highschooler.ID
SELECT T1.id, COUNT(T2.friend_id) AS friend_count FROM Highschooler AS T1 LEFT JOIN Friend AS T2 ON T1.id = T2.student_id GROUP BY T1.id
SELECT T1.name, COUNT(T2.friend_id)  FROM Highschooler AS T1  JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.name
SELECT Highschooler.name, COUNT(friend.friend_id) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name ORDER BY COUNT(Friend.friend_id) DESC LIMIT 1
SELECT T1.name  FROM Highschooler AS T1  JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.ID  ORDER BY COUNT(T2.friend_id) DESC  LIMIT 1
SELECT name FROM Highschooler WHERE ID IN (     SELECT student_id     FROM Friend     GROUP BY student_id     HAVING COUNT(*) >= 3 )
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name HAVING COUNT(Friend.friend_id) >= 3
SELECT Highschooler.name  FROM Highschooler  JOIN Friend ON Highschooler.ID = Friend.student_id  WHERE Friend.friend_id = (   SELECT ID    FROM Highschooler    WHERE name = 'Kyle' )
SELECT T2.name FROM Highschooler AS T1 JOIN Friend AS F ON T1.ID = F.friend_id JOIN Highschooler AS T2 ON F.friend_id = T2.ID WHERE T1.name = 'Kyle';
SELECT COUNT(Friend.friend_id) FROM Highschooler  JOIN Friend ON Highschooler.ID = Friend.student_id  WHERE Highschooler.name = 'Kyle'
SELECT COUNT(*)  FROM Friend JOIN Highschooler ON Friend.friend_id = Highschooler.ID WHERE Highschooler.name = 'Kyle';
SELECT Highschooler.ID FROM Highschooler WHERE NOT EXISTS (     SELECT *     FROM Friend     WHERE Highschooler.ID = Friend.student_id )
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT friend.student_id FROM Friend)
SELECT name  FROM Highschooler  WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT T1.ID FROM Highschooler AS T1 WHERE EXISTS (   SELECT *   FROM Friend AS T2   WHERE T2.student_id = T1.ID ) AND EXISTS (   SELECT *   FROM Likes AS T3   WHERE T3.liked_id = T1.ID )
SELECT T1.student_id FROM Friend AS T1 WHERE T1.student_id IN (     SELECT T2.ID     FROM Highschooler AS T2     WHERE T2.ID IN (         SELECT T3.student_id         FROM Likes AS T3     ) )
SELECT name FROM Highschooler WHERE ID IN (     SELECT student_id     FROM Friend     WHERE student_id = Highschooler.ID ) AND ID IN (     SELECT liked_id     FROM Likes     WHERE liked_id = Highschooler.ID )
SELECT name FROM Highschooler WHERE ID IN (   SELECT student_id   FROM Friend   WHERE student_id = Highschooler.ID ) AND ID IN (   SELECT student_id   FROM Likes   WHERE student_id = Highschooler.ID )
SELECT COUNT(*) AS like_count, student_id FROM Likes GROUP BY student_id
SELECT student_id, COUNT(*) AS like_count FROM Likes GROUP BY student_id
SELECT T1.name, COUNT(T2.*)  FROM Highschooler AS T1  JOIN Likes AS T2 ON T1.ID = T2.student_id  GROUP BY T1.name
SELECT Highschooler.name, COUNT(Likes.liked_id) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name
SELECT Highschooler.name  FROM Highschooler  JOIN Likes ON Highschooler.ID = Likes.student_id  GROUP BY Highschooler.ID  ORDER BY COUNT(Likes.liked_id) DESC  LIMIT 1
SELECT T1.name  FROM Highschooler AS T1  JOIN Likes AS T2 ON T1.ID = T2.student_id  GROUP BY T2.student_id  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT T1.name  FROM Highschooler AS T1  JOIN Likes AS T2 ON T1.ID = T2.student_id  GROUP BY T1.name  HAVING COUNT(T2.liked_id) >= 2
SELECT name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID HAVING COUNT(*) >= 2
SELECT name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id JOIN Likes ON Highschooler.ID = Likes.student_id WHERE Highschooler.grade > 5 GROUP BY Highschooler.name HAVING COUNT(DISTINCT Friend.friend_id) >= 2
SELECT name  FROM Highschooler  WHERE grade > 5  AND ID IN (SELECT student_id             FROM Friend             GROUP BY student_id             HAVING COUNT(*) >= 2)
SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT count(liked_id) AS num_likes FROM Likes WHERE student_id = (   SELECT ID   FROM Highschooler   WHERE name = 'Kyle' )
SELECT avg(grade)  FROM Highschooler  WHERE ID IN (SELECT DISTINCT student_id FROM Friend)
SELECT avg(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)
SELECT min(grade)  FROM Highschooler  WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT min(grade) FROM Highschooler WHERE ID NOT IN (SELECT DISTINCT student_id FROM Friend)
SELECT DISTINCT state FROM Owners WHERE state IN (     SELECT DISTINCT state     FROM Professionals )
SELECT state FROM professionals INTERSECT SELECT state FROM owners
SELECT AVG(age)  FROM Dogs  JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
SELECT AVG(dogs.age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) > 2 )
SELECT professional_id, last_name, cell_number  FROM Professionals  WHERE state = 'Indiana' OR professional_id IN (   SELECT professional_id    FROM Treatments    GROUP BY professional_id    HAVING COUNT(*) > 2 )
SELECT dogs.name  FROM dogs  WHERE dogs.dog_id NOT IN (SELECT treatments.dog_id FROM treatments WHERE treatments.cost_of_treatment > 1000)
SELECT T1.name  FROM Dogs AS T1  WHERE NOT EXISTS (   SELECT T2.cost_of_treatment    FROM Treatments AS T2    INNER JOIN Owners ON T2.owner_id = Owners.owner_id   WHERE T2.dog_id = T1.dog_id AND T2.cost_of_treatment > 1000 )
SELECT first_name FROM Professionals WHERE first_name NOT IN (SELECT name FROM Dogs) UNION SELECT first_name FROM Owners WHERE first_name NOT IN (SELECT name FROM Dogs)
SELECT DISTINCT T1.first_name  FROM Professionals AS T1  WHERE T1.first_name NOT IN (SELECT T2.name FROM Dogs AS T2)     OR T1.first_name NOT IN (SELECT T3.first_name FROM Owners AS T3)
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT professional_id, role_code, email_address  FROM Professionals  WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id, Owners.first_name, Owners.last_name ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1
SELECT professional_id, role_code, first_name FROM Professionals GROUP BY professional_id, role_code, first_name HAVING COUNT(*) >= 2
SELECT professional_id, role_code, first_name FROM Professionals GROUP BY professional_id, role_code, first_name HAVING COUNT(*) >= 2
SELECT breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY breed_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT breed_name  FROM Breeds  JOIN Dogs ON Breeds.breed_code = Dogs.breed_code  GROUP BY breed_name  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.last_name ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1
SELECT Owners.owner_id, Owners.last_name  FROM Owners  WHERE owner_id = (     SELECT owner_id      FROM Dogs      JOIN Treatments ON Treatments.dog_id = Dogs.dog_id      GROUP BY owner_id      ORDER BY SUM(cost_of_treatment) DESC      LIMIT 1 )
SELECT Treatment_Types.treatment_type_description  FROM Treatment_Types JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code GROUP BY Treatment_Types.treatment_type_description ORDER BY SUM(Treatments.cost_of_treatment) ASC LIMIT 1
SELECT treatment_type_description  FROM Treatment_Types  JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code  GROUP BY Treatments.treatment_type_code  ORDER BY SUM(cost_of_treatment) ASC  LIMIT 1
SELECT owners.owner_id, owners.zip_code  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  JOIN treatments ON dogs.dog_id = treatments.dog_id  GROUP BY owners.owner_id  ORDER BY SUM(treatments.cost_of_treatment) DESC  LIMIT 1
SELECT owners.owner_id, owners.zip_code FROM owners WHERE owners.owner_id = (     SELECT dogs.owner_id     FROM treatments     JOIN dogs ON treatments.dog_id = dogs.dog_id     GROUP BY dogs.owner_id     ORDER BY SUM(treatments.cost_of_treatment) DESC     LIMIT 1 )
SELECT professional_id, cell_number  FROM Professionals  GROUP BY professional_id, cell_number  HAVING COUNT(DISTINCT treatment_type_code) >= 2
SELECT professional_id, cell_number  FROM Professionals  GROUP BY professional_id  HAVING COUNT(DISTINCT treatment_type_code) > 1
SELECT Professionals.first_name, Professionals.last_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT first_name, last_name FROM Professionals WHERE professional_id IN (     SELECT DISTINCT professional_id     FROM Treatments     WHERE cost_of_treatment < (         SELECT AVG(cost_of_treatment)         FROM Treatments     ) )
SELECT date_of_treatment, first_name  FROM Treatments  JOIN Professionals ON Treatments.professional_id = Professionals.professional_id
SELECT treatments.date_of_treatment, professionals.first_name  FROM treatments  JOIN professionals ON treatments.professional_id = professionals.professional_id
SELECT cost_of_treatment, treatment_type_description  FROM Treatments  JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
SELECT cost_of_treatment, treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
SELECT owners.first_name, owners.last_name, sizes.size_description  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  JOIN sizes ON dogs.size_code = sizes.size_code
SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id
SELECT owners.first_name, dogs.name  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id
SELECT T1.name, T2.date_of_treatment  FROM Dogs AS T1  JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id  WHERE T1.breed_code = (     SELECT T3.breed_code      FROM Breeds AS T3      GROUP BY T3.breed_code      ORDER BY COUNT(T1.breed_code) ASC      LIMIT 1 )
SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE breeds.breed_code IN (   SELECT breed_code   FROM breeds   GROUP BY breed_code   HAVING COUNT(*) = (     SELECT MIN(count(*))     FROM breeds   ) ) GROUP BY dogs.name, treatments.date_of_treatment;
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.state = 'Virginia'
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.state = 'Virginia'
SELECT date_arrived, date_departed FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT date_arrived, date_departed  FROM Dogs  WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT owners.last_name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  ORDER BY dogs.date_of_birth DESC  LIMIT 1
SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id ORDER BY dogs.date_of_birth ASC LIMIT 1
SELECT email_address  FROM Professionals  WHERE state = 'Hawaii' OR state = 'Wisconsin'
SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin')
SELECT date_arrived, date_departed FROM Dogs
SELECT date_arrived, date_departed FROM Dogs
SELECT COUNT(DISTINCT dog_id) FROM Treatments
SELECT COUNT(DISTINCT dog_id) FROM Treatments
SELECT COUNT(DISTINCT professional_id) FROM Treatments WHERE professional_id IS NOT NULL
SELECT COUNT(DISTINCT professional_id) AS num_professionals FROM Treatments;
SELECT role_code, street, city, state  FROM Professionals  WHERE city LIKE '%West%'
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'
SELECT first_name, last_name, email_address  FROM Owners  WHERE state LIKE '%North%'
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT MAX(cost_of_treatment) FROM Treatments
SELECT treatments.cost_of_treatment  FROM treatments  ORDER BY treatments.date_of_treatment DESC  LIMIT 1
SELECT count(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT COUNT(DISTINCT dog_id)  FROM Dogs  WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT count(DISTINCT T1.owner_id)  FROM Owners AS T1  WHERE T1.owner_id NOT IN (SELECT DISTINCT T2.owner_id FROM Dogs AS T2)
SELECT COUNT(DISTINCT T1.owner_id)  FROM Owners AS T1  WHERE T1.owner_id NOT IN (SELECT DISTINCT T2.owner_id FROM Dogs AS T2)
SELECT count(professional_id)  FROM Professionals  WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT COUNT(DISTINCT T1.professional_id) AS num_professionals FROM Professionals AS T1 WHERE T1.professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1
SELECT avg(age) FROM Dogs
SELECT AVG(age) FROM Dogs
SELECT MAX(age) AS oldest_age FROM Dogs
SELECT MAX(age) FROM Dogs
SELECT charge_type, SUM(charge_amount) AS total_cost FROM Charges GROUP BY charge_type
SELECT charge_type, charge_amount FROM Charges
SELECT MAX(charge_amount) AS max_charge_amount FROM Charges
SELECT charge_amount  FROM Charges  ORDER BY charge_amount DESC  LIMIT 1
SELECT email_address, cell_number, home_phone FROM Professionals
SELECT email_address, cell_number, home_phone  FROM Professionals
SELECT breeds.breed_name, sizes.size_description  FROM breeds  JOIN dogs ON breeds.breed_code = dogs.breed_code JOIN sizes ON dogs.size_code = sizes.size_code GROUP BY breeds.breed_name, sizes.size_description
SELECT DISTINCT breed_code, size_code FROM Dogs
SELECT professionals.first_name, treatment_types.treatment_type_description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;
SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT count(*) FROM singer
SELECT COUNT(*) FROM singer
SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions ASC
SELECT name FROM singer ORDER BY Net_Worth_Millions ASC
SELECT birth_year, citizenship FROM singer
SELECT birth_year, citizenship FROM singer
SELECT name FROM singer WHERE citizenship <> "France"
SELECT name FROM singer WHERE citizenship != 'French'
SELECT name FROM singer WHERE birth_year IN (1948, 1949)
SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949
SELECT name  FROM singer  ORDER BY Net_Worth_Millions DESC  LIMIT 1
SELECT name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
SELECT citizenship, COUNT(DISTINCT Singer_ID)  FROM singer  GROUP BY citizenship
SELECT citizenship, COUNT(DISTINCT Singer_ID) FROM singer GROUP BY citizenship
SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1
SELECT citizenship, COUNT(*) as count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1
SELECT citizenship, MAX(net_worth_millions)  FROM singer  GROUP BY citizenship
SELECT citizenship, MAX(net_worth_millions)  FROM singer  GROUP BY citizenship
SELECT song.Title, singer.Name  FROM song  JOIN singer ON song.Singer_ID = singer.Singer_ID
SELECT song.title, singer.name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID
SELECT name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Sales > 300000;
SELECT name FROM singer  JOIN song ON singer.Singer_ID = song.Singer_ID  WHERE Sales > 300000
SELECT singer.Name FROM singer JOIN song ON song.Singer_ID = singer.Singer_ID GROUP BY singer.Name HAVING COUNT(song.Song_ID) > 1
SELECT name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Singer_ID, singer.Name HAVING COUNT(song.Song_ID) > 1
SELECT singer.Name, SUM(song.Sales) AS total_sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name
SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name
SELECT name FROM singer WHERE singer.Singer_ID NOT IN (SELECT singer.Singer_ID FROM song)
SELECT name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
SELECT citizenship FROM singer WHERE birth_year < 1945 OR birth_year > 1955;
SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 OR birth_year > 1955
SELECT COUNT(*) FROM Other_Available_Features
SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code = (   SELECT feature_type_code   FROM Other_Available_Features   WHERE feature_name = 'AirCon' )
SELECT property_type_description FROM ref_property_types WHERE property_type_code = (SELECT property_type_code FROM properties)
SELECT properties.property_name  FROM properties WHERE (properties.property_type_code = 'Apartment' OR properties.property_type_code = 'House')  AND properties.room_count > 1
