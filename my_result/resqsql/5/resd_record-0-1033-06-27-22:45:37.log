
index is 0
SELECT count(*) FROM singer
How many singers do we have?
schema_links:
How many singers do we have? | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.song_release_year , singer.* | stadium : stadium.capacity , stadium.location , stadium.name , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( singer.singer_id ) from singer
SQL = SELECT count(singer_id) FROM singer
natsql:
select count ( _ ) from _ | select count ( singer.singer_id ) from singer

SQL:
SELECT count(singer_id) FROM singer
self correction:
SELECT count(Singer_ID) FROM singer

index is 1
SELECT count(*) FROM singer
What is the total number of singers?
schema_links:
What is the total number of singers? | singer : singer.singer_id , singer.name , singer.country , singer.song_name , singer.age , singer.* | stadium : stadium.capacity , stadium.highest , stadium.lowest , stadium.location , stadium.name , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( singer.singer_id ) from singer
SQL = SELECT count(*) FROM singer
natsql:
select count ( _ ) from _ | select count ( singer.singer_id ) from singer

SQL:
SELECT count(*) FROM singer
self correction:
SELECT count(Singer_ID) FROM singer

index is 2
SELECT name ,  country ,  age FROM singer ORDER BY age DESC
Show name, country, age for all singers ordered by age from the oldest to the youngest.
schema_links:
Show name, country, age for all singers ordered by age from the oldest to the youngest. | singer : singer.name , singer.country , singer.age , singer.song_name , singer.is_male , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ , _ , _ from _ order by _ desc | select singer.name , singer.country , singer.age from singer order by singer.age desc
SQL = SELECT name ,  country ,  age FROM singer ORDER BY age DESC
natsql:
select _ , _ , _ from _ order by _ desc | select singer.name , singer.country , singer.age from singer order by singer.age desc

SQL:
SELECT name ,  country ,  age FROM singer ORDER BY age DESC
self correction:
SELECT name, country, age FROM singer ORDER BY age DESC

index is 3
SELECT name ,  country ,  age FROM singer ORDER BY age DESC
What are the names, countries, and ages for every singer in descending order of age?
schema_links:
What are the names, countries, and ages for every singer in descending order of age? | singer : singer.name , singer.country , singer.age , singer.song_name , singer.singer_id , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ , _ , _ from _ order by _ desc | select singer.name , singer.country , singer.age from singer order by singer.age desc
SQL = SELECT name ,  country ,  age FROM singer ORDER BY age DESC
natsql:
select _ , _ , _ from _ order by _ desc | select singer.name , singer.country , singer.age from singer order by singer.age desc

SQL:
SELECT name ,  country ,  age FROM singer ORDER BY age DESC
self correction:
SELECT singer.Name, singer.Country, singer.Age FROM singer ORDER BY singer.Age DESC

index is 4
SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
What is the average, minimum, and maximum age of all singers from France?
schema_links:
What is the average, minimum, and maximum age of all singers from France? | singer : singer.country ( France ) , singer.age , singer.name , singer.is_male , singer.singer_id , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select avg ( _ ) , min ( _ ) , max ( _ ) from _ where _ = _ | select avg ( singer.age ) , min ( singer.age ) , max ( singer.age ) from singer where singer.country = 'France'
SQL = SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
natsql:
select avg ( _ ) , min ( _ ) , max ( _ ) from _ where _ = _ | select avg ( singer.age ) , min ( singer.age ) , max ( singer.age ) from singer where singer.country = 'France'

SQL:
SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
self correction:
SELECT avg(Age), min(Age), max(Age) FROM singer WHERE Country = 'France'

index is 5
SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
What is the average, minimum, and maximum age for all French singers?
schema_links:
What is the average, minimum, and maximum age for all French singers? | singer : singer.country , singer.age , singer.name , singer.is_male , singer.song_name , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select avg ( _ ) , min ( _ ) , max ( _ ) from _ where _ = _ | select avg ( singer.age ) , min ( singer.age ) , max ( singer.age ) from singer where singer.country = 'French'
SQL = SELECT avg(age) , min(age) , max(age) FROM singer WHERE country = 'French'
natsql:
select avg ( _ ) , min ( _ ) , max ( _ ) from _ where _ = _ | select avg ( singer.age ) , min ( singer.age ) , max ( singer.age ) from singer where singer.country = 'French'

SQL:
SELECT avg(age) , min(age) , max(age) FROM singer WHERE country = 'French'
self correction:
SELECT avg(Age), min(Age), max(Age) FROM singer WHERE Country = 'French'

index is 6
SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1
Show the name and the release year of the song by the youngest singer.
schema_links:
Show the name and the release year of the song by the youngest singer. | singer : singer.song_name , singer.song_release_year , singer.age , singer.name , singer.singer_id , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ , min ( _ ) from _ | select singer.name , min ( singer.age ) from singer group by singer.name
SQL = SELECT name ,  MIN(age) FROM singer GROUP BY name

input = Find the average capacity of all the stadiums. | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.concert_id , concert.theme , concert.stadium_id , concert.year , concert.concert_name , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.* | singer : singer.age , singer.country , singer.name , singer.is_male , singer.song_name , singer.song_release_year , singer.singer_id , singer.*
natsql = select avg ( _ ) from _ | select avg ( stadium.capacity ) from stadium
SQL = SELECT AVG(capacity) FROM stadium

input = Find the names of the singers who performed in the concert with the highest capacity stadium. | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.* | singer : singer.song_name , singer.singer_id , singer.name , singer.country , singer.song_release_year , singer.age , singer.is_male , singer.*
natsql = select _ from _ where @.@ = max ( _ ) | select singer.name from singer_in_concert where @.@ = max ( concert.stadium_id )
SQL = SELECT T3.name FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_id  =  T2.concert_id JOIN singer AS T3 ON T2.singer_id  =  T3.singer_id WHERE T1.stadium_id  =  (SELECT max(stadium_id) FROM concert)

input = Find the average salary of instructors who teach the course with course_id = 'CS101'. | instructor : instructor.name , instructor.dept_name , instructor.salary , instructor.id , instructor.* | teaches : teaches.id , teaches.semester , teaches.course_id , teaches.sec_id , teaches.year , teaches.* | time_slot : time_slot.start_hr , time_slot.start_min , time_slot.end_hr , time_slot.day , time_slot.time_slot_id , time_slot.* | prereq : prereq.course_id , prereq.prereq_id , prereq.*
natsql = select avg ( _ ) from _ where @.@ = _ | select avg ( instructor.salary ) from instructor where instructor.id in ( select teaches.id from teaches where teaches.course_id = 'CS101' )
SQL = SELECT AVG(salary) FROM instructor WHERE id  IN  (SELECT id FROM teaches WHERE course_id  =  'CS101')

input = Find the title of the courses that have a prerequisite course with course_id = 'CS101'. | prereq : prereq.course_id , prereq.prereq_id , prereq.* | section : section.building , section.year , section.room_number , section.sec_id , section.course_id , section.time_slot_id , section.* | takes : takes.semester , takes.grade , takes.sec_id , takes.year , takes.course_id , takes.id , takes.* | course : course.dept_name , course.course_id , course.title , course.credits , course.*
natsql = select _ from _ where _ in ( select _ from _ where _ = _ ) | select course.title from course where course.course_id in ( select prereq.course_id from prereq where prereq.prereq_id = 'CS101' )
SQL = SELECT T1.title FROM course AS
natsql:
select _ , min ( _ ) from _ | select singer.name , min ( singer.age ) from singer group by singer.name

SQL:
SELECT name ,  MIN(age) FROM singer GROUP BY name

input = Find the average capacity of all the stadiums. | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.concert_id , concert.theme , concert.stadium_id , concert.year , concert.concert_name , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.* | singer : singer.age , singer.country , singer.name , singer.is_male , singer.song_name , singer.song_release_year , singer.singer_id , singer.*
natsql = select avg ( _ ) from _ | select avg ( stadium.capacity ) from stadium

self correction:
SELECT AVG(capacity) FROM stadium

index is 7
SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1
What are the names and release years for all the songs of the youngest singer?
schema_links:
What are the names and release years for all the songs of the youngest singer? | singer : singer.song_release_year , singer.song_name , singer.age , singer.name , singer.is_male , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ , _ from _ where @.@ = min ( _ ) | select singer.name , singer.song_release_year from singer where @.@ = min ( singer.age )
SQL = SELECT name , song_release_year FROM singer WHERE age  =  (SELECT min(age) FROM singer)
natsql:
select _ , _ from _ where @.@ = min ( _ ) | select singer.name , singer.song_release_year from singer where @.@ = min ( singer.age )

SQL:
SELECT name , song_release_year FROM singer WHERE age  =  (SELECT min(age) FROM singer)
self correction:
SELECT s.name, s.song_release_year FROM singer AS s JOIN singer_in_concert AS sic ON s.Singer_ID = sic.Singer_ID WHERE s.Age = (SELECT MIN(Age) FROM singer)

index is 8
SELECT DISTINCT country FROM singer WHERE age  >  20
What are all distinct countries where singers above age 20 are from?
schema_links:
What are all distinct countries where singers above age 20 are from? | singer : singer.country , singer.age , singer.name , singer.song_name , singer.singer_id , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select distinct _ from _ where _ > _ group by _ | select distinct singer.country from singer where singer.age > 20 group by singer.country
SQL = SELECT DISTINCT country FROM singer WHERE age > 20
natsql:
select distinct _ from _ where _ > _ group by _ | select distinct singer.country from singer where singer.age > 20 group by singer.country

SQL:
SELECT DISTINCT country FROM singer WHERE age > 20
self correction:
SELECT DISTINCT Country FROM singer WHERE Age > 20

index is 9
SELECT DISTINCT country FROM singer WHERE age  >  20
What are  the different countries with singers above age 20?
schema_links:
What are  the different countries with singers above age 20? | singer : singer.country , singer.age , singer.name , singer.song_name , singer.is_male , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select distinct _ from _ where _ | select distinct singer.country from singer where singer.age > 20
SQL = SELECT DISTINCT country FROM singer WHERE age > 20
natsql:
select distinct _ from _ where _ | select distinct singer.country from singer where singer.age > 20

SQL:
SELECT DISTINCT country FROM singer WHERE age > 20
self correction:
SELECT DISTINCT Country FROM singer WHERE Age > 20

index is 10
SELECT country ,  count(*) FROM singer GROUP BY country
Show all countries and the number of singers in each country.
schema_links:
Show all countries and the number of singers in each country. | singer : singer.country , singer.name , singer.song_name , singer.age , singer.is_male , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select singer.country , count ( singer.* ) from singer group by singer.country
SQL = SELECT country ,  COUNT(*) FROM singer GROUP BY country
natsql:
select _ , count ( _ ) from _ group by _ | select singer.country , count ( singer.* ) from singer group by singer.country

SQL:
SELECT country ,  COUNT(*) FROM singer GROUP BY country
self correction:
SELECT country, COUNT(*) AS Singer_Count FROM singer GROUP BY country

index is 11
SELECT country ,  count(*) FROM singer GROUP BY country
How many singers are from each country?
schema_links:
How many singers are from each country? | singer : singer.country , singer.singer_id , singer.name , singer.song_name , singer.age , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select singer.country , count ( singer.singer_id ) from singer group by singer.country
SQL = SELECT country , COUNT(singer_id) FROM singer GROUP BY country
natsql:
select _ , count ( _ ) from _ group by _ | select singer.country , count ( singer.singer_id ) from singer group by singer.country

SQL:
SELECT country , COUNT(singer_id) FROM singer GROUP BY country
self correction:
SELECT country, COUNT(*) AS singer_count FROM singer GROUP BY country

index is 12
SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
List all song names by singers above the average age.
schema_links:
List all song names by singers above the average age. | singer : singer.song_name , singer.age , singer.name , singer.song_release_year , singer.country , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ from _ where @.@ > avg ( _ ) | select singer.song_name from singer where @.@ > avg ( singer.age )
SQL = SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
natsql:
select _ from _ where @.@ > avg ( _ ) | select singer.song_name from singer where @.@ > avg ( singer.age )

SQL:
SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
self correction:
SELECT s.song_Name FROM singer s WHERE s.Age > (SELECT AVG(s2.Age) FROM singer s2)

index is 13
SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
What are all the song names by singers who are older than average?
schema_links:
What are all the song names by singers who are older than average? | singer : singer.song_name , singer.age , singer.name , singer.song_release_year , singer.country , singer.* | stadium : stadium.average , stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select distinct _ from _ where _ > avg ( _ ) | select distinct singer.song_name from singer where singer.age > avg ( singer.age )
SQL = SELECT DISTINCT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
natsql:
select distinct _ from _ where _ > avg ( _ ) | select distinct singer.song_name from singer where singer.age > avg ( singer.age )

SQL:
SELECT DISTINCT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
self correction:
SELECT s.song_name FROM singer s WHERE s.age > (SELECT AVG(age) FROM singer)

index is 14
SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
Show location and name for all stadiums with a capacity between 5000 and 10000.
schema_links:
Show location and name for all stadiums with a capacity between 5000 and 10000. | stadium : stadium.name , stadium.capacity , stadium.location , stadium.highest , stadium.stadium_id , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ , _ from _ where _ between _ and _ | select stadium.location , stadium.name from stadium where stadium.capacity between 5000 and 10000
SQL = SELECT location ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
natsql:
select _ , _ from _ where _ between _ and _ | select stadium.location , stadium.name from stadium where stadium.capacity between 5000 and 10000

SQL:
SELECT location ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
self correction:
SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;

index is 15
SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
What are the locations and names of all stations with capacity between 5000 and 10000?
schema_links:
What are the locations and names of all stations with capacity between 5000 and 10000? | stadium : stadium.capacity , stadium.name , stadium.location , stadium.stadium_id , stadium.highest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ , _ from _ where _ between _ and _ | select stadium.location , stadium.name from stadium where stadium.capacity between 5000 and 10000
SQL = SELECT location ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
natsql:
select _ , _ from _ where _ between _ and _ | select stadium.location , stadium.name from stadium where stadium.capacity between 5000 and 10000

SQL:
SELECT location ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
self correction:
SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;

index is 16
select max(capacity), average from stadium
What is the maximum capacity and the average of all stadiums ?
schema_links:
What is the maximum capacity and the average of all stadiums ? | stadium : stadium.average , stadium.capacity , stadium.highest , stadium.lowest , stadium.name , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select max ( _ ) , avg ( _ ) from _ | select max ( stadium.capacity ) , avg ( stadium.capacity ) from stadium
SQL = SELECT max(capacity) , avg(capacity) FROM stadium
natsql:
select max ( _ ) , avg ( _ ) from _ | select max ( stadium.capacity ) , avg ( stadium.capacity ) from stadium

SQL:
SELECT max(capacity) , avg(capacity) FROM stadium
self correction:
SELECT MAX(Capacity), AVG(Capacity) FROM stadium

index is 17
select avg(capacity) ,  max(capacity) from stadium
What is the average and maximum capacities for all stadiums ?
schema_links:
What is the average and maximum capacities for all stadiums ? | stadium : stadium.capacity , stadium.average , stadium.highest , stadium.lowest , stadium.location , stadium.* | concert : concert.concert_name , concert.theme , concert.year , concert.concert_id , concert.stadium_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select avg ( _ ) , max ( _ ) from _ | select avg ( stadium.capacity ) , max ( stadium.capacity ) from stadium
SQL = SELECT AVG(capacity) ,  MAX(capacity) FROM stadium
natsql:
select avg ( _ ) , max ( _ ) from _ | select avg ( stadium.capacity ) , max ( stadium.capacity ) from stadium

SQL:
SELECT AVG(capacity) ,  MAX(capacity) FROM stadium
self correction:
SELECT AVG(Capacity), MAX(Capacity) FROM stadium

index is 18
SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
What is the name and capacity for the stadium with highest average attendance?
schema_links:
What is the name and capacity for the stadium with highest average attendance? | stadium : stadium.name , stadium.capacity , stadium.average , stadium.highest , stadium.stadium_id , stadium.* | concert : concert.concert_name , concert.theme , concert.year , concert.concert_id , concert.stadium_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ , max ( _ ) from _ group by _ | select stadium.name , stadium.capacity from stadium where stadium.average = max ( stadium.average )
SQL = SELECT name ,  capacity FROM stadium WHERE average  =  (SELECT max(average) FROM stadium)
natsql:
select _ , max ( _ ) from _ group by _ | select stadium.name , stadium.capacity from stadium where stadium.average = max ( stadium.average )

SQL:
SELECT name ,  capacity FROM stadium WHERE average  =  (SELECT max(average) FROM stadium)
self correction:
SELECT name, capacity  FROM stadium  WHERE average = (SELECT MAX(average) FROM stadium)

index is 19
SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
What is the name and capacity for the stadium with the highest average attendance?
schema_links:
What is the name and capacity for the stadium with the highest average attendance? | stadium : stadium.name , stadium.capacity , stadium.average , stadium.highest , stadium.stadium_id , stadium.* | concert : concert.concert_name , concert.theme , concert.year , concert.concert_id , concert.stadium_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ , _ from _ order by avg ( _ ) desc limit _ | select stadium.name , stadium.capacity from stadium order by stadium.average desc limit 1
SQL = SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
natsql:
select _ , _ from _ order by avg ( _ ) desc limit _ | select stadium.name , stadium.capacity from stadium order by stadium.average desc limit 1

SQL:
SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
self correction:
SELECT stadium.Name, stadium.Capacity FROM stadium ORDER BY stadium.Average DESC LIMIT 1

index is 20
SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015
How many concerts are there in year 2014 or 2015?
schema_links:
How many concerts are there in year 2014 or 2015? | concert : concert.year , concert.concert_name , concert.concert_id , concert.theme , concert.stadium_id , concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select count ( _ ) from _ where _ = _ or _ = _ | select count ( concert.* ) from concert where concert.year = 2014 or concert.year = 2015
SQL = SELECT count(*) FROM concert WHERE year = 2014 OR year = 2015
natsql:
select count ( _ ) from _ where _ = _ or _ = _ | select count ( concert.* ) from concert where concert.year = 2014 or concert.year = 2015

SQL:
SELECT count(*) FROM concert WHERE year = 2014 OR year = 2015
self correction:
SELECT COUNT(*) FROM concert WHERE Year = 2014 OR Year = 2015

index is 21
SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015
How many concerts occurred in 2014 or 2015?
schema_links:
How many concerts occurred in 2014 or 2015? | concert : concert.year , concert.concert_name , concert.concert_id , concert.theme , concert.stadium_id , concert.* | stadium : stadium.capacity , stadium.location , stadium.name , stadium.highest , stadium.lowest , stadium.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select count ( distinct _ ) from _ where _ or _ | select count ( distinct concert.concert_id ) from concert where concert.year = 2014 or concert.year = 2015
SQL = SELECT COUNT(DISTINCT concert_ID) FROM concert WHERE Year = 2014 OR Year = 2015
natsql:
select count ( distinct _ ) from _ where _ or _ | select count ( distinct concert.concert_id ) from concert where concert.year = 2014 or concert.year = 2015

SQL:
SELECT COUNT(DISTINCT concert_ID) FROM concert WHERE Year = 2014 OR Year = 2015
self correction:
SELECT COUNT(DISTINCT concert_ID) FROM concert WHERE Year = 2014 OR Year = 2015

index is 22
SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id
Show the stadium name and the number of concerts in each stadium.
schema_links:
Show the stadium name and the number of concerts in each stadium. | stadium : stadium.name , stadium.stadium_id , stadium.capacity , stadium.location , stadium.highest , stadium.* | concert : concert.stadium_id , concert.concert_name , concert.concert_id , concert.theme , concert.year , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select stadium.name , count ( concert.concert_id ) from stadium left join concert on stadium.stadium_id = concert.stadium_id group by stadium.name
SQL = SELECT stadium.name , COUNT(concert.concert_ID) FROM stadium LEFT JOIN concert ON stadium.stadium_ID = concert.stadium_ID GROUP BY stadium.name
natsql:
select _ , count ( _ ) from _ group by _ | select stadium.name , count ( concert.concert_id ) from stadium left join concert on stadium.stadium_id = concert.stadium_id group by stadium.name

SQL:
SELECT stadium.name , COUNT(concert.concert_ID) FROM stadium LEFT JOIN concert ON stadium.stadium_ID = concert.stadium_ID GROUP BY stadium.name
self correction:
SELECT stadium.Name, COUNT(concert.concert_ID) AS num_concerts FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name

index is 23
SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id
For each stadium, how many concerts play there?
schema_links:
For each stadium, how many concerts play there? | concert : concert.stadium_id , concert.concert_name , concert.theme , concert.year , concert.concert_id , concert.* | stadium : stadium.name , stadium.stadium_id , stadium.capacity , stadium.highest , stadium.location , stadium.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select stadium.name , count ( concert.* ) from stadium join concert on stadium.stadium_id = concert.stadium_id group by stadium.name
SQL = SELECT stadium.name , COUNT(concert.*) FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name
natsql:
select _ , count ( _ ) from _ group by _ | select stadium.name , count ( concert.* ) from stadium join concert on stadium.stadium_id = concert.stadium_id group by stadium.name

SQL:
SELECT stadium.name , COUNT(concert.*) FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name
self correction:
SELECT stadium.name, COUNT(concert.concert_ID)  FROM stadium  JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID  GROUP BY stadium.name

index is 24
SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1
Show the stadium name and capacity with most number of concerts in year 2014 or after.
schema_links:
Show the stadium name and capacity with most number of concerts in year 2014 or after. | stadium : stadium.name , stadium.capacity , stadium.stadium_id , stadium.location , stadium.highest , stadium.* | concert : concert.year , concert.stadium_id , concert.concert_name , concert.concert_id , concert.theme , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ , _ from _ where @.@ > _ group by _ | select stadium.name , stadium.capacity from stadium where @.@ > ( select count ( concert.concert_id ) from concert where concert.year >= 2014 group by concert.stadium_id ) group by stadium.name
SQL = SELECT name ,  capacity FROM stadium WHERE Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE year  >=  2014 GROUP BY Stadium_ID HAVING count(concert_ID)  =  (SELECT max(count(concert_ID)) FROM concert WHERE year  >=  2014 GROUP BY Stadium_ID))
natsql:
select _ , _ from _ where @.@ > _ group by _ | select stadium.name , stadium.capacity from stadium where @.@ > ( select count ( concert.concert_id ) from concert where concert.year >= 2014 group by concert.stadium_id ) group by stadium.name

SQL:
SELECT name ,  capacity FROM stadium WHERE Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE year  >=  2014 GROUP BY Stadium_ID HAVING count(concert_ID)  =  (SELECT max(count(concert_ID)) FROM concert WHERE year  >=  2014 GROUP BY Stadium_ID))
self correction:
SELECT name, capacity  FROM stadium  WHERE Stadium_ID IN (   SELECT Stadium_ID    FROM concert    WHERE Year >= 2014    GROUP BY Stadium_ID    HAVING COUNT(concert_ID) = (     SELECT MAX(concert_count)     FROM (       SELECT COUNT(concert_ID) AS concert_count       FROM concert        WHERE Year >= 2014        GROUP BY Stadium_ID     )   ) )

index is 25
select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1
What is the name and capacity of the stadium with the most concerts after 2013 ?
schema_links:
What is the name and capacity of the stadium with the most concerts after 2013 ? | stadium : stadium.name , stadium.capacity , stadium.stadium_id , stadium.location , stadium.highest , stadium.* | concert : concert.year , concert.stadium_id , concert.concert_name , concert.concert_id , concert.theme , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ , _ from _ where @.@ = max ( @.@ ) and @.@ > _ | select stadium.name , stadium.capacity from stadium where stadium.stadium_id = ( select concert.stadium_id from concert where concert.year > 2013 group by concert.stadium_id order by count ( * ) desc limit 1 ) and stadium.capacity > 0
SQL = SELECT name ,  capacity FROM stadium WHERE stadium_id  =  (SELECT stadium_id FROM concert WHERE year > 2013 GROUP BY stadium_id ORDER BY count(*) DESC LIMIT 1) AND capacity  >  0
natsql:
select _ , _ from _ where @.@ = max ( @.@ ) and @.@ > _ | select stadium.name , stadium.capacity from stadium where stadium.stadium_id = ( select concert.stadium_id from concert where concert.year > 2013 group by concert.stadium_id order by count ( * ) desc limit 1 ) and stadium.capacity > 0

SQL:
SELECT name ,  capacity FROM stadium WHERE stadium_id  =  (SELECT stadium_id FROM concert WHERE year > 2013 GROUP BY stadium_id ORDER BY count(*) DESC LIMIT 1) AND capacity  >  0
self correction:
SELECT name, capacity FROM stadium WHERE stadium_id = (     SELECT stadium_id     FROM concert     WHERE year > 2013     GROUP BY stadium_id     ORDER BY COUNT(*) DESC     LIMIT 1 )   AND capacity > 0;

index is 26
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
Which year has most number of concerts?
schema_links:
Which year has most number of concerts? | concert : concert.year , concert.concert_name , concert.theme , concert.concert_id , concert.stadium_id , concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ order by count ( _ ) desc limit _ | select concert.year , count ( concert.* ) from concert group by concert.year order by count ( concert.* ) desc limit 1
SQL = SELECT year , COUNT(*) FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1
natsql:
select _ , count ( _ ) from _ group by _ order by count ( _ ) desc limit _ | select concert.year , count ( concert.* ) from concert group by concert.year order by count ( concert.* ) desc limit 1

SQL:
SELECT year , COUNT(*) FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1
self correction:
SELECT concert.Year, COUNT(*)  FROM concert  GROUP BY concert.Year  ORDER BY COUNT(*) DESC  LIMIT 1

index is 27
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
What is the year that had the most concerts?
schema_links:
What is the year that had the most concerts? | concert : concert.year , concert.concert_name , concert.concert_id , concert.theme , concert.stadium_id , concert.* | stadium : stadium.capacity , stadium.highest , stadium.lowest , stadium.location , stadium.name , stadium.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select concert.year from concert group by concert.year order by count ( concert.* ) desc limit 1
SQL = SELECT year FROM concert GROUP BY year ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select concert.year from concert group by concert.year order by count ( concert.* ) desc limit 1

SQL:
SELECT year FROM concert GROUP BY year ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1

index is 28
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
Show the stadium names without any concert.
schema_links:
Show the stadium names without any concert. | stadium : stadium.name , stadium.stadium_id , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.concert_name , concert.theme , concert.stadium_id , concert.year , concert.concert_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ ) | select stadium.name from stadium where stadium.stadium_id not in ( select concert.stadium_id from concert )
SQL = SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
natsql:
select _ from _ where _ not in ( select _ from _ ) | select stadium.name from stadium where stadium.stadium_id not in ( select concert.stadium_id from concert )

SQL:
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
self correction:
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT Stadium_ID FROM concert)

index is 29
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
What are the names of the stadiums without any concerts?
schema_links:
What are the names of the stadiums without any concerts? | stadium : stadium.name , stadium.stadium_id , stadium.capacity , stadium.location , stadium.highest , stadium.* | concert : concert.stadium_id , concert.concert_name , concert.theme , concert.year , concert.concert_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ ) | select stadium.name from stadium where stadium.stadium_id not in ( select concert.stadium_id from concert )
SQL = SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
natsql:
select _ from _ where _ not in ( select _ from _ ) | select stadium.name from stadium where stadium.stadium_id not in ( select concert.stadium_id from concert )

SQL:
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
self correction:
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT DISTINCT stadium_id FROM concert)

index is 30
SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30
Show countries where a singer above age 40 and a singer below 30 are from.
schema_links:
Show countries where a singer above age 40 and a singer below 30 are from. | singer : singer.country , singer.age , singer.is_male , singer.name , singer.singer_id , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select distinct _ from _ where @.@ > _ and @.@ < _ | select distinct singer.country from singer where singer.age > 40 and singer.age < 30
SQL = SELECT DISTINCT country FROM singer WHERE age  >  40 AND age  <  30
natsql:
select distinct _ from _ where @.@ > _ and @.@ < _ | select distinct singer.country from singer where singer.age > 40 and singer.age < 30

SQL:
SELECT DISTINCT country FROM singer WHERE age  >  40 AND age  <  30
self correction:
SELECT DISTINCT country FROM singer WHERE age > 40 OR age < 30

index is 31
SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014
Show names for all stadiums except for stadiums having a concert in year 2014.
schema_links:
Show names for all stadiums except for stadiums having a concert in year 2014. | stadium : stadium.name , stadium.stadium_id , stadium.capacity , stadium.lowest , stadium.location , stadium.* | concert : concert.year , concert.concert_name , concert.stadium_id , concert.theme , concert.concert_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ where _ = _ ) | select stadium.name from stadium where stadium.stadium_id not in ( select concert.stadium_id from concert where concert.year = 2014 )
SQL = SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)
natsql:
select _ from _ where _ not in ( select _ from _ where _ = _ ) | select stadium.name from stadium where stadium.stadium_id not in ( select concert.stadium_id from concert where concert.year = 2014 )

SQL:
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)
self correction:
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)

index is 32
SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014
What are the names of all stadiums that did not have a concert in 2014?
schema_links:
What are the names of all stadiums that did not have a concert in 2014? | stadium : stadium.name , stadium.stadium_id , stadium.capacity , stadium.location , stadium.highest , stadium.* | concert : concert.year , concert.concert_name , concert.theme , concert.stadium_id , concert.concert_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ where _ = _ ) | select stadium.name from stadium where stadium.stadium_id not in ( select concert.stadium_id from concert where concert.year = 2014 )
SQL = SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)
natsql:
select _ from _ where _ not in ( select _ from _ where _ = _ ) | select stadium.name from stadium where stadium.stadium_id not in ( select concert.stadium_id from concert where concert.year = 2014 )

SQL:
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)
self correction:
SELECT name  FROM stadium  WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)

index is 33
SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id
Show the name and theme for all concerts and the number of singers in each concert.
schema_links:
Show the name and theme for all concerts and the number of singers in each concert. | concert : concert.concert_name , concert.theme , concert.concert_id , concert.year , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | singer : singer.name , singer.singer_id , singer.country , singer.song_name , singer.age , singer.*
natsql and SQL generation:
select _ , _ , count ( _ ) from _ group by _ | select concert.concert_name , concert.theme , count ( singer_in_concert.singer_id ) from concert join singer_in_concert on concert.concert_id = singer_in_concert.concert_id group by concert.concert_name , concert.theme
SQL = SELECT concert_name , theme , COUNT(singer_id) FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert_name , theme
natsql:
select _ , _ , count ( _ ) from _ group by _ | select concert.concert_name , concert.theme , count ( singer_in_concert.singer_id ) from concert join singer_in_concert on concert.concert_id = singer_in_concert.concert_id group by concert.concert_name , concert.theme

SQL:
SELECT concert_name , theme , COUNT(singer_id) FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert_name , theme
self correction:
SELECT concert_name, theme, COUNT(singer.Singer_ID)  FROM concert  JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID  GROUP BY concert_name, theme

index is 34
select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id
What are the names , themes , and number of singers for every concert ?
schema_links:
What are the names , themes , and number of singers for every concert ? | concert : concert.concert_name , concert.theme , concert.concert_id , concert.year , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | singer : singer.name , singer.singer_id , singer.country , singer.song_name , singer.age , singer.*
natsql and SQL generation:
select _ , _ , count ( _ ) from _ group by _ | select concert.concert_name , concert.theme , count ( singer_in_concert.singer_id ) from concert join singer_in_concert on concert.concert_id = singer_in_concert.concert_id group by concert.concert_name , concert.theme
SQL = SELECT concert_name ,  theme ,  count(singer_id) FROM concert JOIN singer_in_concert ON concert.concert_id  =  singer_in_concert.concert_id GROUP BY concert_name ,  theme
natsql:
select _ , _ , count ( _ ) from _ group by _ | select concert.concert_name , concert.theme , count ( singer_in_concert.singer_id ) from concert join singer_in_concert on concert.concert_id = singer_in_concert.concert_id group by concert.concert_name , concert.theme

SQL:
SELECT concert_name ,  theme ,  count(singer_id) FROM concert JOIN singer_in_concert ON concert.concert_id  =  singer_in_concert.concert_id GROUP BY concert_name ,  theme
self correction:
SELECT concert_name, theme, COUNT(singer.Singer_ID)  FROM concert  JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID  GROUP BY concert_name, theme

index is 35
SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id
List singer names and number of concerts for each singer.
schema_links:
List singer names and number of concerts for each singer. | singer : singer.name , singer.singer_id , singer.song_name , singer.country , singer.age , singer.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.* | concert : concert.concert_name , concert.concert_id , concert.theme , concert.year , concert.stadium_id , concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select singer.name , count ( singer_in_concert.* ) from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id group by singer.name
SQL = SELECT name , COUNT(*) FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY name
natsql:
select _ , count ( _ ) from _ group by _ | select singer.name , count ( singer_in_concert.* ) from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id group by singer.name

SQL:
SELECT name , COUNT(*) FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY name
self correction:
SELECT singer.Name, COUNT(*) AS Number_of_Concerts FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name

index is 36
SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id
What are the names of the singers and number of concerts for each person?
schema_links:
What are the names of the singers and number of concerts for each person? | singer : singer.name , singer.song_name , singer.singer_id , singer.is_male , singer.country , singer.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.* | concert : concert.concert_name , concert.theme , concert.concert_id , concert.year , concert.stadium_id , concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select singer.name , count ( singer_in_concert.singer_id ) from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id group by singer.name
SQL = SELECT name , COUNT(Singer_ID) FROM singer_in_concert GROUP BY Singer_ID
natsql:
select _ , count ( _ ) from _ group by _ | select singer.name , count ( singer_in_concert.singer_id ) from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id group by singer.name

SQL:
SELECT name , COUNT(Singer_ID) FROM singer_in_concert GROUP BY Singer_ID
self correction:
SELECT singer.Name, COUNT(singer_in_concert.Singer_ID)  FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  GROUP BY singer.Name

index is 37
SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014
List all singer names in concerts in year 2014.
schema_links:
List all singer names in concerts in year 2014. | singer : singer.name , singer.song_name , singer.singer_id , singer.country , singer.age , singer.* | concert : concert.year , concert.concert_name , concert.theme , concert.concert_id , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.*
natsql and SQL generation:
select distinct _ from _ where _ | select distinct singer.name from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id join singer on singer_in_concert.singer_id = singer.singer_id where concert.year = 2014
SQL = SELECT DISTINCT singer.name FROM singer_in_concert JOIN concert ON singer_in_concert.concert_id = concert.concert_id JOIN singer ON singer_in_concert.singer_id = singer.singer_id WHERE concert.year = 2014
natsql:
select distinct _ from _ where _ | select distinct singer.name from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id join singer on singer_in_concert.singer_id = singer.singer_id where concert.year = 2014

SQL:
SELECT DISTINCT singer.name FROM singer_in_concert JOIN concert ON singer_in_concert.concert_id = concert.concert_id JOIN singer ON singer_in_concert.singer_id = singer.singer_id WHERE concert.year = 2014
self correction:
SELECT singer.Name FROM singer_in_concert JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID JOIN singer ON singer_in_concert.singer_ID = singer.Singer_ID WHERE concert.Year = 2014

index is 38
SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014
What are the names of the singers who performed in a concert in 2014?
schema_links:
What are the names of the singers who performed in a concert in 2014? | singer : singer.name , singer.song_name , singer.singer_id , singer.country , singer.song_release_year , singer.* | concert : concert.year , concert.concert_name , concert.theme , concert.concert_id , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.*
natsql and SQL generation:
select distinct _ from _ where _ | select distinct singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014
SQL = SELECT DISTINCT name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.year = 2014
natsql:
select distinct _ from _ where _ | select distinct singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014

SQL:
SELECT DISTINCT name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.year = 2014
self correction:
SELECT name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.year = 2014

index is 39
SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
what is the name and nation of the singer who have a song having 'Hey' in its name?
schema_links:
what is the name and nation of the singer who have a song having 'Hey' in its name? | singer : singer.song_name , singer.country , singer.name , singer.song_release_year , singer.age , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ , _ from _ where _ like _ | select singer.name , singer.country from singer where singer.song_name like '%Hey%'
SQL = SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
natsql:
select _ , _ from _ where _ like _ | select singer.name , singer.country from singer where singer.song_name like '%Hey%'

SQL:
SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
self correction:
SELECT name, country FROM singer WHERE Song_Name LIKE '%Hey%'

index is 40
SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?
schema_links:
What is the name and country of origin of every singer who has a song with the word 'Hey' in its title? | singer : singer.song_name , singer.country , singer.name , singer.song_release_year , singer.is_male , singer.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.lowest , stadium.* | concert : concert.concert_name , concert.theme , concert.year , concert.concert_id , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select _ , _ from _ where _ like '%Hey%' | select singer.name , singer.country from singer where singer.song_name like '%Hey%'
SQL = SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
natsql:
select _ , _ from _ where _ like '%Hey%' | select singer.name , singer.country from singer where singer.song_name like '%Hey%'

SQL:
SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
self correction:
SELECT singer.Name, singer.Country  FROM singer  WHERE singer.Song_Name LIKE '%Hey%'

index is 41
SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015
Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.
schema_links:
Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015. | concert : concert.year , concert.stadium_id , concert.concert_name , concert.theme , concert.concert_id , concert.* | stadium : stadium.name , stadium.location , stadium.stadium_id , stadium.capacity , stadium.average , stadium.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select distinct _ , _ from _ where @.@ = _ and @.@ = _ | select distinct stadium.name , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014 and concert.year = 2015
SQL = SELECT DISTINCT stadium.name , stadium.location FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.year = 2014 AND concert.year = 2015
natsql:
select distinct _ , _ from _ where @.@ = _ and @.@ = _ | select distinct stadium.name , stadium.location from concert join stadium on concert.stadium_id = stadium.stadium_id where concert.year = 2014 and concert.year = 2015

SQL:
SELECT DISTINCT stadium.name , stadium.location FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.year = 2014 AND concert.year = 2015
self correction:
SELECT stadium.name, stadium.location FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year = 2014 OR concert.Year = 2015 GROUP BY stadium.name, stadium.location

index is 42
SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015
What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?
schema_links:
What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015? | stadium : stadium.name , stadium.location , stadium.stadium_id , stadium.capacity , stadium.highest , stadium.* | concert : concert.year , concert.stadium_id , concert.concert_id , concert.concert_name , concert.theme , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select distinct _ , _ from _ where _ and _ | select distinct stadium.name , stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014 and concert.year = 2015
SQL = SELECT DISTINCT name ,  location FROM stadium JOIN concert ON stadium.stadium_id  =  concert.stadium_id WHERE concert.year  =  2014 AND concert.year  =  2015
natsql:
select distinct _ , _ from _ where _ and _ | select distinct stadium.name , stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014 and concert.year = 2015

SQL:
SELECT DISTINCT name ,  location FROM stadium JOIN concert ON stadium.stadium_id  =  concert.stadium_id WHERE concert.year  =  2014 AND concert.year  =  2015
self correction:
SELECT name, location FROM stadium WHERE stadium_id IN (   SELECT stadium_id   FROM concert   WHERE year IN (2014, 2015)   GROUP BY stadium_id   HAVING COUNT(DISTINCT year) = 2 )

index is 43
select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)
Find the number of concerts happened in the stadium with the highest capacity .
schema_links:
Find the number of concerts happened in the stadium with the highest capacity . | stadium : stadium.capacity , stadium.highest , stadium.stadium_id , stadium.name , stadium.lowest , stadium.* | concert : concert.stadium_id , concert.concert_id , concert.concert_name , concert.year , concert.theme , concert.* | singer : singer.name , singer.country , singer.song_name , singer.age , singer.singer_id , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select count ( distinct _ ) from _ where @.@ = ( select max ( @.@ ) from _ ) | select count ( distinct concert.concert_id ) from concert where concert.stadium_id = ( select stadium_id from stadium where capacity = ( select max ( capacity ) from stadium ) )
SQL = SELECT COUNT(DISTINCT concert_ID) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium))
natsql:
select count ( distinct _ ) from _ where @.@ = ( select max ( @.@ ) from _ ) | select count ( distinct concert.concert_id ) from concert where concert.stadium_id = ( select stadium_id from stadium where capacity = ( select max ( capacity ) from stadium ) )

SQL:
SELECT COUNT(DISTINCT concert_ID) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium))
self correction:
SELECT COUNT(DISTINCT concert_ID) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium))

index is 44
select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)
What are the number of concerts that occurred in the stadium with the largest capacity ?
schema_links:
What are the number of concerts that occurred in the stadium with the largest capacity ? | stadium : stadium.capacity , stadium.highest , stadium.stadium_id , stadium.name , stadium.lowest , stadium.* | concert : concert.stadium_id , concert.concert_id , concert.concert_name , concert.year , concert.theme , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*
natsql and SQL generation:
select count ( distinct _ ) from _ where @.@ = max ( _ ) | select count ( distinct concert.concert_id ) from concert where concert.stadium_id = ( select stadium.stadium_id from stadium order by stadium.capacity desc limit 1 )
SQL = SELECT COUNT(DISTINCT concert_ID) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)
natsql:
select count ( distinct _ ) from _ where @.@ = max ( _ ) | select count ( distinct concert.concert_id ) from concert where concert.stadium_id = ( select stadium.stadium_id from stadium order by stadium.capacity desc limit 1 )

SQL:
SELECT COUNT(DISTINCT concert_ID) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)
self correction:
SELECT COUNT(DISTINCT concert_ID) AS number_of_concerts FROM concert WHERE Stadium_ID = (   SELECT Stadium_ID   FROM stadium   ORDER BY Capacity DESC   LIMIT 1 )

index is 45
SELECT count(*) FROM pets WHERE weight  >  10
Find the number of pets whose weight is heavier than 10.
schema_links:
Find the number of pets whose weight is heavier than 10. | pets : pets.weight , pets.petid , pets.pettype , pets.pet_age , pets.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.*
natsql and SQL generation:
select count ( * ) from pets where weight > 10
SQL = SELECT count(*) FROM pets WHERE weight > 10
natsql:
select count ( * ) from pets where weight > 10

SQL:
SELECT count(*) FROM pets WHERE weight > 10
self correction:
SELECT count(*) FROM Pets WHERE weight > 10

index is 46
SELECT count(*) FROM pets WHERE weight  >  10
How many pets have a greater weight than 10?
schema_links:
How many pets have a greater weight than 10? | pets : pets.weight , pets.petid , pets.pettype , pets.pet_age , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select count ( * ) from _ where @.@ > _ | select count ( * ) from pets where pets.weight > 10
SQL = SELECT count(*) FROM pets WHERE weight > 10
natsql:
select count ( * ) from _ where @.@ > _ | select count ( * ) from pets where pets.weight > 10

SQL:
SELECT count(*) FROM pets WHERE weight > 10
self correction:
SELECT count(DISTINCT PetID) FROM Pets WHERE weight > 10

index is 47
SELECT weight FROM pets ORDER BY pet_age LIMIT 1
Find the weight of the youngest dog.
schema_links:
Find the weight of the youngest dog. | pets : pets.pet_age , pets.weight , pets.pettype ( dog ) , pets.petid , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select _ from _ where _ = min ( _ ) | select pets.weight from pets where pets.pettype = 'dog' and pets.pet_age = min ( pets.pet_age )
SQL = SELECT weight FROM pets WHERE pettype = 'dog' AND pet_age  =  (SELECT min(pet_age) FROM pets WHERE pettype = 'dog')
natsql:
select _ from _ where _ = min ( _ ) | select pets.weight from pets where pets.pettype = 'dog' and pets.pet_age = min ( pets.pet_age )

SQL:
SELECT weight FROM pets WHERE pettype = 'dog' AND pet_age  =  (SELECT min(pet_age) FROM pets WHERE pettype = 'dog')
self correction:
SELECT Pets.weight FROM Pets WHERE Pets.pettype = 'dog' AND Pets.pet_age = (SELECT MIN(pet_age) FROM Pets WHERE Pets.pettype = 'dog')

index is 48
SELECT weight FROM pets ORDER BY pet_age LIMIT 1
How much does the youngest dog weigh?
schema_links:
How much does the youngest dog weigh? | pets : pets.weight , pets.pet_age , pets.pettype ( dog ) , pets.petid , pets.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.*
natsql and SQL generation:
select min ( _ ) from _ where @.@ = 'dog' | select min ( pets.weight ) from pets where pets.pettype = 'dog'
SQL = SELECT MIN(weight) FROM pets WHERE pettype  =  'dog'
natsql:
select min ( _ ) from _ where @.@ = 'dog' | select min ( pets.weight ) from pets where pets.pettype = 'dog'

SQL:
SELECT MIN(weight) FROM pets WHERE pettype  =  'dog'
self correction:
SELECT MIN(weight)  FROM Pets  WHERE PetType = 'dog'  ORDER BY pet_age ASC  LIMIT 1

index is 49
SELECT max(weight) ,  petType FROM pets GROUP BY petType
Find the maximum weight for each type of pet. List the maximum weight and pet type.
schema_links:
Find the maximum weight for each type of pet. List the maximum weight and pet type. | pets : pets.pettype , pets.weight , pets.petid , pets.pet_age , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select max ( _ ) , _ from _ group by _ | select max ( pets.weight ) , pets.pettype from pets group by pets.pettype
SQL = SELECT max(weight) ,  pettype FROM pets GROUP BY pettype
natsql:
select max ( _ ) , _ from _ group by _ | select max ( pets.weight ) , pets.pettype from pets group by pets.pettype

SQL:
SELECT max(weight) ,  pettype FROM pets GROUP BY pettype
self correction:
SELECT MAX(weight) AS max_weight, pettype FROM Pets GROUP BY pettype

index is 50
SELECT max(weight) ,  petType FROM pets GROUP BY petType
List the maximum weight and type for each type of pet.
schema_links:
List the maximum weight and type for each type of pet. | pets : pets.pettype , pets.weight , pets.petid , pets.pet_age , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select _ , max ( _ ) , _ from _ group by _ | select pets.pettype , max ( pets.weight ) , pets.petid from pets group by pets.pettype
SQL = SELECT pettype , MAX(weight) , petid FROM pets GROUP BY pettype
natsql:
select _ , max ( _ ) , _ from _ group by _ | select pets.pettype , max ( pets.weight ) , pets.petid from pets group by pets.pettype

SQL:
SELECT pettype , MAX(weight) , petid FROM pets GROUP BY pettype
self correction:
SELECT pets.pettype, MAX(pets.weight) AS max_weight FROM pets GROUP BY pets.pettype

index is 51
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
Find number of pets owned by students who are older than 20.
schema_links:
Find number of pets owned by students who are older than 20. | student : student.age , student.stuid , student.advisor , student.lname , student.fname , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.pet_age , pets.petid , pets.pettype , pets.weight , pets.*
natsql and SQL generation:
select count ( * ) from _ where _ > _ | select count ( * ) from has_pet join student on has_pet.stuid = student.stuid where student.age > 20
SQL = SELECT count(*) FROM has_pet JOIN student ON has_pet.stuid = student.stuid WHERE student.age  >  20
natsql:
select count ( * ) from _ where _ > _ | select count ( * ) from has_pet join student on has_pet.stuid = student.stuid where student.age > 20

SQL:
SELECT count(*) FROM has_pet JOIN student ON has_pet.stuid = student.stuid WHERE student.age  >  20
self correction:
SELECT count(DISTINCT has_pet.PetID) AS num_pets FROM has_pet JOIN student ON has_pet.StuID = student.StuID WHERE student.Age > 20

index is 52
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
How many pets are owned by students that have an age greater than 20?
schema_links:
How many pets are owned by students that have an age greater than 20? | student : student.age , student.stuid , student.fname , student.sex , student.major , student.* | pets : pets.pet_age , pets.petid , pets.pettype , pets.weight , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select count ( distinct _ ) from _ where _ > _ | select count ( distinct pets.petid ) from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where student.age > 20
SQL = SELECT count(DISTINCT T3.petid) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.age > 20
natsql:
select count ( distinct _ ) from _ where _ > _ | select count ( distinct pets.petid ) from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where student.age > 20

SQL:
SELECT count(DISTINCT T3.petid) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.age > 20
self correction:
SELECT count(DISTINCT T3.PetID)  FROM Student AS T1  JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID  JOIN Pets AS T3 ON T2.PetID = T3.PetID  WHERE T1.Age > 20

index is 53
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'
Find the number of dog pets that are raised by female students (with sex F).
schema_links:
Find the number of dog pets that are raised by female students (with sex F). | student : student.sex , student.stuid , student.fname , student.age , student.major , student.* | pets : pets.pettype ( dog ) , pets.petid , pets.pet_age , pets.weight , pets.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.*
natsql and SQL generation:
select count ( _ ) from _ where @.@ = 'F' and @.@ = 'dog' | select count ( pets.petid ) from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where student.sex = 'F' and pets.pettype = 'dog'
SQL = SELECT count(*) FROM student JOIN has_pet ON student.StuID = has_pet.StuID JOIN Pets ON has_pet.PetID = Pets.PetID WHERE student.Sex = 'F' AND Pets.PetType = 'dog'
natsql:
select count ( _ ) from _ where @.@ = 'F' and @.@ = 'dog' | select count ( pets.petid ) from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where student.sex = 'F' and pets.pettype = 'dog'

SQL:
SELECT count(*) FROM student JOIN has_pet ON student.StuID = has_pet.StuID JOIN Pets ON has_pet.PetID = Pets.PetID WHERE student.Sex = 'F' AND Pets.PetType = 'dog'
self correction:
SELECT COUNT(DISTINCT Pets.PetID)  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Student.Sex = 'F'  AND Pets.PetType = 'dog'

index is 54
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'
How many dog pets are raised by female students?
schema_links:
How many dog pets are raised by female students? | pets : pets.pettype ( dog ) , pets.petid , pets.pet_age , pets.weight , pets.* | student : student.sex , student.stuid , student.age , student.major , student.advisor , student.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.*
natsql and SQL generation:
select count ( _ ) from _ where @.@ = _ and @.@ = _ | select count ( pets.petid ) from pets join has_pet on pets.petid = has_pet.petid join student on student.stuid = has_pet.stuid where pets.pettype = 'dog' and student.sex = 'female'
SQL = SELECT count(petid) FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON student.stuid = has_pet.stuid WHERE pettype = 'dog' AND sex = 'female'
natsql:
select count ( _ ) from _ where @.@ = _ and @.@ = _ | select count ( pets.petid ) from pets join has_pet on pets.petid = has_pet.petid join student on student.stuid = has_pet.stuid where pets.pettype = 'dog' and student.sex = 'female'

SQL:
SELECT count(petid) FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON student.stuid = has_pet.stuid WHERE pettype = 'dog' AND sex = 'female'
self correction:
SELECT count(DISTINCT pets.petid)  FROM pets  JOIN has_pet ON pets.petid = has_pet.petid  JOIN student ON student.stuid = has_pet.stuid  WHERE pettype = 'dog' AND sex = 'female'

index is 55
SELECT count(DISTINCT pettype) FROM pets
Find the number of distinct type of pets.
schema_links:
Find the number of distinct type of pets. | pets : pets.pettype , pets.weight , pets.petid , pets.pet_age , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct pets.pettype ) from pets
SQL = SELECT COUNT(DISTINCT pettype) FROM pets
natsql:
select count ( distinct _ ) from _ | select count ( distinct pets.pettype ) from pets

SQL:
SELECT COUNT(DISTINCT pettype) FROM pets
self correction:
SELECT 

index is 56
SELECT count(DISTINCT pettype) FROM pets
How many different types of pet are there?
schema_links:
How many different types of pet are there? | pets : pets.pettype , pets.weight , pets.petid , pets.pet_age , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct pets.pettype ) from pets
SQL = SELECT count(DISTINCT pettype) FROM pets
natsql:
select count ( distinct _ ) from _ | select count ( distinct pets.pettype ) from pets

SQL:
SELECT count(DISTINCT pettype) FROM pets
self correction:
SELECT COUNT(DISTINCT PetType) FROM Pets

index is 57
SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'
Find the first name of students who have cat or dog pet.
schema_links:
Find the first name of students who have cat or dog pet. | student : student.fname , student.stuid , student.lname , student.age , student.sex , student.* | pets : pets.pettype ( cat , dog ) , pets.petid , pets.weight , pets.pet_age , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select distinct _ from _ where exists ( select * from _ where _ = _ ) | select distinct student.fname from student where exists ( select * from has_pet where student.stuid = has_pet.stuid and has_pet.petid in ( select petid from pets where pettype = 'cat' or pettype = 'dog' ) )
SQL = SELECT DISTINCT fname FROM student WHERE EXISTS ( SELECT * FROM has_pet WHERE student.stuid  =  has_pet.stuid AND has_pet.petid IN ( SELECT petid FROM pets WHERE pettype  =  'cat' OR pettype  =  'dog' ) )
natsql:
select distinct _ from _ where exists ( select * from _ where _ = _ ) | select distinct student.fname from student where exists ( select * from has_pet where student.stuid = has_pet.stuid and has_pet.petid in ( select petid from pets where pettype = 'cat' or pettype = 'dog' ) )

SQL:
SELECT DISTINCT fname FROM student WHERE EXISTS ( SELECT * FROM has_pet WHERE student.stuid  =  has_pet.stuid AND has_pet.petid IN ( SELECT petid FROM pets WHERE pettype  =  'cat' OR pettype  =  'dog' ) )
self correction:
SELECT DISTINCT fname  FROM Student  WHERE StuID IN (     SELECT StuID      FROM Has_Pet      WHERE PetID IN (         SELECT PetID          FROM Pets          WHERE PetType = 'cat' OR PetType = 'dog'     ) )

index is 58
SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'
What are the first names of every student who has a cat or dog as a pet?
schema_links:
What are the first names of every student who has a cat or dog as a pet? | student : student.fname , student.stuid , student.lname , student.sex , student.advisor , student.* | pets : pets.pettype ( cat , dog ) , pets.petid , pets.weight , pets.pet_age , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select distinct _ from _ join _ on _.@ = _.@ join _ on _.@ = _.@ where _.@ = _ or _.@ = _ | select distinct student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'cat' or pets.pettype = 'dog'
SQL = SELECT DISTINCT fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' OR pets.pettype = 'dog'
natsql:
select distinct _ from _ join _ on _.@ = _.@ join _ on _.@ = _.@ where _.@ = _ or _.@ = _ | select distinct student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'cat' or pets.pettype = 'dog'

SQL:
SELECT DISTINCT fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' OR pets.pettype = 'dog'
self correction:
SELECT fname FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype IN ('cat', 'dog')

index is 59
select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'
Find the first name of students who have both cat and dog pets .
schema_links:
Find the first name of students who have both cat and dog pets . | student : student.fname , student.stuid , student.lname , student.age , student.sex , student.* | pets : pets.pettype ( cat , dog ) , pets.petid , pets.weight , pets.pet_age , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select _ from _ where _ and _ | select student.fname from student where exists ( select * from has_pet where has_pet.stuid = student.stuid and ( exists ( select * from pets where pets.petid = has_pet.petid and pets.pettype = 'cat' ) and exists ( select * from pets where pets.petid = has_pet.petid and pets.pettype = 'dog' ) ) )
SQL = SELECT fname FROM student WHERE EXISTS (SELECT * FROM has_pet WHERE has_pet.stuid  =  student.stuid AND (EXISTS (SELECT * FROM pets WHERE pets.petid  =  has_pet.petid AND pets.pettype  =  'cat') AND EXISTS (SELECT * FROM pets WHERE pets.petid  =  has_pet.petid AND pets.pettype  =  'dog')))
natsql:
select _ from _ where _ and _ | select student.fname from student where exists ( select * from has_pet where has_pet.stuid = student.stuid and ( exists ( select * from pets where pets.petid = has_pet.petid and pets.pettype = 'cat' ) and exists ( select * from pets where pets.petid = has_pet.petid and pets.pettype = 'dog' ) ) )

SQL:
SELECT fname FROM student WHERE EXISTS (SELECT * FROM has_pet WHERE has_pet.stuid  =  student.stuid AND (EXISTS (SELECT * FROM pets WHERE pets.petid  =  has_pet.petid AND pets.pettype  =  'cat') AND EXISTS (SELECT * FROM pets WHERE pets.petid  =  has_pet.petid AND pets.pettype  =  'dog')))
self correction:
SELECT fname FROM Student WHERE StuID IN (     SELECT StuID FROM Has_Pet     WHERE PetID IN (         SELECT PetID FROM Pets         WHERE PetType = 'cat'     )     AND StuID IN (         SELECT StuID FROM Has_Pet         WHERE PetID IN (             SELECT PetID FROM Pets             WHERE PetType = 'dog'         )     ) );

index is 60
SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'
What are the students' first names who have both cats and dogs as pets?
schema_links:
What are the students' first names who have both cats and dogs as pets? | student : student.fname , student.lname , student.stuid , student.advisor , student.age , student.* | pets : pets.pettype ( cat , dog ) , pets.petid , pets.weight , pets.pet_age , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select distinct _ from _ where exists ( select * from _ where _ = _ and exists ( select * from _ where _ = _ and _ = _ ) ) | select distinct student.fname from student where exists ( select * from has_pet where has_pet.stuid = student.stuid and exists ( select * from pets where pets.petid = has_pet.petid and pets.pettype = 'cat' ) ) and exists ( select * from has_pet where has_pet.stuid = student.stuid and exists ( select * from pets where pets.petid = has_pet.petid and pets.pettype = 'dog' ) ) 
SQL = SELECT DISTINCT fname FROM student WHERE EXISTS (SELECT * FROM has_pet WHERE has_pet.stuid = student.stuid AND EXISTS (SELECT * FROM pets WHERE pets.petid = has_pet.petid AND pets.pettype = 'cat')) AND EXISTS (SELECT * FROM has_pet WHERE has_pet.stuid = student.stuid AND EXISTS (SELECT * FROM pets WHERE pets.petid = has_pet.petid AND pets.pettype = 'dog'))
natsql:
select distinct _ from _ where exists ( select * from _ where _ = _ and exists ( select * from _ where _ = _ and _ = _ ) ) | select distinct student.fname from student where exists ( select * from has_pet where has_pet.stuid = student.stuid and exists ( select * from pets where pets.petid = has_pet.petid and pets.pettype = 'cat' ) ) and exists ( select * from has_pet where has_pet.stuid = student.stuid and exists ( select * from pets where pets.petid = has_pet.petid and pets.pettype = 'dog' ) ) 

SQL:
SELECT DISTINCT fname FROM student WHERE EXISTS (SELECT * FROM has_pet WHERE has_pet.stuid = student.stuid AND EXISTS (SELECT * FROM pets WHERE pets.petid = has_pet.petid AND pets.pettype = 'cat')) AND EXISTS (SELECT * FROM has_pet WHERE has_pet.stuid = student.stuid AND EXISTS (SELECT * FROM pets WHERE pets.petid = has_pet.petid AND pets.pettype = 'dog'))
self correction:
SELECT DISTINCT fname FROM Student WHERE StuID IN (   SELECT StuID   FROM Has_Pet   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE PetType = 'cat' ) AND StuID IN (   SELECT StuID   FROM Has_Pet   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE PetType = 'dog' )

index is 61
SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
Find the major and age of students who do not have a cat pet.
schema_links:
Find the major and age of students who do not have a cat pet. | student : student.age , student.major , student.stuid , student.fname , student.sex , student.* | pets : pets.pettype ( cat ) , pets.pet_age , pets.petid , pets.weight , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select _ , _ from _ where _ not in ( select _ from _ where _ = _ ) | select student.major , student.age from student where student.stuid not in ( select has_pet.stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pettype = 'cat' )
SQL = SELECT major , age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat')
natsql:
select _ , _ from _ where _ not in ( select _ from _ where _ = _ ) | select student.major , student.age from student where student.stuid not in ( select has_pet.stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pettype = 'cat' )

SQL:
SELECT major , age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat')
self correction:
SELECT major, age FROM Student WHERE StuID NOT IN (     SELECT StuID     FROM Has_Pet     JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE PetType = 'cat' )

index is 62
SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
What major is every student who does not own a cat as a pet, and also how old are they?
schema_links:
What major is every student who does not own a cat as a pet, and also how old are they? | student : student.major , student.age , student.stuid , student.sex , student.advisor , student.* | pets : pets.pettype ( cat ) , pets.petid , pets.weight , pets.pet_age , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select student.major , student.age from student where student.id not in ( select has_pet.stuid from has_pet where has_pet.petid in ( select pets.petid from pets where pets.pettype = 'cat' ) )
SQL = SELECT student.major ,  student.age FROM student WHERE student.id NOT IN (SELECT has_pet.stuid FROM has_pet WHERE has_pet.petid IN (SELECT pets.petid FROM pets WHERE pets.pettype = 'cat'))
natsql:
select student.major , student.age from student where student.id not in ( select has_pet.stuid from has_pet where has_pet.petid in ( select pets.petid from pets where pets.pettype = 'cat' ) )

SQL:
SELECT student.major ,  student.age FROM student WHERE student.id NOT IN (SELECT has_pet.stuid FROM has_pet WHERE has_pet.petid IN (SELECT pets.petid FROM pets WHERE pets.pettype = 'cat'))
self correction:
SELECT student.major, student.age FROM Student WHERE Student.StuID NOT IN (   SELECT Has_Pet.StuID   FROM Has_Pet   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'cat' )

index is 63
SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'
Find the id of students who do not have a cat pet.
schema_links:
Find the id of students who do not have a cat pet. | student : student.stuid , student.age , student.sex , student.major , student.advisor , student.* | pets : pets.pettype ( cat ) , pets.petid , pets.weight , pets.pet_age , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select _ from _ where not exists ( select _ from _ where _ ) | select student.stuID from student where not exists ( select * from has_pet where student.stuID = has_pet.stuID and has_pet.petType = 'cat' )
SQL = SELECT stuID FROM student WHERE NOT EXISTS (SELECT * FROM has_pet WHERE student.stuID = has_pet.stuID AND has_pet.petType = 'cat')
natsql:
select _ from _ where not exists ( select _ from _ where _ ) | select student.stuID from student where not exists ( select * from has_pet where student.stuID = has_pet.stuID and has_pet.petType = 'cat' )

SQL:
SELECT stuID FROM student WHERE NOT EXISTS (SELECT * FROM has_pet WHERE student.stuID = has_pet.stuID AND has_pet.petType = 'cat')
self correction:
SELECT Student.StuID FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType <> 'cat'    OR Pets.PetType IS NULL;

index is 64
SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'
What are the ids of the students who do not own cats as pets?
schema_links:
What are the ids of the students who do not own cats as pets? | student : student.stuid , student.age , student.sex , student.major , student.advisor , student.* | pets : pets.pettype ( cat ) , pets.petid , pets.weight , pets.pet_age , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ where _ = 'cat' ) | select student.stuid from student where student.stuid not in ( select has_pet.stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pettype = 'cat' )
SQL = SELECT stuid FROM student WHERE stuid NOT IN (SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat')
natsql:
select _ from _ where _ not in ( select _ from _ where _ = 'cat' ) | select student.stuid from student where student.stuid not in ( select has_pet.stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pettype = 'cat' )

SQL:
SELECT stuid FROM student WHERE stuid NOT IN (SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat')
self correction:
SELECT stuid FROM Student WHERE stuid NOT IN (     SELECT Has_Pet.stuid     FROM Has_Pet     JOIN Pets ON Has_Pet.petid = Pets.petid     WHERE Pets.pettype = 'cat' )

index is 65
SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
Find the first name and age of students who have a dog but do not have a cat as a pet.
schema_links:
Find the first name and age of students who have a dog but do not have a cat as a pet. | student : student.fname , student.age , student.stuid , student.lname , student.sex , student.* | pets : pets.pettype ( cat , dog ) , pets.petid , pets.pet_age , pets.weight , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select _ , _ from _ where _ in ( select _ from _ where @.@ = @.@ ) and _ not in ( select _ from _ where @.@ = @.@ ) | select student.fname , student.age from student where student.stuid in ( select has_pet.stuid from has_pet where has_pet.petid in ( select pets.petid from pets where pets.pettype = 'dog' ) ) and student.stuid not in ( select has_pet.stuid from has_pet where has_pet.petid in ( select pets.petid from pets where pets.pettype = 'cat' ) )
SQL = SELECT fname ,  age FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog')) AND stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat'))
natsql:
select _ , _ from _ where _ in ( select _ from _ where @.@ = @.@ ) and _ not in ( select _ from _ where @.@ = @.@ ) | select student.fname , student.age from student where student.stuid in ( select has_pet.stuid from has_pet where has_pet.petid in ( select pets.petid from pets where pets.pettype = 'dog' ) ) and student.stuid not in ( select has_pet.stuid from has_pet where has_pet.petid in ( select pets.petid from pets where pets.pettype = 'cat' ) )

SQL:
SELECT fname ,  age FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'dog')) AND stuid NOT IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat'))
self correction:
SELECT fname, age FROM Student WHERE StuID IN (   SELECT StuID   FROM Has_Pet   WHERE PetID IN (     SELECT PetID     FROM Pets     WHERE PetType = 'dog'   ) ) AND StuID NOT IN (   SELECT StuID   FROM Has_Pet   WHERE PetID IN (     SELECT PetID     FROM Pets     WHERE PetType = 'cat'   ) )

index is 66
SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
What is the first name of every student who has a dog but does not have a cat?
schema_links:
What is the first name of every student who has a dog but does not have a cat? | student : student.fname , student.stuid , student.lname , student.advisor , student.sex , student.* | pets : pets.pettype ( cat , dog ) , pets.petid , pets.weight , pets.pet_age , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select _ from _ where _ and not _ | select student.fname from student, has_pet, pets where student.stuid = has_pet.stuid and has_pet.petid = pets.petid and pets.pettype = 'dog' and not exists (select * from has_pet, pets where has_pet.stuid = student.stuid and has_pet.petid = pets.petid and pets.pettype = 'cat')
natsql:
select _ from _ where _ and not _ | select student.fname from student, has_pet, pets where student.stuid = has_pet.stuid and has_pet.petid = pets.petid and pets.pettype = 'dog' and not exists (select * from has_pet, pets where has_pet.stuid = student.stuid and has_pet.petid = pets.petid and pets.pettype = 'cat')
SQL:
SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet, pets WHERE has_pet.petid = pets.petid AND pets.pettype = 'dog') AND stuid NOT IN (SELECT has_pet.stuid FROM has_pet, pets WHERE has_pet.petid = pets.petid AND pets.pettype = 'cat')
self correction:
SELECT fname FROM Student WHERE StuID IN (   SELECT StuID   FROM Has_Pet   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'dog' ) AND StuID NOT IN (   SELECT Has_Pet.StuID   FROM Has_Pet   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'cat' )

index is 67
SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1
Find the type and weight of the youngest pet.
schema_links:
Find the type and weight of the youngest pet. | pets : pets.pettype , pets.pet_age , pets.weight , pets.petid , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select _ , _ from _ order by _ limit _ | select pettype , weight from pets order by pet_age limit 1
SQL = SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1
natsql:
select _ , _ from _ order by _ limit _ | select pettype , weight from pets order by pet_age limit 1

SQL:
SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1
self correction:
SELECT Pets.PetType, Pets.weight  FROM Pets  ORDER BY Pets.pet_age ASC  LIMIT 1

index is 68
SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1
What type of pet is the youngest animal, and how much does it weigh?
schema_links:
What type of pet is the youngest animal, and how much does it weigh? | pets : pets.pettype , pets.pet_age , pets.weight , pets.petid , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select _ , _ from _ order by _ limit _ | select pets.pettype , pets.weight from pets order by pets.pet_age asc limit 1
SQL = SELECT pettype ,  weight FROM Pets ORDER BY pet_age ASC LIMIT 1
natsql:
select _ , _ from _ order by _ limit _ | select pets.pettype , pets.weight from pets order by pets.pet_age asc limit 1

SQL:
SELECT pettype ,  weight FROM Pets ORDER BY pet_age ASC LIMIT 1
self correction:
SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.pet_age ASC LIMIT 1

index is 69
SELECT petid ,  weight FROM pets WHERE pet_age  >  1
Find the id and weight of all pets whose age is older than 1.
schema_links:
Find the id and weight of all pets whose age is older than 1. | pets : pets.petid , pets.pet_age , pets.weight , pets.pettype , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.*
natsql and SQL generation:
select _ , _ from _ where _ > _ | select pets.petid , pets.weight from pets where pets.pet_age > 1
SQL = SELECT petid , weight FROM pets WHERE pet_age  >  1
natsql:
select _ , _ from _ where _ > _ | select pets.petid , pets.weight from pets where pets.pet_age > 1

SQL:
SELECT petid , weight FROM pets WHERE pet_age  >  1
self correction:
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1

index is 70
SELECT petid ,  weight FROM pets WHERE pet_age  >  1
What is the id and weight of every pet who is older than 1?
schema_links:
What is the id and weight of every pet who is older than 1? | pets : pets.petid , pets.pet_age , pets.weight , pets.pettype , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select _ , _ from _ where _ > _ | select pets.petid , pets.weight from pets where pets.pet_age > 1
SQL = SELECT petid , weight FROM pets WHERE pet_age > 1
natsql:
select _ , _ from _ where _ > _ | select pets.petid , pets.weight from pets where pets.pet_age > 1

SQL:
SELECT petid , weight FROM pets WHERE pet_age > 1
self correction:
SELECT Pets.PetID, Pets.weight  FROM Pets  WHERE Pets.pet_age > 1

index is 71
SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype
Find the average and maximum age for each type of pet.
schema_links:
Find the average and maximum age for each type of pet. | pets : pets.pet_age , pets.pettype , pets.weight , pets.petid , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select _ , avg ( _ ) , max ( _ ) from _ group by _ | select pets.pettype , avg ( pets.pet_age ) , max ( pets.pet_age ) from pets group by pets.pettype
SQL = SELECT pettype ,  AVG(pet_age) ,  MAX(pet_age) FROM pets GROUP BY pettype
natsql:
select _ , avg ( _ ) , max ( _ ) from _ group by _ | select pets.pettype , avg ( pets.pet_age ) , max ( pets.pet_age ) from pets group by pets.pettype

SQL:
SELECT pettype ,  AVG(pet_age) ,  MAX(pet_age) FROM pets GROUP BY pettype
self correction:
SELECT pets.pettype, AVG(pets.pet_age), MAX(pets.pet_age) FROM pets GROUP BY pets.pettype

index is 72
SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype
What is the average and maximum age for each pet type?
schema_links:
What is the average and maximum age for each pet type? | pets : pets.pet_age , pets.pettype , pets.weight , pets.petid , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select _ , avg ( _ ) , max ( _ ) from _ group by _ | select pets.pettype , avg ( pets.pet_age ) , max ( pets.pet_age ) from pets group by pets.pettype
SQL = SELECT pettype , AVG(pet_age) , MAX(pet_age) FROM pets GROUP BY pettype
natsql:
select _ , avg ( _ ) , max ( _ ) from _ group by _ | select pets.pettype , avg ( pets.pet_age ) , max ( pets.pet_age ) from pets group by pets.pettype

SQL:
SELECT pettype , AVG(pet_age) , MAX(pet_age) FROM pets GROUP BY pettype
self correction:
SELECT pets.pettype, AVG(pets.pet_age), MAX(pets.pet_age) FROM pets GROUP BY pets.pettype

index is 73
SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype
Find the average weight for each pet type.
schema_links:
Find the average weight for each pet type. | pets : pets.pettype , pets.weight , pets.petid , pets.pet_age , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select _ , avg ( _ ) from _ group by _ | select pets.pettype , avg ( pets.weight ) from pets group by pets.pettype
SQL = SELECT pettype ,  AVG (weight) FROM pets GROUP BY pettype
natsql:
select _ , avg ( _ ) from _ group by _ | select pets.pettype , avg ( pets.weight ) from pets group by pets.pettype

SQL:
SELECT pettype ,  AVG (weight) FROM pets GROUP BY pettype
self correction:
SELECT Pets.PetType, AVG(Pets.weight) FROM Pets GROUP BY Pets.PetType

index is 74
SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype
What is the average weight for each type of pet?
schema_links:
What is the average weight for each type of pet? | pets : pets.pettype , pets.weight , pets.pet_age , pets.petid , pets.* | student : student.age , student.sex , student.major , student.advisor , student.stuid , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select _ , avg ( _ ) from _ group by _ | select pets.pettype , avg ( pets.weight ) from pets group by pets.pettype
SQL = SELECT pettype , AVG(weight) FROM pets GROUP BY pettype
natsql:
select _ , avg ( _ ) from _ group by _ | select pets.pettype , avg ( pets.weight ) from pets group by pets.pettype

SQL:
SELECT pettype , AVG(weight) FROM pets GROUP BY pettype
self correction:
SELECT pets.pettype, AVG(pets.weight)  FROM pets  GROUP BY pets.pettype

index is 75
SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid
Find the first name and age of students who have a pet.
schema_links:
Find the first name and age of students who have a pet. | student : student.fname , student.age , student.stuid , student.lname , student.sex , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.pet_age , pets.weight , pets.petid , pets.pettype , pets.*
natsql and SQL generation:
select _ , _ from _ where exists ( select * from _ where @.@ = @.@ ) | select student.fname , student.age from student where exists ( select * from has_pet where student.stuid = has_pet.stuid )
SQL = SELECT fname , age FROM student WHERE EXISTS (SELECT * FROM has_pet WHERE student.StuID  =  has_pet.StuID)
natsql:
select _ , _ from _ where exists ( select * from _ where @.@ = @.@ ) | select student.fname , student.age from student where exists ( select * from has_pet where student.stuid = has_pet.stuid )

SQL:
SELECT fname , age FROM student WHERE EXISTS (SELECT * FROM has_pet WHERE student.StuID  =  has_pet.StuID)
self correction:
SELECT fname, age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)

index is 76
SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid
What are the different first names and ages of the students who do have pets?
schema_links:
What are the different first names and ages of the students who do have pets? | student : student.age , student.fname , student.stuid , student.lname , student.sex , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.pet_age , pets.weight , pets.petid , pets.pettype , pets.*
natsql and SQL generation:
select distinct _ , _ from _ where _ | select distinct student.fname , student.age from student join has_pet on student.stuid = has_pet.stuid
SQL = SELECT DISTINCT fname , age FROM student JOIN has_pet ON student.stuid  =  has_pet.stuid
natsql:
select distinct _ , _ from _ where _ | select distinct student.fname , student.age from student join has_pet on student.stuid = has_pet.stuid

SQL:
SELECT DISTINCT fname , age FROM student JOIN has_pet ON student.stuid  =  has_pet.stuid
self correction:
SELECT DISTINCT fname, age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID

index is 77
SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'
Find the id of the pet owned by student whose last name is ‘Smith’.
schema_links:
Find the id of the pet owned by student whose last name is 'Smith'. | student : student.lname ( Smith ) , student.stuid , student.fname , student.age , student.sex , student.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.* | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight , pets.*
natsql and SQL generation:
select @.@ from @ where @.@ = 'Smith' | select has_pet.petid from student where student.lname = 'Smith' 
SQL = SELECT petid FROM has_pet JOIN student ON student.stuid = has_pet.stuid WHERE student.lname = 'Smith'
natsql:
select @.@ from @ where @.@ = 'Smith' | select has_pet.petid from student where student.lname = 'Smith' 

SQL:
SELECT petid FROM has_pet JOIN student ON student.stuid = has_pet.stuid WHERE student.lname = 'Smith'
self correction:
SELECT Pets.PetID FROM Has_Pet JOIN Student ON Student.StuID = Has_Pet.StuID WHERE Student.LName = 'Smith'

index is 78
SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'
What is the id of the pet owned by the student whose last name is 'Smith'?
schema_links:
What is the id of the pet owned by the student whose last name is 'Smith'? | student : student.lname ( Smith ) , student.stuid , student.advisor , student.fname , student.age , student.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.* | pets : pets.petid , pets.pettype , pets.weight , pets.pet_age , pets.*
natsql and SQL generation:
select _ from _ where _ = 'Smith' | select has_pet.petid from has_pet join student on has_pet.stuid = student.stuid where student.lname = 'Smith'
SQL = SELECT petid FROM has_pet JOIN student ON has_pet.stuid = student.stuid WHERE student.lname = 'Smith'
natsql:
select _ from _ where _ = 'Smith' | select has_pet.petid from has_pet join student on has_pet.stuid = student.stuid where student.lname = 'Smith'

SQL:
SELECT petid FROM has_pet JOIN student ON has_pet.stuid = student.stuid WHERE student.lname = 'Smith'
self correction:
SELECT Pets.PetID  FROM Has_Pet  JOIN Student ON Has_Pet.StuID = Student.StuID  WHERE Student.LName = 'Smith'

index is 79
SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid
Find the number of pets for each student who has any pet and student id.
schema_links:
Find the number of pets for each student who has any pet and student id. | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | student : student.stuid , student.age , student.sex , student.major , student.advisor , student.* | pets : pets.petid , pets.weight , pets.pettype , pets.pet_age , pets.*
natsql and SQL generation:
select count ( _ ) , _ from _ where _ group by _ | select count ( pets.* ) , has_pet.stuid from has_pet join student on has_pet.stuid = student.stuid group by has_pet.stuid
SQL = SELECT count(*) ,  has_pet.stuid FROM has_pet JOIN student ON has_pet.stuid  =  student.stuid GROUP BY has_pet.stuid
natsql:
select count ( _ ) , _ from _ where _ group by _ | select count ( pets.* ) , has_pet.stuid from has_pet join student on has_pet.stuid = student.stuid group by has_pet.stuid

SQL:
SELECT count(*) ,  has_pet.stuid FROM has_pet JOIN student ON has_pet.stuid  =  student.stuid GROUP BY has_pet.stuid
self correction:
SELECT COUNT(*) AS pet_count, has_pet.StuID FROM has_pet JOIN student ON has_pet.StuID = student.StuID GROUP BY has_pet.StuID

index is 80
select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid
For students who have pets , how many pets does each student have ? list their ids instead of names .
schema_links:
For students who have pets , how many pets does each student have ? list their ids instead of names . | student : student.stuid , student.fname , student.lname , student.advisor , student.age , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.petid , pets.pettype , pets.pet_age , pets.weight , pets.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select student.stuid , count ( has_pet.petid ) from student join has_pet on student.stuid = has_pet.stuid group by student.stuid
SQL = SELECT stuid ,  count(petid) FROM student JOIN has_pet ON student.stuid  =  has_pet.stuid GROUP BY student.stuid
natsql:
select _ , count ( _ ) from _ group by _ | select student.stuid , count ( has_pet.petid ) from student join has_pet on student.stuid = has_pet.stuid group by student.stuid

SQL:
SELECT stuid ,  count(petid) FROM student JOIN has_pet ON student.stuid  =  has_pet.stuid GROUP BY student.stuid
self correction:
SELECT has_pet.StuID, COUNT(has_pet.PetID)  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  GROUP BY Has_Pet.StuID

index is 81
SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1
Find the first name and gender of student who have more than one pet.
schema_links:
Find the first name and gender of student who have more than one pet. | student : student.fname , student.sex , student.stuid , student.age , student.lname , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.petid , pets.weight , pets.pettype , pets.pet_age , pets.*
natsql and SQL generation:
select _ , _ from _ where count ( _ ) > _ group by _ | select student.fname , student.sex from student where count ( has_pet.* ) > 1 group by student.fname , student.sex
SQL = SELECT fname ,  sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY fname ,  sex HAVING count(*)  >  1
natsql:
select _ , _ from _ where count ( _ ) > _ group by _ | select student.fname , student.sex from student where count ( has_pet.* ) > 1 group by student.fname , student.sex

SQL:
SELECT fname ,  sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY fname ,  sex HAVING count(*)  >  1
self correction:
SELECT fname, sex FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID, T1.fname, T1.sex HAVING COUNT(*) > 1

index is 82
SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1
What is the first name and gender of the all the students who have more than one pet?
schema_links:
What is the first name and gender of the all the students who have more than one pet? | student : student.fname , student.sex , student.stuid , student.lname , student.age , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.petid , pets.pettype , pets.weight , pets.pet_age , pets.*
natsql and SQL generation:
select _ , _ from _ where exists ( select _ from _ where _ = _ group by _ having count ( _ ) > _ ) | select student.fname , student.sex from student where exists ( select * from has_pet where has_pet.stuid = student.stuid group by has_pet.stuid having count ( has_pet.* ) > 1 )
SQL = SELECT fname ,  sex FROM student WHERE EXISTS (SELECT * FROM has_pet WHERE has_pet.stuid  =  student.stuid GROUP BY has_pet.stuid HAVING count(*)  >  1)
natsql:
select _ , _ from _ where exists ( select _ from _ where _ = _ group by _ having count ( _ ) > _ ) | select student.fname , student.sex from student where exists ( select * from has_pet where has_pet.stuid = student.stuid group by has_pet.stuid having count ( has_pet.* ) > 1 )

SQL:
SELECT fname ,  sex FROM student WHERE EXISTS (SELECT * FROM has_pet WHERE has_pet.stuid  =  student.stuid GROUP BY has_pet.stuid HAVING count(*)  >  1)
self correction:
SELECT fname, sex FROM Student WHERE StuID IN (   SELECT StuID   FROM Has_Pet   GROUP BY StuID   HAVING COUNT(*) > 1 )

index is 83
SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'
Find the last name of the student who has a cat that is age 3.
schema_links:
Find the last name of the student who has a cat that is age 3. | student : student.lname , student.stuid , student.fname , student.age , student.advisor , student.* | pets : pets.pet_age , pets.pettype ( cat ) , pets.petid , pets.weight , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select _ from _ where _ | select student.lname from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'cat' and pets.pet_age = 3
SQL = SELECT lname FROM student JOIN has_pet ON student.StuID = has_pet.StuID JOIN pets ON has_pet.PetID = pets.PetID WHERE pets.PetType = 'cat' AND pets.pet_age = 3
natsql:
select _ from _ where _ | select student.lname from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = 'cat' and pets.pet_age = 3

SQL:
SELECT lname FROM student JOIN has_pet ON student.StuID = has_pet.StuID JOIN pets ON has_pet.PetID = pets.PetID WHERE pets.PetType = 'cat' AND pets.pet_age = 3
self correction:
SELECT student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3;

index is 84
SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'
What is the last name of the student who has a cat that is 3 years old?
schema_links:
What is the last name of the student who has a cat that is 3 years old? | student : student.lname , student.stuid , student.fname , student.age , student.advisor , student.* | pets : pets.pet_age , pets.pettype ( cat ) , pets.petid , pets.weight , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*
natsql and SQL generation:
select _ from _ where @.@ = _ and @.@ = _ | select student.lname from student where @.@ = 'cat' and @.@ = 3
SQL = SELECT lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND pets.pet_age = 3
natsql:
select _ from _ where @.@ = _ and @.@ = _ | select student.lname from student where @.@ = 'cat' and @.@ = 3

SQL:
SELECT lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND pets.pet_age = 3
self correction:
SELECT student.lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND pets.pet_age = 3;

index is 85
select avg(age) from student where stuid not in (select stuid from has_pet)
Find the average age of students who do not have any pet .
schema_links:
Find the average age of students who do not have any pet . | student : student.age , student.stuid , student.sex , student.major , student.advisor , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.pet_age , pets.weight , pets.petid , pets.pettype , pets.*
natsql and SQL generation:
select avg ( student.age ) from student where student.id not in ( select has_pet.stuid from has_pet )
natsql:
select avg ( student.age ) from student where student.id not in ( select has_pet.stuid from has_pet )
SQL:
SELECT AVG(age) FROM student WHERE id NOT IN (SELECT stuid FROM Has_Pet)
self correction:
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)

index is 86
select avg(age) from student where stuid not in (select stuid from has_pet)
What is the average age for all students who do not own any pets ?
schema_links:
What is the average age for all students who do not own any pets ? | student : student.age , student.stuid , student.sex , student.advisor , student.lname , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.pettype , pets.pet_age , pets.weight , pets.petid , pets.*
natsql and SQL generation:
select avg ( _ ) from _ where _ not in ( select _ from _ ) | select avg ( student.age ) from student where student.id not in ( select has_pet.stuid from has_pet )
SQL = SELECT AVG(age) FROM student WHERE id NOT IN (SELECT stuid FROM has_pet)
natsql:
select avg ( _ ) from _ where _ not in ( select _ from _ ) | select avg ( student.age ) from student where student.id not in ( select has_pet.stuid from has_pet )

SQL:
SELECT AVG(age) FROM student WHERE id NOT IN (SELECT stuid FROM has_pet)
self correction:
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)

index is 87
SELECT count(*) FROM CONTINENTS;
How many continents are there?
schema_links:
How many continents are there? | continents : continents.continent , continents.contid , continents.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct continents.continent ) from continents
SQL = SELECT count(DISTINCT continent) FROM continents
natsql:
select count ( distinct _ ) from _ | select count ( distinct continents.continent ) from continents

SQL:
SELECT count(DISTINCT continent) FROM continents
self correction:
SELECT count(DISTINCT ContId) FROM continents

index is 88
SELECT count(*) FROM CONTINENTS;
What is the number of continents?
schema_links:
What is the number of continents? | continents : continents.continent , continents.contid , continents.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | countries : countries.continent , countries.countryid , countries.countryname , countries.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct continents.continent ) from continents
SQL = SELECT count(DISTINCT continent) FROM continents
natsql:
select count ( distinct _ ) from _ | select count ( distinct continents.continent ) from continents

SQL:
SELECT count(DISTINCT continent) FROM continents
self correction:
SELECT count(DISTINCT ContId) FROM continents

index is 89
SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;
How many countries does each continent have? List the continent id, continent name and the number of countries.
schema_links:
How many countries does each continent have? List the continent id, continent name and the number of countries. | continents : continents.continent , continents.contid , continents.* | countries : countries.continent , countries.countryid , countries.countryname , countries.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select _ , _ , count ( _ ) from _ group by _ | select continents.contid , continents.continent , count ( countries.countryid ) from continents join countries on continents.contid = countries.continent group by continents.contid , continents.continent
SQL = SELECT contid ,  continent , count(countryid) FROM continents JOIN countries ON continents.contid  =  countries.continent GROUP BY contid ,  continent
natsql:
select _ , _ , count ( _ ) from _ group by _ | select continents.contid , continents.continent , count ( countries.countryid ) from continents join countries on continents.contid = countries.continent group by continents.contid , continents.continent

SQL:
SELECT contid ,  continent , count(countryid) FROM continents JOIN countries ON continents.contid  =  countries.continent GROUP BY contid ,  continent
self correction:
SELECT contid, continent, COUNT(countryid) AS country_count FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY contid, continent

index is 90
SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;
For each continent, list its id, name, and how many countries it has?
schema_links:
For each continent, list its id, name, and how many countries it has? | continents : continents.continent , continents.contid , continents.* | countries : countries.continent , countries.countryname , countries.countryid , countries.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql and SQL generation:
select _ , _ , count ( _ ) from _ group by _ | select continents.contid , continents.continent , count ( countries.countryid ) from continents join countries on continents.contid = countries.continent group by continents.contid, continents.continent
SQL = SELECT contid, continent, COUNT(countryid) FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY contid, continent
natsql:
select _ , _ , count ( _ ) from _ group by _ | select continents.contid , continents.continent , count ( countries.countryid ) from continents join countries on continents.contid = countries.continent group by continents.contid, continents.continent

SQL:
SELECT contid, continent, COUNT(countryid) FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY contid, continent
self correction:
SELECT contid, continent, COUNT(countryid) AS country_count FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY contid, continent

index is 91
SELECT count(*) FROM COUNTRIES;
How many countries are listed?
schema_links:
How many countries are listed? | countries : countries.countryname , countries.countryid , countries.continent , countries.* | continents : continents.continent , continents.contid , continents.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( countries.countryname ) from countries
SQL = SELECT COUNT(*) FROM countries
natsql:
select count ( _ ) from _ | select count ( countries.countryname ) from countries

SQL:
SELECT COUNT(*) FROM countries
self correction:
SELECT COUNT(*) FROM countries

index is 92
SELECT count(*) FROM COUNTRIES;
How many countries exist?
schema_links:
How many countries exist? | countries : countries.countryname , countries.countryid , countries.continent , countries.* | continents : continents.continent , continents.contid , continents.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select count ( * ) from _ | select count ( * ) from countries
SQL = SELECT count(*) FROM countries
natsql:
select count ( * ) from _ | select count ( * ) from countries

SQL:
SELECT count(*) FROM countries
self correction:
SELECT count(*) FROM countries

index is 93
SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;
How many models does each car maker produce? List maker full name, id and the number.
schema_links:
How many models does each car maker produce? List maker full name, id and the number. | car_makers : car_makers.fullname , car_makers.id , car_makers.maker , car_makers.country , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql and SQL generation:
select _,_._,count (_) from _ group by _._ | select car_makers.FullName, car_makers.Id, count(model_list.ModelId) from car_makers join model_list on car_makers.Id = model_list.Maker group by car_makers.FullName, car_makers.Id
SQL = SELECT car_makers.FullName, car_makers.Id, count(model_list.ModelId) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id
natsql:
select _,_._,count (_) from _ group by _._ | select car_makers.FullName, car_makers.Id, count(model_list.ModelId) from car_makers join model_list on car_makers.Id = model_list.Maker group by car_makers.FullName, car_makers.Id

SQL:
SELECT car_makers.FullName, car_makers.Id, count(model_list.ModelId) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id
self correction:
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.ModelId) AS NumberOfModels FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id

index is 94
SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;
What is the full name of each car maker, along with its id and how many models it produces?
schema_links:
What is the full name of each car maker, along with its id and how many models it produces? | car_makers : car_makers.fullname , car_makers.id , car_makers.maker , car_makers.country , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.makeid , car_names.model , car_names.make , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql and SQL generation:
select _ , _ , count ( _ ) from _ group by _ | select car_makers.fullname , car_makers.id , count ( model_list.* ) from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.fullname , car_makers.id
SQL = SELECT fullname ,  id ,  COUNT(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id  =  T2.maker GROUP BY fullname , id
natsql:
select _ , _ , count ( _ ) from _ group by _ | select car_makers.fullname , car_makers.id , count ( model_list.* ) from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.fullname , car_makers.id

SQL:
SELECT fullname ,  id ,  COUNT(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id  =  T2.maker GROUP BY fullname , id
self correction:
SELECT fullname, id, COUNT(*) AS model_count  FROM car_makers AS T1  JOIN model_list AS T2 ON T1.Id = T2.Maker  GROUP BY fullname, id

index is 95
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;
Which model of the car has the minimum horsepower?
schema_links:
Which model of the car has the minimum horsepower? | cars_data : cars_data.horsepower , cars_data.id , cars_data.weight , cars_data.cylinders , cars_data.accelerate , cars_data.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select _ from _ where _ = min ( _ ) | select model_list.model from cars_data join model_list on cars_data.id = model_list.modelid where cars_data.horsepower = (select min(horsepower) from cars_data)
SQL = SELECT model FROM cars_data JOIN model_list ON cars_data.Id  =  model_list.ModelId WHERE horsepower  =  (SELECT min(horsepower) FROM cars_data)
natsql:
select _ from _ where _ = min ( _ ) | select model_list.model from cars_data join model_list on cars_data.id = model_list.modelid where cars_data.horsepower = (select min(horsepower) from cars_data)

SQL:
SELECT model FROM cars_data JOIN model_list ON cars_data.Id  =  model_list.ModelId WHERE horsepower  =  (SELECT min(horsepower) FROM cars_data)
self correction:
SELECT model FROM cars_data JOIN model_list ON cars_data.Id = model_list.ModelId WHERE cars_data.Horsepower = (   SELECT MIN(Horsepower)   FROM cars_data )

index is 96
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;
What is the model of the car with the smallest amount of horsepower?
schema_links:
What is the model of the car with the smallest amount of horsepower? | cars_data : cars_data.horsepower , cars_data.id , cars_data.cylinders , cars_data.weight , cars_data.accelerate , cars_data.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select _ from _ order by _ asc limit _ | select model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model order by cars_data.horsepower asc limit 1
SQL = SELECT model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model ORDER BY cars_data.horsepower ASC LIMIT 1
natsql:
select _ from _ order by _ asc limit _ | select model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model order by cars_data.horsepower asc limit 1

SQL:
SELECT model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model ORDER BY cars_data.horsepower ASC LIMIT 1
self correction:
SELECT model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model ORDER BY cars_data.Horsepower ASC LIMIT 1

index is 97
SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)
Find the model of the car whose weight is below the average weight.
schema_links:
Find the model of the car whose weight is below the average weight. | cars_data : cars_data.weight , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.accelerate , cars_data.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select _ from _ where @.@ < avg ( _ ) | select model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model where cars_data.weight < (select avg(weight) from cars_data)
SQL = SELECT model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE cars_data.weight < (SELECT avg(weight) FROM cars_data)
natsql:
select _ from _ where @.@ < avg ( _ ) | select model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model where cars_data.weight < (select avg(weight) from cars_data)

SQL:
SELECT model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE cars_data.weight < (SELECT avg(weight) FROM cars_data)
self correction:
SELECT model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)

index is 98
SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)
What is the model for the car with a weight smaller than the average?
schema_links:
What is the model for the car with a weight smaller than the average? | cars_data : cars_data.weight , cars_data.id , cars_data.year , cars_data.mpg , cars_data.cylinders , cars_data.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.country , car_makers.id , car_makers.fullname , car_makers.*
natsql and SQL generation:
select _ from _ where @.@ < avg ( _ ) | select model_list.model from cars_data where @.@ < avg ( cars_data.weight )
SQL = SELECT T3.model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.id  =  T2.makeid JOIN model_list AS T3 ON T2.model  =  T3.model WHERE T1.weight  <  (SELECT avg(weight) FROM cars_data)
natsql:
select _ from _ where @.@ < avg ( _ ) | select model_list.model from cars_data where @.@ < avg ( cars_data.weight )

SQL:
SELECT T3.model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.id  =  T2.makeid JOIN model_list AS T3 ON T2.model  =  T3.model WHERE T1.weight  <  (SELECT avg(weight) FROM cars_data)
self correction:
SELECT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model WHERE T1.Weight < (SELECT AVG(Weight) FROM cars_data)

index is 99
SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';
Find the name of the makers that produced some cars in the year of 1970?
schema_links:
Find the name of the makers that produced some cars in the year of 1970? | car_makers : car_makers.fullname , car_makers.maker , car_makers.country , car_makers.id , car_makers.* | cars_data : cars_data.year , cars_data.horsepower , cars_data.weight , cars_data.id , cars_data.cylinders , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*
natsql and SQL generation:
select distinct _ from _ where _ | select distinct car_makers.maker from car_makers join car_names on car_makers.id = car_names.makeid join cars_data on car_names.makeid = cars_data.id where cars_data.year = 1970
SQL = SELECT DISTINCT maker FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = 1970
natsql:
select distinct _ from _ where _ | select distinct car_makers.maker from car_makers join car_names on car_makers.id = car_names.makeid join cars_data on car_names.makeid = cars_data.id where cars_data.year = 1970

SQL:
SELECT DISTINCT maker FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = 1970
self correction:
SELECT maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970;

index is 100
SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';
What is the name of the different car makers who produced a car in 1970?
schema_links:
What is the name of the different car makers who produced a car in 1970? | car_makers : car_makers.fullname , car_makers.maker , car_makers.country , car_makers.id , car_makers.* | cars_data : cars_data.year , cars_data.horsepower , cars_data.weight , cars_data.id , cars_data.cylinders , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*
natsql and SQL generation:
select distinct _ from _ where @.@ = _ | select distinct car_makers.maker from car_makers where @.@ = 1970
SQL = SELECT DISTINCT maker FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = 1970
natsql:
select distinct _ from _ where @.@ = _ | select distinct car_makers.maker from car_makers where @.@ = 1970

SQL:
SELECT DISTINCT maker FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = 1970
self correction:
SELECT SELECT DISTINCT car_makers.Maker FROM car_makers  JOIN car_names ON car_makers.Id = car_names.MakeId  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE cars_data.Year = 1970

index is 101
SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);
Find the make and production time of the cars that were produced in the earliest year?
schema_links:
Find the make and production time of the cars that were produced in the earliest year? | cars_data : cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql and SQL generation:
select _ , _ from _ where @.@ = min ( @.@ ) | select car_names.make , cars_data.year from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.year = min ( cars_data.year )
SQL = SELECT make , year FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE year = (SELECT min(year) FROM cars_data)
natsql:
select _ , _ from _ where @.@ = min ( @.@ ) | select car_names.make , cars_data.year from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.year = min ( cars_data.year )

SQL:
SELECT make , year FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE year = (SELECT min(year) FROM cars_data)
self correction:
SELECT car_names.Make, cars_data.Year FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data)

index is 102
SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);
What is the maker of the carr produced in the earliest year and what year was it?
schema_links:
What is the maker of the carr produced in the earliest year and what year was it? | cars_data : cars_data.year , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.cylinders , cars_data.* | car_makers : car_makers.maker , car_makers.fullname , car_makers.country , car_makers.id , car_makers.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*
natsql and SQL generation:
select @.@ from @,@ where @.@ = min ( @.@ ) | select car_makers.maker , cars_data.year from car_makers , car_names , model_list , cars_data where cars_data.year = min ( cars_data.year )
SQL = SELECT car_makers.maker , cars_data.year FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = (SELECT min(year) FROM cars_data)
natsql:
select @.@ from @,@ where @.@ = min ( @.@ ) | select car_makers.maker , cars_data.year from car_makers , car_names , model_list , cars_data where cars_data.year = min ( cars_data.year )

SQL:
SELECT car_makers.maker , cars_data.year FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = (SELECT min(year) FROM cars_data)
self correction:
SELECT car_makers.Maker, cars_data.Year FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data)

index is 103
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;
Which distinct car models are the produced after 1980?
schema_links:
Which distinct car models are the produced after 1980? | cars_data : cars_data.year , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.cylinders , cars_data.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select distinct _ from _ where _ > _ | select distinct model_list.model from cars_data, model_list, car_names, car_makers where cars_data.year > 1980 and cars_data.id = car_names.makeid and car_names.model = model_list.model and model_list.maker = car_makers.id
SQL = SELECT DISTINCT model FROM cars_data, model_list, car_names, car_makers WHERE cars_data.year  >  1980 AND cars_data.id  =  car_names.makeid AND car_names.model  =  model_list.model AND model_list.maker  =  car_makers.id
natsql:
select distinct _ from _ where _ > _ | select distinct model_list.model from cars_data, model_list, car_names, car_makers where cars_data.year > 1980 and cars_data.id = car_names.makeid and car_names.model = model_list.model and model_list.maker = car_makers.id

SQL:
SELECT DISTINCT model FROM cars_data, model_list, car_names, car_makers WHERE cars_data.year  >  1980 AND cars_data.id  =  car_names.makeid AND car_names.model  =  model_list.model AND model_list.maker  =  car_makers.id
self correction:
SELECT DISTINCT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Year > 1980;

index is 104
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;
What are the different models for the cards produced after 1980?
schema_links:
What are the different models for the cards produced after 1980? | cars_data : cars_data.year , cars_data.id , cars_data.cylinders , cars_data.accelerate , cars_data.horsepower , cars_data.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select distinct _ from _ where _ > _ | select distinct model_list.model from cars_data, model_list, car_names where cars_data.year > 1980 and cars_data.id = car_names.makeid and car_names.model = model_list.model
SQL = SELECT DISTINCT model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE cars_data.year > 1980
natsql:
select distinct _ from _ where _ > _ | select distinct model_list.model from cars_data, model_list, car_names where cars_data.year > 1980 and cars_data.id = car_names.makeid and car_names.model = model_list.model

SQL:
SELECT DISTINCT model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE cars_data.year > 1980
self correction:
SELECT DISTINCT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Year > 1980

index is 105
SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;
How many car makers are there in each continents? List the continent name and the count.
schema_links:
How many car makers are there in each continents? List the continent name and the count. | continents : continents.continent , continents.contid , continents.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | countries : countries.continent , countries.countryname , countries.countryid , countries.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql and SQL generation:
select _ , count ( distinct _ ) from _ group by _ | select continents.continent , count ( distinct car_makers.id ) from continents join countries on continents.contid = countries.continent join car_makers on countries.countryid = car_makers.country group by continents.continent
SQL = SELECT continent , COUNT(DISTINCT car_makers.id) FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continent
natsql:
select _ , count ( distinct _ ) from _ group by _ | select continents.continent , count ( distinct car_makers.id ) from continents join countries on continents.contid = countries.continent join car_makers on countries.countryid = car_makers.country group by continents.continent

SQL:
SELECT continent , COUNT(DISTINCT car_makers.id) FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continent
self correction:
SELECT continents.Continent, COUNT(DISTINCT car_makers.Id) AS MakerCount FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent

index is 106
SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;
What is the name of each continent and how many car makers are there in each one?
schema_links:
What is the name of each continent and how many car makers are there in each one? | continents : continents.continent , continents.contid , continents.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | countries : countries.continent , countries.countryname , countries.countryid , countries.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select continents.continent , count ( car_makers.maker ) from continents join countries on continents.contid = countries.continent join car_makers on countries.countryid = car_makers.country group by continents.continent
SQL = SELECT continent , COUNT(maker) FROM continents JOIN countries ON continents.contid  =  countries.continent JOIN car_makers ON countries.countryid  =  car_makers.country GROUP BY continent
natsql:
select _ , count ( _ ) from _ group by _ | select continents.continent , count ( car_makers.maker ) from continents join countries on continents.contid = countries.continent join car_makers on countries.countryid = car_makers.country group by continents.continent

SQL:
SELECT continent , COUNT(maker) FROM continents JOIN countries ON continents.contid  =  countries.continent JOIN car_makers ON countries.countryid  =  car_makers.country GROUP BY continent
self correction:
SELECT continents.Continent, COUNT(car_makers.Maker)  FROM continents  JOIN countries ON continents.ContId = countries.Continent  JOIN car_makers ON countries.CountryId = car_makers.Country  GROUP BY continents.Continent

index is 107
SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;
Which of the countries has the most car makers? List the country name.
schema_links:
Which of the countries has the most car makers? List the country name. | countries : countries.countryname , countries.countryid , countries.continent , countries.* | car_makers : car_makers.country , car_makers.maker , car_makers.id , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select countries.countryname from countries join car_makers on countries.countryid = car_makers.country group by countries.countryname order by count(car_makers.maker) desc limit 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select countries.countryname from countries join car_makers on countries.countryid = car_makers.country group by countries.countryname order by count(car_makers.maker) desc limit 1
SQL:
SELECT countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countryname ORDER BY count(maker) DESC LIMIT 1
self correction:
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Maker) DESC LIMIT 1

index is 108
SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;
What is the name of the country with the most car makers?
schema_links:
What is the name of the country with the most car makers? | countries : countries.countryname , countries.countryid , countries.continent , countries.* | car_makers : car_makers.country , car_makers.id , car_makers.maker , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | continents : continents.continent , continents.contid , continents.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryname order by count(car_makers.id) desc limit 1
SQL = SELECT countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countryname ORDER BY COUNT(car_makers.id) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryname order by count(car_makers.id) desc limit 1

SQL:
SELECT countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countryname ORDER BY COUNT(car_makers.id) DESC LIMIT 1
self correction:
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1

index is 109
select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;
How many car models are produced by each maker ? Only list the count and the maker full name .
schema_links:
How many car models are produced by each maker ? Only list the count and the maker full name . | car_makers : car_makers.fullname , car_makers.maker , car_makers.id , car_makers.country , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql and SQL generation:
select count ( distinct _ ) , _ from _ group by _ | select count ( distinct model_list.modelid ) , car_makers.fullname from model_list join car_names on model_list.modelid = car_names.makeid join car_makers on model_list.maker = car_makers.id group by car_makers.fullname
SQL = SELECT count(DISTINCT T3.modelid) ,  T1.fullname FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id  =  T2.maker JOIN car_names AS T3 ON T2.modelid  =  T3.makeid GROUP BY T1.fullname
natsql:
select count ( distinct _ ) , _ from _ group by _ | select count ( distinct model_list.modelid ) , car_makers.fullname from model_list join car_names on model_list.modelid = car_names.makeid join car_makers on model_list.maker = car_makers.id group by car_makers.fullname

SQL:
SELECT count(DISTINCT T3.modelid) ,  T1.fullname FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id  =  T2.maker JOIN car_names AS T3 ON T2.modelid  =  T3.makeid GROUP BY T1.fullname
self correction:
SELECT COUNT(DISTINCT T3.ModelId) AS ModelCount, T1.FullName AS MakerFullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.ModelId = T3.MakeId GROUP BY T1.FullName

index is 110
SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;
What is the number of car models that are produced by each maker and what is the id and full name of each maker?
schema_links:
What is the number of car models that are produced by each maker and what is the id and full name of each maker? | car_makers : car_makers.fullname , car_makers.id , car_makers.maker , car_makers.country , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql and SQL generation:
select count ( _ ) , _ , _ from _ group by _ | select car_makers.id , car_makers.fullname from car_makers group by car_makers.id, car_makers.fullname
SQL = SELECT COUNT(*) ,  maker ,  Id ,  FullName FROM car_makers GROUP BY maker, Id, FullName
natsql:
select count ( _ ) , _ , _ from _ group by _ | select car_makers.id , car_makers.fullname from car_makers group by car_makers.id, car_makers.fullname

SQL:
SELECT COUNT(*) ,  maker ,  Id ,  FullName FROM car_makers GROUP BY maker, Id, FullName
self correction:
SELECT COUNT(*) AS ModelCount, car_makers.Maker, car_makers.Id, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker, car_makers.Id, car_makers.FullName

index is 111
SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';
What is the accelerate of the car make amc hornet sportabout (sw)?
schema_links:
What is the accelerate of the car make amc hornet sportabout (sw)? | car_names : car_names.make ( amc hornet , amc hornet sportabout (sw) ) , car_names.model ( amc ) , car_names.makeid , car_names.* | cars_data : cars_data.accelerate , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.* | car_makers : car_makers.maker ( amc ) , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.model ( amc ) , model_list.maker , model_list.modelid , model_list.*
natsql and SQL generation:
select _ from _ where @.@ = @.@ and @.@ = @.@ | select cars_data.accelerate from cars_data join car_names on cars_data.id = car_names.makeid where car_names.make = 'amc hornet sportabout (sw)' and car_names.model = 'amc'
SQL = SELECT accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.make = 'amc hornet sportabout (sw)' AND car_names.model = 'amc'
natsql:
select _ from _ where @.@ = @.@ and @.@ = @.@ | select cars_data.accelerate from cars_data join car_names on cars_data.id = car_names.makeid where car_names.make = 'amc hornet sportabout (sw)' and car_names.model = 'amc'

SQL:
SELECT accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE car_names.make = 'amc hornet sportabout (sw)' AND car_names.model = 'amc'
self correction:
SELECT cars_data.Accelerate  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.Maker = 'amc'  AND car_names.Model = 'hornet sportabout (sw)'

index is 112
SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';
How much does the car accelerate that makes amc hornet sportabout (sw)?
schema_links:
How much does the car accelerate that makes amc hornet sportabout (sw)? | car_names : car_names.make ( amc hornet , amc hornet sportabout (sw) ) , car_names.model ( amc ) , car_names.makeid , car_names.* | cars_data : cars_data.accelerate , cars_data.horsepower , cars_data.id , cars_data.cylinders , cars_data.weight , cars_data.* | car_makers : car_makers.maker ( amc ) , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.model ( amc ) , model_list.maker , model_list.modelid , model_list.*
natsql and SQL generation:
select _ from _ where @.@ = (select @.@ from _ where @.@ = @.@) | select cars_data.accelerate from cars_data where cars_data.id = (select car_names.makeid from car_names where car_names.make = 'amc hornet' and car_names.model = 'amc hornet sportabout (sw)')
SQL = SELECT accelerate FROM cars_data WHERE id = (SELECT makeid FROM car_names WHERE make = 'amc hornet' AND model = 'amc hornet sportabout (sw)')
natsql:
select _ from _ where @.@ = (select @.@ from _ where @.@ = @.@) | select cars_data.accelerate from cars_data where cars_data.id = (select car_names.makeid from car_names where car_names.make = 'amc hornet' and car_names.model = 'amc hornet sportabout (sw)')

SQL:
SELECT accelerate FROM cars_data WHERE id = (SELECT makeid FROM car_names WHERE make = 'amc hornet' AND model = 'amc hornet sportabout (sw)')
self correction:
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_names.Make = 'amc hornet' AND model_list.Model = 'amc hornet sportabout (sw)'

index is 113
SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';
How many car makers are there in france?
schema_links:
How many car makers are there in france? | countries : countries.countryname ( france ) , countries.countryid , countries.continent , countries.* | car_makers : car_makers.country , car_makers.maker , car_makers.id , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | continents : continents.continent , continents.contid , continents.*
natsql and SQL generation:
select count ( distinct _ ) from _ where _ | select count ( distinct car_makers.maker ) from car_makers where car_makers.country = (select countryid from countries where countryname = 'france')
SQL = SELECT COUNT(DISTINCT maker) FROM car_makers WHERE country  =  (SELECT countryid FROM countries WHERE countryname  =  'france')
natsql:
select count ( distinct _ ) from _ where _ | select count ( distinct car_makers.maker ) from car_makers where car_makers.country = (select countryid from countries where countryname = 'france')

SQL:
SELECT COUNT(DISTINCT maker) FROM car_makers WHERE country  =  (SELECT countryid FROM countries WHERE countryname  =  'france')
self correction:
SELECT COUNT(DISTINCT Maker)  FROM car_makers  WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'france')

index is 114
SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';
What is the number of makers of care in France?
schema_links:
What is the number of makers of care in France? | countries : countries.countryname ( france ) , countries.countryid , countries.continent , countries.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*
natsql and SQL generation:
select count ( _ ) from _ where @.@ = _ | select count ( car_makers.maker ) from car_makers where car_makers.country = (select countries.countryid from countries where countries.countryname = 'France')
SQL = SELECT count(maker) FROM car_makers WHERE country  =  (SELECT CountryId FROM countries WHERE CountryName  =  'France')
natsql:
select count ( _ ) from _ where @.@ = _ | select count ( car_makers.maker ) from car_makers where car_makers.country = (select countries.countryid from countries where countries.countryname = 'France')

SQL:
SELECT count(maker) FROM car_makers WHERE country  =  (SELECT CountryId FROM countries WHERE CountryName  =  'France')
self correction:
SELECT count(DISTINCT Maker) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France')

index is 115
SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';
How many car models are produced in the usa?
schema_links:
How many car models are produced in the usa? | countries : countries.countryname ( usa ) , countries.countryid , countries.continent , countries.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select count ( distinct _ ) from _ where @.@ = _ | select count ( distinct model_list.model ) from model_list join car_makers on model_list.maker = car_makers.id join countries on car_makers.country = countries.countryid where countries.countryname = 'usa'
SQL = SELECT count(DISTINCT model_list.model) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'usa'
natsql:
select count ( distinct _ ) from _ where @.@ = _ | select count ( distinct model_list.model ) from model_list join car_makers on model_list.maker = car_makers.id join countries on car_makers.country = countries.countryid where countries.countryname = 'usa'

SQL:
SELECT count(DISTINCT model_list.model) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'usa'
self correction:
SELECT count(DISTINCT car_names.Model)  FROM car_names  JOIN model_list ON car_names.Model = model_list.ModelId  JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN countries ON car_makers.Country = countries.CountryId  WHERE countries.CountryName = 'usa'

index is 116
SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';
What is the count of the car models produced in the United States?
schema_links:
What is the count of the car models produced in the United States? | countries : countries.countryname , countries.countryid , countries.continent , countries.* | car_makers : car_makers.country , car_makers.id , car_makers.maker , car_makers.fullname , car_makers.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql and SQL generation:
select count ( _ ) from _ where @.@ = _ | select count ( * ) from model_list where model_list.maker = ( select id from car_makers where car_makers.country = ( select countryid from countries where countries.countryname = 'United States' ) )
SQL = SELECT count(*) FROM model_list WHERE maker = (SELECT id FROM car_makers WHERE country = (SELECT countryid FROM countries WHERE countryname = 'United States'))
natsql:
select count ( _ ) from _ where @.@ = _ | select count ( * ) from model_list where model_list.maker = ( select id from car_makers where car_makers.country = ( select countryid from countries where countries.countryname = 'United States' ) )

SQL:
SELECT count(*) FROM model_list WHERE maker = (SELECT id FROM car_makers WHERE country = (SELECT countryid FROM countries WHERE countryname = 'United States'))
self correction:
SELECT COUNT(DISTINCT model) AS model_count FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'United States'

index is 117
SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;
What is the average miles per gallon(mpg) of the cars with 4 cylinders?
schema_links:
What is the average miles per gallon(mpg) of the cars with 4 cylinders? | cars_data : cars_data.mpg , cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql and SQL generation:
select avg ( _ ) from _ where @.@ = _ | select avg ( cars_data.mpg ) from cars_data where cars_data.cylinders = 4
SQL = SELECT avg(mpg) FROM cars_data WHERE cylinders  =  4
natsql:
select avg ( _ ) from _ where @.@ = _ | select avg ( cars_data.mpg ) from cars_data where cars_data.cylinders = 4

SQL:
SELECT avg(mpg) FROM cars_data WHERE cylinders  =  4
self correction:
SELECT avg(MPG) AS AverageMPG FROM cars_data WHERE Cylinders = 4

index is 118
SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;
What is the average miles per gallon of all the cards with 4 cylinders?
schema_links:
What is the average miles per gallon of all the cards with 4 cylinders? | cars_data : cars_data.mpg , cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql and SQL generation:
select avg ( cars_data.mpg ) from cars_data where cars_data.cylinders = 4
SQL = SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4
natsql:
select avg ( cars_data.mpg ) from cars_data where cars_data.cylinders = 4

SQL:
SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4
self correction:
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4

index is 119
select min(weight) from cars_data where cylinders  =  8 and year  =  1974
What is the smallest weight of the car produced with 8 cylinders on 1974 ?
schema_links:
What is the smallest weight of the car produced with 8 cylinders on 1974 ? | cars_data : cars_data.weight , cars_data.cylinders , cars_data.year , cars_data.id , cars_data.horsepower , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.id , car_makers.fullname , car_makers.country , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql and SQL generation:
select min ( _ ) from _ where @.@ = _ and @.@ = _ | select min ( cars_data.weight ) from cars_data where cars_data.cylinders = 8 and cars_data.year = 1974
SQL = SELECT min(weight) FROM cars_data WHERE cylinders  =  8 AND year  =  1974
natsql:
select min ( _ ) from _ where @.@ = _ and @.@ = _ | select min ( cars_data.weight ) from cars_data where cars_data.cylinders = 8 and cars_data.year = 1974

SQL:
SELECT min(weight) FROM cars_data WHERE cylinders  =  8 AND year  =  1974
self correction:
SELECT min(Weight)  FROM cars_data  WHERE Cylinders = 8 AND Year = 1974

index is 120
select min(weight) from cars_data where cylinders  =  8 and year  =  1974
What is the minimum weight of the car with 8 cylinders produced in 1974 ?
schema_links:
What is the minimum weight of the car with 8 cylinders produced in 1974 ? | cars_data : cars_data.cylinders , cars_data.weight , cars_data.year , cars_data.id , cars_data.horsepower , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql and SQL generation:
select min ( _ ) from _ where @.@ = _ | select min ( cars_data.weight ) from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model where cars_data.cylinders = 8 and cars_data.year = 1974
SQL = SELECT min(weight) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cylinders = 8 AND year = 1974
natsql:
select min ( _ ) from _ where @.@ = _ | select min ( cars_data.weight ) from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model where cars_data.cylinders = 8 and cars_data.year = 1974

SQL:
SELECT min(weight) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cylinders = 8 AND year = 1974
self correction:
SELECT min(cars_data.Weight) FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  WHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974

index is 121
SELECT Maker ,  Model FROM MODEL_LIST;
What are all the makers and models?
schema_links:
What are all the makers and models? | car_makers : car_makers.maker , car_makers.fullname , car_makers.country , car_makers.id , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql and SQL generation:
select _ , _ from _ | select car_makers.maker , model_list.model from car_makers join model_list on car_makers.id = model_list.maker
SQL = SELECT maker , model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker

Note: The above query assumes that the tables are properly joined based on their foreign key relationships.
natsql:
select _ , _ from _ | select car_makers.maker , model_list.model from car_makers join model_list on car_makers.id = model_list.maker

SQL:
SELECT maker , model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker

Note: The above query assumes that the tables are properly joined based on their foreign key relationships.
self correction:
SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker

index is 122
SELECT Maker ,  Model FROM MODEL_LIST;
What are the makers and models?
schema_links:
What are the makers and models? | car_makers : car_makers.maker , car_makers.country , car_makers.fullname , car_makers.id , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | countries : countries.countryname , countries.continent , countries.countryid , countries.*
natsql and SQL generation:
select _ , _ from _ | select car_makers.maker , model_list.model from car_makers , model_list
SQL = SELECT maker , model FROM car_makers , model_list
natsql:
select _ , _ from _ | select car_makers.maker , model_list.model from car_makers , model_list

SQL:
SELECT maker , model FROM car_makers , model_list
self correction:
SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker

index is 123
SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;
What are the countries having at least one car maker? List name and id.
schema_links:
What are the countries having at least one car maker? List name and id. | countries : countries.countryname , countries.countryid , countries.continent , countries.* | car_makers : car_makers.maker , car_makers.country , car_makers.id , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql and SQL generation:
select _ , _ from _ where exists ( select _ from _ where @.@ = @.@ ) | select countries.countryname , countries.countryid from countries where exists ( select car_makers.id from car_makers where countries.countryid = car_makers.country )
SQL = SELECT countryname ,  countryid FROM countries WHERE EXISTS (SELECT id FROM car_makers WHERE countries.countryid  =  car_makers.country)
natsql:
select _ , _ from _ where exists ( select _ from _ where @.@ = @.@ ) | select countries.countryname , countries.countryid from countries where exists ( select car_makers.id from car_makers where countries.countryid = car_makers.country )

SQL:
SELECT countryname ,  countryid FROM countries WHERE EXISTS (SELECT id FROM car_makers WHERE countries.countryid  =  car_makers.country)
self correction:
SELECT countries.CountryName, countries.CountryId FROM countries WHERE EXISTS (     SELECT 1     FROM car_makers     WHERE countries.CountryId = car_makers.Country )

index is 124
SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;
What are the names and ids of all countries with at least one car maker?
schema_links:
What are the names and ids of all countries with at least one car maker? | countries : countries.countryid , countries.countryname , countries.continent , countries.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | continents : continents.continent , continents.contid , continents.*
natsql and SQL generation:
select _ , _ from _ where exists ( select * from _ ) | select countries.countryname , countries.countryid from countries where exists ( select * from car_makers )
SQL = SELECT countryname ,  countryid FROM countries WHERE EXISTS (SELECT * FROM car_makers)
natsql:
select _ , _ from _ where exists ( select * from _ ) | select countries.countryname , countries.countryid from countries where exists ( select * from car_makers )

SQL:
SELECT countryname ,  countryid FROM countries WHERE EXISTS (SELECT * FROM car_makers)
self correction:
SELECT countries.CountryName, countries.CountryId FROM countries WHERE EXISTS (SELECT *               FROM car_makers               WHERE car_makers.Country = countries.CountryId)

index is 125
SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;
What is the number of the cars with horsepower more than 150?
schema_links:
What is the number of the cars with horsepower more than 150? | cars_data : cars_data.horsepower , cars_data.id , cars_data.cylinders , cars_data.weight , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql and SQL generation:
select count ( _ ) from _ where _ > _ | select count ( cars_data.* ) from cars_data where cars_data.horsepower > 150
natsql:
select count ( _ ) from _ where _ > _ | select count ( cars_data.* ) from cars_data where cars_data.horsepower > 150
SQL:
SELECT count(*) FROM cars_data WHERE horsepower > 150
self correction:
SELECT count(*) FROM cars_data WHERE Horsepower > 150

index is 126
SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;
What is the number of cars with a horsepower greater than 150?
schema_links:
What is the number of cars with a horsepower greater than 150? | cars_data : cars_data.horsepower , cars_data.id , cars_data.cylinders , cars_data.weight , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql and SQL generation:
select count ( _ ) from _ where _ > _ | select count ( cars_data.* ) from cars_data where cars_data.horsepower > 150
SQL = SELECT count(*) FROM cars_data WHERE horsepower  >  150
natsql:
select count ( _ ) from _ where _ > _ | select count ( cars_data.* ) from cars_data where cars_data.horsepower > 150

SQL:
SELECT count(*) FROM cars_data WHERE horsepower  >  150
self correction:
SELECT count(*) FROM cars_data WHERE Horsepower > 150

index is 127
SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;
What is the average weight of cars each year?
schema_links:
What is the average weight of cars each year? | cars_data : cars_data.weight , cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql and SQL generation:
select _ , avg ( _ ) from _ group by _ | select cars_data.year , avg ( cars_data.weight ) from cars_data group by cars_data.year
SQL = SELECT year , AVG(weight) FROM cars_data GROUP BY year
natsql:
select _ , avg ( _ ) from _ group by _ | select cars_data.year , avg ( cars_data.weight ) from cars_data group by cars_data.year

SQL:
SELECT year , AVG(weight) FROM cars_data GROUP BY year
self correction:
SELECT cars_data.Year, AVG(cars_data.Weight) FROM cars_data GROUP BY cars_data.Year

index is 128
SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;
What is the average weight and year for each year?
schema_links:
What is the average weight and year for each year? | cars_data : cars_data.weight , cars_data.year , cars_data.horsepower , cars_data.id , cars_data.cylinders , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | continents : continents.continent , continents.contid , continents.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select avg ( _ ) , _ from _ group by _ | select avg ( cars_data.weight ) , cars_data.year from cars_data group by cars_data.year
SQL = SELECT AVG(weight) , year FROM cars_data GROUP BY year
natsql:
select avg ( _ ) , _ from _ group by _ | select avg ( cars_data.weight ) , cars_data.year from cars_data group by cars_data.year

SQL:
SELECT AVG(weight) , year FROM cars_data GROUP BY year
self correction:
SELECT AVG(Weight), Year FROM cars_data GROUP BY Year

index is 129
SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;
Which countries in europe have at least 3 car manufacturers?
schema_links:
Which countries in europe have at least 3 car manufacturers? | continents : continents.continent ( europe ) , continents.contid , continents.* | countries : countries.countryname , countries.countryid , countries.continent , countries.* | car_makers : car_makers.id , car_makers.country , car_makers.maker , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql and SQL generation:
select _ from _ where _ >= _ group by _ | select countries.countryname from continents,countries where continents.continent = 'europe' and continents.contid = countries.continent and count (car_makers.id) >= 3 group by countries.countryname
SQL = SELECT countries.countryname FROM continents JOIN countries ON continents.contid = countries.continent JOIN car_makers ON car_makers.country = countries.countryid WHERE continents.continent = 'europe' GROUP BY countries.countryname HAVING count(car_makers.id) >= 3
natsql:
select _ from _ where _ >= _ group by _ | select countries.countryname from continents,countries where continents.continent = 'europe' and continents.contid = countries.continent and count (car_makers.id) >= 3 group by countries.countryname

SQL:
SELECT countries.countryname FROM continents JOIN countries ON continents.contid = countries.continent JOIN car_makers ON car_makers.country = countries.countryid WHERE continents.continent = 'europe' GROUP BY countries.countryname HAVING count(car_makers.id) >= 3
self correction:
SELECT countries.CountryName  FROM continents  JOIN countries ON continents.ContId = countries.Continent  JOIN car_makers ON car_makers.Country = countries.CountryId  WHERE continents.Continent = 'europe'  GROUP BY countries.CountryName  HAVING COUNT(car_makers.Id) >= 3

index is 130
SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;
What are the names of all European countries with at least 3 manufacturers?
schema_links:
What are the names of all European countries with at least 3 manufacturers? | countries : countries.countryname , countries.countryid , countries.continent , countries.* | continents : continents.continent ( europe ) , continents.contid , continents.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*
natsql and SQL generation:
select _ from _ where _ >= _ group by _ | select countries.countryname from countries join continents on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid group by countries.countryname having count(distinct car_makers.id) >= 3
SQL = SELECT countries.countryname FROM countries JOIN continents ON countries.continent  =  continents.contid JOIN car_makers ON car_makers.country  =  countries.countryid GROUP BY countries.countryname HAVING count(DISTINCT car_makers.id) >= 3
natsql:
select _ from _ where _ >= _ group by _ | select countries.countryname from countries join continents on countries.continent = continents.contid join car_makers on car_makers.country = countries.countryid group by countries.countryname having count(distinct car_makers.id) >= 3

SQL:
SELECT countries.countryname FROM countries JOIN continents ON countries.continent  =  continents.contid JOIN car_makers ON car_makers.country  =  countries.countryid GROUP BY countries.countryname HAVING count(DISTINCT car_makers.id) >= 3
self correction:
SELECT countries.CountryName FROM countries JOIN continents ON countries.Continent = continents.ContId JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3 WHERE continents.Continent = 'Europe';

index is 131
SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;
What is the maximum horsepower and the make of the car models with 3 cylinders?
schema_links:
What is the maximum horsepower and the make of the car models with 3 cylinders? | cars_data : cars_data.cylinders , cars_data.horsepower , cars_data.id , cars_data.weight , cars_data.mpg , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select max ( _ ) , _ from _ where @.@ = _ group by _ | select max ( cars_data.horsepower ) , car_makers.maker from cars_data where cars_data.cylinders = 3 group by car_makers.maker
SQL = SELECT max(horsepower) , maker FROM cars_data JOIN car_names ON cars_data.id  =  car_names.makeid JOIN model_list ON car_names.model  =  model_list.model JOIN car_makers ON model_list.maker  =  car_makers.id WHERE cylinders  =  3 GROUP BY maker
natsql:
select max ( _ ) , _ from _ where @.@ = _ group by _ | select max ( cars_data.horsepower ) , car_makers.maker from cars_data where cars_data.cylinders = 3 group by car_makers.maker

SQL:
SELECT max(horsepower) , maker FROM cars_data JOIN car_names ON cars_data.id  =  car_names.makeid JOIN model_list ON car_names.model  =  model_list.model JOIN car_makers ON model_list.maker  =  car_makers.id WHERE cylinders  =  3 GROUP BY maker
self correction:
SELECT MAX(cars_data.Horsepower) AS max_horsepower, car_makers.Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3 GROUP BY car_makers.Maker

index is 132
SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;
What is the largest amount of horsepower for the models with 3 cylinders and what make is it?
schema_links:
What is the largest amount of horsepower for the models with 3 cylinders and what make is it? | cars_data : cars_data.horsepower , cars_data.cylinders , cars_data.id , cars_data.edispl , cars_data.weight , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select max ( _ ) , _ from _ where _ = _ group by _ | select max ( cars_data.horsepower ) , car_names.make from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.cylinders = 3 group by car_names.make
SQL = SELECT max(horsepower) ,  make FROM cars_data JOIN car_names ON cars_data.id  =  car_names.makeid WHERE cylinders  =  3 GROUP BY make
natsql:
select max ( _ ) , _ from _ where _ = _ group by _ | select max ( cars_data.horsepower ) , car_names.make from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.cylinders = 3 group by car_names.make

SQL:
SELECT max(horsepower) ,  make FROM cars_data JOIN car_names ON cars_data.id  =  car_names.makeid WHERE cylinders  =  3 GROUP BY make
self correction:
SELECT MAX(cars_data.Horsepower) AS MaxHorsepower, car_makers.Maker AS Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3 GROUP BY car_makers.Maker

index is 133
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;
Which model saves the most gasoline? That is to say, have the maximum miles per gallon.
schema_links:
Which model saves the most gasoline? That is to say, have the maximum miles per gallon. | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | cars_data : cars_data.mpg , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select _ from _ where @.@ = max ( _ ) | select model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model where @.@ = max ( cars_data.mpg )
SQL = SELECT model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE mpg  =  (SELECT max(mpg) FROM cars_data)
natsql:
select _ from _ where @.@ = max ( _ ) | select model_list.model from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model where @.@ = max ( cars_data.mpg )

SQL:
SELECT model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE mpg  =  (SELECT max(mpg) FROM cars_data)
self correction:
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.MPG = (SELECT MAX(MPG) FROM cars_data)

index is 134
select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;
What is the car model with the highest mpg ?
schema_links:
What is the car model with the highest mpg ? | cars_data : cars_data.mpg , cars_data.id , cars_data.cylinders , cars_data.year , cars_data.horsepower , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select _ from _ order by _ desc limit _ | select car_names.model from cars_data join car_names on cars_data.id = car_names.makeid order by cars_data.mpg desc limit 1
SQL = SELECT model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId ORDER BY mpg DESC LIMIT 1
natsql:
select _ from _ order by _ desc limit _ | select car_names.model from cars_data join car_names on cars_data.id = car_names.makeid order by cars_data.mpg desc limit 1

SQL:
SELECT model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId ORDER BY mpg DESC LIMIT 1
self correction:
SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId ORDER BY cars_data.MPG DESC LIMIT 1

index is 135
SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;
What is the average horsepower of the cars before 1980?
schema_links:
What is the average horsepower of the cars before 1980? | cars_data : cars_data.horsepower , cars_data.year , cars_data.id , cars_data.cylinders , cars_data.weight , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql and SQL generation:
select avg ( _ ) from _ where _ < _ | select avg(cars_data.horsepower) from cars_data where cars_data.year < 1980
SQL = SELECT avg(horsepower) FROM cars_data WHERE year < 1980
natsql:
select avg ( _ ) from _ where _ < _ | select avg(cars_data.horsepower) from cars_data where cars_data.year < 1980

SQL:
SELECT avg(horsepower) FROM cars_data WHERE year < 1980
self correction:
SELECT avg(Horsepower) FROM cars_data WHERE Year < 1980

index is 136
select avg(horsepower) from cars_data where year  <  1980;
What is the average horsepower for all cars produced before 1980 ?
schema_links:
What is the average horsepower for all cars produced before 1980 ? | cars_data : cars_data.horsepower , cars_data.year , cars_data.id , cars_data.cylinders , cars_data.weight , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*
natsql and SQL generation:
select avg ( _ ) from _ where _ < _ | select avg(cars_data.horsepower) from cars_data where cars_data.year < 1980
SQL = SELECT avg(horsepower) FROM cars_data WHERE year  <  1980
natsql:
select avg ( _ ) from _ where _ < _ | select avg(cars_data.horsepower) from cars_data where cars_data.year < 1980

SQL:
SELECT avg(horsepower) FROM cars_data WHERE year  <  1980
self correction:
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980

index is 137
SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';
What is the average edispl of the cars of model volvo?
schema_links:
What is the average edispl of the cars of model volvo? | model_list : model_list.model ( volvo ) , model_list.maker , model_list.modelid , model_list.* | cars_data : cars_data.edispl , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.* | car_names : car_names.model ( volvo ) , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.maker ( volvo ) , car_makers.fullname ( Volvo ) , car_makers.id , car_makers.country , car_makers.*
natsql and SQL generation:
select avg ( cars_data.edispl ) from cars_data where car_names.model = 'volvo'
SQL = SELECT avg(edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = 'volvo'
natsql:
select avg ( cars_data.edispl ) from cars_data where car_names.model = 'volvo'

SQL:
SELECT avg(edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = 'volvo'
self correction:
SELECT avg(Edispl)  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.Maker = 'volvo'

index is 138
SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';
What is the average edispl for all volvos?
schema_links:
What is the average edispl for all volvos? | cars_data : cars_data.edispl , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.* | car_names : car_names.model ( volvo ) , car_names.make , car_names.makeid , car_names.* | model_list : model_list.model ( volvo ) , model_list.maker , model_list.modelid , model_list.* | car_makers : car_makers.maker ( volvo ) , car_makers.id , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select avg ( _ ) from _ where _ | select avg ( cars_data.edispl ) from cars_data join car_names on cars_data.id = car_names.makeid where car_names.make = 'volvo'
SQL = SELECT AVG(edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Make = 'volvo'
natsql:
select avg ( _ ) from _ where _ | select avg ( cars_data.edispl ) from cars_data join car_names on cars_data.id = car_names.makeid where car_names.make = 'volvo'

SQL:
SELECT AVG(edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Make = 'volvo'
self correction:
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Make = 'volvo'

index is 139
SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;
What is the maximum accelerate for different number of cylinders?
schema_links:
What is the maximum accelerate for different number of cylinders? | cars_data : cars_data.accelerate , cars_data.cylinders , cars_data.id , cars_data.year , cars_data.horsepower , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | continents : continents.continent , continents.contid , continents.*
natsql and SQL generation:
select _ , max ( _ ) from _ group by _ | select cylinders , max ( accelerate ) from cars_data group by cylinders
SQL = SELECT cylinders , MAX(accelerate) FROM cars_data GROUP BY cylinders
natsql:
select _ , max ( _ ) from _ group by _ | select cylinders , max ( accelerate ) from cars_data group by cylinders

SQL:
SELECT cylinders , MAX(accelerate) FROM cars_data GROUP BY cylinders
self correction:
SELECT cylinders, MAX(Accelerate)  FROM cars_data  GROUP BY cylinders

index is 140
SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;
What is the maximum accelerate for all the different cylinders?
schema_links:
What is the maximum accelerate for all the different cylinders? | cars_data : cars_data.accelerate , cars_data.cylinders , cars_data.year , cars_data.id , cars_data.horsepower , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | continents : continents.continent , continents.contid , continents.*
natsql and SQL generation:
select _ , max ( _ ) from _ group by _ | select cars_data.cylinders , max ( cars_data.accelerate ) from cars_data group by cars_data.cylinders
SQL = SELECT cylinders ,  MAX(accelerate) FROM cars_data GROUP BY cylinders
natsql:
select _ , max ( _ ) from _ group by _ | select cars_data.cylinders , max ( cars_data.accelerate ) from cars_data group by cars_data.cylinders

SQL:
SELECT cylinders ,  MAX(accelerate) FROM cars_data GROUP BY cylinders
self correction:
SELECT cylinders, MAX(Accelerate) FROM cars_data GROUP BY cylinders

index is 141
SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;
Which model has the most version(make) of cars?
schema_links:
Which model has the most version(make) of cars? | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select model_list.model from model_list group by model_list.model order by count ( model_list.make ) desc limit 1
SQL = SELECT model FROM model_list GROUP BY model ORDER BY count(make) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select model_list.model from model_list group by model_list.model order by count ( model_list.make ) desc limit 1

SQL:
SELECT model FROM model_list GROUP BY model ORDER BY count(make) DESC LIMIT 1
self correction:
SELECT model FROM model_list GROUP BY model ORDER BY COUNT(*) DESC LIMIT 1

index is 142
SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;
What model has the most different versions?
schema_links:
What model has the most different versions? | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql and SQL generation:
select _ from _ group by _ order by count ( distinct _ ) desc limit _ | select model_list.model from model_list group by model_list.model order by count ( distinct model_list.modelid ) desc limit 1
SQL = SELECT model FROM model_list GROUP BY model ORDER BY count(DISTINCT modelid) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( distinct _ ) desc limit _ | select model_list.model from model_list group by model_list.model order by count ( distinct model_list.modelid ) desc limit 1

SQL:
SELECT model FROM model_list GROUP BY model ORDER BY count(DISTINCT modelid) DESC LIMIT 1
self correction:
SELECT model  FROM model_list  GROUP BY model  ORDER BY COUNT(DISTINCT ModelId) DESC  LIMIT 1

index is 143
SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;
How many cars have more than 4 cylinders?
schema_links:
How many cars have more than 4 cylinders? | cars_data : cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.*
natsql and SQL generation:
select count ( _ ) from _ where _ > _ | select count ( cars_data.* ) from cars_data where cars_data.cylinders > 4
SQL = SELECT count(*) FROM cars_data WHERE cylinders > 4
natsql:
select count ( _ ) from _ where _ > _ | select count ( cars_data.* ) from cars_data where cars_data.cylinders > 4

SQL:
SELECT count(*) FROM cars_data WHERE cylinders > 4
self correction:
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4

index is 144
SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;
What is the number of cars with more than 4 cylinders?
schema_links:
What is the number of cars with more than 4 cylinders? | cars_data : cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql and SQL generation:
select count ( * ) from _ where _ > _ | select count ( * ) from cars_data where cars_data.cylinders > 4
SQL = SELECT count(*) FROM cars_data WHERE cylinders > 4
natsql:
select count ( * ) from _ where _ > _ | select count ( * ) from cars_data where cars_data.cylinders > 4

SQL:
SELECT count(*) FROM cars_data WHERE cylinders > 4
self correction:
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4

index is 145
SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;
how many cars were produced in 1980?
schema_links:
how many cars were produced in 1980? | cars_data : cars_data.year , cars_data.id , cars_data.horsepower , cars_data.cylinders , cars_data.weight , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*
natsql and SQL generation:
select count ( _ ) from _ where _ = _ | select count ( * ) from cars_data where year = 1980
SQL = SELECT count(*) FROM cars_data WHERE year = 1980
natsql:
select count ( _ ) from _ where _ = _ | select count ( * ) from cars_data where year = 1980

SQL:
SELECT count(*) FROM cars_data WHERE year = 1980
self correction:
SELECT count(*) FROM cars_data WHERE Year = 1980

index is 146
SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;
In 1980, how many cars were made?
schema_links:
In 1980, how many cars were made? | cars_data : cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.country , car_makers.id , car_makers.fullname , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*
natsql and SQL generation:
select count ( _ ) from _ where _ = _ | select count(*) from cars_data where year = 1980
SQL = SELECT count(*) FROM cars_data WHERE year = 1980
natsql:
select count ( _ ) from _ where _ = _ | select count(*) from cars_data where year = 1980

SQL:
SELECT count(*) FROM cars_data WHERE year = 1980
self correction:
SELECT COUNT(*) FROM cars_data WHERE Year = 1980

index is 147
SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';
How many car models were produced by the maker with full name American Motor Company?
schema_links:
How many car models were produced by the maker with full name American Motor Company? | car_makers : car_makers.fullname ( American Motor Company ) , car_makers.maker , car_makers.id , car_makers.country , car_makers.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | continents : continents.continent ( america ) , continents.contid , continents.*
natsql and SQL generation:
select count ( _ ) from _ where _ = _ | select count ( model_list.* ) from model_list where model_list.maker = (SELECT car_makers.id FROM car_makers WHERE car_makers.fullname = 'American Motor Company')
SQL = SELECT count(*) FROM model_list WHERE maker = (SELECT id FROM car_makers WHERE fullname = 'American Motor Company')
natsql:
select count ( _ ) from _ where _ = _ | select count ( model_list.* ) from model_list where model_list.maker = (SELECT car_makers.id FROM car_makers WHERE car_makers.fullname = 'American Motor Company')

SQL:
SELECT count(*) FROM model_list WHERE maker = (SELECT id FROM car_makers WHERE fullname = 'American Motor Company')
self correction:
SELECT COUNT(DISTINCT model) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname = 'American Motor Company'

index is 148
SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';
What is the number of car models created by the car maker American Motor Company?
schema_links:
What is the number of car models created by the car maker American Motor Company? | car_makers : car_makers.fullname ( American Motor Company ) , car_makers.maker , car_makers.country , car_makers.id , car_makers.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | continents : continents.continent ( america ) , continents.contid , continents.*
natsql and SQL generation:
select count ( _ ) from _ where _ | select count ( * ) from car_makers where car_makers.fullname = 'American Motor Company'
SQL = SELECT count(*) FROM car_makers WHERE fullname = 'American Motor Company'
natsql:
select count ( _ ) from _ where _ | select count ( * ) from car_makers where car_makers.fullname = 'American Motor Company'

SQL:
SELECT count(*) FROM car_makers WHERE fullname = 'American Motor Company'
self correction:
SELECT COUNT(DISTINCT car_names.Model) AS TotalCarModels FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.Model WHERE car_makers.FullName = 'American Motor Company'

index is 149
SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;
Which makers designed more than 3 car models? List full name and the id.
schema_links:
Which makers designed more than 3 car models? List full name and the id. | car_makers : car_makers.fullname , car_makers.id , car_makers.maker , car_makers.country , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.* | car_names : car_names.model , car_names.makeid , car_names.make , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql and SQL generation:
select _ , _ from _ group by _ having count ( _ ) > _ | select car_makers.fullname , car_makers.id from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.fullname , car_makers.id having count ( model_list.modelid ) > 3
SQL = SELECT fullname ,  id FROM car_makers JOIN model_list ON car_makers.id  =  model_list.maker GROUP BY fullname ,  id HAVING COUNT(modelid)  >  3
natsql:
select _ , _ from _ group by _ having count ( _ ) > _ | select car_makers.fullname , car_makers.id from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.fullname , car_makers.id having count ( model_list.modelid ) > 3

SQL:
SELECT fullname ,  id FROM car_makers JOIN model_list ON car_makers.id  =  model_list.maker GROUP BY fullname ,  id HAVING COUNT(modelid)  >  3
self correction:
SELECT fullname, id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY fullname, id HAVING COUNT(model_list.ModelId) > 3

index is 150
SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;
What are the names and ids of all makers with more than 3 models?
schema_links:
What are the names and ids of all makers with more than 3 models? | car_makers : car_makers.maker , car_makers.fullname , car_makers.id , car_makers.country , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | continents : continents.continent , continents.contid , continents.*
natsql and SQL generation:
select _ , _ from _ where count ( _ ) > _ group by _ | select car_makers.maker , car_makers.id from car_makers where count ( car_makers.* ) > 3 group by car_makers.maker , car_makers.id
SQL = SELECT maker ,  id FROM car_makers GROUP BY maker ,  id HAVING count(*)  >  3
natsql:
select _ , _ from _ where count ( _ ) > _ group by _ | select car_makers.maker , car_makers.id from car_makers where count ( car_makers.* ) > 3 group by car_makers.maker , car_makers.id

SQL:
SELECT maker ,  id FROM car_makers GROUP BY maker ,  id HAVING count(*)  >  3
self correction:
SELECT car_makers.Maker, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker, car_makers.Id HAVING COUNT(DISTINCT model_list.ModelId) > 3

index is 151
SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;
Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?
schema_links:
Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500? | car_makers : car_makers.fullname ( General Motors ) , car_makers.maker , car_makers.id , car_makers.country , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | cars_data : cars_data.weight , cars_data.cylinders , cars_data.id , cars_data.mpg , cars_data.horsepower , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql and SQL generation:
select distinct _ from _ where @.@ = _ or @.@ > _ | select distinct model_list.model from model_list where car_makers.fullname = 'General Motors' or cars_data.weight > 3500
SQL = SELECT DISTINCT T2.model FROM model_list AS T2 JOIN car_names AS T3 ON T2.modelid  =  T3.makeid JOIN car_makers AS T1 ON T3.make  =  T1.id JOIN cars_data AS T4 ON T3.makeid  =  T4.id WHERE T1.fullname  =  'General Motors' OR T4.weight  >  3500
natsql:
select distinct _ from _ where @.@ = _ or @.@ > _ | select distinct model_list.model from model_list where car_makers.fullname = 'General Motors' or cars_data.weight > 3500

SQL:
SELECT DISTINCT T2.model FROM model_list AS T2 JOIN car_names AS T3 ON T2.modelid  =  T3.makeid JOIN car_makers AS T1 ON T3.make  =  T1.id JOIN cars_data AS T4 ON T3.makeid  =  T4.id WHERE T1.fullname  =  'General Motors' OR T4.weight  >  3500
self correction:
SELECT DISTINCT T2.Model FROM model_list AS T2 JOIN car_names AS T3 ON T2.ModelId = T3.MakeId JOIN car_makers AS T1 ON T3.Make = T1.Id JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T1.FullName = 'General Motors' OR T4.Weight > 3500

index is 152
SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;
What are the different models created by either the car maker General Motors or weighed more than 3500?
schema_links:
What are the different models created by either the car maker General Motors or weighed more than 3500? | car_makers : car_makers.fullname ( General Motors ) , car_makers.maker , car_makers.country , car_makers.id , car_makers.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | cars_data : cars_data.weight , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql and SQL generation:
select _ from _ where _ or _ > _ | select distinct model_list.model from car_makers, model_list, cars_data where (car_makers.maker = 'General Motors' or cars_data.weight > 3500) and model_list.maker = car_makers.id and model_list.modelid = car_names.makeid
SQL = SELECT DISTINCT model FROM car_makers, model_list, cars_data WHERE (car_makers.maker = 'General Motors' OR cars_data.weight > 3500) AND model_list.maker = car_makers.id AND model_list.modelid = car_names.makeid
natsql:
select _ from _ where _ or _ > _ | select distinct model_list.model from car_makers, model_list, cars_data where (car_makers.maker = 'General Motors' or cars_data.weight > 3500) and model_list.maker = car_makers.id and model_list.modelid = car_names.makeid

SQL:
SELECT DISTINCT model FROM car_makers, model_list, cars_data WHERE (car_makers.maker = 'General Motors' OR cars_data.weight > 3500) AND model_list.maker = car_makers.id AND model_list.modelid = car_names.makeid
self correction:
SELECT DISTINCT model FROM car_makers JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON model_list.modelid = car_names.makeid JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_makers.maker = 'General Motors' OR cars_data.weight > 3500

index is 153
select distinct year from cars_data where weight between 3000 and 4000;
In which years cars were produced weighing no less than 3000 and no more than 4000 ?
schema_links:
In which years cars were produced weighing no less than 3000 and no more than 4000 ? | cars_data : cars_data.weight , cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql and SQL generation:
select distinct _ from _ where _ >= _ and _ <= _ | select distinct cars_data.year from cars_data where cars_data.weight >= 3000 and cars_data.weight <= 4000
SQL = SELECT DISTINCT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000
natsql:
select distinct _ from _ where _ >= _ and _ <= _ | select distinct cars_data.year from cars_data where cars_data.weight >= 3000 and cars_data.weight <= 4000

SQL:
SELECT DISTINCT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000
self correction:
SELECT year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000

index is 154
select distinct year from cars_data where weight between 3000 and 4000;
What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?
schema_links:
What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ? | cars_data : cars_data.weight , cars_data.year , cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*
natsql and SQL generation:
select distinct _ from _ where ( _ < 4000 and _ > 3000 ) | select distinct cars_data.year from cars_data where ( cars_data.weight < 4000 and cars_data.weight > 3000 )
SQL = SELECT DISTINCT year FROM cars_data WHERE (weight < 4000 AND weight > 3000)
natsql:
select distinct _ from _ where ( _ < 4000 and _ > 3000 ) | select distinct cars_data.year from cars_data where ( cars_data.weight < 4000 and cars_data.weight > 3000 )

SQL:
SELECT DISTINCT year FROM cars_data WHERE (weight < 4000 AND weight > 3000)
self correction:
SELECT DISTINCT Year FROM cars_data WHERE (Weight < 4000 OR Weight > 3000)

index is 155
SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;
What is the horsepower of the car with the largest accelerate?
schema_links:
What is the horsepower of the car with the largest accelerate? | cars_data : cars_data.horsepower , cars_data.accelerate , cars_data.id , cars_data.weight , cars_data.year , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*
natsql and SQL generation:
select _ from _ where @.@ = max ( _ ) | select cars_data.horsepower from cars_data where @.@ = max ( cars_data.accelerate )
SQL = SELECT horsepower FROM cars_data WHERE accelerate  =  (SELECT max(accelerate) FROM cars_data)
natsql:
select _ from _ where @.@ = max ( _ ) | select cars_data.horsepower from cars_data where @.@ = max ( cars_data.accelerate )

SQL:
SELECT horsepower FROM cars_data WHERE accelerate  =  (SELECT max(accelerate) FROM cars_data)
self correction:
SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Accelerate = (SELECT MAX(cars_data.Accelerate) FROM cars_data)

index is 156
SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;
What is the horsepower of the car with the greatest accelerate?
schema_links:
What is the horsepower of the car with the greatest accelerate? | cars_data : cars_data.accelerate , cars_data.horsepower , cars_data.id , cars_data.year , cars_data.weight , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*
natsql and SQL generation:
select _ from _ where @.@ = max ( _ ) | select cars_data.horsepower from cars_data where @.@ = max ( cars_data.accelerate )
SQL = SELECT horsepower FROM cars_data WHERE accelerate  =  (SELECT max(accelerate) FROM cars_data)
natsql:
select _ from _ where @.@ = max ( _ ) | select cars_data.horsepower from cars_data where @.@ = max ( cars_data.accelerate )

SQL:
SELECT horsepower FROM cars_data WHERE accelerate  =  (SELECT max(accelerate) FROM cars_data)
self correction:
SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Accelerate = (   SELECT MAX(cars_data.Accelerate)   FROM cars_data )

index is 157
SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
For model volvo, how many cylinders does the car with the least accelerate have?
schema_links:
For model volvo, how many cylinders does the car with the least accelerate have? | cars_data : cars_data.accelerate , cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.* | model_list : model_list.model ( volvo ) , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model ( volvo ) , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.fullname ( Volvo ) , car_makers.maker ( volvo ) , car_makers.id , car_makers.country , car_makers.*
natsql and SQL generation:
select _ from _ where _ = ( select min ( _ ) from _ ) | select cars_data.cylinders from cars_data where cars_data.accelerate = ( select min ( cars_data.accelerate ) from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model where model_list.maker = 'volvo' )
SQL = SELECT cylinders FROM cars_data WHERE accelerate  =  (SELECT min(accelerate) FROM cars_data JOIN car_names ON cars_data.id  =  car_names.MakeId JOIN model_list ON car_names.Model  =  model_list.Model WHERE car_makers.Maker  =  'volvo')
natsql:
select _ from _ where _ = ( select min ( _ ) from _ ) | select cars_data.cylinders from cars_data where cars_data.accelerate = ( select min ( cars_data.accelerate ) from cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.model = model_list.model where model_list.maker = 'volvo' )

SQL:
SELECT cylinders FROM cars_data WHERE accelerate  =  (SELECT min(accelerate) FROM cars_data JOIN car_names ON cars_data.id  =  car_names.MakeId JOIN model_list ON car_names.Model  =  model_list.Model WHERE car_makers.Maker  =  'volvo')
self correction:
SELECT cylinders  FROM cars_data  JOIN car_names ON cars_data.id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'volvo' ORDER BY accelerate ASC LIMIT 1

index is 158
SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
For a volvo model, how many cylinders does the version with least accelerate have?
schema_links:
For a volvo model, how many cylinders does the version with least accelerate have? | cars_data : cars_data.accelerate , cars_data.cylinders , cars_data.year , cars_data.id , cars_data.horsepower , cars_data.* | model_list : model_list.model ( volvo ) , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.model ( volvo ) , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.fullname ( Volvo ) , car_makers.maker ( volvo ) , car_makers.id , car_makers.country , car_makers.*
natsql and SQL generation:
select _ from _ where @.@ = min ( _ ) | select cars_data.cylinders from cars_data where @.@ = min ( cars_data.accelerate ) and cars_data.id = ( select car_names.makeid from car_names where car_names.model = 'volvo' )
SQL = SELECT cylinders FROM cars_data WHERE accelerate  =  (SELECT MIN(accelerate) FROM cars_data WHERE id  =  (SELECT makeid FROM car_names WHERE model  =  'volvo'))
natsql:
select _ from _ where @.@ = min ( _ ) | select cars_data.cylinders from cars_data where @.@ = min ( cars_data.accelerate ) and cars_data.id = ( select car_names.makeid from car_names where car_names.model = 'volvo' )

SQL:
SELECT cylinders FROM cars_data WHERE accelerate  =  (SELECT MIN(accelerate) FROM cars_data WHERE id  =  (SELECT makeid FROM car_names WHERE model  =  'volvo'))
self correction:
SELECT Cylinders FROM cars_data WHERE Accelerate = (   SELECT MIN(Accelerate)   FROM cars_data   WHERE Id = (     SELECT MakeId     FROM car_names     WHERE Model = 'volvo'   ) )

index is 159
SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );
How many cars have a larger accelerate than the car with the largest horsepower?
schema_links:
How many cars have a larger accelerate than the car with the largest horsepower? | cars_data : cars_data.accelerate , cars_data.horsepower , cars_data.id , cars_data.weight , cars_data.cylinders , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql and SQL generation:
select count ( _ ) from _ where _ > ( select max ( _ ) from _ ) | select count ( cars_data.* ) from cars_data where cars_data.accelerate > ( select max ( cars_data.horsepower ) from cars_data )
SQL = SELECT count(*) FROM cars_data WHERE accelerate  >  (SELECT max(horsepower) FROM cars_data)
natsql:
select count ( _ ) from _ where _ > ( select max ( _ ) from _ ) | select count ( cars_data.* ) from cars_data where cars_data.accelerate > ( select max ( cars_data.horsepower ) from cars_data )

SQL:
SELECT count(*) FROM cars_data WHERE accelerate  >  (SELECT max(horsepower) FROM cars_data)
self correction:
SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)

index is 160
SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );
What is the number of cars with a greater accelerate than the one with the most horsepower?
schema_links:
What is the number of cars with a greater accelerate than the one with the most horsepower? | cars_data : cars_data.horsepower , cars_data.accelerate , cars_data.id , cars_data.weight , cars_data.cylinders , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql and SQL generation:
select count ( _ ) from _ where _ > ( select max ( _ ) from _ ) | select count(*) from cars_data where accelerate > (select max(horsepower) from cars_data)
SQL = SELECT count(*) FROM cars_data WHERE accelerate > (SELECT max(horsepower) FROM cars_data)
natsql:
select count ( _ ) from _ where _ > ( select max ( _ ) from _ ) | select count(*) from cars_data where accelerate > (select max(horsepower) from cars_data)

SQL:
SELECT count(*) FROM cars_data WHERE accelerate > (SELECT max(horsepower) FROM cars_data)
self correction:
SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)

index is 161
select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2
How many countries has more than 2 car makers ?
schema_links:
How many countries has more than 2 car makers ? | countries : countries.countryid , countries.countryname , countries.continent , countries.* | car_makers : car_makers.id , car_makers.country , car_makers.maker , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql and SQL generation:
select count ( distinct _ ) from _ group by _ having count ( distinct _ ) > _ | select count ( distinct countries.countryname ) from countries join car_makers on countries.countryid = car_makers.country group by countries.countryid having count ( distinct car_makers.maker ) > 2
SQL = SELECT count(DISTINCT countryname) FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING count(DISTINCT car_makers.maker) > 2
natsql:
select count ( distinct _ ) from _ group by _ having count ( distinct _ ) > _ | select count ( distinct countries.countryname ) from countries join car_makers on countries.countryid = car_makers.country group by countries.countryid having count ( distinct car_makers.maker ) > 2

SQL:
SELECT count(DISTINCT countryname) FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryid HAVING count(DISTINCT car_makers.maker) > 2
self correction:
SELECT COUNT(DISTINCT CountryName)  FROM countries  JOIN car_makers ON countries.CountryId = car_makers.Country  GROUP BY countries.CountryId  HAVING COUNT(DISTINCT car_makers.Id) > 2

index is 162
select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2
What is the number of countries with more than 2 car makers ?
schema_links:
What is the number of countries with more than 2 car makers ? | countries : countries.countryid , countries.countryname , countries.continent , countries.* | car_makers : car_makers.id , car_makers.country , car_makers.maker , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql and SQL generation:
select count ( distinct _ ) from _ group by _ having count ( distinct _ ) > _ | select count ( distinct car_makers.country ) from car_makers group by car_makers.country having count ( distinct car_makers.id ) > 2
SQL = SELECT count(DISTINCT country) FROM car_makers GROUP BY country HAVING count(DISTINCT id) > 2
natsql:
select count ( distinct _ ) from _ group by _ having count ( distinct _ ) > _ | select count ( distinct car_makers.country ) from car_makers group by car_makers.country having count ( distinct car_makers.id ) > 2

SQL:
SELECT count(DISTINCT country) FROM car_makers GROUP BY country HAVING count(DISTINCT id) > 2
self correction:
SELECT COUNT(DISTINCT Country) AS NumberOfCountries FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Id) > 2

index is 163
SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;
How many cars has over 6 cylinders?
schema_links:
How many cars has over 6 cylinders? | cars_data : cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.*
natsql and SQL generation:
select count ( * ) from _ where @.@ > _ | select count ( * ) from cars_data where cylinders > 6
SQL = SELECT count(*) FROM cars_data WHERE cylinders > 6
natsql:
select count ( * ) from _ where @.@ > _ | select count ( * ) from cars_data where cylinders > 6

SQL:
SELECT count(*) FROM cars_data WHERE cylinders > 6
self correction:
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6

index is 164
SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;
What is the number of carsw ith over 6 cylinders?
schema_links:
What is the number of carsw ith over 6 cylinders? | cars_data : cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql and SQL generation:
select count ( _ ) from _ where _ > _ | select count(*) from cars_data where cylinders > 6
SQL = SELECT count(*) FROM cars_data WHERE cylinders > 6
natsql:
select count ( _ ) from _ where _ > _ | select count(*) from cars_data where cylinders > 6

SQL:
SELECT count(*) FROM cars_data WHERE cylinders > 6
self correction:
SELECT count(*) FROM cars_data WHERE Cylinders > 6

index is 165
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;
For the cars with 4 cylinders, which model has the largest horsepower?
schema_links:
For the cars with 4 cylinders, which model has the largest horsepower? | cars_data : cars_data.horsepower , cars_data.cylinders , cars_data.id , cars_data.weight , cars_data.accelerate , cars_data.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select _ from _ where @.@ = max ( _ ) | select model_list.model from cars_data join model_list on cars_data.id = model_list.modelid where cars_data.cylinders = 4 and @.@ = max ( cars_data.horsepower )
SQL = SELECT T3.model FROM cars_data AS T1 JOIN model_list AS T2 ON T1.id  =  T2.modelid WHERE T1.cylinders  =  4 AND T1.horsepower  =  (SELECT max(horsepower) FROM cars_data WHERE cylinders  =  4)
natsql:
select _ from _ where @.@ = max ( _ ) | select model_list.model from cars_data join model_list on cars_data.id = model_list.modelid where cars_data.cylinders = 4 and @.@ = max ( cars_data.horsepower )

SQL:
SELECT T3.model FROM cars_data AS T1 JOIN model_list AS T2 ON T1.id  =  T2.modelid WHERE T1.cylinders  =  4 AND T1.horsepower  =  (SELECT max(horsepower) FROM cars_data WHERE cylinders  =  4)
self correction:
SELECT T2.Model FROM cars_data AS T1 JOIN model_list AS T2 ON T1.Id = T2.ModelId WHERE T1.Cylinders = 4 AND T1.Horsepower = (   SELECT MAX(Horsepower)   FROM cars_data   WHERE Cylinders = 4 )

index is 166
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;
For all of the 4 cylinder cars, which model has the most horsepower?
schema_links:
For all of the 4 cylinder cars, which model has the most horsepower? | cars_data : cars_data.horsepower , cars_data.cylinders , cars_data.id , cars_data.weight , cars_data.accelerate , cars_data.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select _ from _ where @.@ = max ( _ ) | select model_list.model from cars_data join model_list on cars_data.id = model_list.modelid where cars_data.cylinders = 4 and cars_data.horsepower = (select max(horsepower) from cars_data where cylinders = 4)
SQL = SELECT model FROM cars_data JOIN model_list ON cars_data.id = model_list.modelid WHERE cylinders = 4 AND horsepower = (SELECT max(horsepower) FROM cars_data WHERE cylinders = 4)
natsql:
select _ from _ where @.@ = max ( _ ) | select model_list.model from cars_data join model_list on cars_data.id = model_list.modelid where cars_data.cylinders = 4 and cars_data.horsepower = (select max(horsepower) from cars_data where cylinders = 4)

SQL:
SELECT model FROM cars_data JOIN model_list ON cars_data.id = model_list.modelid WHERE cylinders = 4 AND horsepower = (SELECT max(horsepower) FROM cars_data WHERE cylinders = 4)
self correction:
SELECT model_list.Model FROM cars_data JOIN model_list ON cars_data.Id = model_list.ModelId WHERE cars_data.Cylinders = 4 GROUP BY model_list.Model HAVING cars_data.Horsepower = MAX(cars_data.Horsepower)

index is 167
SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;
Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.
schema_links:
Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name. | car_names : car_names.make , car_names.makeid , car_names.model , car_names.* | cars_data : cars_data.horsepower , cars_data.cylinders , cars_data.id , cars_data.weight , cars_data.year , cars_data.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select _ , _ from _ where _ > ( select min ( _ ) from _ ) and _ <= _ | select car_names.makeid , car_names.make from car_names where cars_data.horsepower > ( select min ( cars_data.horsepower ) from cars_data ) and cars_data.cylinders <= 3
SQL = SELECT car_names.makeid ,  car_names.make FROM car_names JOIN cars_data ON car_names.makeid  =  cars_data.id WHERE cars_data.horsepower  >  (SELECT min(horsepower) FROM cars_data) AND cars_data.cylinders <= 3
natsql:
select _ , _ from _ where _ > ( select min ( _ ) from _ ) and _ <= _ | select car_names.makeid , car_names.make from car_names where cars_data.horsepower > ( select min ( cars_data.horsepower ) from cars_data ) and cars_data.cylinders <= 3

SQL:
SELECT car_names.makeid ,  car_names.make FROM car_names JOIN cars_data ON car_names.makeid  =  cars_data.id WHERE cars_data.horsepower  >  (SELECT min(horsepower) FROM cars_data) AND cars_data.cylinders <= 3
self correction:
SELECT car_names.makeid, car_names.make FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.horsepower > (   SELECT MIN(horsepower)   FROM cars_data ) AND cars_data.cylinders <= 3

index is 168
select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;
Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?
schema_links:
Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ? | car_names : car_names.make , car_names.makeid , car_names.model , car_names.* | cars_data : cars_data.horsepower , cars_data.cylinders , cars_data.id , cars_data.weight , cars_data.mpg , cars_data.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.*
natsql and SQL generation:
select _ , _ from _ where _ > ( select min ( _ ) from _ ) and _ < _ | select car_names.makeid , car_names.make from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.horsepower > ( select min ( horsepower ) from cars_data ) and cars_data.cylinders < 4
SQL = SELECT makeid ,  make FROM cars_data JOIN car_names ON cars_data.id  =  car_names.makeid WHERE horsepower  >  (SELECT min(horsepower) FROM cars_data) AND cylinders  <  4
natsql:
select _ , _ from _ where _ > ( select min ( _ ) from _ ) and _ < _ | select car_names.makeid , car_names.make from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.horsepower > ( select min ( horsepower ) from cars_data ) and cars_data.cylinders < 4

SQL:
SELECT makeid ,  make FROM cars_data JOIN car_names ON cars_data.id  =  car_names.makeid WHERE horsepower  >  (SELECT min(horsepower) FROM cars_data) AND cylinders  <  4
self correction:
SELECT car_names.MakeId, car_names.Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders < 4

index is 169
select max(mpg) from cars_data where cylinders  =  8 or year  <  1980
What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?
schema_links:
What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ? | cars_data : cars_data.mpg , cars_data.year , cars_data.cylinders , cars_data.id , cars_data.horsepower , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql and SQL generation:
select max ( _ ) from _ where _ or _ | select max ( cars_data.mpg ) from cars_data where cars_data.cylinders = 8 or cars_data.year < 1980
SQL = SELECT max(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980
natsql:
select max ( _ ) from _ where _ or _ | select max ( cars_data.mpg ) from cars_data where cars_data.cylinders = 8 or cars_data.year < 1980

SQL:
SELECT max(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980
self correction:
SELECT max(MPG) FROM cars_data WHERE Cylinders = 8 AND Year < 1980

index is 170
select max(mpg) from cars_data where cylinders  =  8 or year  <  1980
What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?
schema_links:
What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ? | cars_data : cars_data.mpg , cars_data.cylinders , cars_data.year , cars_data.id , cars_data.horsepower , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*
natsql and SQL generation:
select max ( _ ) from _ where _ or _ | select max ( cars_data.mpg ) from cars_data where cars_data.cylinders = 8 or cars_data.year < 1980
SQL = SELECT max(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980
natsql:
select max ( _ ) from _ where _ or _ | select max ( cars_data.mpg ) from cars_data where cars_data.cylinders = 8 or cars_data.year < 1980

SQL:
SELECT max(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980
self correction:
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980

index is 171
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';
Which models are lighter than 3500 but not built by the 'Ford Motor Company'?
schema_links:
Which models are lighter than 3500 but not built by the 'Ford Motor Company'? | car_makers : car_makers.fullname ( Ford Motor Company ) , car_makers.maker ( ford ) , car_makers.country , car_makers.id , car_makers.* | model_list : model_list.model ( ford ) , model_list.modelid , model_list.maker , model_list.* | cars_data : cars_data.weight , cars_data.horsepower , cars_data.id , cars_data.cylinders , cars_data.accelerate , cars_data.* | car_names : car_names.model ( ford ) , car_names.make , car_names.makeid , car_names.*
natsql and SQL generation:
select _ from _ where _ < _ and _ != _ | select model_list.model from cars_data join model_list on cars_data.id = model_list.modelid join car_names on model_list.maker = car_names.makeid join car_makers on car_names.make = car_makers.id where cars_data.weight < 3500 and car_makers.fullname != 'Ford Motor Company'
SQL = SELECT model FROM cars_data JOIN model_list ON cars_data.Id = model_list.ModelId JOIN car_names ON model_list.Maker = car_names.MakeId JOIN car_makers ON car_names.Make = car_makers.Id WHERE cars_data.Weight < 3500 AND car_makers.FullName != 'Ford Motor Company'
natsql:
select _ from _ where _ < _ and _ != _ | select model_list.model from cars_data join model_list on cars_data.id = model_list.modelid join car_names on model_list.maker = car_names.makeid join car_makers on car_names.make = car_makers.id where cars_data.weight < 3500 and car_makers.fullname != 'Ford Motor Company'

SQL:
SELECT model FROM cars_data JOIN model_list ON cars_data.Id = model_list.ModelId JOIN car_names ON model_list.Maker = car_names.MakeId JOIN car_makers ON car_names.Make = car_makers.Id WHERE cars_data.Weight < 3500 AND car_makers.FullName != 'Ford Motor Company'
self correction:
SELECT model  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE cars_data.Weight < 3500  AND car_makers.FullName != 'Ford Motor Company'

index is 172
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';
What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?
schema_links:
What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company? | car_makers : car_makers.fullname ( Ford Motor Company ) , car_makers.maker ( ford ) , car_makers.country , car_makers.id , car_makers.* | model_list : model_list.model ( ford ) , model_list.modelid , model_list.maker , model_list.* | cars_data : cars_data.weight , cars_data.cylinders , cars_data.horsepower , cars_data.id , cars_data.accelerate , cars_data.* | car_names : car_names.model ( ford ) , car_names.make , car_names.makeid , car_names.*
natsql and SQL generation:
select distinct _ from _ where _ and _ | select distinct model_list.model from cars_data, model_list, car_makers where cars_data.weight < 3500 and cars_data.id = car_names.makeid and car_names.model = model_list.model and model_list.maker <> 'ford'
SQL = SELECT DISTINCT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE cars_data.weight < 3500 AND model_list.maker <> 'ford'
natsql:
select distinct _ from _ where _ and _ | select distinct model_list.model from cars_data, model_list, car_makers where cars_data.weight < 3500 and cars_data.id = car_names.makeid and car_names.model = model_list.model and model_list.maker <> 'ford'

SQL:
SELECT DISTINCT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE cars_data.weight < 3500 AND model_list.maker <> 'ford'
self correction:
SELECT DISTINCT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Weight < 3500 AND car_makers.FullName <> 'Ford Motor Company'

index is 173
SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;
What are the name of the countries where there is not a single car maker?
schema_links:
What are the name of the countries where there is not a single car maker? | countries : countries.countryname , countries.countryid , countries.continent , countries.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ ) | select countries.countryname from countries where countries.countryid not in ( select car_makers.country from car_makers )
SQL = SELECT countryname FROM countries WHERE countryid NOT IN (SELECT country FROM car_makers)
natsql:
select _ from _ where _ not in ( select _ from _ ) | select countries.countryname from countries where countries.countryid not in ( select car_makers.country from car_makers )

SQL:
SELECT countryname FROM countries WHERE countryid NOT IN (SELECT country FROM car_makers)
self correction:
SELECT countryname FROM countries WHERE countryid NOT IN (SELECT country FROM car_makers)

index is 174
SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;
What are the names of the countries with no car makers?
schema_links:
What are the names of the countries with no car makers? | countries : countries.countryname , countries.countryid , countries.continent , countries.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*
natsql and SQL generation:
select _ from _ where not exists ( select * from _ ) | select countries.countryname from countries where not exists ( select * from car_makers where countries.countryid = car_makers.country )
natsql:
select _ from _ where not exists ( select * from _ ) | select countries.countryname from countries where not exists ( select * from car_makers where countries.countryid = car_makers.country )
SQL:
SELECT countryname FROM countries WHERE NOT EXISTS (SELECT * FROM car_makers WHERE countries.countryid = car_makers.country)
self correction:
SELECT countryname FROM countries WHERE countryid NOT IN (SELECT country FROM car_makers)

index is 175
select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;
Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .
schema_links:
Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker . | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql and SQL generation:
select _ , _ from _ group by _ having count ( distinct _ ) > _ and count ( distinct _ ) > _ | select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id , car_makers.maker having count ( distinct model_list.modelid ) >= 2 and count ( distinct car_makers.id ) > 3
SQL = SELECT id , maker FROM car_makers JOIN model_list ON car_makers.id  =  model_list.maker GROUP BY id , maker HAVING count(DISTINCT model_list.modelid)  >=  2 AND count(DISTINCT car_makers.id)  >  3
natsql:
select _ , _ from _ group by _ having count ( distinct _ ) > _ and count ( distinct _ ) > _ | select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id , car_makers.maker having count ( distinct model_list.modelid ) >= 2 and count ( distinct car_makers.id ) > 3

SQL:
SELECT id , maker FROM car_makers JOIN model_list ON car_makers.id  =  model_list.maker GROUP BY id , maker HAVING count(DISTINCT model_list.modelid)  >=  2 AND count(DISTINCT car_makers.id)  >  3
self correction:
SELECT id, maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY id, maker HAVING COUNT(DISTINCT model_list.ModelId) >= 2 AND COUNT(DISTINCT car_makers.Id) > 3

index is 176
SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;
What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?
schema_links:
What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars? | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.id , cars_data.cylinders , cars_data.horsepower , cars_data.weight , cars_data.accelerate , cars_data.*
natsql and SQL generation:
select _ , _ from _ where count ( _ ) >= _ and count ( distinct _ ) > _ group by _ | select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.modelid = car_names.makeid join cars_data on car_names.makeid = cars_data.id group by car_makers.id , car_makers.maker having count ( distinct model_list.modelid ) >= 2 and count ( distinct cars_data.id ) > 3
SQL = SELECT car_makers.id ,  car_makers.maker FROM car_makers JOIN model_list ON car_makers.id  =  model_list.maker JOIN car_names ON model_list.modelid  =  car_names.makeid JOIN cars_data ON car_names.makeid  =  cars_data.id GROUP BY car_makers.id ,  car_makers.maker HAVING COUNT(DISTINCT model_list.modelid) >= 2 AND COUNT(DISTINCT cars_data.id) > 3
natsql:
select _ , _ from _ where count ( _ ) >= _ and count ( distinct _ ) > _ group by _ | select car_makers.id , car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.modelid = car_names.makeid join cars_data on car_names.makeid = cars_data.id group by car_makers.id , car_makers.maker having count ( distinct model_list.modelid ) >= 2 and count ( distinct cars_data.id ) > 3

SQL:
SELECT car_makers.id ,  car_makers.maker FROM car_makers JOIN model_list ON car_makers.id  =  model_list.maker JOIN car_names ON model_list.modelid  =  car_names.makeid JOIN cars_data ON car_names.makeid  =  cars_data.id GROUP BY car_makers.id ,  car_makers.maker HAVING COUNT(DISTINCT model_list.modelid) >= 2 AND COUNT(DISTINCT cars_data.id) > 3
self correction:
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT model_list.ModelId) >= 2 AND COUNT(DISTINCT cars_data.Id) > 3

index is 177
SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';
What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?
schema_links:
What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model? | countries : countries.countryname , countries.countryid , countries.continent , countries.* | car_makers : car_makers.fullname ( Fiat ) , car_makers.maker ( fiat ) , car_makers.id , car_makers.country , car_makers.* | model_list : model_list.model ( fiat ) , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model ( fiat ) , car_names.make , car_names.makeid , car_names.*
natsql and SQL generation:
select _ , _ from _ where count ( _ ) > _ or _ = _ group by _ | select countries.countryid , countries.countryname from countries where count ( car_makers.id ) > 3 or car_names.model = 'fiat' group by countries.countryid , countries.countryname
SQL = SELECT countryid ,  countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING count(*)  >  3) OR countryid IN (SELECT CountryId FROM car_names WHERE model  =  'fiat' GROUP BY CountryId)
natsql:
select _ , _ from _ where count ( _ ) > _ or _ = _ group by _ | select countries.countryid , countries.countryname from countries where count ( car_makers.id ) > 3 or car_names.model = 'fiat' group by countries.countryid , countries.countryname

SQL:
SELECT countryid ,  countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING count(*)  >  3) OR countryid IN (SELECT CountryId FROM car_names WHERE model  =  'fiat' GROUP BY CountryId)
self correction:
SELECT CountryId, CountryName  FROM countries  WHERE CountryId IN (   SELECT Country    FROM car_makers    GROUP BY Country    HAVING COUNT(*) > 3 )  OR CountryId IN (   SELECT CountryId    FROM car_names    WHERE Model = 'fiat'    GROUP BY CountryId )

index is 178
select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';
What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?
schema_links:
What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ? | countries : countries.countryname , countries.countryid , countries.continent , countries.* | model_list : model_list.model ( fiat ) , model_list.maker , model_list.modelid , model_list.* | car_makers : car_makers.maker ( fiat ) , car_makers.id , car_makers.fullname ( Fiat ) , car_makers.country , car_makers.* | car_names : car_names.model ( fiat ) , car_names.make , car_names.makeid , car_names.*
natsql and SQL generation:
select _ , _ from _ where count ( _ ) > _ or _ = _ group by _ | select countries.countryid , countries.countryname from countries join car_makers on countries.countryid = car_makers.country where count ( distinct car_makers.id ) > 3 or car_makers.maker = 'fiat' group by countries.countryid , countries.countryname
SQL = SELECT countryid , countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countryid , countryname HAVING count(DISTINCT car_makers.id) > 3 OR car_makers.maker = 'fiat'
natsql:
select _ , _ from _ where count ( _ ) > _ or _ = _ group by _ | select countries.countryid , countries.countryname from countries join car_makers on countries.countryid = car_makers.country where count ( distinct car_makers.id ) > 3 or car_makers.maker = 'fiat' group by countries.countryid , countries.countryname

SQL:
SELECT countryid , countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countryid , countryname HAVING count(DISTINCT car_makers.id) > 3 OR car_makers.maker = 'fiat'
self correction:
SELECT countries.CountryId, countries.CountryName  FROM countries  JOIN car_makers ON countries.CountryId = car_makers.Country  GROUP BY countries.CountryId, countries.CountryName  HAVING COUNT(DISTINCT car_makers.Id) > 3 OR car_makers.Maker = 'fiat'

index is 179
SELECT Country FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
Which country does Airline "JetBlue Airways" belong to?
schema_links:
Which country does Airline "JetBlue Airways" belong to? | airlines : airlines.airline ( JetBlue Airways ) , airlines.country , airlines.abbreviation ( JetBlue ) , airlines.uid , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*
natsql and SQL generation:
select _ from _ where @.@ = "JetBlue Airways" | select airlines.country from airlines where airlines.airline = "JetBlue Airways"
SQL = SELECT country FROM airlines WHERE airline  =  "JetBlue Airways"
natsql:
select _ from _ where @.@ = "JetBlue Airways" | select airlines.country from airlines where airlines.airline = "JetBlue Airways"

SQL:
SELECT country FROM airlines WHERE airline  =  "JetBlue Airways"
self correction:
SELECT Country FROM airlines WHERE Airline = "JetBlue Airways"

index is 180
SELECT Country FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
What country is Jetblue Airways affiliated with?
schema_links:
What country is Jetblue Airways affiliated with? | airlines : airlines.airline ( JetBlue Airways ) , airlines.country , airlines.abbreviation ( JetBlue ) , airlines.uid , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*
natsql and SQL generation:
select _ from _ where _ = _ | select airlines.country from airlines where airlines.airline = 'JetBlue Airways'
SQL = SELECT country FROM airlines WHERE airline = 'JetBlue Airways'
natsql:
select _ from _ where _ = _ | select airlines.country from airlines where airlines.airline = 'JetBlue Airways'

SQL:
SELECT country FROM airlines WHERE airline = 'JetBlue Airways'
self correction:
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'

index is 181
SELECT Abbreviation FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
What is the abbreviation of Airline "JetBlue Airways"?
schema_links:
What is the abbreviation of Airline "JetBlue Airways"? | airlines : airlines.abbreviation ( JetBlue ) , airlines.airline ( JetBlue Airways ) , airlines.country , airlines.uid , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*
natsql and SQL generation:
select _ from _ where _ = "JetBlue Airways" | select airlines.abbreviation from airlines where airlines.airline = "JetBlue Airways"
SQL = SELECT abbreviation FROM airlines WHERE airline = "JetBlue Airways"
natsql:
select _ from _ where _ = "JetBlue Airways" | select airlines.abbreviation from airlines where airlines.airline = "JetBlue Airways"

SQL:
SELECT abbreviation FROM airlines WHERE airline = "JetBlue Airways"
self correction:
SELECT Abbreviation FROM airlines WHERE Airline = "JetBlue Airways"

index is 182
SELECT Abbreviation FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
Which abbreviation corresponds to Jetblue Airways?
schema_links:
Which abbreviation corresponds to Jetblue Airways? | airlines : airlines.abbreviation ( JetBlue ) , airlines.airline ( JetBlue Airways ) , airlines.country , airlines.uid , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*
natsql and SQL generation:
select _ from _ where _ = _ | select airlines.abbreviation from airlines where airlines.airline = 'JetBlue Airways'
SQL = SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways'
natsql:
select _ from _ where _ = _ | select airlines.abbreviation from airlines where airlines.airline = 'JetBlue Airways'

SQL:
SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways'
self correction:
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'

index is 183
SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  "USA"
List all airline names and their abbreviations in "USA".
schema_links:
List all airline names and their abbreviations in "USA". | airlines : airlines.airline , airlines.country ( USA ) , airlines.abbreviation , airlines.uid , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*
natsql and SQL generation:
select _ , _ from _ where @.@ = "USA" | select airlines.airline , airlines.abbreviation from airlines where airlines.country = "USA"
SQL = SELECT airline , abbreviation FROM airlines WHERE country = "USA"
natsql:
select _ , _ from _ where @.@ = "USA" | select airlines.airline , airlines.abbreviation from airlines where airlines.country = "USA"

SQL:
SELECT airline , abbreviation FROM airlines WHERE country = "USA"
self correction:
SELECT Airline, Abbreviation FROM airlines WHERE Country = "USA"

index is 184
SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  "USA"
What are the airline names and abbreviations for airlines in the USA?
schema_links:
What are the airline names and abbreviations for airlines in the USA? | airlines : airlines.airline , airlines.country ( USA ) , airlines.abbreviation , airlines.uid , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*
natsql and SQL generation:
select _ , _ from _ where _ = _ | select airlines.airline , airlines.abbreviation from airlines where airlines.country = 'USA'
SQL = SELECT airline , abbreviation FROM airlines WHERE country  =  'USA'
natsql:
select _ , _ from _ where _ = _ | select airlines.airline , airlines.abbreviation from airlines where airlines.country = 'USA'

SQL:
SELECT airline , abbreviation FROM airlines WHERE country  =  'USA'
self correction:
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'

index is 185
SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  "Anthony"
List the airport code and name in the city of Anthony.
schema_links:
List the airport code and name in the city of Anthony. | airports : airports.airportname ( Anthony ) , airports.city ( Anthony ) , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ , _ from _ where _ = _ | select airportcode , airportname from airports where city = 'Anthony'
SQL = SELECT airportcode , airportname FROM airports WHERE city = 'Anthony'
natsql:
select _ , _ from _ where _ = _ | select airportcode , airportname from airports where city = 'Anthony'

SQL:
SELECT airportcode , airportname FROM airports WHERE city = 'Anthony'
self correction:
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'

index is 186
SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  "Anthony"
Give the airport code and airport name corresonding to the city Anthony.
schema_links:
Give the airport code and airport name corresonding to the city Anthony. | airports : airports.airportname ( Anthony ) , airports.city ( Anthony ) , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ , _ from _ where @.@ = 'Anthony' | select airportcode , airportname from airports where city = 'Anthony'
SQL = SELECT airportcode , airportname FROM airports WHERE city = 'Anthony'
natsql:
select _ , _ from _ where @.@ = 'Anthony' | select airportcode , airportname from airports where city = 'Anthony'

SQL:
SELECT airportcode , airportname FROM airports WHERE city = 'Anthony'
self correction:
SELECT airportcode, airportname  FROM airports  WHERE City = 'Anthony'

index is 187
SELECT count(*) FROM AIRLINES
How many airlines do we have?
schema_links:
How many airlines do we have? | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( airlines.airline ) from airlines
SQL = SELECT count(*) FROM airlines
natsql:
select count ( _ ) from _ | select count ( airlines.airline ) from airlines

SQL:
SELECT count(*) FROM airlines
self correction:
SELECT count(DISTINCT Airline) FROM airlines

index is 188
SELECT count(*) FROM AIRLINES
What is the total number of airlines?
schema_links:
What is the total number of airlines? | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( * ) from airlines
SQL = SELECT count(*) FROM airlines
natsql:
select count ( _ ) from _ | select count ( * ) from airlines

SQL:
SELECT count(*) FROM airlines
self correction:
SELECT count(*) FROM airlines

index is 189
SELECT count(*) FROM AIRPORTS
How many airports do we have?
schema_links:
How many airports do we have? | airports : airports.airportname , airports.airportcode , airports.country , airports.city , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select count ( _ ) from _
| select count(*) from airports
SQL = SELECT count(*) FROM airports
natsql:
select count ( _ ) from _
| select count(*) from airports

SQL:
SELECT count(*) FROM airports
self correction:
SELECT COUNT(*) FROM airports

index is 190
SELECT count(*) FROM AIRPORTS
Return the number of  airports.
schema_links:
Return the number of  airports. | airports : airports.airportname , airports.country , airports.city , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct airports.airportcode ) from airports
SQL = SELECT count(DISTINCT airportcode) FROM airports
natsql:
select count ( distinct _ ) from _ | select count ( distinct airports.airportcode ) from airports

SQL:
SELECT count(DISTINCT airportcode) FROM airports
self correction:
SELECT COUNT(DISTINCT AirportCode) FROM airports

index is 191
SELECT count(*) FROM FLIGHTS
How many flights do we have?
schema_links:
How many flights do we have? | flights : flights.flightno , flights.airline , flights.destairport , flights.sourceairport , flights.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select count ( * ) from _ | select count(*) from flights
SQL = SELECT count(*) FROM flights
natsql:
select count ( * ) from _ | select count(*) from flights

SQL:
SELECT count(*) FROM flights
self correction:
SELECT COUNT(*) FROM flights

index is 192
SELECT count(*) FROM FLIGHTS
Return the number of flights.
schema_links:
Return the number of flights. | flights : flights.flightno , flights.airline , flights.destairport , flights.sourceairport , flights.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select count ( * ) from flights
natsql:
select count ( * ) from flights
SQL:
SELECT COUNT(*) FROM flights
self correction:
SELECT COUNT(*) FROM flights

index is 193
SELECT Airline FROM AIRLINES WHERE Abbreviation  =  "UAL"
Which airline has abbreviation 'UAL'?
schema_links:
Which airline has abbreviation 'UAL'? | airlines : airlines.abbreviation ( UAL ) , airlines.airline , airlines.country , airlines.uid , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select _ from _ where abbreviation = 'UAL' | select airlines.airline from airlines where abbreviation = 'UAL'
SQL = SELECT airline FROM airlines WHERE abbreviation = 'UAL'
natsql:
select _ from _ where abbreviation = 'UAL' | select airlines.airline from airlines where abbreviation = 'UAL'

SQL:
SELECT airline FROM airlines WHERE abbreviation = 'UAL'
self correction:
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'

index is 194
SELECT Airline FROM AIRLINES WHERE Abbreviation  =  "UAL"
Give the airline with abbreviation 'UAL'.
schema_links:
Give the airline with abbreviation 'UAL'. | airlines : airlines.abbreviation ( UAL ) , airlines.airline , airlines.country , airlines.uid , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select _ from _ where @.@ = 'UAL' | select airlines.airline from airlines where @.@ = 'UAL'
SQL = SELECT airline FROM airlines WHERE abbreviation = 'UAL'
natsql:
select _ from _ where @.@ = 'UAL' | select airlines.airline from airlines where @.@ = 'UAL'

SQL:
SELECT airline FROM airlines WHERE abbreviation = 'UAL'
self correction:
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'

index is 195
SELECT count(*) FROM AIRLINES WHERE Country  =  "USA"
How many airlines are from USA?
schema_links:
How many airlines are from USA? | airlines : airlines.country ( USA ) , airlines.airline , airlines.uid , airlines.abbreviation , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select count ( distinct _ ) from _ where @.@ = _ | select count ( distinct airlines.airline ) from airlines where airlines.country = 'USA'
SQL = SELECT count(DISTINCT airline) FROM airlines WHERE country = 'USA'
natsql:
select count ( distinct _ ) from _ where @.@ = _ | select count ( distinct airlines.airline ) from airlines where airlines.country = 'USA'

SQL:
SELECT count(DISTINCT airline) FROM airlines WHERE country = 'USA'
self correction:
SELECT COUNT(DISTINCT Airline)  FROM airlines  WHERE Country = 'USA'

index is 196
SELECT count(*) FROM AIRLINES WHERE Country  =  "USA"
Return the number of airlines in the USA.
schema_links:
Return the number of airlines in the USA. | airlines : airlines.country ( USA ) , airlines.airline , airlines.uid , airlines.abbreviation , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*
natsql and SQL generation:
select count ( _ ) from _ where @.@ = _ | select count ( airlines.airline ) from airlines where airlines.country = 'USA'
SQL = SELECT count(*) FROM airlines WHERE country = 'USA'
natsql:
select count ( _ ) from _ where @.@ = _ | select count ( airlines.airline ) from airlines where airlines.country = 'USA'

SQL:
SELECT count(*) FROM airlines WHERE country = 'USA'
self correction:
SELECT count(*) FROM airlines WHERE Country = 'USA'

index is 197
SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"
Which city and country is the Alton airport at?
schema_links:
Which city and country is the Alton airport at? | airports : airports.city ( Alton ) , airports.country , airports.airportname ( Alton ) , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select @.@ , @.@ from @ where @.@ = 'Alton' | select airports.city , airports.country from airports where airports.airportname = 'Alton'
SQL = SELECT city ,  country FROM airports WHERE airportname = 'Alton'
natsql:
select @.@ , @.@ from @ where @.@ = 'Alton' | select airports.city , airports.country from airports where airports.airportname = 'Alton'

SQL:
SELECT city ,  country FROM airports WHERE airportname = 'Alton'
self correction:
SELECT City, Country FROM airports WHERE AirportName = 'Alton';

index is 198
SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"
Give the city and country for the Alton airport.
schema_links:
Give the city and country for the Alton airport. | airports : airports.city ( Alton ) , airports.country , airports.airportname ( Alton ) , airports.countryabbrev , airports.airportcode , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ , _ from _ where _ ( _ ) , _ ( _ ) | select airports.city , airports.country from airports where airports.airportname = 'Alton'
SQL = SELECT city ,  country FROM airports WHERE airportname  =  'Alton'
natsql:
select _ , _ from _ where _ ( _ ) , _ ( _ ) | select airports.city , airports.country from airports where airports.airportname = 'Alton'

SQL:
SELECT city ,  country FROM airports WHERE airportname  =  'Alton'
self correction:
SELECT City, Country FROM airports WHERE AirportName = 'Alton'

index is 199
SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  "AKO"
What is the airport name for airport 'AKO'?
schema_links:
What is the airport name for airport 'AKO'? | airports : airports.airportcode ( AKO ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | flights : flights.sourceairport ( AKO ) , flights.destairport ( AKO ) , flights.airline , flights.flightno , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ where @.@ = _ | select airports.airportname from airports where airports.airportcode = 'AKO'
SQL = SELECT airportname FROM airports WHERE airportcode = 'AKO'
natsql:
select _ from _ where @.@ = _ | select airports.airportname from airports where airports.airportcode = 'AKO'

SQL:
SELECT airportname FROM airports WHERE airportcode = 'AKO'
self correction:
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'

index is 200
SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  "AKO"
Return the name of the airport with code 'AKO'.
schema_links:
Return the name of the airport with code 'AKO'. | airports : airports.airportcode ( AKO ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | flights : flights.sourceairport ( AKO ) , flights.destairport ( AKO ) , flights.airline , flights.flightno , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ where @.@ = 'AKO' | select airportname from airports where airportcode = 'AKO'
SQL = SELECT airportname FROM airports WHERE airportcode  =  'AKO'
natsql:
select _ from _ where @.@ = 'AKO' | select airportname from airports where airportcode = 'AKO'

SQL:
SELECT airportname FROM airports WHERE airportcode  =  'AKO'
self correction:
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'

index is 201
SELECT AirportName FROM AIRPORTS WHERE City = "Aberdeen"
What are airport names at City 'Aberdeen'?
schema_links:
What are airport names at City 'Aberdeen'? | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ where @.@ = 'Aberdeen' | select airports.airportname from airports where airports.city = 'Aberdeen'
SQL = SELECT airportname FROM airports WHERE city = 'Aberdeen'
natsql:
select _ from _ where @.@ = 'Aberdeen' | select airports.airportname from airports where airports.city = 'Aberdeen'

SQL:
SELECT airportname FROM airports WHERE city = 'Aberdeen'
self correction:
SELECT AirportName FROM airports WHERE City = 'Aberdeen'

index is 202
SELECT AirportName FROM AIRPORTS WHERE City = "Aberdeen"
What are the names of airports in Aberdeen?
schema_links:
What are the names of airports in Aberdeen? | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ where _ = _ | select airports.airportname from airports where airports.city = 'Aberdeen'
SQL = SELECT airportname FROM airports WHERE city = 'Aberdeen'
natsql:
select _ from _ where _ = _ | select airports.airportname from airports where airports.city = 'Aberdeen'

SQL:
SELECT airportname FROM airports WHERE city = 'Aberdeen'
self correction:
SELECT AirportName FROM airports WHERE City = 'Aberdeen'

index is 203
SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  "APG"
How many flights depart from 'APG'?
schema_links:
How many flights depart from 'APG'? | flights : flights.sourceairport ( APG ) , flights.destairport ( APG ) , flights.flightno , flights.airline , flights.* | airports : airports.airportcode ( APG ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql and SQL generation:
select count ( * ) from _ where @.@ = 'APG' | select count(*) from flights where sourceairport = 'APG'
SQL = SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'
natsql:
select count ( * ) from _ where @.@ = 'APG' | select count(*) from flights where sourceairport = 'APG'

SQL:
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'
self correction:
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'

index is 204
SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  "APG"
Count the number of flights departing from 'APG'.
schema_links:
Count the number of flights departing from 'APG'. | flights : flights.sourceairport ( APG ) , flights.destairport ( APG ) , flights.flightno , flights.airline , flights.* | airports : airports.airportcode ( APG ) , airports.city , airports.airportname , airports.country , airports.countryabbrev , airports.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql and SQL generation:
select count ( _ ) from _ where _ | select count(*) from flights where sourceairport = 'APG'
SQL = SELECT count(*) FROM flights WHERE sourceairport = 'APG'
natsql:
select count ( _ ) from _ where _ | select count(*) from flights where sourceairport = 'APG'

SQL:
SELECT count(*) FROM flights WHERE sourceairport = 'APG'
self correction:
SELECT count(*) FROM flights WHERE SourceAirport = 'APG'

index is 205
SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"
How many flights have destination ATO?
schema_links:
How many flights have destination ATO? | flights : flights.destairport ( ATO ) , flights.sourceairport ( ATO ) , flights.airline , flights.flightno , flights.* | airports : airports.airportcode ( ATO ) , airports.city , airports.country , airports.airportname , airports.countryabbrev , airports.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql and SQL generation:
select count ( * ) from _ where _ = 'ATO' | select count ( * ) from flights where flights.destairport = 'ATO'
SQL = SELECT count(*) FROM flights WHERE DestAirport  =  'ATO'
natsql:
select count ( * ) from _ where _ = 'ATO' | select count ( * ) from flights where flights.destairport = 'ATO'

SQL:
SELECT count(*) FROM flights WHERE DestAirport  =  'ATO'
self correction:
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'

index is 206
SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"
Count the number of flights into ATO.
schema_links:
Count the number of flights into ATO. | flights : flights.sourceairport ( ATO ) , flights.destairport ( ATO ) , flights.flightno , flights.airline , flights.* | airports : airports.airportcode ( ATO ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql and SQL generation:
select count ( * ) from _ where @.@ = 'ATO' | select count(*) FROM flights WHERE DestAirport = 'ATO'
SQL = SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'
natsql:
select count ( * ) from _ where @.@ = 'ATO' | select count(*) FROM flights WHERE DestAirport = 'ATO'

SQL:
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'
self correction:
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'

index is 207
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
How many flights depart from City Aberdeen?
schema_links:
How many flights depart from City Aberdeen? | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.destairport , flights.flightno , flights.sourceairport , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select count ( * ) from _ where _ = 'Aberdeen' | select count ( * ) from airports where city = 'Aberdeen'
SQL = SELECT count(*) FROM airports WHERE City = 'Aberdeen'
natsql:
select count ( * ) from _ where _ = 'Aberdeen' | select count ( * ) from airports where city = 'Aberdeen'

SQL:
SELECT count(*) FROM airports WHERE City = 'Aberdeen'
self correction:
SELECT count(flights.FlightNo) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'

index is 208
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Return the number of flights departing from Aberdeen.
schema_links:
Return the number of flights departing from Aberdeen. | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.flightno , flights.sourceairport , flights.destairport , flights.airline , flights.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql and SQL generation:
select count ( * ) from _ where _ = _ | select count ( * ) from flights where sourceairport = 'Aberdeen'
SQL = SELECT count(*) FROM flights WHERE sourceairport = 'Aberdeen'
natsql:
select count ( * ) from _ where _ = _ | select count ( * ) from flights where sourceairport = 'Aberdeen'

SQL:
SELECT count(*) FROM flights WHERE sourceairport = 'Aberdeen'
self correction:
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen'

index is 209
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
How many flights arriving in Aberdeen city?
schema_links:
How many flights arriving in Aberdeen city? | airports : airports.city ( Aberdeen ) , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev , airports.* | flights : flights.flightno , flights.destairport , flights.sourceairport , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select count ( * ) from _ where _ = _ | select count(*) from flights where flights.destairport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
SQL = SELECT count(*) FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
natsql:
select count ( * ) from _ where _ = _ | select count(*) from flights where flights.destairport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')

SQL:
SELECT count(*) FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
self correction:
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'

index is 210
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Return the number of flights arriving in Aberdeen.
schema_links:
Return the number of flights arriving in Aberdeen. | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.flightno , flights.sourceairport , flights.destairport , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select count ( _ ) from _ where _ = _ | select count ( * ) from flights where destairport = ( select airportcode from airports where city = 'Aberdeen' )
SQL = SELECT count(*) FROM flights WHERE destairport  =  (SELECT airportcode FROM airports WHERE city  =  'Aberdeen')
natsql:
select count ( _ ) from _ where _ = _ | select count ( * ) from flights where destairport = ( select airportcode from airports where city = 'Aberdeen' )

SQL:
SELECT count(*) FROM flights WHERE destairport  =  (SELECT airportcode FROM airports WHERE city  =  'Aberdeen')
self correction:
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'

index is 211
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"
How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?
schema_links:
How many flights depart from City 'Aberdeen' and have destination City 'Ashley'? | airports : airports.city ( Aberdeen , Ashley ) , airports.airportname ( Ashley ) , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.destairport , flights.sourceairport , flights.flightno , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select count ( _ ) from _ where @.@ = @.@ and @.@ = @.@ | select count ( * ) from flights where sourceairport = 'Aberdeen' and destairport = 'Ashley'
SQL = SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley'
natsql:
select count ( _ ) from _ where @.@ = @.@ and @.@ = @.@ | select count ( * ) from flights where sourceairport = 'Aberdeen' and destairport = 'Ashley'

SQL:
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley'
self correction:
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN airports AS dest_airports ON flights.DestAirport = dest_airports.AirportCode WHERE airports.City = 'Aberdeen' AND dest_airports.City = 'Ashley'

index is 212
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"
How many flights fly from Aberdeen to Ashley?
schema_links:
How many flights fly from Aberdeen to Ashley? | airports : airports.city ( Aberdeen , Ashley ) , airports.airportname ( Ashley ) , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.destairport , flights.sourceairport , flights.flightno , flights.airline , flights.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql and SQL generation:
select count ( _ ) from _ where @.@ = 'Aberdeen' and @.@ = 'Ashley' | select count ( flights.flightno ) from flights where flights.sourceairport = 'Aberdeen' and flights.destairport = 'Ashley'
SQL = SELECT count(flightno) FROM flights WHERE sourceairport = 'Aberdeen' AND destairport = 'Ashley'
natsql:
select count ( _ ) from _ where @.@ = 'Aberdeen' and @.@ = 'Ashley' | select count ( flights.flightno ) from flights where flights.sourceairport = 'Aberdeen' and flights.destairport = 'Ashley'

SQL:
SELECT count(flightno) FROM flights WHERE sourceairport = 'Aberdeen' AND destairport = 'Ashley'
self correction:
SELECT count(FlightNo) FROM flights  WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley'

index is 213
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"
How many flights does airline 'JetBlue Airways' have?
schema_links:
How many flights does airline 'JetBlue Airways' have? | airlines : airlines.airline ( JetBlue Airways ) , airlines.abbreviation ( JetBlue ) , airlines.uid , airlines.country , airlines.* | flights : flights.airline , flights.flightno , flights.destairport , flights.sourceairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select count ( _ ) from _ where _ = 'JetBlue Airways' | select count ( flights.* ) from flights where flights.airline = 'JetBlue Airways'
SQL = SELECT count(*) FROM flights WHERE airline = 'JetBlue Airways'
natsql:
select count ( _ ) from _ where _ = 'JetBlue Airways' | select count ( flights.* ) from flights where flights.airline = 'JetBlue Airways'

SQL:
SELECT count(*) FROM flights WHERE airline = 'JetBlue Airways'
self correction:
SELECT count(*) FROM flights WHERE Airline = 'JetBlue Airways'

index is 214
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"
Give the number of Jetblue Airways flights.
schema_links:
Give the number of Jetblue Airways flights. | airlines : airlines.airline ( JetBlue Airways ) , airlines.abbreviation ( JetBlue ) , airlines.uid , airlines.country , airlines.* | flights : flights.flightno , flights.airline , flights.destairport , flights.sourceairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select count ( _ ) from _ where @.@ = 'JetBlue Airways' | select count ( * ) from flights where airline = 'JetBlue Airways'
SQL = SELECT count(*) FROM flights WHERE airline = 'JetBlue Airways'
natsql:
select count ( _ ) from _ where @.@ = 'JetBlue Airways' | select count ( * ) from flights where airline = 'JetBlue Airways'

SQL:
SELECT count(*) FROM flights WHERE airline = 'JetBlue Airways'
self correction:
SELECT count(*) FROM flights WHERE Airline = 'JetBlue Airways'

index is 215
SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"
How many 'United Airlines' flights go to Airport 'ASY'?
schema_links:
How many 'United Airlines' flights go to Airport 'ASY'? | airlines : airlines.airline ( United Airlines ) , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.destairport ( ASY ) , flights.sourceairport ( ASY ) , flights.airline , flights.flightno , flights.* | airports : airports.airportcode ( ASY ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.*
natsql and SQL generation:
select count ( * ) from _ where _ = _ and _ = _ | select count(*) from flights where airline = 'United Airlines' and destairport = 'ASY' or sourceairport = 'ASY'
SQL = SELECT count(*) FROM flights WHERE airline = 'United Airlines' AND (destairport = 'ASY' OR sourceairport = 'ASY')
natsql:
select count ( * ) from _ where _ = _ and _ = _ | select count(*) from flights where airline = 'United Airlines' and destairport = 'ASY' or sourceairport = 'ASY'

SQL:
SELECT count(*) FROM flights WHERE airline = 'United Airlines' AND (destairport = 'ASY' OR sourceairport = 'ASY')
self correction:
SELECT COUNT(*) FROM flights  WHERE Airline = 'United Airlines'  AND (DestAirport = 'ASY' OR SourceAirport = 'ASY')

index is 216
SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"
Count the number of United Airlines flights arriving in ASY Airport.
schema_links:
Count the number of United Airlines flights arriving in ASY Airport. | airlines : airlines.airline ( United Airlines ) , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.destairport ( ASY ) , flights.sourceairport ( ASY ) , flights.airline , flights.flightno , flights.* | airports : airports.airportcode ( ASY ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.*
natsql and SQL generation:
select count ( _ ) from _ where @.@ = @ | select count ( * ) from flights where destairport = 'ASY' and airline = 'United Airlines'
SQL = SELECT count(*) FROM flights WHERE DestAirport = 'ASY' AND Airline = 'United Airlines'
natsql:
select count ( _ ) from _ where @.@ = @ | select count ( * ) from flights where destairport = 'ASY' and airline = 'United Airlines'

SQL:
SELECT count(*) FROM flights WHERE DestAirport = 'ASY' AND Airline = 'United Airlines'
self correction:
SELECT count(*) FROM flights WHERE DestAirport = 'ASY' AND Airline = 'United Airlines'

index is 217
SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"
How many 'United Airlines' flights depart from Airport 'AHD'?
schema_links:
How many 'United Airlines' flights depart from Airport 'AHD'? | airlines : airlines.airline ( United Airlines ) , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | airports : airports.airportcode ( AHD ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | flights : flights.sourceairport ( AHD ) , flights.destairport ( AHD ) , flights.airline , flights.flightno , flights.*
natsql and SQL generation:
select count ( _ ) from _ where @.@ = _ and @.@ = _ | select count ( flights.* ) from flights where flights.sourceairport = 'AHD' and flights.airline = 'United Airlines'
SQL = SELECT count(*) FROM flights WHERE sourceairport  =  'AHD' AND airline  =  'United Airlines'
natsql:
select count ( _ ) from _ where @.@ = _ and @.@ = _ | select count ( flights.* ) from flights where flights.sourceairport = 'AHD' and flights.airline = 'United Airlines'

SQL:
SELECT count(*) FROM flights WHERE sourceairport  =  'AHD' AND airline  =  'United Airlines'
self correction:
SELECT count(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD' AND airlines.Airline = 'United Airlines'

index is 218
SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"
Return the number of United Airlines flights leaving from AHD Airport.
schema_links:
Return the number of United Airlines flights leaving from AHD Airport. | airlines : airlines.airline ( United Airlines ) , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.sourceairport ( AHD ) , flights.destairport ( AHD ) , flights.airline , flights.flightno , flights.* | airports : airports.airportcode ( AHD ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.*
natsql and SQL generation:
select count ( _ ) from _ where _ = _ and _ = _ | select count ( * ) from flights where sourceairport = 'AHD' and airline = 'United Airlines'
SQL = SELECT count(*) FROM flights WHERE sourceairport  =  'AHD' AND airline  =  'United Airlines'
natsql:
select count ( _ ) from _ where _ = _ and _ = _ | select count ( * ) from flights where sourceairport = 'AHD' and airline = 'United Airlines'

SQL:
SELECT count(*) FROM flights WHERE sourceairport  =  'AHD' AND airline  =  'United Airlines'
self correction:
SELECT count(*)  FROM flights  WHERE SourceAirport = 'AHD'  AND Airline = 'United Airlines'

index is 219
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"
How many United Airlines flights go to City 'Aberdeen'?
schema_links:
How many United Airlines flights go to City 'Aberdeen'? | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | airlines : airlines.airline ( United Airlines ) , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.destairport , flights.airline , flights.flightno , flights.sourceairport , flights.*
natsql and SQL generation:
select count ( _ ) from _ where _ = _ and _ = _ | select count(*) from flights where airline = 'United Airlines' and destairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen')
SQL = SELECT count(*) FROM flights WHERE airline = 'United Airlines' AND destairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen')
natsql:
select count ( _ ) from _ where _ = _ and _ = _ | select count(*) from flights where airline = 'United Airlines' and destairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen')

SQL:
SELECT count(*) FROM flights WHERE airline = 'United Airlines' AND destairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen')
self correction:
SELECT count(*)  FROM flights  JOIN airports ON flights.destairport = airports.airportcode  JOIN airlines ON flights.airline = airlines.abbreviation WHERE airlines.airline = 'United Airlines' AND airports.city = 'Aberdeen';

index is 220
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"
Count the number of United Airlines flights that arrive in Aberdeen.
schema_links:
Count the number of United Airlines flights that arrive in Aberdeen. | airlines : airlines.airline ( United Airlines ) , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.sourceairport , flights.destairport , flights.flightno , flights.airline , flights.*
natsql and SQL generation:
select count ( _ ) from _ where _ = _ and _ = _ | select count(*) from flights where airline = 'United Airlines' and destairport = 'Aberdeen'
SQL = SELECT count(*) FROM flights WHERE airline  =  'United Airlines' AND destairport  =  'Aberdeen'
natsql:
select count ( _ ) from _ where _ = _ and _ = _ | select count(*) from flights where airline = 'United Airlines' and destairport = 'Aberdeen'

SQL:
SELECT count(*) FROM flights WHERE airline  =  'United Airlines' AND destairport  =  'Aberdeen'
self correction:
SELECT count(*)  FROM flights  WHERE Airline = 'United Airlines'  AND DestAirport = (SELECT AirportCode FROM airports WHERE AirportName = 'Aberdeen')

index is 221
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
Which city has most number of arriving flights?
schema_links:
Which city has most number of arriving flights? | airports : airports.city , airports.airportname , airports.country , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.sourceairport , flights.destairport , flights.flightno , flights.airline , flights.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select airports.city from airports join flights on airports.airportcode = flights.destairport group by airports.city order by count(flights.destairport) desc limit 1
SQL = SELECT city FROM airports JOIN flights ON airports.airportcode = flights.destairport GROUP BY city ORDER BY count(flights.destairport) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select airports.city from airports join flights on airports.airportcode = flights.destairport group by airports.city order by count(flights.destairport) desc limit 1

SQL:
SELECT city FROM airports JOIN flights ON airports.airportcode = flights.destairport GROUP BY city ORDER BY count(flights.destairport) DESC LIMIT 1
self correction:
SELECT airports.City  FROM airports  JOIN flights ON airports.AirportCode = flights.DestAirport  GROUP BY airports.City  ORDER BY COUNT(flights.DestAirport) DESC  LIMIT 1

index is 222
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
Which city has the most frequent destination airport?
schema_links:
Which city has the most frequent destination airport? | flights : flights.destairport , flights.flightno , flights.airline , flights.sourceairport , flights.* | airports : airports.city , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select airports.city from flights join airports on flights.destairport = airports.airportcode group by airports.city order by count ( flights.destairport ) desc limit 1
SQL = SELECT city FROM flights JOIN airports ON flights.destairport = airports.airportcode GROUP BY city ORDER BY count(destairport) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select airports.city from flights join airports on flights.destairport = airports.airportcode group by airports.city order by count ( flights.destairport ) desc limit 1

SQL:
SELECT city FROM flights JOIN airports ON flights.destairport = airports.airportcode GROUP BY city ORDER BY count(destairport) DESC LIMIT 1
self correction:
SELECT airports.City FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY COUNT(flights.DestAirport) DESC LIMIT 1

index is 223
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
Which city has most number of departing flights?
schema_links:
Which city has most number of departing flights? | airports : airports.city , airports.airportname , airports.country , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.destairport , flights.flightno , flights.sourceairport , flights.airline , flights.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ group by _ order by count ( * ) desc limit _ | select airports.city from airports group by airports.city order by count ( * ) desc limit 1
SQL = SELECT city FROM airports GROUP BY city ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( * ) desc limit _ | select airports.city from airports group by airports.city order by count ( * ) desc limit 1

SQL:
SELECT city FROM airports GROUP BY city ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1

index is 224
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
Which city is the most frequent source airport?
schema_links:
Which city is the most frequent source airport? | airports : airports.city , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.sourceairport , flights.flightno , flights.airline , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select flights.sourceairport from flights group by flights.sourceairport order by count ( flights.sourceairport ) desc limit 1
SQL = SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY count(sourceairport) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select flights.sourceairport from flights group by flights.sourceairport order by count ( flights.sourceairport ) desc limit 1

SQL:
SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY count(sourceairport) DESC LIMIT 1
self correction:
SELECT airports.City AS MostFrequentSourceAirportCity FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY airports.City ORDER BY COUNT(flights.SourceAirport) DESC LIMIT 1

index is 225
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
What is the code of airport that has the highest number of flights?
schema_links:
What is the code of airport that has the highest number of flights? | flights : flights.sourceairport , flights.flightno , flights.destairport , flights.airline , flights.* | airports : airports.airportcode , airports.airportname , airports.country , airports.city , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select airports.airportcode from airports group by airports.airportcode order by count ( flights.destairport ) desc limit 1
SQL = SELECT airportcode FROM airports GROUP BY airportcode ORDER BY count(destairport) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select airports.airportcode from airports group by airports.airportcode order by count ( flights.destairport ) desc limit 1

SQL:
SELECT airportcode FROM airports GROUP BY airportcode ORDER BY count(destairport) DESC LIMIT 1
self correction:
SELECT airports.AirportCode FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.AirportCode ORDER BY COUNT(flights.DestAirport) DESC LIMIT 1

index is 226
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
What is the airport code of the airport with the most flights?
schema_links:
What is the airport code of the airport with the most flights? | flights : flights.sourceairport , flights.destairport , flights.flightno , flights.airline , flights.* | airports : airports.airportcode , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ order by count ( _ ) desc limit _ | select airports.airportcode from airports join flights on airports.airportcode = flights.sourceairport group by airports.airportcode order by count(*) desc limit 1
SQL = SELECT airportcode FROM airports JOIN flights ON airports.airportcode = flights.sourceairport GROUP BY airportcode ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ order by count ( _ ) desc limit _ | select airports.airportcode from airports join flights on airports.airportcode = flights.sourceairport group by airports.airportcode order by count(*) desc limit 1

SQL:
SELECT airportcode FROM airports JOIN flights ON airports.airportcode = flights.sourceairport GROUP BY airportcode ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT airports.AirportCode FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.AirportCode ORDER BY COUNT(*) DESC LIMIT 1

index is 227
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
What is the code of airport that has fewest number of flights?
schema_links:
What is the code of airport that has fewest number of flights? | flights : flights.flightno , flights.sourceairport , flights.destairport , flights.airline , flights.* | airports : airports.airportcode , airports.airportname , airports.country , airports.city , airports.countryabbrev , airports.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ order by count ( _ ) limit _ | select airports.airportcode from airports order by count ( flights.destairport ) limit 1
SQL = SELECT airportcode FROM airports ORDER BY (SELECT COUNT(*) FROM flights WHERE destairport = airportcode) LIMIT 1
natsql:
select _ from _ order by count ( _ ) limit _ | select airports.airportcode from airports order by count ( flights.destairport ) limit 1

SQL:
SELECT airportcode FROM airports ORDER BY (SELECT COUNT(*) FROM flights WHERE destairport = airportcode) LIMIT 1
self correction:
SELECT AirportCode FROM airports GROUP BY AirportCode ORDER BY COUNT(*) ASC LIMIT 1

index is 228
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
Give the code of the airport with the least flights.
schema_links:
Give the code of the airport with the least flights. | flights : flights.sourceairport , flights.destairport , flights.flightno , flights.airline , flights.* | airports : airports.airportcode , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ order by count ( _ ) asc limit _ | select airports.airportcode from flights, airports where flights.destairport = airports.airportcode or flights.sourceairport = airports.airportcode group by airports.airportcode order by count(*) asc limit 1
SQL = SELECT airportcode FROM airports JOIN flights ON flights.destairport = airports.airportcode OR flights.sourceairport = airports.airportcode GROUP BY airportcode ORDER BY count(*) ASC LIMIT 1
natsql:
select _ from _ order by count ( _ ) asc limit _ | select airports.airportcode from flights, airports where flights.destairport = airports.airportcode or flights.sourceairport = airports.airportcode group by airports.airportcode order by count(*) asc limit 1

SQL:
SELECT airportcode FROM airports JOIN flights ON flights.destairport = airports.airportcode OR flights.sourceairport = airports.airportcode GROUP BY airportcode ORDER BY count(*) ASC LIMIT 1
self correction:
SELECT airports.AirportCode FROM airports JOIN flights ON flights.DestAirport = airports.AirportCode OR flights.SourceAirport = airports.AirportCode GROUP BY airports.AirportCode ORDER BY COUNT(*) ASC LIMIT 1

index is 229
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1
Which airline has most number of flights?
schema_links:
Which airline has most number of flights? | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.airline , flights.flightno , flights.destairport , flights.sourceairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select flights.airline from flights group by flights.airline order by count(*) desc limit 1
SQL = SELECT airline FROM flights GROUP BY airline ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select flights.airline from flights group by flights.airline order by count(*) desc limit 1

SQL:
SELECT airline FROM flights GROUP BY airline ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline ORDER BY num_flights DESC LIMIT 1

index is 230
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1
What airline serves the most flights?
schema_links:
What airline serves the most flights? | airlines : airlines.airline , airlines.uid , airlines.abbreviation , airlines.country , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.airportname , airports.country , airports.airportcode , airports.countryabbrev , airports.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline order by count(*) desc limit 1
SQL = SELECT airline FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY airlines.airline ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline order by count(*) desc limit 1

SQL:
SELECT airline FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY airlines.airline ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline ORDER BY COUNT(*) DESC LIMIT 1

index is 231
SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1
Find the abbreviation and country of the airline that has fewest number of flights?
schema_links:
Find the abbreviation and country of the airline that has fewest number of flights? | airlines : airlines.abbreviation , airlines.country , airlines.airline , airlines.uid , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select _ , _ from _ where _ = ( select min ( count ( _ ) ) from _ group by _ ) | select airlines.abbreviation , airlines.country from flights join airlines on flights.airline = airlines.airline group by airlines.abbreviation , airlines.country having count(flights.flightno) = (select min(flight_count) from (select count(flights.flightno) as flight_count from flights group by flights.airline) as temp)  
SQL = SELECT abbreviation , country FROM airlines WHERE airline  =  (SELECT airline FROM flights GROUP BY airline ORDER BY count(flightno) LIMIT 1)
natsql:
select _ , _ from _ where _ = ( select min ( count ( _ ) ) from _ group by _ ) | select airlines.abbreviation , airlines.country from flights join airlines on flights.airline = airlines.airline group by airlines.abbreviation , airlines.country having count(flights.flightno) = (select min(flight_count) from (select count(flights.flightno) as flight_count from flights group by flights.airline) as temp)  

SQL:
SELECT abbreviation , country FROM airlines WHERE airline  =  (SELECT airline FROM flights GROUP BY airline ORDER BY count(flightno) LIMIT 1)
self correction:
SELECT abbreviation, country  FROM airlines  WHERE uid = (SELECT airline               FROM flights               GROUP BY airline               ORDER BY count(flightno)               LIMIT 1)

index is 232
SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1
What is the abbreviation of the airilne has the fewest flights and what country is it in?
schema_links:
What is the abbreviation of the airilne has the fewest flights and what country is it in? | airlines : airlines.abbreviation , airlines.country , airlines.airline , airlines.uid , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.airportcode , airports.airportname , airports.country , airports.countryabbrev , airports.*
natsql and SQL generation:
select _ , _ from _ order by count ( _ ) asc limit _ | select airlines.abbreviation , airlines.country from flights join airlines on flights.airline = airlines.uid group by airlines.abbreviation , airlines.country order by count ( flights.* ) asc limit 1
SQL = SELECT abbreviation ,  country FROM airlines JOIN flights ON flights.airline = airlines.uid GROUP BY abbreviation , country ORDER BY count(*) ASC LIMIT 1
natsql:
select _ , _ from _ order by count ( _ ) asc limit _ | select airlines.abbreviation , airlines.country from flights join airlines on flights.airline = airlines.uid group by airlines.abbreviation , airlines.country order by count ( flights.* ) asc limit 1

SQL:
SELECT abbreviation ,  country FROM airlines JOIN flights ON flights.airline = airlines.uid GROUP BY abbreviation , country ORDER BY count(*) ASC LIMIT 1
self correction:
SELECT abbreviation, country FROM airlines JOIN flights ON flights.airline = airlines.uid GROUP BY abbreviation, country ORDER BY COUNT(*) ASC LIMIT 1

index is 233
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"
What are airlines that have some flight departing from airport 'AHD'?
schema_links:
What are airlines that have some flight departing from airport 'AHD'? | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.sourceairport ( AHD ) , flights.destairport ( AHD ) , flights.airline , flights.flightno , flights.* | airports : airports.airportcode ( AHD ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.*
natsql and SQL generation:
select _ from _ where _ ( _ ) = _ | select distinct airlines.airline from flights join airlines on flights.airline = airlines.uid where flights.sourceairport = 'AHD' or flights.destairport = 'AHD'
SQL = SELECT DISTINCT airline FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE sourceairport  =  'AHD' OR destairport  =  'AHD'
natsql:
select _ from _ where _ ( _ ) = _ | select distinct airlines.airline from flights join airlines on flights.airline = airlines.uid where flights.sourceairport = 'AHD' or flights.destairport = 'AHD'

SQL:
SELECT DISTINCT airline FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE sourceairport  =  'AHD' OR destairport  =  'AHD'
self correction:
SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.SourceAirport = 'AHD' OR flights.DestAirport = 'AHD'

index is 234
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"
Which airlines have a flight with source airport AHD?
schema_links:
Which airlines have a flight with source airport AHD? | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.sourceairport ( AHD ) , flights.airline , flights.destairport ( AHD ) , flights.flightno , flights.* | airports : airports.airportcode ( AHD ) , airports.city , airports.country , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select distinct _ from _ where @.@ = _ | select distinct airlines.airline from airlines where flights.sourceairport = 'AHD'
SQL = SELECT DISTINCT airline FROM airlines WHERE EXISTS (SELECT * FROM flights WHERE flights.sourceairport = 'AHD' AND airlines.uid = flights.airline)
natsql:
select distinct _ from _ where @.@ = _ | select distinct airlines.airline from airlines where flights.sourceairport = 'AHD'

SQL:
SELECT DISTINCT airline FROM airlines WHERE EXISTS (SELECT * FROM flights WHERE flights.sourceairport = 'AHD' AND airlines.uid = flights.airline)
self correction:
SELECT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  WHERE flights.SourceAirport = 'AHD'

index is 235
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"
What are airlines that have flights arriving at airport 'AHD'?
schema_links:
What are airlines that have flights arriving at airport 'AHD'? | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.sourceairport ( AHD ) , flights.destairport ( AHD ) , flights.airline , flights.flightno , flights.* | airports : airports.airportcode ( AHD ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.*
natsql and SQL generation:
select _ from _ where _ = 'AHD' | select distinct airlines.airline from flights, airlines where flights.destairport = 'AHD' and flights.airline = airlines.uid
SQL = SELECT DISTINCT Airline FROM flights INNER JOIN airlines ON flights.Airline = airlines.uid WHERE flights.DestAirport = 'AHD'
natsql:
select _ from _ where _ = 'AHD' | select distinct airlines.airline from flights, airlines where flights.destairport = 'AHD' and flights.airline = airlines.uid

SQL:
SELECT DISTINCT Airline FROM flights INNER JOIN airlines ON flights.Airline = airlines.uid WHERE flights.DestAirport = 'AHD'
self correction:
SELECT DISTINCT airlines.Airline FROM flights INNER JOIN airlines ON flights.Airline = airlines.uid WHERE flights.DestAirport = 'AHD';

index is 236
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"
Which airlines have a flight with destination airport AHD?
schema_links:
Which airlines have a flight with destination airport AHD? | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.destairport ( AHD ) , flights.airline , flights.flightno , flights.sourceairport ( AHD ) , flights.* | airports : airports.airportcode ( AHD ) , airports.city , airports.country , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select _ from _ where _ = 'AHD' | select airlines.airline from flights, airlines where flights.destairport = 'AHD' and flights.airline = airlines.airline
SQL = SELECT airline FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE destairport = 'AHD'
natsql:
select _ from _ where _ = 'AHD' | select airlines.airline from flights, airlines where flights.destairport = 'AHD' and flights.airline = airlines.airline

SQL:
SELECT airline FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE destairport = 'AHD'
self correction:
SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD'

index is 237
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
Find all airlines that have flights from both airports 'APG' and 'CVO'.
schema_links:
Find all airlines that have flights from both airports 'APG' and 'CVO'. | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | airports : airports.airportcode ( APG , CVO ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | flights : flights.sourceairport ( APG , CVO ) , flights.airline , flights.destairport ( APG , CVO ) , flights.flightno , flights.*
natsql and SQL generation:
select distinct _ from _ where _ and _ | select distinct airlines.airline from airlines where exists ( select * from flights where flights.airline = airlines.airline and flights.sourceairport = 'APG' ) and exists ( select * from flights where flights.airline = airlines.airline and flights.sourceairport = 'CVO' )
SQL = SELECT DISTINCT airline FROM airlines WHERE airline IN (SELECT airline FROM flights WHERE sourceairport = 'APG') AND airline IN (SELECT airline FROM flights WHERE sourceairport = 'CVO')
natsql:
select distinct _ from _ where _ and _ | select distinct airlines.airline from airlines where exists ( select * from flights where flights.airline = airlines.airline and flights.sourceairport = 'APG' ) and exists ( select * from flights where flights.airline = airlines.airline and flights.sourceairport = 'CVO' )

SQL:
SELECT DISTINCT airline FROM airlines WHERE airline IN (SELECT airline FROM flights WHERE sourceairport = 'APG') AND airline IN (SELECT airline FROM flights WHERE sourceairport = 'CVO')
self correction:
SELECT airline FROM airlines WHERE airline IN (   SELECT airline   FROM flights   WHERE sourceairport = 'APG' AND airline IN (     SELECT airline     FROM flights     WHERE sourceairport = 'CVO'   ) )

index is 238
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
Which airlines have departing flights from both APG and CVO airports?
schema_links:
Which airlines have departing flights from both APG and CVO airports? | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.sourceairport ( APG , CVO ) , flights.airline , flights.destairport ( APG , CVO ) , flights.flightno , flights.* | airports : airports.airportcode ( APG , CVO ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.*
natsql and SQL generation:
select _ from _ where _ in ( _ , _ ) group by _ having count ( distinct _ ) = _ | select airlines.airline from airlines where airlines.uid in ( select flights.airline from flights where flights.sourceairport in ( 'APG' , 'CVO' ) and flights.destairport in ( 'APG' , 'CVO' ) ) group by airlines.airline having count ( distinct flights.sourceairport , flights.destairport ) = 2
SQL = SELECT airline FROM airlines WHERE uid IN (SELECT airline FROM flights WHERE sourceairport IN ('APG', 'CVO') AND destairport IN ('APG', 'CVO')) GROUP BY airline HAVING COUNT(DISTINCT sourceairport, destairport) = 2
natsql:
select _ from _ where _ in ( _ , _ ) group by _ having count ( distinct _ ) = _ | select airlines.airline from airlines where airlines.uid in ( select flights.airline from flights where flights.sourceairport in ( 'APG' , 'CVO' ) and flights.destairport in ( 'APG' , 'CVO' ) ) group by airlines.airline having count ( distinct flights.sourceairport , flights.destairport ) = 2

SQL:
SELECT airline FROM airlines WHERE uid IN (SELECT airline FROM flights WHERE sourceairport IN ('APG', 'CVO') AND destairport IN ('APG', 'CVO')) GROUP BY airline HAVING COUNT(DISTINCT sourceairport, destairport) = 2
self correction:
SELECT airline  FROM airlines  WHERE uid IN (     SELECT airline      FROM flights      WHERE sourceairport IN ('APG', 'CVO') AND destairport IN ('APG', 'CVO') )  GROUP BY airline  HAVING COUNT(DISTINCT sourceairport) = 2

index is 239
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"
Find all airlines that have flights from airport 'CVO' but not from 'APG'.
schema_links:
Find all airlines that have flights from airport 'CVO' but not from 'APG'. | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.sourceairport ( APG , CVO ) , flights.airline , flights.destairport ( APG , CVO ) , flights.flightno , flights.* | airports : airports.airportcode ( APG , CVO ) , airports.airportname , airports.country , airports.city , airports.countryabbrev , airports.*
natsql and SQL generation:
select _ from _ where _ and _ not in ( select _ from _ where _ ) | select airlines.airline from flights join airlines on flights.airline = airlines.uid where flights.sourceairport = 'CVO' and airlines.airline not in (select airlines.airline from flights join airlines on flights.airline = airlines.uid where flights.sourceairport = 'APG') group by airlines.airline
SQL = SELECT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE flights.sourceairport = 'CVO' AND airlines.airline NOT IN (SELECT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE flights.sourceairport = 'APG') GROUP BY airlines.airline
natsql:
select _ from _ where _ and _ not in ( select _ from _ where _ ) | select airlines.airline from flights join airlines on flights.airline = airlines.uid where flights.sourceairport = 'CVO' and airlines.airline not in (select airlines.airline from flights join airlines on flights.airline = airlines.uid where flights.sourceairport = 'APG') group by airlines.airline

SQL:
SELECT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE flights.sourceairport = 'CVO' AND airlines.airline NOT IN (SELECT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE flights.sourceairport = 'APG') GROUP BY airlines.airline
self correction:
SELECT airlines.Airline  FROM flights  JOIN airlines ON flights.Airline = airlines.uid  WHERE flights.SourceAirport = 'CVO'  AND airlines.Airline NOT IN (     SELECT airlines.Airline      FROM flights      JOIN airlines ON flights.Airline = airlines.uid      WHERE flights.SourceAirport = 'APG' )  GROUP BY airlines.Airline

index is 240
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"
Which airlines have departures from CVO but not from APG airports?
schema_links:
Which airlines have departures from CVO but not from APG airports? | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | airports : airports.airportcode ( APG , CVO ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | flights : flights.sourceairport ( APG , CVO ) , flights.destairport ( APG , CVO ) , flights.airline , flights.flightno , flights.*
natsql and SQL generation:
select _ from _ where _ and _ and not exists ( select * from _ where _ ) | select airlines.airline from airlines,flights,airports where flights.sourceairport = 'CVO' and flights.airline = airlines.airline and flights.destairport != 'APG' and flights.destairport = airports.airportcode
SQL = SELECT airline FROM airlines,flights,airports WHERE flights.sourceairport = 'CVO' AND flights.airline = airlines.airline AND flights.destairport != 'APG' AND flights.destairport = airports.airportcode
natsql:
select _ from _ where _ and _ and not exists ( select * from _ where _ ) | select airlines.airline from airlines,flights,airports where flights.sourceairport = 'CVO' and flights.airline = airlines.airline and flights.destairport != 'APG' and flights.destairport = airports.airportcode

SQL:
SELECT airline FROM airlines,flights,airports WHERE flights.sourceairport = 'CVO' AND flights.airline = airlines.airline AND flights.destairport != 'APG' AND flights.destairport = airports.airportcode
self correction:
SELECT airlines.Airline  FROM airlines  JOIN flights ON flights.Airline = airlines.Airline  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE flights.SourceAirport = 'CVO'  AND airlines.Airline NOT IN (     SELECT flights.Airline      FROM flights      JOIN airports ON flights.DestAirport = airports.AirportCode      WHERE airports.AirportName = 'APG' )

index is 241
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10
Find all airlines that have at least 10 flights.
schema_links:
Find all airlines that have at least 10 flights. | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.airline , airlines.uid , airlines.abbreviation , airlines.country , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select distinct _ from _ where count ( _ ) >= _ group by _ | select distinct airlines.airline from flights join airlines on flights.airline = airlines.uid group by airlines.airline having count(flights.airline) >= 10
SQL = SELECT DISTINCT airline FROM flights INNER JOIN airlines ON flights.airline = airlines.uid GROUP BY airline HAVING count(*) >= 10
natsql:
select distinct _ from _ where count ( _ ) >= _ group by _ | select distinct airlines.airline from flights join airlines on flights.airline = airlines.uid group by airlines.airline having count(flights.airline) >= 10

SQL:
SELECT DISTINCT airline FROM flights INNER JOIN airlines ON flights.airline = airlines.uid GROUP BY airline HAVING count(*) >= 10
self correction:
SELECT airlines.Airline FROM flights INNER JOIN airlines ON flights.Airline = airlines.uid GROUP BY airlines.Airline HAVING COUNT(*) >= 10

index is 242
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10
Which airlines have at least 10 flights?
schema_links:
Which airlines have at least 10 flights? | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.airline , airlines.uid , airlines.abbreviation , airlines.country , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select _ from _ group by _ having count ( _ ) >= _ | select airlines.airline from flights inner join airlines on flights.airline = airlines.uid group by airlines.airline having count ( flights.flightno ) >= 10
SQL = SELECT airline FROM flights INNER JOIN airlines ON flights.airline = airlines.uid GROUP BY airlines.airline HAVING count(flightno) >= 10
natsql:
select _ from _ group by _ having count ( _ ) >= _ | select airlines.airline from flights inner join airlines on flights.airline = airlines.uid group by airlines.airline having count ( flights.flightno ) >= 10

SQL:
SELECT airline FROM flights INNER JOIN airlines ON flights.airline = airlines.uid GROUP BY airlines.airline HAVING count(flightno) >= 10
self correction:
SELECT airlines.Airline  FROM flights  INNER JOIN airlines ON flights.Airline = airlines.uid  GROUP BY airlines.Airline  HAVING COUNT(flights.FlightNo) >= 10

index is 243
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200
Find all airlines that have fewer than 200 flights.
schema_links:
Find all airlines that have fewer than 200 flights. | flights : flights.airline , flights.flightno , flights.destairport , flights.sourceairport , flights.* | airlines : airlines.airline , airlines.uid , airlines.abbreviation , airlines.country , airlines.* | airports : airports.city , airports.airportcode , airports.country , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select _ from _ where count ( _ ) < _ group by _ | select airlines.airline from airlines where count ( flights.* ) < 200 group by airlines.airline
SQL = SELECT airline FROM airlines GROUP BY airline HAVING count(*)  <  200
natsql:
select _ from _ where count ( _ ) < _ group by _ | select airlines.airline from airlines where count ( flights.* ) < 200 group by airlines.airline

SQL:
SELECT airline FROM airlines GROUP BY airline HAVING count(*)  <  200
self correction:
SELECT Airline FROM airlines GROUP BY Airline HAVING COUNT(*) < 200

index is 244
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200
Which airlines have less than 200 flights?
schema_links:
Which airlines have less than 200 flights? | airlines : airlines.airline , airlines.uid , airlines.abbreviation , airlines.country , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select _ from _ where count ( _ ) < _ group by _ | select airlines.airline from airlines where count ( flights.flightno ) < 200 group by airlines.airline
SQL = SELECT airline FROM airlines GROUP BY airline HAVING count(*)  <  200
natsql:
select _ from _ where count ( _ ) < _ group by _ | select airlines.airline from airlines where count ( flights.flightno ) < 200 group by airlines.airline

SQL:
SELECT airline FROM airlines GROUP BY airline HAVING count(*)  <  200
self correction:
SELECT airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  GROUP BY airline  HAVING count(*) < 200

index is 245
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"
What are flight numbers of Airline "United Airlines"?
schema_links:
What are flight numbers of Airline "United Airlines"? | airlines : airlines.airline ( United Airlines ) , airlines.country , airlines.uid , airlines.abbreviation , airlines.* | flights : flights.flightno , flights.airline , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select _ from _ where _ = _ | select flights.flightno from flights where flights.airline = 'United Airlines'
SQL = SELECT flightno FROM flights WHERE airline = 'United Airlines'
natsql:
select _ from _ where _ = _ | select flights.flightno from flights where flights.airline = 'United Airlines'

SQL:
SELECT flightno FROM flights WHERE airline = 'United Airlines'
self correction:
SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = 'United Airlines'

index is 246
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"
Which flight numbers correspond to United Airlines flights?
schema_links:
Which flight numbers correspond to United Airlines flights? | airlines : airlines.airline ( United Airlines ) , airlines.country , airlines.uid , airlines.abbreviation , airlines.* | flights : flights.flightno , flights.airline , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*
natsql and SQL generation:
select _ from _ where _ = _ | select flights.flightno from flights where flights.airline = 'United Airlines'
SQL = SELECT flightno FROM flights WHERE airline = 'United Airlines'
natsql:
select _ from _ where _ = _ | select flights.flightno from flights where flights.airline = 'United Airlines'

SQL:
SELECT flightno FROM flights WHERE airline = 'United Airlines'
self correction:
SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = 'United Airlines'

index is 247
SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"
What are flight numbers of flights departing from Airport "APG"?
schema_links:
What are flight numbers of flights departing from Airport "APG"? | flights : flights.flightno , flights.sourceairport ( APG ) , flights.destairport ( APG ) , flights.airline , flights.* | airports : airports.airportcode ( APG ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ where @.@ = _ | select flights.flightno from flights where flights.sourceairport = "APG"
SQL = SELECT flightno FROM flights WHERE sourceairport = "APG"
natsql:
select _ from _ where @.@ = _ | select flights.flightno from flights where flights.sourceairport = "APG"

SQL:
SELECT flightno FROM flights WHERE sourceairport = "APG"
self correction:
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = "APG"

index is 248
SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"
Give the flight numbers of flights leaving from APG.
schema_links:
Give the flight numbers of flights leaving from APG. | flights : flights.flightno , flights.sourceairport ( APG ) , flights.destairport ( APG ) , flights.airline , flights.* | airports : airports.airportcode ( APG ) , airports.city , airports.country , airports.airportname , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ where _ = _ | select flights.flightno from flights where flights.sourceairport = 'APG'
SQL = SELECT flightno FROM flights WHERE sourceairport = 'APG'
natsql:
select _ from _ where _ = _ | select flights.flightno from flights where flights.sourceairport = 'APG'

SQL:
SELECT flightno FROM flights WHERE sourceairport = 'APG'
self correction:
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'APG'

index is 249
SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"
What are flight numbers of flights arriving at Airport "APG"?
schema_links:
What are flight numbers of flights arriving at Airport "APG"? | flights : flights.flightno , flights.destairport ( APG ) , flights.sourceairport ( APG ) , flights.airline , flights.* | airports : airports.airportcode ( APG ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ where @.@ = "APG" | select flights.flightno from flights where flights.destairport = "APG"
SQL = SELECT flightno FROM flights WHERE destairport = "APG"
natsql:
select _ from _ where @.@ = "APG" | select flights.flightno from flights where flights.destairport = "APG"

SQL:
SELECT flightno FROM flights WHERE destairport = "APG"
self correction:
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = "APG"

index is 250
SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"
Give the flight numbers of flights landing at APG.
schema_links:
Give the flight numbers of flights landing at APG. | flights : flights.flightno , flights.sourceairport ( APG ) , flights.destairport ( APG ) , flights.airline , flights.* | airports : airports.airportcode ( APG ) , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ where _ | select flights.flightno from flights where flights.destairport = 'APG'
SQL = SELECT flightno FROM flights WHERE destairport = 'APG'
natsql:
select _ from _ where _ | select flights.flightno from flights where flights.destairport = 'APG'

SQL:
SELECT flightno FROM flights WHERE destairport = 'APG'
self correction:
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG'

index is 251
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
What are flight numbers of flights departing from City "Aberdeen "?
schema_links:
What are flight numbers of flights departing from City "Aberdeen "? | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.flightno , flights.airline , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ where @.@ = _ | select flights.flightno from flights where flights.sourceairport = (select airports.airportcode from airports where airports.city = "Aberdeen")
SQL = SELECT flightno FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE city = "Aberdeen")
natsql:
select _ from _ where @.@ = _ | select flights.flightno from flights where flights.sourceairport = (select airports.airportcode from airports where airports.city = "Aberdeen")

SQL:
SELECT flightno FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE city = "Aberdeen")
self correction:
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = "Aberdeen"

index is 252
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Give the flight numbers of flights leaving from Aberdeen.
schema_links:
Give the flight numbers of flights leaving from Aberdeen. | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.flightno , flights.sourceairport , flights.destairport , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ where @.@ = @ | select flights.flightno from airports, flights where airports.city = 'Aberdeen' and flights.sourceairport = airports.airportcode
SQL = SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'
natsql:
select _ from _ where @.@ = @ | select flights.flightno from airports, flights where airports.city = 'Aberdeen' and flights.sourceairport = airports.airportcode

SQL:
SELECT flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen'
self correction:
SELECT flights.FlightNo  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen'

index is 253
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
What are flight numbers of flights arriving at City "Aberdeen"?
schema_links:
What are flight numbers of flights arriving at City "Aberdeen"? | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.flightno , flights.destairport , flights.airline , flights.sourceairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ where @.@ = _ | select flights.flightno from flights where flights.destairport = (select airports.airportcode from airports where airports.city = "Aberdeen")
SQL = SELECT flightno FROM flights WHERE destairport  =  (SELECT airportcode FROM airports WHERE city  =  "Aberdeen")
natsql:
select _ from _ where @.@ = _ | select flights.flightno from flights where flights.destairport = (select airports.airportcode from airports where airports.city = "Aberdeen")

SQL:
SELECT flightno FROM flights WHERE destairport  =  (SELECT airportcode FROM airports WHERE city  =  "Aberdeen")
self correction:
SELECT flights.FlightNo  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.City = "Aberdeen"

index is 254
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Give the flight numbers of flights arriving in Aberdeen.
schema_links:
Give the flight numbers of flights arriving in Aberdeen. | airports : airports.city ( Aberdeen ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.flightno , flights.sourceairport , flights.destairport , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ where @.@ = @.@ | select flights.flightno from flights where flights.destairport = (select airportcode from airports where city = 'Aberdeen')
SQL = SELECT flightno FROM flights WHERE destairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen')
natsql:
select _ from _ where @.@ = @.@ | select flights.flightno from flights where flights.destairport = (select airportcode from airports where city = 'Aberdeen')

SQL:
SELECT flightno FROM flights WHERE destairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen')
self correction:
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';

index is 255
SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"
Find the number of flights landing in the city of Aberdeen or Abilene.
schema_links:
Find the number of flights landing in the city of Aberdeen or Abilene. | airports : airports.city ( Aberdeen , Abilene ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.destairport , flights.flightno , flights.sourceairport , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select count ( * ) from flights where flights.destairport in ( select airports.airportcode from airports where airports.city = 'Aberdeen' or airports.city = 'Abilene' )
SQL = SELECT count(*) FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen' OR city = 'Abilene')
natsql:
select count ( * ) from flights where flights.destairport in ( select airports.airportcode from airports where airports.city = 'Aberdeen' or airports.city = 'Abilene' )

SQL:
SELECT count(*) FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen' OR city = 'Abilene')
self correction:
SELECT COUNT(*) FROM flights WHERE DestAirport IN (   SELECT AirportCode   FROM airports   WHERE City = 'Aberdeen' OR City = 'Abilene' )

index is 256
SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"
How many flights land in Aberdeen or Abilene?
schema_links:
How many flights land in Aberdeen or Abilene? | airports : airports.city ( Aberdeen , Abilene ) , airports.airportname , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.destairport , flights.flightno , flights.airline , flights.sourceairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select count ( _ ) from _ where @.@ = 'Aberdeen' or @.@ = 'Abilene' | select count ( flights.* ) from flights where flights.destairport = 'Aberdeen' or flights.destairport = 'Abilene'
SQL = SELECT count(*) FROM flights WHERE destairport = 'Aberdeen' OR destairport = 'Abilene'
natsql:
select count ( _ ) from _ where @.@ = 'Aberdeen' or @.@ = 'Abilene' | select count ( flights.* ) from flights where flights.destairport = 'Aberdeen' or flights.destairport = 'Abilene'

SQL:
SELECT count(*) FROM flights WHERE destairport = 'Aberdeen' OR destairport = 'Abilene'
self correction:
SELECT count(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE AirportName = 'Aberdeen' OR AirportName = 'Abilene')

index is 257
SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
Find the name of airports which do not have any flight in and out.
schema_links:
Find the name of airports which do not have any flight in and out. | airports : airports.airportname , airports.airportcode , airports.country , airports.city , airports.countryabbrev , airports.* | flights : flights.sourceairport , flights.destairport , flights.flightno , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ ) | select airports.airportname from airports where airports.airportcode not in ( select flights.sourceairport from flights union select flights.destairport from flights )
SQL = SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)
natsql:
select _ from _ where _ not in ( select _ from _ ) | select airports.airportname from airports where airports.airportcode not in ( select flights.sourceairport from flights union select flights.destairport from flights )

SQL:
SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights)
self correction:
SELECT airportname  FROM airports  WHERE airportcode NOT IN (   SELECT SourceAirport    FROM flights    UNION    SELECT DestAirport    FROM flights )

index is 258
SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
Which airports do not have departing or arriving flights?
schema_links:
Which airports do not have departing or arriving flights? | airports : airports.airportname , airports.country , airports.airportcode , airports.city , airports.countryabbrev , airports.* | flights : flights.destairport , flights.sourceairport , flights.flightno , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ union select _ from _ ) | select airports.airportname from airports where airports.airportcode not in ( select flights.destairport from flights union select flights.sourceairport from flights )
SQL = SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT destairport FROM flights UNION SELECT sourceairport FROM flights)
natsql:
select _ from _ where _ not in ( select _ from _ union select _ from _ ) | select airports.airportname from airports where airports.airportcode not in ( select flights.destairport from flights union select flights.sourceairport from flights )

SQL:
SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT destairport FROM flights UNION SELECT sourceairport FROM flights)
self correction:
SELECT airports.AirportName  FROM airports  LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport WHERE flights.SourceAirport IS NULL AND flights.DestAirport IS NULL

index is 259
SELECT count(*) FROM employee
How many employees are there?
schema_links:
How many employees are there? | employee : employee.employee_id , employee.name , employee.age , employee.city , employee.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( * ) from employee
SQL = SELECT count(*) FROM employee
natsql:
select count ( _ ) from _ | select count ( * ) from employee

SQL:
SELECT count(*) FROM employee
self correction:
SELECT count(*) FROM employee

index is 260
SELECT count(*) FROM employee
Count the number of employees
schema_links:
Count the number of employees | employee : employee.employee_id , employee.name , employee.age , employee.city , employee.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( employee.employee_id ) from employee
SQL = SELECT COUNT(*) FROM employee
natsql:
select count ( _ ) from _ | select count ( employee.employee_id ) from employee

SQL:
SELECT COUNT(*) FROM employee
self correction:
SELECT COUNT(*) FROM employee

index is 261
SELECT name FROM employee ORDER BY age
Sort employee names by their age in ascending order.
schema_links:
Sort employee names by their age in ascending order. | employee : employee.name , employee.age , employee.employee_id , employee.city , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select _ from _ order by _ asc | select employee.name from employee order by employee.age asc
SQL = SELECT name FROM employee ORDER BY age ASC
natsql:
select _ from _ order by _ asc | select employee.name from employee order by employee.age asc

SQL:
SELECT name FROM employee ORDER BY age ASC
self correction:
SELECT employee.Name FROM employee ORDER BY employee.Age ASC

index is 262
SELECT name FROM employee ORDER BY age
List the names of employees and sort in ascending order of age.
schema_links:
List the names of employees and sort in ascending order of age. | employee : employee.name , employee.age , employee.employee_id , employee.city , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select _ from _ order by _ asc | select employee.name from employee order by employee.age asc
SQL = SELECT name FROM employee ORDER BY age ASC
natsql:
select _ from _ order by _ asc | select employee.name from employee order by employee.age asc

SQL:
SELECT name FROM employee ORDER BY age ASC
self correction:
SELECT employee.Name FROM employee ORDER BY employee.Age ASC

index is 263
SELECT count(*) ,  city FROM employee GROUP BY city
What is the number of employees from each city?
schema_links:
What is the number of employees from each city? | employee : employee.city , employee.employee_id , employee.name , employee.age , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select count ( _ ) , _ from _ group by _ | select count ( employee.employee_id ) , employee.city from employee group by employee.city
SQL = SELECT count(employee_id), city FROM employee GROUP BY city
natsql:
select count ( _ ) , _ from _ group by _ | select count ( employee.employee_id ) , employee.city from employee group by employee.city

SQL:
SELECT count(employee_id), city FROM employee GROUP BY city
self correction:
SELECT count(Employee_ID) AS number_of_employees, City FROM employee GROUP BY City

index is 264
SELECT count(*) ,  city FROM employee GROUP BY city
Count the number of employees for each city.
schema_links:
Count the number of employees for each city. | employee : employee.city , employee.employee_id , employee.name , employee.age , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select _ , count ( * ) from _ group by _ | select employee.city , count ( * ) from employee group by employee.city
SQL = SELECT city ,  COUNT(*) FROM employee GROUP BY city
natsql:
select _ , count ( * ) from _ group by _ | select employee.city , count ( * ) from employee group by employee.city

SQL:
SELECT city ,  COUNT(*) FROM employee GROUP BY city
self correction:
SELECT city, COUNT(*) AS employee_count FROM employee GROUP BY city

index is 265
SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1
Which cities do more than one employee under age 30 come from?
schema_links:
Which cities do more than one employee under age 30 come from? | employee : employee.age , employee.city , employee.employee_id , employee.name , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*
natsql and SQL generation:
select _ from _ where count ( _ ) > _ and @.@ < _ group by _ | select employee.city from employee where count ( employee.* ) > 1 and employee.age < 30 group by employee.city
SQL = SELECT city FROM employee GROUP BY city HAVING count(*)  >  1 AND age < 30
natsql:
select _ from _ where count ( _ ) > _ and @.@ < _ group by _ | select employee.city from employee where count ( employee.* ) > 1 and employee.age < 30 group by employee.city

SQL:
SELECT city FROM employee GROUP BY city HAVING count(*)  >  1 AND age < 30
self correction:
SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1

index is 266
SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1
Find the cities that have more than one employee under age 30.
schema_links:
Find the cities that have more than one employee under age 30. | employee : employee.age , employee.city , employee.employee_id , employee.name , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select distinct _ from _ where count ( distinct _ ) > _ and _ > _ | select distinct employee.city from employee where count ( distinct employee.employee_id ) > 1 and employee.age < 30
SQL = SELECT DISTINCT city FROM employee GROUP BY city HAVING count(DISTINCT employee_id) > 1 AND age < 30
natsql:
select distinct _ from _ where count ( distinct _ ) > _ and _ > _ | select distinct employee.city from employee where count ( distinct employee.employee_id ) > 1 and employee.age < 30

SQL:
SELECT DISTINCT city FROM employee GROUP BY city HAVING count(DISTINCT employee_id) > 1 AND age < 30
self correction:
SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(DISTINCT employee_id) > 1

index is 267
SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION
Find the number of shops in each location.
schema_links:
Find the number of shops in each location. | shop : shop.location , shop.name , shop.district , shop.shop_id , shop.number_products , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*
natsql and SQL generation:
select count ( _ ) , _ from _ group by _ | select count ( shop.shop_id ) , shop.location from shop group by shop.location
SQL = SELECT count(shop_id), location FROM shop GROUP BY location
natsql:
select count ( _ ) , _ from _ group by _ | select count ( shop.shop_id ) , shop.location from shop group by shop.location

SQL:
SELECT count(shop_id), location FROM shop GROUP BY location
self correction:
SELECT COUNT(Shop_ID) AS shop_count, Location FROM shop GROUP BY Location

index is 268
SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION
How many shops are there in each location?
schema_links:
How many shops are there in each location? | shop : shop.location , shop.shop_id , shop.name , shop.district , shop.number_products , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*
natsql and SQL generation:
select count ( _ ) , _ from _ group by _ | select count ( distinct shop.shop_id ) , shop.location from shop group by shop.location
SQL = SELECT COUNT(DISTINCT shop_id) ,  location FROM shop GROUP BY location
natsql:
select count ( _ ) , _ from _ group by _ | select count ( distinct shop.shop_id ) , shop.location from shop group by shop.location

SQL:
SELECT COUNT(DISTINCT shop_id) ,  location FROM shop GROUP BY location
self correction:
SELECT COUNT(DISTINCT Shop_ID) AS Shop_Count, Location FROM shop GROUP BY Location

index is 269
SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1
Find the manager name and district of the shop whose number of products is the largest.
schema_links:
Find the manager name and district of the shop whose number of products is the largest. | shop : shop.manager_name , shop.number_products , shop.district , shop.name , shop.shop_id , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select _ from _ where @.@ = max ( _ ) | select shop.manager_name , shop.district from shop where @.@ = max ( shop.number_products )
SQL = SELECT manager_name ,  district FROM shop WHERE number_products  =  (SELECT max(number_products) FROM shop)
natsql:
select _ from _ where @.@ = max ( _ ) | select shop.manager_name , shop.district from shop where @.@ = max ( shop.number_products )

SQL:
SELECT manager_name ,  district FROM shop WHERE number_products  =  (SELECT max(number_products) FROM shop)
self correction:
SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop)

index is 270
SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1
What are the manager name and district of the shop that sells the largest number of products?
schema_links:
What are the manager name and district of the shop that sells the largest number of products? | shop : shop.number_products , shop.manager_name , shop.district , shop.name , shop.shop_id , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select _ , _ from _ where @.@ = max ( _ ) | select shop.manager_name , shop.district from shop where shop.number_products = max ( shop.number_products )
SQL = SELECT manager_name ,  district FROM shop WHERE number_products  =  (SELECT max(number_products) FROM shop)
natsql:
select _ , _ from _ where @.@ = max ( _ ) | select shop.manager_name , shop.district from shop where shop.number_products = max ( shop.number_products )

SQL:
SELECT manager_name ,  district FROM shop WHERE number_products  =  (SELECT max(number_products) FROM shop)
self correction:
SELECT manager_name, district FROM shop WHERE number_products = (   SELECT MAX(number_products)   FROM shop )

index is 271
SELECT min(Number_products) ,  max(Number_products) FROM shop
find the minimum and maximum number of products of all stores.
schema_links:
find the minimum and maximum number of products of all stores. | shop : shop.number_products , shop.shop_id , shop.name , shop.district , shop.location , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select min ( _ ) , max ( _ ) from _ | select min ( shop.number_products ) , max ( shop.number_products ) from shop
SQL = SELECT MIN(number_products) ,  MAX(number_products) FROM shop
natsql:
select min ( _ ) , max ( _ ) from _ | select min ( shop.number_products ) , max ( shop.number_products ) from shop

SQL:
SELECT MIN(number_products) ,  MAX(number_products) FROM shop
self correction:
SELECT MIN(Number_products), MAX(Number_products) FROM shop

index is 272
SELECT min(Number_products) ,  max(Number_products) FROM shop
What are the minimum and maximum number of products across all the shops?
schema_links:
What are the minimum and maximum number of products across all the shops? | shop : shop.number_products , shop.shop_id , shop.name , shop.location , shop.district , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*
natsql and SQL generation:
select min ( _ ) , max ( _ ) from _ | select min ( shop.number_products ) , max ( shop.number_products ) from shop
SQL = SELECT min(number_products) , max(number_products) FROM shop
natsql:
select min ( _ ) , max ( _ ) from _ | select min ( shop.number_products ) , max ( shop.number_products ) from shop

SQL:
SELECT min(number_products) , max(number_products) FROM shop
self correction:
SELECT MIN(Number_products), MAX(Number_products) FROM shop

index is 273
SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC
Return the name, location and district of all shops in descending order of number of products.
schema_links:
Return the name, location and district of all shops in descending order of number of products. | shop : shop.number_products , shop.name , shop.location , shop.district , shop.shop_id , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select _ , _ , _ from _ order by _ desc | select shop.name , shop.location , shop.district from shop order by shop.number_products desc
SQL = SELECT name ,  location ,  district FROM shop ORDER BY number_products DESC
natsql:
select _ , _ , _ from _ order by _ desc | select shop.name , shop.location , shop.district from shop order by shop.number_products desc

SQL:
SELECT name ,  location ,  district FROM shop ORDER BY number_products DESC
self correction:
SELECT name, location, district FROM shop ORDER BY number_products DESC

index is 274
SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC
Sort all the shops by number products in descending order, and return the name, location and district of each shop.
schema_links:
Sort all the shops by number products in descending order, and return the name, location and district of each shop. | shop : shop.number_products , shop.name , shop.location , shop.district , shop.shop_id , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select _ , _ , _ from _ order by _ desc | select shop.name , shop.location , shop.district from shop order by shop.number_products desc
SQL = SELECT name ,  location ,  district FROM shop ORDER BY number_products DESC
natsql:
select _ , _ , _ from _ order by _ desc | select shop.name , shop.location , shop.district from shop order by shop.number_products desc

SQL:
SELECT name ,  location ,  district FROM shop ORDER BY number_products DESC
self correction:
SELECT name, location, district, number_products FROM shop ORDER BY number_products DESC

index is 275
SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
Find the names of stores whose number products is more than the average number of products.
schema_links:
Find the names of stores whose number products is more than the average number of products. | shop : shop.number_products , shop.name , shop.shop_id , shop.location , shop.manager_name , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select _ from _ where @.@ > avg ( _ ) | select shop.name from shop where @.@ > avg ( shop.number_products )
SQL = SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
natsql:
select _ from _ where @.@ > avg ( _ ) | select shop.name from shop where @.@ > avg ( shop.number_products )

SQL:
SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
self correction:
SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)

index is 276
SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
Which shops' number products is above the average? Give me the shop names.
schema_links:
Which shops' number products is above the average? Give me the shop names. | shop : shop.number_products , shop.name , shop.shop_id , shop.location , shop.district , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*
natsql and SQL generation:
select _ from _ where @.@ > avg ( _ ) | select shop.name from shop where @.@ > avg ( shop.number_products )
SQL = SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
natsql:
select _ from _ where @.@ > avg ( _ ) | select shop.name from shop where @.@ > avg ( shop.number_products )

SQL:
SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
self correction:
SELECT name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)

index is 277
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1
find the name of employee who was awarded the most times in the evaluation.
schema_links:
find the name of employee who was awarded the most times in the evaluation. | employee : employee.name , employee.employee_id , employee.age , employee.city , employee.* | evaluation : evaluation.employee_id , evaluation.year_awarded , evaluation.bonus , evaluation.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select employee.name from employee group by employee.employee_id order by count ( evaluation.employee_id ) desc limit 1
SQL = SELECT name FROM employee GROUP BY employee_id ORDER BY count(employee_id) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select employee.name from employee group by employee.employee_id order by count ( evaluation.employee_id ) desc limit 1

SQL:
SELECT name FROM employee GROUP BY employee_id ORDER BY count(employee_id) DESC LIMIT 1
self correction:
SELECT employee.Name FROM evaluation JOIN employee ON evaluation.Employee_ID = employee.Employee_ID GROUP BY evaluation.Employee_ID ORDER BY COUNT(evaluation.Employee_ID) DESC LIMIT 1

index is 278
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1
Which employee received the most awards in evaluations? Give me the employee name.
schema_links:
Which employee received the most awards in evaluations? Give me the employee name. | employee : employee.name , employee.employee_id , employee.age , employee.city , employee.* | evaluation : evaluation.year_awarded , evaluation.employee_id , evaluation.bonus , evaluation.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*
natsql and SQL generation:
select _ from _ order by count ( _ ) desc limit _ | select employee.name from evaluation join employee on evaluation.employee_id = employee.employee_id group by employee.name order by count(*) desc limit 1
SQL = SELECT T2.name FROM evaluation AS T1 JOIN employee AS T2 ON T1.employee_id = T2.employee_id GROUP BY T2.name ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ order by count ( _ ) desc limit _ | select employee.name from evaluation join employee on evaluation.employee_id = employee.employee_id group by employee.name order by count(*) desc limit 1

SQL:
SELECT T2.name FROM evaluation AS T1 JOIN employee AS T2 ON T1.employee_id = T2.employee_id GROUP BY T2.name ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT T2.Name  FROM evaluation AS T1  JOIN employee AS T2 ON T1.Employee_ID = T2.Employee_ID  GROUP BY T1.Employee_ID  ORDER BY COUNT(*) DESC  LIMIT 1

index is 279
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1
Find the name of the employee who got the highest one time bonus.
schema_links:
Find the name of the employee who got the highest one time bonus. | employee : employee.name , employee.employee_id , employee.age , employee.city , employee.* | evaluation : evaluation.bonus , evaluation.year_awarded , evaluation.employee_id , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.*
natsql and SQL generation:
select _ from _ order by _ desc limit _ | select employee.name from employee order by evaluation.bonus desc limit 1
SQL = SELECT name FROM employee ORDER BY bonus DESC LIMIT 1
natsql:
select _ from _ order by _ desc limit _ | select employee.name from employee order by evaluation.bonus desc limit 1

SQL:
SELECT name FROM employee ORDER BY bonus DESC LIMIT 1
self correction:
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1

index is 280
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1
Which employee received the biggest bonus? Give me the employee name.
schema_links:
Which employee received the biggest bonus? Give me the employee name. | employee : employee.name , employee.employee_id , employee.age , employee.city , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*
natsql and SQL generation:
select _ from _ order by _ desc limit _ | select employee.name from employee order by evaluation.bonus desc limit 1
SQL = SELECT name FROM employee ORDER BY bonus DESC LIMIT 1
natsql:
select _ from _ order by _ desc limit _ | select employee.name from employee order by evaluation.bonus desc limit 1

SQL:
SELECT name FROM employee ORDER BY bonus DESC LIMIT 1
self correction:
SELECT employee.Name  FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1

index is 281
SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
Find the names of employees who never won any award in the evaluation.
schema_links:
Find the names of employees who never won any award in the evaluation. | employee : employee.name , employee.employee_id , employee.age , employee.city , employee.* | evaluation : evaluation.year_awarded , evaluation.bonus , evaluation.employee_id , evaluation.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ ) | select employee.name from employee where employee.employee_id not in ( select evaluation.employee_id from evaluation )
SQL = SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation)
natsql:
select _ from _ where _ not in ( select _ from _ ) | select employee.name from employee where employee.employee_id not in ( select evaluation.employee_id from evaluation )

SQL:
SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation)
self correction:
SELECT name  FROM employee  WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)

index is 282
SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
What are the names of the employees who never received any evaluation?
schema_links:
What are the names of the employees who never received any evaluation? | employee : employee.name , employee.employee_id , employee.age , employee.city , employee.* | evaluation : evaluation.employee_id , evaluation.bonus , evaluation.year_awarded , evaluation.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.*
natsql and SQL generation:
select _ from _ where not exists ( select _ from _ where _ = _ ) | select employee.name from employee where not exists ( select evaluation.employee_id from evaluation where employee.employee_id = evaluation.employee_id )
SQL = SELECT name FROM employee WHERE NOT EXISTS (SELECT employee_id FROM evaluation WHERE employee.employee_id = evaluation.employee_id)
natsql:
select _ from _ where not exists ( select _ from _ where _ = _ ) | select employee.name from employee where not exists ( select evaluation.employee_id from evaluation where employee.employee_id = evaluation.employee_id )

SQL:
SELECT name FROM employee WHERE NOT EXISTS (SELECT employee_id FROM evaluation WHERE employee.employee_id = evaluation.employee_id)
self correction:
SELECT name  FROM employee  WHERE NOT EXISTS (SELECT employee_id FROM evaluation WHERE employee.employee_id = evaluation.employee_id)

index is 283
SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1
What is the name of the shop that is hiring the largest number of employees?
schema_links:
What is the name of the shop that is hiring the largest number of employees? | shop : shop.name , shop.shop_id , shop.manager_name , shop.location , shop.district , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select _ from _ order by count ( _ ) desc limit _ | select shop.name from shop order by count ( hiring.employee_id ) desc limit 1
SQL = SELECT name FROM shop ORDER BY (SELECT count(*) FROM hiring WHERE hiring.shop_id = shop.shop_id) DESC LIMIT 1
natsql:
select _ from _ order by count ( _ ) desc limit _ | select shop.name from shop order by count ( hiring.employee_id ) desc limit 1

SQL:
SELECT name FROM shop ORDER BY (SELECT count(*) FROM hiring WHERE hiring.shop_id = shop.shop_id) DESC LIMIT 1
self correction:
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID, shop.Name ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1

index is 284
SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1
Which shop has the most employees? Give me the shop name.
schema_links:
Which shop has the most employees? Give me the shop name. | shop : shop.name , shop.shop_id , shop.manager_name , shop.location , shop.district , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | employee : employee.employee_id , employee.name , employee.age , employee.city , employee.* | evaluation : evaluation.employee_id , evaluation.bonus , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select shop.name from shop group by shop.name order by count ( shop.* ) desc limit 1
SQL = SELECT name FROM shop GROUP BY name ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select shop.name from shop group by shop.name order by count ( shop.* ) desc limit 1

SQL:
SELECT name FROM shop GROUP BY name ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1

index is 285
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
Find the name of the shops that do not hire any employee.
schema_links:
Find the name of the shops that do not hire any employee. | shop : shop.name , shop.shop_id , shop.location , shop.manager_name , shop.district , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select _ from _ where not exists ( select * from _ where _._ = _._ ) | select shop.name from shop where not exists ( select * from hiring where shop.shop_id = hiring.shop_id )
SQL = SELECT name FROM shop WHERE NOT EXISTS (SELECT * FROM hiring WHERE shop.shop_id = hiring.shop_id)
natsql:
select _ from _ where not exists ( select * from _ where _._ = _._ ) | select shop.name from shop where not exists ( select * from hiring where shop.shop_id = hiring.shop_id )

SQL:
SELECT name FROM shop WHERE NOT EXISTS (SELECT * FROM hiring WHERE shop.shop_id = hiring.shop_id)
self correction:
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)

index is 286
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
Which shops run with no employees? Find the shop names
schema_links:
Which shops run with no employees? Find the shop names | shop : shop.name , shop.shop_id , shop.location , shop.district , shop.manager_name , shop.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.* | employee : employee.employee_id , employee.name , employee.age , employee.city , employee.* | evaluation : evaluation.employee_id , evaluation.bonus , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select _ from _ where not exists ( select _ from _ where _ = _ ) | select shop.name from shop where not exists ( select * from hiring where shop.shop_id = hiring.shop_id )
SQL = SELECT name FROM shop WHERE NOT EXISTS (SELECT * FROM hiring WHERE shop.Shop_ID  =  hiring.Shop_ID)
natsql:
select _ from _ where not exists ( select _ from _ where _ = _ ) | select shop.name from shop where not exists ( select * from hiring where shop.shop_id = hiring.shop_id )

SQL:
SELECT name FROM shop WHERE NOT EXISTS (SELECT * FROM hiring WHERE shop.Shop_ID  =  hiring.Shop_ID)
self correction:
SELECT name FROM shop WHERE shop.Shop_ID NOT IN (SELECT Shop_ID FROM hiring)

index is 287
SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name
Find the number of employees hired in each shop; show the shop name as well.
schema_links:
Find the number of employees hired in each shop; show the shop name as well. | shop : shop.name , shop.manager_name , shop.shop_id , shop.location , shop.district , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select count ( distinct _ ) , _ from _ group by _ | select count ( distinct hiring.employee_id ) , shop.name from shop join hiring on shop.shop_id = hiring.shop_id group by shop.name
SQL = SELECT COUNT(DISTINCT T2.employee_id) , T1.name FROM shop AS T1 JOIN hiring AS T2 ON T1.shop_id = T2.shop_id GROUP BY T1.name
natsql:
select count ( distinct _ ) , _ from _ group by _ | select count ( distinct hiring.employee_id ) , shop.name from shop join hiring on shop.shop_id = hiring.shop_id group by shop.name

SQL:
SELECT COUNT(DISTINCT T2.employee_id) , T1.name FROM shop AS T1 JOIN hiring AS T2 ON T1.shop_id = T2.shop_id GROUP BY T1.name
self correction:
SELECT COUNT(DISTINCT T2.Employee_ID) AS Total_Employees, T1.Name AS Shop_Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Name

index is 288
SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name
For each shop, return the number of employees working there and the name of the shop.
schema_links:
For each shop, return the number of employees working there and the name of the shop. | shop : shop.name , shop.shop_id , shop.manager_name , shop.location , shop.district , shop.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.* | employee : employee.employee_id , employee.name , employee.age , employee.city , employee.* | evaluation : evaluation.employee_id , evaluation.bonus , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select count ( _ ) , _ from _ group by _ | select count ( employee.employee_id ) , shop.name from employee join hiring on employee.employee_id = hiring.employee_id join shop on hiring.shop_id = shop.shop_id group by shop.name
SQL = SELECT COUNT(T1.employee_id) , T2.name FROM employee AS T1 JOIN hiring AS T3 ON T1.employee_id  =  T3.employee_id JOIN shop AS T2 ON T3.shop_id  =  T2.shop_id GROUP BY T2.name
natsql:
select count ( _ ) , _ from _ group by _ | select count ( employee.employee_id ) , shop.name from employee join hiring on employee.employee_id = hiring.employee_id join shop on hiring.shop_id = shop.shop_id group by shop.name

SQL:
SELECT COUNT(T1.employee_id) , T2.name FROM employee AS T1 JOIN hiring AS T3 ON T1.employee_id  =  T3.employee_id JOIN shop AS T2 ON T3.shop_id  =  T2.shop_id GROUP BY T2.name
self correction:
SELECT COUNT(T1.Employee_ID), T2.Name FROM employee AS T1 JOIN hiring AS T3 ON T1.Employee_ID = T3.Employee_ID JOIN shop AS T2 ON T3.Shop_ID = T2.Shop_ID GROUP BY T2.Name

index is 289
SELECT sum(bonus) FROM evaluation
What is total bonus given in all evaluations?
schema_links:
What is total bonus given in all evaluations? | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*
natsql and SQL generation:
select sum ( _ ) from _ | select sum(evaluation.bonus) from evaluation
SQL = SELECT sum(bonus) FROM evaluation
natsql:
select sum ( _ ) from _ | select sum(evaluation.bonus) from evaluation

SQL:
SELECT sum(bonus) FROM evaluation
self correction:
SELECT SUM(Bonus) AS TotalBonus FROM evaluation

index is 290
SELECT sum(bonus) FROM evaluation
Find the total amount of bonus given in all the evaluations.
schema_links:
Find the total amount of bonus given in all the evaluations. | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*
natsql and SQL generation:
select sum ( _ ) from _ | select sum ( evaluation.bonus ) from evaluation
SQL = SELECT SUM(bonus) FROM evaluation
natsql:
select sum ( _ ) from _ | select sum ( evaluation.bonus ) from evaluation

SQL:
SELECT SUM(bonus) FROM evaluation
self correction:
SELECT SUM(Bonus) FROM evaluation

index is 291
SELECT * FROM hiring
Give me all the information about hiring.
schema_links:
Give me all the information about hiring. | hiring : hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.shop_id , hiring.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select _ from _ | select * from hiring
SQL = SELECT * FROM hiring
natsql:
select _ from _ | select * from hiring

SQL:
SELECT * FROM hiring
self correction:
SELECT hiring.* FROM hiring

index is 292
SELECT * FROM hiring
What is all the information about hiring?
schema_links:
What is all the information about hiring? | hiring : hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.shop_id , hiring.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select _ from _ | SELECT * FROM hiring
natsql:
select _ from _ | SELECT * FROM hiring
SQL:
SELECT * FROM hiring
self correction:
SELECT * FROM hiring

index is 293
SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000
Which district has both stores with less than 3000 products and stores with more than 10000 products?
schema_links:
Which district has both stores with less than 3000 products and stores with more than 10000 products? | shop : shop.number_products , shop.district , shop.name , shop.shop_id , shop.location , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select @.@ from @ where @ < _ and @ > _ group by @ | select shop.district from shop where shop.number_products < 3000 and shop.number_products > 10000 group by shop.district
SQL = SELECT district FROM shop GROUP BY district HAVING max(number_products)  <  3000 AND min(number_products)  >  10000
natsql:
select @.@ from @ where @ < _ and @ > _ group by @ | select shop.district from shop where shop.number_products < 3000 and shop.number_products > 10000 group by shop.district

SQL:
SELECT district FROM shop GROUP BY district HAVING max(number_products)  <  3000 AND min(number_products)  >  10000
self correction:
SELECT district FROM shop GROUP BY district HAVING MAX(number_products) < 3000 AND MIN(number_products) > 10000

index is 294
SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000
Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.
schema_links:
Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products. | shop : shop.number_products , shop.district , shop.name , shop.shop_id , shop.location , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select _ from _ where _ and _ | select distinct shop.district from shop where shop.number_products < 3000 and shop.shop_id in (select shop_id from shop where number_products > 10000)
SQL = SELECT DISTINCT district FROM shop WHERE number_products < 3000 AND shop_id IN (SELECT shop_id FROM shop WHERE number_products > 10000)
natsql:
select _ from _ where _ and _ | select distinct shop.district from shop where shop.number_products < 3000 and shop.shop_id in (select shop_id from shop where number_products > 10000)

SQL:
SELECT DISTINCT district FROM shop WHERE number_products < 3000 AND shop_id IN (SELECT shop_id FROM shop WHERE number_products > 10000)
self correction:
SELECT DISTINCT district  FROM shop  WHERE district IN (   SELECT district    FROM shop    WHERE number_products < 3000 ) AND district IN (   SELECT district    FROM shop    WHERE number_products > 10000 )

index is 295
SELECT count(DISTINCT LOCATION) FROM shop
How many different store locations are there?
schema_links:
How many different store locations are there? | shop : shop.location , shop.name , shop.shop_id , shop.district , shop.number_products , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct shop.location ) from shop
SQL = SELECT count(DISTINCT location) FROM shop
natsql:
select count ( distinct _ ) from _ | select count ( distinct shop.location ) from shop

SQL:
SELECT count(DISTINCT location) FROM shop
self correction:
SELECT count(DISTINCT Location) FROM shop

index is 296
SELECT count(DISTINCT LOCATION) FROM shop
Count the number of distinct store locations.
schema_links:
Count the number of distinct store locations. | shop : shop.location , shop.name , shop.shop_id , shop.district , shop.manager_name , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct shop.location ) from shop
SQL = SELECT count(DISTINCT location) FROM shop
natsql:
select count ( distinct _ ) from _ | select count ( distinct shop.location ) from shop

SQL:
SELECT count(DISTINCT location) FROM shop
self correction:
SELECT COUNT(DISTINCT Location) FROM shop

index is 297
SELECT count(*) FROM Documents
How many documents do we have?
schema_links:
How many documents do we have? | documents : documents.document_name , documents.document_id , documents.document_description , documents.template_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select count ( * ) from documents | SELECT count(*) FROM documents
natsql:
select count ( * ) from documents | SELECT count(*) FROM documents
SQL:
SELECT count(*) FROM documents
self correction:
SELECT COUNT(*) FROM Documents

index is 298
SELECT count(*) FROM Documents
Count the number of documents.
schema_links:
Count the number of documents. | documents : documents.document_name , documents.document_id , documents.document_description , documents.template_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select count ( _ ) from _
SQL = SELECT count(*) FROM documents
natsql:
select count ( _ ) from _

SQL:
SELECT count(*) FROM documents
self correction:
SELECT COUNT(*) FROM Documents

index is 299
SELECT document_id ,  document_name ,  document_description FROM Documents
List document IDs, document names, and document descriptions for all documents.
schema_links:
List document IDs, document names, and document descriptions for all documents. | documents : documents.document_name , documents.document_description , documents.document_id , documents.template_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , _ , _ from _ | select documents.document_id , documents.document_name , documents.document_description from documents
SQL = SELECT document_id ,  document_name ,  document_description FROM documents
natsql:
select _ , _ , _ from _ | select documents.document_id , documents.document_name , documents.document_description from documents

SQL:
SELECT document_id ,  document_name ,  document_description FROM documents
self correction:
SELECT document_id, document_name, document_description FROM documents

index is 300
SELECT document_id ,  document_name ,  document_description FROM Documents
What are the ids, names, and descriptions for all documents?
schema_links:
What are the ids, names, and descriptions for all documents? | documents : documents.document_name , documents.document_id , documents.document_description , documents.template_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , _ , _ from _ | select documents.document_id , documents.document_name , documents.document_description from documents
SQL = SELECT document_id ,  document_name ,  document_description FROM documents
natsql:
select _ , _ , _ from _ | select documents.document_id , documents.document_name , documents.document_description from documents

SQL:
SELECT document_id ,  document_name ,  document_description FROM documents
self correction:
SELECT document_id, document_name, document_description FROM Documents

index is 301
SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE "%w%"
What is the document name and template id for document with description with the letter 'w' in it?
schema_links:
What is the document name and template id for document with description with the letter 'w' in it? | documents : documents.document_name , documents.document_description , documents.document_id , documents.template_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ , _ from _ where _ like %_%
SQL = SELECT document_name , template_id FROM documents WHERE document_description LIKE '%w%'
natsql:
select _ , _ from _ where _ like %_%

SQL:
SELECT document_name , template_id FROM documents WHERE document_description LIKE '%w%'
self correction:
SELECT documents.document_name, documents.template_id FROM documents WHERE documents.document_description LIKE '%w%'

index is 302
SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE "%w%"
Return the names and template ids for documents that contain the letter w in their description.
schema_links:
Return the names and template ids for documents that contain the letter w in their description. | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , _ from _ where _ like _ | select documents.document_name , documents.template_id from documents where documents.document_description like '%w%'
SQL = SELECT document_name ,  template_id FROM documents WHERE document_description LIKE '%w%'
natsql:
select _ , _ from _ where _ like _ | select documents.document_name , documents.template_id from documents where documents.document_description like '%w%'

SQL:
SELECT document_name ,  template_id FROM documents WHERE document_description LIKE '%w%'
self correction:
SELECT document_name, template_id  FROM documents  WHERE document_description LIKE '%w%';

index is 303
SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  "Robbin CV"
What is the document id, template id and description for document named "Robbin CV"?
schema_links:
What is the document id, template id and description for document named "Robbin CV"? | documents : documents.document_id , documents.document_name ( Robbin CV ) , documents.document_description , documents.template_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_description ( CV ) , ref_template_types.template_type_code ( CV ) , ref_template_types.* | templates : templates.template_type_code ( CV ) , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _, _, _ from _ where _ = "Robbin CV" | select documents.document_id, documents.template_id, documents.document_description from documents where documents.document_name = "Robbin CV"
SQL = SELECT document_id, template_id, document_description FROM documents WHERE document_name = "Robbin CV"
natsql:
select _, _, _ from _ where _ = "Robbin CV" | select documents.document_id, documents.template_id, documents.document_description from documents where documents.document_name = "Robbin CV"

SQL:
SELECT document_id, template_id, document_description FROM documents WHERE document_name = "Robbin CV"
self correction:
SELECT documents.document_id, documents.template_id, documents.document_description  FROM documents  WHERE documents.document_name = "Robbin CV"

index is 304
SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  "Robbin CV"
Return the document id, template id, and description for the document with the name Robbin CV.
schema_links:
Return the document id, template id, and description for the document with the name Robbin CV. | documents : documents.document_id , documents.document_name ( Robbin CV ) , documents.document_description , documents.template_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code ( CV ) , ref_template_types.template_type_description ( CV ) , ref_template_types.* | templates : templates.template_type_code ( CV ) , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ , _ , _ from _ where @.@ = _ | select documents.document_id , documents.template_id , documents.document_description from documents where documents.document_name = 'Robbin CV'
SQL = SELECT document_id ,  template_id ,  document_description FROM documents WHERE document_name  =  'Robbin CV'
natsql:
select _ , _ , _ from _ where @.@ = _ | select documents.document_id , documents.template_id , documents.document_description from documents where documents.document_name = 'Robbin CV'

SQL:
SELECT document_id ,  template_id ,  document_description FROM documents WHERE document_name  =  'Robbin CV'
self correction:
SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = 'Robbin CV'

index is 305
SELECT count(DISTINCT template_id) FROM Documents
How many different templates do all document use?
schema_links:
How many different templates do all document use? | templates : templates.template_id , templates.template_details , templates.template_type_code , templates.version_number , templates.date_effective_to , templates.* | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct templates.template_id ) from templates
SQL = SELECT count(DISTINCT template_id) FROM templates
natsql:
select count ( distinct _ ) from _ | select count ( distinct templates.template_id ) from templates

SQL:
SELECT count(DISTINCT template_id) FROM templates
self correction:
SELECT count(DISTINCT Template_ID) FROM Documents

index is 306
SELECT count(DISTINCT template_id) FROM Documents
Count the number of different templates used for documents.
schema_links:
Count the number of different templates used for documents. | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_to , templates.template_details , templates.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct templates.template_id ) from templates
SQL = SELECT COUNT(DISTINCT template_id) FROM templates
natsql:
select count ( distinct _ ) from _ | select count ( distinct templates.template_id ) from templates

SQL:
SELECT COUNT(DISTINCT template_id) FROM templates
self correction:
SELECT COUNT(DISTINCT Template_ID) FROM Documents

index is 307
SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'
How many documents are using the template with type code 'PPT'?
schema_links:
How many documents are using the template with type code 'PPT'? | templates : templates.template_type_code ( PPT ) , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code ( PPT ) , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:

natsql:

SQL:
SELECT COUNT(*) FROM documents WHERE template_id = (SELECT template_id FROM templates WHERE template_type_code = 'PPT')
self correction:
SELECT COUNT(DISTINCT documents.Document_ID) FROM documents JOIN templates ON documents.Template_ID = templates.Template_ID WHERE templates.Template_Type_Code = 'PPT'

index is 308
SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'
Count the number of documents that use the PPT template type.
schema_links:
Count the number of documents that use the PPT template type. | templates : templates.template_type_code ( PPT ) , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code ( PPT ) , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select count ( _ ) from _ where @.@ = @.@ | select count ( documents.* ) from documents where templates.template_type_code = 'PPT' and documents.template_id = templates.template_id
SQL = SELECT count(*) FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'PPT'
natsql:
select count ( _ ) from _ where @.@ = @.@ | select count ( documents.* ) from documents where templates.template_type_code = 'PPT' and documents.template_id = templates.template_id

SQL:
SELECT count(*) FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'PPT'
self correction:
SELECT COUNT(DISTINCT documents.Document_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'PPT'

index is 309
SELECT template_id ,  count(*) FROM Documents GROUP BY template_id
Show all template ids and number of documents using each template.
schema_links:
Show all template ids and number of documents using each template. | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select templates.template_id , count ( documents.* ) from templates join documents on templates.template_id = documents.template_id group by templates.template_id
SQL = SELECT template_id , COUNT(*) FROM Documents GROUP BY template_id
natsql:
select _ , count ( _ ) from _ group by _ | select templates.template_id , count ( documents.* ) from templates join documents on templates.template_id = documents.template_id group by templates.template_id

SQL:
SELECT template_id , COUNT(*) FROM Documents GROUP BY template_id
self correction:
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS Document_Count FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID

index is 310
SELECT template_id ,  count(*) FROM Documents GROUP BY template_id
What are all different template ids used for documents, and how many times were each of them used?
schema_links:
What are all different template ids used for documents, and how many times were each of them used? | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select templates.template_id , count ( documents.template_id ) from documents join templates on documents.template_id = templates.template_id group by templates.template_id
SQL = SELECT template_id , COUNT(template_id) FROM documents GROUP BY template_id
natsql:
select _ , count ( _ ) from _ group by _ | select templates.template_id , count ( documents.template_id ) from documents join templates on documents.template_id = templates.template_id group by templates.template_id

SQL:
SELECT template_id , COUNT(template_id) FROM documents GROUP BY template_id
self correction:
SELECT templates.Template_ID, COUNT(documents.Template_ID)  FROM documents JOIN templates ON documents.Template_ID = templates.Template_ID GROUP BY templates.Template_ID

index is 311
SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1
What is the id and type code for the template used by the most documents?
schema_links:
What is the id and type code for the template used by the most documents? | templates : templates.template_type_code , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_to , templates.* | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , _ from _ group by _ order by count ( _ ) desc limit _ | select templates.template_id , templates.template_type_code from documents group by documents.template_id , documents.template_type_code order by count ( documents.template_id ) desc limit 1
SQL = SELECT template_id ,  template_type_code FROM documents GROUP BY template_id , template_type_code ORDER BY count(template_id) DESC LIMIT 1
natsql:
select _ , _ from _ group by _ order by count ( _ ) desc limit _ | select templates.template_id , templates.template_type_code from documents group by documents.template_id , documents.template_type_code order by count ( documents.template_id ) desc limit 1

SQL:
SELECT template_id ,  template_type_code FROM documents GROUP BY template_id , template_type_code ORDER BY count(template_id) DESC LIMIT 1
self correction:
SELECT Templates.Template_ID, Templates.Template_Type_Code  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code  ORDER BY COUNT(Documents.Template_ID) DESC  LIMIT 1

index is 312
SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1
Return the id and type code of the template that is used for the greatest number of documents.
schema_links:
Return the id and type code of the template that is used for the greatest number of documents. | templates : templates.template_type_code , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , _ from _ group by _ order by count ( _ ) desc limit _ | select templates.template_id , templates.template_type_code from templates group by templates.template_id , templates.template_type_code order by count ( documents.template_id ) desc limit 1
SQL = SELECT template_id ,  template_type_code FROM templates GROUP BY template_id ,  template_type_code ORDER BY COUNT(template_id) DESC LIMIT 1
natsql:
select _ , _ from _ group by _ order by count ( _ ) desc limit _ | select templates.template_id , templates.template_type_code from templates group by templates.template_id , templates.template_type_code order by count ( documents.template_id ) desc limit 1

SQL:
SELECT template_id ,  template_type_code FROM templates GROUP BY template_id ,  template_type_code ORDER BY COUNT(template_id) DESC LIMIT 1
self correction:
SELECT templates.template_id, templates.template_type_code FROM templates JOIN documents ON documents.template_id = templates.template_id GROUP BY templates.template_id, templates.template_type_code ORDER BY COUNT(documents.document_id) DESC LIMIT 1

index is 313
SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1
Show ids for all templates that are used by more than one document.
schema_links:
Show ids for all templates that are used by more than one document. | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.template_type_code , templates.date_effective_to , templates.template_details , templates.version_number , templates.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ where count ( _ ) > _ group by _ | select templates.template_id from templates where count ( templates.template_id ) > 1 group by templates.template_id
SQL = SELECT template_id FROM templates GROUP BY template_id HAVING COUNT(*) > 1
natsql:
select _ from _ where count ( _ ) > _ group by _ | select templates.template_id from templates where count ( templates.template_id ) > 1 group by templates.template_id

SQL:
SELECT template_id FROM templates GROUP BY template_id HAVING COUNT(*) > 1
self correction:
SELECT Templates.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1

index is 314
SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1
What are the template ids of any templates used in more than a single document?
schema_links:
What are the template ids of any templates used in more than a single document? | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | templates : templates.template_id , templates.template_type_code , templates.date_effective_to , templates.version_number , templates.date_effective_from , templates.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ where count ( _ ) > _ group by _ | select templates.template_id from templates where count ( templates.template_id ) > 1 group by templates.template_id
SQL = SELECT template_id FROM templates GROUP BY template_id HAVING count(*)  >  1
natsql:
select _ from _ where count ( _ ) > _ group by _ | select templates.template_id from templates where count ( templates.template_id ) > 1 group by templates.template_id

SQL:
SELECT template_id FROM templates GROUP BY template_id HAVING count(*)  >  1
self correction:
SELECT Templates.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1

index is 315
SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
Show ids for all templates not used by any document.
schema_links:
Show ids for all templates not used by any document. | templates : templates.template_id , templates.template_type_code , templates.date_effective_to , templates.template_details , templates.version_number , templates.* | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ where _ not in (select _ from _) | select templates.template_id from templates where templates.template_id not in (select documents.template_id from documents)
SQL = SELECT template_id FROM templates WHERE template_id NOT IN (SELECT template_id FROM documents)
natsql:
select _ from _ where _ not in (select _ from _) | select templates.template_id from templates where templates.template_id not in (select documents.template_id from documents)

SQL:
SELECT template_id FROM templates WHERE template_id NOT IN (SELECT template_id FROM documents)
self correction:
SELECT templates.template_id  FROM templates  LEFT JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_id IS NULL

index is 316
SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
What are the ids for templates that are not used in any documents?
schema_links:
What are the ids for templates that are not used in any documents? | templates : templates.template_id , templates.template_type_code , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ ) | select templates.template_id from templates where templates.template_id not in ( select documents.template_id from documents )
SQL = SELECT template_id FROM templates WHERE template_id NOT IN (SELECT template_id FROM documents)
natsql:
select _ from _ where _ not in ( select _ from _ ) | select templates.template_id from templates where templates.template_id not in ( select documents.template_id from documents )

SQL:
SELECT template_id FROM templates WHERE template_id NOT IN (SELECT template_id FROM documents)
self correction:
SELECT templates.template_id  FROM templates  LEFT JOIN documents ON templates.template_id = documents.template_id  WHERE documents.template_id IS NULL

index is 317
SELECT count(*) FROM Templates
How many templates do we have?
schema_links:
How many templates do we have? | templates : templates.template_details , templates.template_id , templates.template_type_code , templates.version_number , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( templates.template_id ) from templates
SQL = SELECT count(template_id) FROM templates
natsql:
select count ( _ ) from _ | select count ( templates.template_id ) from templates

SQL:
SELECT count(template_id) FROM templates
self correction:
SELECT COUNT(Template_ID) FROM Templates

index is 318
SELECT count(*) FROM Templates
Count the number of templates.
schema_links:
Count the number of templates. | templates : templates.template_details , templates.template_id , templates.template_type_code , templates.version_number , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( * ) from templates
SQL = SELECT count(*) FROM templates
natsql:
select count ( _ ) from _ | select count ( * ) from templates

SQL:
SELECT count(*) FROM templates
self correction:
SELECT COUNT(*) FROM Templates

index is 319
SELECT template_id ,  version_number ,  template_type_code FROM Templates
Show template ids, version numbers, and template type codes for all templates.
schema_links:
Show template ids, version numbers, and template type codes for all templates. | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , _ , _ from _ | select templates.template_id , templates.version_number , templates.template_type_code from templates
SQL = SELECT template_id ,  version_number ,  template_type_code FROM templates
natsql:
select _ , _ , _ from _ | select templates.template_id , templates.version_number , templates.template_type_code from templates

SQL:
SELECT template_id ,  version_number ,  template_type_code FROM templates
self correction:
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates

index is 320
SELECT template_id ,  version_number ,  template_type_code FROM Templates
What are the ids, version numbers, and type codes for each template?
schema_links:
What are the ids, version numbers, and type codes for each template? | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , _ , _ from _ | select templates.template_id , templates.version_number , templates.template_type_code from templates
SQL = SELECT template_id ,  version_number ,  template_type_code FROM templates
natsql:
select _ , _ , _ from _ | select templates.template_id , templates.version_number , templates.template_type_code from templates

SQL:
SELECT template_id ,  version_number ,  template_type_code FROM templates
self correction:
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates

index is 321
SELECT DISTINCT template_type_code FROM Templates
Show all distinct template type codes for all templates.
schema_links:
Show all distinct template type codes for all templates. | templates : templates.template_type_code , templates.template_details , templates.template_id , templates.version_number , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select distinct _ from _ | select distinct template_type_code from templates
SQL = SELECT DISTINCT template_type_code FROM templates
natsql:
select distinct _ from _ | select distinct template_type_code from templates

SQL:
SELECT DISTINCT template_type_code FROM templates
self correction:
SELECT DISTINCT Template_Type_Code FROM Templates

index is 322
SELECT DISTINCT template_type_code FROM Templates
What are the different template type codes?
schema_links:
What are the different template type codes? | templates : templates.template_type_code , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select distinct _ from _ | select distinct ref_template_types.template_type_code from ref_template_types
SQL = SELECT DISTINCT template_type_code FROM ref_template_types
natsql:
select distinct _ from _ | select distinct ref_template_types.template_type_code from ref_template_types

SQL:
SELECT DISTINCT template_type_code FROM ref_template_types
self correction:
SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types

index is 323
SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"
What are the ids of templates with template type code PP or PPT?
schema_links:
What are the ids of templates with template type code PP or PPT? | templates : templates.template_type_code ( PP , PPT ) , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code ( PP , PPT ) , ref_template_types.template_type_description , ref_template_types.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ from _ where _ = _ or _ = _ | select templates.template_id from templates where templates.template_type_code = 'PP' or templates.template_type_code = 'PPT'
SQL = SELECT template_id FROM templates WHERE template_type_code  =  'PP' OR template_type_code  =  'PPT'
natsql:
select _ from _ where _ = _ or _ = _ | select templates.template_id from templates where templates.template_type_code = 'PP' or templates.template_type_code = 'PPT'

SQL:
SELECT template_id FROM templates WHERE template_type_code  =  'PP' OR template_type_code  =  'PPT'
self correction:
SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_Type_Code IN ('PP', 'PPT')

index is 324
SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"
Return the ids of templates that have the code PP or PPT.
schema_links:
Return the ids of templates that have the code PP or PPT. | templates : templates.template_id , templates.template_type_code ( PP , PPT ) , templates.version_number , templates.date_effective_to , templates.template_details , templates.* | ref_template_types : ref_template_types.template_type_code ( PP , PPT ) , ref_template_types.template_type_description , ref_template_types.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ from _ where _ = 'PP' or _ = 'PPT' | select templates.template_id from templates where templates.template_type_code = 'PP' or templates.template_type_code = 'PPT'
SQL = SELECT template_id FROM templates WHERE template_type_code  =  'PP' OR template_type_code  =  'PPT'
natsql:
select _ from _ where _ = 'PP' or _ = 'PPT' | select templates.template_id from templates where templates.template_type_code = 'PP' or templates.template_type_code = 'PPT'

SQL:
SELECT template_id FROM templates WHERE template_type_code  =  'PP' OR template_type_code  =  'PPT'
self correction:
SELECT templates.Template_ID  FROM templates  WHERE templates.Template_Type_Code = 'PP' OR templates.Template_Type_Code = 'PPT'

index is 325
SELECT count(*) FROM Templates WHERE template_type_code  =  "CV"
How many templates have template type code CV?
schema_links:
How many templates have template type code CV? | templates : templates.template_type_code ( CV ) , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code ( CV ) , ref_template_types.template_type_description ( CV ) , ref_template_types.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select count ( _ ) from _ where _ = _ | select count ( templates.* ) from templates where templates.template_type_code = 'CV'
SQL = SELECT count(*) FROM templates WHERE template_type_code  =  'CV'
natsql:
select count ( _ ) from _ where _ = _ | select count ( templates.* ) from templates where templates.template_type_code = 'CV'

SQL:
SELECT count(*) FROM templates WHERE template_type_code  =  'CV'
self correction:
SELECT COUNT(DISTINCT Template_ID) FROM Templates WHERE Template_Type_Code = 'CV'

index is 326
SELECT count(*) FROM Templates WHERE template_type_code  =  "CV"
Count the number of templates of the type CV.
schema_links:
Count the number of templates of the type CV. | templates : templates.template_type_code ( CV ) , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code ( CV ) , ref_template_types.template_type_description ( CV ) , ref_template_types.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select count ( _ ) from _ where _ = _ | select count (templates.*) from templates where templates.template_type_code = 'CV'
natsql:
select count ( _ ) from _ where _ = _ | select count (templates.*) from templates where templates.template_type_code = 'CV'
SQL:
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'
self correction:
SELECT COUNT(Template_ID) FROM Templates WHERE Template_Type_Code = 'CV'

index is 327
SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5
What is the version number and template type code for the template with version number later than 5?
schema_links:
What is the version number and template type code for the template with version number later than 5? | templates : templates.version_number , templates.template_type_code , templates.template_details , templates.template_id , templates.date_effective_to , templates.* | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , _ from _ where _ > _ | select templates.version_number , templates.template_type_code from templates where templates.version_number > 5
SQL = SELECT version_number , template_type_code FROM templates WHERE version_number  >  5
natsql:
select _ , _ from _ where _ > _ | select templates.version_number , templates.template_type_code from templates where templates.version_number > 5

SQL:
SELECT version_number , template_type_code FROM templates WHERE version_number  >  5
self correction:
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5

index is 328
SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5
Return the version numbers and template type codes of templates with a version number greater than 5.
schema_links:
Return the version numbers and template type codes of templates with a version number greater than 5. | templates : templates.version_number , templates.template_type_code , templates.template_details , templates.template_id , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , _ from _ where _ > _ | select templates.version_number , templates.template_type_code from templates where templates.version_number > 5
SQL = SELECT version_number , template_type_code FROM templates WHERE version_number  >  5
natsql:
select _ , _ from _ where _ > _ | select templates.version_number , templates.template_type_code from templates where templates.version_number > 5

SQL:
SELECT version_number , template_type_code FROM templates WHERE version_number  >  5
self correction:
SELECT Templates.Version_Number, Templates.Template_Type_Code  FROM Templates  WHERE Templates.Version_Number > 5

index is 329
SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code
Show all template type codes and number of templates for each.
schema_links:
Show all template type codes and number of templates for each. | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select ref_template_types.template_type_code , count ( templates.template_id ) from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code group by ref_template_types.template_type_code
SQL = SELECT template_type_code ,  COUNT(template_id) FROM ref_template_types JOIN templates ON ref_template_types.template_type_code  =  templates.template_type_code GROUP BY ref_template_types.template_type_code
natsql:
select _ , count ( _ ) from _ group by _ | select ref_template_types.template_type_code , count ( templates.template_id ) from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code group by ref_template_types.template_type_code

SQL:
SELECT template_type_code ,  COUNT(template_id) FROM ref_template_types JOIN templates ON ref_template_types.template_type_code  =  templates.template_type_code GROUP BY ref_template_types.template_type_code
self correction:
SELECT ref_template_types.template_type_code, COUNT(templates.template_id) AS template_count FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY ref_template_types.template_type_code

index is 330
SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code
What are the different template type codes, and how many templates correspond to each?
schema_links:
What are the different template type codes, and how many templates correspond to each? | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select ref_template_types.template_type_code , count ( templates.template_id ) from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code group by ref_template_types.template_type_code
SQL = SELECT template_type_code ,  COUNT(template_id) FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY template_type_code
natsql:
select _ , count ( _ ) from _ group by _ | select ref_template_types.template_type_code , count ( templates.template_id ) from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code group by ref_template_types.template_type_code

SQL:
SELECT template_type_code ,  COUNT(template_id) FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY template_type_code
self correction:
SELECT ref_template_types.template_type_code, COUNT(templates.template_id)  FROM ref_template_types  JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  GROUP BY ref_template_types.template_type_code

index is 331
SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
Which template type code has most number of templates?
schema_links:
Which template type code has most number of templates? | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_description , documents.document_id , documents.template_id , documents.document_name , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select template_type_code from templates group by template_type_code order by count ( * ) desc limit 1
SQL = SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select template_type_code from templates group by template_type_code order by count ( * ) desc limit 1

SQL:
SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT template_type_code, COUNT(*) as template_count FROM templates GROUP BY template_type_code ORDER BY template_count DESC LIMIT 1

index is 332
SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
Return the type code of the template type that the most templates belong to.
schema_links:
Return the type code of the template type that the most templates belong to. | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select templates.template_type_code from templates group by templates.template_type_code order by count ( templates.* ) desc limit 1
SQL = SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select templates.template_type_code from templates group by templates.template_type_code order by count ( templates.* ) desc limit 1

SQL:
SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT Ref_Template_Types.Template_Type_Code  FROM Templates  GROUP BY Template_Type_Code  ORDER BY COUNT(*) DESC  LIMIT 1

index is 333
SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
Show all template type codes with less than three templates.
schema_links:
Show all template type codes with less than three templates. | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ group by _ having count ( _ ) < _ | select template_type_code from templates group by template_type_code having count ( template_id ) < 3
SQL = SELECT template_type_code FROM templates GROUP BY template_type_code HAVING count(template_id) < 3
natsql:
select _ from _ group by _ having count ( _ ) < _ | select template_type_code from templates group by template_type_code having count ( template_id ) < 3

SQL:
SELECT template_type_code FROM templates GROUP BY template_type_code HAVING count(template_id) < 3
self correction:
SELECT template_type_code  FROM templates  GROUP BY template_type_code  HAVING count(*) < 3

index is 334
SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
What are the codes of template types that have fewer than 3 templates?
schema_links:
What are the codes of template types that have fewer than 3 templates? | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ from _ where count ( _ ) < _ group by _ | select ref_template_types.template_type_code from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code group by ref_template_types.template_type_code having count ( templates.template_id ) < 3
SQL = SELECT template_type_code FROM ref_template_types JOIN Templates ON ref_template_types.template_type_code = Templates.template_type_code GROUP BY ref_template_types.template_type_code HAVING count(Templates.template_id) < 3
natsql:
select _ from _ where count ( _ ) < _ group by _ | select ref_template_types.template_type_code from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code group by ref_template_types.template_type_code having count ( templates.template_id ) < 3

SQL:
SELECT template_type_code FROM ref_template_types JOIN Templates ON ref_template_types.template_type_code = Templates.template_type_code GROUP BY ref_template_types.template_type_code HAVING count(Templates.template_id) < 3
self correction:
SELECT template_type_code  FROM ref_template_types  JOIN Templates ON ref_template_types.template_type_code = Templates.template_type_code  GROUP BY ref_template_types.template_type_code  HAVING COUNT(Templates.template_id) < 3

index is 335
SELECT min(Version_Number) ,  template_type_code FROM Templates
What the smallest version number and its template type code?
schema_links:
What the smallest version number and its template type code? | templates : templates.template_type_code , templates.version_number , templates.template_id , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select min ( _ ) , _ from _ | select min ( templates.version_number ) , templates.template_type_code from templates
SQL = SELECT min(version_number) ,  template_type_code FROM templates
natsql:
select min ( _ ) , _ from _ | select min ( templates.version_number ) , templates.template_type_code from templates

SQL:
SELECT min(version_number) ,  template_type_code FROM templates
self correction:
SELECT min(Version_Number) AS smallest_version_number, Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY smallest_version_number ASC LIMIT 1;

index is 336
SELECT min(Version_Number) ,  template_type_code FROM Templates
Return the lowest version number, along with its corresponding template type code.
schema_links:
Return the lowest version number, along with its corresponding template type code. | templates : templates.version_number , templates.template_type_code , templates.template_id , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , _ from _ order by _ asc limit _ | select templates.version_number , templates.template_type_code from templates order by templates.version_number asc limit 1
SQL = SELECT version_number ,  template_type_code FROM templates ORDER BY version_number ASC LIMIT 1
natsql:
select _ , _ from _ order by _ asc limit _ | select templates.version_number , templates.template_type_code from templates order by templates.version_number asc limit 1

SQL:
SELECT version_number ,  template_type_code FROM templates ORDER BY version_number ASC LIMIT 1
self correction:
SELECT templates.version_number, templates.template_type_code FROM templates ORDER BY templates.version_number ASC LIMIT 1

index is 337
SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  "Data base"
What is the template type code of the template used by document with the name "Data base"?
schema_links:
What is the template type code of the template used by document with the name "Data base"? | templates : templates.template_type_code , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_to , templates.* | documents : documents.document_name ( Data base ) , documents.template_id , documents.document_description , documents.document_id , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ where _ = _ | select templates.template_type_code from documents where documents.document_name = "Data base" and documents.template_id = templates.template_id
SQL = SELECT template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = "Data base"
natsql:
select _ from _ where _ = _ | select templates.template_type_code from documents where documents.document_name = "Data base" and documents.template_id = templates.template_id

SQL:
SELECT template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = "Data base"
self correction:
SELECT template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = "Data base"

index is 338
SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  "Data base"
Return the template type code of the template that is used by a document named Data base.
schema_links:
Return the template type code of the template that is used by a document named Data base. | templates : templates.template_type_code , templates.template_details , templates.template_id , templates.date_effective_to , templates.version_number , templates.* | documents : documents.document_name ( Data base ) , documents.template_id , documents.document_description , documents.document_id , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ where _ = ( select _ from _ where _ = _ ) | select templates.template_type_code from templates where templates.template_id = ( select documents.template_id from documents where documents.document_name = 'Data base' )
SQL = SELECT template_type_code FROM templates WHERE template_id = (SELECT template_id FROM documents WHERE document_name = 'Data base')
natsql:
select _ from _ where _ = ( select _ from _ where _ = _ ) | select templates.template_type_code from templates where templates.template_id = ( select documents.template_id from documents where documents.document_name = 'Data base' )

SQL:
SELECT template_type_code FROM templates WHERE template_id = (SELECT template_id FROM documents WHERE document_name = 'Data base')
self correction:
SELECT template_type_code FROM templates JOIN documents ON documents.template_id = templates.template_id WHERE documents.document_name = 'Data base'

index is 339
SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"
Show all document names using templates with template type code BK.
schema_links:
Show all document names using templates with template type code BK. | templates : templates.template_type_code ( BK ) , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_name , documents.template_id , documents.document_description , documents.document_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code ( BK ) , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ from _ where _ = _ | select documents.document_name from documents where documents.template_id in (select templates.template_id from templates where templates.template_type_code = 'BK')
natsql:
select _ from _ where _ = _ | select documents.document_name from documents where documents.template_id in (select templates.template_id from templates where templates.template_type_code = 'BK')
SQL:
SELECT document_name FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'BK')
self correction:
SELECT documents.document_name FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_code = 'BK'

index is 340
SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"
What are the names of documents that use templates with the code BK?
schema_links:
What are the names of documents that use templates with the code BK? | documents : documents.document_name , documents.document_description , documents.document_id , documents.template_id , documents.other_details , documents.* | templates : templates.template_type_code ( BK ) , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code ( BK ) , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select distinct _ from _ where _ = _ | select distinct documents.document_name from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'BK'
SQL = SELECT DISTINCT document_name FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'BK'
natsql:
select distinct _ from _ where _ = _ | select distinct documents.document_name from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = 'BK'

SQL:
SELECT DISTINCT document_name FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'BK'
self correction:
SELECT documents.document_name FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_code = 'BK'

index is 341
SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code
Show all template type codes and the number of documents using each type.
schema_links:
Show all template type codes and the number of documents using each type. | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select ref_template_types.template_type_code , count ( documents.* ) from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code join documents on templates.template_id = documents.template_id group by ref_template_types.template_type_code
SQL = SELECT template_type_code , count(*) FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id GROUP BY template_type_code
natsql:
select _ , count ( _ ) from _ group by _ | select ref_template_types.template_type_code , count ( documents.* ) from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code join documents on templates.template_id = documents.template_id group by ref_template_types.template_type_code

SQL:
SELECT template_type_code , count(*) FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id GROUP BY template_type_code
self correction:
SELECT template_type_code, COUNT(*) AS num_documents FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY template_type_code;

index is 342
SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code
What are the different template type codes, and how many documents use each type?
schema_links:
What are the different template type codes, and how many documents use each type? | templates : templates.template_type_code , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | documents : documents.document_name , documents.template_id , documents.document_description , documents.document_id , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select ref_template_types.template_type_code , count ( documents.* ) from ref_template_types join documents on documents.template_id = ref_template_types.template_id group by ref_template_types.template_type_code
SQL = SELECT template_type_code ,  count(*) FROM ref_template_types JOIN Documents ON Documents.Template_ID  =  ref_template_types.Template_ID GROUP BY template_type_code
natsql:
select _ , count ( _ ) from _ group by _ | select ref_template_types.template_type_code , count ( documents.* ) from ref_template_types join documents on documents.template_id = ref_template_types.template_id group by ref_template_types.template_type_code

SQL:
SELECT template_type_code ,  count(*) FROM ref_template_types JOIN Documents ON Documents.Template_ID  =  ref_template_types.Template_ID GROUP BY template_type_code
self correction:
SELECT Ref_Template_Types.Template_Type_Code, COUNT(DISTINCT Documents.Document_ID) AS num_documents FROM Ref_Template_Types JOIN Templates ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code

index is 343
SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1
Which template type code is used by most number of documents?
schema_links:
Which template type code is used by most number of documents? | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select templates.template_type_code from templates group by templates.template_type_code order by count ( documents.* ) desc limit 1
SQL = SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select templates.template_type_code from templates group by templates.template_type_code order by count ( documents.* ) desc limit 1

SQL:
SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1

index is 344
SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1
Return the code of the template type that is most commonly used in documents.
schema_links:
Return the code of the template type that is most commonly used in documents. | templates : templates.template_type_code , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_to , templates.* | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select templates.template_type_code from documents group by templates.template_type_code order by count ( templates.template_type_code ) desc limit 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select templates.template_type_code from documents group by templates.template_type_code order by count ( templates.template_type_code ) desc limit 1
SQL:
SELECT template_type_code FROM documents GROUP BY template_type_code ORDER BY count(template_type_code) DESC LIMIT 1
self correction:
SELECT Ref_Template_Types.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1

index is 345
SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
Show all template type codes that are not used by any document.
schema_links:
Show all template type codes that are not used by any document. | templates : templates.template_type_code , templates.template_id , templates.date_effective_to , templates.template_details , templates.version_number , templates.* | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ ) | select ref_template_types.template_type_code from ref_template_types where ref_template_types.template_type_code not in ( select documents.template_id from documents )
SQL = SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (SELECT Template_ID FROM Documents)
natsql:
select _ from _ where _ not in ( select _ from _ ) | select ref_template_types.template_type_code from ref_template_types where ref_template_types.template_type_code not in ( select documents.template_id from documents )

SQL:
SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (SELECT Template_ID FROM Documents)
self correction:
SELECT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates)

index is 346
SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
What are the codes of template types that are not used for any document?
schema_links:
What are the codes of template types that are not used for any document? | templates : templates.template_type_code , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ ) | select ref_template_types.template_type_code from ref_template_types where ref_template_types.template_type_code not in ( select documents.template_id from documents )
SQL = SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (SELECT Template_ID FROM Documents)
natsql:
select _ from _ where _ not in ( select _ from _ ) | select ref_template_types.template_type_code from ref_template_types where ref_template_types.template_type_code not in ( select documents.template_id from documents )

SQL:
SELECT template_type_code FROM ref_template_types WHERE template_type_code NOT IN (SELECT Template_ID FROM Documents)
self correction:
SELECT Ref_Template_Types.Template_Type_Code  FROM Ref_Template_Types  LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code  LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID  WHERE Documents.Template_ID IS NULL

index is 347
SELECT template_type_code ,  template_type_description FROM Ref_template_types
Show all template type codes and descriptions.
schema_links:
Show all template type codes and descriptions. | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ , _ from _ | select ref_template_types.template_type_code , ref_template_types.template_type_description from ref_template_types
SQL = SELECT template_type_code , template_type_description FROM ref_template_types
natsql:
select _ , _ from _ | select ref_template_types.template_type_code , ref_template_types.template_type_description from ref_template_types

SQL:
SELECT template_type_code , template_type_description FROM ref_template_types
self correction:
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types

index is 348
SELECT template_type_code ,  template_type_description FROM Ref_template_types
What are the type codes and descriptions for all template types?
schema_links:
What are the type codes and descriptions for all template types? | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ , _ from _ | select ref_template_types.template_type_code , ref_template_types.template_type_description from ref_template_types
SQL = SELECT template_type_code ,  template_type_description FROM ref_template_types
natsql:
select _ , _ from _ | select ref_template_types.template_type_code , ref_template_types.template_type_description from ref_template_types

SQL:
SELECT template_type_code ,  template_type_description FROM ref_template_types
self correction:
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types

index is 349
SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"
What is the template type descriptions for template type code "AD".
schema_links:
What is the template type descriptions for template type code "AD". | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code ( AD ) , ref_template_types.* | templates : templates.template_type_code ( AD ) , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ from _ where @.@ = "AD" | select ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_code = "AD"
SQL = SELECT template_type_description FROM ref_template_types WHERE template_type_code = "AD"
natsql:
select _ from _ where @.@ = "AD" | select ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_code = "AD"

SQL:
SELECT template_type_description FROM ref_template_types WHERE template_type_code = "AD"
self correction:
SELECT template_type_description FROM ref_template_types WHERE template_type_code = "AD"

index is 350
SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"
Return the template type description of the template type with the code AD.
schema_links:
Return the template type description of the template type with the code AD. | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code ( AD ) , ref_template_types.* | templates : templates.template_type_code ( AD ) , templates.template_id , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ from _ where _ = _ | select ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_code = 'AD'
SQL = SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD'
natsql:
select _ from _ where _ = _ | select ref_template_types.template_type_description from ref_template_types where ref_template_types.template_type_code = 'AD'

SQL:
SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD'
self correction:
SELECT template_type_description FROM Ref_Template_Types WHERE template_type_code = 'AD'

index is 351
SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book"
What is the template type code for template type description "Book".
schema_links:
What is the template type code for template type description "Book". | ref_template_types : ref_template_types.template_type_description ( Book ) , ref_template_types.template_type_code , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_name , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ from _ where _ = _ | select ref_template_types.template_type_code from ref_template_types where ref_template_types.template_type_description = 'Book'
SQL = SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'
natsql:
select _ from _ where _ = _ | select ref_template_types.template_type_code from ref_template_types where ref_template_types.template_type_description = 'Book'

SQL:
SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'
self correction:
SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'

index is 352
SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book"
Return the type code of the template type with the description "Book".
schema_links:
Return the type code of the template type with the description "Book". | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description ( Book ) , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_description , documents.document_id , documents.template_id , documents.document_name , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ from _ where @.@ = _ | select ref_template_types.template_type_code from ref_template_types where ref_template_types.template_type_description = 'Book'
SQL = SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'
natsql:
select _ from _ where @.@ = _ | select ref_template_types.template_type_code from ref_template_types where ref_template_types.template_type_description = 'Book'

SQL:
SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book'
self correction:
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'

index is 353
SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID
What are the distinct template type descriptions for the templates ever used by any document?
schema_links:
What are the distinct template type descriptions for the templates ever used by any document? | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code , ref_template_types.* | templates : templates.template_id , templates.template_type_code , templates.version_number , templates.date_effective_to , templates.template_details , templates.* | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select distinct _ from _ | select distinct ref_template_types.template_type_description from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id
natsql:
select distinct _ from _ | select distinct ref_template_types.template_type_description from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id
SQL:
SELECT DISTINCT template_type_description FROM ref_template_types
JOIN templates ON templates.template_type_code = ref_template_types.template_type_code
JOIN documents ON documents.template_id = templates.template_id
JOIN paragraphs ON paragraphs.document_id = documents.document_id
self correction:
SELECT DISTINCT ref_template_types.template_type_description FROM ref_template_types JOIN templates ON templates.template_type_code = ref_template_types.template_type_code JOIN documents ON documents.template_id = templates.template_id JOIN paragraphs ON paragraphs.document_id = documents.document_id

index is 354
SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID
Return the different descriptions for templates that have been used in a document.
schema_links:
Return the different descriptions for templates that have been used in a document. | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code , ref_template_types.* | documents : documents.document_description , documents.template_id , documents.document_name , documents.document_id , documents.other_details , documents.* | templates : templates.template_id , templates.template_type_code , templates.template_details , templates.version_number , templates.date_effective_to , templates.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select distinct _ from _ | select distinct ref_template_types.template_type_description from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id
SQL = SELECT DISTINCT template_type_description FROM ref_template_types JOIN templates ON templates.template_type_code  =  ref_template_types.template_type_code JOIN documents ON documents.template_id  =  templates.template_id JOIN paragraphs ON paragraphs.document_id  =  documents.document_id
natsql:
select distinct _ from _ | select distinct ref_template_types.template_type_description from ref_template_types join templates on templates.template_type_code = ref_template_types.template_type_code join documents on documents.template_id = templates.template_id join paragraphs on paragraphs.document_id = documents.document_id

SQL:
SELECT DISTINCT template_type_description FROM ref_template_types JOIN templates ON templates.template_type_code  =  ref_template_types.template_type_code JOIN documents ON documents.template_id  =  templates.template_id JOIN paragraphs ON paragraphs.document_id  =  documents.document_id
self correction:
SELECT templates.template_type_description FROM ref_template_types JOIN templates ON templates.template_type_code = ref_template_types.template_type_code JOIN documents ON documents.template_id = templates.template_id JOIN paragraphs ON paragraphs.document_id = documents.document_id GROUP BY templates.template_type_description

index is 355
SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  "Presentation"
What are the template ids with template type description "Presentation".
schema_links:
What are the template ids with template type description "Presentation". | ref_template_types : ref_template_types.template_type_description ( Presentation ) , ref_template_types.template_type_code , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_details , templates.template_type_code , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ from _ where @.@ = "Presentation" | select templates.template_id from templates where templates.template_type_code = (select ref_template_types.template_type_code from ref_template_types where ref_template_types.template_type_description = "Presentation")
SQL = SELECT template_id FROM templates WHERE template_type_code = (SELECT template_type_code FROM ref_template_types WHERE template_type_description = "Presentation")
natsql:
select _ from _ where @.@ = "Presentation" | select templates.template_id from templates where templates.template_type_code = (select ref_template_types.template_type_code from ref_template_types where ref_template_types.template_type_description = "Presentation")

SQL:
SELECT template_id FROM templates WHERE template_type_code = (SELECT template_type_code FROM ref_template_types WHERE template_type_description = "Presentation")
self correction:
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = "Presentation"

index is 356
SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  "Presentation"
Return the ids corresponding to templates with the description 'Presentation'.
schema_links:
Return the ids corresponding to templates with the description 'Presentation'. | ref_template_types : ref_template_types.template_type_description ( Presentation ) , ref_template_types.template_type_code , ref_template_types.* | templates : templates.template_id , templates.template_details , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*
natsql and SQL generation:
select _ from _ where _ = _ | select templates.template_id from templates where templates.template_details = 'Presentation'
SQL = SELECT template_id FROM templates WHERE template_details = 'Presentation'
natsql:
select _ from _ where _ = _ | select templates.template_id from templates where templates.template_details = 'Presentation'

SQL:
SELECT template_id FROM templates WHERE template_details = 'Presentation'
self correction:
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation'

index is 357
SELECT count(*) FROM Paragraphs
How many paragraphs in total?
schema_links:
How many paragraphs in total? | paragraphs : paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.document_id , paragraphs.other_details , paragraphs.* | documents : documents.document_name , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( paragraphs.paragraph_id ) from paragraphs
SQL = SELECT count(paragraph_id) FROM paragraphs
natsql:
select count ( _ ) from _ | select count ( paragraphs.paragraph_id ) from paragraphs

SQL:
SELECT count(paragraph_id) FROM paragraphs
self correction:
SELECT COUNT(Paragraph_ID) FROM Paragraphs

index is 358
SELECT count(*) FROM Paragraphs
Count the number of paragraphs.
schema_links:
Count the number of paragraphs. | paragraphs : paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.document_id , paragraphs.other_details , paragraphs.* | documents : documents.document_name , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( paragraph_id ) from paragraphs
SQL = SELECT COUNT(*) FROM paragraphs
natsql:
select count ( _ ) from _ | select count ( paragraph_id ) from paragraphs

SQL:
SELECT COUNT(*) FROM paragraphs
self correction:
SELECT COUNT(*) FROM Paragraphs

index is 359
SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'
How many paragraphs for the document with name 'Summer Show'?
schema_links:
How many paragraphs for the document with name 'Summer Show'? | documents : documents.document_name ( Summer Show ) , documents.document_id , documents.document_description , documents.template_id , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select count ( _ ) from _ where _ = 'Summer Show' | select count ( paragraphs.* ) from paragraphs where paragraphs.document_name = 'Summer Show'
SQL = SELECT count(*) FROM documents WHERE document_name = 'Summer Show'
natsql:
select count ( _ ) from _ where _ = 'Summer Show' | select count ( paragraphs.* ) from paragraphs where paragraphs.document_name = 'Summer Show'

SQL:
SELECT count(*) FROM documents WHERE document_name = 'Summer Show'
self correction:
SELECT COUNT(*) AS paragraph_count FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = 'Summer Show'

index is 360
SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'
Count the number of paragraphs in the document named 'Summer Show'.
schema_links:
Count the number of paragraphs in the document named 'Summer Show'. | documents : documents.document_name ( Summer Show ) , documents.document_id , documents.document_description , documents.template_id , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select count ( _ ) from _ where @.@ = 'Summer Show' | select count ( paragraphs.* ) from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = 'Summer Show'
SQL = SELECT count(*) FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Summer Show'
natsql:
select count ( _ ) from _ where @.@ = 'Summer Show' | select count ( paragraphs.* ) from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = 'Summer Show'

SQL:
SELECT count(*) FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Summer Show'
self correction:
SELECT COUNT(*) FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show'

index is 361
select other_details from paragraphs where paragraph_text like 'korea'
Show paragraph details for paragraph with text 'Korea ' .
schema_links:
Show paragraph details for paragraph with text 'Korea ' . | paragraphs : paragraphs.paragraph_text ( Korea ) , paragraphs.other_details , paragraphs.paragraph_id , paragraphs.document_id , paragraphs.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ where _ = 'Korea' | select * from paragraphs where paragraph_text = 'Korea' 
SQL = SELECT * FROM paragraphs WHERE paragraph_text = 'Korea'
natsql:
select _ from _ where _ = 'Korea' | select * from paragraphs where paragraph_text = 'Korea' 

SQL:
SELECT * FROM paragraphs WHERE paragraph_text = 'Korea'
self correction:
SELECT Paragraphs.*  FROM Paragraphs  WHERE Paragraphs.Paragraph_Text = 'Korea';

index is 362
select other_details from paragraphs where paragraph_text like 'korea'
What are the details for the paragraph that includes the text 'Korea ' ?
schema_links:
What are the details for the paragraph that includes the text 'Korea ' ? | paragraphs : paragraphs.paragraph_text ( Korea ) , paragraphs.other_details , paragraphs.paragraph_id , paragraphs.document_id , paragraphs.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ where _ like '%Korea%' | select * from paragraphs where paragraph_text like '%Korea%'
SQL = SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Korea%'
natsql:
select _ from _ where _ like '%Korea%' | select * from paragraphs where paragraph_text like '%Korea%'

SQL:
SELECT * FROM paragraphs WHERE paragraph_text LIKE '%Korea%'
self correction:
SELECT Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text LIKE '%Korea%'

index is 363
SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'
Show all paragraph ids and texts for the document with name 'Welcome to NY'.
schema_links:
Show all paragraph ids and texts for the document with name 'Welcome to NY'. | documents : documents.document_name ( Welcome to NY ) , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.document_id , paragraphs.other_details , paragraphs.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , _ from _ where @.@ = 'Welcome to NY' | select paragraphs.paragraph_id , paragraphs.paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = 'Welcome to NY'
SQL = SELECT paragraph_id ,  paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id  =  documents.document_id WHERE documents.document_name  =  'Welcome to NY'
natsql:
select _ , _ from _ where @.@ = 'Welcome to NY' | select paragraphs.paragraph_id , paragraphs.paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = 'Welcome to NY'

SQL:
SELECT paragraph_id ,  paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id  =  documents.document_id WHERE documents.document_name  =  'Welcome to NY'
self correction:
SELECT paragraphs.paragraph_id, paragraphs.paragraph_text  FROM paragraphs  JOIN documents ON paragraphs.document_id = documents.document_id  WHERE documents.document_name = 'Welcome to NY'

index is 364
SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'
What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?
schema_links:
What are the ids and texts of paragraphs in the document titled 'Welcome to NY'? | paragraphs : paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.document_id , paragraphs.other_details , paragraphs.* | documents : documents.document_name ( Welcome to NY ) , documents.document_id , documents.document_description , documents.template_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , _ from _ where @.@ = 'Welcome to NY' | select paragraphs.paragraph_id , paragraphs.paragraph_text from paragraphs where documents.document_name = 'Welcome to NY'
SQL = SELECT paragraph_id ,  paragraph_text FROM paragraphs WHERE document_id  =  (SELECT document_id FROM documents WHERE document_name  =  'Welcome to NY')
natsql:
select _ , _ from _ where @.@ = 'Welcome to NY' | select paragraphs.paragraph_id , paragraphs.paragraph_text from paragraphs where documents.document_name = 'Welcome to NY'

SQL:
SELECT paragraph_id ,  paragraph_text FROM paragraphs WHERE document_id  =  (SELECT document_id FROM documents WHERE document_name  =  'Welcome to NY')
self correction:
SELECT paragraph_id, paragraph_text  FROM Paragraphs  WHERE document_id = (     SELECT document_id      FROM Documents      WHERE document_name = 'Welcome to NY' )

index is 365
SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Customer reviews"
Show all paragraph texts for the document "Customer reviews".
schema_links:
Show all paragraph texts for the document "Customer reviews". | documents : documents.document_name ( Customer reviews ) , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_text , paragraphs.document_id , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ where _ = _ | select paragraphs.paragraph_text from paragraphs where documents.document_name = "Customer reviews" and paragraphs.document_id = documents.document_id
SQL = SELECT paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = "Customer reviews"
natsql:
select _ from _ where _ = _ | select paragraphs.paragraph_text from paragraphs where documents.document_name = "Customer reviews" and paragraphs.document_id = documents.document_id

SQL:
SELECT paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = "Customer reviews"
self correction:
SELECT Paragraph_Text FROM Paragraphs  JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID  WHERE Documents.Document_Name = "Customer reviews"

index is 366
SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Customer reviews"
What are the paragraph texts for the document with the name 'Customer reviews'?
schema_links:
What are the paragraph texts for the document with the name 'Customer reviews'? | documents : documents.document_name ( Customer reviews ) , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_text , paragraphs.document_id , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:

natsql:

SQL:
SELECT paragraph_text FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Customer reviews')
self correction:
SELECT paragraph_text FROM Paragraphs WHERE Document_ID = (     SELECT Document_ID     FROM Documents     WHERE Document_Name = 'Customer reviews' )

index is 367
SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
Show all document ids and the number of paragraphs in each document. Order by document id.
schema_links:
Show all document ids and the number of paragraphs in each document. Order by document id. | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ order by _ | select documents.document_id , count ( paragraphs.paragraph_id ) from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by documents.document_id
SQL = SELECT document_id ,  COUNT(paragraph_id) FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY documents.document_id
natsql:
select _ , count ( _ ) from _ group by _ order by _ | select documents.document_id , count ( paragraphs.paragraph_id ) from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by documents.document_id

SQL:
SELECT document_id ,  COUNT(paragraph_id) FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY documents.document_id
self correction:
SELECT documents.document_id, COUNT(paragraphs.paragraph_id)  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  ORDER BY documents.document_id

index is 368
SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.
schema_links:
Return the different document ids along with the number of paragraphs corresponding to each, ordered by id. | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ order by _ | select documents.document_id , count ( paragraphs.paragraph_id ) from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by documents.document_id
SQL = SELECT document_id, COUNT(paragraph_id) FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY document_id ORDER BY document_id
natsql:
select _ , count ( _ ) from _ group by _ order by _ | select documents.document_id , count ( paragraphs.paragraph_id ) from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by documents.document_id

SQL:
SELECT document_id, COUNT(paragraph_id) FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY document_id ORDER BY document_id
self correction:
SELECT documents.document_id, COUNT(paragraphs.paragraph_id)  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  ORDER BY documents.document_id

index is 369
SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id
Show all document ids, names and the number of paragraphs in each document.
schema_links:
Show all document ids, names and the number of paragraphs in each document. | documents : documents.document_name , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , _ , count ( _ ) from _ group by _ | select documents.document_id , documents.document_name , count ( paragraphs.paragraph_id ) from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id, documents.document_name
SQL = SELECT documents.document_id , documents.document_name , COUNT(paragraphs.paragraph_id) FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name
natsql:
select _ , _ , count ( _ ) from _ group by _ | select documents.document_id , documents.document_name , count ( paragraphs.paragraph_id ) from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id, documents.document_name

SQL:
SELECT documents.document_id , documents.document_name , COUNT(paragraphs.paragraph_id) FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name
self correction:
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS paragraph_count FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id, documents.document_name

index is 370
SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id
What are the ids and names of each document, as well as the number of paragraphs in each?
schema_links:
What are the ids and names of each document, as well as the number of paragraphs in each? | documents : documents.document_id , documents.document_name , documents.template_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | templates : templates.version_number , templates.template_id , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , _ , count ( _ ) from _ group by _ | select documents.document_id , documents.document_name , count ( paragraphs.paragraph_id ) from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id, documents.document_name
SQL = SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name
natsql:
select _ , _ , count ( _ ) from _ group by _ | select documents.document_id , documents.document_name , count ( paragraphs.paragraph_id ) from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id, documents.document_name

SQL:
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name
self correction:
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id)  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id, documents.document_name

index is 371
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
List all document ids with at least two paragraphs.
schema_links:
List all document ids with at least two paragraphs. | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | documents : documents.document_name , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select distinct _ from _ group by _ having count ( _ ) >= _ | select distinct paragraphs.document_id from paragraphs group by paragraphs.document_id having count ( paragraphs.paragraph_id ) >= 2
SQL = SELECT DISTINCT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(paragraph_id) >= 2
natsql:
select distinct _ from _ group by _ having count ( _ ) >= _ | select distinct paragraphs.document_id from paragraphs group by paragraphs.document_id having count ( paragraphs.paragraph_id ) >= 2

SQL:
SELECT DISTINCT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(paragraph_id) >= 2
self correction:
SELECT DISTINCT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2

index is 372
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
What are the ids of documents that have 2 or more paragraphs?
schema_links:
What are the ids of documents that have 2 or more paragraphs? | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | documents : documents.document_id , documents.document_name , documents.template_id , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ where count ( _ ) >= _ group by _ | select documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id having count (paragraphs.paragraph_id) >= 2
SQL = SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(paragraph_id) >= 2
natsql:
select _ from _ where count ( _ ) >= _ group by _ | select documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id having count (paragraphs.paragraph_id) >= 2

SQL:
SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(paragraph_id) >= 2
self correction:
SELECT documents.document_id  FROM documents JOIN paragraphs ON paragraphs.document_id = documents.document_id GROUP BY documents.document_id HAVING COUNT(paragraphs.paragraph_id) >= 2

index is 373
SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1
What is the document id and name with greatest number of paragraphs?
schema_links:
What is the document id and name with greatest number of paragraphs? | paragraphs : paragraphs.document_id , paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | documents : documents.document_name , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , _ from _ order by count ( _ ) desc limit _ | select documents.document_id , documents.document_name from documents order by count ( paragraphs.paragraph_id ) desc limit 1
SQL = SELECT document_id ,  document_name FROM documents ORDER BY (SELECT count(*) FROM paragraphs WHERE documents.document_id  =  paragraphs.document_id) DESC LIMIT 1
natsql:
select _ , _ from _ order by count ( _ ) desc limit _ | select documents.document_id , documents.document_name from documents order by count ( paragraphs.paragraph_id ) desc limit 1

SQL:
SELECT document_id ,  document_name FROM documents ORDER BY (SELECT count(*) FROM paragraphs WHERE documents.document_id  =  paragraphs.document_id) DESC LIMIT 1
self correction:
SELECT documents.document_id, documents.document_name FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1

index is 374
SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1
Return the id and name of the document with the most paragraphs.
schema_links:
Return the id and name of the document with the most paragraphs. | documents : documents.document_id , documents.document_name , documents.template_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ , _ from _ order by count ( _ ) desc limit _ | select documents.document_id , documents.document_name from documents order by count ( paragraphs.* ) desc limit 1
SQL = SELECT document_id ,  document_name FROM documents GROUP BY document_id, document_name ORDER BY count(*) DESC LIMIT 1
natsql:
select _ , _ from _ order by count ( _ ) desc limit _ | select documents.document_id , documents.document_name from documents order by count ( paragraphs.* ) desc limit 1

SQL:
SELECT document_id ,  document_name FROM documents GROUP BY document_id, document_name ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT documents.document_id, documents.document_name FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1

index is 375
SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
What is the document id with least number of paragraphs?
schema_links:
What is the document id with least number of paragraphs? | paragraphs : paragraphs.document_id , paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | documents : documents.document_name , documents.document_description , documents.template_id , documents.document_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ order by count ( _ ) asc limit _ | select documents.document_id from documents order by count ( paragraphs.document_id ) asc limit 1
SQL = SELECT document_id FROM documents ORDER BY (SELECT COUNT(*) FROM paragraphs WHERE paragraphs.document_id  =  documents.document_id) ASC LIMIT 1
natsql:
select _ from _ order by count ( _ ) asc limit _ | select documents.document_id from documents order by count ( paragraphs.document_id ) asc limit 1

SQL:
SELECT document_id FROM documents ORDER BY (SELECT COUNT(*) FROM paragraphs WHERE paragraphs.document_id  =  documents.document_id) ASC LIMIT 1
self correction:
SELECT documents.Document_ID FROM documents LEFT JOIN paragraphs ON documents.Document_ID = paragraphs.Document_ID GROUP BY documents.Document_ID ORDER BY COUNT(paragraphs.Paragraph_ID) ASC LIMIT 1

index is 376
SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
Return the id of the document with the fewest paragraphs.
schema_links:
Return the id of the document with the fewest paragraphs. | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | documents : documents.document_id , documents.document_name , documents.document_description , documents.template_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ order by count ( _ ) asc limit _ | select documents.document_id from documents group by documents.document_id order by count ( documents.document_id ) asc limit 1
SQL = SELECT document_id FROM documents GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
natsql:
select _ from _ order by count ( _ ) asc limit _ | select documents.document_id from documents group by documents.document_id order by count ( documents.document_id ) asc limit 1

SQL:
SELECT document_id FROM documents GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
self correction:
SELECT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY COUNT(paragraphs.paragraph_id) ASC LIMIT 1

index is 377
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2
What is the document id with 1 to 2 paragraphs?
schema_links:
What is the document id with 1 to 2 paragraphs? | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | documents : documents.document_name , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ where _ between _ and _ group by _ having count ( _ ) between _ and _ | select documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id having count (paragraphs.paragraph_id) between 1 and 2
SQL = SELECT document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id HAVING COUNT(paragraphs.paragraph_id) BETWEEN 1 AND 2
natsql:
select _ from _ where _ between _ and _ group by _ having count ( _ ) between _ and _ | select documents.document_id from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id having count (paragraphs.paragraph_id) between 1 and 2

SQL:
SELECT document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id HAVING COUNT(paragraphs.paragraph_id) BETWEEN 1 AND 2
self correction:
SELECT documents.document_id  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  HAVING COUNT(paragraphs.paragraph_id) BETWEEN 1 AND 2

index is 378
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2
Give the ids of documents that have between one and two paragraphs.
schema_links:
Give the ids of documents that have between one and two paragraphs. | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | documents : documents.document_id , documents.document_name , documents.document_description , documents.template_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ where count ( _ ) >= _ and count ( _ ) <= _ group by _ | select documents.document_id from paragraphs group by paragraphs.document_id having count ( paragraphs.* ) >= 1 and count ( paragraphs.* ) <= 2
SQL = SELECT document_id FROM paragraphs GROUP BY document_id HAVING count(*) >= 1 AND count(*) <= 2
natsql:
select _ from _ where count ( _ ) >= _ and count ( _ ) <= _ group by _ | select documents.document_id from paragraphs group by paragraphs.document_id having count ( paragraphs.* ) >= 1 and count ( paragraphs.* ) <= 2

SQL:
SELECT document_id FROM paragraphs GROUP BY document_id HAVING count(*) >= 1 AND count(*) <= 2
self correction:
SELECT documents.document_id  FROM documents  INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  HAVING COUNT(*) >= 1 AND COUNT(*) <= 2

index is 379
SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'
Show the document id with paragraph text 'Brazil' and 'Ireland'.
schema_links:
Show the document id with paragraph text 'Brazil' and 'Ireland'. | paragraphs : paragraphs.paragraph_text ( Brazil , Ireland ) , paragraphs.document_id , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | documents : documents.document_name , documents.document_description , documents.document_id , documents.template_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select _ from _ where _ | SELECT document_id FROM paragraphs WHERE paragraph_text IN ('Brazil', 'Ireland')
SQL = SELECT document_id FROM paragraphs WHERE paragraph_text IN ('Brazil', 'Ireland')
natsql:
select _ from _ where _ | SELECT document_id FROM paragraphs WHERE paragraph_text IN ('Brazil', 'Ireland')

SQL:
SELECT document_id FROM paragraphs WHERE paragraph_text IN ('Brazil', 'Ireland')
self correction:
SELECT documents.document_id  FROM paragraphs  JOIN documents ON paragraphs.document_id = documents.document_id  WHERE paragraphs.paragraph_text IN ('Brazil', 'Ireland')

index is 380
SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'
What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?
schema_links:
What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'? | paragraphs : paragraphs.paragraph_text ( Brazil , Ireland ) , paragraphs.document_id , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.date_effective_to , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*
natsql and SQL generation:
select distinct _ from _ where _ and _ | select distinct paragraphs.document_id from paragraphs where paragraphs.paragraph_text = 'Brazil' and paragraphs.document_id in (select distinct document_id from paragraphs where paragraphs.paragraph_text = 'Ireland')
SQL = SELECT DISTINCT document_id FROM paragraphs WHERE paragraph_text  =  'Brazil' AND document_id  IN  (SELECT DISTINCT document_id FROM paragraphs WHERE paragraph_text  =  'Ireland')
natsql:
select distinct _ from _ where _ and _ | select distinct paragraphs.document_id from paragraphs where paragraphs.paragraph_text = 'Brazil' and paragraphs.document_id in (select distinct document_id from paragraphs where paragraphs.paragraph_text = 'Ireland')

SQL:
SELECT DISTINCT document_id FROM paragraphs WHERE paragraph_text  =  'Brazil' AND document_id  IN  (SELECT DISTINCT document_id FROM paragraphs WHERE paragraph_text  =  'Ireland')
self correction:
SELECT DISTINCT document_id  FROM paragraphs  WHERE paragraph_text = 'Brazil'  AND document_id IN (   SELECT DISTINCT document_id    FROM paragraphs    WHERE paragraph_text = 'Ireland' )

index is 381
SELECT count(*) FROM teacher
How many teachers are there?
schema_links:
How many teachers are there? | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown , teacher.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( teacher.teacher_id ) from teacher
SQL = SELECT count(teacher_id) FROM teacher
natsql:
select count ( _ ) from _ | select count ( teacher.teacher_id ) from teacher

SQL:
SELECT count(teacher_id) FROM teacher
self correction:
SELECT count(Teacher_ID) FROM teacher

index is 382
SELECT count(*) FROM teacher
What is the total count of teachers?
schema_links:
What is the total count of teachers? | teacher : teacher.teacher_id , teacher.name , teacher.age , teacher.hometown , teacher.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( teacher.teacher_id ) from teacher
SQL = SELECT count(teacher_id) FROM teacher
natsql:
select count ( _ ) from _ | select count ( teacher.teacher_id ) from teacher

SQL:
SELECT count(teacher_id) FROM teacher
self correction:
SELECT count(*) FROM teacher

index is 383
SELECT Name FROM teacher ORDER BY Age ASC
List the names of teachers in ascending order of age.
schema_links:
List the names of teachers in ascending order of age. | teacher : teacher.name , teacher.age , teacher.teacher_id , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql and SQL generation:
select _ from _ order by _ asc | select teacher.name from teacher order by teacher.age asc
SQL = SELECT name FROM teacher ORDER BY age ASC
natsql:
select _ from _ order by _ asc | select teacher.name from teacher order by teacher.age asc

SQL:
SELECT name FROM teacher ORDER BY age ASC
self correction:
SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC

index is 384
SELECT Name FROM teacher ORDER BY Age ASC
What are the names of the teachers ordered by ascending age?
schema_links:
What are the names of the teachers ordered by ascending age? | teacher : teacher.name , teacher.age , teacher.teacher_id , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql and SQL generation:
select _ from _ order by _ asc | select teacher.name from teacher order by teacher.age asc
SQL = SELECT name FROM teacher ORDER BY age ASC
natsql:
select _ from _ order by _ asc | select teacher.name from teacher order by teacher.age asc

SQL:
SELECT name FROM teacher ORDER BY age ASC
self correction:
SELECT teacher.Name  FROM teacher  ORDER BY teacher.Age ASC

index is 385
SELECT Age ,  Hometown FROM teacher
What are the age and hometown of teachers?
schema_links:
What are the age and hometown of teachers? | teacher : teacher.age , teacher.hometown , teacher.name , teacher.teacher_id , teacher.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*
natsql and SQL generation:
select _ , _ from _ | select teacher.age , teacher.hometown from teacher
SQL = SELECT age ,  hometown FROM teacher
natsql:
select _ , _ from _ | select teacher.age , teacher.hometown from teacher

SQL:
SELECT age ,  hometown FROM teacher
self correction:
SELECT Age, Hometown FROM teacher

index is 386
SELECT Age ,  Hometown FROM teacher
What is the age and hometown of every teacher?
schema_links:
What is the age and hometown of every teacher? | teacher : teacher.age , teacher.hometown , teacher.name , teacher.teacher_id , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql and SQL generation:
select _ , _ from _ | select teacher.age , teacher.hometown from teacher
SQL = SELECT age ,  hometown FROM teacher
natsql:
select _ , _ from _ | select teacher.age , teacher.hometown from teacher

SQL:
SELECT age ,  hometown FROM teacher
self correction:
SELECT teacher.Age, teacher.Hometown FROM teacher

index is 387
select name from teacher where hometown != "little lever urban district"
List the name of teachers whose hometown is not `` Little Lever Urban District '' .
schema_links:
List the name of teachers whose hometown is not `` Little Lever Urban District '' . | teacher : teacher.hometown ( Little Lever Urban District ) , teacher.name , teacher.teacher_id , teacher.age , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql and SQL generation:
select _ from _ where _ != _ | select teacher.name from teacher where teacher.hometown != 'Little Lever Urban District'
SQL = SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District'
natsql:
select _ from _ where _ != _ | select teacher.name from teacher where teacher.hometown != 'Little Lever Urban District'

SQL:
SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District'
self correction:
SELECT name  FROM teacher  WHERE hometown != 'Little Lever Urban District'

index is 388
select name from teacher where hometown != "little lever urban district"
What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?
schema_links:
What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ? | teacher : teacher.hometown ( Little Lever Urban District ) , teacher.name , teacher.teacher_id , teacher.age , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql and SQL generation:
select _ from _ where @.@ != _ | select teacher.name from teacher where teacher.hometown != 'Little Lever Urban District'
SQL = SELECT name FROM teacher WHERE hometown  !=  'Little Lever Urban District'
natsql:
select _ from _ where @.@ != _ | select teacher.name from teacher where teacher.hometown != 'Little Lever Urban District'

SQL:
SELECT name FROM teacher WHERE hometown  !=  'Little Lever Urban District'
self correction:
SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District'

index is 389
SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33
Show the name of teachers aged either 32 or 33?
schema_links:
Show the name of teachers aged either 32 or 33? | teacher : teacher.name , teacher.age , teacher.teacher_id , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql and SQL generation:
select _ from _ where _ or _ | select teacher.name from teacher where teacher.age = 32 or teacher.age = 33
SQL = SELECT name FROM teacher WHERE age = 32 OR age = 33
natsql:
select _ from _ where _ or _ | select teacher.name from teacher where teacher.age = 32 or teacher.age = 33

SQL:
SELECT name FROM teacher WHERE age = 32 OR age = 33
self correction:
SELECT teacher.Name FROM teacher WHERE teacher.Age = 32 OR teacher.Age = 33

index is 390
SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33
What are the names of the teachers who are aged either 32 or 33?
schema_links:
What are the names of the teachers who are aged either 32 or 33? | teacher : teacher.name , teacher.age , teacher.teacher_id , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql and SQL generation:
select distinct _ from _ where @.@ = _ or @.@ = _ | select distinct teacher.name from teacher where teacher.age = 32 or teacher.age = 33
SQL = SELECT DISTINCT name FROM teacher WHERE age = 32 OR age = 33
natsql:
select distinct _ from _ where @.@ = _ or @.@ = _ | select distinct teacher.name from teacher where teacher.age = 32 or teacher.age = 33

SQL:
SELECT DISTINCT name FROM teacher WHERE age = 32 OR age = 33
self correction:
SELECT teacher.Name FROM teacher WHERE teacher.Age IN (32, 33)

index is 391
SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
What is the hometown of the youngest teacher?
schema_links:
What is the hometown of the youngest teacher? | teacher : teacher.hometown , teacher.age , teacher.name , teacher.teacher_id , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql and SQL generation:
select _ from _ where _ = min ( _ ) | select teacher.hometown from teacher where teacher.age = min ( teacher.age )
SQL = SELECT hometown FROM teacher WHERE age  =  (SELECT min(age) FROM teacher)
natsql:
select _ from _ where _ = min ( _ ) | select teacher.hometown from teacher where teacher.age = min ( teacher.age )

SQL:
SELECT hometown FROM teacher WHERE age  =  (SELECT min(age) FROM teacher)
self correction:
SELECT hometown  FROM teacher  WHERE age = (SELECT min(age) FROM teacher) ORDER BY age ASC  LIMIT 1;

index is 392
SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
Where is the youngest teacher from?
schema_links:
Where is the youngest teacher from? | teacher : teacher.age , teacher.hometown , teacher.name , teacher.teacher_id , teacher.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*
natsql and SQL generation:
select _ from _ order by _ limit _ | select teacher.hometown from teacher order by teacher.age limit 1
SQL = SELECT hometown FROM teacher ORDER BY age LIMIT 1
natsql:
select _ from _ order by _ limit _ | select teacher.hometown from teacher order by teacher.age limit 1

SQL:
SELECT hometown FROM teacher ORDER BY age LIMIT 1
self correction:
SELECT teacher.Hometown FROM teacher ORDER BY teacher.Age ASC LIMIT 1

index is 393
SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown
Show different hometown of teachers and the number of teachers from each hometown.
schema_links:
Show different hometown of teachers and the number of teachers from each hometown. | teacher : teacher.hometown , teacher.name , teacher.age , teacher.teacher_id , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql and SQL generation:
select distinct _ , count ( _ ) from _ group by _ | select distinct teacher.hometown , count ( teacher.teacher_id ) from teacher group by teacher.hometown
SQL = SELECT DISTINCT hometown , count(teacher_id) FROM teacher GROUP BY hometown
natsql:
select distinct _ , count ( _ ) from _ group by _ | select distinct teacher.hometown , count ( teacher.teacher_id ) from teacher group by teacher.hometown

SQL:
SELECT DISTINCT hometown , count(teacher_id) FROM teacher GROUP BY hometown
self correction:
SELECT hometown, COUNT(*) AS num_teachers FROM teacher GROUP BY hometown

index is 394
SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown
For each hometown, how many teachers are there?
schema_links:
For each hometown, how many teachers are there? | teacher : teacher.hometown , teacher.name , teacher.age , teacher.teacher_id , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select teacher.hometown , count ( teacher.* ) from teacher group by teacher.hometown
SQL = SELECT hometown ,  count(*) FROM teacher GROUP BY hometown
natsql:
select _ , count ( _ ) from _ group by _ | select teacher.hometown , count ( teacher.* ) from teacher group by teacher.hometown

SQL:
SELECT hometown ,  count(*) FROM teacher GROUP BY hometown
self correction:
SELECT hometown, COUNT(*) AS teacher_count FROM teacher GROUP BY hometown

index is 395
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
List the most common hometown of teachers.
schema_links:
List the most common hometown of teachers. | teacher : teacher.hometown , teacher.name , teacher.age , teacher.teacher_id , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ order by count ( _ ) desc limit _ | select teacher.hometown , count ( teacher.hometown ) from teacher group by teacher.hometown order by count ( teacher.hometown ) desc limit 1
SQL = SELECT hometown , count(hometown) FROM teacher GROUP BY hometown ORDER BY count(hometown) DESC LIMIT 1
natsql:
select _ , count ( _ ) from _ group by _ order by count ( _ ) desc limit _ | select teacher.hometown , count ( teacher.hometown ) from teacher group by teacher.hometown order by count ( teacher.hometown ) desc limit 1

SQL:
SELECT hometown , count(hometown) FROM teacher GROUP BY hometown ORDER BY count(hometown) DESC LIMIT 1
self correction:
SELECT teacher.Hometown, COUNT(teacher.Hometown) AS hometown_count FROM teacher GROUP BY teacher.Hometown ORDER BY hometown_count DESC LIMIT 1

index is 396
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
What is the most commmon hometowns for teachers?
schema_links:
What is the most commmon hometowns for teachers? | teacher : teacher.hometown , teacher.name , teacher.teacher_id , teacher.age , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ order by count ( _ ) desc limit _ | select teacher.hometown , count ( teacher.hometown ) from teacher group by teacher.hometown order by count ( teacher.hometown ) desc limit 1
SQL = SELECT hometown , count(hometown) FROM teacher GROUP BY hometown ORDER BY count(hometown) DESC LIMIT 1
natsql:
select _ , count ( _ ) from _ group by _ order by count ( _ ) desc limit _ | select teacher.hometown , count ( teacher.hometown ) from teacher group by teacher.hometown order by count ( teacher.hometown ) desc limit 1

SQL:
SELECT hometown , count(hometown) FROM teacher GROUP BY hometown ORDER BY count(hometown) DESC LIMIT 1
self correction:
SELECT hometown, COUNT(hometown) AS count FROM teacher GROUP BY hometown ORDER BY count DESC LIMIT 1

index is 397
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2
Show the hometowns shared by at least two teachers.
schema_links:
Show the hometowns shared by at least two teachers. | teacher : teacher.hometown , teacher.teacher_id , teacher.name , teacher.age , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql and SQL generation:
select _ from _ where count ( _ ) > _ group by _ | select teacher.hometown from teacher where count ( teacher.* ) > 1 group by teacher.hometown
SQL = SELECT hometown FROM teacher GROUP BY hometown HAVING count(*)  >  1
natsql:
select _ from _ where count ( _ ) > _ group by _ | select teacher.hometown from teacher where count ( teacher.* ) > 1 group by teacher.hometown

SQL:
SELECT hometown FROM teacher GROUP BY hometown HAVING count(*)  >  1
self correction:
SELECT teacher.Hometown FROM teacher GROUP BY teacher.Hometown HAVING COUNT(DISTINCT teacher.Teacher_ID) > 1

index is 398
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2
What are the towns from which at least two teachers come from?
schema_links:
What are the towns from which at least two teachers come from? | teacher : teacher.hometown , teacher.name , teacher.teacher_id , teacher.age , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql and SQL generation:
select _ from _ where count ( distinct _ ) > _ group by _ | select teacher.hometown from teacher group by teacher.hometown having count ( distinct teacher.teacher_id ) > 1
SQL = SELECT hometown FROM teacher GROUP BY hometown HAVING count(DISTINCT teacher_id) > 1
natsql:
select _ from _ where count ( distinct _ ) > _ group by _ | select teacher.hometown from teacher group by teacher.hometown having count ( distinct teacher.teacher_id ) > 1

SQL:
SELECT hometown FROM teacher GROUP BY hometown HAVING count(DISTINCT teacher_id) > 1
self correction:
SELECT hometown  FROM teacher  GROUP BY hometown  HAVING COUNT(DISTINCT teacher_id) > 1

index is 399
SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID
Show names of teachers and the courses they are arranged to teach.
schema_links:
Show names of teachers and the courses they are arranged to teach. | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.teacher_id , course_arrange.course_id , course_arrange.grade , course_arrange.*
natsql and SQL generation:
select _ , _ from _ join _ on _._ = _._ | select teacher.name , course.course from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course_arrange.course_id = course.course_id
SQL = SELECT teacher.name , course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id
natsql:
select _ , _ from _ join _ on _._ = _._ | select teacher.name , course.course from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course_arrange.course_id = course.course_id

SQL:
SELECT teacher.name , course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id
self correction:
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID

index is 400
SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID
What is the name of each teacher and what course they teach?
schema_links:
What is the name of each teacher and what course they teach? | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql and SQL generation:
select _ , _ from _ join _ on @.@ = @.@ | select teacher.name , course.course from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course_arrange.course_id = course.course_id
SQL = SELECT teacher.name , course.course FROM teacher JOIN course_arrange ON teacher.teacher_id  =  course_arrange.teacher_id JOIN course ON course_arrange.course_id  =  course.course_id
natsql:
select _ , _ from _ join _ on @.@ = @.@ | select teacher.name , course.course from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course_arrange.course_id = course.course_id

SQL:
SELECT teacher.name , course.course FROM teacher JOIN course_arrange ON teacher.teacher_id  =  course_arrange.teacher_id JOIN course ON course_arrange.course_id  =  course.course_id
self correction:
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID

index is 401
SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name
Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.
schema_links:
Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name. | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course_arrange : course_arrange.teacher_id , course_arrange.course_id , course_arrange.grade , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*
natsql and SQL generation:
select _ , _ from _ order by _ asc | select teacher.name , course.course from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course.course_id = course_arrange.course_id order by teacher.name asc
SQL = SELECT name , course FROM teacher JOIN course_arrange ON teacher.teacher_id  =  course_arrange.teacher_id JOIN course ON course.course_id  =  course_arrange.course_id ORDER BY name ASC
natsql:
select _ , _ from _ order by _ asc | select teacher.name , course.course from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course.course_id = course_arrange.course_id order by teacher.name asc

SQL:
SELECT name , course FROM teacher JOIN course_arrange ON teacher.teacher_id  =  course_arrange.teacher_id JOIN course ON course.course_id  =  course_arrange.course_id ORDER BY name ASC
self correction:
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course.Course_ID = course_arrange.Course_ID ORDER BY teacher.Name ASC

index is 402
SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name
What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?
schema_links:
What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher? | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.teacher_id , course_arrange.grade , course_arrange.course_id , course_arrange.*
natsql and SQL generation:
select _ , _ from _ order by _ asc | select teacher.name , course.course from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course_arrange.course_id = course.course_id order by teacher.name asc
SQL = SELECT T1.name , T3.course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id JOIN course AS T3 ON T2.course_id = T3.course_id ORDER BY T1.name ASC
natsql:
select _ , _ from _ order by _ asc | select teacher.name , course.course from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course_arrange.course_id = course.course_id order by teacher.name asc

SQL:
SELECT T1.name , T3.course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id JOIN course AS T3 ON T2.course_id = T3.course_id ORDER BY T1.name ASC
self correction:
SELECT T1.Name, T3.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID ORDER BY T1.Name ASC

index is 403
SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "Math"
Show the name of the teacher for the math course.
schema_links:
Show the name of the teacher for the math course. | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course : course.course ( Math ) , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.course_id , course_arrange.teacher_id , course_arrange.grade , course_arrange.*
natsql and SQL generation:
select _ from _ where @.@ = _ | select teacher.name from teacher where @.@ = (SELECT teacher_id FROM course_arrange WHERE course_id = (SELECT course_id FROM course WHERE course = 'Math'))
SQL = SELECT name FROM teacher WHERE teacher_id  =  (SELECT teacher_id FROM course_arrange WHERE course_id  =  (SELECT course_id FROM course WHERE course  =  'Math'))
natsql:
select _ from _ where @.@ = _ | select teacher.name from teacher where @.@ = (SELECT teacher_id FROM course_arrange WHERE course_id = (SELECT course_id FROM course WHERE course = 'Math'))

SQL:
SELECT name FROM teacher WHERE teacher_id  =  (SELECT teacher_id FROM course_arrange WHERE course_id  =  (SELECT course_id FROM course WHERE course  =  'Math'))
self correction:
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course.Course_ID = course_arrange.Course_ID WHERE course.Course = 'Math'

index is 404
SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "Math"
What are the names of the people who teach math courses?
schema_links:
What are the names of the people who teach math courses? | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course : course.course ( Math ) , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*
natsql and SQL generation:
select _ from _ where _ = 'Math' | select teacher.name from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course.course_id = course_arrange.course_id where course.course = 'Math'
SQL = SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_arrange WHERE course_id IN (SELECT course_id FROM course WHERE course = 'Math'))
natsql:
select _ from _ where _ = 'Math' | select teacher.name from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course.course_id = course_arrange.course_id where course.course = 'Math'

SQL:
SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_arrange WHERE course_id IN (SELECT course_id FROM course WHERE course = 'Math'))
self correction:
SELECT name  FROM teacher  WHERE teacher_id IN      (SELECT teacher_id      FROM course_arrange      WHERE course_id IN          (SELECT course_id          FROM course          WHERE course = 'Math'))

index is 405
SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name
Show names of teachers and the number of courses they teach.
schema_links:
Show names of teachers and the number of courses they teach. | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.teacher_id , course_arrange.course_id , course_arrange.grade , course_arrange.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select teacher.name , count ( course_arrange.* ) from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id group by teacher.name
SQL = SELECT T1.name ,  count(T2.*) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.name
natsql:
select _ , count ( _ ) from _ group by _ | select teacher.name , count ( course_arrange.* ) from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id group by teacher.name

SQL:
SELECT T1.name ,  count(T2.*) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.name
self correction:
SELECT T1.Name, COUNT(T2.Course_ID) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Name

index is 406
SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name
What are the names of the teachers and how many courses do they teach?
schema_links:
What are the names of the teachers and how many courses do they teach? | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.teacher_id , course_arrange.grade , course_arrange.course_id , course_arrange.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select teacher.name , count ( course_arrange.course_id ) from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id group by teacher.name
SQL = SELECT name ,  COUNT(course_id) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY name
natsql:
select _ , count ( _ ) from _ group by _ | select teacher.name , count ( course_arrange.course_id ) from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id group by teacher.name

SQL:
SELECT name ,  COUNT(course_id) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY name
self correction:
SELECT T1.Name, COUNT(T2.Course_ID)  FROM teacher AS T1  JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID  GROUP BY T1.Name

index is 407
SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2
Show names of teachers that teach at least two courses.
schema_links:
Show names of teachers that teach at least two courses. | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course_arrange : course_arrange.teacher_id , course_arrange.grade , course_arrange.course_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*
natsql and SQL generation:
select _ from _ where count ( _ ) > _ group by _ | select teacher.name from teacher where count ( teacher.teacher_id ) > 1 group by teacher.name
SQL = SELECT name FROM teacher GROUP BY name HAVING count(*)  >  1
natsql:
select _ from _ where count ( _ ) > _ group by _ | select teacher.name from teacher where count ( teacher.teacher_id ) > 1 group by teacher.name

SQL:
SELECT name FROM teacher GROUP BY name HAVING count(*)  >  1
self correction:
SELECT name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID HAVING count(DISTINCT course_arrange.Course_ID) >= 2

index is 408
SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2
What are the names of the teachers who teach at least two courses?
schema_links:
What are the names of the teachers who teach at least two courses? | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course_arrange : course_arrange.teacher_id , course_arrange.grade , course_arrange.course_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*
natsql and SQL generation:
select distinct _ from _ where count ( _ ) >= _ group by _ | select distinct teacher.name from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id group by teacher.name having count ( distinct course_arrange.course_id ) >= 2
SQL = SELECT DISTINCT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T1.Name HAVING count(DISTINCT T2.Course_ID) >= 2
natsql:
select distinct _ from _ where count ( _ ) >= _ group by _ | select distinct teacher.name from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id group by teacher.name having count ( distinct course_arrange.course_id ) >= 2

SQL:
SELECT DISTINCT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T1.Name HAVING count(DISTINCT T2.Course_ID) >= 2
self correction:
SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Name HAVING COUNT(DISTINCT T2.Course_ID) >= 2

index is 409
SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
List the names of teachers who have not been arranged to teach courses.
schema_links:
List the names of teachers who have not been arranged to teach courses. | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course_arrange : course_arrange.teacher_id , course_arrange.grade , course_arrange.course_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ ) | select teacher.name from teacher where teacher.teacher_id not in ( select course_arrange.teacher_id from course_arrange )
SQL = SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange)
natsql:
select _ from _ where _ not in ( select _ from _ ) | select teacher.name from teacher where teacher.teacher_id not in ( select course_arrange.teacher_id from course_arrange )

SQL:
SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange)
self correction:
SELECT name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)

index is 410
SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
What are the names of the teachers whose courses have not been arranged?
schema_links:
What are the names of the teachers whose courses have not been arranged? | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course_arrange : course_arrange.teacher_id , course_arrange.grade , course_arrange.course_id , course_arrange.* | course : course.course , course.course_id , course.staring_date , course.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ ) | select teacher.name from teacher where teacher.teacher_id not in ( select course_arrange.teacher_id from course_arrange )
SQL = SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange)
natsql:
select _ from _ where _ not in ( select _ from _ ) | select teacher.name from teacher where teacher.teacher_id not in ( select course_arrange.teacher_id from course_arrange )

SQL:
SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange)
self correction:
SELECT name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)

index is 411
SELECT count(*) FROM visitor WHERE age  <  30
How many visitors below age 30 are there?
schema_links:
How many visitors below age 30 are there? | visitor : visitor.age , visitor.name , visitor.level_of_membership , visitor.id , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.*
natsql and SQL generation:

natsql:

SQL:
SELECT count(*) FROM visitor WHERE age < 30
self correction:
SELECT count(*) FROM visitor WHERE Age < 30

index is 412
SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC
Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.
schema_links:
Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low. | visitor : visitor.level_of_membership , visitor.name , visitor.id , visitor.age , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.*
natsql and SQL generation:
select _ from _ where _ > _ order by _ desc | select visitor.name from visitor where visitor.level_of_membership > 4 order by visitor.level_of_membership desc
SQL = SELECT name FROM visitor WHERE level_of_membership  >  4 ORDER BY level_of_membership DESC
natsql:
select _ from _ where _ > _ order by _ desc | select visitor.name from visitor where visitor.level_of_membership > 4 order by visitor.level_of_membership desc

SQL:
SELECT name FROM visitor WHERE level_of_membership  >  4 ORDER BY level_of_membership DESC
self correction:
SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Level_of_membership DESC

index is 413
SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4
What is the average age of the visitors whose membership level is not higher than 4?
schema_links:
What is the average age of the visitors whose membership level is not higher than 4? | visitor : visitor.level_of_membership , visitor.age , visitor.name , visitor.id , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.*
natsql and SQL generation:
select avg ( _ ) from _ where @.@ <= _ | select avg ( visitor.age ) from visitor where visitor.level_of_membership <= 4
SQL = SELECT avg(age) FROM visitor WHERE level_of_membership  <=  4
natsql:
select avg ( _ ) from _ where @.@ <= _ | select avg ( visitor.age ) from visitor where visitor.level_of_membership <= 4

SQL:
SELECT avg(age) FROM visitor WHERE level_of_membership  <=  4
self correction:
SELECT avg(Age) AS Average_Age FROM visitor WHERE Level_of_membership <= 4

index is 414
SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC
Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.
schema_links:
Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young. | visitor : visitor.level_of_membership , visitor.name , visitor.age , visitor.id , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.*
natsql and SQL generation:
select _ , _ from _ where _ > _ order by _ asc | select visitor.name , visitor.level_of_membership from visitor where visitor.level_of_membership > 4 order by visitor.age asc
SQL = SELECT name ,  level_of_membership FROM visitor WHERE level_of_membership  >  4 ORDER BY age ASC
natsql:
select _ , _ from _ where _ > _ order by _ asc | select visitor.name , visitor.level_of_membership from visitor where visitor.level_of_membership > 4 order by visitor.age asc

SQL:
SELECT name ,  level_of_membership FROM visitor WHERE level_of_membership  >  4 ORDER BY age ASC
self correction:
SELECT visitor.Name, visitor.Level_of_membership  FROM visitor  WHERE visitor.Level_of_membership > 4  ORDER BY visitor.Age ASC

index is 415
SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1
Find the id and name of the museum that has the most staff members?
schema_links:
Find the id and name of the museum that has the most staff members? | museum : museum.museum_id , museum.num_of_staff , museum.name , museum.open_year , museum.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.*
natsql and SQL generation:
select _ , _ from _ order by _ desc limit _ | select museum.museum_id , museum.name from museum order by museum.num_of_staff desc limit 1
SQL = SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1
natsql:
select _ , _ from _ order by _ desc limit _ | select museum.museum_id , museum.name from museum order by museum.num_of_staff desc limit 1

SQL:
SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1
self correction:
SELECT museum_id, name  FROM museum  ORDER BY num_of_staff DESC  LIMIT 1

index is 416
SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009
Find the average number of staff working for the museums that were open before 2009.
schema_links:
Find the average number of staff working for the museums that were open before 2009. | museum : museum.num_of_staff , museum.open_year , museum.museum_id , museum.name , museum.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.*
natsql and SQL generation:
select avg ( _ ) from _ where _ < _ | select avg ( museum.num_of_staff ) from museum where museum.open_year < 2009
SQL = SELECT avg(num_of_staff) FROM museum WHERE open_year < 2009
natsql:
select avg ( _ ) from _ where _ < _ | select avg ( museum.num_of_staff ) from museum where museum.open_year < 2009

SQL:
SELECT avg(num_of_staff) FROM museum WHERE open_year < 2009
self correction:
SELECT avg(Num_of_Staff) FROM museum WHERE Open_Year < 2009

index is 417
SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'
What are the opening year and staff number of the museum named Plaza Museum?
schema_links:
What are the opening year and staff number of the museum named Plaza Museum? | museum : museum.name ( Plaza Museum ) , museum.num_of_staff , museum.open_year , museum.museum_id , museum.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.*
natsql and SQL generation:
select _ , _ from _ where _ = 'Plaza Museum' | select museum.open_year , museum.num_of_staff from museum where museum.name = 'Plaza Museum'
SQL = SELECT open_year ,  num_of_staff FROM museum WHERE name  =  'Plaza Museum'
natsql:
select _ , _ from _ where _ = 'Plaza Museum' | select museum.open_year , museum.num_of_staff from museum where museum.name = 'Plaza Museum'

SQL:
SELECT open_year ,  num_of_staff FROM museum WHERE name  =  'Plaza Museum'
self correction:
SELECT open_year, num_of_staff FROM museum WHERE name = 'Plaza Museum'

index is 418
SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)
find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.
schema_links:
find the names of museums which have more staff than the minimum staff number of all museums opened after 2010. | museum : museum.num_of_staff , museum.open_year , museum.name , museum.museum_id , museum.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.*
natsql and SQL generation:
select _ from _ where @.@ > ( select min ( @.@ ) from _ where @.@ > _ ) | select museum.name from museum where museum.num_of_staff > ( select min ( museum.num_of_staff ) from museum where museum.open_year > 2010 )
SQL = SELECT name FROM museum WHERE num_of_staff > (SELECT min(num_of_staff) FROM museum WHERE open_year > 2010)
natsql:
select _ from _ where @.@ > ( select min ( @.@ ) from _ where @.@ > _ ) | select museum.name from museum where museum.num_of_staff > ( select min ( museum.num_of_staff ) from museum where museum.open_year > 2010 )

SQL:
SELECT name FROM museum WHERE num_of_staff > (SELECT min(num_of_staff) FROM museum WHERE open_year > 2010)
self correction:
SELECT museum.Name FROM museum WHERE museum.Num_of_Staff > (     SELECT MIN(m.Num_of_Staff)     FROM museum AS m     WHERE m.Open_Year > 2010 )

index is 419
SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1
find the id, name and age for visitors who visited some museums more than once.
schema_links:
find the id, name and age for visitors who visited some museums more than once. | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.* | visit : visit.visitor_id , visit.museum_id , visit.total_spent , visit.num_of_ticket , visit.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.*
natsql and SQL generation:
select distinct _ from _ where count ( _ ) > _ group by _ | select distinct visitor.id , visitor.name , visitor.age from visitor join visit on visitor.id = visit.visitor_id group by visitor.id , visitor.name , visitor.age having count (visit.museum_id) > 1
SQL = SELECT DISTINCT visitor.id , visitor.name , visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_ID GROUP BY visitor.id , visitor.name , visitor.age HAVING count(visit.Museum_ID) > 1
natsql:
select distinct _ from _ where count ( _ ) > _ group by _ | select distinct visitor.id , visitor.name , visitor.age from visitor join visit on visitor.id = visit.visitor_id group by visitor.id , visitor.name , visitor.age having count (visit.museum_id) > 1

SQL:
SELECT DISTINCT visitor.id , visitor.name , visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_ID GROUP BY visitor.id , visitor.name , visitor.age HAVING count(visit.Museum_ID) > 1
self correction:
SELECT visitor.ID, visitor.Name, visitor.Age  FROM visitor  JOIN visit ON visitor.ID = visit.visitor_ID  GROUP BY visitor.ID, visitor.Name, visitor.Age  HAVING COUNT(DISTINCT visit.Museum_ID) > 1

index is 420
SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1
What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?
schema_links:
What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets? | visitor : visitor.level_of_membership , visitor.id , visitor.name , visitor.age , visitor.* | visit : visit.total_spent , visit.visitor_id , visit.museum_id , visit.num_of_ticket , visit.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.*
natsql and SQL generation:
select _ , _ , _ from _ where _ = ( select sum ( _ ) from _ ) | select visitor.id , visitor.name , visitor.level_of_membership from visitor where visitor.id = ( select visitor_id from visit group by visitor_id order by sum ( total_spent ) desc limit 1 )
SQL = SELECT id ,  name ,  level_of_membership FROM visitor WHERE id  =  (SELECT visitor_id FROM visit GROUP BY visitor_id ORDER BY sum(Total_spent) DESC LIMIT 1)
natsql:
select _ , _ , _ from _ where _ = ( select sum ( _ ) from _ ) | select visitor.id , visitor.name , visitor.level_of_membership from visitor where visitor.id = ( select visitor_id from visit group by visitor_id order by sum ( total_spent ) desc limit 1 )

SQL:
SELECT id ,  name ,  level_of_membership FROM visitor WHERE id  =  (SELECT visitor_id FROM visit GROUP BY visitor_id ORDER BY sum(Total_spent) DESC LIMIT 1)
self correction:
SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.ID = (   SELECT visit.visitor_ID   FROM visit   GROUP BY visit.visitor_ID   ORDER BY SUM(visit.Total_spent) DESC   LIMIT 1 )

index is 421
SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1
What are the id and name of the museum visited most times?
schema_links:
What are the id and name of the museum visited most times? | museum : museum.museum_id , museum.name , museum.num_of_staff , museum.open_year , museum.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.*
natsql and SQL generation:
select _ , _ from _ group by _ order by count ( _ ) desc limit _ | select museum.museum_id , museum.name from museum group by museum.museum_id , museum.name order by count ( museum.* ) desc limit 1
SQL = SELECT museum_id ,  name FROM museum GROUP BY museum_id , name ORDER BY count(*) DESC LIMIT 1
natsql:
select _ , _ from _ group by _ order by count ( _ ) desc limit _ | select museum.museum_id , museum.name from museum group by museum.museum_id , museum.name order by count ( museum.* ) desc limit 1

SQL:
SELECT museum_id ,  name FROM museum GROUP BY museum_id , name ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT museum_id, name  FROM museum  JOIN visit ON museum.museum_id = visit.museum_id  GROUP BY museum.museum_id, museum.name  ORDER BY COUNT(*) DESC  LIMIT 1

index is 422
SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)
What is the name of the museum that had no visitor yet?
schema_links:
What is the name of the museum that had no visitor yet? | museum : museum.name , museum.museum_id , museum.open_year , museum.num_of_staff , museum.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.*
natsql and SQL generation:
select _ from _ where not exists ( select _ from _ where _._ = _._ ) | select museum.name from museum where not exists ( select * from visit where museum.museum_id = visit.museum_id )
SQL = SELECT name FROM museum WHERE NOT EXISTS (SELECT * FROM visit WHERE museum.Museum_ID  =  visit.Museum_ID)
natsql:
select _ from _ where not exists ( select _ from _ where _._ = _._ ) | select museum.name from museum where not exists ( select * from visit where museum.museum_id = visit.museum_id )

SQL:
SELECT name FROM museum WHERE NOT EXISTS (SELECT * FROM visit WHERE museum.Museum_ID  =  visit.Museum_ID)
self correction:
SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)

index is 423
SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1
Find the name and age of the visitor who bought the most tickets at once.
schema_links:
Find the name and age of the visitor who bought the most tickets at once. | visitor : visitor.age , visitor.name , visitor.id , visitor.level_of_membership , visitor.* | visit : visit.visitor_id , visit.num_of_ticket , visit.museum_id , visit.total_spent , visit.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.*
natsql and SQL generation:
select _ , _ from _ order by _ desc limit _ | select visitor.name , visitor.age from visitor order by visit.num_of_ticket desc limit 1
SQL = SELECT name , age FROM visitor ORDER BY num_of_ticket DESC LIMIT 1
natsql:
select _ , _ from _ order by _ desc limit _ | select visitor.name , visitor.age from visitor order by visit.num_of_ticket desc limit 1

SQL:
SELECT name , age FROM visitor ORDER BY num_of_ticket DESC LIMIT 1
self correction:
SELECT visitor.Name, visitor.Age  FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID ORDER BY visit.Num_of_Ticket DESC LIMIT 1

index is 424
SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit
What are the average and maximum number of tickets bought in all visits?
schema_links:
What are the average and maximum number of tickets bought in all visits? | visit : visit.num_of_ticket , visit.museum_id , visit.visitor_id , visit.total_spent , visit.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.*
natsql and SQL generation:
select avg ( _ ) , max ( _ ) from _
SQL = SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit
natsql:
select avg ( _ ) , max ( _ ) from _

SQL:
SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit
self correction:
SELECT avg(Num_of_Ticket) AS Average_Tickets, max(Num_of_Ticket) AS Maximum_Tickets FROM visit

index is 425
SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1
What is the total ticket expense of the visitors whose membership level is 1?
schema_links:
What is the total ticket expense of the visitors whose membership level is 1? | visitor : visitor.level_of_membership , visitor.name , visitor.id , visitor.age , visitor.* | visit : visit.total_spent , visit.visitor_id , visit.num_of_ticket , visit.museum_id , visit.* | museum : museum.name , museum.museum_id , museum.num_of_staff , museum.open_year , museum.*
natsql and SQL generation:
select sum ( _ ) from _ where _ = _ | select sum ( visit.total_spent ) from visit where visitor.level_of_membership = 1
SQL = SELECT sum(total_spent) FROM visit WHERE visitor.level_of_membership = 1
natsql:
select sum ( _ ) from _ where _ = _ | select sum ( visit.total_spent ) from visit where visitor.level_of_membership = 1

SQL:
SELECT sum(total_spent) FROM visit WHERE visitor.level_of_membership = 1
self correction:
SELECT SUM(visit.Total_spent) AS TotalTicketExpense FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visitor.Level_of_membership = 1

index is 426
SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011
What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?
schema_links:
What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011? | museum : museum.open_year , museum.name , museum.museum_id , museum.num_of_staff , museum.* | visitor : visitor.name , visitor.id , visitor.age , visitor.level_of_membership , visitor.* | visit : visit.visitor_id , visit.museum_id , visit.total_spent , visit.num_of_ticket , visit.*
natsql and SQL generation:
select distinct _ from _ where _ and _ | select distinct visitor.name from visitor where visitor.id in (select visitor_id from visit where museum_id in (select museum_id from museum where open_year < 2009)) and visitor.id in (select visitor_id from visit where museum_id in (select museum_id from museum where open_year > 2011))
SQL = SELECT DISTINCT T1.name FROM visitor AS T1 WHERE T1.id  IN  (SELECT T2.visitor_id FROM visit AS T2 WHERE T2.museum_id  IN  (SELECT T3.museum_id FROM museum AS T3 WHERE T3.open_year  <  2009)) AND T1.id  IN  (SELECT T4.visitor_id FROM visit AS T4 WHERE T4.museum_id  IN  (SELECT T5.museum_id FROM museum AS T5 WHERE T5.open_year  >  2011))
natsql:
select distinct _ from _ where _ and _ | select distinct visitor.name from visitor where visitor.id in (select visitor_id from visit where museum_id in (select museum_id from museum where open_year < 2009)) and visitor.id in (select visitor_id from visit where museum_id in (select museum_id from museum where open_year > 2011))

SQL:
SELECT DISTINCT T1.name FROM visitor AS T1 WHERE T1.id  IN  (SELECT T2.visitor_id FROM visit AS T2 WHERE T2.museum_id  IN  (SELECT T3.museum_id FROM museum AS T3 WHERE T3.open_year  <  2009)) AND T1.id  IN  (SELECT T4.visitor_id FROM visit AS T4 WHERE T4.museum_id  IN  (SELECT T5.museum_id FROM museum AS T5 WHERE T5.open_year  >  2011))
self correction:
SELECT T1.Name FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.Visitor_ID JOIN museum AS T3 ON T2.Museum_ID = T3.Museum_ID WHERE T3.Open_Year < 2009 AND T1.ID IN (   SELECT T4.Visitor_ID   FROM visit AS T4   JOIN museum AS T5 ON T4.Museum_ID = T5.Museum_ID   WHERE T5.Open_Year > 2011 )

index is 427
SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)
Find the number of visitors who did not visit any museum opened after 2010.
schema_links:
Find the number of visitors who did not visit any museum opened after 2010. | museum : museum.open_year , museum.name , museum.museum_id , museum.num_of_staff , museum.* | visit : visit.visitor_id , visit.museum_id , visit.num_of_ticket , visit.total_spent , visit.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.*
natsql and SQL generation:
select count ( distinct _ ) from _ where _ not in ( select _ from _ where _ > _ ) | select count ( distinct visitor.visitor_id ) from visitor where visitor.visitor_id not in ( select visit.visitor_id from visit where visit.museum_id in ( select museum.museum_id from museum where museum.open_year > 2010 ) )
SQL = SELECT COUNT(DISTINCT T1.visitor_id) FROM visitor AS T1 WHERE T1.visitor_id NOT IN (SELECT T2.visitor_id FROM visit AS T2 WHERE T2.museum_id IN (SELECT T3.museum_id FROM museum AS T3 WHERE T3.open_year > 2010))
natsql:
select count ( distinct _ ) from _ where _ not in ( select _ from _ where _ > _ ) | select count ( distinct visitor.visitor_id ) from visitor where visitor.visitor_id not in ( select visit.visitor_id from visit where visit.museum_id in ( select museum.museum_id from museum where museum.open_year > 2010 ) )

SQL:
SELECT COUNT(DISTINCT T1.visitor_id) FROM visitor AS T1 WHERE T1.visitor_id NOT IN (SELECT T2.visitor_id FROM visit AS T2 WHERE T2.museum_id IN (SELECT T3.museum_id FROM museum AS T3 WHERE T3.open_year > 2010))
self correction:
SELECT COUNT(DISTINCT T1.ID)  FROM visitor AS T1  WHERE T1.ID NOT IN (   SELECT T2.visitor_ID    FROM visit AS T2    WHERE T2.Museum_ID IN (     SELECT T3.Museum_ID      FROM museum AS T3      WHERE T3.Open_Year > 2010   ) )

index is 428
SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008
How many museums were opened after 2013 or before 2008?
schema_links:
How many museums were opened after 2013 or before 2008? | museum : museum.open_year , museum.museum_id , museum.name , museum.num_of_staff , museum.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.*
natsql and SQL generation:
select count ( distinct _ ) from _ where _ or _ | select count ( distinct museum.museum_id ) from museum where museum.open_year > 2013 or museum.open_year < 2008
SQL = SELECT count(DISTINCT museum_id) FROM museum WHERE open_year > 2013 OR open_year < 2008
natsql:
select count ( distinct _ ) from _ where _ or _ | select count ( distinct museum.museum_id ) from museum where museum.open_year > 2013 or museum.open_year < 2008

SQL:
SELECT count(DISTINCT museum_id) FROM museum WHERE open_year > 2013 OR open_year < 2008
self correction:
SELECT count(DISTINCT Museum_ID) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008

index is 429
SELECT count(*) FROM players
Find the total number of players.
schema_links:
Find the total number of players. | players : players.player_id , players.first_name , players.hand , players.last_name , players.birth_date , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.round , matches.loser_name , matches.match_num , matches.minutes , matches.score , matches.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( * ) from players
SQL = SELECT COUNT(*) FROM players
natsql:
select count ( _ ) from _ | select count ( * ) from players

SQL:
SELECT COUNT(*) FROM players
self correction:
SELECT COUNT(player_id) FROM players

index is 430
SELECT count(*) FROM players
How many players are there?
schema_links:
How many players are there? | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.round , matches.score , matches.match_num , matches.minutes , matches.surface , matches.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( players.player_id ) from players
SQL = SELECT count(player_id) FROM players
natsql:
select count ( _ ) from _ | select count ( players.player_id ) from players

SQL:
SELECT count(player_id) FROM players
self correction:
SELECT count(DISTINCT player_id) FROM players

index is 431
SELECT count(*) FROM matches
Find the total number of matches.
schema_links:
Find the total number of matches. | matches : matches.match_num , matches.loser_name , matches.minutes , matches.round , matches.score , matches.* | players : players.player_id , players.first_name , players.hand , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( matches.match_num ) from matches
SQL = SELECT count(match_num) FROM matches
natsql:
select count ( _ ) from _ | select count ( matches.match_num ) from matches

SQL:
SELECT count(match_num) FROM matches
self correction:
SELECT COUNT(match_num) FROM matches;

index is 432
SELECT count(*) FROM matches
Count the number of matches.
schema_links:
Count the number of matches. | matches : matches.match_num , matches.loser_name , matches.loser_hand , matches.loser_id , matches.minutes , matches.* | players : players.player_id , players.first_name , players.hand , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( matches.match_num ) from matches
SQL = SELECT count(*) FROM matches
natsql:
select count ( _ ) from _ | select count ( matches.match_num ) from matches

SQL:
SELECT count(*) FROM matches
self correction:
SELECT count(*) FROM matches

index is 433
SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
List the first name and birth date of all players from the country with code USA.
schema_links:
List the first name and birth date of all players from the country with code USA. | players : players.first_name , players.birth_date , players.country_code ( USA ) , players.last_name ( Date ) , players.player_id , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.loser_ioc ( USA ) , matches.winner_ioc ( USA ) , matches.minutes , matches.round , matches.score , matches.*
natsql and SQL generation:
select _ , _ from _ where @.@ = _ | select players.first_name , players.birth_date from players where players.country_code = 'USA'
SQL = SELECT first_name ,  birth_date FROM players WHERE country_code = 'USA'
natsql:
select _ , _ from _ where @.@ = _ | select players.first_name , players.birth_date from players where players.country_code = 'USA'

SQL:
SELECT first_name ,  birth_date FROM players WHERE country_code = 'USA'
self correction:
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'

index is 434
SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
What are the first names and birth dates of players from the USA?
schema_links:
What are the first names and birth dates of players from the USA? | players : players.first_name , players.birth_date , players.country_code ( USA ) , players.player_id , players.hand , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.loser_ioc ( USA ) , matches.winner_ioc ( USA ) , matches.round , matches.score , matches.match_num , matches.*
natsql and SQL generation:
select _ , _ from _ where @.@ = 'USA' | select players.first_name , players.birth_date from players where players.country_code = 'USA'
SQL = SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
natsql:
select _ , _ from _ where @.@ = 'USA' | select players.first_name , players.birth_date from players where players.country_code = 'USA'

SQL:
SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
self correction:
SELECT players.first_name, players.birth_date  FROM players  WHERE players.country_code = 'USA'

index is 435
SELECT avg(loser_age) ,  avg(winner_age) FROM matches
Find the average age of losers and winners of all matches.
schema_links:
Find the average age of losers and winners of all matches. | matches : matches.loser_age , matches.winner_age , matches.loser_name , matches.winner_entry , matches.loser_entry , matches.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select avg ( _ ) , avg ( _ ) from _
SQL = SELECT avg(loser_age) ,  avg(winner_age) FROM matches
natsql:
select avg ( _ ) , avg ( _ ) from _

SQL:
SELECT avg(loser_age) ,  avg(winner_age) FROM matches
self correction:
SELECT avg(loser_age), avg(winner_age) FROM matches

index is 436
SELECT avg(loser_age) ,  avg(winner_age) FROM matches
What are the average ages of losers and winners across matches?
schema_links:
What are the average ages of losers and winners across matches? | matches : matches.loser_age , matches.winner_age , matches.loser_name , matches.loser_entry , matches.winner_entry , matches.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.tours , rankings.ranking_date , rankings.player_id , rankings.ranking_points , rankings.*
natsql and SQL generation:
select avg ( _ ) , avg ( _ ) from _ | select avg ( matches.loser_age ) , avg ( matches.winner_age ) from matches
SQL = SELECT avg(loser_age) , avg(winner_age) FROM matches
natsql:
select avg ( _ ) , avg ( _ ) from _ | select avg ( matches.loser_age ) , avg ( matches.winner_age ) from matches

SQL:
SELECT avg(loser_age) , avg(winner_age) FROM matches
self correction:
SELECT avg(loser_age) AS average_loser_age, avg(winner_age) AS average_winner_age FROM matches

index is 437
SELECT avg(winner_rank) FROM matches
Find the average rank of winners in all matches.
schema_links:
Find the average rank of winners in all matches. | matches : matches.winner_rank , matches.winner_rank_points , matches.match_num , matches.winner_name , matches.winner_seed , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.ranking_date , rankings.* | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.*
natsql and SQL generation:
select avg ( _ ) from _ | select avg ( matches.winner_rank ) from matches
SQL = SELECT avg(winner_rank) FROM matches
natsql:
select avg ( _ ) from _ | select avg ( matches.winner_rank ) from matches

SQL:
SELECT avg(winner_rank) FROM matches
self correction:
SELECT AVG(winner_rank) AS average_rank FROM matches

index is 438
SELECT avg(winner_rank) FROM matches
What is the average rank for winners in all matches?
schema_links:
What is the average rank for winners in all matches? | matches : matches.winner_rank , matches.winner_rank_points , matches.winner_id , matches.winner_name , matches.match_num , matches.* | rankings : rankings.ranking , rankings.ranking_points , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.*
natsql and SQL generation:
select avg ( _ ) from _ | select avg ( matches.winner_rank ) from matches
SQL = SELECT avg(winner_rank) FROM matches
natsql:
select avg ( _ ) from _ | select avg ( matches.winner_rank ) from matches

SQL:
SELECT avg(winner_rank) FROM matches
self correction:
SELECT AVG(winner_rank) FROM matches

index is 439
SELECT min(loser_rank) FROM matches
Find the highest rank of losers in all matches.
schema_links:
Find the highest rank of losers in all matches. | matches : matches.loser_rank , matches.loser_rank_points , matches.loser_name , matches.loser_id , matches.loser_entry , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.*
natsql and SQL generation:
select max ( _ ) from _ | select max ( matches.loser_rank ) from matches
SQL = SELECT max(loser_rank) FROM matches
natsql:
select max ( _ ) from _ | select max ( matches.loser_rank ) from matches

SQL:
SELECT max(loser_rank) FROM matches
self correction:
SELECT max(loser_rank) AS highest_rank FROM matches GROUP BY loser_rank

index is 440
SELECT min(loser_rank) FROM matches
What is the best rank of losers across all matches?
schema_links:
What is the best rank of losers across all matches? | matches : matches.loser_rank , matches.loser_rank_points , matches.loser_name , matches.best_of , matches.loser_id , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.ranking_date , rankings.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.*
natsql and SQL generation:
select max ( _ ) from _ | select max ( matches.loser_rank ) from matches
SQL = SELECT MAX(loser_rank) FROM matches
natsql:
select max ( _ ) from _ | select max ( matches.loser_rank ) from matches

SQL:
SELECT MAX(loser_rank) FROM matches
self correction:
SELECT MAX(loser_rank) AS best_rank_of_losers FROM matches

index is 441
SELECT count(DISTINCT country_code) FROM players
find the number of distinct country codes of all players.
schema_links:
find the number of distinct country codes of all players. | players : players.country_code , players.player_id , players.hand , players.first_name , players.last_name , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct players.country_code ) from players
SQL = SELECT COUNT(DISTINCT country_code) FROM players
natsql:
select count ( distinct _ ) from _ | select count ( distinct players.country_code ) from players

SQL:
SELECT COUNT(DISTINCT country_code) FROM players
self correction:
SELECT COUNT(DISTINCT country_code) FROM players

index is 442
SELECT count(DISTINCT country_code) FROM players
How many distinct countries do players come from?
schema_links:
How many distinct countries do players come from? | players : players.country_code , players.player_id , players.hand , players.birth_date , players.first_name , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct players.country_code ) from players
SQL = SELECT count(DISTINCT country_code) FROM players
natsql:
select count ( distinct _ ) from _ | select count ( distinct players.country_code ) from players

SQL:
SELECT count(DISTINCT country_code) FROM players
self correction:
SELECT count(DISTINCT country_code) AS distinct_countries FROM players

index is 443
SELECT count(DISTINCT loser_name) FROM matches
Find the number of distinct name of losers.
schema_links:
Find the number of distinct name of losers. | matches : matches.loser_name , matches.loser_rank , matches.loser_id , matches.loser_seed , matches.round , matches.* | players : players.last_name , players.hand , players.player_id , players.first_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct matches.loser_name ) from matches
SQL = SELECT count(DISTINCT loser_name) FROM matches
natsql:
select count ( distinct _ ) from _ | select count ( distinct matches.loser_name ) from matches

SQL:
SELECT count(DISTINCT loser_name) FROM matches
self correction:
SELECT count(DISTINCT loser_name) FROM matches

index is 444
SELECT count(DISTINCT loser_name) FROM matches
How many different loser names are there?
schema_links:
How many different loser names are there? | matches : matches.loser_name , matches.loser_rank , matches.round , matches.score , matches.loser_entry , matches.* | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.tours , rankings.ranking_date , rankings.player_id , rankings.ranking_points , rankings.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct matches.loser_name ) from matches
SQL = SELECT count(DISTINCT loser_name) FROM matches
natsql:
select count ( distinct _ ) from _ | select count ( distinct matches.loser_name ) from matches

SQL:
SELECT count(DISTINCT loser_name) FROM matches
self correction:
SELECT count(DISTINCT loser_name) FROM matches

index is 445
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10
Find the name of tourney that has more than 10 matches.
schema_links:
Find the name of tourney that has more than 10 matches. | matches : matches.tourney_id , matches.tourney_name , matches.tourney_level , matches.match_num , matches.tourney_date , matches.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select _ from _ where count ( _ ) > _ group by _ | select matches.tourney_name from matches where count ( matches.match_num ) > 10 group by matches.tourney_name
SQL = SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(match_num) > 10
natsql:
select _ from _ where count ( _ ) > _ group by _ | select matches.tourney_name from matches where count ( matches.match_num ) > 10 group by matches.tourney_name

SQL:
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(match_num) > 10
self correction:
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10

index is 446
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10
What are the names of tournaments that have more than 10 matches?
schema_links:
What are the names of tournaments that have more than 10 matches? | matches : matches.tourney_name , matches.tourney_id , matches.tourney_level , matches.match_num , matches.tourney_date , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | players : players.player_id , players.first_name , players.hand , players.last_name , players.birth_date , players.*
natsql and SQL generation:
select _ from _ where count ( _ ) > _ group by _ | select matches.tourney_name from matches group by matches.tourney_name having count ( matches.match_num ) > 10
SQL = SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(match_num) > 10
natsql:
select _ from _ where count ( _ ) > _ group by _ | select matches.tourney_name from matches group by matches.tourney_name having count ( matches.match_num ) > 10

SQL:
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(match_num) > 10
self correction:
SELECT tourney_name  FROM matches  GROUP BY tourney_name  HAVING COUNT(match_num) > 10

index is 447
SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016
List the names of all winners who played in both 2013 and 2016.
schema_links:
List the names of all winners who played in both 2013 and 2016. | matches : matches.winner_name , matches.year , matches.winner_id , matches.winner_rank , matches.tourney_id , matches.* | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select distinct _ from _ where _ | select distinct matches.winner_name from matches where matches.year = 2013 and matches.winner_id IN (SELECT winner_id FROM matches WHERE year = 2016)
SQL = SELECT DISTINCT winner_name FROM matches WHERE year  =  2013 AND winner_id IN (SELECT winner_id FROM matches WHERE year  =  2016)
natsql:
select distinct _ from _ where _ | select distinct matches.winner_name from matches where matches.year = 2013 and matches.winner_id IN (SELECT winner_id FROM matches WHERE year = 2016)

SQL:
SELECT DISTINCT winner_name FROM matches WHERE year  =  2013 AND winner_id IN (SELECT winner_id FROM matches WHERE year  =  2016)
self correction:
SELECT DISTINCT winner_name FROM matches WHERE year = 2013 AND winner_id IN (     SELECT winner_id     FROM matches     WHERE year = 2016 )

index is 448
SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016
What are the names of players who won in both 2013 and 2016?
schema_links:
What are the names of players who won in both 2013 and 2016? | matches : matches.winner_name , matches.year , matches.winner_rank , matches.winner_id , matches.round , matches.* | players : players.first_name , players.last_name , players.player_id , players.hand , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select distinct _ from _ where _ and _ | select distinct players.first_name, players.last_name from matches join players on matches.winner_id = players.player_id where matches.year = 2013 and exists (select * from matches where winner_id = players.player_id and year = 2016)
SQL = SELECT DISTINCT T2.first_name, T2.last_name FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.year = 2013 AND EXISTS (SELECT * FROM matches WHERE winner_id = T2.player_id AND year = 2016)
natsql:
select distinct _ from _ where _ and _ | select distinct players.first_name, players.last_name from matches join players on matches.winner_id = players.player_id where matches.year = 2013 and exists (select * from matches where winner_id = players.player_id and year = 2016)

SQL:
SELECT DISTINCT T2.first_name, T2.last_name FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.year = 2013 AND EXISTS (SELECT * FROM matches WHERE winner_id = T2.player_id AND year = 2016)
self correction:
SELECT T2.first_name, T2.last_name  FROM matches AS T1  JOIN players AS T2 ON T1.winner_id = T2.player_id  WHERE T1.year = 2013  AND T2.player_id IN (   SELECT winner_id    FROM matches    WHERE year = 2016 )

index is 449
SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016
List the number of all matches who played in years of 2013 or 2016.
schema_links:
List the number of all matches who played in years of 2013 or 2016. | matches : matches.year , matches.match_num , matches.loser_name , matches.score , matches.tourney_date , matches.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select count ( * ) from _ where year = _ or year = _ | select count ( * ) from matches where year = 2013 or year = 2016
SQL = SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016
natsql:
select count ( * ) from _ where year = _ or year = _ | select count ( * ) from matches where year = 2013 or year = 2016

SQL:
SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016
self correction:
SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016;

index is 450
SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016
How many matches were played in 2013 or 2016?
schema_links:
How many matches were played in 2013 or 2016? | matches : matches.year , matches.match_num , matches.loser_name , matches.minutes , matches.round , matches.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select count ( _ ) from _ where _ or _ | select count (matches.*) from matches where matches.year = 2013 or matches.year = 2016
SQL = SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016
natsql:
select count ( _ ) from _ where _ or _ | select count (matches.*) from matches where matches.year = 2013 or matches.year = 2016

SQL:
SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016
self correction:
SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016;

index is 451
SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'
What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?
schema_links:
What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open? | players : players.first_name , players.country_code , players.player_id , players.hand , players.last_name , players.* | matches : matches.tourney_name ( Australian Open , WTA Championships ) , matches.winner_name , matches.winner_age , matches.round , matches.score , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select _ , _ from _ where _ = 'WTA Championships' and _ = 'Australian Open' | select players.country_code , players.first_name from players where players.player_id in ( select winner_id from matches where matches.tourney_name = 'WTA Championships' ) and players.player_id in ( select winner_id from matches where matches.tourney_name = 'Australian Open' )
SQL = SELECT country_code , first_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships') AND player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open')
natsql:
select _ , _ from _ where _ = 'WTA Championships' and _ = 'Australian Open' | select players.country_code , players.first_name from players where players.player_id in ( select winner_id from matches where matches.tourney_name = 'WTA Championships' ) and players.player_id in ( select winner_id from matches where matches.tourney_name = 'Australian Open' )

SQL:
SELECT country_code , first_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships') AND player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open')
self correction:
SELECT players.country_code, players.first_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'WTA Championships' OR matches.tourney_name = 'Australian Open' GROUP BY players.player_id HAVING COUNT(DISTINCT matches.tourney_name) = 2

index is 452
SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'
What are the first names and country codes for players who won both the WTA Championships and the Australian Open?
schema_links:
What are the first names and country codes for players who won both the WTA Championships and the Australian Open? | players : players.first_name , players.country_code , players.player_id , players.last_name , players.hand , players.* | matches : matches.tourney_name ( Australian Open , WTA Championships ) , matches.winner_name , matches.winner_age , matches.year , matches.round , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select _ , _ from _ where _ and _ | select players.first_name , players.country_code from players where matches.tourney_name = 'Australian Open' and matches.tourney_name = 'WTA Championships'
SQL = SELECT first_name , country_code FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open') AND player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships')
natsql:
select _ , _ from _ where _ and _ | select players.first_name , players.country_code from players where matches.tourney_name = 'Australian Open' and matches.tourney_name = 'WTA Championships'

SQL:
SELECT first_name , country_code FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open') AND player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships')
self correction:
SELECT players.first_name, players.country_code  FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'Australian Open' AND players.player_id IN (     SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships' )

index is 453
SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1
Find the first name and country code of the oldest player.
schema_links:
Find the first name and country code of the oldest player. | players : players.country_code , players.first_name , players.birth_date , players.player_id , players.last_name , players.* | matches : matches.loser_age , matches.round , matches.winner_age , matches.loser_name , matches.match_num , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select _ , _ from _ order by _ limit _ | select players.first_name , players.country_code from players order by players.birth_date limit 1
SQL = SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1
natsql:
select _ , _ from _ order by _ limit _ | select players.first_name , players.country_code from players order by players.birth_date limit 1

SQL:
SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1
self correction:
SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date LIMIT 1

index is 454
SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1
What is the first name and country code of the oldest player?
schema_links:
What is the first name and country code of the oldest player? | players : players.country_code , players.first_name , players.birth_date , players.player_id , players.last_name , players.* | matches : matches.loser_age , matches.winner_age , matches.round , matches.score , matches.loser_name , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select _ , _ from _ order by _ limit _ | select players.first_name , players.country_code from players order by players.birth_date limit 1
SQL = SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1
natsql:
select _ , _ from _ order by _ limit _ | select players.first_name , players.country_code from players order by players.birth_date limit 1

SQL:
SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1
self correction:
SELECT players.first_name, players.country_code  FROM players  ORDER BY players.birth_date ASC  LIMIT 1

index is 455
SELECT first_name ,  last_name FROM players ORDER BY birth_date
List the first and last name of all players in the order of birth date.
schema_links:
List the first and last name of all players in the order of birth date. | players : players.last_name ( Date , Last ) , players.birth_date , players.first_name , players.player_id , players.hand , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.*
natsql and SQL generation:
select _ , _ from _ order by _ | select players.first_name , players.last_name from players order by players.birth_date
SQL = SELECT first_name , last_name FROM players ORDER BY birth_date
natsql:
select _ , _ from _ order by _ | select players.first_name , players.last_name from players order by players.birth_date

SQL:
SELECT first_name , last_name FROM players ORDER BY birth_date
self correction:
SELECT first_name, last_name FROM players ORDER BY birth_date

index is 456
SELECT first_name ,  last_name FROM players ORDER BY birth_date
What are the full names of all players, sorted by birth date?
schema_links:
What are the full names of all players, sorted by birth date? | players : players.birth_date , players.first_name , players.last_name ( Date ) , players.player_id , players.hand , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.score , matches.loser_name , matches.match_num , matches.minutes , matches.round , matches.*
natsql and SQL generation:
select _ , _ , _ from _ order by _  | select players.first_name , players.last_name from players order by players.birth_date
SQL = SELECT first_name , last_name FROM players ORDER BY birth_date
natsql:
select _ , _ , _ from _ order by _  | select players.first_name , players.last_name from players order by players.birth_date

SQL:
SELECT first_name , last_name FROM players ORDER BY birth_date
self correction:
SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY birth_date

index is 457
SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
List the first and last name of all players who are left / L hand in the order of birth date.
schema_links:
List the first and last name of all players who are left / L hand in the order of birth date. | players : players.last_name ( Date , Last ) , players.first_name , players.birth_date , players.hand , players.player_id , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.*
natsql and SQL generation:
select _ , _ from _ where _ = _ order by _ | select players.first_name , players.last_name from players where players.hand = 'L' order by players.birth_date
SQL = SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
natsql:
select _ , _ from _ where _ = _ order by _ | select players.first_name , players.last_name from players where players.hand = 'L' order by players.birth_date

SQL:
SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
self correction:
SELECT players.first_name, players.last_name  FROM players  WHERE players.hand = 'L'  ORDER BY players.birth_date ASC

index is 458
SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
What are the full names of all left handed players, in order of birth date?
schema_links:
What are the full names of all left handed players, in order of birth date? | players : players.birth_date , players.first_name , players.hand , players.last_name ( Date ) , players.player_id , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.round , matches.match_num , matches.minutes , matches.score , matches.surface , matches.*
natsql and SQL generation:
select _ , _ from _ where _ = _ order by _ | select players.first_name , players.last_name from players where players.hand = 'L' order by players.birth_date
SQL = SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date
natsql:
select _ , _ from _ where _ = _ order by _ | select players.first_name , players.last_name from players where players.hand = 'L' order by players.birth_date

SQL:
SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date
self correction:
SELECT players.first_name, players.last_name  FROM players  WHERE players.hand = 'L'  ORDER BY players.birth_date

index is 459
SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1
Find the first name and country code of the player who did the most number of tours.
schema_links:
Find the first name and country code of the player who did the most number of tours. | players : players.first_name , players.country_code , players.player_id , players.last_name , players.hand , players.* | rankings : rankings.tours , rankings.player_id , rankings.ranking , rankings.ranking_points , rankings.ranking_date , rankings.* | matches : matches.score , matches.match_num , matches.minutes , matches.round , matches.surface , matches.*
natsql and SQL generation:
select _ , _ from _ order by _ desc limit _ | select players.first_name , players.country_code from players order by players.tours desc limit 1
SQL = SELECT first_name ,  country_code FROM players ORDER BY tours DESC LIMIT 1
natsql:
select _ , _ from _ order by _ desc limit _ | select players.first_name , players.country_code from players order by players.tours desc limit 1

SQL:
SELECT first_name ,  country_code FROM players ORDER BY tours DESC LIMIT 1
self correction:
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(rankings.tours) DESC LIMIT 1

index is 460
SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1
What is the first name and country code of the player with the most tours?
schema_links:
What is the first name and country code of the player with the most tours? | rankings : rankings.tours , rankings.player_id , rankings.ranking , rankings.ranking_points , rankings.ranking_date , rankings.* | players : players.first_name , players.country_code , players.player_id , players.last_name , players.hand , players.* | matches : matches.round , matches.score , matches.match_num , matches.minutes , matches.surface , matches.*
natsql and SQL generation:
select _ , _ from _ order by _ desc limit _ | select players.first_name , players.country_code from players order by players.tours desc limit 1
SQL = SELECT first_name ,  country_code FROM players ORDER BY tours DESC LIMIT 1
natsql:
select _ , _ from _ order by _ desc limit _ | select players.first_name , players.country_code from players order by players.tours desc limit 1

SQL:
SELECT first_name ,  country_code FROM players ORDER BY tours DESC LIMIT 1
self correction:
SELECT first_name, country_code FROM players INNER JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(rankings.tours) DESC LIMIT 1

index is 461
SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
Find the year that has the most number of matches.
schema_links:
Find the year that has the most number of matches. | matches : matches.year , matches.match_num , matches.loser_name , matches.round , matches.score , matches.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select _ from _ group by _ order by count ( * ) desc limit _ | select matches.year from matches group by matches.year order by count ( * ) desc limit 1
natsql:
select _ from _ group by _ order by count ( * ) desc limit _ | select matches.year from matches group by matches.year order by count ( * ) desc limit 1
SQL:

self correction:
SELECT SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1;

index is 462
SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
Which year had the most matches?
schema_links:
Which year had the most matches? | matches : matches.year , matches.match_num , matches.loser_name , matches.minutes , matches.round , matches.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select _ from _ group by _ order by count ( * ) desc limit _ | select matches.year from matches group by matches.year order by count ( * ) desc limit 1
SQL = SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( * ) desc limit _ | select matches.year from matches group by matches.year order by count ( * ) desc limit 1

SQL:
SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1

index is 463
SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1
Find the name and rank points of the winner who won the most times.
schema_links:
Find the name and rank points of the winner who won the most times. | matches : matches.winner_rank_points , matches.winner_name , matches.winner_rank , matches.winner_id , matches.winner_seed , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.ranking_date , rankings.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.*
natsql and SQL generation:
select _ , _ from _ where _ = ( select _ from _ order by count ( _ ) desc limit _ ) | select matches.winner_name , matches.winner_rank_points from matches where matches.winner_id = ( select matches.winner_id from matches order by count ( matches.* ) desc limit 1 )
SQL = SELECT winner_name ,  winner_rank_points FROM matches WHERE winner_id  =  (SELECT winner_id FROM matches GROUP BY winner_id ORDER BY count(*) DESC LIMIT 1)
natsql:
select _ , _ from _ where _ = ( select _ from _ order by count ( _ ) desc limit _ ) | select matches.winner_name , matches.winner_rank_points from matches where matches.winner_id = ( select matches.winner_id from matches order by count ( matches.* ) desc limit 1 )

SQL:
SELECT winner_name ,  winner_rank_points FROM matches WHERE winner_id  =  (SELECT winner_id FROM matches GROUP BY winner_id ORDER BY count(*) DESC LIMIT 1)
self correction:
SELECT matches.winner_name, matches.winner_rank_points  FROM matches  GROUP BY matches.winner_id  ORDER BY COUNT(*) DESC  LIMIT 1;

index is 464
SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1
What is the name of the winner who has won the most matches, and how many rank points does this player have?
schema_links:
What is the name of the winner who has won the most matches, and how many rank points does this player have? | matches : matches.winner_name , matches.winner_rank_points , matches.winner_rank , matches.winner_id , matches.loser_name , matches.* | rankings : rankings.ranking_points , rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.* | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.*
natsql and SQL generation:
select _ , max ( _ ) from _ group by _ order by max ( _ ) desc limit _ | select matches.winner_name , matches.winner_rank_points from matches group by matches.winner_name order by max ( matches.winner_rank_points ) desc limit 1
SQL = SELECT winner_name , max(winner_rank_points) FROM matches GROUP BY winner_name ORDER BY max(winner_rank_points) DESC LIMIT 1
natsql:
select _ , max ( _ ) from _ group by _ order by max ( _ ) desc limit _ | select matches.winner_name , matches.winner_rank_points from matches group by matches.winner_name order by max ( matches.winner_rank_points ) desc limit 1

SQL:
SELECT winner_name , max(winner_rank_points) FROM matches GROUP BY winner_name ORDER BY max(winner_rank_points) DESC LIMIT 1
self correction:
SELECT matches.winner_name, max(rankings.ranking_points)  FROM matches  JOIN rankings ON matches.winner_id = rankings.player_id  GROUP BY matches.winner_name  ORDER BY max(rankings.ranking_points) DESC  LIMIT 1

index is 465
SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.
schema_links:
Find the name of the winner who has the highest rank points and participated in the Australian Open tourney. | matches : matches.tourney_name ( Australian Open ) , matches.winner_rank_points , matches.winner_name , matches.tourney_id , matches.winner_rank , matches.* | rankings : rankings.ranking_points , rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.* | players : players.player_id , players.first_name , players.hand , players.last_name , players.birth_date , players.*
natsql and SQL generation:
select _ from _ where _ = 'Australian Open' order by _ desc limit _ | select matches.winner_name from matches where matches.tourney_name = 'Australian Open' order by matches.winner_rank_points desc limit 1
SQL = SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
natsql:
select _ from _ where _ = 'Australian Open' order by _ desc limit _ | select matches.winner_name from matches where matches.tourney_name = 'Australian Open' order by matches.winner_rank_points desc limit 1

SQL:
SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
self correction:
SELECT matches.winner_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'Australian Open' ORDER BY players.winner_rank_points DESC LIMIT 1

index is 466
SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
What is the name of the winner with the most rank points who participated in the Australian Open tournament?
schema_links:
What is the name of the winner with the most rank points who participated in the Australian Open tournament? | matches : matches.tourney_name ( Australian Open ) , matches.winner_rank_points , matches.winner_name , matches.winner_rank , matches.tourney_id , matches.* | rankings : rankings.ranking_points , rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.* | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.*
natsql and SQL generation:
select _ from _ where @.@ = max ( _ ) and @.@ = _ | select matches.winner_name from matches where matches.tourney_name = 'Australian Open' and matches.winner_rank_points = max ( matches.winner_rank_points )
SQL = SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' AND winner_rank_points  =  (SELECT max(winner_rank_points) FROM matches WHERE tourney_name  =  'Australian Open')
natsql:
select _ from _ where @.@ = max ( _ ) and @.@ = _ | select matches.winner_name from matches where matches.tourney_name = 'Australian Open' and matches.winner_rank_points = max ( matches.winner_rank_points )

SQL:
SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' AND winner_rank_points  =  (SELECT max(winner_rank_points) FROM matches WHERE tourney_name  =  'Australian Open')
self correction:
SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open'   AND winner_rank_points = (     SELECT MAX(winner_rank_points)     FROM matches     WHERE tourney_name = 'Australian Open'   )

index is 467
SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1
find the names of loser and winner who played in the match with greatest number of minutes.
schema_links:
find the names of loser and winner who played in the match with greatest number of minutes. | matches : matches.loser_name , matches.minutes , matches.match_num , matches.winner_name , matches.loser_id , matches.* | players : players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select _ , _ from _ where _ = max ( _ ) | select matches.winner_name , matches.loser_name from matches where matches.minutes = max ( matches.minutes )
SQL = SELECT winner_name ,  loser_name FROM matches WHERE minutes  =  (SELECT max(minutes) FROM matches)
natsql:
select _ , _ from _ where _ = max ( _ ) | select matches.winner_name , matches.loser_name from matches where matches.minutes = max ( matches.minutes )

SQL:
SELECT winner_name ,  loser_name FROM matches WHERE minutes  =  (SELECT max(minutes) FROM matches)
self correction:
SELECT winner_name, loser_name FROM matches WHERE minutes = (     SELECT MAX(minutes)      FROM matches )

index is 468
SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1
What are the names of the winner and loser who played in the longest match?
schema_links:
What are the names of the winner and loser who played in the longest match? | matches : matches.minutes , matches.loser_name , matches.winner_name , matches.round , matches.match_num , matches.* | players : players.first_name , players.last_name , players.hand , players.player_id , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select _ , _ from _ order by _ desc limit _ | select matches.winner_name , matches.loser_name from matches order by matches.minutes desc limit 1
SQL = SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1
natsql:
select _ , _ from _ order by _ desc limit _ | select matches.winner_name , matches.loser_name from matches order by matches.minutes desc limit 1

SQL:
SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1
self correction:
SELECT matches.winner_name, matches.loser_name FROM matches ORDER BY minutes DESC LIMIT 1

index is 469
SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
Find the average ranking for each player and their first name.
schema_links:
Find the average ranking for each player and their first name. | rankings : rankings.ranking , rankings.ranking_points , rankings.player_id , rankings.ranking_date , rankings.tours , rankings.* | players : players.first_name , players.player_id , players.last_name , players.hand , players.birth_date , players.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*
natsql and SQL generation:
select avg ( _ ) , _ from _ group by _ | select avg ( rankings.ranking ) , players.first_name from players group by players.first_name
SQL = SELECT AVG(ranking) ,  first_name FROM players GROUP BY first_name
natsql:
select avg ( _ ) , _ from _ group by _ | select avg ( rankings.ranking ) , players.first_name from players group by players.first_name

SQL:
SELECT AVG(ranking) ,  first_name FROM players GROUP BY first_name
self correction:
SELECT AVG(rankings.ranking) AS average_ranking, players.first_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name

index is 470
SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
What are the first names of all players, and their average rankings?
schema_links:
What are the first names of all players, and their average rankings? | players : players.first_name , players.player_id , players.last_name , players.hand , players.birth_date , players.* | rankings : rankings.ranking , rankings.ranking_points , rankings.player_id , rankings.ranking_date , rankings.tours , rankings.* | matches : matches.loser_rank , matches.minutes , matches.round , matches.score , matches.surface , matches.*
natsql and SQL generation:
select _ , avg ( _ ) from _ group by _ | select players.first_name , avg ( rankings.ranking ) from players join rankings on players.player_id = rankings.player_id group by players.first_name
SQL = SELECT first_name ,  AVG (ranking) FROM players JOIN rankings ON players.player_id  =  rankings.player_id GROUP BY first_name
natsql:
select _ , avg ( _ ) from _ group by _ | select players.first_name , avg ( rankings.ranking ) from players join rankings on players.player_id = rankings.player_id group by players.first_name

SQL:
SELECT first_name ,  AVG (ranking) FROM players JOIN rankings ON players.player_id  =  rankings.player_id GROUP BY first_name
self correction:
SELECT players.first_name, AVG(rankings.ranking)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name

index is 471
SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
Find the total ranking points for each player and their first name.
schema_links:
Find the total ranking points for each player and their first name. | players : players.first_name , players.player_id , players.last_name , players.hand , players.birth_date , players.* | rankings : rankings.ranking_points , rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*
natsql and SQL generation:
select _ , sum ( _ ) from _ group by _ | select players.first_name , sum ( rankings.ranking_points ) from players join rankings on players.player_id = rankings.player_id group by players.first_name
SQL = SELECT first_name , sum(ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name
natsql:
select _ , sum ( _ ) from _ group by _ | select players.first_name , sum ( rankings.ranking_points ) from players join rankings on players.player_id = rankings.player_id group by players.first_name

SQL:
SELECT first_name , sum(ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name
self correction:
SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name

index is 472
SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
What are the first names of all players, and their total ranking points?
schema_links:
What are the first names of all players, and their total ranking points? | players : players.first_name , players.player_id , players.last_name , players.hand , players.birth_date , players.* | rankings : rankings.ranking_points , rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*
natsql and SQL generation:
select _ , sum ( _ ) from _ group by _ | select players.first_name , sum ( rankings.ranking_points ) from players join rankings on players.player_id = rankings.player_id group by players.first_name
SQL = SELECT first_name , SUM(ranking_points) FROM players JOIN rankings ON players.player_id  =  rankings.player_id GROUP BY first_name
natsql:
select _ , sum ( _ ) from _ group by _ | select players.first_name , sum ( rankings.ranking_points ) from players join rankings on players.player_id = rankings.player_id group by players.first_name

SQL:
SELECT first_name , SUM(ranking_points) FROM players JOIN rankings ON players.player_id  =  rankings.player_id GROUP BY first_name
self correction:
SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name

index is 473
SELECT count(*) ,  country_code FROM players GROUP BY country_code
find the number of players for each country.
schema_links:
find the number of players for each country. | players : players.country_code , players.player_id , players.first_name , players.last_name , players.hand , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*
natsql and SQL generation:
select count ( distinct _ ) , _ from _ group by _ | select count ( distinct players.player_id ) , players.country_code from players group by players.country_code
SQL = SELECT count(DISTINCT T1.player_id), T1.country_code FROM players AS T1 GROUP BY T1.country_code
natsql:
select count ( distinct _ ) , _ from _ group by _ | select count ( distinct players.player_id ) , players.country_code from players group by players.country_code

SQL:
SELECT count(DISTINCT T1.player_id), T1.country_code FROM players AS T1 GROUP BY T1.country_code
self correction:
SELECT COUNT(DISTINCT T1.player_id) AS player_count, T1.country_code FROM players AS T1 GROUP BY T1.country_code

index is 474
SELECT count(*) ,  country_code FROM players GROUP BY country_code
How many players are from each country?
schema_links:
How many players are from each country? | players : players.country_code , players.player_id , players.hand , players.first_name , players.last_name , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*
natsql and SQL generation:
select @.@ , count ( distinct _ ) from _ group by @.@ | select players.country_code , count ( distinct players.player_id ) from players group by players.country_code
SQL = SELECT country_code , count(DISTINCT player_id) FROM players GROUP BY country_code
natsql:
select @.@ , count ( distinct _ ) from _ group by @.@ | select players.country_code , count ( distinct players.player_id ) from players group by players.country_code

SQL:
SELECT country_code , count(DISTINCT player_id) FROM players GROUP BY country_code
self correction:
SELECT country_code, COUNT(DISTINCT player_id) AS player_count FROM players GROUP BY country_code

index is 475
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
find the code of the country where has the greatest number of players.
schema_links:
find the code of the country where has the greatest number of players. | players : players.country_code , players.player_id , players.hand , players.first_name , players.last_name , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select players.country_code from players group by players.country_code order by count ( players.* ) desc limit 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select players.country_code from players group by players.country_code order by count ( players.* ) desc limit 1
SQL:
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1

index is 476
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
What is the code of the country with the most players?
schema_links:
What is the code of the country with the most players? | players : players.country_code , players.player_id , players.hand , players.first_name , players.last_name , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.round , matches.score , matches.match_num , matches.minutes , matches.surface , matches.*
natsql and SQL generation:
select _ from _ group by _ order by count ( * ) desc limit _ | select players.country_code from players group by players.country_code order by count ( * ) desc limit 1
SQL = SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( * ) desc limit _ | select players.country_code from players group by players.country_code order by count ( * ) desc limit 1

SQL:
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT country_code, COUNT(*) as player_count FROM players GROUP BY country_code ORDER BY player_count DESC LIMIT 1

index is 477
SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50
Find the codes of countries that have more than 50 players.
schema_links:
Find the codes of countries that have more than 50 players. | players : players.country_code , players.player_id , players.hand , players.first_name , players.last_name , players.* | rankings : rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*
natsql and SQL generation:
select _ from _ group by _ having count ( _ ) > _ | select players.country_code from players group by players.country_code having count ( players.* ) > 50
SQL = SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50
natsql:
select _ from _ group by _ having count ( _ ) > _ | select players.country_code from players group by players.country_code having count ( players.* ) > 50

SQL:
SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50
self correction:
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(DISTINCT player_id) > 50

index is 478
SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50
What are the codes of countries with more than 50 players?
schema_links:
What are the codes of countries with more than 50 players? | players : players.country_code , players.player_id , players.hand , players.first_name , players.last_name , players.* | rankings : rankings.player_id , rankings.ranking , rankings.ranking_points , rankings.tours , rankings.ranking_date , rankings.* | matches : matches.round , matches.score , matches.match_num , matches.minutes , matches.surface , matches.*
natsql and SQL generation:
select _ from _ where count ( _ ) > _ group by _ | select players.country_code from players where count ( players.player_id ) > 50 group by players.country_code
SQL = SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50
natsql:
select _ from _ where count ( _ ) > _ group by _ | select players.country_code from players where count ( players.player_id ) > 50 group by players.country_code

SQL:
SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50
self correction:
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50

index is 479
SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date
Find the total number of tours for each ranking date.
schema_links:
Find the total number of tours for each ranking date. | rankings : rankings.ranking_date , rankings.tours , rankings.ranking , rankings.ranking_points , rankings.player_id , rankings.* | players : players.last_name ( Date ) , players.player_id , players.hand , players.first_name , players.birth_date , players.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*
natsql and SQL generation:
select _ , sum ( _ ) from _ group by _ | select rankings.ranking_date , sum ( rankings.tours ) from rankings group by rankings.ranking_date
SQL = SELECT ranking_date ,  SUM (tours) FROM rankings GROUP BY ranking_date
natsql:
select _ , sum ( _ ) from _ group by _ | select rankings.ranking_date , sum ( rankings.tours ) from rankings group by rankings.ranking_date

SQL:
SELECT ranking_date ,  SUM (tours) FROM rankings GROUP BY ranking_date
self correction:
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date

index is 480
SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date
How many total tours were there for each ranking date?
schema_links:
How many total tours were there for each ranking date? | rankings : rankings.ranking_date , rankings.tours , rankings.ranking , rankings.ranking_points , rankings.player_id , rankings.* | players : players.last_name ( Date ) , players.hand , players.player_id , players.first_name , players.birth_date , players.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.*
natsql and SQL generation:
select _ , sum ( _ ) from _ group by _ | select rankings.ranking_date , sum ( rankings.tours ) from rankings group by rankings.ranking_date
SQL = SELECT ranking_date ,  SUM(tours) FROM rankings GROUP BY ranking_date
natsql:
select _ , sum ( _ ) from _ group by _ | select rankings.ranking_date , sum ( rankings.tours ) from rankings group by rankings.ranking_date

SQL:
SELECT ranking_date ,  SUM(tours) FROM rankings GROUP BY ranking_date
self correction:
SELECT ranking_date, SUM(tours)  FROM rankings  GROUP BY ranking_date

index is 481
SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR
Find the number of matches happened in each year.
schema_links:
Find the number of matches happened in each year. | matches : matches.year , matches.match_num , matches.loser_name , matches.round , matches.score , matches.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select matches.year , count ( matches.match_num ) from matches group by matches.year
SQL = SELECT year , count(match_num) FROM matches GROUP BY year
natsql:
select _ , count ( _ ) from _ group by _ | select matches.year , count ( matches.match_num ) from matches group by matches.year

SQL:
SELECT year , count(match_num) FROM matches GROUP BY year
self correction:
SELECT year, COUNT(match_num)  FROM matches  GROUP BY year

index is 482
SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR
How many matches were played in each year?
schema_links:
How many matches were played in each year? | matches : matches.year , matches.match_num , matches.loser_name , matches.minutes , matches.round , matches.* | players : players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select matches.year , count ( matches.* ) from matches group by matches.year
SQL = SELECT year , count(*) FROM matches GROUP BY year
natsql:
select _ , count ( _ ) from _ group by _ | select matches.year , count ( matches.* ) from matches group by matches.year

SQL:
SELECT year , count(*) FROM matches GROUP BY year
self correction:
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year

index is 483
SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3
Find the name and rank of the 3 youngest winners across all matches.
schema_links:
Find the name and rank of the 3 youngest winners across all matches. | matches : matches.winner_name , matches.winner_rank , matches.winner_age , matches.year , matches.loser_age , matches.* | players : players.birth_date , players.player_id , players.first_name , players.last_name , players.hand , players.* | rankings : rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.ranking_date , rankings.*
natsql and SQL generation:
select _ , _ from _ order by _ asc limit _ | select matches.winner_name , matches.winner_rank from matches order by matches.winner_age asc limit 3
natsql:
select _ , _ from _ order by _ asc limit _ | select matches.winner_name , matches.winner_rank from matches order by matches.winner_age asc limit 3
SQL:
SELECT winner_name ,  winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3
self correction:
SELECT players.first_name, players.last_name, matches.winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY matches.winner_age ASC LIMIT 3

index is 484
SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3
What are the names and ranks of the three youngest winners across all matches?
schema_links:
What are the names and ranks of the three youngest winners across all matches? | matches : matches.winner_name , matches.winner_rank , matches.winner_age , matches.year , matches.loser_age , matches.* | players : players.birth_date , players.player_id , players.first_name , players.hand , players.last_name , players.* | rankings : rankings.ranking , rankings.ranking_points , rankings.tours , rankings.player_id , rankings.ranking_date , rankings.*
natsql and SQL generation:
select _ , _ from _ order by _ limit _ | select matches.winner_name , matches.winner_rank from matches order by matches.winner_age limit 3
SQL = SELECT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3
natsql:
select _ , _ from _ order by _ limit _ | select matches.winner_name , matches.winner_rank from matches order by matches.winner_age limit 3

SQL:
SELECT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3
self correction:
SELECT players.first_name, players.last_name, matches.winner_rank  FROM matches  JOIN players ON matches.winner_id = players.player_id  ORDER BY matches.winner_age ASC  LIMIT 3

index is 485
SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'
How many different winners both participated in the WTA Championships and were left handed?
schema_links:
How many different winners both participated in the WTA Championships and were left handed? | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.* | matches : matches.tourney_name ( WTA Championships ) , matches.winner_hand , matches.winner_entry , matches.winner_id , matches.winner_name , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select count ( distinct _ ) from _ where _ = _ and _ = _ | select count ( distinct matches.winner_id ) from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'WTA Championships' and players.hand = 'L'
SQL = SELECT count(DISTINCT T1.player_id) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' AND T1.hand = 'L'
natsql:
select count ( distinct _ ) from _ where _ = _ and _ = _ | select count ( distinct matches.winner_id ) from players join matches on players.player_id = matches.winner_id where matches.tourney_name = 'WTA Championships' and players.hand = 'L'

SQL:
SELECT count(DISTINCT T1.player_id) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' AND T1.hand = 'L'
self correction:
SELECT COUNT(DISTINCT T1.player_id)  FROM players AS T1  JOIN matches AS T2 ON T1.player_id = T2.winner_id  WHERE T2.tourney_name = 'WTA Championships'  AND T1.hand = 'L'

index is 486
SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'
Find the number of left handed winners who participated in the WTA Championships.
schema_links:
Find the number of left handed winners who participated in the WTA Championships. | players : players.hand , players.player_id , players.first_name , players.birth_date , players.last_name , players.* | matches : matches.tourney_name ( WTA Championships ) , matches.winner_hand , matches.tourney_id , matches.loser_hand , matches.winner_id , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*
natsql and SQL generation:
select count ( _ ) from _ where @.@ = WTA Championships and @.@ = left | select count ( distinct matches.winner_id ) from matches where matches.tourney_name = 'WTA Championships' and matches.winner_hand = 'left'
SQL = SELECT count(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'left'
natsql:
select count ( _ ) from _ where @.@ = WTA Championships and @.@ = left | select count ( distinct matches.winner_id ) from matches where matches.tourney_name = 'WTA Championships' and matches.winner_hand = 'left'

SQL:
SELECT count(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'left'
self correction:
SELECT count(DISTINCT winner_id)  FROM matches  JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = 'WTA Championships'  AND players.hand = 'left'

index is 487
SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
Find the first name, country code and birth date of the winner who has the highest rank points in all matches.
schema_links:
Find the first name, country code and birth date of the winner who has the highest rank points in all matches. | players : players.first_name , players.birth_date , players.country_code , players.last_name ( Date ) , players.player_id , players.* | matches : matches.winner_rank_points , matches.winner_name , matches.winner_rank , matches.winner_hand , matches.loser_rank_points , matches.* | rankings : rankings.ranking_points , rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.*
natsql and SQL generation:
select _ , _ , _ from _ where _ = ( select max ( _ ) from _ ) | select players.first_name , players.country_code , players.birth_date from players where players.player_id = ( select player_id from rankings where ranking_points = ( select max ( ranking_points ) from rankings ) )
SQL = SELECT first_name ,  country_code ,  birth_date FROM players WHERE player_id  =  (SELECT player_id FROM rankings WHERE ranking_points  =  (SELECT max(ranking_points) FROM rankings))
natsql:
select _ , _ , _ from _ where _ = ( select max ( _ ) from _ ) | select players.first_name , players.country_code , players.birth_date from players where players.player_id = ( select player_id from rankings where ranking_points = ( select max ( ranking_points ) from rankings ) )

SQL:
SELECT first_name ,  country_code ,  birth_date FROM players WHERE player_id  =  (SELECT player_id FROM rankings WHERE ranking_points  =  (SELECT max(ranking_points) FROM rankings))
self correction:
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.ranking_points = (   SELECT MAX(ranking_points)   FROM rankings )

index is 488
SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
What is the first name, country code, and birth date of the player with the most winner rank points across all matches?
schema_links:
What is the first name, country code, and birth date of the player with the most winner rank points across all matches? | players : players.first_name , players.birth_date , players.country_code , players.player_id , players.last_name ( Date ) , players.* | matches : matches.winner_rank_points , matches.match_num , matches.winner_rank , matches.loser_rank , matches.loser_rank_points , matches.* | rankings : rankings.ranking_points , rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_date , rankings.*
natsql and SQL generation:
select _ , _ , _ from _ order by _ desc limit _ | select players.first_name , players.country_code , players.birth_date from players order by players.winner_rank_points desc limit 1
SQL = SELECT first_name ,  country_code ,  birth_date FROM players ORDER BY winner_rank_points DESC LIMIT 1
natsql:
select _ , _ , _ from _ order by _ desc limit _ | select players.first_name , players.country_code , players.birth_date from players order by players.winner_rank_points desc limit 1

SQL:
SELECT first_name ,  country_code ,  birth_date FROM players ORDER BY winner_rank_points DESC LIMIT 1
self correction:
SELECT players.first_name, players.country_code, players.birth_date  FROM players  JOIN matches ON players.player_id = matches.winner_id GROUP BY players.player_id ORDER BY SUM(matches.winner_rank_points) DESC LIMIT 1

index is 489
SELECT count(*) ,  hand FROM players GROUP BY hand
Find the number of players for each hand type.
schema_links:
Find the number of players for each hand type. | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.tours , rankings.ranking_date , rankings.player_id , rankings.ranking_points , rankings.* | matches : matches.loser_hand , matches.minutes , matches.round , matches.score , matches.surface , matches.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select players.hand , count ( players.player_id ) from players group by players.hand
SQL = SELECT hand ,  COUNT(player_id) FROM players GROUP BY hand
natsql:
select _ , count ( _ ) from _ group by _ | select players.hand , count ( players.player_id ) from players group by players.hand

SQL:
SELECT hand ,  COUNT(player_id) FROM players GROUP BY hand
self correction:
SELECT hand, COUNT(player_id)  FROM players  GROUP BY hand

index is 490
SELECT count(*) ,  hand FROM players GROUP BY hand
How many players are there for each hand type?
schema_links:
How many players are there for each hand type? | players : players.hand , players.player_id , players.first_name , players.last_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.* | matches : matches.loser_hand , matches.minutes , matches.round , matches.score , matches.surface , matches.*
natsql and SQL generation:
select _ , count ( * ) from _ group by _ | select players.hand , count ( * ) from players group by players.hand
SQL = SELECT hand , COUNT(*) FROM players GROUP BY hand
natsql:
select _ , count ( * ) from _ group by _ | select players.hand , count ( * ) from players group by players.hand

SQL:
SELECT hand , COUNT(*) FROM players GROUP BY hand
self correction:
SELECT hand, COUNT(*) FROM players GROUP BY hand

index is 491
SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'
How many ships ended up being 'Captured'?
schema_links:
How many ships ended up being 'Captured'? | ship : ship.disposition_of_ship ( Captured ) , ship.id , ship.name , ship.ship_type , ship.location , ship.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.* | battle : battle.id , battle.name , battle.date , battle.result , battle.bulgarian_commander , battle.*
natsql and SQL generation:
select count ( * ) from ship where disposition_of_ship = 'Captured'
SQL = SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured'
natsql:
select count ( * ) from ship where disposition_of_ship = 'Captured'

SQL:
SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured'
self correction:
SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured'

index is 492
SELECT name ,  tonnage FROM ship ORDER BY name DESC
List the name and tonnage ordered by in descending alphaetical order for the names.
schema_links:
List the name and tonnage ordered by in descending alphaetical order for the names. | ship : ship.tonnage , ship.name , ship.id , ship.ship_type , ship.location , ship.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.* | battle : battle.id , battle.name , battle.date , battle.result , battle.bulgarian_commander , battle.*
natsql and SQL generation:
select _ , _ from _ order by _ desc | select ship.name , ship.tonnage from ship order by ship.name desc
SQL = SELECT name , tonnage FROM ship ORDER BY name DESC
natsql:
select _ , _ from _ order by _ desc | select ship.name , ship.tonnage from ship order by ship.name desc

SQL:
SELECT name , tonnage FROM ship ORDER BY name DESC
self correction:
SELECT name, tonnage FROM ship ORDER BY name DESC

index is 493
SELECT name ,  date FROM battle
List the name, date and result of each battle.
schema_links:
List the name, date and result of each battle. | battle : battle.name , battle.date , battle.result , battle.id , battle.bulgarian_commander , battle.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.* | ship : ship.id , ship.name , ship.location , ship.lost_in_battle , ship.tonnage , ship.*
natsql and SQL generation:
select _ , _ , _ from _ | select battle.name , battle.date , battle.result from battle
SQL = SELECT name ,  date ,  result FROM battle

input = List the names and IDs of all students. | student : student.name , student.id , student.dept_name , student.tot_cred , student.* | takes : takes.course_id , takes.semester , takes.grade , takes.year , takes.sec_id , takes.* | time_slot : time_slot.start_hr , time_slot.day , time_slot.time_slot_id , time_slot.end_min , time_slot.start_min , time_slot.* | section : section.year , section.course_id , section.room_number , section.time_slot_id , section.semester , section.sec_id , section.*
natsql = select _ , _ from _ | select student.name , student.id from student
SQL = SELECT name ,  id FROM student
natsql:
select _ , _ , _ from _ | select battle.name , battle.date , battle.result from battle

SQL:
SELECT name ,  date ,  result FROM battle

input = List the names and IDs of all students. | student : student.name , student.id , student.dept_name , student.tot_cred , student.* | takes : takes.course_id , takes.semester , takes.grade , takes.year , takes.sec_id , takes.* | time_slot : time_slot.start_hr , time_slot.day , time_slot.time_slot_id , time_slot.end_min , time_slot.start_min , time_slot.* | section : section.year , section.course_id , section.room_number , section.time_slot_id , section.semester , section.sec_id , section.*
natsql = select _ , _ from _ | select student.name , student.id from student

self correction:
SELECT name, date, result FROM battle

index is 494
SELECT max(killed) ,  min(killed) FROM death
What is maximum and minimum death toll caused each time?
schema_links:
What is maximum and minimum death toll caused each time? | death : death.killed , death.caused_by_ship_id , death.id , death.note , death.injured , death.* | battle : battle.id , battle.name , battle.date , battle.result , battle.bulgarian_commander , battle.* | ship : ship.name , ship.id , ship.ship_type , ship.location , ship.lost_in_battle , ship.*
natsql and SQL generation:
select max ( _ ) , min ( _ ) , _ from _ group by _ | select max ( death.killed ) , min ( death.killed ) , battle.name from death join ship on death.caused_by_ship_id = ship.id join battle on ship.lost_in_battle = battle.id group by battle.name
SQL = SELECT MAX(killed) , MIN(killed) , T2.name FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id  =  T2.id JOIN battle AS T3 ON T2.lost_in_battle  =  T3.id GROUP BY T3.name
natsql:
select max ( _ ) , min ( _ ) , _ from _ group by _ | select max ( death.killed ) , min ( death.killed ) , battle.name from death join ship on death.caused_by_ship_id = ship.id join battle on ship.lost_in_battle = battle.id group by battle.name

SQL:
SELECT MAX(killed) , MIN(killed) , T2.name FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id  =  T2.id JOIN battle AS T3 ON T2.lost_in_battle  =  T3.id GROUP BY T3.name
self correction:
SELECT MAX(T1.killed) AS max_death_toll, MIN(T1.killed) AS min_death_toll, T3.name FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id JOIN battle AS T3 ON T2.lost_in_battle = T3.id GROUP BY T3.name

index is 495
SELECT avg(injured) FROM death
What is the average number of injuries caused each time?
schema_links:
What is the average number of injuries caused each time? | death : death.injured , death.id , death.caused_by_ship_id , death.note , death.killed , death.* | battle : battle.result , battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.* | ship : ship.lost_in_battle , ship.id , ship.name , ship.ship_type , ship.location , ship.*
natsql and SQL generation:
select avg ( _ ) from _ | select avg ( death.injured ) from death
SQL = SELECT avg(injured) FROM death
natsql:
select avg ( _ ) from _ | select avg ( death.injured ) from death

SQL:
SELECT avg(injured) FROM death
self correction:
SELECT avg(injured) FROM death

index is 496
SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'
What are the death and injury situations caused by the ship with tonnage 't'?
schema_links:
What are the death and injury situations caused by the ship with tonnage 't'? | ship : ship.tonnage , ship.name , ship.id , ship.location , ship.lost_in_battle , ship.* | death : death.injured , death.killed , death.caused_by_ship_id , death.id , death.note , death.* | battle : battle.id , battle.name , battle.date , battle.result , battle.bulgarian_commander , battle.*
natsql and SQL generation:
select _ from _ where @.@ = 't' | select death.note , death.killed , death.injured from death where death.caused_by_ship_id in (select id from ship where tonnage = 't')
SQL = SELECT note , killed , injured FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE tonnage = 't')
natsql:
select _ from _ where @.@ = 't' | select death.note , death.killed , death.injured from death where death.caused_by_ship_id in (select id from ship where tonnage = 't')

SQL:
SELECT note , killed , injured FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE tonnage = 't')
self correction:
SELECT death.note, death.killed, death.injured  FROM death  INNER JOIN ship ON death.caused_by_ship_id = ship.id  WHERE ship.tonnage = 't'

index is 497
SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'
What are the name and results of the battles when the bulgarian commander is not 'Boril'
schema_links:
What are the name and results of the battles when the bulgarian commander is not 'Boril' | battle : battle.bulgarian_commander ( Boril ) , battle.name , battle.result , battle.id , battle.date , battle.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.* | ship : ship.id , ship.name , ship.location , ship.lost_in_battle , ship.tonnage , ship.*
natsql and SQL generation:
select _ , _ from _ where @.@ <> _ | select battle.name , battle.result from battle where battle.bulgarian_commander <> 'Boril'
SQL = SELECT name , result FROM battle WHERE bulgarian_commander <> 'Boril'
natsql:
select _ , _ from _ where @.@ <> _ | select battle.name , battle.result from battle where battle.bulgarian_commander <> 'Boril'

SQL:
SELECT name , result FROM battle WHERE bulgarian_commander <> 'Boril'
self correction:
SELECT name, result  FROM battle  WHERE bulgarian_commander <> 'Boril'

index is 498
SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'
What are the different ids and names of the battles that lost any 'Brig' type shipes?
schema_links:
What are the different ids and names of the battles that lost any 'Brig' type shipes? | battle : battle.name , battle.id , battle.result , battle.date , battle.bulgarian_commander , battle.* | ship : ship.ship_type ( Brig ) , ship.lost_in_battle , ship.name , ship.id , ship.location , ship.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.*
natsql and SQL generation:
select distinct _ , _ from _ where @.@ = @.@ | select distinct battle.id , battle.name from battle join ship on battle.id = ship.lost_in_battle where ship.ship_type = 'Brig'
SQL = SELECT DISTINCT battle.id ,  battle.name FROM battle JOIN ship ON battle.id  =  ship.lost_in_battle WHERE ship.ship_type  =  'Brig'
natsql:
select distinct _ , _ from _ where @.@ = @.@ | select distinct battle.id , battle.name from battle join ship on battle.id = ship.lost_in_battle where ship.ship_type = 'Brig'

SQL:
SELECT DISTINCT battle.id ,  battle.name FROM battle JOIN ship ON battle.id  =  ship.lost_in_battle WHERE ship.ship_type  =  'Brig'
self correction:
SELECT DISTINCT battle.id, battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig';

index is 499
SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10
What are the ids and names of the battles that led to more than 10 people killed in total.
schema_links:
What are the ids and names of the battles that led to more than 10 people killed in total. | battle : battle.id , battle.name , battle.result , battle.date , battle.bulgarian_commander , battle.* | death : death.killed , death.caused_by_ship_id , death.id , death.note , death.injured , death.* | ship : ship.name , ship.id , ship.location , ship.lost_in_battle , ship.tonnage , ship.*
natsql and SQL generation:
select _ , _ from _ where sum ( _ ) > _ group by _ | select battle.id , battle.name from battle join death on battle.id = death.caused_by_ship_id group by battle.id , battle.name having sum ( death.killed ) > 10
SQL = SELECT id , name FROM battle WHERE id IN (SELECT caused_by_ship_id FROM death GROUP BY caused_by_ship_id HAVING sum(killed) > 10)
natsql:
select _ , _ from _ where sum ( _ ) > _ group by _ | select battle.id , battle.name from battle join death on battle.id = death.caused_by_ship_id group by battle.id , battle.name having sum ( death.killed ) > 10

SQL:
SELECT id , name FROM battle WHERE id IN (SELECT caused_by_ship_id FROM death GROUP BY caused_by_ship_id HAVING sum(killed) > 10)
self correction:
SELECT id, name FROM battle WHERE id IN (SELECT caused_by_ship_id FROM death GROUP BY caused_by_ship_id HAVING sum(killed) > 10)

index is 500
SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1
What is the ship id and name that caused most total injuries?
schema_links:
What is the ship id and name that caused most total injuries? | ship : ship.name , ship.id , ship.ship_type , ship.lost_in_battle , ship.location , ship.* | death : death.injured , death.caused_by_ship_id , death.id , death.killed , death.note , death.* | battle : battle.id , battle.name , battle.date , battle.result , battle.bulgarian_commander , battle.*
natsql and SQL generation:
select _ , _ from _ group by _ order by sum ( _ ) desc limit _ | select ship.id , ship.name from death join ship on death.caused_by_ship_id = ship.id group by ship.id , ship.name order by sum ( death.injured ) desc limit 1
SQL = SELECT ship.id , ship.name FROM death JOIN ship ON death.caused_by_ship_id = ship.id GROUP BY ship.id , ship.name ORDER BY sum(injured) DESC LIMIT 1
natsql:
select _ , _ from _ group by _ order by sum ( _ ) desc limit _ | select ship.id , ship.name from death join ship on death.caused_by_ship_id = ship.id group by ship.id , ship.name order by sum ( death.injured ) desc limit 1

SQL:
SELECT ship.id , ship.name FROM death JOIN ship ON death.caused_by_ship_id = ship.id GROUP BY ship.id , ship.name ORDER BY sum(injured) DESC LIMIT 1
self correction:
SELECT ship.id, ship.name  FROM death  JOIN ship ON death.caused_by_ship_id = ship.id  GROUP BY ship.id, ship.name  ORDER BY SUM(death.injured) DESC  LIMIT 1

index is 501
SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'
What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?
schema_links:
What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'? | battle : battle.bulgarian_commander ( Kaloyan ) , battle.latin_commander ( Baldwin I ) , battle.name , battle.result , battle.id , battle.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.* | ship : ship.id , ship.name , ship.location , ship.lost_in_battle , ship.tonnage , ship.*
natsql and SQL generation:
select distinct _ from _ where @.@ = _ and @.@ = _ | select distinct battle.name from battle where battle.bulgarian_commander = 'Kaloyan' and battle.latin_commander = 'Baldwin I'
SQL = SELECT DISTINCT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'
natsql:
select distinct _ from _ where @.@ = _ and @.@ = _ | select distinct battle.name from battle where battle.bulgarian_commander = 'Kaloyan' and battle.latin_commander = 'Baldwin I'

SQL:
SELECT DISTINCT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'
self correction:
SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'

index is 502
SELECT count(DISTINCT RESULT) FROM battle
How many different results are there for the battles?
schema_links:
How many different results are there for the battles? | battle : battle.result , battle.name , battle.id , battle.date , battle.bulgarian_commander , battle.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.* | ship : ship.id , ship.name , ship.location , ship.lost_in_battle , ship.tonnage , ship.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct battle.result ) from battle
SQL = SELECT count(DISTINCT result) FROM battle
natsql:
select count ( distinct _ ) from _ | select count ( distinct battle.result ) from battle

SQL:
SELECT count(DISTINCT result) FROM battle
self correction:
SELECT count(DISTINCT result) AS result_count FROM battle

index is 503
SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );
How many battles did not lose any ship with tonnage '225'?
schema_links:
How many battles did not lose any ship with tonnage '225'? | ship : ship.tonnage , ship.lost_in_battle , ship.id , ship.name , ship.location , ship.* | battle : battle.result , battle.id , battle.name , battle.date , battle.bulgarian_commander , battle.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.*
natsql and SQL generation:
select count ( * ) from _ where @.@ != @  | select count ( * ) from battle where lost_in_battle is null and id not in (select lost_in_battle from ship where tonnage = '225')
SQL = SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225') AND lost_in_battle IS NULL
natsql:
select count ( * ) from _ where @.@ != @  | select count ( * ) from battle where lost_in_battle is null and id not in (select lost_in_battle from ship where tonnage = '225')

SQL:
SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225') AND lost_in_battle IS NULL
self correction:
SELECT COUNT(*)  FROM battle  WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225' AND lost_in_battle IS NOT NULL)

index is 504
SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'
List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'
schema_links:
List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta' | battle : battle.name , battle.date , battle.result , battle.id , battle.bulgarian_commander , battle.* | ship : ship.name ( HMS Atalanta , Lettice ) , ship.lost_in_battle , ship.id , ship.ship_type , ship.location , ship.* | death : death.killed , death.id , death.note , death.injured , death.caused_by_ship_id , death.*
natsql and SQL generation:
select _ , _ from _ where ( _ = _ or _ = _ ) | select battle.name , battle.date from battle where ( ship.name = 'Lettice' or ship.name = 'HMS Atalanta' )
SQL = SELECT name ,  date FROM battle WHERE (name = 'Lettice' OR name = 'HMS Atalanta')
natsql:
select _ , _ from _ where ( _ = _ or _ = _ ) | select battle.name , battle.date from battle where ( ship.name = 'Lettice' or ship.name = 'HMS Atalanta' )

SQL:
SELECT name ,  date FROM battle WHERE (name = 'Lettice' OR name = 'HMS Atalanta')
self correction:
SELECT name, date FROM battle WHERE id IN (     SELECT lost_in_battle     FROM ship     WHERE name = 'Lettice' OR name = 'HMS Atalanta' )

index is 505
SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'
Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.
schema_links:
Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'. | ship : ship.location ( English Channel ) , ship.lost_in_battle , ship.name , ship.id , ship.ship_type , ship.* | battle : battle.bulgarian_commander , battle.name , battle.result , battle.id , battle.date , battle.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.*
natsql and SQL generation:
select _ , _ , _ from _ where _.@ = _ | select battle.name , battle.result , battle.bulgarian_commander from battle where not exists ( select * from ship where ship.lost_in_battle = battle.id and ship.location = 'English Channel' )
SQL = SELECT name , result , bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location  =  'English Channel')
natsql:
select _ , _ , _ from _ where _.@ = _ | select battle.name , battle.result , battle.bulgarian_commander from battle where not exists ( select * from ship where ship.lost_in_battle = battle.id and ship.location = 'English Channel' )

SQL:
SELECT name , result , bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location  =  'English Channel')
self correction:
SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (     SELECT lost_in_battle     FROM ship     WHERE location = 'English Channel'         AND lost_in_battle IS NOT NULL )

index is 506
SELECT note FROM death WHERE note LIKE '%East%'
What are the notes of the death events which has substring 'East'?
schema_links:
What are the notes of the death events which has substring 'East'? | death : death.note , death.killed , death.caused_by_ship_id , death.id , death.injured , death.* | battle : battle.id , battle.name , battle.date , battle.result , battle.bulgarian_commander , battle.* | ship : ship.name , ship.id , ship.ship_type , ship.location , ship.lost_in_battle , ship.*
natsql and SQL generation:
select _ from _ where _ like '%' || _ || '%' | select death.note from death where death.note like '%East%'
SQL = SELECT note FROM death WHERE note LIKE '%East%'
natsql:
select _ from _ where _ like '%' || _ || '%' | select death.note from death where death.note like '%East%'

SQL:
SELECT note FROM death WHERE note LIKE '%East%'
self correction:
SELECT note FROM death WHERE note LIKE '%East%'

index is 507
SELECT line_1 ,  line_2 FROM addresses
what are all the addresses including line 1 and line 2?
schema_links:
what are all the addresses including line 1 and line 2? | addresses : addresses.line_1 , addresses.line_2 , addresses.other_address_details , addresses.address_id , addresses.line_3 , addresses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | students : students.email_address , students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.* | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.*
natsql and SQL generation:
select _ , _ from _
SQL = SELECT line_1 , line_2 FROM addresses
natsql:
select _ , _ from _

SQL:
SELECT line_1 , line_2 FROM addresses
self correction:
SELECT line_1, line_2 FROM Addresses

index is 508
SELECT line_1 ,  line_2 FROM addresses
What is the first and second line for all addresses?
schema_links:
What is the first and second line for all addresses? | addresses : addresses.line_2 , addresses.line_1 , addresses.address_id , addresses.line_3 , addresses.city , addresses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.* | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.*
natsql and SQL generation:
select _ , _ from _ | select addresses.line_1 , addresses.line_2 from addresses
SQL = SELECT line_1 ,  line_2 FROM addresses
natsql:
select _ , _ from _ | select addresses.line_1 , addresses.line_2 from addresses

SQL:
SELECT line_1 ,  line_2 FROM addresses
self correction:
SELECT line_1, line_2 FROM Addresses

index is 509
SELECT count(*) FROM Courses
How many courses in total are listed?
schema_links:
How many courses in total are listed? | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details , sections.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( * ) from course
SQL = SELECT count(*) FROM course
natsql:
select count ( _ ) from _ | select count ( * ) from course

SQL:
SELECT count(*) FROM course
self correction:
SELECT count(*) FROM Courses

index is 510
SELECT count(*) FROM Courses
How many courses are there?
schema_links:
How many courses are there? | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | sections : sections.course_id , sections.section_id , sections.section_name , sections.section_description , sections.other_details , sections.* | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.*
natsql and SQL generation:
select count ( * ) from _ | select count ( * ) from courses
SQL = SELECT count(*) FROM courses
natsql:
select count ( * ) from _ | select count ( * ) from courses

SQL:
SELECT count(*) FROM courses
self correction:
SELECT count(*) FROM Courses

index is 511
SELECT course_description FROM Courses WHERE course_name  =  'math'
How is the math course described?
schema_links:
How is the math course described? | courses : courses.course_name ( math ) , courses.course_description , courses.course_id , courses.other_details , courses.* | departments : departments.department_name ( math ) , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.* | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details , sections.*
natsql and SQL generation:
select _ from _ where _ = _ | select courses.course_description from courses where courses.course_name = 'math'
SQL = SELECT course_description FROM courses WHERE course_name = 'math'
natsql:
select _ from _ where _ = _ | select courses.course_description from courses where courses.course_name = 'math'

SQL:
SELECT course_description FROM courses WHERE course_name = 'math'
self correction:
SELECT course_description FROM Courses WHERE course_name = 'math';

index is 512
SELECT course_description FROM Courses WHERE course_name  =  'math'
What are the descriptions for all the math courses?
schema_links:
What are the descriptions for all the math courses? | courses : courses.course_description , courses.course_name ( math ) , courses.course_id , courses.other_details , courses.* | departments : departments.department_name ( math ) , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.* | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details , sections.*
natsql and SQL generation:
select _ from _ where @.@ = _ | select courses.course_description from courses where departments.department_name = 'math' and departments.department_id = courses.department_id
SQL = SELECT course_description FROM courses JOIN departments ON departments.department_id = courses.department_id WHERE departments.department_name = 'math'
natsql:
select _ from _ where @.@ = _ | select courses.course_description from courses where departments.department_name = 'math' and departments.department_id = courses.department_id

SQL:
SELECT course_description FROM courses JOIN departments ON departments.department_id = courses.department_id WHERE departments.department_name = 'math'
self correction:
SELECT courses.course_description  FROM courses  JOIN departments ON departments.department_id = courses.department_id  WHERE departments.department_name = 'math'

index is 513
SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'
What is the zip code of the address in the city Port Chelsea?
schema_links:
What is the zip code of the address in the city Port Chelsea? | addresses : addresses.city ( Port Chelsea ) , addresses.zip_postcode , addresses.address_id , addresses.country , addresses.line_1 , addresses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql and SQL generation:
select _ from _ where @ = _ | select addresses.zip_postcode from addresses where addresses.city = 'Port Chelsea'
SQL = SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'
natsql:
select _ from _ where @ = _ | select addresses.zip_postcode from addresses where addresses.city = 'Port Chelsea'

SQL:
SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'
self correction:
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'

index is 514
SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'
What is the zip code for Port Chelsea?
schema_links:
What is the zip code for Port Chelsea? | addresses : addresses.city ( Port Chelsea ) , addresses.zip_postcode , addresses.country , addresses.address_id , addresses.line_1 , addresses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.* | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.*
natsql and SQL generation:
select _ from _ where _ = _ | select addresses.zip_postcode from addresses where addresses.city = 'Port Chelsea'
SQL = SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'
natsql:
select _ from _ where _ = _ | select addresses.zip_postcode from addresses where addresses.city = 'Port Chelsea'

SQL:
SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea'
self correction:
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'

index is 515
SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1
Which department offers the most number of degrees? List department name and id.
schema_links:
Which department offers the most number of degrees? List department name and id. | degree_programs : degree_programs.department_id , degree_programs.degree_program_id , degree_programs.degree_summary_description , degree_programs.degree_summary_name , degree_programs.other_details , degree_programs.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | addresses : addresses.line_2 , addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql and SQL generation:
select _ , _ from _ group by _ order by count ( _ ) desc limit _ | select departments.department_name , departments.department_id from departments group by departments.department_id order by count ( degree_programs.degree_program_id ) desc limit 1
SQL = SELECT department_name ,  department_id FROM departments GROUP BY department_id ORDER BY count(*) DESC LIMIT 1
natsql:
select _ , _ from _ group by _ order by count ( _ ) desc limit _ | select departments.department_name , departments.department_id from departments group by departments.department_id order by count ( degree_programs.degree_program_id ) desc limit 1

SQL:
SELECT department_name ,  department_id FROM departments GROUP BY department_id ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT department_name, department_id  FROM Departments  INNER JOIN Degree_Programs ON Degree_Programs.department_id = Departments.department_id  GROUP BY department_name, department_id  ORDER BY COUNT(Degree_Programs.degree_program_id) DESC  LIMIT 1

index is 516
select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1
What is the name and id of the department with the most number of degrees ?
schema_links:
What is the name and id of the department with the most number of degrees ? | degree_programs : degree_programs.department_id , degree_programs.degree_program_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.* | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.*
natsql and SQL generation:
select _ , _ from _ group by _ order by count ( _ ) desc limit _ | select department.department_name , department.department_id from department group by department.department_name , department.department_id order by count ( degree_programs.* ) desc limit 1
SQL = SELECT department_name ,  department_id FROM departments AS T1 JOIN degree_programs AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name , department_id ORDER BY count(*) DESC LIMIT 1
natsql:
select _ , _ from _ group by _ order by count ( _ ) desc limit _ | select department.department_name , department.department_id from department group by department.department_name , department.department_id order by count ( degree_programs.* ) desc limit 1

SQL:
SELECT department_name ,  department_id FROM departments AS T1 JOIN degree_programs AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name , department_id ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT T1.department_name, T1.department_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_name, T1.department_id ORDER BY COUNT(*) DESC LIMIT 1

index is 517
SELECT count(DISTINCT department_id) FROM Degree_Programs
How many departments offer any degree?
schema_links:
How many departments offer any degree? | degree_programs : degree_programs.department_id , degree_programs.degree_program_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | courses : courses.course_name , courses.course_description , courses.course_id , courses.other_details , courses.* | sections : sections.section_name , sections.section_id , sections.course_id , sections.section_description , sections.other_details , sections.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct departments.department_id ) from departments inner join degree_programs on departments.department_id = degree_programs.department_id
SQL = SELECT COUNT(DISTINCT department_id) FROM degree_programs
natsql:
select count ( distinct _ ) from _ | select count ( distinct departments.department_id ) from departments inner join degree_programs on departments.department_id = degree_programs.department_id

SQL:
SELECT COUNT(DISTINCT department_id) FROM degree_programs
self correction:
SELECT COUNT(DISTINCT department_id) FROM Departments

index is 518
SELECT count(DISTINCT department_id) FROM Degree_Programs
How many different departments offer degrees?
schema_links:
How many different departments offer degrees? | degree_programs : degree_programs.department_id , degree_programs.degree_program_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | sections : sections.section_name , sections.section_id , sections.course_id , sections.section_description , sections.other_details , sections.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct department_id ) from degree_programs
SQL = SELECT count(DISTINCT department_id) FROM degree_programs
natsql:
select count ( distinct _ ) from _ | select count ( distinct department_id ) from degree_programs

SQL:
SELECT count(DISTINCT department_id) FROM degree_programs
self correction:
SELECT count(DISTINCT department_id) FROM Departments

index is 519
SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs
How many different degree names are offered?
schema_links:
How many different degree names are offered? | degree_programs : degree_programs.degree_summary_name , degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | student_enrolment : student_enrolment.degree_program_id , student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | courses : courses.course_name , courses.course_description , courses.course_id , courses.other_details , courses.* | sections : sections.section_name , sections.section_id , sections.course_id , sections.section_description , sections.other_details , sections.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct degree_programs.degree_summary_name ) from degree_programs
SQL = SELECT count(DISTINCT degree_summary_name) FROM degree_programs
natsql:
select count ( distinct _ ) from _ | select count ( distinct degree_programs.degree_summary_name ) from degree_programs

SQL:
SELECT count(DISTINCT degree_summary_name) FROM degree_programs
self correction:
SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs

index is 520
SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs
How many different degrees are offered?
schema_links:
How many different degrees are offered? | degree_programs : degree_programs.degree_summary_name , degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | student_enrolment : student_enrolment.degree_program_id , student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | sections : sections.section_name , sections.course_id , sections.section_description , sections.section_id , sections.other_details , sections.* | courses : courses.course_name , courses.course_description , courses.course_id , courses.other_details , courses.*
natsql and SQL generation:
select count(distinct _) from _ | select count(distinct degree_programs.degree_program_id) from degree_programs
SQL = SELECT COUNT(DISTINCT degree_program_id) FROM degree_programs
natsql:
select count(distinct _) from _ | select count(distinct degree_programs.degree_program_id) from degree_programs

SQL:
SELECT COUNT(DISTINCT degree_program_id) FROM degree_programs
self correction:
SELECT COUNT(DISTINCT degree_program_id) FROM Degree_Programs

index is 521
SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'
How many degrees does the engineering department offer?
schema_links:
How many degrees does the engineering department offer? | degree_programs : degree_programs.department_id , degree_programs.degree_program_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | addresses : addresses.line_2 , addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.*
natsql and SQL generation:
select count ( _ ) from _ where _ | select count ( * ) from degree_programs where department_id  =  (SELECT department_id FROM departments WHERE department_name  =  'engineering')

SQL = SELECT count(*) FROM degree_programs WHERE department_id  =  (SELECT department_id FROM departments WHERE department_name  =  'engineering')
natsql:
select count ( _ ) from _ where _ | select count ( * ) from degree_programs where department_id  =  (SELECT department_id FROM departments WHERE department_name  =  'engineering')


SQL:
SELECT count(*) FROM degree_programs WHERE department_id  =  (SELECT department_id FROM departments WHERE department_name  =  'engineering')
self correction:
SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (   SELECT department_id   FROM Departments   WHERE department_name = 'engineering' )

index is 522
SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'
How many degrees does the engineering department have?
schema_links:
How many degrees does the engineering department have? | degree_programs : degree_programs.department_id , degree_programs.degree_program_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.line_2 , addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.* | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.*
natsql and SQL generation:
select count ( _ ) from _ where _ | select count ( degree_programs.degree_program_id ) from degree_programs join departments on degree_programs.department_id = departments.department_id where departments.department_name = 'engineering'
SQL = SELECT count(degree_program_id) FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id WHERE departments.department_name = 'engineering'
natsql:
select count ( _ ) from _ where _ | select count ( degree_programs.degree_program_id ) from degree_programs join departments on degree_programs.department_id = departments.department_id where departments.department_name = 'engineering'

SQL:
SELECT count(degree_program_id) FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id WHERE departments.department_name = 'engineering'
self correction:
SELECT COUNT(Degree_Programs.degree_program_id)  FROM Degree_Programs  JOIN Departments ON Degree_Programs.department_id = Departments.department_id  WHERE Departments.department_name = 'engineering'

index is 523
SELECT section_name ,  section_description FROM Sections
What are the names and descriptions of all the sections?
schema_links:
What are the names and descriptions of all the sections? | sections : sections.section_description , sections.section_name , sections.section_id , sections.course_id , sections.other_details , sections.* | courses : courses.course_description , courses.course_name , courses.course_id , courses.other_details , courses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.*
natsql and SQL generation:
select _ , _ from _ | select section.section_name , section.section_description from section
SQL = SELECT section_name ,  section_description FROM section
natsql:
select _ , _ from _ | select section.section_name , section.section_description from section

SQL:
SELECT section_name ,  section_description FROM section
self correction:
SELECT Sections.section_name, Sections.section_description FROM Sections

index is 524
SELECT section_name ,  section_description FROM Sections
What are the names and descriptions for all the sections?
schema_links:
What are the names and descriptions for all the sections? | sections : sections.section_description , sections.section_name , sections.section_id , sections.course_id , sections.other_details , sections.* | courses : courses.course_name , courses.course_description , courses.course_id , courses.other_details , courses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.*
natsql and SQL generation:
select _ , _ from _ | select sections.section_name , sections.section_description from sections
SQL = SELECT section_name ,  section_description FROM sections
natsql:
select _ , _ from _ | select sections.section_name , sections.section_description from sections

SQL:
SELECT section_name ,  section_description FROM sections
self correction:
SELECT Sections.section_name, Sections.section_description FROM Sections

index is 525
SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2
What are the names and id of courses having at most 2 sections?
schema_links:
What are the names and id of courses having at most 2 sections? | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.* | sections : sections.course_id , sections.section_id , sections.section_name , sections.section_description , sections.other_details , sections.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.*
natsql and SQL generation:
select _ , _ from _ where count ( _ ) <= _ group by _ | select courses.course_name , courses.course_id from courses join sections on sections.course_id = courses.course_id group by courses.course_name , courses.course_id having count(sections.section_id) <= 2
SQL = SELECT course_name ,  course_id FROM courses JOIN sections ON sections.course_id  =  courses.course_id GROUP BY course_name ,  course_id HAVING count(section_id)  <=  2
natsql:
select _ , _ from _ where count ( _ ) <= _ group by _ | select courses.course_name , courses.course_id from courses join sections on sections.course_id = courses.course_id group by courses.course_name , courses.course_id having count(sections.section_id) <= 2

SQL:
SELECT course_name ,  course_id FROM courses JOIN sections ON sections.course_id  =  courses.course_id GROUP BY course_name ,  course_id HAVING count(section_id)  <=  2
self correction:
SELECT courses.course_name, courses.course_id  FROM courses  JOIN sections ON sections.course_id = courses.course_id  GROUP BY courses.course_name, courses.course_id  HAVING COUNT(sections.section_id) <= 2

index is 526
SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2
What are the names and ids of every course with less than 2 sections?
schema_links:
What are the names and ids of every course with less than 2 sections? | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | sections : sections.course_id , sections.section_id , sections.section_name , sections.section_description , sections.other_details , sections.* | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.*
natsql and SQL generation:
select _ , _ from _ where count ( _ ) < _ group by _ | select course.course_name , course.course_id from course where count ( section.course_id ) < 2 group by course.course_name
SQL = SELECT course_name ,  course_id FROM course JOIN section ON course.course_id  =  section.course_id GROUP BY course.course_name HAVING count(section.course_id)  <  2
natsql:
select _ , _ from _ where count ( _ ) < _ group by _ | select course.course_name , course.course_id from course where count ( section.course_id ) < 2 group by course.course_name

SQL:
SELECT course_name ,  course_id FROM course JOIN section ON course.course_id  =  section.course_id GROUP BY course.course_name HAVING count(section.course_id)  <  2
self correction:
SELECT Courses.course_name, Courses.course_id FROM Courses LEFT JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_name, Courses.course_id HAVING COUNT(Sections.section_id) < 2

index is 527
SELECT section_name FROM Sections ORDER BY section_name DESC
List the section_name in reversed lexicographical order.
schema_links:
List the section_name in reversed lexicographical order. | sections : sections.section_name , sections.section_description , sections.section_id , sections.course_id , sections.other_details , sections.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql and SQL generation:
select _ from _ order by _ desc | select sections.section_name from sections order by sections.section_name desc
SQL = SELECT section_name FROM sections ORDER BY section_name DESC
natsql:
select _ from _ order by _ desc | select sections.section_name from sections order by sections.section_name desc

SQL:
SELECT section_name FROM sections ORDER BY section_name DESC
self correction:
SELECT section_name FROM Sections ORDER BY section_name DESC

index is 528
SELECT section_name FROM Sections ORDER BY section_name DESC
What are the names of the sections in reverse alphabetical order?
schema_links:
What are the names of the sections in reverse alphabetical order? | sections : sections.section_name , sections.section_description , sections.section_id , sections.course_id , sections.other_details , sections.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql and SQL generation:
select _ from _ order by _ desc | select sections.section_name from sections order by sections.section_name desc
SQL = SELECT section_name FROM sections ORDER BY section_name DESC
natsql:
select _ from _ order by _ desc | select sections.section_name from sections order by sections.section_name desc

SQL:
SELECT section_name FROM sections ORDER BY section_name DESC
self correction:
SELECT section_name FROM Sections ORDER BY section_name DESC

index is 529
SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1
What is the semester which most student registered in? Show both the name and the id.
schema_links:
What is the semester which most student registered in? Show both the name and the id. | semesters : semesters.semester_name , semesters.semester_id , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment : student_enrolment.semester_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.degree_program_id , student_enrolment.other_details , student_enrolment.* | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.* | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ order by count ( _ ) desc limit _ | select semesters.semester_name , semesters.semester_id from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id group by semesters.semester_id order by count ( student_enrolment.student_enrolment_id ) desc limit 1
SQL = SELECT semester_name ,  semester_id FROM semesters JOIN student_enrolment ON semesters.semester_id  =  student_enrolment.semester_id GROUP BY semesters.semester_id ORDER BY count(student_enrolment.student_enrolment_id) DESC LIMIT 1
natsql:
select _ , count ( _ ) from _ group by _ order by count ( _ ) desc limit _ | select semesters.semester_name , semesters.semester_id from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id group by semesters.semester_id order by count ( student_enrolment.student_enrolment_id ) desc limit 1

SQL:
SELECT semester_name ,  semester_id FROM semesters JOIN student_enrolment ON semesters.semester_id  =  student_enrolment.semester_id GROUP BY semesters.semester_id ORDER BY count(student_enrolment.student_enrolment_id) DESC LIMIT 1
self correction:
SELECT Semesters.semester_name, Semesters.semester_id  FROM Semesters  JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id  GROUP BY Semesters.semester_id, Semesters.semester_name  ORDER BY COUNT(Student_Enrolment.student_enrolment_id) DESC  LIMIT 1

index is 530
SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1
For each semester, what is the name and id of the one with the most students registered?
schema_links:
For each semester, what is the name and id of the one with the most students registered? | semesters : semesters.semester_name , semesters.semester_id , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment : student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.other_details , student_enrolment.* | students : students.student_id , students.first_name , students.current_address_id , students.permanent_address_id , students.middle_name , students.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.*
natsql and SQL generation:
select _ , _ from _ where _ = ( select count ( _ ) from _ where _ = _ ) group by _ | select semesters.semester_name , semesters.semester_id from semesters where semesters.semester_id = ( select count ( student_enrolment.student_id ) from student_enrolment where student_enrolment.semester_id = semesters.semester_id ) group by semesters.semester_name
SQL = SELECT semester_name ,  semester_id FROM semesters WHERE semester_id  =  (SELECT count(student_id) FROM student_enrolment WHERE semester_id  =  semesters.semester_id) GROUP BY semester_name
natsql:
select _ , _ from _ where _ = ( select count ( _ ) from _ where _ = _ ) group by _ | select semesters.semester_name , semesters.semester_id from semesters where semesters.semester_id = ( select count ( student_enrolment.student_id ) from student_enrolment where student_enrolment.semester_id = semesters.semester_id ) group by semesters.semester_name

SQL:
SELECT semester_name ,  semester_id FROM semesters WHERE semester_id  =  (SELECT count(student_id) FROM student_enrolment WHERE semester_id  =  semesters.semester_id) GROUP BY semester_name
self correction:
SELECT semester_name, semester_id FROM Semesters WHERE semester_id = (   SELECT semester_id   FROM Student_Enrolment   GROUP BY semester_id   ORDER BY COUNT(student_id) DESC   LIMIT 1 )

index is 531
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
What is the description of the department whose name has the substring the computer?
schema_links:
What is the description of the department whose name has the substring the computer? | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.line_2 , addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.* | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql and SQL generation:
select _ from _ where _ like '%the computer%' | select department.department_description from department where department.department_name like '%the computer%'
SQL = SELECT department_description FROM department WHERE department_name LIKE '%the computer%'
natsql:
select _ from _ where _ like '%the computer%' | select department.department_description from department where department.department_name like '%the computer%'

SQL:
SELECT department_description FROM department WHERE department_name LIKE '%the computer%'
self correction:
SELECT department_description  FROM Departments  WHERE department_name LIKE '%the computer%'

index is 532
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
What is the department description for the one whose name has the word computer?
schema_links:
What is the department description for the one whose name has the word computer? | departments : departments.department_description , departments.department_name , departments.department_id , departments.other_details , departments.* | students : students.first_name , students.last_name , students.middle_name , students.email_address , students.student_id , students.* | addresses : addresses.line_2 , addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql and SQL generation:
select _ from _ where _ like '%computer%' | select department_description from departments where department_name like '%computer%'
SQL = SELECT department_description FROM departments WHERE department_name LIKE '%computer%'
natsql:
select _ from _ where _ like '%computer%' | select department_description from departments where department_name like '%computer%'

SQL:
SELECT department_description FROM departments WHERE department_name LIKE '%computer%'
self correction:
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'

index is 533
SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.
schema_links:
Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id. | students : students.first_name , students.middle_name , students.last_name , students.student_id , students.permanent_address_id , students.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.semester_id , student_enrolment.degree_program_id , student_enrolment.student_id , student_enrolment.other_details , student_enrolment.* | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.* | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.*
natsql and SQL generation:
select _ , _ , _ , _ from _ where count ( distinct _ ) = _ group by _ | select students.first_name , students.middle_name , students.last_name , students.student_id from students join student_enrolment on students.student_id = student_enrolment.student_id where count ( distinct student_enrolment.degree_program_id ) = 2 and count ( distinct student_enrolment.semester_id ) = 1 group by students.first_name , students.middle_name , students.last_name , students.student_id
SQL = SELECT first_name , middle_name , last_name , student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE student_enrolment.degree_program_id IN (SELECT degree_program_id FROM student_enrolment GROUP BY student_id HAVING count(DISTINCT degree_program_id) = 2) AND student_enrolment.semester_id IN (SELECT semester_id FROM student_enrolment GROUP BY student_id HAVING count(DISTINCT semester_id) = 1)
natsql:
select _ , _ , _ , _ from _ where count ( distinct _ ) = _ group by _ | select students.first_name , students.middle_name , students.last_name , students.student_id from students join student_enrolment on students.student_id = student_enrolment.student_id where count ( distinct student_enrolment.degree_program_id ) = 2 and count ( distinct student_enrolment.semester_id ) = 1 group by students.first_name , students.middle_name , students.last_name , students.student_id

SQL:
SELECT first_name , middle_name , last_name , student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE student_enrolment.degree_program_id IN (SELECT degree_program_id FROM student_enrolment GROUP BY student_id HAVING count(DISTINCT degree_program_id) = 2) AND student_enrolment.semester_id IN (SELECT semester_id FROM student_enrolment GROUP BY student_id HAVING count(DISTINCT semester_id) = 1)
self correction:
SELECT first_name, middle_name, last_name, student_id  FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  WHERE Student_Enrolment.degree_program_id IN (     SELECT degree_program_id      FROM Student_Enrolment      GROUP BY student_id      HAVING COUNT(DISTINCT degree_program_id) = 2 )  AND Student_Enrolment.semester_id IN (     SELECT semester_id      FROM Student_Enrolment      GROUP BY student_id      HAVING COUNT(DISTINCT semester_id) = 1 )

index is 534
SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?
schema_links:
What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester? | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.degree_program_id , student_enrolment.other_details , student_enrolment.* | students : students.first_name , students.last_name , students.middle_name , students.student_id , students.email_address , students.* | semesters : semesters.semester_name , semesters.semester_id , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*
natsql and SQL generation:
select _ , _ , _ , _ from _ where count ( distinct _ ) = _ and count ( distinct _ ) = _ | select students.first_name , students.middle_name , students.last_name , students.student_id from students join student_enrolment on students.student_id = student_enrolment.student_id where count ( distinct student_enrolment.degree_program_id ) = 2 and count ( distinct student_enrolment.semester_id ) = 1
SQL = SELECT first_name ,  middle_name ,  last_name ,  student_id FROM students JOIN student_enrolment ON students.student_id  =  student_enrolment.student_id GROUP BY students.student_id HAVING count(DISTINCT student_enrolment.degree_program_id)  =  2 AND count(DISTINCT student_enrolment.semester_id)  =  1
natsql:
select _ , _ , _ , _ from _ where count ( distinct _ ) = _ and count ( distinct _ ) = _ | select students.first_name , students.middle_name , students.last_name , students.student_id from students join student_enrolment on students.student_id = student_enrolment.student_id where count ( distinct student_enrolment.degree_program_id ) = 2 and count ( distinct student_enrolment.semester_id ) = 1

SQL:
SELECT first_name ,  middle_name ,  last_name ,  student_id FROM students JOIN student_enrolment ON students.student_id  =  student_enrolment.student_id GROUP BY students.student_id HAVING count(DISTINCT student_enrolment.degree_program_id)  =  2 AND count(DISTINCT student_enrolment.semester_id)  =  1
self correction:
SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2 AND COUNT(DISTINCT student_enrolment.semester_id) = 1

index is 535
SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'
Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.
schema_links:
Who is enrolled in a Bachelor degree program? List the first name, middle name, last name. | students : students.first_name , students.middle_name , students.last_name , students.student_id , students.email_address , students.* | degree_programs : degree_programs.degree_summary_name ( Bachelor ) , degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.*
natsql and SQL generation:
select _ , _ , _ from _ where @.@ = ( select @.@ from @ where @.@ = @ ) | select students.first_name , students.middle_name , students.last_name from students where students.student_id in ( select student_enrolment.student_id from student_enrolment where student_enrolment.degree_program_id in ( select degree_programs.degree_program_id from degree_programs where degree_programs.degree_summary_name = 'Bachelor' ) )
SQL = SELECT first_name ,  middle_name ,  last_name FROM students WHERE student_id IN (SELECT student_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name  =  'Bachelor'))
natsql:
select _ , _ , _ from _ where @.@ = ( select @.@ from @ where @.@ = @ ) | select students.first_name , students.middle_name , students.last_name from students where students.student_id in ( select student_enrolment.student_id from student_enrolment where student_enrolment.degree_program_id in ( select degree_programs.degree_program_id from degree_programs where degree_programs.degree_summary_name = 'Bachelor' ) )

SQL:
SELECT first_name ,  middle_name ,  last_name FROM students WHERE student_id IN (SELECT student_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name  =  'Bachelor'))
self correction:
SELECT first_name, middle_name, last_name FROM Students WHERE student_id IN (   SELECT student_id   FROM Student_Enrolment   WHERE degree_program_id IN (     SELECT degree_program_id     FROM Degree_Programs     WHERE degree_summary_name = 'Bachelor'   ) )

index is 536
SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'
What are the first, middle, and last names for everybody enrolled in a Bachelors program?
schema_links:
What are the first, middle, and last names for everybody enrolled in a Bachelors program? | students : students.last_name , students.first_name , students.middle_name , students.student_id , students.email_address , students.* | student_enrolment : student_enrolment.degree_program_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | degree_programs : degree_programs.degree_summary_name , degree_programs.department_id , degree_programs.degree_summary_description , degree_programs.degree_program_id , degree_programs.other_details , degree_programs.* | courses : courses.course_name , courses.course_description , courses.course_id , courses.other_details , courses.*
natsql and SQL generation:
select _ , _ , _ from _ where _ | select students.first_name , students.middle_name , students.last_name from students join student_enrolment on students.student_id = student_enrolment.student_id join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id where degree_programs.degree_summary_name = 'Bachelors'
natsql:
select _ , _ , _ from _ where _ | select students.first_name , students.middle_name , students.last_name from students join student_enrolment on students.student_id = student_enrolment.student_id join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id where degree_programs.degree_summary_name = 'Bachelors'
SQL:
SELECT first_name ,  middle_name ,  last_name FROM students JOIN student_enrolment ON students.student_id  =  student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id  =  degree_programs.degree_program_id WHERE degree_programs.degree_summary_name  =  'Bachelors'
self correction:
SELECT first_name, middle_name, last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelors'

index is 537
SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1
Find the kind of program which most number of students are enrolled in?
schema_links:
Find the kind of program which most number of students are enrolled in? | student_enrolment : student_enrolment.degree_program_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | degree_programs : degree_programs.degree_summary_name , degree_programs.degree_program_id , degree_programs.degree_summary_description , degree_programs.department_id , degree_programs.other_details , degree_programs.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | sections : sections.section_name , sections.course_id , sections.section_description , sections.section_id , sections.other_details , sections.*
natsql and SQL generation:
select _ from _ group by _ order by count ( * ) desc limit _ | select degree_programs.degree_summary_name from degree_programs group by degree_programs.degree_summary_name order by count ( * ) desc limit 1
natsql:
select _ from _ group by _ order by count ( * ) desc limit _ | select degree_programs.degree_summary_name from degree_programs group by degree_programs.degree_summary_name order by count ( * ) desc limit 1
SQL:
SELECT degree_summary_name FROM Degree_Programs GROUP BY degree_summary_name ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT degree_summary_name, COUNT(*) AS enrolment_count FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY enrolment_count DESC LIMIT 1

index is 538
SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1
What is the degree summary name that has the most number of students enrolled?
schema_links:
What is the degree summary name that has the most number of students enrolled? | degree_programs : degree_programs.degree_summary_name , degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | student_enrolment : student_enrolment.degree_program_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | courses : courses.course_name , courses.course_description , courses.course_id , courses.other_details , courses.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select degree_programs.degree_summary_name from degree_programs group by degree_programs.degree_summary_name order by count ( student_enrolment.student_id ) desc limit 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select degree_programs.degree_summary_name from degree_programs group by degree_programs.degree_summary_name order by count ( student_enrolment.student_id ) desc limit 1
SQL:
SELECT degree_summary_name FROM Degree_Programs GROUP BY degree_summary_name ORDER BY COUNT(DISTINCT student_id) DESC LIMIT 1
self correction:
SELECT degree_summary_name  FROM Degree_Programs  JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_summary_name  ORDER BY COUNT(DISTINCT Student_Enrolment.student_id) DESC  LIMIT 1

index is 539
SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1
Find the program which most number of students are enrolled in. List both the id and the summary.
schema_links:
Find the program which most number of students are enrolled in. List both the id and the summary. | student_enrolment : student_enrolment.degree_program_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | degree_programs : degree_programs.degree_summary_name , degree_programs.degree_program_id , degree_programs.degree_summary_description , degree_programs.department_id , degree_programs.other_details , degree_programs.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | addresses : addresses.line_2 , addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.*
natsql and SQL generation:
select _ , _ from _ where _ = ( select _ from _ group by _ order by count ( _ ) desc limit _ ) | select degree_programs.degree_program_id , degree_programs.degree_summary_name from student_enrolment join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id group by student_enrolment.degree_program_id order by count ( student_enrolment.student_enrolment_id ) desc limit 1
SQL = SELECT degree_program_id , degree_summary_name FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id  =  degree_programs.degree_program_id GROUP BY student_enrolment.degree_program_id ORDER BY count(student_enrolment.student_enrolment_id) DESC LIMIT 1
natsql:
select _ , _ from _ where _ = ( select _ from _ group by _ order by count ( _ ) desc limit _ ) | select degree_programs.degree_program_id , degree_programs.degree_summary_name from student_enrolment join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id group by student_enrolment.degree_program_id order by count ( student_enrolment.student_enrolment_id ) desc limit 1

SQL:
SELECT degree_program_id , degree_summary_name FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id  =  degree_programs.degree_program_id GROUP BY student_enrolment.degree_program_id ORDER BY count(student_enrolment.student_enrolment_id) DESC LIMIT 1
self correction:
SELECT degree_program_id, degree_summary_name FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY Student_Enrolment.degree_program_id, Degree_Programs.degree_summary_name ORDER BY COUNT(Student_Enrolment.student_enrolment_id) DESC LIMIT 1

index is 540
SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1
What is the program id and the summary of the degree that has the most students enrolled?
schema_links:
What is the program id and the summary of the degree that has the most students enrolled? | degree_programs : degree_programs.degree_summary_name , degree_programs.degree_program_id , degree_programs.degree_summary_description , degree_programs.department_id , degree_programs.other_details , degree_programs.* | student_enrolment : student_enrolment.degree_program_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.*
natsql and SQL generation:
select _ , _ from _ group by _ order by count ( _ ) desc limit _ | select degree_programs.degree_program_id , degree_programs.degree_summary_description from degree_programs group by degree_programs.degree_program_id , degree_programs.degree_summary_description order by count ( student_enrolment.student_id ) desc limit 1
SQL = SELECT degree_program_id ,  degree_summary_description FROM degree_programs GROUP BY degree_program_id , degree_summary_description ORDER BY count(student_id) DESC LIMIT 1
natsql:
select _ , _ from _ group by _ order by count ( _ ) desc limit _ | select degree_programs.degree_program_id , degree_programs.degree_summary_description from degree_programs group by degree_programs.degree_program_id , degree_programs.degree_summary_description order by count ( student_enrolment.student_id ) desc limit 1

SQL:
SELECT degree_program_id ,  degree_summary_description FROM degree_programs GROUP BY degree_program_id , degree_summary_description ORDER BY count(student_id) DESC LIMIT 1
self correction:
SELECT degree_program_id, degree_summary_description FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description ORDER BY COUNT(Student_Enrolment.student_id) DESC LIMIT 1

index is 541
SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.
schema_links:
Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id. | students : students.first_name , students.last_name , students.middle_name , students.student_id , students.email_address , students.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.* | addresses : addresses.line_2 , addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.*
natsql and SQL generation:
select _ , _ , _ , count ( _ ) , _ from _ group by _ order by count ( _ ) desc limit _ | select students.student_id , students.first_name , students.middle_name , students.last_name , count ( student_enrolment.student_enrolment_id ) from students join student_enrolment on students.student_id = student_enrolment.student_id group by students.student_id order by count ( student_enrolment.student_enrolment_id ) desc limit 1
SQL = SELECT student_id ,  first_name ,  middle_name ,  last_name ,  count(student_enrolment_id) FROM students JOIN student_enrolment ON students.student_id  =  student_enrolment.student_id GROUP BY students.student_id ORDER BY count(student_enrolment_id) DESC LIMIT 1
natsql:
select _ , _ , _ , count ( _ ) , _ from _ group by _ order by count ( _ ) desc limit _ | select students.student_id , students.first_name , students.middle_name , students.last_name , count ( student_enrolment.student_enrolment_id ) from students join student_enrolment on students.student_id = student_enrolment.student_id group by students.student_id order by count ( student_enrolment.student_enrolment_id ) desc limit 1

SQL:
SELECT student_id ,  first_name ,  middle_name ,  last_name ,  count(student_enrolment_id) FROM students JOIN student_enrolment ON students.student_id  =  student_enrolment.student_id GROUP BY students.student_id ORDER BY count(student_enrolment_id) DESC LIMIT 1
self correction:
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(Student_Enrolment.student_enrolment_id) AS enrollment_count FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id, Students.first_name, Students.middle_name, Students.last_name ORDER BY enrollment_count DESC LIMIT 1

index is 542
SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?
schema_links:
What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program? | students : students.first_name , students.last_name , students.middle_name , students.student_id , students.cell_mobile_number , students.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.* | addresses : addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.country , addresses.*
natsql and SQL generation:
select _ , _ , _ , _ , count ( _ ) from _ group by _ order by count ( _ ) desc limit _ | select students.first_name , students.middle_name , students.last_name , students.student_id , count ( student_enrolment.student_id ) from students join student_enrolment on students.student_id = student_enrolment.student_id group by students.student_id order by count ( student_enrolment.student_id ) desc limit 1
SQL = SELECT first_name , middle_name , last_name , student_id , COUNT(T2.student_id) FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY student_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1
natsql:
select _ , _ , _ , _ , count ( _ ) from _ group by _ order by count ( _ ) desc limit _ | select students.first_name , students.middle_name , students.last_name , students.student_id , count ( student_enrolment.student_id ) from students join student_enrolment on students.student_id = student_enrolment.student_id group by students.student_id order by count ( student_enrolment.student_id ) desc limit 1

SQL:
SELECT first_name , middle_name , last_name , student_id , COUNT(T2.student_id) FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY student_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1
self correction:
SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id, COUNT(T2.student_id)  FROM Students AS T1  JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id  GROUP BY T1.student_id  ORDER BY COUNT(T2.student_id) DESC  LIMIT 1

index is 543
SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )
Which semesters do not have any student enrolled? List the semester name.
schema_links:
Which semesters do not have any student enrolled? List the semester name. | semesters : semesters.semester_name , semesters.semester_description , semesters.semester_id , semesters.other_details , semesters.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.degree_program_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | courses : courses.course_name , courses.course_description , courses.course_id , courses.other_details , courses.*
natsql and SQL generation:
select _ from _ where _ not in (select _ from _) | select semesters.semester_name from semesters where semesters.semester_id not in (select student_enrolment.semester_id from student_enrolment) 
SQL = SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment)
natsql:
select _ from _ where _ not in (select _ from _) | select semesters.semester_name from semesters where semesters.semester_id not in (select student_enrolment.semester_id from student_enrolment) 

SQL:
SELECT semester_name FROM semesters WHERE semester_id NOT IN (SELECT semester_id FROM student_enrolment)
self correction:
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (   SELECT semester_id   FROM Student_Enrolment )

index is 544
SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )
What is the name of the semester with no students enrolled?
schema_links:
What is the name of the semester with no students enrolled? | semesters : semesters.semester_name , semesters.semester_id , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.degree_program_id , student_enrolment.other_details , student_enrolment.* | courses : courses.course_name , courses.course_description , courses.course_id , courses.other_details , courses.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.*
natsql and SQL generation:
select _ from _ where not exists ( select * from _ ) | select semesters.semester_name from semesters where not exists ( select * from student_enrolment where semesters.semester_id = student_enrolment.semester_id )
SQL = SELECT semester_name FROM semesters WHERE NOT EXISTS (SELECT * FROM student_enrolment WHERE semesters.semester_id = student_enrolment.semester_id)
natsql:
select _ from _ where not exists ( select * from _ ) | select semesters.semester_name from semesters where not exists ( select * from student_enrolment where semesters.semester_id = student_enrolment.semester_id )

SQL:
SELECT semester_name FROM semesters WHERE NOT EXISTS (SELECT * FROM student_enrolment WHERE semesters.semester_id = student_enrolment.semester_id)
self correction:
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (   SELECT semester_id   FROM Student_Enrolment )

index is 545
SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id
What are all the course names of the courses which ever have students enrolled in?
schema_links:
What are all the course names of the courses which ever have students enrolled in? | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.*
natsql and SQL generation:
select distinct _ from _ where exists ( select * from _ ) | select distinct courses.course_name from courses where exists ( select * from student_enrolment_courses )
natsql:
select distinct _ from _ where exists ( select * from _ ) | select distinct courses.course_name from courses where exists ( select * from student_enrolment_courses )
SQL:
SELECT DISTINCT course_name FROM Courses WHERE EXISTS (SELECT * FROM Student_Enrolment_Courses)
self correction:
SELECT DISTINCT course_name FROM Courses WHERE course_id IN (SELECT DISTINCT course_id FROM Student_Enrolment_Courses)

index is 546
SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id
What are the names of all courses that have some students enrolled?
schema_links:
What are the names of all courses that have some students enrolled? | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.*
natsql and SQL generation:
select _ from _ where exists ( select _ from _ ) | select courses.course_name from courses where exists ( select student_enrolment_courses.course_id from student_enrolment_courses )
SQL = SELECT course_name FROM courses WHERE EXISTS (SELECT course_id FROM student_enrolment_courses)
natsql:
select _ from _ where exists ( select _ from _ ) | select courses.course_name from courses where exists ( select student_enrolment_courses.course_id from student_enrolment_courses )

SQL:
SELECT course_name FROM courses WHERE EXISTS (SELECT course_id FROM student_enrolment_courses)
self correction:
SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses)

index is 547
SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1
What's the name of the course with most number of enrollments?
schema_links:
What's the name of the course with most number of enrollments? | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.*
natsql and SQL generation:
select _ from _ group by _ order by count ( * ) desc limit _ | select courses.course_name from courses group by courses.course_name order by count ( * ) desc limit 1
natsql:
select _ from _ group by _ order by count ( * ) desc limit _ | select courses.course_name from courses group by courses.course_name order by count ( * ) desc limit 1
SQL:
SELECT course_name FROM Courses GROUP BY course_name ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_name ORDER BY COUNT(*) DESC LIMIT 1

index is 548
SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1
What is the name of the course with the most students enrolled?
schema_links:
What is the name of the course with the most students enrolled? | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.*
natsql and SQL generation:
select _ from _ group by _ order by count ( * ) desc limit _ | select courses.course_name from courses group by courses.course_name order by count ( student_enrolment_courses.student_course_id ) desc limit 1
natsql:
select _ from _ group by _ order by count ( * ) desc limit _ | select courses.course_name from courses group by courses.course_name order by count ( student_enrolment_courses.student_course_id ) desc limit 1
SQL:
SELECT course_name FROM courses GROUP BY course_name ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY course_name ORDER BY COUNT(*) DESC LIMIT 1

index is 549
SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.
schema_links:
Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program. | students : students.last_name , students.date_first_registered , students.current_address_id , students.student_id , students.date_left , students.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | addresses : addresses.state_province_county , addresses.address_id , addresses.city , addresses.country , addresses.line_1 , addresses.* | degree_programs : degree_programs.degree_summary_description , degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.other_details , degree_programs.*
natsql and SQL generation:
select _ from _ where _ and _ | select students.last_name from students join addresses on students.current_address_id = addresses.address_id where addresses.state_province_county = 'North Carolina' and students.student_id not in (select student_id from student_enrolment)
SQL = SELECT last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id WHERE addresses.state_province_county = 'North Carolina' AND students.student_id NOT IN (SELECT student_id FROM student_enrolment)
natsql:
select _ from _ where _ and _ | select students.last_name from students join addresses on students.current_address_id = addresses.address_id where addresses.state_province_county = 'North Carolina' and students.student_id not in (select student_id from student_enrolment)

SQL:
SELECT last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id WHERE addresses.state_province_county = 'North Carolina' AND students.student_id NOT IN (SELECT student_id FROM student_enrolment)
self correction:
SELECT last_name  FROM Students  JOIN Addresses ON Students.current_address_id = Addresses.address_id  WHERE Addresses.state_province_county = 'North Carolina'  AND Students.student_id NOT IN (SELECT student_id FROM Student_Enrolment)

index is 550
SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
What are the last name of the students who live in North Carolina but have not registered in any degree programs?
schema_links:
What are the last name of the students who live in North Carolina but have not registered in any degree programs? | students : students.last_name , students.date_first_registered , students.student_id , students.date_left , students.first_name , students.* | addresses : addresses.state_province_county , addresses.country , addresses.address_id , addresses.city , addresses.zip_postcode , addresses.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | degree_programs : degree_programs.degree_summary_description , degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.other_details , degree_programs.*
natsql and SQL generation:
select _ from _ where @.@ = _ and _ not in ( select _ from _ ) | select students.last_name from students join addresses on students.current_address_id = addresses.address_id where addresses.state_province_county = 'North Carolina' and students.student_id not in ( select student_enrolment.student_id from student_enrolment )
SQL = SELECT last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id WHERE state_province_county = 'North Carolina' AND student_id NOT IN (SELECT student_id FROM student_enrolment)
natsql:
select _ from _ where @.@ = _ and _ not in ( select _ from _ ) | select students.last_name from students join addresses on students.current_address_id = addresses.address_id where addresses.state_province_county = 'North Carolina' and students.student_id not in ( select student_enrolment.student_id from student_enrolment )

SQL:
SELECT last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id WHERE state_province_county = 'North Carolina' AND student_id NOT IN (SELECT student_id FROM student_enrolment)
self correction:
SELECT students.last_name  FROM students  JOIN addresses ON students.current_address_id = addresses.address_id  WHERE addresses.state_province_county = 'North Carolina'  AND students.student_id NOT IN (SELECT student_id FROM student_enrolment)

index is 551
SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2
Show the date and id of the transcript with at least 2 course results.
schema_links:
Show the date and id of the transcript with at least 2 course results. | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details , transcripts.* | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id , transcript_contents.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | courses : courses.course_name , courses.course_description , courses.course_id , courses.other_details , courses.*
natsql and SQL generation:
select @ , @ from @ where count ( @ ) >= @ group by @ | select transcript_id , transcript_date from transcripts where count ( transcript_contents.* ) >= 2 group by transcript_id, transcript_date
SQL = SELECT transcript_id , transcript_date FROM transcripts GROUP BY transcript_id, transcript_date HAVING count(*) >= 2
natsql:
select @ , @ from @ where count ( @ ) >= @ group by @ | select transcript_id , transcript_date from transcripts where count ( transcript_contents.* ) >= 2 group by transcript_id, transcript_date

SQL:
SELECT transcript_id , transcript_date FROM transcripts GROUP BY transcript_id, transcript_date HAVING count(*) >= 2
self correction:
SELECT transcript_id, transcript_date FROM Transcripts JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id JOIN Student_Enrolment_Courses ON Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id GROUP BY transcript_id, transcript_date HAVING COUNT(*) >= 2;

index is 552
SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2
What is the date and id of the transcript with at least 2 courses listed?
schema_links:
What is the date and id of the transcript with at least 2 courses listed? | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id , transcript_contents.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql and SQL generation:
select _ , _ from _ where count ( _ ) >= _ group by _ | select transcripts.transcript_date , transcripts.transcript_id from transcripts join transcript_contents on transcripts.transcript_id = transcript_contents.transcript_id group by transcripts.transcript_date , transcripts.transcript_id having count ( transcript_contents.student_course_id ) >= 2
SQL = SELECT transcript_date ,  transcript_id FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY transcript_date , transcript_id HAVING COUNT(transcript_contents.student_course_id) >= 2
natsql:
select _ , _ from _ where count ( _ ) >= _ group by _ | select transcripts.transcript_date , transcripts.transcript_id from transcripts join transcript_contents on transcripts.transcript_id = transcript_contents.transcript_id group by transcripts.transcript_date , transcripts.transcript_id having count ( transcript_contents.student_course_id ) >= 2

SQL:
SELECT transcript_date ,  transcript_id FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY transcript_date , transcript_id HAVING COUNT(transcript_contents.student_course_id) >= 2
self correction:
SELECT transcripts.transcript_date, transcripts.transcript_id  FROM transcripts  JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id  GROUP BY transcripts.transcript_id  HAVING COUNT(DISTINCT transcript_contents.student_course_id) >= 2

index is 553
SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'
What is the phone number of the man with the first name Timmothy and the last name Ward?
schema_links:
What is the phone number of the man with the first name Timmothy and the last name Ward? | students : students.first_name ( Timmothy ) , students.last_name ( Ward ) , students.cell_mobile_number , students.student_id , students.middle_name , students.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql and SQL generation:
select _ from _ where _ = _ and _ = _ | select students.cell_mobile_number from students where students.first_name = 'Timmothy' and students.last_name = 'Ward'
SQL = SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
natsql:
select _ from _ where _ = _ and _ = _ | select students.cell_mobile_number from students where students.first_name = 'Timmothy' and students.last_name = 'Ward'

SQL:
SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
self correction:
SELECT cell_mobile_number  FROM Students  WHERE first_name = 'Timmothy'    AND last_name = 'Ward'

index is 554
select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'
What is the mobile phone number of the student named Timmothy Ward ?
schema_links:
What is the mobile phone number of the student named Timmothy Ward ? | students : students.first_name ( Timmothy ) , students.cell_mobile_number , students.last_name ( Ward ) , students.student_id , students.middle_name , students.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.* | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.*
natsql and SQL generation:
select _ from _ where _ and _ | select students.cell_mobile_number from students where students.first_name = 'Timmothy' and students.last_name = 'Ward'
SQL = SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
natsql:
select _ from _ where _ and _ | select students.cell_mobile_number from students where students.first_name = 'Timmothy' and students.last_name = 'Ward'

SQL:
SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
self correction:
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'

index is 555
SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
Who is the first student to register? List the first name, middle name and last name.
schema_links:
Who is the first student to register? List the first name, middle name and last name. | students : students.last_name , students.first_name , students.middle_name , students.date_first_registered , students.student_id , students.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details , student_enrolment.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.*
natsql and SQL generation:
select _ , _ , _ from _ order by _ limit _ | select students.first_name , students.middle_name , students.last_name from students order by students.date_first_registered limit 1
SQL = SELECT first_name ,  middle_name ,  last_name FROM students ORDER BY date_first_registered LIMIT 1
natsql:
select _ , _ , _ from _ order by _ limit _ | select students.first_name , students.middle_name , students.last_name from students order by students.date_first_registered limit 1

SQL:
SELECT first_name ,  middle_name ,  last_name FROM students ORDER BY date_first_registered LIMIT 1
self correction:
SELECT Students.first_name, Students.middle_name, Students.last_name  FROM Students  ORDER BY Students.date_first_registered  LIMIT 1

index is 556
SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
What is the first, middle, and last name of the first student to register?
schema_links:
What is the first, middle, and last name of the first student to register? | students : students.last_name , students.first_name , students.middle_name , students.date_first_registered , students.student_id , students.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.*
natsql and SQL generation:
select _ , _ , _ from _ order by _ limit _ | select students.first_name , students.middle_name , students.last_name from students order by students.date_first_registered limit 1
SQL = SELECT first_name ,  middle_name ,  last_name FROM students ORDER BY date_first_registered LIMIT 1
natsql:
select _ , _ , _ from _ order by _ limit _ | select students.first_name , students.middle_name , students.last_name from students order by students.date_first_registered limit 1

SQL:
SELECT first_name ,  middle_name ,  last_name FROM students ORDER BY date_first_registered LIMIT 1
self correction:
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered LIMIT 1

index is 557
SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1
Who is the earliest graduate of the school? List the first name, middle name and last name.
schema_links:
Who is the earliest graduate of the school? List the first name, middle name and last name. | students : students.first_name , students.middle_name , students.last_name , students.date_first_registered , students.date_left , students.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.* | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.*
natsql and SQL generation:
select _ , _ , _ from _ order by _ limit _ | select students.first_name , students.middle_name , students.last_name from students order by students.date_first_registered limit 1
SQL = SELECT first_name ,  middle_name ,  last_name FROM students ORDER BY date_first_registered LIMIT 1
natsql:
select _ , _ , _ from _ order by _ limit _ | select students.first_name , students.middle_name , students.last_name from students order by students.date_first_registered limit 1

SQL:
SELECT first_name ,  middle_name ,  last_name FROM students ORDER BY date_first_registered LIMIT 1
self correction:
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered ASC LIMIT 1

index is 558
SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1
What is the first, middle, and last name of the earliest school graduate?
schema_links:
What is the first, middle, and last name of the earliest school graduate? | students : students.last_name , students.first_name , students.middle_name , students.date_first_registered , students.date_left , students.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql and SQL generation:
select _ , _ , _ from _ order by _ limit _ | select students.first_name , students.middle_name , students.last_name from students order by students.date_first_registered limit 1
SQL = SELECT first_name ,  middle_name ,  last_name FROM students ORDER BY date_first_registered LIMIT 1
natsql:
select _ , _ , _ from _ order by _ limit _ | select students.first_name , students.middle_name , students.last_name from students order by students.date_first_registered limit 1

SQL:
SELECT first_name ,  middle_name ,  last_name FROM students ORDER BY date_first_registered LIMIT 1
self correction:
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered LIMIT 1

index is 559
SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
Whose permanent address is different from his or her current address? List his or her first name.
schema_links:
Whose permanent address is different from his or her current address? List his or her first name. | students : students.first_name , students.permanent_address_id , students.current_address_id , students.student_id , students.last_name , students.* | addresses : addresses.address_id , addresses.country , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql and SQL generation:
select _ from _ where _ <> _ | select students.first_name from students where students.permanent_address_id <> students.current_address_id
SQL = SELECT first_name FROM students WHERE permanent_address_id <> current_address_id
natsql:
select _ from _ where _ <> _ | select students.first_name from students where students.permanent_address_id <> students.current_address_id

SQL:
SELECT first_name FROM students WHERE permanent_address_id <> current_address_id
self correction:
SELECT Students.first_name  FROM Students  JOIN Addresses AS perm_address ON Students.permanent_address_id = perm_address.address_id  JOIN Addresses AS curr_address ON Students.current_address_id = curr_address.address_id  WHERE perm_address.line_1 <> curr_address.line_1

index is 560
SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
What is the first name of the student whose permanent address is different from his or her current one?
schema_links:
What is the first name of the student whose permanent address is different from his or her current one? | students : students.first_name , students.permanent_address_id , students.current_address_id , students.student_id , students.last_name , students.* | addresses : addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql and SQL generation:
select _ from _ where _ <> _ | select students.first_name from students where students.permanent_address_id <> students.current_address_id
SQL = SELECT first_name FROM students WHERE permanent_address_id  <>  current_address_id
natsql:
select _ from _ where _ <> _ | select students.first_name from students where students.permanent_address_id <> students.current_address_id

SQL:
SELECT first_name FROM students WHERE permanent_address_id  <>  current_address_id
self correction:
SELECT students.first_name  FROM students INNER JOIN addresses AS perm_addr ON students.permanent_address_id = perm_addr.address_id INNER JOIN addresses AS curr_addr ON students.current_address_id = curr_addr.address_id WHERE perm_addr.line_1 <> curr_addr.line_1

index is 561
SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
Which address holds the most number of students currently? List the address id and all lines.
schema_links:
Which address holds the most number of students currently? List the address id and all lines. | students : students.current_address_id , students.permanent_address_id , students.student_id , students.date_first_registered , students.date_left , students.* | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.other_address_details , addresses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.*
natsql and SQL generation:
select @.@ , _ , _ , _ , _ , _ from _ group by @.@ order by count ( _ ) desc limit _ | select addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 from students join addresses on students.current_address_id = addresses.address_id group by addresses.address_id order by count ( students.student_id ) desc limit 1
SQL = SELECT T2.address_id ,  T2.line_1 ,  T2.line_2 ,  T2.line_3 FROM students AS T1 JOIN addresses AS T2 ON T1.current_address_id  =  T2.address_id GROUP BY T2.address_id ORDER BY COUNT(T1.student_id) DESC LIMIT 1
natsql:
select @.@ , _ , _ , _ , _ , _ from _ group by @.@ order by count ( _ ) desc limit _ | select addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 from students join addresses on students.current_address_id = addresses.address_id group by addresses.address_id order by count ( students.student_id ) desc limit 1

SQL:
SELECT T2.address_id ,  T2.line_1 ,  T2.line_2 ,  T2.line_3 FROM students AS T1 JOIN addresses AS T2 ON T1.current_address_id  =  T2.address_id GROUP BY T2.address_id ORDER BY COUNT(T1.student_id) DESC LIMIT 1
self correction:
SELECT T2.address_id, T2.line_1, T2.line_2, T2.line_3 FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id GROUP BY T2.address_id ORDER BY COUNT(T1.student_id) DESC LIMIT 1

index is 562
SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
What is the id, line 1, and line 2 of the address with the most students?
schema_links:
What is the id, line 1, and line 2 of the address with the most students? | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.city , addresses.* | students : students.current_address_id , students.permanent_address_id , students.student_id , students.date_left , students.other_student_details , students.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.*
natsql and SQL generation:
select _ , _ , _ from _ where @.@ = ( select @ from _ group by @ order by count ( @ ) desc limit _ ) | select addresses.address_id , addresses.line_1 , addresses.line_2 from addresses where addresses.address_id = ( select student.current_address_id from student group by student.current_address_id order by count ( student.current_address_id ) desc limit 1 )
SQL = SELECT address_id , line_1 , line_2 FROM addresses WHERE address_id  =  (SELECT current_address_id FROM students GROUP BY current_address_id ORDER BY count(current_address_id) DESC LIMIT 1)
natsql:
select _ , _ , _ from _ where @.@ = ( select @ from _ group by @ order by count ( @ ) desc limit _ ) | select addresses.address_id , addresses.line_1 , addresses.line_2 from addresses where addresses.address_id = ( select student.current_address_id from student group by student.current_address_id order by count ( student.current_address_id ) desc limit 1 )

SQL:
SELECT address_id , line_1 , line_2 FROM addresses WHERE address_id  =  (SELECT current_address_id FROM students GROUP BY current_address_id ORDER BY count(current_address_id) DESC LIMIT 1)
self correction:
SELECT addresses.address_id, addresses.line_1, addresses.line_2  FROM addresses  JOIN students ON students.current_address_id = addresses.address_id  GROUP BY addresses.address_id, addresses.line_1, addresses.line_2  ORDER BY COUNT(students.current_address_id) DESC  LIMIT 1;

index is 563
SELECT avg(transcript_date) FROM Transcripts
On average, when were the transcripts printed?
schema_links:
On average, when were the transcripts printed? | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.*
natsql and SQL generation:
select avg ( _ ) from _ | select avg ( transcripts.transcript_date ) from transcripts
SQL = SELECT AVG(transcript_date) FROM transcripts
natsql:
select avg ( _ ) from _ | select avg ( transcripts.transcript_date ) from transcripts

SQL:
SELECT AVG(transcript_date) FROM transcripts
self correction:
SELECT AVG(transcript_date) FROM Transcripts

index is 564
SELECT avg(transcript_date) FROM Transcripts
What is the average transcript date?
schema_links:
What is the average transcript date? | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.* | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id , transcript_contents.*
natsql and SQL generation:
select avg ( _ ) from _ | select avg(transcripts.transcript_date) from transcripts
SQL = SELECT avg(transcript_date) FROM transcripts
natsql:
select avg ( _ ) from _ | select avg(transcripts.transcript_date) from transcripts

SQL:
SELECT avg(transcript_date) FROM transcripts
self correction:
SELECT avg(transcript_date) FROM Transcripts

index is 565
SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
When is the first transcript released? List the date and details.
schema_links:
When is the first transcript released? List the date and details. | transcripts : transcripts.transcript_date , transcripts.other_details , transcripts.transcript_id , transcripts.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.*
natsql and SQL generation:
select _ , _ from _ order by _ limit _ | select transcript.transcript_date , transcript.other_details from transcript order by transcript.transcript_date limit 1
SQL = SELECT transcript_date ,  other_details FROM transcripts ORDER BY transcript_date LIMIT 1
natsql:
select _ , _ from _ order by _ limit _ | select transcript.transcript_date , transcript.other_details from transcript order by transcript.transcript_date limit 1

SQL:
SELECT transcript_date ,  other_details FROM transcripts ORDER BY transcript_date LIMIT 1
self correction:
SELECT transcript_date, other_details  FROM Transcripts  ORDER BY transcript_date ASC  LIMIT 1

index is 566
SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
What is the earliest date of a transcript release, and what details can you tell me?
schema_links:
What is the earliest date of a transcript release, and what details can you tell me? | transcripts : transcripts.transcript_date , transcripts.other_details , transcripts.transcript_id , transcripts.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.* | students : students.student_id , students.current_address_id , students.permanent_address_id , students.first_name , students.middle_name , students.*
natsql and SQL generation:
select min ( _ ) , _ from _ | select min ( transcripts.transcript_date ) , transcripts.other_details from transcripts
SQL = SELECT MIN(transcript_date) ,  other_details FROM transcripts
natsql:
select min ( _ ) , _ from _ | select min ( transcripts.transcript_date ) , transcripts.other_details from transcripts

SQL:
SELECT MIN(transcript_date) ,  other_details FROM transcripts
self correction:
SELECT MIN(transcript_date), other_details FROM Transcripts

index is 567
SELECT count(*) FROM Transcripts
How many transcripts are released?
schema_links:
How many transcripts are released? | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details , transcripts.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.*
natsql and SQL generation:
select count ( * ) from transcripts | SELECT COUNT(*) FROM transcripts
natsql:
select count ( * ) from transcripts | SELECT COUNT(*) FROM transcripts
SQL:
SELECT COUNT(*) FROM transcripts
self correction:
SELECT COUNT(*) FROM Transcripts

index is 568
SELECT count(*) FROM Transcripts
How many transcripts are listed?
schema_links:
How many transcripts are listed? | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details , transcripts.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.*
natsql and SQL generation:
select count ( _ ) from _ | select count ( * ) from transcripts
SQL = SELECT count(*) FROM transcripts
natsql:
select count ( _ ) from _ | select count ( * ) from transcripts

SQL:
SELECT count(*) FROM transcripts
self correction:
SELECT count(*) FROM Transcripts

index is 569
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
What is the last transcript release date?
schema_links:
What is the last transcript release date? | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.*
natsql and SQL generation:
select max ( _ ) from _ | select max(transcript_date) from transcripts
SQL = SELECT MAX(transcript_date) FROM transcripts
natsql:
select max ( _ ) from _ | select max(transcript_date) from transcripts

SQL:
SELECT MAX(transcript_date) FROM transcripts
self correction:
SELECT MAX(transcript_date) FROM Transcripts

index is 570
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
When was the last transcript released?
schema_links:
When was the last transcript released? | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id , transcript_contents.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.*
natsql and SQL generation:
select max ( _ ) from _ | select max(transcript_date) from transcripts
SQL = SELECT MAX(transcript_date) FROM transcripts
natsql:
select max ( _ ) from _ | select max(transcript_date) from transcripts

SQL:
SELECT MAX(transcript_date) FROM transcripts
self correction:
SELECT MAX(transcript_date) FROM Transcripts

index is 571
SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.
schema_links:
How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id. | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.* | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details , transcripts.* | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id , transcript_contents.*
natsql and SQL generation:
select count ( _ ) , max ( _ ) from _ | select count ( student_enrolment_courses.student_enrolment_id ) , max ( student_enrolment_courses.student_enrolment_id ) from student_enrolment_courses
SQL = SELECT COUNT(student_enrolment_id) , MAX(student_enrolment_id) FROM student_enrolment_courses
natsql:
select count ( _ ) , max ( _ ) from _ | select count ( student_enrolment_courses.student_enrolment_id ) , max ( student_enrolment_courses.student_enrolment_id ) from student_enrolment_courses

SQL:
SELECT COUNT(student_enrolment_id) , MAX(student_enrolment_id) FROM student_enrolment_courses
self correction:
SELECT COUNT(DISTINCT transcript_id) AS max_enrollment_result, student_enrolment_id FROM Transcript_Contents JOIN Student_Enrolment_Courses ON Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id GROUP BY student_enrolment_id

index is 572
SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?
schema_links:
What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id? | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id , transcript_contents.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details , transcripts.*
natsql and SQL generation:
select max ( count ( _ ) ) , _ from _ group by _ | select max ( count ( transcript_contents.* ) ) , transcript_contents.student_course_id from transcript_contents group by transcript_contents.student_course_id
SQL = SELECT max(count(*)) , student_course_id FROM transcript_contents GROUP BY student_course_id
natsql:
select max ( count ( _ ) ) , _ from _ group by _ | select max ( count ( transcript_contents.* ) ) , transcript_contents.student_course_id from transcript_contents group by transcript_contents.student_course_id

SQL:
SELECT max(count(*)) , student_course_id FROM transcript_contents GROUP BY student_course_id
self correction:
SELECT max(course_count), student_course_id FROM (     SELECT COUNT(*) AS course_count, student_course_id     FROM Transcript_Contents     GROUP BY student_course_id ) AS course_counts ORDER BY course_count DESC LIMIT 1

index is 573
SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1
Show the date of the transcript which shows the least number of results, also list the id.
schema_links:
Show the date of the transcript which shows the least number of results, also list the id. | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id , transcript_contents.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.*
natsql and SQL generation:
select _ , _ from _ order by count ( _ ) asc limit _ | select transcripts.transcript_date , transcripts.transcript_id from transcripts order by count ( transcript_contents.* ) asc limit 1
SQL = SELECT transcript_date ,  transcript_id FROM transcripts ORDER BY (SELECT count(*) FROM transcript_contents WHERE transcript_id  =  transcripts.transcript_id) ASC LIMIT 1
natsql:
select _ , _ from _ order by count ( _ ) asc limit _ | select transcripts.transcript_date , transcripts.transcript_id from transcripts order by count ( transcript_contents.* ) asc limit 1

SQL:
SELECT transcript_date ,  transcript_id FROM transcripts ORDER BY (SELECT count(*) FROM transcript_contents WHERE transcript_id  =  transcripts.transcript_id) ASC LIMIT 1
self correction:
SELECT transcript_date, transcript_id FROM Transcripts ORDER BY (     SELECT COUNT(*)     FROM Transcript_Contents     WHERE Transcript_Contents.transcript_id = Transcripts.transcript_id ) ASC LIMIT 1

index is 574
SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1
What is the date and id of the transcript with the least number of results?
schema_links:
What is the date and id of the transcript with the least number of results? | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id , transcript_contents.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.semester_id , student_enrolment.degree_program_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*
natsql and SQL generation:
select _ , _ from _ order by count ( _ ) limit _ | select transcripts.transcript_date , transcripts.transcript_id from transcripts order by count ( transcript_contents.transcript_id ) limit 1
SQL = SELECT transcript_date ,  transcript_id FROM transcripts ORDER BY (SELECT count(*) FROM transcript_contents WHERE transcripts.transcript_id  =  transcript_contents.transcript_id) LIMIT 1
natsql:
select _ , _ from _ order by count ( _ ) limit _ | select transcripts.transcript_date , transcripts.transcript_id from transcripts order by count ( transcript_contents.transcript_id ) limit 1

SQL:
SELECT transcript_date ,  transcript_id FROM transcripts ORDER BY (SELECT count(*) FROM transcript_contents WHERE transcripts.transcript_id  =  transcript_contents.transcript_id) LIMIT 1
self correction:
SELECT transcript_date, transcript_id FROM Transcripts ORDER BY (SELECT COUNT(*)           FROM Transcript_Contents           WHERE Transcripts.transcript_id = Transcript_Contents.transcript_id) LIMIT 1

index is 575
SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
Find the semester when both Master students and Bachelor students got enrolled in.
schema_links:
Find the semester when both Master students and Bachelor students got enrolled in. | student_enrolment : student_enrolment.semester_id , student_enrolment.degree_program_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.other_details , student_enrolment.* | degree_programs : degree_programs.degree_summary_name ( Bachelor , Master ) , degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | semesters : semesters.semester_name , semesters.semester_id , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*
natsql and SQL generation:
select distinct _ from _ where _ and _ | select distinct semesters.semester_name from semesters where semesters.semester_id in (select distinct student_enrolment.semester_id from student_enrolment where student_enrolment.degree_program_id in (select degree_programs.degree_program_id from degree_programs where degree_programs.degree_summary_name = 'Master') and student_enrolment.semester_id in (select distinct student_enrolment.semester_id from student_enrolment where student_enrolment.degree_program_id in (select degree_programs.degree_program_id from degree_programs where degree_programs.degree_summary_name = 'Bachelor')))
natsql:
select distinct _ from _ where _ and _ | select distinct semesters.semester_name from semesters where semesters.semester_id in (select distinct student_enrolment.semester_id from student_enrolment where student_enrolment.degree_program_id in (select degree_programs.degree_program_id from degree_programs where degree_programs.degree_summary_name = 'Master') and student_enrolment.semester_id in (select distinct student_enrolment.semester_id from student_enrolment where student_enrolment.degree_program_id in (select degree_programs.degree_program_id from degree_programs where degree_programs.degree_summary_name = 'Bachelor')))
SQL:
SELECT DISTINCT semester_name
FROM semesters
WHERE semester_id IN (
    SELECT DISTINCT semester_id
    FROM student_enrolment
    WHERE degree_program_id IN (
        SELECT degree_program_id
        FROM degree_programs
        WHERE degree_summary_name = 'Master'
    )
    AND semester_id IN (
        SELECT DISTINCT semester_id
        FROM student_enrolment
        WHERE degree_program_id IN (
            SELECT degree_program_id
            FROM degree_programs
            WHERE degree_summary_name = 'Bachelor'
        )
    )
)
self correction:
SELECT DISTINCT semester_name FROM Semesters WHERE semester_id IN (     SELECT DISTINCT semester_id     FROM Student_Enrolment     WHERE degree_program_id IN (         SELECT degree_program_id         FROM Degree_Programs         WHERE degree_summary_name = 'Master'     )     AND semester_id IN (         SELECT DISTINCT semester_id         FROM Student_Enrolment         WHERE degree_program_id IN (             SELECT degree_program_id             FROM Degree_Programs             WHERE degree_summary_name = 'Bachelor'         )     ) )

index is 576
SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
What is the id of the semester that had both Masters and Bachelors students enrolled?
schema_links:
What is the id of the semester that had both Masters and Bachelors students enrolled? | student_enrolment : student_enrolment.semester_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.degree_program_id , student_enrolment.other_details , student_enrolment.* | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | courses : courses.course_name , courses.course_description , courses.course_id , courses.other_details , courses.*
natsql and SQL generation:
select _ from _ where _ in ( select _ from _ group by _ having count ( distinct _ ) > _ ) | select student_enrolment.semester_id from student_enrolment where student_enrolment.degree_program_id in ( select degree_program_id from degree_programs group by degree_program_id having count ( distinct degree_summary_name ) > 1 )
SQL = SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs GROUP BY degree_program_id HAVING count(DISTINCT degree_summary_name) > 1)
natsql:
select _ from _ where _ in ( select _ from _ group by _ having count ( distinct _ ) > _ ) | select student_enrolment.semester_id from student_enrolment where student_enrolment.degree_program_id in ( select degree_program_id from degree_programs group by degree_program_id having count ( distinct degree_summary_name ) > 1 )

SQL:
SELECT semester_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs GROUP BY degree_program_id HAVING count(DISTINCT degree_summary_name) > 1)
self correction:
SELECT Semesters.semester_id  FROM Semesters  INNER JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY Semesters.semester_id HAVING COUNT(DISTINCT Degree_Programs.degree_summary_name) > 1

index is 577
SELECT count(DISTINCT current_address_id) FROM Students
How many different addresses do the students currently live?
schema_links:
How many different addresses do the students currently live? | students : students.current_address_id , students.student_id , students.first_name , students.permanent_address_id , students.last_name , students.* | addresses : addresses.address_id , addresses.line_2 , addresses.line_3 , addresses.city , addresses.zip_postcode , addresses.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct students.current_address_id ) from students
SQL = SELECT count(DISTINCT current_address_id) FROM students
natsql:
select count ( distinct _ ) from _ | select count ( distinct students.current_address_id ) from students

SQL:
SELECT count(DISTINCT current_address_id) FROM students
self correction:
SELECT count(DISTINCT Students.current_address_id) FROM Students

index is 578
SELECT count(DISTINCT current_address_id) FROM Students
What are the different addresses that have students living there?
schema_links:
What are the different addresses that have students living there? | students : students.current_address_id , students.permanent_address_id , students.email_address , students.student_id , students.first_name , students.* | addresses : addresses.address_id , addresses.other_address_details , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.*
natsql and SQL generation:
select distinct _ from _ where _ | select distinct addresses.address_id from addresses where addresses.address_id in (select students.current_address_id from students) or addresses.address_id in (select students.permanent_address_id from students)
SQL = SELECT DISTINCT address_id FROM addresses WHERE address_id IN (SELECT current_address_id FROM students) OR address_id IN (SELECT permanent_address_id FROM students)
natsql:
select distinct _ from _ where _ | select distinct addresses.address_id from addresses where addresses.address_id in (select students.current_address_id from students) or addresses.address_id in (select students.permanent_address_id from students)

SQL:
SELECT DISTINCT address_id FROM addresses WHERE address_id IN (SELECT current_address_id FROM students) OR address_id IN (SELECT permanent_address_id FROM students)
self correction:
SELECT DISTINCT address_id FROM Addresses WHERE address_id IN (SELECT current_address_id FROM Students) OR address_id IN (SELECT permanent_address_id FROM Students)

index is 579
SELECT other_student_details FROM Students ORDER BY other_student_details DESC
List all the student details in reversed lexicographical order.
schema_links:
List all the student details in reversed lexicographical order. | students : students.other_student_details , students.email_address , students.student_id , students.first_name , students.date_left , students.* | addresses : addresses.line_2 , addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | sections : sections.section_id , sections.course_id , sections.section_name , sections.section_description , sections.other_details , sections.*
natsql and SQL generation:
select _ from _ order by _ desc | select * from students order by students.name desc
SQL = SELECT * FROM students ORDER BY name DESC
natsql:
select _ from _ order by _ desc | select * from students order by students.name desc

SQL:
SELECT * FROM students ORDER BY name DESC
self correction:
SELECT Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details FROM Students ORDER BY Students.last_name DESC, Students.first_name DESC

index is 580
SELECT other_student_details FROM Students ORDER BY other_student_details DESC
What other details can you tell me about students in reverse alphabetical order?
schema_links:
What other details can you tell me about students in reverse alphabetical order? | students : students.other_student_details , students.first_name , students.last_name , students.student_id , students.email_address , students.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.* | degree_programs : degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.*
natsql and SQL generation:
select _ from _ order by _ desc | select students.* from students order by students.last_name desc
SQL = SELECT * FROM students ORDER BY last_name DESC
natsql:
select _ from _ order by _ desc | select students.* from students order by students.last_name desc

SQL:
SELECT * FROM students ORDER BY last_name DESC
self correction:
SELECT Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details FROM Students ORDER BY Students.last_name DESC

index is 581
SELECT section_description FROM Sections WHERE section_name  =  'h'
Describe the section h.
schema_links:
Describe the section h. | sections : sections.section_name , sections.section_description , sections.section_id , sections.course_id , sections.other_details , sections.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*
natsql and SQL generation:
describe _ | describe sections
SQL = DESCRIBE sections
natsql:
describe _ | describe sections

SQL:
DESCRIBE sections
self correction:
SELECT The given SQL query "DESCRIBE sections" is not valid in SQLite. Instead, you should use the "PRAGMA table_info(table_name)" statement to retrieve the description of a table. In this case, the correct SQLite SQL query to describe the "Sections" table would be:  PRAGMA table_info(Sections)

index is 582
SELECT section_description FROM Sections WHERE section_name  =  'h'
What is the description for the section named h?
schema_links:
What is the description for the section named h? | sections : sections.section_name , sections.section_description , sections.section_id , sections.course_id , sections.other_details , sections.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | courses : courses.course_description , courses.course_id , courses.course_name , courses.other_details , courses.* | addresses : addresses.line_3 , addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.*
natsql and SQL generation:
select _ from _ where _ = _ | select sections.section_description from sections where sections.section_name = 'h'
SQL = SELECT section_description FROM sections WHERE section_name  =  'h'
natsql:
select _ from _ where _ = _ | select sections.section_description from sections where sections.section_name = 'h'

SQL:
SELECT section_description FROM sections WHERE section_name  =  'h'
self correction:
SELECT section_description  FROM Sections  WHERE section_name = 'h'

index is 583
select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'
Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .
schema_links:
Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 . | students : students.first_name , students.cell_mobile_number , students.permanent_address_id , students.student_id , students.date_first_registered , students.* | addresses : addresses.country ( Haiti ) , addresses.address_id , addresses.city , addresses.line_1 , addresses.line_2 , addresses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.*
natsql and SQL generation:
select _ from _ where @.@ in ( _ ) or @.@ = _ | select students.first_name from students where students.cell_mobile_number = '09700166582' or students.permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti')
SQL = SELECT first_name FROM students WHERE cell_mobile_number = '09700166582' OR permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti')
natsql:
select _ from _ where @.@ in ( _ ) or @.@ = _ | select students.first_name from students where students.cell_mobile_number = '09700166582' or students.permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti')

SQL:
SELECT first_name FROM students WHERE cell_mobile_number = '09700166582' OR permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti')
self correction:
SELECT first_name FROM Students WHERE cell_mobile_number = '09700166582'    OR permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti')

index is 584
select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'
What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?
schema_links:
What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ? | students : students.first_name , students.cell_mobile_number , students.permanent_address_id , students.student_id , students.date_first_registered , students.* | addresses : addresses.country ( Haiti ) , addresses.address_id , addresses.city , addresses.line_1 , addresses.line_2 , addresses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | student_enrolment_courses : student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.*
natsql and SQL generation:
select _ from _ where @.@ in ( @ , @ ) or @.@ = @ | select students.first_name from students where addresses.country = 'Haiti' or students.cell_mobile_number = '09700166582'
SQL = SELECT first_name FROM students AS T1 JOIN addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' OR T1.cell_mobile_number  =  '09700166582'
natsql:
select _ from _ where @.@ in ( @ , @ ) or @.@ = @ | select students.first_name from students where addresses.country = 'Haiti' or students.cell_mobile_number = '09700166582'

SQL:
SELECT first_name FROM students AS T1 JOIN addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' OR T1.cell_mobile_number  =  '09700166582'
self correction:
SELECT T1.first_name  FROM students AS T1  JOIN addresses AS T2 ON T1.permanent_address_id = T2.address_id  WHERE T2.country = 'Haiti' OR T1.cell_mobile_number = '09700166582'

index is 585
SELECT Title FROM Cartoon ORDER BY title
List the title of all cartoons in alphabetical order.
schema_links:
List the title of all cartoons in alphabetical order. | cartoon : cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.directed_by , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql and SQL generation:
select _ from _ order by _ | select cartoon.title from cartoon order by cartoon.title
SQL = SELECT title FROM cartoon ORDER BY title
natsql:
select _ from _ order by _ | select cartoon.title from cartoon order by cartoon.title

SQL:
SELECT title FROM cartoon ORDER BY title
self correction:
SELECT title FROM Cartoon ORDER BY title ASC

index is 586
SELECT Title FROM Cartoon ORDER BY title
What are the titles of the cartoons sorted alphabetically?
schema_links:
What are the titles of the cartoons sorted alphabetically? | cartoon : cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.production_code , cartoon.* | tv_series : tv_series.episode , tv_series.id , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql and SQL generation:
select _ from _ order by _ | select cartoon.title from cartoon order by cartoon.title
SQL = SELECT title FROM cartoon ORDER BY title
natsql:
select _ from _ order by _ | select cartoon.title from cartoon order by cartoon.title

SQL:
SELECT title FROM cartoon ORDER BY title
self correction:
SELECT cartoon.Title FROM cartoon ORDER BY cartoon.Title ASC

index is 587
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";
List all cartoon directed by "Ben Jones".
schema_links:
List all cartoon directed by "Ben Jones". | cartoon : cartoon.directed_by ( Ben Jones ) , cartoon.title , cartoon.id , cartoon.written_by , cartoon.channel , cartoon.* | tv_series : tv_series.episode , tv_series.id , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql and SQL generation:
select _ from _ where _ = _ | select cartoon.title from cartoon where cartoon.directed_by = "Ben Jones"
SQL = SELECT title FROM Cartoon WHERE Directed_by  =  "Ben Jones"
natsql:
select _ from _ where _ = _ | select cartoon.title from cartoon where cartoon.directed_by = "Ben Jones"

SQL:
SELECT title FROM Cartoon WHERE Directed_by  =  "Ben Jones"
self correction:
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones"

index is 588
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";
What are the names of all cartoons directed by Ben Jones?
schema_links:
What are the names of all cartoons directed by Ben Jones? | cartoon : cartoon.directed_by ( Ben Jones ) , cartoon.title , cartoon.id , cartoon.channel , cartoon.written_by , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql and SQL generation:
select _ from _ where _ ( Ben Jones ) | select cartoon.title from cartoon where cartoon.directed_by = 'Ben Jones'
SQL = SELECT title FROM cartoon WHERE directed_by = 'Ben Jones'
natsql:
select _ from _ where _ ( Ben Jones ) | select cartoon.title from cartoon where cartoon.directed_by = 'Ben Jones'

SQL:
SELECT title FROM cartoon WHERE directed_by = 'Ben Jones'
self correction:
SELECT title FROM cartoon WHERE Directed_by = 'Ben Jones'

index is 589
SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
How many cartoons were written by "Joseph Kuhr"?
schema_links:
How many cartoons were written by "Joseph Kuhr"? | cartoon : cartoon.written_by ( Joseph Kuhr ) , cartoon.title , cartoon.id , cartoon.channel , cartoon.directed_by , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql and SQL generation:
select count ( _ ) from _ where _ ( "Joseph Kuhr" ) | select count ( cartoon.* ) from cartoon where cartoon.written_by = "Joseph Kuhr"
SQL = SELECT COUNT(*) FROM cartoon WHERE written_by = "Joseph Kuhr"
natsql:
select count ( _ ) from _ where _ ( "Joseph Kuhr" ) | select count ( cartoon.* ) from cartoon where cartoon.written_by = "Joseph Kuhr"

SQL:
SELECT COUNT(*) FROM cartoon WHERE written_by = "Joseph Kuhr"
self correction:
SELECT COUNT(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr"

index is 590
SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
What is the number of cartoones written by Joseph Kuhr?
schema_links:
What is the number of cartoones written by Joseph Kuhr? | cartoon : cartoon.written_by ( Joseph Kuhr ) , cartoon.title , cartoon.id , cartoon.channel , cartoon.directed_by , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql and SQL generation:
select count ( _ ) from _ where _ | select count ( cartoon.* ) from cartoon where cartoon.written_by = 'Joseph Kuhr'
SQL = SELECT COUNT(*) FROM cartoon WHERE written_by  =  'Joseph Kuhr'
natsql:
select count ( _ ) from _ where _ | select count ( cartoon.* ) from cartoon where cartoon.written_by = 'Joseph Kuhr'

SQL:
SELECT COUNT(*) FROM cartoon WHERE written_by  =  'Joseph Kuhr'
self correction:
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'

index is 591
SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date
list all cartoon titles and their directors ordered by their air date
schema_links:
list all cartoon titles and their directors ordered by their air date | cartoon : cartoon.directed_by , cartoon.original_air_date , cartoon.title , cartoon.id , cartoon.written_by , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql and SQL generation:
select _ , _ from _ order by _ | select cartoon.title , cartoon.directed_by from cartoon order by cartoon.original_air_date
SQL = SELECT title ,  directed_by FROM cartoon ORDER BY original_air_date
natsql:
select _ , _ from _ order by _ | select cartoon.title , cartoon.directed_by from cartoon order by cartoon.original_air_date

SQL:
SELECT title ,  directed_by FROM cartoon ORDER BY original_air_date
self correction:
SELECT cartoon.title, cartoon.directed_by  FROM cartoon  JOIN TV_Channel ON cartoon.channel = TV_Channel.id  ORDER BY cartoon.original_air_date

index is 592
SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date
What is the name and directors of all the cartoons that are ordered by air date?
schema_links:
What is the name and directors of all the cartoons that are ordered by air date? | cartoon : cartoon.directed_by , cartoon.original_air_date , cartoon.title , cartoon.id , cartoon.channel , cartoon.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql and SQL generation:
select _ , _ from _ order by _ | select cartoon.title , cartoon.directed_by from cartoon order by cartoon.original_air_date
SQL = SELECT title ,  directed_by FROM cartoon ORDER BY original_air_date
natsql:
select _ , _ from _ order by _ | select cartoon.title , cartoon.directed_by from cartoon order by cartoon.original_air_date

SQL:
SELECT title ,  directed_by FROM cartoon ORDER BY original_air_date
self correction:
SELECT cartoon.title, cartoon.directed_by FROM cartoon ORDER BY cartoon.original_air_date

index is 593
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
List the title of all cartoon directed by "Ben Jones" or "Brandon Vietti".
schema_links:
List the title of all cartoon directed by "Ben Jones" or "Brandon Vietti". | cartoon : cartoon.directed_by ( Ben Jones , Brandon Vietti ) , cartoon.title , cartoon.id , cartoon.channel , cartoon.written_by , cartoon.* | tv_series : tv_series.episode , tv_series.id , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql and SQL generation:
select _ from _ where _ | select cartoon.title from cartoon where cartoon.directed_by = "Ben Jones" or cartoon.directed_by = "Brandon Vietti"
SQL = SELECT title FROM cartoon WHERE directed_by = "Ben Jones" OR directed_by = "Brandon Vietti"
natsql:
select _ from _ where _ | select cartoon.title from cartoon where cartoon.directed_by = "Ben Jones" or cartoon.directed_by = "Brandon Vietti"

SQL:
SELECT title FROM cartoon WHERE directed_by = "Ben Jones" OR directed_by = "Brandon Vietti"
self correction:
SELECT cartoon.Title  FROM cartoon  WHERE cartoon.Directed_by = "Ben Jones" OR cartoon.Directed_by = "Brandon Vietti"

index is 594
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?
schema_links:
What are the titles of all cartoons directed by Ben Jones or Brandon Vietti? | cartoon : cartoon.directed_by ( Ben Jones , Brandon Vietti ) , cartoon.title , cartoon.id , cartoon.channel , cartoon.written_by , cartoon.* | tv_series : tv_series.episode , tv_series.id , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql and SQL generation:
select _ from _ where _ in ( _ , _ ) | select cartoon.title from cartoon where cartoon.directed_by in ( 'Ben Jones' , 'Brandon Vietti' )
SQL = SELECT title FROM cartoon WHERE directed_by IN ('Ben Jones', 'Brandon Vietti')
natsql:
select _ from _ where _ in ( _ , _ ) | select cartoon.title from cartoon where cartoon.directed_by in ( 'Ben Jones' , 'Brandon Vietti' )

SQL:
SELECT title FROM cartoon WHERE directed_by IN ('Ben Jones', 'Brandon Vietti')
self correction:
SELECT cartoon.title FROM cartoon WHERE cartoon.directed_by IN ('Ben Jones', 'Brandon Vietti')

index is 595
SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;
Which country has the most of TV Channels? List the country and number of TV Channels it has.
schema_links:
Which country has the most of TV Channels? List the country and number of TV Channels it has. | tv_channel : tv_channel.country , tv_channel.id , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ order by count ( _ ) desc limit _ | select TV_Channel.Country , count ( TV_Channel.id ) from TV_Channel group by TV_Channel.Country order by count ( TV_Channel.id ) desc
SQL = SELECT Country , count(id) FROM TV_Channel GROUP BY Country ORDER BY count(id) DESC
natsql:
select _ , count ( _ ) from _ group by _ order by count ( _ ) desc limit _ | select TV_Channel.Country , count ( TV_Channel.id ) from TV_Channel group by TV_Channel.Country order by count ( TV_Channel.id ) desc

SQL:
SELECT Country , count(id) FROM TV_Channel GROUP BY Country ORDER BY count(id) DESC
self correction:
SELECT Country, COUNT(id) AS Channel_Count FROM TV_Channel GROUP BY Country ORDER BY Channel_Count DESC

index is 596
SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;
What is the country with the most number of TV Channels and how many does it have?
schema_links:
What is the country with the most number of TV Channels and how many does it have? | tv_channel : tv_channel.country , tv_channel.id , tv_channel.content , tv_channel.language , tv_channel.series_name , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ order by count ( _ ) desc limit _ | select tv_channel.country , count ( tv_channel.* ) from tv_channel group by tv_channel.country order by count ( tv_channel.* ) desc limit 1
SQL = SELECT country , COUNT(*) FROM tv_channel GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1
natsql:
select _ , count ( _ ) from _ group by _ order by count ( _ ) desc limit _ | select tv_channel.country , count ( tv_channel.* ) from tv_channel group by tv_channel.country order by count ( tv_channel.* ) desc limit 1

SQL:
SELECT country , COUNT(*) FROM tv_channel GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1
self correction:
SELECT TV_Channel.Country, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY Channel_Count DESC LIMIT 1

index is 597
SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;
List the number of different series names and contents in the TV Channel table.
schema_links:
List the number of different series names and contents in the TV Channel table. | tv_channel : tv_channel.series_name , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.episode , tv_series.id , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select count ( distinct _ ) , count ( distinct _ ) from _ | select count ( distinct tv_channel.series_name ) , count ( distinct tv_channel.content ) from tv_channel
SQL = SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel
natsql:
select count ( distinct _ ) , count ( distinct _ ) from _ | select count ( distinct tv_channel.series_name ) , count ( distinct tv_channel.content ) from tv_channel

SQL:
SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel
self correction:
SELECT count(DISTINCT series_name), count(DISTINCT Content) FROM TV_Channel

index is 598
SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;
How many different series and contents are listed in the TV Channel table?
schema_links:
How many different series and contents are listed in the TV Channel table? | tv_channel : tv_channel.content , tv_channel.series_name , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.air_date , tv_series.share , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select count ( distinct _ ) , count ( distinct _ ) from _
SQL = SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM TV_Channel
natsql:
select count ( distinct _ ) , count ( distinct _ ) from _

SQL:
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM TV_Channel
self correction:
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel

index is 599
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
What is the content of TV Channel with serial name "Sky Radio"?
schema_links:
What is the content of TV Channel with serial name "Sky Radio"? | tv_channel : tv_channel.series_name ( Sky Radio ) , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.episode , tv_series.id , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ from _ where _ = "_Radio" | select tv_channel.content from tv_channel where tv_channel.series_name = "Sky Radio"
SQL = SELECT content FROM tv_channel WHERE series_name = "Sky Radio"
natsql:
select _ from _ where _ = "_Radio" | select tv_channel.content from tv_channel where tv_channel.series_name = "Sky Radio"

SQL:
SELECT content FROM tv_channel WHERE series_name = "Sky Radio"
self correction:
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio"

index is 600
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
What is the content of the series Sky Radio?
schema_links:
What is the content of the series Sky Radio? | tv_channel : tv_channel.series_name ( Sky Radio ) , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.episode , tv_series.id , tv_series.air_date , tv_series.rating , tv_series.share , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ from _ where _ = _ | SELECT content FROM TV_Channel WHERE series_name = 'Sky Radio'
SQL = SELECT content FROM TV_Channel WHERE series_name = 'Sky Radio'
natsql:
select _ from _ where _ = _ | SELECT content FROM TV_Channel WHERE series_name = 'Sky Radio'

SQL:
SELECT content FROM TV_Channel WHERE series_name = 'Sky Radio'
self correction:
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'

index is 601
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
What is the Package Option of TV Channel with serial name "Sky Radio"?
schema_links:
What is the Package Option of TV Channel with serial name "Sky Radio"? | tv_channel : tv_channel.series_name ( Sky Radio ) , tv_channel.package_option ( Option ) , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ from _ where _ = "Sky Radio" | select tv_channel.package_option from tv_channel where tv_channel.series_name = "Sky Radio"
SQL = SELECT package_option FROM tv_channel WHERE series_name = "Sky Radio"
natsql:
select _ from _ where _ = "Sky Radio" | select tv_channel.package_option from tv_channel where tv_channel.series_name = "Sky Radio"

SQL:
SELECT package_option FROM tv_channel WHERE series_name = "Sky Radio"
self correction:
SELECT Package_Option  FROM TV_Channel  WHERE series_name = "Sky Radio"

index is 602
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
What are the Package Options of the TV Channels whose series names are Sky Radio?
schema_links:
What are the Package Options of the TV Channels whose series names are Sky Radio? | tv_channel : tv_channel.series_name ( Sky Radio ) , tv_channel.package_option ( Option ) , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.* | tv_series : tv_series.rating , tv_series.id , tv_series.episode , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ from _ where _ = _ | select tv_channel.package_option from tv_channel where tv_channel.series_name = 'Sky Radio'
SQL = SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio'
natsql:
select _ from _ where _ = _ | select tv_channel.package_option from tv_channel where tv_channel.series_name = 'Sky Radio'

SQL:
SELECT package_option FROM tv_channel WHERE series_name = 'Sky Radio'
self correction:
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'

index is 603
SELECT count(*) FROM TV_Channel WHERE LANGUAGE = "English";
How many TV Channel using language English?
schema_links:
How many TV Channel using language English? | tv_channel : tv_channel.language ( English ) , tv_channel.id , tv_channel.country , tv_channel.content , tv_channel.series_name , tv_channel.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select count ( _ ) from _ where _ ( English ) | select count ( * ) from tv_channel where language = 'English'
SQL = SELECT count(*) FROM tv_channel WHERE language = 'English'
natsql:
select count ( _ ) from _ where _ ( English ) | select count ( * ) from tv_channel where language = 'English'

SQL:
SELECT count(*) FROM tv_channel WHERE language = 'English'
self correction:
SELECT count(*) FROM TV_Channel WHERE Language = 'English'

index is 604
SELECT count(*) FROM TV_Channel WHERE LANGUAGE = "English";
How many TV Channels use the English language?
schema_links:
How many TV Channels use the English language? | tv_channel : tv_channel.language ( English ) , tv_channel.id , tv_channel.country , tv_channel.content , tv_channel.series_name , tv_channel.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select count ( distinct _ ) from _ where @.@ = _ | select count ( distinct tv_channel.id ) from tv_channel where tv_channel.language = 'English'
SQL = SELECT COUNT(DISTINCT id) FROM TV_Channel WHERE Language = 'English'
natsql:
select count ( distinct _ ) from _ where @.@ = _ | select count ( distinct tv_channel.id ) from tv_channel where tv_channel.language = 'English'

SQL:
SELECT COUNT(DISTINCT id) FROM TV_Channel WHERE Language = 'English'
self correction:
SELECT COUNT(DISTINCT id) FROM TV_Channel WHERE Language = 'English'

index is 605
SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
List the language used least number of TV Channel. List language and number of TV Channel.
schema_links:
List the language used least number of TV Channel. List language and number of TV Channel. | tv_channel : tv_channel.language , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.series_name , tv_channel.* | tv_series : tv_series.rating , tv_series.id , tv_series.episode , tv_series.air_date , tv_series.share , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ order by count ( _ ) limit _ | select tv_channel.language , count ( tv_channel.* ) from tv_channel group by tv_channel.language order by count ( tv_channel.* ) limit 1
SQL = SELECT language , count(*) FROM tv_channel GROUP BY language ORDER BY count(*) LIMIT 1
natsql:
select _ , count ( _ ) from _ group by _ order by count ( _ ) limit _ | select tv_channel.language , count ( tv_channel.* ) from tv_channel group by tv_channel.language order by count ( tv_channel.* ) limit 1

SQL:
SELECT language , count(*) FROM tv_channel GROUP BY language ORDER BY count(*) LIMIT 1
self correction:
SELECT TV_Channel.Language, COUNT(*) AS channel_count FROM TV_Channel GROUP BY TV_Channel.Language ORDER BY channel_count LIMIT 1

index is 606
SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
What are the languages used by the least number of TV Channels and how many channels use it?
schema_links:
What are the languages used by the least number of TV Channels and how many channels use it? | tv_channel : tv_channel.language , tv_channel.id , tv_channel.country , tv_channel.content , tv_channel.series_name , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ order by count ( _ ) limit _ | select tv_channel.language , count ( tv_channel.* ) from tv_channel group by tv_channel.language order by count ( tv_channel.* ) limit 1
SQL = SELECT language ,  count(*) FROM tv_channel GROUP BY language ORDER BY count(*) LIMIT 1
natsql:
select _ , count ( _ ) from _ group by _ order by count ( _ ) limit _ | select tv_channel.language , count ( tv_channel.* ) from tv_channel group by tv_channel.language order by count ( tv_channel.* ) limit 1

SQL:
SELECT language ,  count(*) FROM tv_channel GROUP BY language ORDER BY count(*) LIMIT 1
self correction:
SELECT TV_Channel.Language, COUNT(*) AS channel_count FROM TV_Channel GROUP BY TV_Channel.Language ORDER BY channel_count LIMIT 1

index is 607
SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE
List each language and the number of TV Channels using it.
schema_links:
List each language and the number of TV Channels using it. | tv_channel : tv_channel.language , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.series_name , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select tv_channel.language , count ( tv_channel.* ) from tv_channel group by tv_channel.language
SQL = SELECT language , COUNT(*) FROM tv_channel GROUP BY language
natsql:
select _ , count ( _ ) from _ group by _ | select tv_channel.language , count ( tv_channel.* ) from tv_channel group by tv_channel.language

SQL:
SELECT language , COUNT(*) FROM tv_channel GROUP BY language
self correction:
SELECT TV_Channel.Language, COUNT(*)  FROM TV_Channel  GROUP BY TV_Channel.Language

index is 608
SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE
For each language, list the number of TV Channels that use it.
schema_links:
For each language, list the number of TV Channels that use it. | tv_channel : tv_channel.language , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.series_name , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ , count ( distinct _ ) from _ group by _ | select tv_channel.language , count ( distinct tv_channel.id ) from tv_channel group by tv_channel.language
SQL = SELECT language , COUNT(DISTINCT id) FROM tv_channel GROUP BY language
natsql:
select _ , count ( distinct _ ) from _ group by _ | select tv_channel.language , count ( distinct tv_channel.id ) from tv_channel group by tv_channel.language

SQL:
SELECT language , COUNT(DISTINCT id) FROM tv_channel GROUP BY language
self correction:
SELECT language, COUNT(DISTINCT TV_Channel.id)  FROM TV_Channel  GROUP BY language

index is 609
SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!";
What is the TV Channel that shows the cartoon "The Rise of the Blue Beetle!"? List the TV Channel's series name.
schema_links:
What is the TV Channel that shows the cartoon "The Rise of the Blue Beetle!"? List the TV Channel's series name. | tv_channel : tv_channel.series_name , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | cartoon : cartoon.title ( The Rise of the Blue Beetle! ) , cartoon.channel , cartoon.id , cartoon.directed_by , cartoon.written_by , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.channel , tv_series.air_date , tv_series.*
natsql and SQL generation:
select _ from _ where _ = _ | select tv_channel.series_name from tv_channel where cartoon.title = "The Rise of the Blue Beetle!"
SQL = SELECT series_name FROM TV_Channel WHERE id  =  (SELECT Channel FROM Cartoon WHERE Title  =  "The Rise of the Blue Beetle!")
natsql:
select _ from _ where _ = _ | select tv_channel.series_name from tv_channel where cartoon.title = "The Rise of the Blue Beetle!"

SQL:
SELECT series_name FROM TV_Channel WHERE id  =  (SELECT Channel FROM Cartoon WHERE Title  =  "The Rise of the Blue Beetle!")
self correction:
SELECT series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = "The Rise of the Blue Beetle!"

index is 610
SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!";
What is the series name of the TV Channel that shows the cartoon "The Rise of the Blue Beetle"?
schema_links:
What is the series name of the TV Channel that shows the cartoon "The Rise of the Blue Beetle"? | tv_channel : tv_channel.series_name , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | cartoon : cartoon.title ( The Rise of the Blue Beetle! ) , cartoon.channel , cartoon.id , cartoon.directed_by , cartoon.written_by , cartoon.* | tv_series : tv_series.episode , tv_series.channel , tv_series.id , tv_series.rating , tv_series.air_date , tv_series.*
natsql and SQL generation:
select _ from _ where _ = _ | select tv_channel.series_name from tv_channel where cartoon.title = "The Rise of the Blue Beetle" and cartoon.channel = tv_channel.id
SQL = SELECT series_name FROM tv_channel WHERE id = (SELECT channel FROM cartoon WHERE title = 'The Rise of the Blue Beetle')
natsql:
select _ from _ where _ = _ | select tv_channel.series_name from tv_channel where cartoon.title = "The Rise of the Blue Beetle" and cartoon.channel = tv_channel.id

SQL:
SELECT series_name FROM tv_channel WHERE id = (SELECT channel FROM cartoon WHERE title = 'The Rise of the Blue Beetle')
self correction:
SELECT series_name  FROM TV_Channel  WHERE id = (     SELECT Channel      FROM Cartoon      WHERE Title = 'The Rise of the Blue Beetle' )

index is 611
SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
List the title of all  Cartoons showed on TV Channel with series name "Sky Radio".
schema_links:
List the title of all  Cartoons showed on TV Channel with series name "Sky Radio". | tv_channel : tv_channel.series_name ( Sky Radio ) , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | cartoon : cartoon.title , cartoon.channel , cartoon.id , cartoon.production_code , cartoon.directed_by , cartoon.* | tv_series : tv_series.episode , tv_series.id , tv_series.rating , tv_series.share , tv_series.channel , tv_series.*
natsql and SQL generation:
select _ from _ where @.@ = _ | select cartoon.title from cartoon where cartoon.channel = (select id from tv_channel where tv_channel.series_name = "Sky Radio")
SQL = SELECT title FROM cartoon WHERE channel  =  (SELECT id FROM tv_channel WHERE series_name  =  "Sky Radio")
natsql:
select _ from _ where @.@ = _ | select cartoon.title from cartoon where cartoon.channel = (select id from tv_channel where tv_channel.series_name = "Sky Radio")

SQL:
SELECT title FROM cartoon WHERE channel  =  (SELECT id FROM tv_channel WHERE series_name  =  "Sky Radio")
self correction:
SELECT cartoon.title  FROM cartoon  JOIN tv_channel ON cartoon.channel = tv_channel.id  WHERE tv_channel.series_name = "Sky Radio"

index is 612
SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
What is the title of all the cartools that are on the TV Channel with the series name "Sky Radio"?
schema_links:
What is the title of all the cartools that are on the TV Channel with the series name "Sky Radio"? | tv_channel : tv_channel.series_name ( Sky Radio ) , tv_channel.content , tv_channel.id , tv_channel.language , tv_channel.country , tv_channel.* | cartoon : cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.directed_by , cartoon.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.air_date , tv_series.share , tv_series.*
natsql and SQL generation:
select _ from _ where @.@ = "Sky Radio" | select cartoon.title from cartoon where cartoon.channel = (select tv_channel.id from tv_channel where tv_channel.series_name = "Sky Radio")
SQL = SELECT title FROM cartoon WHERE channel  =  (SELECT id FROM tv_channel WHERE series_name  =  "Sky Radio")
natsql:
select _ from _ where @.@ = "Sky Radio" | select cartoon.title from cartoon where cartoon.channel = (select tv_channel.id from tv_channel where tv_channel.series_name = "Sky Radio")

SQL:
SELECT title FROM cartoon WHERE channel  =  (SELECT id FROM tv_channel WHERE series_name  =  "Sky Radio")
self correction:
SELECT cartoon.title FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE tv_channel.series_name = "Sky Radio"

index is 613
SELECT Episode FROM TV_series ORDER BY rating
List the Episode of all TV series sorted by rating.
schema_links:
List the Episode of all TV series sorted by rating. | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ from _ order by _ | select tv_series.episode from tv_series order by tv_series.rating
SQL = SELECT episode FROM tv_series ORDER BY rating
natsql:
select _ from _ order by _ | select tv_series.episode from tv_series order by tv_series.rating

SQL:
SELECT episode FROM tv_series ORDER BY rating
self correction:
SELECT TV_series.Episode  FROM TV_series  ORDER BY TV_series.Rating ASC

index is 614
SELECT Episode FROM TV_series ORDER BY rating
What are all of the episodes ordered by ratings?
schema_links:
What are all of the episodes ordered by ratings? | tv_series : tv_series.episode , tv_series.rating , tv_series.channel , tv_series.id , tv_series.air_date , tv_series.* | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ from _ order by _ | select cartoon.title from cartoon order by cartoon.rating
SQL = SELECT title FROM cartoon ORDER BY rating
natsql:
select _ from _ order by _ | select cartoon.title from cartoon order by cartoon.rating

SQL:
SELECT title FROM cartoon ORDER BY rating
self correction:
SELECT tv_series.Episode FROM tv_series JOIN cartoon ON tv_series.Channel = cartoon.Channel ORDER BY tv_series.Rating

index is 615
SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
List top 3 highest Rating  TV series. List the TV series's Episode and Rating.
schema_links:
List top 3 highest Rating  TV series. List the TV series's Episode and Rating. | tv_series : tv_series.rating , tv_series.episode , tv_series.id , tv_series.air_date , tv_series.share , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ , _ from _ order by _ desc limit _ | select tv_series.episode , tv_series.rating from tv_series order by tv_series.rating desc limit 3
SQL = SELECT episode ,  rating FROM tv_series ORDER BY rating DESC LIMIT 3
natsql:
select _ , _ from _ order by _ desc limit _ | select tv_series.episode , tv_series.rating from tv_series order by tv_series.rating desc limit 3

SQL:
SELECT episode ,  rating FROM tv_series ORDER BY rating DESC LIMIT 3
self correction:
SELECT tv_series.Episode, tv_series.Rating FROM tv_series ORDER BY tv_series.Rating DESC LIMIT 3

index is 616
SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
What are 3 most highly rated episodes in the TV series table and what were those ratings?
schema_links:
What are 3 most highly rated episodes in the TV series table and what were those ratings? | tv_series : tv_series.rating , tv_series.episode , tv_series.id , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ , _ from _ order by _ desc limit _ | select tv_series.episode , tv_series.rating from tv_series order by tv_series.rating desc limit 3
SQL = SELECT episode , rating FROM tv_series ORDER BY rating DESC LIMIT 3
natsql:
select _ , _ from _ order by _ desc limit _ | select tv_series.episode , tv_series.rating from tv_series order by tv_series.rating desc limit 3

SQL:
SELECT episode , rating FROM tv_series ORDER BY rating DESC LIMIT 3
self correction:
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3

index is 617
SELECT max(SHARE) , min(SHARE) FROM TV_series;
What is minimum and maximum share of TV series?
schema_links:
What is minimum and maximum share of TV series? | tv_series : tv_series.share , tv_series.episode , tv_series.rating , tv_series.id , tv_series.18_49_rating_share , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql and SQL generation:
select min ( _ ) , max ( _ ) from _
 | select min ( tv_series.share ) , max ( tv_series.share ) from tv_series
SQL = SELECT MIN(share), MAX(share) FROM tv_series
natsql:
select min ( _ ) , max ( _ ) from _
 | select min ( tv_series.share ) , max ( tv_series.share ) from tv_series

SQL:
SELECT MIN(share), MAX(share) FROM tv_series
self correction:
SELECT MIN(Share), MAX(Share) FROM TV_series

index is 618
SELECT max(SHARE) , min(SHARE) FROM TV_series;
What is the maximum and minimum share for the TV series?
schema_links:
What is the maximum and minimum share for the TV series? | tv_series : tv_series.share , tv_series.episode , tv_series.18_49_rating_share , tv_series.id , tv_series.rating , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.* | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.*
natsql and SQL generation:
select max ( _ ) , min ( _ ) from _ | select max ( tv_series.share ) , min ( tv_series.share ) from tv_series
SQL = SELECT MAX(share) , MIN(share) FROM tv_series
natsql:
select max ( _ ) , min ( _ ) from _ | select max ( tv_series.share ) , min ( tv_series.share ) from tv_series

SQL:
SELECT MAX(share) , MIN(share) FROM tv_series
self correction:
SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM TV_series

index is 619
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
What is the air date of TV series with Episode "A Love of a Lifetime"?
schema_links:
What is the air date of TV series with Episode "A Love of a Lifetime"? | tv_series : tv_series.episode ( A Love of a Lifetime ) , tv_series.air_date , tv_series.rating , tv_series.id , tv_series.share , tv_series.* | cartoon : cartoon.title , cartoon.id , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql and SQL generation:
select _ from _ where _ = _ | select tv_series.air_date from tv_series where tv_series.episode = "A Love of a Lifetime"
SQL = SELECT air_date FROM tv_series WHERE episode = "A Love of a Lifetime"
natsql:
select _ from _ where _ = _ | select tv_series.air_date from tv_series where tv_series.episode = "A Love of a Lifetime"

SQL:
SELECT air_date FROM tv_series WHERE episode = "A Love of a Lifetime"
self correction:
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime"

index is 620
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
When did the episode "A Love of a Lifetime" air?
schema_links:
When did the episode "A Love of a Lifetime" air? | tv_series : tv_series.episode ( A Love of a Lifetime ) , tv_series.air_date , tv_series.rating , tv_series.id , tv_series.share , tv_series.* | tv_channel : tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ from _ where _ = "A Love of a Lifetime" | select tv_series.air_date from tv_series where tv_series.episode = "A Love of a Lifetime"
SQL = SELECT air_date FROM tv_series WHERE episode = "A Love of a Lifetime"
natsql:
select _ from _ where _ = "A Love of a Lifetime" | select tv_series.air_date from tv_series where tv_series.episode = "A Love of a Lifetime"

SQL:
SELECT air_date FROM tv_series WHERE episode = "A Love of a Lifetime"
self correction:
SELECT TV_series.Air_Date  FROM TV_series  WHERE TV_series.Episode = "A Love of a Lifetime"

index is 621
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
What is Weekly Rank of TV series with Episode "A Love of a Lifetime"?
schema_links:
What is Weekly Rank of TV series with Episode "A Love of a Lifetime"? | tv_series : tv_series.episode ( A Love of a Lifetime ) , tv_series.weekly_rank , tv_series.rating , tv_series.id , tv_series.share , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ from _ where _ = "A Love of a Lifetime" | select tv_series.weekly_rank from tv_series where tv_series.episode = "A Love of a Lifetime"
SQL = SELECT weekly_rank FROM tv_series WHERE episode = "A Love of a Lifetime"
natsql:
select _ from _ where _ = "A Love of a Lifetime" | select tv_series.weekly_rank from tv_series where tv_series.episode = "A Love of a Lifetime"

SQL:
SELECT weekly_rank FROM tv_series WHERE episode = "A Love of a Lifetime"
self correction:
SELECT tv_series.Weekly_Rank  FROM tv_series  WHERE tv_series.Episode = "A Love of a Lifetime"

index is 622
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
What is the weekly rank for the episode "A Love of a Lifetime"?
schema_links:
What is the weekly rank for the episode "A Love of a Lifetime"? | tv_series : tv_series.episode ( A Love of a Lifetime ) , tv_series.weekly_rank , tv_series.rating , tv_series.id , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ from _ where _ = _ | select tv_series.weekly_rank from tv_series where tv_series.episode = "A Love of a Lifetime"
SQL = SELECT weekly_rank FROM tv_series WHERE episode = "A Love of a Lifetime"
natsql:
select _ from _ where _ = _ | select tv_series.weekly_rank from tv_series where tv_series.episode = "A Love of a Lifetime"

SQL:
SELECT weekly_rank FROM tv_series WHERE episode = "A Love of a Lifetime"
self correction:
SELECT tv_series.weekly_rank  FROM tv_series  WHERE tv_series.Episode = "A Love of a Lifetime"

index is 623
SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";
What is the TV Channel of TV series with Episode "A Love of a Lifetime"? List the TV Channel's series name.
schema_links:
What is the TV Channel of TV series with Episode "A Love of a Lifetime"? List the TV Channel's series name. | tv_channel : tv_channel.series_name , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.episode ( A Love of a Lifetime ) , tv_series.channel , tv_series.rating , tv_series.id , tv_series.share , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ from _ where _ = "A Love of a Lifetime" | select tv_channel.series_name from tv_series join tv_channel on tv_series.channel = tv_channel.id where tv_series.episode = "A Love of a Lifetime"
SQL = SELECT T2.series_name FROM tv_series AS T1 JOIN tv_channel AS T2 ON T1.channel = T2.id WHERE T1.episode = "A Love of a Lifetime"
natsql:
select _ from _ where _ = "A Love of a Lifetime" | select tv_channel.series_name from tv_series join tv_channel on tv_series.channel = tv_channel.id where tv_series.episode = "A Love of a Lifetime"

SQL:
SELECT T2.series_name FROM tv_series AS T1 JOIN tv_channel AS T2 ON T1.channel = T2.id WHERE T1.episode = "A Love of a Lifetime"
self correction:
SELECT T2.series_name FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Episode = "A Love of a Lifetime"

index is 624
SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";
What is the name of the series that has the episode "A Love of a Lifetime"?
schema_links:
What is the name of the series that has the episode "A Love of a Lifetime"? | tv_series : tv_series.episode ( A Love of a Lifetime ) , tv_series.rating , tv_series.id , tv_series.channel , tv_series.share , tv_series.* | tv_channel : tv_channel.series_name , tv_channel.id , tv_channel.language , tv_channel.content , tv_channel.country , tv_channel.* | cartoon : cartoon.title , cartoon.id , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ from _ where _ = _ | select cartoon.title from cartoon where cartoon.episode = "A Love of a Lifetime"
SQL = SELECT title FROM cartoon WHERE episode = "A Love of a Lifetime"
natsql:
select _ from _ where _ = _ | select cartoon.title from cartoon where cartoon.episode = "A Love of a Lifetime"

SQL:
SELECT title FROM cartoon WHERE episode = "A Love of a Lifetime"
self correction:
SELECT title FROM cartoon JOIN TV_series ON cartoon.id = TV_series.id WHERE TV_series.episode = "A Love of a Lifetime"

index is 625
SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
List the Episode of all  TV series showed on TV Channel with series name "Sky Radio".
schema_links:
List the Episode of all  TV series showed on TV Channel with series name "Sky Radio". | tv_channel : tv_channel.series_name ( Sky Radio ) , tv_channel.id , tv_channel.content , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.episode , tv_series.id , tv_series.rating , tv_series.channel , tv_series.share , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ from _ where @.@ = _ | select tv_series.episode from tv_series where tv_series.channel = (select tv_channel.id from tv_channel where tv_channel.series_name = "Sky Radio")
SQL = SELECT episode FROM tv_series WHERE channel  =  (SELECT id FROM tv_channel WHERE series_name  =  "Sky Radio")
natsql:
select _ from _ where @.@ = _ | select tv_series.episode from tv_series where tv_series.channel = (select tv_channel.id from tv_channel where tv_channel.series_name = "Sky Radio")

SQL:
SELECT episode FROM tv_series WHERE channel  =  (SELECT id FROM tv_channel WHERE series_name  =  "Sky Radio")
self correction:
SELECT tv_series.Episode FROM tv_series JOIN tv_channel ON tv_series.Channel = tv_channel.id WHERE tv_channel.series_name = "Sky Radio"

index is 626
SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
What is the episode for the TV series named "Sky Radio"?
schema_links:
What is the episode for the TV series named "Sky Radio"? | tv_channel : tv_channel.series_name ( Sky Radio ) , tv_channel.content , tv_channel.language , tv_channel.id , tv_channel.country , tv_channel.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.air_date , tv_series.share , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ from _ where @.@ = "Sky Radio" | select tv_series.episode from tv_series where tv_channel.series_name = "Sky Radio"
SQL = SELECT episode FROM tv_series WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = "Sky Radio")
natsql:
select _ from _ where @.@ = "Sky Radio" | select tv_series.episode from tv_series where tv_channel.series_name = "Sky Radio"

SQL:
SELECT episode FROM tv_series WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = "Sky Radio")
self correction:
SELECT Episode FROM TV_series WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = "Sky Radio")

index is 627
SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by
Find the number of cartoons directed by each of the listed directors.
schema_links:
Find the number of cartoons directed by each of the listed directors. | cartoon : cartoon.directed_by , cartoon.title , cartoon.id , cartoon.production_code , cartoon.channel , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select cartoon.directed_by , count ( cartoon.* ) from cartoon group by cartoon.directed_by
SQL = SELECT directed_by ,  COUNT(*) FROM cartoon GROUP BY directed_by
natsql:
select _ , count ( _ ) from _ group by _ | select cartoon.directed_by , count ( cartoon.* ) from cartoon group by cartoon.directed_by

SQL:
SELECT directed_by ,  COUNT(*) FROM cartoon GROUP BY directed_by
self correction:
SELECT directed_by, COUNT(*) AS num_cartoons FROM Cartoon GROUP BY directed_by

index is 628
SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by
How many cartoons did each director create?
schema_links:
How many cartoons did each director create? | cartoon : cartoon.directed_by , cartoon.title , cartoon.id , cartoon.production_code , cartoon.channel , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql and SQL generation:
select _ , count ( _ ) from _ group by _ | select cartoon.directed_by , count ( cartoon.* ) from cartoon group by cartoon.directed_by
SQL = SELECT directed_by ,  COUNT(*) FROM cartoon GROUP BY directed_by
natsql:
select _ , count ( _ ) from _ group by _ | select cartoon.directed_by , count ( cartoon.* ) from cartoon group by cartoon.directed_by

SQL:
SELECT directed_by ,  COUNT(*) FROM cartoon GROUP BY directed_by
self correction:
SELECT directed_by, COUNT(*)  FROM Cartoon  GROUP BY directed_by

index is 629
select production_code ,  channel from cartoon order by original_air_date desc limit 1
Find the production code and channel of the most recently aired cartoon .
schema_links:
Find the production code and channel of the most recently aired cartoon . | cartoon : cartoon.production_code , cartoon.original_air_date , cartoon.channel , cartoon.title , cartoon.id , cartoon.* | tv_series : tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.id , tv_series.share , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql and SQL generation:
select _ , _ from _ order by _ desc limit _ | select cartoon.production_code , cartoon.channel from cartoon order by cartoon.original_air_date desc limit 1
SQL = SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1
natsql:
select _ , _ from _ order by _ desc limit _ | select cartoon.production_code , cartoon.channel from cartoon order by cartoon.original_air_date desc limit 1

SQL:
SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1
self correction:
SELECT Cartoon.production_code, TV_Channel.series_name AS channel FROM Cartoon JOIN TV_Channel ON Cartoon.channel = TV_Channel.id ORDER BY Cartoon.original_air_date DESC LIMIT 1

index is 630
select production_code ,  channel from cartoon order by original_air_date desc limit 1
What is the produdction code and channel of the most recent cartoon ?
schema_links:
What is the produdction code and channel of the most recent cartoon ? | cartoon : cartoon.production_code , cartoon.channel , cartoon.original_air_date , cartoon.title , cartoon.id , cartoon.* | tv_series : tv_series.episode , tv_series.air_date , tv_series.rating , tv_series.id , tv_series.share , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*
natsql and SQL generation:
select _ , _ from _ order by _ desc limit _ | select cartoon.production_code , cartoon.channel from cartoon order by cartoon.original_air_date desc limit 1
SQL = SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1
natsql:
select _ , _ from _ order by _ desc limit _ | select cartoon.production_code , cartoon.channel from cartoon order by cartoon.original_air_date desc limit 1

SQL:
SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1
self correction:
SELECT cartoon.production_code, cartoon.channel FROM cartoon JOIN TV_Channel ON cartoon.channel = TV_Channel.id ORDER BY cartoon.original_air_date DESC LIMIT 1

index is 631
SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"
Find the package choice and series name of the TV channel that has high definition TV.
schema_links:
Find the package choice and series name of the TV channel that has high definition TV. | tv_channel : tv_channel.series_name , tv_channel.hight_definition_tv , tv_channel.package_option , tv_channel.content , tv_channel.id , tv_channel.* | tv_series : tv_series.rating , tv_series.id , tv_series.episode , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ , _ from _ where @.@ = _ | select tv_channel.package_option , tv_channel.series_name from tv_channel where @.@ = 'Yes'
SQL = SELECT package_option ,  series_name FROM tv_channel WHERE hight_definition_tv  =  'Yes'
natsql:
select _ , _ from _ where @.@ = _ | select tv_channel.package_option , tv_channel.series_name from tv_channel where @.@ = 'Yes'

SQL:
SELECT package_option ,  series_name FROM tv_channel WHERE hight_definition_tv  =  'Yes'
self correction:
SELECT package_option, series_name FROM TV_Channel WHERE High_definition_TV = 'Yes'

index is 632
SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"
What are the package options and the name of the series for the TV Channel that supports high definition TV?
schema_links:
What are the package options and the name of the series for the TV Channel that supports high definition TV? | tv_channel : tv_channel.package_option ( Option ) , tv_channel.series_name , tv_channel.hight_definition_tv , tv_channel.id , tv_channel.content , tv_channel.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ , _ from _ where @.@ = _ | select tv_channel.package_option , tv_channel.series_name from tv_channel where tv_channel.hight_definition_tv = true
SQL = SELECT package_option , series_name FROM TV_Channel WHERE Hight_definition_TV = true
natsql:
select _ , _ from _ where @.@ = _ | select tv_channel.package_option , tv_channel.series_name from tv_channel where tv_channel.hight_definition_tv = true

SQL:
SELECT package_option , series_name FROM TV_Channel WHERE Hight_definition_TV = true
self correction:
SELECT package_option, series_name FROM TV_Channel WHERE Hight_definition_TV = 1

index is 633
SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
which countries' tv channels are playing some cartoon written by Todd Casey?
schema_links:
which countries' tv channels are playing some cartoon written by Todd Casey? | tv_channel : tv_channel.country , tv_channel.content , tv_channel.language , tv_channel.id , tv_channel.series_name , tv_channel.* | cartoon : cartoon.written_by ( Todd Casey ) , cartoon.title , cartoon.channel , cartoon.id , cartoon.directed_by , cartoon.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.air_date , tv_series.share , tv_series.*
natsql and SQL generation:
select distinct _ from _ where @.@ in ( select _ from _ where @ = _ ) | select distinct tv_channel.country from tv_channel where tv_channel.id in ( select cartoon.channel from cartoon where cartoon.written_by = 'Todd Casey' )
SQL = SELECT DISTINCT country FROM tv_channel WHERE id IN (SELECT channel FROM cartoon WHERE written_by = 'Todd Casey')
natsql:
select distinct _ from _ where @.@ in ( select _ from _ where @ = _ ) | select distinct tv_channel.country from tv_channel where tv_channel.id in ( select cartoon.channel from cartoon where cartoon.written_by = 'Todd Casey' )

SQL:
SELECT DISTINCT country FROM tv_channel WHERE id IN (SELECT channel FROM cartoon WHERE written_by = 'Todd Casey')
self correction:
SELECT country FROM TV_Channel WHERE id IN (     SELECT Channel     FROM Cartoon     WHERE Written_by = 'Todd Casey' )

index is 634
SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
What are the countries that have cartoons on TV that were written by Todd Casey?
schema_links:
What are the countries that have cartoons on TV that were written by Todd Casey? | cartoon : cartoon.written_by ( Todd Casey ) , cartoon.title , cartoon.id , cartoon.channel , cartoon.directed_by , cartoon.* | tv_channel : tv_channel.country , tv_channel.content , tv_channel.language , tv_channel.id , tv_channel.series_name , tv_channel.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.air_date , tv_series.share , tv_series.*
natsql and SQL generation:
select distinct _ from _ where _ = _ | select distinct tv_channel.country from tv_channel join cartoon on cartoon.channel = tv_channel.id where cartoon.written_by = 'Todd Casey'
SQL = SELECT DISTINCT country FROM tv_channel JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.written_by = 'Todd Casey'
natsql:
select distinct _ from _ where _ = _ | select distinct tv_channel.country from tv_channel join cartoon on cartoon.channel = tv_channel.id where cartoon.written_by = 'Todd Casey'

SQL:
SELECT DISTINCT country FROM tv_channel JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.written_by = 'Todd Casey'
self correction:
SELECT country  FROM tv_channel  JOIN cartoon ON cartoon.channel = tv_channel.id  WHERE cartoon.written_by = 'Todd Casey'

index is 635
SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
which countries' tv channels are not playing any cartoon written by Todd Casey?
schema_links:
which countries' tv channels are not playing any cartoon written by Todd Casey? | cartoon : cartoon.written_by ( Todd Casey ) , cartoon.title , cartoon.id , cartoon.channel , cartoon.directed_by , cartoon.* | tv_channel : tv_channel.country , tv_channel.content , tv_channel.language , tv_channel.id , tv_channel.series_name , tv_channel.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.air_date , tv_series.share , tv_series.*
natsql and SQL generation:
select distinct _ from _ where _ not in ( select _ from _ where _ = _ ) | select distinct tv_channel.country from tv_channel where tv_channel.id not in ( select cartoon.channel from cartoon where cartoon.written_by = 'Todd Casey' )
SQL = SELECT DISTINCT country FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE written_by = 'Todd Casey')
natsql:
select distinct _ from _ where _ not in ( select _ from _ where _ = _ ) | select distinct tv_channel.country from tv_channel where tv_channel.id not in ( select cartoon.channel from cartoon where cartoon.written_by = 'Todd Casey' )

SQL:
SELECT DISTINCT country FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE written_by = 'Todd Casey')
self correction:
SELECT DISTINCT country  FROM TV_Channel  WHERE id NOT IN (     SELECT Channel      FROM Cartoon      WHERE Written_by = 'Todd Casey' )

index is 636
SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
What are the countries that are not playing cartoons written by Todd Casey?
schema_links:
What are the countries that are not playing cartoons written by Todd Casey? | cartoon : cartoon.written_by ( Todd Casey ) , cartoon.title , cartoon.channel , cartoon.id , cartoon.directed_by , cartoon.* | tv_channel : tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.id , tv_channel.series_name , tv_channel.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.air_date , tv_series.share , tv_series.*
natsql and SQL generation:
select distinct _ from _ where @.@ not in ( select distinct _ from _ where @.@ = _ ) | select distinct tv_channel.country from tv_channel where tv_channel.id not in ( select distinct cartoon.channel from cartoon where cartoon.written_by = 'Todd Casey' )
SQL = SELECT DISTINCT country FROM tv_channel WHERE id NOT IN (SELECT DISTINCT channel FROM cartoon WHERE written_by  =  'Todd Casey')
natsql:
select distinct _ from _ where @.@ not in ( select distinct _ from _ where @.@ = _ ) | select distinct tv_channel.country from tv_channel where tv_channel.id not in ( select distinct cartoon.channel from cartoon where cartoon.written_by = 'Todd Casey' )

SQL:
SELECT DISTINCT country FROM tv_channel WHERE id NOT IN (SELECT DISTINCT channel FROM cartoon WHERE written_by  =  'Todd Casey')
self correction:
SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (     SELECT DISTINCT Channel     FROM Cartoon     WHERE Written_by = 'Todd Casey' )

index is 637
SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?
schema_links:
Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang? | tv_channel : tv_channel.series_name , tv_channel.country , tv_channel.id , tv_channel.language , tv_channel.content , tv_channel.* | cartoon : cartoon.directed_by ( Ben Jones , Michael Chang ) , cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.* | tv_series : tv_series.episode , tv_series.rating , tv_series.channel , tv_series.id , tv_series.air_date , tv_series.*
natsql and SQL generation:
select _ , _ from _ where _ in ( select _ from _ where _ = _ ) | select tv_channel.series_name , tv_channel.country from tv_channel where tv_channel.id in ( select cartoon.channel from cartoon where cartoon.directed_by = 'Ben Jones' or cartoon.directed_by = 'Michael Chang' )
SQL = SELECT series_name ,  country FROM tv_channel WHERE id IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Michael Chang')
natsql:
select _ , _ from _ where _ in ( select _ from _ where _ = _ ) | select tv_channel.series_name , tv_channel.country from tv_channel where tv_channel.id in ( select cartoon.channel from cartoon where cartoon.directed_by = 'Ben Jones' or cartoon.directed_by = 'Michael Chang' )

SQL:
SELECT series_name ,  country FROM tv_channel WHERE id IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones' OR directed_by = 'Michael Chang')
self correction:
SELECT series_name, Country FROM TV_Channel WHERE id IN (   SELECT Channel   FROM Cartoon   WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Michael Chang' )

index is 638
SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?
schema_links:
What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang? | tv_channel : tv_channel.series_name , tv_channel.country , tv_channel.content , tv_channel.id , tv_channel.language , tv_channel.* | cartoon : cartoon.directed_by ( Ben Jones , Michael Chang ) , cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.channel , tv_series.air_date , tv_series.*
natsql and SQL generation:
select _ , _ from _ where _ or _ | select tv_channel.series_name , tv_channel.country from tv_channel where cartoon.directed_by = 'Ben Jones' or cartoon.directed_by = 'Michael Chang'
SQL = SELECT series_name ,  country FROM TV_Channel WHERE id IN (SELECT DISTINCT channel FROM Cartoon WHERE directed_by  =  'Ben Jones' OR directed_by  =  'Michael Chang')
natsql:
select _ , _ from _ where _ or _ | select tv_channel.series_name , tv_channel.country from tv_channel where cartoon.directed_by = 'Ben Jones' or cartoon.directed_by = 'Michael Chang'

SQL:
SELECT series_name ,  country FROM TV_Channel WHERE id IN (SELECT DISTINCT channel FROM Cartoon WHERE directed_by  =  'Ben Jones' OR directed_by  =  'Michael Chang')
self correction:
SELECT series_name, Country FROM TV_Channel WHERE id IN (   SELECT DISTINCT Channel   FROM Cartoon   WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Michael Chang' )

index is 639
SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'
find the pixel aspect ratio and nation of the tv channels that do not use English.
schema_links:
find the pixel aspect ratio and nation of the tv channels that do not use English. | tv_channel : tv_channel.language ( English ) , tv_channel.pixel_aspect_ratio_par , tv_channel.country , tv_channel.id , tv_channel.content , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ , _ from _ where @.@ <> _ | select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_channel where tv_channel.language <> 'English'
SQL = SELECT pixel_aspect_ratio_PAR ,  Country FROM TV_Channel WHERE Language <> 'English'
natsql:
select _ , _ from _ where @.@ <> _ | select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_channel where tv_channel.language <> 'English'

SQL:
SELECT pixel_aspect_ratio_PAR ,  Country FROM TV_Channel WHERE Language <> 'English'
self correction:
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language <> 'English'

index is 640
SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'
What is the pixel aspect ratio and country of origin for all TV channels that do not use English?
schema_links:
What is the pixel aspect ratio and country of origin for all TV channels that do not use English? | tv_channel : tv_channel.language ( English ) , tv_channel.pixel_aspect_ratio_par , tv_channel.country , tv_channel.id , tv_channel.content , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ , _ from _ where @.@ != _ | select tv_channel.pixel_aspect_ratio_PAR , tv_channel.country from tv_channel where tv_channel.language != 'English'
SQL = SELECT pixel_aspect_ratio_PAR ,  country FROM TV_Channel WHERE language  !=  'English'
natsql:
select _ , _ from _ where @.@ != _ | select tv_channel.pixel_aspect_ratio_PAR , tv_channel.country from tv_channel where tv_channel.language != 'English'

SQL:
SELECT pixel_aspect_ratio_PAR ,  country FROM TV_Channel WHERE language  !=  'English'
self correction:
SELECT TV_Channel.pixel_aspect_ratio_PAR, TV_Channel.Country  FROM TV_Channel  WHERE TV_Channel.Language != 'English'

index is 641
SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2
find id of the tv channels that from the countries where have more than two tv channels.
schema_links:
find id of the tv channels that from the countries where have more than two tv channels. | tv_channel : tv_channel.id , tv_channel.country , tv_channel.content , tv_channel.language , tv_channel.series_name , tv_channel.* | tv_series : tv_series.rating , tv_series.id , tv_series.episode , tv_series.air_date , tv_series.share , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select id from tv_channel where count ( _ ) > _ group by _ | select tv_channel.id from tv_channel group by tv_channel.country having count(tv_channel.id) > 2
SQL = SELECT id FROM TV_Channel GROUP BY country HAVING count(id) > 2
natsql:
select id from tv_channel where count ( _ ) > _ group by _ | select tv_channel.id from tv_channel group by tv_channel.country having count(tv_channel.id) > 2

SQL:
SELECT id FROM TV_Channel GROUP BY country HAVING count(id) > 2
self correction:
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.Country HAVING COUNT(TV_Channel.id) > 2

index is 642
SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2
What are the ids of all tv channels that have more than 2 TV channels?
schema_links:
What are the ids of all tv channels that have more than 2 TV channels? | tv_channel : tv_channel.id , tv_channel.content , tv_channel.country , tv_channel.language , tv_channel.series_name , tv_channel.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*
natsql and SQL generation:
select _ from _ where count ( _ ) > _ group by _ | select tv_channel.id from tv_channel where count ( tv_channel.* ) > 2 group by tv_channel.id
SQL = SELECT id FROM TV_Channel GROUP BY id HAVING count(*)  >  2
natsql:
select _ from _ where count ( _ ) > _ group by _ | select tv_channel.id from tv_channel where count ( tv_channel.* ) > 2 group by tv_channel.id

SQL:
SELECT id FROM TV_Channel GROUP BY id HAVING count(*)  >  2
self correction:
SELECT TV_Channel.id  FROM TV_Channel  GROUP BY TV_Channel.id  HAVING COUNT(*) > 2

index is 643
SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'
find the id of tv channels that do not play any cartoon directed by Ben Jones.
schema_links:
find the id of tv channels that do not play any cartoon directed by Ben Jones. | cartoon : cartoon.directed_by ( Ben Jones ) , cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.* | tv_channel : tv_channel.id , tv_channel.content , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.channel , tv_series.air_date , tv_series.*
natsql and SQL generation:

natsql:

SQL:
SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')
self correction:
SELECT TV_Channel.id FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by <> 'Ben Jones' OR Cartoon.Directed_by IS NULL;

index is 644
SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'
What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?
schema_links:
What are the ids of the TV channels that do not have any cartoons directed by Ben Jones? | cartoon : cartoon.directed_by ( Ben Jones ) , cartoon.id , cartoon.title , cartoon.channel , cartoon.written_by , cartoon.* | tv_channel : tv_channel.id , tv_channel.content , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.air_date , tv_series.share , tv_series.*
natsql and SQL generation:
select _ from _ where not exists ( select * from _ where @.@ = _ ) | select tv_channel.id from tv_channel where not exists ( select * from cartoon where cartoon.directed_by = 'Ben Jones' and cartoon.channel = tv_channel.id )
SQL = SELECT id FROM tv_channel WHERE NOT EXISTS (SELECT * FROM cartoon WHERE directed_by  =  'Ben Jones' AND channel  =  tv_channel.id)
natsql:
select _ from _ where not exists ( select * from _ where @.@ = _ ) | select tv_channel.id from tv_channel where not exists ( select * from cartoon where cartoon.directed_by = 'Ben Jones' and cartoon.channel = tv_channel.id )

SQL:
SELECT id FROM tv_channel WHERE NOT EXISTS (SELECT * FROM cartoon WHERE directed_by  =  'Ben Jones' AND channel  =  tv_channel.id)
self correction:
SELECT tv_channel.id  FROM tv_channel  WHERE tv_channel.id NOT IN (   SELECT cartoon.channel    FROM cartoon    WHERE cartoon.directed_by = 'Ben Jones' )

index is 645
SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')
find the package option of the tv channel that do not have any cartoon directed by Ben Jones.
schema_links:
find the package option of the tv channel that do not have any cartoon directed by Ben Jones. | tv_channel : tv_channel.package_option ( Option ) , tv_channel.content , tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.* | cartoon : cartoon.directed_by ( Ben Jones ) , cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.* | tv_series : tv_series.episode , tv_series.id , tv_series.rating , tv_series.share , tv_series.channel , tv_series.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ where _ = _ ) | select tv_channel.package_option from tv_channel where tv_channel.id not in ( select cartoon.channel from cartoon where cartoon.directed_by = 'Ben Jones' )
SQL = SELECT package_option FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')
natsql:
select _ from _ where _ not in ( select _ from _ where _ = _ ) | select tv_channel.package_option from tv_channel where tv_channel.id not in ( select cartoon.channel from cartoon where cartoon.directed_by = 'Ben Jones' )

SQL:
SELECT package_option FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')
self correction:
SELECT package_option  FROM tv_channel  WHERE id NOT IN (   SELECT channel    FROM cartoon    WHERE directed_by = 'Ben Jones' )

index is 646
SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')
What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?
schema_links:
What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones? | cartoon : cartoon.directed_by ( Ben Jones ) , cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.* | tv_channel : tv_channel.package_option ( Option ) , tv_channel.content , tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.* | tv_series : tv_series.episode , tv_series.rating , tv_series.id , tv_series.air_date , tv_series.share , tv_series.*
natsql and SQL generation:
select distinct _ from _ where not exists ( select * from _ where _ = _ and _ = _ ) | select distinct tv_channel.package_option from tv_channel where not exists ( select * from cartoon where cartoon.channel = tv_channel.id and cartoon.directed_by = 'Ben Jones' )
SQL = SELECT DISTINCT package_option FROM TV_Channel WHERE NOT EXISTS (SELECT * FROM Cartoon WHERE Cartoon.Channel = TV_Channel.id AND Cartoon.Directed_by = 'Ben Jones')
natsql:
select distinct _ from _ where not exists ( select * from _ where _ = _ and _ = _ ) | select distinct tv_channel.package_option from tv_channel where not exists ( select * from cartoon where cartoon.channel = tv_channel.id and cartoon.directed_by = 'Ben Jones' )

SQL:
SELECT DISTINCT package_option FROM TV_Channel WHERE NOT EXISTS (SELECT * FROM Cartoon WHERE Cartoon.Channel = TV_Channel.id AND Cartoon.Directed_by = 'Ben Jones')
self correction:
SELECT DISTINCT package_option FROM TV_Channel WHERE id NOT IN (     SELECT Channel     FROM Cartoon     WHERE Directed_by = 'Ben Jones' )

index is 647
SELECT count(*) FROM poker_player
How many poker players are there?
schema_links:
How many poker players are there? | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.best_finish , poker_player.money_rank , poker_player.earnings , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql and SQL generation:
select count ( * ) from poker_player | SELECT count(*) FROM poker_player
natsql:
select count ( * ) from poker_player | SELECT count(*) FROM poker_player
SQL:
SELECT count(*) FROM poker_player
self correction:
SELECT COUNT(DISTINCT Poker_Player_ID) FROM poker_player

index is 648
SELECT count(*) FROM poker_player
Count the number of poker players.
schema_links:
Count the number of poker players. | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.earnings , poker_player.final_table_made , poker_player.best_finish , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql and SQL generation:
select count ( * ) from poker_player
SQL = SELECT count(*) FROM poker_player
natsql:
select count ( * ) from poker_player

SQL:
SELECT count(*) FROM poker_player
self correction:
SELECT count(DISTINCT Poker_Player_ID) FROM poker_player

index is 649
SELECT Earnings FROM poker_player ORDER BY Earnings DESC
List the earnings of poker players in descending order.
schema_links:
List the earnings of poker players in descending order. | poker_player : poker_player.earnings , poker_player.money_rank , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql and SQL generation:
select _ from _ order by _ desc | select poker_player.earnings from poker_player order by poker_player.earnings desc
SQL = SELECT earnings FROM poker_player ORDER BY earnings DESC
natsql:
select _ from _ order by _ desc | select poker_player.earnings from poker_player order by poker_player.earnings desc

SQL:
SELECT earnings FROM poker_player ORDER BY earnings DESC
self correction:
SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC

index is 650
SELECT Earnings FROM poker_player ORDER BY Earnings DESC
What are the earnings of poker players, ordered descending by value?
schema_links:
What are the earnings of poker players, ordered descending by value? | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql and SQL generation:
select _ from _ order by _ desc | select poker_player.earnings from poker_player order by poker_player.earnings desc
SQL = SELECT earnings FROM poker_player ORDER BY earnings DESC
natsql:
select _ from _ order by _ desc | select poker_player.earnings from poker_player order by poker_player.earnings desc

SQL:
SELECT earnings FROM poker_player ORDER BY earnings DESC
self correction:
SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC

index is 651
SELECT Final_Table_Made ,  Best_Finish FROM poker_player
List the final tables made and the best finishes of poker players.
schema_links:
List the final tables made and the best finishes of poker players. | poker_player : poker_player.final_table_made , poker_player.best_finish , poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql and SQL generation:
select _ , _ from _ | select poker_player.final_table_made , poker_player.best_finish from poker_player
SQL = SELECT final_table_made ,  best_finish FROM poker_player
natsql:
select _ , _ from _ | select poker_player.final_table_made , poker_player.best_finish from poker_player

SQL:
SELECT final_table_made ,  best_finish FROM poker_player
self correction:
SELECT final_table_made, best_finish FROM poker_player

index is 652
SELECT Final_Table_Made ,  Best_Finish FROM poker_player
What are the final tables made and best finishes for all poker players?
schema_links:
What are the final tables made and best finishes for all poker players? | poker_player : poker_player.final_table_made , poker_player.best_finish , poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql and SQL generation:
select _ , _ from _ | select poker_player.final_table_made , poker_player.best_finish from poker_player
SQL = SELECT final_table_made , best_finish FROM poker_player
natsql:
select _ , _ from _ | select poker_player.final_table_made , poker_player.best_finish from poker_player

SQL:
SELECT final_table_made , best_finish FROM poker_player
self correction:
SELECT final_table_made, best_finish FROM poker_player

index is 653
SELECT avg(Earnings) FROM poker_player
What is the average earnings of poker players?
schema_links:
What is the average earnings of poker players? | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql and SQL generation:
select avg ( _ ) from _ | select avg ( poker_player.earnings ) from poker_player
SQL = SELECT avg(earnings) FROM poker_player
natsql:
select avg ( _ ) from _ | select avg ( poker_player.earnings ) from poker_player

SQL:
SELECT avg(earnings) FROM poker_player
self correction:
SELECT AVG(Earnings) FROM poker_player

index is 654
SELECT avg(Earnings) FROM poker_player
Return the average earnings across all poker players.
schema_links:
Return the average earnings across all poker players. | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql and SQL generation:
select avg ( _ ) from _ | select avg ( poker_player.earnings ) from poker_player
SQL = SELECT avg(earnings) FROM poker_player
natsql:
select avg ( _ ) from _ | select avg ( poker_player.earnings ) from poker_player

SQL:
SELECT avg(earnings) FROM poker_player
self correction:
SELECT avg(Earnings) FROM poker_player

index is 655
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
What is the money rank of the poker player with the highest earnings?
schema_links:
What is the money rank of the poker player with the highest earnings? | poker_player : poker_player.money_rank , poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql and SQL generation:
select _ from _ order by _ desc limit _ | select poker_player.money_rank from poker_player order by poker_player.earnings desc limit 1
SQL = SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1
natsql:
select _ from _ order by _ desc limit _ | select poker_player.money_rank from poker_player order by poker_player.earnings desc limit 1

SQL:
SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1
self correction:
SELECT poker_player.Money_Rank FROM poker_player  ORDER BY poker_player.Earnings DESC  LIMIT 1

index is 656
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
Return the money rank of the player with the greatest earnings.
schema_links:
Return the money rank of the player with the greatest earnings. | poker_player : poker_player.money_rank , poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql and SQL generation:
select _ from _ order by _ desc limit _ | select poker_player.money_rank from poker_player order by poker_player.earnings desc limit 1
SQL = SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1
natsql:
select _ from _ order by _ desc limit _ | select poker_player.money_rank from poker_player order by poker_player.earnings desc limit 1

SQL:
SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1
self correction:
SELECT poker_player.money_rank  FROM poker_player  ORDER BY poker_player.earnings DESC  LIMIT 1

index is 657
SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000
What is the maximum number of final tables made among poker players with earnings less than 200000?
schema_links:
What is the maximum number of final tables made among poker players with earnings less than 200000? | poker_player : poker_player.final_table_made , poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.best_finish , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql and SQL generation:
select max ( _ ) from _ where @.@ < _ | select max ( poker_player.final_table_made ) from poker_player where poker_player.earnings < 200000
SQL = SELECT MAX(final_table_made) FROM poker_player WHERE earnings  <  200000
natsql:
select max ( _ ) from _ where @.@ < _ | select max ( poker_player.final_table_made ) from poker_player where poker_player.earnings < 200000

SQL:
SELECT MAX(final_table_made) FROM poker_player WHERE earnings  <  200000
self correction:
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000

index is 658
SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000
Return the maximum final tables made across all poker players who have earnings below 200000.
schema_links:
Return the maximum final tables made across all poker players who have earnings below 200000. | poker_player : poker_player.final_table_made , poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.best_finish , poker_player.* | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.*
natsql and SQL generation:
select max ( _ ) from _ where _ < _ | select max ( poker_player.final_table_made ) from poker_player where poker_player.earnings < 200000
SQL = SELECT max(final_table_made) FROM poker_player WHERE earnings  <  200000
natsql:
select max ( _ ) from _ where _ < _ | select max ( poker_player.final_table_made ) from poker_player where poker_player.earnings < 200000

SQL:
SELECT max(final_table_made) FROM poker_player WHERE earnings  <  200000
self correction:
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;

index is 659
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID
What are the names of poker players?
schema_links:
What are the names of poker players? | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.best_finish , poker_player.money_rank , poker_player.*
natsql and SQL generation:
select _ from _ | select people.name from people join poker_player on people.People_ID = poker_player.People_ID
SQL = SELECT name FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID
natsql:
select _ from _ | select people.name from people join poker_player on people.People_ID = poker_player.People_ID

SQL:
SELECT name FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID
self correction:
SELECT people.Name FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID

index is 660
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID
Return the names of all the poker players.
schema_links:
Return the names of all the poker players. | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.poker_player_id , poker_player.people_id , poker_player.best_finish , poker_player.earnings , poker_player.final_table_made , poker_player.*
natsql and SQL generation:
select _ from _ | select people.name from people
SQL = SELECT name FROM people
natsql:
select _ from _ | select people.name from people

SQL:
SELECT name FROM people
self correction:
SELECT people.Name FROM people 

index is 661
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000
What are the names of poker players whose earnings is higher than 300000?
schema_links:
What are the names of poker players whose earnings is higher than 300000? | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ from _ where _ > _ | select people.name from people join poker_player on people.people_id = poker_player.people_id where poker_player.earnings > 300000
SQL = SELECT name FROM people JOIN poker_player ON people.people_id = poker_player.people_id WHERE poker_player.earnings > 300000
natsql:
select _ from _ where _ > _ | select people.name from people join poker_player on people.people_id = poker_player.people_id where poker_player.earnings > 300000

SQL:
SELECT name FROM people JOIN poker_player ON people.people_id = poker_player.people_id WHERE poker_player.earnings > 300000
self correction:
SELECT name FROM people  JOIN poker_player ON people.people_id = poker_player.people_id  WHERE poker_player.earnings > 300000;

index is 662
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000
Give the names of poker players who have earnings above 300000.
schema_links:
Give the names of poker players who have earnings above 300000. | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ from _ where _ > _ | select people.name from people,poker_player where people.people_id=poker_player.people_id and poker_player.earnings > 300000
SQL = SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE earnings > 300000
natsql:
select _ from _ where _ > _ | select people.name from people,poker_player where people.people_id=poker_player.people_id and poker_player.earnings > 300000

SQL:
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE earnings > 300000
self correction:
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000

index is 663
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made
List the names of poker players ordered by the final tables made in ascending order.
schema_links:
List the names of poker players ordered by the final tables made in ascending order. | poker_player : poker_player.final_table_made , poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.best_finish , poker_player.* | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.*
natsql and SQL generation:
select _ from _ order by _ asc | select people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.final_table_made asc
SQL = SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC
natsql:
select _ from _ order by _ asc | select people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.final_table_made asc

SQL:
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC
self correction:
SELECT people.Name  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Final_Table_Made ASC

index is 664
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made
What are the names of poker players, ordered ascending by the number of final tables they have made?
schema_links:
What are the names of poker players, ordered ascending by the number of final tables they have made? | poker_player : poker_player.final_table_made , poker_player.poker_player_id , poker_player.people_id , poker_player.earnings , poker_player.best_finish , poker_player.* | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.*
natsql and SQL generation:
select _ from _ order by _ asc | select people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.final_table_made asc
SQL = SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC
natsql:
select _ from _ order by _ asc | select people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.final_table_made asc

SQL:
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC
self correction:
SELECT people.Name  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Final_Table_Made ASC

index is 665
SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1
What is the birth date of the poker player with the lowest earnings?
schema_links:
What is the birth date of the poker player with the lowest earnings? | people : people.birth_date , people.name , people.nationality , people.height , people.people_id , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ from _ order by _ limit _ | select people.birth_date from people order by poker_player.earnings limit 1
SQL = SELECT birth_date FROM people ORDER BY (SELECT earnings FROM poker_player ORDER BY earnings ASC LIMIT 1) LIMIT 1
natsql:
select _ from _ order by _ limit _ | select people.birth_date from people order by poker_player.earnings limit 1

SQL:
SELECT birth_date FROM people ORDER BY (SELECT earnings FROM poker_player ORDER BY earnings ASC LIMIT 1) LIMIT 1
self correction:
SELECT people.Birth_Date FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings ASC LIMIT 1

index is 666
SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1
Return the birth date of the poker player with the lowest earnings.
schema_links:
Return the birth date of the poker player with the lowest earnings. | people : people.birth_date , people.name , people.nationality , people.height , people.people_id , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ from _ order by _ limit _ | select people.birth_date from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings asc limit 1
SQL = SELECT birth_date FROM people WHERE People_ID = (SELECT People_ID FROM poker_player ORDER BY Earnings ASC LIMIT 1)
natsql:
select _ from _ order by _ limit _ | select people.birth_date from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings asc limit 1

SQL:
SELECT birth_date FROM people WHERE People_ID = (SELECT People_ID FROM poker_player ORDER BY Earnings ASC LIMIT 1)
self correction:
SELECT birth_date FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings ASC LIMIT 1

index is 667
SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1
What is the money rank of the tallest poker player?
schema_links:
What is the money rank of the tallest poker player? | poker_player : poker_player.money_rank , poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.* | people : people.height , people.name , people.nationality , people.people_id , people.birth_date , people.*
natsql and SQL generation:
select _ from _ order by _ desc limit _ | select poker_player.money_rank from poker_player join people on poker_player.people_id = people.people_id order by people.height desc limit 1
SQL = SELECT money_rank FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY people.height DESC LIMIT 1
natsql:
select _ from _ order by _ desc limit _ | select poker_player.money_rank from poker_player join people on poker_player.people_id = people.people_id order by people.height desc limit 1

SQL:
SELECT money_rank FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY people.height DESC LIMIT 1
self correction:
SELECT poker_player.money_rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1

index is 668
SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1
Return the money rank of the poker player with the greatest height.
schema_links:
Return the money rank of the poker player with the greatest height. | poker_player : poker_player.money_rank , poker_player.people_id , poker_player.earnings , poker_player.poker_player_id , poker_player.final_table_made , poker_player.* | people : people.height , people.name , people.people_id , people.nationality , people.birth_date , people.*
natsql and SQL generation:
select _ from _ where @.@ = max ( _ ) | select poker_player.money_rank from poker_player where @.@ = max ( people.height )
SQL = SELECT money_rank FROM poker_player WHERE people_id  =  (SELECT people_id FROM people ORDER BY height DESC LIMIT 1)
natsql:
select _ from _ where @.@ = max ( _ ) | select poker_player.money_rank from poker_player where @.@ = max ( people.height )

SQL:
SELECT money_rank FROM poker_player WHERE people_id  =  (SELECT people_id FROM people ORDER BY height DESC LIMIT 1)
self correction:
SELECT poker_player.money_rank  FROM poker_player  JOIN people ON poker_player.people_id = people.people_id WHERE people.height = (SELECT MAX(height) FROM people)

index is 669
SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200
What is the average earnings of poker players with height higher than 200?
schema_links:
What is the average earnings of poker players with height higher than 200? | people : people.height , people.name , people.people_id , people.nationality , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select avg ( _ ) from _ where _ > _ | select avg ( poker_player.earnings ) from people join poker_player on people.People_ID = poker_player.People_ID where people.height > 200
natsql:
select avg ( _ ) from _ where _ > _ | select avg ( poker_player.earnings ) from people join poker_player on people.People_ID = poker_player.People_ID where people.height > 200
SQL:
SELECT AVG(earnings) FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE height > 200
self correction:
SELECT AVG(poker_player.Earnings) FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE people.Height > 200

index is 670
SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200
Give average earnings of poker players who are taller than 200.
schema_links:
Give average earnings of poker players who are taller than 200. | people : people.height , people.name , people.people_id , people.nationality , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select avg ( _ ) from _ where @.@ > _ | select avg ( poker_player.earnings ) from poker_player join people on poker_player.people_id = people.people_id where people.height > 200
SQL = SELECT avg(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200
natsql:
select avg ( _ ) from _ where @.@ > _ | select avg ( poker_player.earnings ) from poker_player join people on poker_player.people_id = people.people_id where people.height > 200

SQL:
SELECT avg(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200
self correction:
SELECT avg(poker_player.earnings) FROM poker_player  JOIN people ON poker_player.people_id = people.people_id  WHERE people.height > 200

index is 671
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC
What are the names of poker players in descending order of earnings?
schema_links:
What are the names of poker players in descending order of earnings? | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ from _ order by _ desc | select people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings desc
SQL = SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY earnings DESC
natsql:
select _ from _ order by _ desc | select people.name from people join poker_player on people.people_id = poker_player.people_id order by poker_player.earnings desc

SQL:
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY earnings DESC
self correction:
SELECT name FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Earnings DESC

index is 672
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC
Return the names of poker players sorted by their earnings descending.
schema_links:
Return the names of poker players sorted by their earnings descending. | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ from _ order by _ desc | select people.name from people join poker_player on people.People_ID = poker_player.People_ID order by poker_player.earnings desc
SQL = SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY earnings DESC
natsql:
select _ from _ order by _ desc | select people.name from people join poker_player on people.People_ID = poker_player.People_ID order by poker_player.earnings desc

SQL:
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY earnings DESC
self correction:
SELECT name  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Earnings DESC

index is 673
SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality
What are different nationalities of people and the corresponding number of people from each nation?
schema_links:
What are different nationalities of people and the corresponding number of people from each nation? | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ , count ( * ) from _ group by _ | select people.nationality , count ( * ) from people group by people.nationality
SQL = SELECT nationality , count(*) FROM people GROUP BY nationality
natsql:
select _ , count ( * ) from _ group by _ | select people.nationality , count ( * ) from people group by people.nationality

SQL:
SELECT nationality , count(*) FROM people GROUP BY nationality
self correction:
SELECT nationality, COUNT(*) FROM people GROUP BY nationality

index is 674
SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality
How many people are there of each nationality?
schema_links:
How many people are there of each nationality? | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ , count ( * ) from _ group by _ | select people.nationality , count ( * ) from people group by people.nationality
SQL = SELECT nationality , count(*) FROM people GROUP BY nationality
natsql:
select _ , count ( * ) from _ group by _ | select people.nationality , count ( * ) from people group by people.nationality

SQL:
SELECT nationality , count(*) FROM people GROUP BY nationality
self correction:
SELECT nationality, COUNT(*)  FROM people  GROUP BY nationality

index is 675
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
What is the most common nationality of people?
schema_links:
What is the most common nationality of people? | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select people.nationality from people group by people.nationality order by count ( people.* ) desc limit 1
SQL = SELECT nationality FROM people GROUP BY nationality ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select people.nationality from people group by people.nationality order by count ( people.* ) desc limit 1

SQL:
SELECT nationality FROM people GROUP BY nationality ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT nationality, COUNT(*) as count FROM people GROUP BY nationality ORDER BY count DESC LIMIT 1

index is 676
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
Give the nationality that is most common across all people.
schema_links:
Give the nationality that is most common across all people. | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select people.nationality from people group by people.nationality order by count ( people.* ) desc limit 1
SQL = SELECT nationality FROM people GROUP BY nationality ORDER BY count(*) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select people.nationality from people group by people.nationality order by count ( people.* ) desc limit 1

SQL:
SELECT nationality FROM people GROUP BY nationality ORDER BY count(*) DESC LIMIT 1
self correction:
SELECT Nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1

index is 677
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2
What are the nationalities that are shared by at least two people?
schema_links:
What are the nationalities that are shared by at least two people? | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ from _ group by _ having count ( _ ) > _ | select people.nationality from people group by people.nationality having count(*) > 1
SQL = SELECT nationality FROM people GROUP BY nationality HAVING count(*)  >  1
natsql:
select _ from _ group by _ having count ( _ ) > _ | select people.nationality from people group by people.nationality having count(*) > 1

SQL:
SELECT nationality FROM people GROUP BY nationality HAVING count(*)  >  1
self correction:
SELECT nationality FROM people GROUP BY nationality HAVING COUNT(DISTINCT People_ID) > 1

index is 678
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2
Return the nationalities for which there are two or more people.
schema_links:
Return the nationalities for which there are two or more people. | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ from _ group by _ having count ( _ ) > _ | select people.nationality from people group by people.nationality having count(*) > 1
SQL = SELECT nationality FROM people GROUP BY nationality HAVING count(*) > 1
natsql:
select _ from _ group by _ having count ( _ ) > _ | select people.nationality from people group by people.nationality having count(*) > 1

SQL:
SELECT nationality FROM people GROUP BY nationality HAVING count(*) > 1
self correction:
SELECT nationality FROM people GROUP BY nationality HAVING COUNT(DISTINCT People_ID) >= 2

index is 679
SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC
List the names and birth dates of people in ascending alphabetical order of name.
schema_links:
List the names and birth dates of people in ascending alphabetical order of name. | people : people.birth_date , people.name , people.nationality , people.height , people.people_id , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ , _ from _ order by _ asc | select people.name , people.birth_date from people order by people.name asc
SQL = SELECT name , birth_date FROM people ORDER BY name ASC
natsql:
select _ , _ from _ order by _ asc | select people.name , people.birth_date from people order by people.name asc

SQL:
SELECT name , birth_date FROM people ORDER BY name ASC
self correction:
SELECT name, birth_date FROM people ORDER BY name ASC

index is 680
SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC
What are the names and birth dates of people, ordered by their names in alphabetical order?
schema_links:
What are the names and birth dates of people, ordered by their names in alphabetical order? | people : people.birth_date , people.name , people.nationality , people.height , people.people_id , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ , _ from _ order by _ asc | select people.name , people.birth_date from people order by people.name asc
SQL = SELECT name ,  birth_date FROM people ORDER BY name ASC
natsql:
select _ , _ from _ order by _ asc | select people.name , people.birth_date from people order by people.name asc

SQL:
SELECT name ,  birth_date FROM people ORDER BY name ASC
self correction:
SELECT name, birth_date FROM people ORDER BY name ASC

index is 681
SELECT Name FROM people WHERE Nationality != "Russia"
Show names of people whose nationality is not "Russia".
schema_links:
Show names of people whose nationality is not "Russia". | people : people.nationality ( Russia ) , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ from _ where @.@ <> _ | select people.name from people where people.nationality <> 'Russia'
SQL = SELECT name FROM people WHERE nationality <> 'Russia'
natsql:
select _ from _ where @.@ <> _ | select people.name from people where people.nationality <> 'Russia'

SQL:
SELECT name FROM people WHERE nationality <> 'Russia'
self correction:
SELECT name  FROM people  WHERE Nationality <> 'Russia'

index is 682
SELECT Name FROM people WHERE Nationality != "Russia"
What are the names of people who are not from Russia?
schema_links:
What are the names of people who are not from Russia? | people : people.nationality ( Russia ) , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ from _ where @.@ != _ | select people.name from people where people.nationality != 'Russia'
SQL = SELECT name FROM people WHERE nationality != 'Russia'
natsql:
select _ from _ where @.@ != _ | select people.name from people where people.nationality != 'Russia'

SQL:
SELECT name FROM people WHERE nationality != 'Russia'
self correction:
SELECT name FROM people WHERE nationality <> 'Russia'

index is 683
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
List the names of people that are not poker players.
schema_links:
List the names of people that are not poker players. | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.poker_player_id , poker_player.earnings , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ ) | select people.name from people where people.people_id not in ( select poker_player.people_id from poker_player )
SQL = SELECT name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
natsql:
select _ from _ where _ not in ( select _ from _ ) | select people.name from people where people.people_id not in ( select poker_player.people_id from poker_player )

SQL:
SELECT name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
self correction:
SELECT name FROM people LEFT JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.People_ID IS NULL

index is 684
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
What are the names of people who do not play poker?
schema_links:
What are the names of people who do not play poker? | people : people.name , people.nationality , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.poker_player_id , poker_player.earnings , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select _ from _ where _ not in ( select _ from _ ) | select people.name from people where people.people_id not in ( select poker_player.people_id from poker_player )
SQL = SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player)
natsql:
select _ from _ where _ not in ( select _ from _ ) | select people.name from people where people.people_id not in ( select poker_player.people_id from poker_player )

SQL:
SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player)
self correction:
SELECT name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)

index is 685
SELECT count(DISTINCT Nationality) FROM people
How many distinct nationalities are there?
schema_links:
How many distinct nationalities are there? | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct people.nationality ) from people
SQL = SELECT COUNT(DISTINCT nationality) FROM people
natsql:
select count ( distinct _ ) from _ | select count ( distinct people.nationality ) from people

SQL:
SELECT COUNT(DISTINCT nationality) FROM people
self correction:
SELECT COUNT(DISTINCT Nationality) FROM people

index is 686
SELECT count(DISTINCT Nationality) FROM people
Count the number of different nationalities.
schema_links:
Count the number of different nationalities. | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.poker_player_id , poker_player.people_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct people.nationality ) from people
SQL = SELECT count(DISTINCT nationality) FROM people
natsql:
select count ( distinct _ ) from _ | select count ( distinct people.nationality ) from people

SQL:
SELECT count(DISTINCT nationality) FROM people
self correction:
SELECT count(DISTINCT Nationality) FROM people

index is 687
SELECT count(*) FROM area_code_state
How many states are there?
schema_links:
How many states are there? | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.* | votes : votes.state , votes.created , votes.vote_id , votes.phone_number , votes.contestant_number , votes.* | contestants : contestants.contestant_number , contestants.contestant_name , contestants.*
natsql and SQL generation:
select count ( distinct _ ) from _ | select count ( distinct area_code_state.state ) from area_code_state
SQL = SELECT COUNT(DISTINCT state) FROM area_code_state
natsql:
select count ( distinct _ ) from _ | select count ( distinct area_code_state.state ) from area_code_state

SQL:
SELECT COUNT(DISTINCT state) FROM area_code_state
self correction:
SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE

index is 688
SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC
List the contestant numbers and names, ordered by contestant name descending.
schema_links:
List the contestant numbers and names, ordered by contestant name descending. | contestants : contestants.contestant_name , contestants.contestant_number , contestants.* | votes : votes.state , votes.created , votes.vote_id , votes.phone_number , votes.contestant_number , votes.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.*
natsql and SQL generation:
select _ , _ from _ order by _ desc | select contestants.contestant_number , contestants.contestant_name from contestants order by contestants.contestant_name desc
SQL = SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC
natsql:
select _ , _ from _ order by _ desc | select contestants.contestant_number , contestants.contestant_name from contestants order by contestants.contestant_name desc

SQL:
SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC
self correction:
SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC

index is 689
SELECT vote_id ,  phone_number ,  state FROM votes
List the vote ids, phone numbers and states of all votes.
schema_links:
List the vote ids, phone numbers and states of all votes. | votes : votes.vote_id , votes.phone_number , votes.state , votes.created , votes.contestant_number , votes.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.* | contestants : contestants.contestant_number , contestants.contestant_name , contestants.*
natsql and SQL generation:
select _ , _ , _ from _ | select votes.vote_id , votes.phone_number , votes.state from votes
SQL = SELECT vote_id ,  phone_number ,  state FROM votes
natsql:
select _ , _ , _ from _ | select votes.vote_id , votes.phone_number , votes.state from votes

SQL:
SELECT vote_id ,  phone_number ,  state FROM votes
self correction:
SELECT vote_id, phone_number, state FROM VOTES

index is 690
SELECT max(area_code) ,  min(area_code) FROM area_code_state
What are the maximum and minimum values of area codes?
schema_links:
What are the maximum and minimum values of area codes? | area_code_state : area_code_state.area_code , area_code_state.state , area_code_state.* | votes : votes.state , votes.created , votes.vote_id , votes.phone_number , votes.contestant_number , votes.* | contestants : contestants.contestant_number , contestants.contestant_name , contestants.*
natsql and SQL generation:
select max ( _ ) , min ( _ ) from _ | select max ( area_code_state.area_code ) , min ( area_code_state.area_code ) from area_code_state
SQL = SELECT MAX(area_code) ,  MIN(area_code) FROM area_code_state
natsql:
select max ( _ ) , min ( _ ) from _ | select max ( area_code_state.area_code ) , min ( area_code_state.area_code ) from area_code_state

SQL:
SELECT MAX(area_code) ,  MIN(area_code) FROM area_code_state
self correction:
SELECT MAX(area_code), MIN(area_code) FROM AREA_CODE_STATE;

index is 691
SELECT max(created) FROM votes WHERE state  =  'CA'
What is last date created of votes from the state 'CA'?
schema_links:
What is last date created of votes from the state 'CA'? | votes : votes.created , votes.state ( CA ) , votes.vote_id , votes.phone_number , votes.contestant_number , votes.* | area_code_state : area_code_state.state ( CA ) , area_code_state.area_code , area_code_state.* | contestants : contestants.contestant_number , contestants.contestant_name , contestants.*
natsql and SQL generation:
select max ( votes.created ) from votes where votes.state = 'CA'
SQL = SELECT MAX(created) FROM votes WHERE state = 'CA'
natsql:
select max ( votes.created ) from votes where votes.state = 'CA'

SQL:
SELECT MAX(created) FROM votes WHERE state = 'CA'
self correction:
SELECT MAX(created) FROM VOTES WHERE state = 'CA'

index is 692
SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'
What are the names of the contestants whose names are not 'Jessie Alloway'
schema_links:
What are the names of the contestants whose names are not 'Jessie Alloway' | contestants : contestants.contestant_name ( Jessie Alloway ) , contestants.contestant_number , contestants.* | votes : votes.state , votes.created , votes.vote_id , votes.phone_number , votes.contestant_number , votes.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.*
natsql and SQL generation:
select _ from _ where _ != 'Jessie Alloway' | select contestants.contestant_name from contestants where contestants.contestant_name != 'Jessie Alloway'
SQL = SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'
natsql:
select _ from _ where _ != 'Jessie Alloway' | select contestants.contestant_name from contestants where contestants.contestant_name != 'Jessie Alloway'

SQL:
SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'
self correction:
SELECT contestant_name  FROM CONTESTANTS  WHERE contestant_name <> 'Jessie Alloway'

index is 693
SELECT DISTINCT state ,  created FROM votes
What are the distinct states and create time of all votes?
schema_links:
What are the distinct states and create time of all votes? | votes : votes.state , votes.created , votes.vote_id , votes.phone_number , votes.contestant_number , votes.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.* | contestants : contestants.contestant_number , contestants.contestant_name , contestants.*
natsql and SQL generation:
select distinct _ , _ from _ | select distinct votes.state , votes.created from votes
SQL = SELECT DISTINCT state ,  created FROM votes
natsql:
select distinct _ , _ from _ | select distinct votes.state , votes.created from votes

SQL:
SELECT DISTINCT state ,  created FROM votes
self correction:
SELECT DISTINCT state, created FROM VOTES

index is 694
SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2
What are the contestant numbers and names of the contestants who had at least two votes?
schema_links:
What are the contestant numbers and names of the contestants who had at least two votes? | contestants : contestants.contestant_name , contestants.contestant_number , contestants.* | votes : votes.contestant_number , votes.created , votes.state , votes.vote_id , votes.phone_number , votes.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.*
natsql and SQL generation:
select _ , _ from _ where count ( _ ) >= _ group by _ | select contestants.contestant_number , contestants.contestant_name from contestants where count ( votes.contestant_number ) >= 2 group by contestants.contestant_number , contestants.contestant_name
SQL = SELECT contestant_number ,  contestant_name FROM contestants JOIN votes ON contestants.contestant_number  =  votes.contestant_number GROUP BY contestant_number , contestant_name HAVING count(*)  >=  2
natsql:
select _ , _ from _ where count ( _ ) >= _ group by _ | select contestants.contestant_number , contestants.contestant_name from contestants where count ( votes.contestant_number ) >= 2 group by contestants.contestant_number , contestants.contestant_name

SQL:
SELECT contestant_number ,  contestant_name FROM contestants JOIN votes ON contestants.contestant_number  =  votes.contestant_number GROUP BY contestant_number , contestant_name HAVING count(*)  >=  2
self correction:
SELECT contestant_number, contestant_name  FROM contestants  JOIN votes ON contestants.contestant_number = votes.contestant_number  GROUP BY contestant_number, contestant_name  HAVING COUNT(*) >= 2

index is 695
SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1
Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?
schema_links:
Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes? | contestants : contestants.contestant_number , contestants.contestant_name , contestants.* | votes : votes.contestant_number , votes.created , votes.state , votes.vote_id , votes.phone_number , votes.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.*
natsql and SQL generation:
select _ , _ from _ where _ = min ( _ ) | select contestants.contestant_number , contestants.contestant_name from contestants where contestants.contestant_number = (select contestant_number from votes group by contestant_number order by count(*) asc limit 1)
SQL = SELECT contestant_number ,  contestant_name FROM contestants WHERE contestant_number  =  (SELECT contestant_number FROM votes GROUP BY contestant_number ORDER BY count(*) ASC LIMIT 1)
natsql:
select _ , _ from _ where _ = min ( _ ) | select contestants.contestant_number , contestants.contestant_name from contestants where contestants.contestant_number = (select contestant_number from votes group by contestant_number order by count(*) asc limit 1)

SQL:
SELECT contestant_number ,  contestant_name FROM contestants WHERE contestant_number  =  (SELECT contestant_number FROM votes GROUP BY contestant_number ORDER BY count(*) ASC LIMIT 1)
self correction:
SELECT contestant_number, contestant_name  FROM contestants  WHERE contestant_number = (     SELECT contestant_number      FROM votes      GROUP BY contestant_number      ORDER BY count(*) ASC      LIMIT 1 )

index is 696
SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'
What are the number of votes from state 'NY' or 'CA'?
schema_links:
What are the number of votes from state 'NY' or 'CA'? | area_code_state : area_code_state.state ( CA , NY ) , area_code_state.area_code , area_code_state.* | votes : votes.state ( CA , NY ) , votes.created , votes.vote_id , votes.phone_number , votes.contestant_number , votes.* | contestants : contestants.contestant_number , contestants.contestant_name , contestants.*
natsql and SQL generation:
select count ( _ ) from _ where @.@ = 'NY' or @.@ = 'CA' | select count ( votes.* ) from votes where votes.state = 'NY' or votes.state = 'CA'
SQL = SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'
natsql:
select count ( _ ) from _ where @.@ = 'NY' or @.@ = 'CA' | select count ( votes.* ) from votes where votes.state = 'NY' or votes.state = 'CA'

SQL:
SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'
self correction:
SELECT COUNT(*) FROM VOTES WHERE state = 'NY' OR state = 'CA'

index is 697
SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )
How many contestants did not get voted?
schema_links:
How many contestants did not get voted? | contestants : contestants.contestant_name , contestants.contestant_number , contestants.* | votes : votes.contestant_number , votes.vote_id , votes.state , votes.created , votes.phone_number , votes.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.*
natsql and SQL generation:
select count ( distinct _ ) from _ where @.@ is null | select count ( distinct contestants.contestant_number ) from contestants where votes.contestant_number is null
SQL = SELECT count(DISTINCT contestant_number) FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes)
natsql:
select count ( distinct _ ) from _ where @.@ is null | select count ( distinct contestants.contestant_number ) from contestants where votes.contestant_number is null

SQL:
SELECT count(DISTINCT contestant_number) FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes)
self correction:
SELECT COUNT(DISTINCT contestant_number) FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes)

index is 698
SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1
What is the area code in which the most voters voted?
schema_links:
What is the area code in which the most voters voted? | votes : votes.created , votes.vote_id , votes.state , votes.phone_number , votes.contestant_number , votes.* | area_code_state : area_code_state.area_code , area_code_state.state , area_code_state.* | contestants : contestants.contestant_name , contestants.contestant_number , contestants.*
natsql and SQL generation:
select _ from _ group by _ order by count ( _ ) desc limit _ | select area_code_state.area_code from area_code_state group by area_code_state.area_code order by count ( votes.phone_number ) desc limit 1
SQL = SELECT area_code FROM area_code_state GROUP BY area_code ORDER BY count(phone_number) DESC LIMIT 1
natsql:
select _ from _ group by _ order by count ( _ ) desc limit _ | select area_code_state.area_code from area_code_state group by area_code_state.area_code order by count ( votes.phone_number ) desc limit 1

SQL:
SELECT area_code FROM area_code_state GROUP BY area_code ORDER BY count(phone_number) DESC LIMIT 1
self correction:
SELECT AREA_CODE_STATE.area_code FROM AREA_CODE_STATE JOIN VOTES ON VOTES.state = AREA_CODE_STATE.state GROUP BY AREA_CODE_STATE.area_code ORDER BY COUNT(VOTES.phone_number) DESC LIMIT 1

index is 699
SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'
What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?
schema_links:
What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'? | votes : votes.phone_number , votes.state , votes.created , votes.vote_id , votes.contestant_number , votes.* | contestants : contestants.contestant_name ( Tabatha Gehling ) , contestants.contestant_number , contestants.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.*
natsql and SQL generation:
select _ , _ , _ from _ where _ = 'Tabatha Gehling' | select votes.created , votes.state , votes.phone_number from votes where votes.contestant_number = (select contestant_number from contestants where contestant_name = 'Tabatha Gehling')
SQL = SELECT created , state , phone_number FROM votes WHERE contestant_number  =  (SELECT contestant_number FROM contestants WHERE contestant_name  =  'Tabatha Gehling')
natsql:
select _ , _ , _ from _ where _ = 'Tabatha Gehling' | select votes.created , votes.state , votes.phone_number from votes where votes.contestant_number = (select contestant_number from contestants where contestant_name = 'Tabatha Gehling')

SQL:
SELECT created , state , phone_number FROM votes WHERE contestant_number  =  (SELECT contestant_number FROM contestants WHERE contestant_name  =  'Tabatha Gehling')
self correction:
SELECT created, state, phone_number  FROM VOTES  WHERE contestant_number = (   SELECT contestant_number    FROM CONTESTANTS    WHERE contestant_name = 'Tabatha Gehling' )
