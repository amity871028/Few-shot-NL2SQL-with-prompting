SELECT count(Singer_ID) FROM singer
SELECT COUNT(*) FROM singer
SELECT singer.Name, singer.Country, singer.Age  FROM singer  ORDER BY singer.Age DESC
SELECT singer.Name, singer.Country, singer.Age  FROM singer  ORDER BY singer.Age DESC
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE country = 'France'
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE country = 'France'
SELECT AVG(stadium.capacity)  FROM stadium  JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID  WHERE concert.Year = 2022
SELECT s.song_Name, s.Song_release_year FROM singer AS s WHERE s.Age = (   SELECT MIN(Age)   FROM singer )
SELECT DISTINCT Country FROM singer WHERE Age > 20
SELECT DISTINCT country  FROM singer  WHERE Age > 20
SELECT country, COUNT(DISTINCT Singer_ID) AS singer_count  FROM singer  GROUP BY country
SELECT COUNT(DISTINCT Singer_ID) AS Singer_Count, Country FROM singer GROUP BY Country
SELECT song_name FROM singer WHERE Age > (   SELECT AVG(Age)   FROM singer )
SELECT s.song_name  FROM singer s WHERE s.age > (SELECT AVG(age) FROM singer)
SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
SELECT location, name  FROM stadium  WHERE capacity BETWEEN 5000 AND 10000
SELECT MAX(Capacity), AVG(Capacity) FROM stadium
SELECT avg(Capacity), max(Capacity) FROM stadium
SELECT name, capacity FROM stadium GROUP BY name, capacity HAVING average = (SELECT MAX(average) FROM stadium) LIMIT 1
SELECT name, capacity FROM stadium ORDER BY average DESC LIMIT 1
SELECT COUNT(*) FROM concert WHERE Year = 2014 OR Year = 2015
SELECT COUNT(DISTINCT concert_ID) FROM concert WHERE Year = 2014 OR Year = 2015
SELECT stadium.Name, COUNT(concert.concert_ID) AS Number_of_Concerts FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name
SELECT COUNT(concert.concert_ID) AS num_concerts, stadium.Name FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID GROUP BY stadium.Name
SELECT name, capacity FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year >= 2014 GROUP BY stadium.Stadium_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT name, capacity  FROM stadium  WHERE stadium_id = (   SELECT stadium_id    FROM concert    WHERE year > 2013    GROUP BY stadium_id    ORDER BY COUNT(concert_id) DESC    LIMIT 1 )
SELECT concert.Year FROM concert GROUP BY concert.Year ORDER BY COUNT(*) DESC LIMIT 1
SELECT Year, COUNT(*) AS Concert_Count FROM concert GROUP BY Year ORDER BY Concert_Count DESC LIMIT 1
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT DISTINCT stadium_id FROM concert)
SELECT name FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.stadium_id IS NULL
SELECT DISTINCT Country FROM singer WHERE Age > 40  UNION  SELECT DISTINCT Country FROM singer WHERE Age < 30
SELECT name FROM stadium WHERE stadium_id NOT IN (   SELECT stadium_id   FROM concert   WHERE year = 2014 )
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID)  FROM concert  JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID  GROUP BY concert.concert_Name, concert.Theme
SELECT concert_name, theme, COUNT(Singer_ID)  FROM concert  LEFT JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID  GROUP BY concert_name, theme
SELECT singer.Name, COUNT(singer_in_concert.Singer_ID) AS concert_count FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Singer_ID
SELECT singer.Name, COUNT(singer_in_concert.Singer_ID)  FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  GROUP BY singer.Name
SELECT DISTINCT singer.Name  FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID  WHERE concert.Year = 2014
SELECT singer.Name  FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE concert.Year = 2014
SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%'
SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%';
SELECT name, location  FROM stadium  WHERE stadium_id IN (   SELECT stadium_id    FROM concert    WHERE year = 2014 )  AND stadium_id IN (   SELECT stadium_id    FROM concert    WHERE year = 2015 )
SELECT stadium.Name, stadium.Location  FROM stadium  INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID  WHERE concert.Year IN (2014, 2015)  GROUP BY stadium.Name, stadium.Location  HAVING COUNT(DISTINCT concert.Year) = 2
SELECT COUNT(concert.concert_ID) FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE stadium.Capacity = (SELECT MAX(Capacity) FROM stadium)
SELECT COUNT(DISTINCT concert_ID) AS num_concerts FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)
SELECT COUNT(*) FROM Pets WHERE weight > 10
SELECT COUNT(*) FROM Pets WHERE weight > 10
SELECT pets.weight FROM pets WHERE pets.pet_age = (SELECT min(pets.pet_age) FROM pets WHERE pets.pet_type = 'dog')
SELECT min(weight) FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog')
SELECT MAX(weight) AS max_weight, pettype FROM Pets GROUP BY pettype
SELECT Pets.PetType, MAX(Pets.weight) AS max_weight FROM Pets GROUP BY Pets.PetType
SELECT COUNT(DISTINCT has_pet.PetID) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.Age > 20
SELECT COUNT(DISTINCT Pets.PetID) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20
SELECT COUNT(DISTINCT pets.petid)  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE student.sex = 'F'  AND pets.pettype = 'dog';
SELECT count(pets.petid)   FROM pets   JOIN has_pet ON pets.petid = has_pet.petid   JOIN student ON student.stuid = has_pet.stuid   WHERE pettype = 'dog'   AND sex = 'F'
SELECT COUNT(DISTINCT PetType) FROM Pets
SELECT COUNT(DISTINCT PetType) FROM Pets
SELECT student.fname FROM Student WHERE Student.StuID IN (     SELECT Has_Pet.StuID     FROM Has_Pet     INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE Pets.PetType IN ('cat', 'dog') )
SELECT DISTINCT Fname FROM Student WHERE StuID IN (     SELECT StuID     FROM Has_Pet     WHERE PetID IN (         SELECT PetID         FROM Pets         WHERE PetType IN ('cat', 'dog')     ) )
SELECT DISTINCT Fname FROM Student WHERE StuID IN (     SELECT StuID     FROM Has_Pet     JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE PetType = 'cat' )  AND StuID IN (     SELECT StuID     FROM Has_Pet     JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE PetType = 'dog' )
SELECT DISTINCT Fname  FROM Student  WHERE StuID IN (   SELECT StuID    FROM Has_Pet    WHERE PetID IN (     SELECT PetID      FROM Pets      WHERE PetType = 'cat'   ) )  AND StuID IN (   SELECT StuID    FROM Has_Pet    WHERE PetID IN (     SELECT PetID      FROM Pets      WHERE PetType = 'dog'   ) );
SELECT major, age FROM Student WHERE NOT EXISTS (   SELECT * FROM Has_Pet   INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Student.StuID = Has_Pet.StuID AND LOWER(Pets.PetType) = 'cat' )
SELECT Student.Major, Student.Age  FROM Student  WHERE Student.StuID NOT IN (     SELECT Has_Pet.StuID      FROM Has_Pet      JOIN Pets ON Has_Pet.PetID = Pets.PetID      WHERE LOWER(Pets.PetType) = 'cat' );
SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE LOWER(Pets.PetType) = 'cat')
SELECT stuid FROM Student WHERE stuid NOT IN (   SELECT Has_Pet.StuID   FROM Has_Pet   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE LOWER(Pets.PetType) = 'cat' )
SELECT fname, age FROM Student WHERE EXISTS (     SELECT *     FROM Has_Pet     JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE Student.StuID = Has_Pet.StuID     AND PetType = 'dog' ) AND NOT EXISTS (     SELECT *     FROM Has_Pet     JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE Student.StuID = Has_Pet.StuID     AND PetType = 'cat'     AND PetType IS NOT NULL )
SELECT student.fname  FROM Student  WHERE EXISTS (     SELECT *     FROM Has_Pet     INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE Student.StuID = Has_Pet.StuID     AND Has_Pet.PetID = Pets.PetID     AND Pets.PetType = 'dog'     AND NOT EXISTS (         SELECT *         FROM Has_Pet         INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID         WHERE Student.StuID = Has_Pet.StuID         AND Has_Pet.PetID = Pets.PetID         AND Pets.PetType = 'cat'     ) )
SELECT Pets.PetType, Pets.weight  FROM Pets  WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.pet_age ASC LIMIT 1
SELECT pets.petid, pets.weight FROM pets WHERE pets.pet_age > 1
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1
SELECT pets.pettype, AVG(pets.pet_age), MAX(pets.pet_age) FROM pets GROUP BY pets.pettype
SELECT pettype, AVG(pet_age), MAX(pet_age) FROM Pets GROUP BY pettype
SELECT pettype, AVG(weight)  FROM Pets  GROUP BY pettype
SELECT pets.pettype, AVG(pets.weight)  FROM pets  GROUP BY pets.pettype
SELECT fname, age FROM Student WHERE EXISTS (     SELECT *     FROM Has_Pet     WHERE Student.StuID = Has_Pet.StuID )
SELECT fname, age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID
SELECT Pets.PetID FROM Has_Pet JOIN Student ON Student.StuID = Has_Pet.StuID JOIN Pets ON Pets.PetID = Has_Pet.PetID WHERE Student.LName = 'Smith'
SELECT Pets.PetID  FROM Has_Pet  JOIN Student ON Has_Pet.StuID = Student.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE LOWER(Student.LName) = 'smith';
SELECT COUNT(*) AS pet_count, Student.StuID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID GROUP BY Student.StuID
SELECT Student.StuID, COUNT(Has_Pet.PetID) FROM Has_Pet INNER JOIN Student ON Has_Pet.StuID = Student.StuID GROUP BY Student.StuID
SELECT fname, sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID, Student.fname, Student.sex HAVING COUNT(*) > 1
SELECT fname, sex  FROM Student  WHERE StuID IN (   SELECT StuID    FROM Has_Pet    GROUP BY StuID    HAVING COUNT(PetID) > 1 )
SELECT Student.LName FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3;
SELECT Student.LName FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.Pet_Age = 3  AND LOWER(Pets.PetType) = 'cat';
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT count(DISTINCT ContId) FROM continents
SELECT count(DISTINCT ContId) FROM continents
SELECT contid, continent, COUNT(countryid) AS country_count  FROM continents  JOIN countries ON continents.contid = countries.continent  GROUP BY contid, continent
SELECT contid, continent, COUNT(*) AS country_count FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY contid, continent
SELECT COUNT(*) FROM countries
SELECT count(DISTINCT CountryId) FROM countries
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.ModelId) AS ModelCount FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id
SELECT fullname, car_makers.id, COUNT(model_list.ModelId) AS model_count FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY fullname, car_makers.id
SELECT model FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  WHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)
SELECT T3.Model FROM cars_data AS T1 JOIN car_names AS T3 ON T1.Id = T3.MakeId WHERE T1.Horsepower = (     SELECT MIN(Horsepower) FROM cars_data )
SELECT model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT model  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT SELECT DISTINCT Maker  FROM car_makers  WHERE Id IN (SELECT MakeId FROM cars_data WHERE Year = 1970)
SELECT maker FROM car_makers WHERE EXISTS (   SELECT *   FROM car_names   INNER JOIN cars_data ON cars_data.id = car_names.makeid   WHERE car_names.makeid = car_makers.id AND cars_data.year = 1970 )
SELECT car_names.Make, MIN(cars_data.Year)  FROM car_names  JOIN cars_data ON car_names.MakeId = cars_data.Id  GROUP BY car_names.Make
SELECT car_makers.maker, MIN(cars_data.year) AS earliest_year FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id GROUP BY car_makers.maker ORDER BY earliest_year ASC LIMIT 1
SELECT DISTINCT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Year > 1980
SELECT model  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  WHERE cars_data.year > 1980
SELECT continents.Continent, COUNT(DISTINCT car_makers.Id) AS MakerCount FROM continents JOIN countries ON continents.ContId = countries.ContinentId JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent
SELECT continents.Continent, COUNT(car_makers.Maker)  FROM continents  JOIN countries ON continents.ContId = countries.Continent  JOIN car_makers ON countries.CountryId = car_makers.Country  GROUP BY continents.Continent
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1
SELECT countries.CountryName  FROM countries  JOIN car_makers ON countries.CountryId = car_makers.Country  GROUP BY countries.CountryName  ORDER BY COUNT(car_makers.Id) DESC  LIMIT 1
SELECT COUNT(DISTINCT car_names.ModelId) AS car_model_count, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.FullName
SELECT COUNT(DISTINCT T3.model) AS NumModels, T1.Id, T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.ModelId = T3.MakeId JOIN cars_data AS T4 ON T3.MakeId = T4.Id GROUP BY T1.Id, T1.FullName
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON car_names.MakeId = cars_data.Id JOIN model_list ON model_list.ModelId = car_names.Model JOIN car_makers ON car_makers.Id = model_list.Maker WHERE car_makers.Maker = 'amc' AND car_names.Model = 'hornet sportabout (sw)'
SELECT cars_data.Accelerate   FROM cars_data   JOIN car_names ON cars_data.Id = car_names.MakeId   JOIN model_list ON car_names.Model = model_list.Model   JOIN car_makers ON model_list.Maker = car_makers.Id   WHERE car_names.Make = 'amc' AND model_list.Model = 'amc hornet sportabout (sw)'
SELECT COUNT(DISTINCT Maker) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'france')
SELECT COUNT(DISTINCT Maker) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France')
SELECT COUNT(DISTINCT car_names.Model) FROM car_names JOIN model_list ON car_names.Model = model_list.ModelId JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId WHERE countries.CountryName = 'usa' AND continents.Continent = 'usa'
SELECT count(*)   FROM model_list   WHERE Maker IN (SELECT Id                                   FROM car_makers                                   WHERE Country = (SELECT CountryId                                                                       FROM countries                                                                       WHERE CountryName = 'United States')) 
SELECT avg(MPG) AS AverageMPG FROM cars_data WHERE Cylinders = 4
SELECT avg(MPG) FROM cars_data WHERE Cylinders = 4
SELECT min(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974
SELECT MIN(Weight)  FROM cars_data  WHERE Cylinders = 8    AND Year = 1974
SELECT car_makers.Maker, car_names.Model FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId
SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model
SELECT countryname, countryid  FROM countries  WHERE countryid IN (SELECT DISTINCT country                      FROM car_makers)
SELECT countryname, countryid FROM countries WHERE countryid IN (SELECT country FROM car_makers)
SELECT count(*) FROM cars_data WHERE Horsepower > 150
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150
SELECT year, AVG(weight) AS average_weight FROM cars_data GROUP BY year
SELECT AVG(Weight) AS AverageWeight, Year FROM cars_data GROUP BY Year
SELECT countries.CountryName   FROM countries   JOIN car_makers ON countries.CountryId = car_makers.Country   WHERE countries.Continent = 'Europe'   GROUP BY countries.CountryName   HAVING COUNT(DISTINCT car_makers.Id) >= 3
SELECT countries.CountryName FROM countries JOIN continents ON countries.Continent = continents.ContId JOIN car_makers ON car_makers.Country = countries.CountryId WHERE continents.ContId = 'Europe' GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3
SELECT MAX(cars_data.Horsepower) AS MaximumHorsepower, car_makers.Maker AS Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3 GROUP BY car_makers.Maker
SELECT MAX(cars_data.Horsepower) AS MaxHorsepower, car_makers.Maker AS Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3 GROUP BY car_makers.Maker
SELECT T3.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.MPG = (SELECT MAX(MPG) FROM cars_data)
SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId ORDER BY cars_data.MPG DESC LIMIT 1
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980
SELECT avg(Horsepower) FROM cars_data WHERE Year < 1980
SELECT avg(cars_data.Edispl)  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.Maker = 'volvo'
SELECT avg(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.ModelId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'volvo'
SELECT cylinders, MAX(Accelerate)  FROM cars_data  GROUP BY cylinders
SELECT MAX(Accelerate) FROM cars_data GROUP BY Cylinders
SELECT model FROM model_list GROUP BY model ORDER BY COUNT(makeid) DESC LIMIT 1
SELECT model, COUNT(DISTINCT version) AS version_count FROM model_list GROUP BY model ORDER BY version_count DESC LIMIT 1
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4
SELECT count(*) FROM cars_data WHERE Year = 1980
SELECT count(DISTINCT Id) FROM cars_data WHERE Year = 1980
SELECT COUNT(DISTINCT car_names.Model)  FROM car_names  JOIN model_list ON car_names.ModelId = model_list.ModelId  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.FullName = 'American Motor Company'
SELECT count(DISTINCT model_list.Model)   FROM car_makers   JOIN model_list ON car_makers.Id = model_list.Maker   WHERE car_makers.Maker = 'American Motor Company'
SELECT fullname, id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY fullname, id HAVING COUNT(model_list.Model) > 3
SELECT car_makers.Maker, car_makers.Id  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  GROUP BY car_makers.Maker, car_makers.Id  HAVING COUNT(model_list.ModelId) > 3
SELECT DISTINCT model  FROM model_list  JOIN car_names ON model_list.ModelId = car_names.MakeId  JOIN car_makers ON car_names.Make = car_makers.Maker  JOIN cars_data ON car_names.Model = cars_data.Id  WHERE car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500
SELECT DISTINCT car_names.Model  FROM car_names  JOIN model_list ON car_names.Model = model_list.ModelId  JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500;
SELECT DISTINCT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000;
SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 OR Weight > 3000
SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)
SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Accelerate = (SELECT MAX(Accelerate) FROM cars_data)
SELECT cylinders FROM cars_data  JOIN car_names ON cars_data.id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'volvo'  AND cars_data.Accelerate = (     SELECT MIN(Accelerate)      FROM cars_data     JOIN car_names ON cars_data.id = car_names.MakeId     JOIN model_list ON car_names.Model = model_list.Model     JOIN car_makers ON model_list.Maker = car_makers.Id     WHERE car_makers.Maker = 'volvo' )
SELECT cylinders FROM cars_data WHERE Id IN (   SELECT car_names.MakeId   FROM car_names   JOIN model_list ON car_names.Model = model_list.Model   JOIN car_makers ON model_list.Maker = car_makers.Id   WHERE car_makers.Maker = 'volvo' ) ORDER BY Accelerate LIMIT 1
SELECT count(*)  FROM cars_data  WHERE accelerate > (SELECT max(horsepower) FROM cars_data)
SELECT count(*)  FROM cars_data  WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT count(DISTINCT T1.CountryId)  FROM countries AS T1  JOIN car_makers AS T2 ON T1.CountryId = T2.Country  GROUP BY T1.CountryId  HAVING count(DISTINCT T2.Id) > 2
SELECT count(DISTINCT Country) FROM car_makers GROUP BY Country HAVING count(DISTINCT Id) > 2
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6
SELECT count(*) FROM cars_data WHERE Cylinders > 6
SELECT model_list.Model FROM cars_data JOIN model_list ON cars_data.Id = model_list.ModelId WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1
SELECT model FROM model_list WHERE modelid = (     SELECT makeid     FROM cars_data     WHERE cylinders = 4     AND horsepower = (         SELECT MAX(horsepower)         FROM cars_data         WHERE cylinders = 4     ) )
SELECT car_names.MakeId, car_names.Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders <= 3;
SELECT car_names.MakeId, car_names.Make FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders < 4;
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 AND Year < 1980
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980
SELECT model_list.Model FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE cars_data.Weight < 3500 AND car_makers.Maker != 'Ford Motor Company'
SELECT DISTINCT T2.Model  FROM cars_data AS T1  JOIN car_names AS T2 ON T1.Id = T2.MakeId  JOIN model_list AS T3 ON T2.Model = T3.Model  JOIN car_makers AS T4 ON T3.Maker = T4.Id  WHERE T1.Weight < 3500 AND T4.Maker <> (SELECT Id FROM car_makers WHERE FullName = 'Ford Motor Company')
SELECT CountryName  FROM countries  WHERE CountryId NOT IN (SELECT Country FROM car_makers)
SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers)
SELECT id, maker  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  GROUP BY id, maker  HAVING COUNT(model_list.ModelId) >= 2 AND COUNT(DISTINCT car_makers.Id) > 3
SELECT car_makers.Id, car_makers.Maker  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  JOIN car_names ON model_list.ModelId = car_names.MakeId  JOIN cars_data ON car_names.MakeId = cars_data.Id  GROUP BY car_makers.Id, car_makers.Maker  HAVING COUNT(DISTINCT model_list.ModelId) > 1  AND COUNT(DISTINCT car_names.MakeId) > 3
SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY countries.CountryId, countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) > 3 OR car_names.Model = 'fiat';
SELECT countryid, countryname  FROM countries  WHERE countryid IN (     SELECT country      FROM car_makers      GROUP BY country      HAVING COUNT(*) > 3 ) OR countryid IN (     SELECT c.countryid      FROM car_names cn      JOIN model_list ml ON cn.model = ml.model      JOIN car_makers cm ON ml.maker = cm.id      JOIN countries c ON cm.country = c.countryid      WHERE cn.make LIKE '%fiat%' )  GROUP BY countryid, countryname
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'United States'
SELECT Airline, Abbreviation  FROM airlines  WHERE Country = 'United States'
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'
SELECT COUNT(*) FROM airlines
SELECT COUNT(*) FROM airlines
SELECT COUNT(DISTINCT AirportCode) AS AirportCount FROM airports
SELECT COUNT(*) FROM airports
SELECT count(*) FROM flights
SELECT COUNT(*) FROM flights
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
SELECT count(DISTINCT uid) FROM airlines WHERE Country = 'United States'
SELECT COUNT(*) FROM airlines WHERE Country = 'United States'
SELECT City, Country FROM airports WHERE AirportName = 'Alton' AND AirportCode = 'ALN';
SELECT City, Country FROM airports WHERE AirportName = 'Alton' AND AirportCode = 'Alton';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
SELECT AirportName FROM airports WHERE City = 'Aberdeen'
SELECT AirportName FROM airports WHERE City = 'Aberdeen'
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'
SELECT count(*) FROM flights WHERE DestAirport = 'ATO';
SELECT count(*) FROM flights WHERE DestAirport = 'ATO'
SELECT COUNT(flights.FlightNo) FROM flights   JOIN airports ON flights.SourceAirport = airports.AirportCode   WHERE airports.City = 'Aberdeen';
SELECT count(*) FROM airports   JOIN flights ON airports.AirportCode = flights.SourceAirport   WHERE airports.City = 'Aberdeen' AND flights.SourceAirport = airports.AirportCode
SELECT count(*) FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode JOIN cities ON airports.City = cities.CityName WHERE cities.CityName = 'Aberdeen'
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen' AND flights.DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
SELECT COUNT(*) FROM airports  JOIN flights ON airports.airportcode = flights.sourceairport  WHERE airports.city = 'Aberdeen' AND flights.destairport = (SELECT airportcode FROM airports WHERE city = 'Ashley')
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'ABR' AND DestAirport = 'ASY'
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue Airways'
SELECT count(*) FROM flights WHERE Airline = 'JetBlue Airways'
SELECT count(*)  FROM flights  JOIN airlines ON flights.airline = airlines.Airline  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airlines.Airline = 'United Airlines'  AND airports.AirportCode = 'ASY'
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ASY' AND Airline = 'United Airlines'
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'AHD' AND Airline = 'United Airlines'
SELECT COUNT(DISTINCT FlightNo)  FROM flights  WHERE SourceAirport = 'AHD'   AND Airline IN (SELECT Abbreviation FROM airlines WHERE Airline = 'United Airlines')  AND Airline = 'United Airlines';
SELECT count(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode JOIN airlines ON flights.airline = airlines.airline WHERE airlines.airline = 'United Airlines' AND airports.city = 'Aberdeen'
SELECT COUNT(*) FROM flights  JOIN airlines ON flights.Airline = airlines.Airline  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airlines.Airline = 'United Airlines'  AND airports.City = 'Aberdeen'
SELECT airports.City  FROM airports  JOIN flights ON flights.DestAirport = airports.AirportCode  GROUP BY airports.City  ORDER BY COUNT(flights.DestAirport) DESC  LIMIT 1
SELECT airports.city FROM flights JOIN airports ON flights.destairport = airports.airportcode GROUP BY airports.city ORDER BY COUNT(flights.destairport) DESC LIMIT 1
SELECT airports.City  FROM airports  JOIN flights ON flights.SourceAirport = airports.AirportCode  GROUP BY airports.City  ORDER BY COUNT(flights.SourceAirport) DESC  LIMIT 1
SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY COUNT(flights.SourceAirport) DESC LIMIT 1
SELECT airports.AirportCode  FROM flights  GROUP BY flights.DestAirport  ORDER BY COUNT(flights.DestAirport) DESC  LIMIT 1
SELECT airports.AirportCode  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  GROUP BY airports.AirportCode  ORDER BY COUNT(flights.FlightNo) DESC  LIMIT 1
SELECT airports.AirportCode FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.AirportCode ORDER BY COUNT(flights.DestAirport) ASC LIMIT 1
SELECT airports.AirportCode  FROM airports  JOIN flights ON flights.DestAirport = airports.AirportCode  GROUP BY airports.AirportCode  ORDER BY COUNT(flights.DestAirport) ASC  LIMIT 1
SELECT airline, COUNT(*) AS flight_count FROM flights GROUP BY airline ORDER BY flight_count DESC LIMIT 1
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline ORDER BY COUNT(flights.Airline) DESC LIMIT 1
SELECT abbreviation, country FROM airlines JOIN flights ON flights.airline = airlines.airline GROUP BY abbreviation, country HAVING count(flightno) = (   SELECT min(flight_count)   FROM (     SELECT airline, count(flightno) as flight_count     FROM flights     GROUP BY airline   ) )
SELECT abbreviation, country FROM airlines WHERE uid = (   SELECT airline   FROM flights   GROUP BY airline   HAVING COUNT(*) = (     SELECT MIN(cnt)     FROM (       SELECT COUNT(*) AS cnt       FROM flights       GROUP BY airline     ) AS T   ) ) LIMIT 1
SELECT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  WHERE flights.SourceAirport = 'AHD'
SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.SourceAirport = 'AHD'
SELECT DISTINCT Airline FROM airlines WHERE uid IN (SELECT DISTINCT Airline FROM flights WHERE DestAirport = 'AHD')
SELECT airlines.Airline  FROM flights  JOIN airlines ON flights.Airline = airlines.uid  WHERE flights.DestAirport = 'AHD'
SELECT DISTINCT airlines.Airline   FROM airlines   JOIN flights ON airlines.uid = flights.Airline   WHERE flights.SourceAirport IN ('APG', 'CVO')   AND flights.DestAirport IN ('APG', 'CVO')   GROUP BY airlines.Airline   HAVING COUNT(DISTINCT flights.SourceAirport) = 2
SELECT DISTINCT airlines.Airline FROM flights INNER JOIN airlines ON flights.Airline = airlines.uid WHERE flights.SourceAirport IN ('APG', 'CVO') AND flights.DestAirport IN ('APG', 'CVO') GROUP BY airlines.Airline HAVING COUNT(DISTINCT flights.SourceAirport) = 2;
SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights WHERE SourceAirport = 'CVO') AND uid NOT IN (SELECT Airline FROM flights WHERE SourceAirport = 'APG')
SELECT airline FROM airlines  WHERE uid IN (     SELECT Airline      FROM flights      WHERE SourceAirport = 'CVO'      AND DestAirport NOT IN (         SELECT AirportCode          FROM airports          WHERE City = 'APG'     ) )
SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.Airline GROUP BY airlines.Airline HAVING COUNT(flights.FlightNo) >= 10
SELECT airline FROM flights GROUP BY airline HAVING COUNT(flightno) >= 10
SELECT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  GROUP BY airlines.Airline  HAVING count(*) < 200
SELECT airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.uid, airlines.airline HAVING COUNT(flights.FlightNo) < 200
SELECT flights.FlightNo  FROM flights  JOIN airlines ON flights.Airline = airlines.Airline  WHERE airlines.Airline = 'United Airlines'
SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = 'United Airlines'
SELECT flights.FlightNo  FROM flights  JOIN airports    ON flights.SourceAirport = airports.AirportCode  WHERE airports.AirportCode = "APG"
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'APG'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = "APG"
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName = 'APG'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flightno FROM flights WHERE sourceairport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
SELECT flights.FlightNo  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen';
SELECT flightno FROM flights WHERE destairport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
SELECT COUNT(DISTINCT flights.FlightNo)  FROM flights   JOIN airports    ON flights.DestAirport = airports.AirportCode  WHERE airports.City IN ('Aberdeen', 'Abilene')
SELECT count(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen' OR City = 'Abilene')
SELECT airportname FROM airports WHERE airportcode NOT IN (   SELECT sourceairport FROM flights   UNION   SELECT destairport FROM flights )
SELECT airports.AirportName FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport WHERE flights.SourceAirport IS NULL AND flights.DestAirport IS NULL
SELECT count(Employee_ID) FROM employee
SELECT COUNT(*) FROM employee
SELECT employee.Name  FROM employee  ORDER BY employee.Age ASC
SELECT employee.Name FROM employee ORDER BY employee.Age ASC
SELECT city, COUNT(*) AS employee_count FROM employee GROUP BY city
SELECT COUNT(*) AS Employee_Count, City FROM employee GROUP BY City
SELECT employee.city FROM employee WHERE age < 30 GROUP BY employee.city HAVING COUNT(*) > 1
SELECT employee.City FROM employee WHERE employee.Age < 30 GROUP BY employee.City HAVING COUNT(DISTINCT employee.Employee_ID) > 1
SELECT count(DISTINCT T1.Shop_ID) AS num_shops, T1.Location FROM shop AS T1 GROUP BY T1.Location
SELECT COUNT(Shop_ID) AS shop_count, Location FROM shop GROUP BY Location
SELECT manager_name, district  FROM shop  WHERE number_products = (   SELECT MAX(number_products)    FROM shop )
SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop)
SELECT MIN(Number_products), MAX(Number_products) FROM shop
SELECT MIN(Number_products), MAX(Number_products) FROM shop
SELECT name, location, district FROM shop ORDER BY Number_products DESC
SELECT shop.name, shop.location, shop.district  FROM shop  ORDER BY shop.number_products DESC
SELECT name  FROM shop  WHERE number_products > (   SELECT AVG(number_products)    FROM shop )
SELECT name FROM shop WHERE Number_products > (   SELECT AVG(Number_products) FROM shop )
SELECT employee.name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.Employee_ID ORDER BY COUNT(evaluation.Employee_ID) DESC LIMIT 1
SELECT employee.Name  FROM evaluation  JOIN employee ON evaluation.Employee_ID = employee.Employee_ID  ORDER BY evaluation.Bonus DESC  LIMIT 1
SELECT employee.name  FROM evaluation  JOIN employee ON evaluation.Employee_ID = employee.Employee_ID  ORDER BY evaluation.Bonus DESC  LIMIT 1
SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation WHERE employee_id IS NOT NULL)
SELECT name  FROM employee  WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID, shop.Name ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1
SELECT name FROM shop WHERE shop_id NOT IN (SELECT DISTINCT shop_id FROM hiring)
SELECT name FROM shop WHERE shop.Shop_ID NOT IN (SELECT Shop_ID FROM hiring)
SELECT COUNT(T2.Employee_ID) AS "Number of Employees", T1.Name AS "Shop Name"  FROM shop AS T1  JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID  GROUP BY T1.Name;
SELECT COUNT(T3.Employee_ID) AS Number_of_employees, T2.Name AS Shop_name FROM shop AS T2 JOIN hiring AS T1 ON T2.Shop_ID = T1.Shop_ID JOIN employee AS T3 ON T1.Employee_ID = T3.Employee_ID GROUP BY T2.Shop_ID, T2.Name
SELECT SUM(Bonus) AS TotalBonus FROM evaluation
SELECT SUM(Bonus) FROM evaluation
SELECT hiring.* FROM hiring
SELECT hiring.* FROM hiring
SELECT DISTINCT district  FROM shop  WHERE district IN (     SELECT district      FROM shop      WHERE number_products < 3000 ) AND district IN (     SELECT district      FROM shop      WHERE number_products > 10000 )
SELECT DISTINCT district FROM shop WHERE district IN (     SELECT district     FROM shop     GROUP BY district     HAVING SUM(CASE WHEN number_products < 3000 THEN 1 ELSE 0 END) > 0        AND SUM(CASE WHEN number_products > 10000 THEN 1 ELSE 0 END) > 0 )
SELECT COUNT(DISTINCT Location) FROM shop
SELECT count(DISTINCT Location) FROM shop
SELECT COUNT(*) FROM Documents
SELECT COUNT(*) FROM Documents
SELECT ref_template_types.template_type_code, ref_template_types.template_type_description FROM ref_template_types
SELECT document_id, document_name, document_description FROM Documents
SELECT documents.Document_Name, documents.Template_ID FROM documents WHERE documents.Document_Description LIKE '%w%'
SELECT document_name, template_id FROM Documents WHERE document_description LIKE '%w%';
SELECT documents.Document_ID, documents.Template_ID, documents.Document_Description  FROM documents   WHERE documents.Document_Name = 'Robbin CV'
SELECT document_id, template_id, document_description  FROM documents  WHERE document_name = 'Robbin CV'
SELECT count(DISTINCT Template_ID) FROM Documents
SELECT COUNT(DISTINCT Template_ID) FROM Documents
SELECT count(DISTINCT Documents.Document_ID) FROM Templates  JOIN Documents ON Templates.Template_ID = Documents.Template_ID  WHERE Templates.Template_Type_Code = 'PPT'
SELECT COUNT(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation'
SELECT Templates.Template_ID, COUNT(Documents.Document_ID)  FROM Templates  LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID  GROUP BY Templates.Template_ID
SELECT template_id, COUNT(template_id)  FROM documents  GROUP BY template_id
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1
SELECT Templates.Template_ID  FROM Templates  JOIN Documents ON Templates.Template_ID = Documents.Template_ID  GROUP BY Templates.Template_ID  HAVING COUNT(DISTINCT Documents.Document_ID) > 1
SELECT templates.template_id  FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id HAVING COUNT(DISTINCT documents.document_id) > 1
SELECT templates.template_id FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id WHERE documents.template_id IS NULL;
SELECT Templates.Template_ID  FROM Templates  LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Template_ID IS NULL
SELECT COUNT(DISTINCT Template_ID) FROM Templates
SELECT COUNT(*) FROM Templates
SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates
SELECT DISTINCT Template_Type_Code FROM Templates
SELECT Template_Type_Code FROM Ref_Template_Types
SELECT templates.template_id  FROM templates   JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code   WHERE templates.template_type_code IN ('PP', 'PPT')
SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_Type_Code IN ('PP', 'PPT')
SELECT COUNT(Template_ID) FROM Templates WHERE Template_Type_Code = 'CV'
SELECT COUNT(*) FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE UPPER(Ref_Template_Types.Template_Type_Description) = 'CV'
SELECT Templates.Version_Number, Templates.Template_Type_Code  FROM Templates  WHERE Templates.Version_Number > 5
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5
SELECT template_type_code, COUNT(template_id) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY template_type_code
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS Template_Count FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code
SELECT Ref_Template_Types.Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(Template_ID) DESC LIMIT 1
SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_Type_Code ORDER BY COUNT(Templates.Template_ID) DESC LIMIT 1
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code HAVING COUNT(Templates.Template_ID) < 3;
SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_Type_Code HAVING COUNT(Templates.Template_ID) < 3
SELECT templates.version_number, templates.template_type_code FROM templates WHERE templates.version_number = (   SELECT MIN(version_number)   FROM templates )
SELECT min(Version_Number) AS Lowest_Version_Number, Template_Type_Code FROM Templates GROUP BY Template_Type_Code;
SELECT Ref_Template_Types.Template_Type_Code  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  WHERE Documents.Document_Name = "Data base"
SELECT templates.template_type_code  FROM templates  JOIN documents ON templates.template_id = documents.template_id  WHERE documents.document_name = 'Data base'
SELECT documents.document_name FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_code = 'BK';
SELECT documents.document_name  FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_description = 'BK'
SELECT ref_template_types.template_type_code, COUNT(*)  FROM ref_template_types  JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  JOIN documents ON templates.template_id = documents.template_id  GROUP BY ref_template_types.template_type_code
SELECT Ref_Template_Types.Template_Type_Code, COUNT(DISTINCT Documents.Document_ID) AS Document_Count FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code
SELECT Ref_Template_Types.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1
SELECT Ref_Template_Types.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
SELECT ref_template_types.template_type_code  FROM ref_template_types  LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  WHERE templates.template_type_code IS NULL
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates)
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
SELECT template_type_description FROM Ref_Template_Types WHERE template_type_code = 'AD'
SELECT template_type_description  FROM ref_template_types  WHERE UPPER(template_type_code) = 'AD'
SELECT template_type_code FROM Ref_Template_Types WHERE template_type_description = "Book"
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'
SELECT DISTINCT ref_template_types.template_type_description FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON documents.template_id = templates.template_id
SELECT DISTINCT Template_Details FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
SELECT templates.template_id  FROM templates  JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code  WHERE ref_template_types.template_type_description = 'Presentation'
SELECT Templates.Template_ID  FROM Templates  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  WHERE Ref_Template_Types.Template_Type_Description = 'Presentation'
SELECT COUNT(*) AS total_paragraphs FROM Paragraphs
SELECT COUNT(Paragraph_ID) FROM Paragraphs
SELECT COUNT(*) FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show'
SELECT COUNT(Paragraphs.Paragraph_ID) AS Paragraph_Count  FROM Paragraphs  JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID  WHERE Documents.Document_Name = 'Summer Show'
SELECT Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details  FROM Paragraphs  WHERE Paragraphs.Paragraph_Text = 'Korea ';
SELECT Paragraphs.*  FROM Paragraphs  WHERE Paragraphs.Paragraph_Text LIKE '%Korea%'
SELECT paragraph_id, paragraph_text  FROM paragraphs  JOIN documents ON paragraphs.document_id = documents.document_id  WHERE documents.document_name = 'Welcome to NY'
SELECT paragraphs.Paragraph_ID, paragraphs.Paragraph_Text FROM paragraphs JOIN documents ON paragraphs.Document_ID = documents.Document_ID WHERE documents.Document_Name = 'Welcome to NY'
SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID = (   SELECT Document_ID   FROM Documents   WHERE Document_Name = 'Customer reviews' )
SELECT paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Customer reviews'
SELECT documents.document_id, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY documents.document_id
SELECT documents.document_id, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY documents.document_id
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id)  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id, documents.document_name
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS paragraph_count FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name
SELECT documents.document_id  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  HAVING COUNT(DISTINCT paragraphs.paragraph_id) >= 2
SELECT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id HAVING COUNT(paragraphs.paragraph_id) >= 2
SELECT documents.document_id, documents.document_name  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id, documents.document_name  ORDER BY COUNT(paragraphs.paragraph_id) DESC  LIMIT 1
SELECT documents.document_id, documents.document_name FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1
SELECT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY COUNT(paragraphs.paragraph_id) ASC LIMIT 1
SELECT documents.document_id  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY COUNT(paragraphs.paragraph_id) LIMIT 1
SELECT Documents.Document_ID FROM Paragraphs GROUP BY Documents.Document_ID HAVING COUNT(Paragraphs.Paragraph_ID) BETWEEN 1 AND 2
SELECT documents.document_id  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  HAVING COUNT(DISTINCT paragraphs.paragraph_id) BETWEEN 1 AND 2
SELECT documents.document_id  FROM paragraphs  JOIN documents ON paragraphs.document_id = documents.document_id  WHERE paragraphs.paragraph_text IN ('Brazil', 'Ireland')
SELECT documents.document_id  FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id WHERE paragraphs.paragraph_text IN ('Brazil', 'Ireland');
SELECT COUNT(Teacher_ID) FROM teacher
SELECT count(Teacher_ID) FROM teacher
SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC
SELECT teacher.Name  FROM teacher  ORDER BY teacher.Age ASC
SELECT Age, Hometown FROM teacher
SELECT teacher.Age, teacher.Hometown FROM teacher
SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'
SELECT name  FROM teacher  WHERE hometown <> 'Little Lever Urban District'
SELECT name FROM teacher WHERE age IN (32, 33)
SELECT teacher.Name FROM teacher WHERE teacher.Age = 32 OR teacher.Age = 33
SELECT teacher.Hometown FROM teacher ORDER BY teacher.Age ASC LIMIT 1
SELECT teacher.Hometown FROM teacher ORDER BY teacher.Age ASC LIMIT 1
SELECT hometown, COUNT(*)  FROM teacher  GROUP BY hometown
SELECT hometown, COUNT(*) FROM teacher GROUP BY hometown
SELECT teacher.Hometown FROM teacher GROUP BY teacher.Hometown ORDER BY COUNT(*) DESC LIMIT 1
SELECT teacher.Hometown, COUNT(*) AS Count  FROM teacher  GROUP BY teacher.Hometown  ORDER BY Count DESC  LIMIT 1
SELECT teacher.hometown FROM teacher GROUP BY teacher.hometown HAVING COUNT(DISTINCT teacher.Teacher_ID) > 1
SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(DISTINCT Teacher_ID) > 1
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID
SELECT T1.Name, T3.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID ORDER BY T1.Name ASC
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC
SELECT teacher.Name  FROM course_arrange  JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID  JOIN course ON course.Course_ID = course_arrange.Course_ID  WHERE course.Course = 'Math'
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'Math';
SELECT teacher.Name, COUNT(course.Course_ID)  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  JOIN course ON course_arrange.Course_ID = course.Course_ID  GROUP BY teacher.Name
SELECT T1.Name, COUNT(T2.Course_ID)  FROM teacher AS T1  JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID  GROUP BY T1.Name
SELECT name  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  GROUP BY teacher.Teacher_ID, teacher.Name  HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2
SELECT name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2
SELECT name  FROM teacher  WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)
SELECT name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)
SELECT COUNT(ID) FROM visitor WHERE Age < 30
SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Level_of_membership DESC
SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4
SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Age ASC
SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009
SELECT open_year, num_of_staff FROM museum WHERE Name = 'Plaza Museum'
SELECT name FROM museum WHERE num_of_staff > (SELECT MIN(num_of_staff) FROM museum WHERE open_year > 2010)
SELECT visitor.ID, visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID, visitor.Name, visitor.Age HAVING COUNT(DISTINCT visit.Museum_ID) > 1
SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID, visitor.Name, visitor.Level_of_membership ORDER BY SUM(visit.Total_spent) DESC LIMIT 1
SELECT museum.Museum_ID, museum.Name  FROM museum  JOIN visit ON museum.Museum_ID = visit.Museum_ID GROUP BY museum.Museum_ID, museum.Name  ORDER BY COUNT(visit.Museum_ID) DESC  LIMIT 1
SELECT museum.Name FROM museum WHERE NOT EXISTS (SELECT * FROM visit WHERE museum.Museum_ID = visit.Museum_ID)
SELECT visitor.name, visitor.age  FROM visitor  JOIN visit ON visitor.ID = visit.visitor_ID  ORDER BY visit.Num_of_Ticket DESC  LIMIT 1
SELECT avg(Num_of_Ticket), max(Num_of_Ticket) FROM visit
SELECT SUM(visit.Total_spent) AS Total_Ticket_Expense FROM visit INNER JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visitor.Level_of_membership = 1
SELECT visitor.Name FROM visitor JOIN visit ON visit.visitor_ID = visitor.ID JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year < 2009 OR museum.Open_Year > 2011 GROUP BY visitor.Name HAVING COUNT(DISTINCT museum.Museum_ID) > 1
SELECT count(DISTINCT T1.ID)  FROM visitor AS T1  WHERE T1.ID NOT IN (     SELECT DISTINCT T2.visitor_ID      FROM visit AS T2      JOIN museum AS T3 ON T2.Museum_ID = T3.Museum_ID      WHERE T3.Open_Year > 2010 )
SELECT COUNT(Museum_ID)  FROM museum  WHERE Open_Year > 2013 OR Open_Year < 2008
SELECT count(*) FROM players
SELECT count(*) FROM players
SELECT COUNT(match_num) AS total_matches FROM matches
SELECT COUNT(*) FROM matches
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SELECT first_name, birth_date  FROM players  WHERE country_code = 'USA'
SELECT avg(loser_age) AS average_loser_age, avg(winner_age) AS average_winner_age FROM matches
SELECT AVG(loser_age), AVG(winner_age) FROM matches
SELECT AVG(winner_rank) FROM matches
SELECT AVG(winner_rank) FROM matches
SELECT max(loser_rank) AS highest_rank FROM matches
SELECT MAX(loser_rank) AS best_rank_of_losers FROM matches
SELECT COUNT(DISTINCT country_code) FROM players
SELECT COUNT(DISTINCT country_code) FROM players
SELECT COUNT(DISTINCT loser_name) FROM matches
SELECT COUNT(DISTINCT loser_name) FROM matches
SELECT tourney_name  FROM matches  GROUP BY tourney_name  HAVING COUNT(*) > 10
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10
SELECT DISTINCT m.winner_name FROM matches AS m WHERE m.year IN (2013, 2016) GROUP BY m.winner_name HAVING COUNT(DISTINCT m.year) = 2
SELECT DISTINCT first_name, last_name  FROM players  WHERE player_id IN (   SELECT winner_id    FROM matches    WHERE year = 2013 )  AND player_id IN (   SELECT winner_id    FROM matches    WHERE year = 2016 )
SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016
SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016
SELECT country_code, first_name  FROM players  WHERE player_id IN (     SELECT winner_id     FROM matches     WHERE tourney_name = 'Australian Open' AND tourney_level = 'G' ) AND player_id IN (     SELECT winner_id     FROM matches     WHERE tourney_name = 'WTA Championships' AND tourney_level = 'W' ) GROUP BY country_code, first_name HAVING COUNT(DISTINCT player_id) = 2
SELECT players.first_name, players.country_code FROM players WHERE players.player_id IN (     SELECT matches.winner_id     FROM matches     WHERE matches.tourney_name = 'Australian Open' ) AND players.player_id IN (     SELECT matches.winner_id     FROM matches     WHERE matches.tourney_name = 'WTA Championships' );
SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date LIMIT 1
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1
SELECT first_name, last_name FROM players ORDER BY birth_date
SELECT first_name, last_name FROM players ORDER BY birth_date
SELECT first_name, last_name FROM players WHERE hand = 'L' AND hand <> 'U' ORDER BY birth_date;
SELECT
SELECT players.first_name, players.country_code  FROM players  WHERE player_id = (   SELECT player_id    FROM rankings    WHERE tours = (     SELECT max(tours)      FROM rankings   ) )
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(rankings.tours) DESC LIMIT 1
SELECT year, COUNT(*) as match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1
SELECT year, COUNT(*) as match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1
SELECT matches.winner_name, MAX(matches.winner_rank_points) AS max_rank_points FROM matches GROUP BY matches.winner_id ORDER BY COUNT(matches.winner_id) DESC LIMIT 1
SELECT matches.winner_name, MAX(rankings.ranking_points)  FROM matches  JOIN players ON matches.winner_id = players.player_id  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY matches.winner_id  ORDER BY MAX(rankings.ranking_points) DESC  LIMIT 1;
SELECT matches.winner_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'Australian Open' AND matches.winner_rank_points = (     SELECT MAX(matches.winner_rank_points)     FROM matches     JOIN players ON matches.winner_id = players.player_id     WHERE matches.tourney_name = 'Australian Open' )
SELECT matches.winner_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'Australian Open' AND matches.winner_rank_points = (     SELECT MAX(m.winner_rank_points)     FROM matches m     JOIN players p ON m.winner_id = p.player_id     WHERE m.tourney_name = 'Australian Open' )
SELECT winner_name, loser_name FROM matches WHERE minutes = (   SELECT MAX(minutes)   FROM matches )
SELECT matches.winner_name, matches.loser_name FROM matches ORDER BY minutes DESC LIMIT 1
SELECT avg(T1.ranking) AS average_ranking, T2.first_name FROM rankings AS T1 JOIN players AS T2 ON T1.player_id = T2.player_id GROUP BY T2.first_name
SELECT players.first_name, AVG(rankings.ranking)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name
SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name
SELECT players.first_name, SUM(rankings.ranking_points)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name
SELECT COUNT(DISTINCT T1.player_id) AS player_count, T1.country_code FROM players AS T1 GROUP BY T1.country_code
SELECT country_code, COUNT(*) AS player_count FROM players GROUP BY country_code
SELECT country_code  FROM players  GROUP BY country_code  ORDER BY COUNT(player_id) DESC  LIMIT 1
SELECT country_code, COUNT(player_id) AS player_count FROM players GROUP BY country_code ORDER BY player_count DESC LIMIT 1
SELECT country_code FROM players GROUP BY country_code HAVING count(player_id) > 50
SELECT country_code  FROM players  GROUP BY country_code  HAVING COUNT(player_id) > 50
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date
SELECT ranking_date, sum(tours) as total_tours FROM rankings GROUP BY ranking_date
SELECT year, COUNT(*)  FROM matches  GROUP BY year
SELECT year, COUNT(*) AS match_count  FROM matches  GROUP BY year
SELECT players.first_name, players.last_name, rankings.ranking FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id ORDER BY players.birth_date DESC LIMIT 3
SELECT matches.winner_name, matches.winner_rank FROM matches ORDER BY matches.winner_age ASC LIMIT 3
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships'   AND winner_id IN (SELECT player_id FROM players WHERE hand = 'L')
SELECT count(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON players.player_id = matches.winner_id GROUP BY players.player_id ORDER BY rankings.ranking_points DESC LIMIT 1
SELECT players.first_name, players.country_code, players.birth_date FROM players WHERE players.player_id = (   SELECT rankings.player_id   FROM rankings   WHERE rankings.ranking_points = (     SELECT MAX(ranking_points)     FROM rankings   ) ) LIMIT 1
SELECT hand, COUNT(*)  FROM players  GROUP BY hand
SELECT hand, COUNT(player_id) FROM players GROUP BY hand
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'
SELECT name, tonnage  FROM ship  ORDER BY name DESC, tonnage ASC
SELECT name, date, result  FROM battle
SELECT MAX(killed) AS max_death_toll, MIN(killed) AS min_death_toll, caused_by_ship_id FROM death GROUP BY caused_by_ship_id
SELECT AVG(injured) AS average_injuries FROM death
SELECT note, killed, injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't'
SELECT name, result FROM battle WHERE bulgarian_commander <> 'Boril'
SELECT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type LIKE '%Brig%'
SELECT id, name FROM battle WHERE id IN (     SELECT caused_by_ship_id     FROM death     GROUP BY caused_by_ship_id     HAVING SUM(killed) > 10 )
SELECT ship.id, ship.name FROM ship JOIN death ON death.caused_by_ship_id = ship.id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1
SELECT DISTINCT name FROM battle WHERE (bulgarian_commander = 'Kaloyan') AND (latin_commander = 'Baldwin I')
SELECT COUNT(DISTINCT result) FROM battle
SELECT count(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225')
SELECT name, date FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name IN ('Lettice', 'HMS Atalanta')
SELECT name, result, bulgarian_commander   FROM battle   WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel')   AND location = 'English Channel';
SELECT note FROM death WHERE note LIKE '%East%'
SELECT addresses.line_1, addresses.line_2 FROM addresses
SELECT line_1, line_2  FROM Addresses
SELECT COUNT(*) FROM Courses
SELECT COUNT(course_id) FROM Courses
SELECT course_description FROM Courses WHERE course_name = 'math'
SELECT course_description FROM Courses WHERE course_name = 'math'
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
SELECT departments.department_name, departments.department_id  FROM departments  JOIN degree_programs ON departments.department_id = degree_programs.department_id  GROUP BY departments.department_name, departments.department_id  ORDER BY COUNT(degree_programs.degree_program_id) DESC  LIMIT 1
SELECT Departments.department_name, Departments.department_id  FROM Departments JOIN Degree_Programs ON Degree_Programs.department_id = Departments.department_id GROUP BY Departments.department_name, Departments.department_id ORDER BY COUNT(Degree_Programs.degree_program_id) DESC LIMIT 1
SELECT count(DISTINCT department_id) FROM Departments
SELECT COUNT(DISTINCT department_id) FROM Departments
SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs
SELECT count(DISTINCT degree_program_id) FROM Degree_Programs
SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering')
SELECT count(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineer')
SELECT sections.section_name, sections.section_description  FROM sections
SELECT Sections.section_name, Sections.section_description FROM Sections
SELECT course_name, course_id  FROM Courses  JOIN Sections ON Courses.course_id = Sections.course_id  GROUP BY Courses.course_name, Courses.course_id  HAVING COUNT(Sections.section_id) <= 2
SELECT Courses.course_name, Courses.course_id  FROM Courses  LEFT JOIN Sections ON Courses.course_id = Sections.course_id  GROUP BY Courses.course_id  HAVING COUNT(Sections.section_id) < 2
SELECT section_name FROM Sections ORDER BY section_name DESC
SELECT section_name FROM Sections ORDER BY section_name DESC
SELECT Semesters.semester_name, Semesters.semester_id  FROM Semesters  JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id  GROUP BY Semesters.semester_id  ORDER BY COUNT(Student_Enrolment.student_id) DESC  LIMIT 1
SELECT Semesters.semester_name, Semesters.semester_id FROM Semesters WHERE Semesters.semester_id IN (   SELECT Student_Enrolment.semester_id   FROM Student_Enrolment   GROUP BY Student_Enrolment.semester_id   HAVING count(*) = (     SELECT max(count(*))     FROM Student_Enrolment     GROUP BY Student_Enrolment.semester_id   ) )
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
SELECT department_description  FROM Departments  WHERE department_name LIKE '%computer%'
SELECT first_name, middle_name, last_name, student_id  FROM Students  WHERE student_id IN (     SELECT se.student_id      FROM Student_Enrolment se      GROUP BY se.student_id      HAVING COUNT(DISTINCT se.degree_program_id) = 2          AND COUNT(DISTINCT se.semester_id) = 1 )
SELECT SELECT first_name, middle_name, last_name, student_id  FROM Students  WHERE student_id IN (     SELECT student_id      FROM Student_Enrolment      GROUP BY student_id      HAVING COUNT(DISTINCT degree_program_id) = 2      AND COUNT(DISTINCT semester_id) = 1 )
SELECT students.first_name, students.middle_name, students.last_name  FROM students  INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id  INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id  WHERE degree_programs.degree_summary_name IN ('Bachelor');
SELECT first_name, middle_name, last_name  FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  WHERE Degree_Programs.degree_summary_name = 'Bachelor'
SELECT Degree_Programs.degree_summary_name  FROM Degree_Programs  JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_summary_name  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT degree_summary_name, COUNT(*) AS enrolment_count FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY enrolment_count DESC LIMIT 1
SELECT degree_program_id, degree_summary_name FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id, T2.degree_summary_name ORDER BY COUNT(T1.student_id) DESC LIMIT 1
SELECT degree_program_id, degree_summary_description FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description ORDER BY COUNT(*) DESC LIMIT 1
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(Student_Enrolment.student_enrolment_id) AS enrollments FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id, Students.first_name, Students.middle_name, Students.last_name ORDER BY enrollments DESC LIMIT 1
SELECT students.first_name, students.middle_name, students.last_name, students.student_id, COUNT(student_enrolment.student_id) AS enrollments_count FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id ORDER BY enrollments_count DESC LIMIT 1
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT DISTINCT semester_id FROM Student_Enrolment)
SELECT semester_name  FROM Semesters  WHERE NOT EXISTS (   SELECT *    FROM Student_Enrolment    WHERE Semesters.semester_id = Student_Enrolment.semester_id )
SELECT DISTINCT course_name  FROM Courses  WHERE course_id IN (SELECT DISTINCT course_id FROM Student_Enrolment_Courses)
SELECT T1.course_name FROM Courses AS T1 WHERE EXISTS (SELECT T2.course_id FROM Student_Enrolment_Courses AS T2 WHERE T1.course_id = T2.course_id)
SELECT course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_name ORDER BY COUNT(Student_Enrolment_Courses.student_enrolment_id) DESC LIMIT 1
SELECT course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT last_name FROM Students  JOIN Addresses ON Students.current_address_id = Addresses.address_id  WHERE Addresses.state_province_county = 'North Carolina'  AND NOT EXISTS (SELECT * FROM Student_Enrolment                  WHERE Student_Enrolment.student_id = Students.student_id                  AND Student_Enrolment.degree_program_id IS NOT NULL)
SELECT last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id LEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id WHERE Addresses.state_province_county = 'North Carolina' AND Students.student_id NOT IN (SELECT student_id FROM Student_Enrolment)
SELECT transcript_date, transcript_id  FROM Transcripts  JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id  JOIN Student_Enrolment_Courses ON Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  GROUP BY transcript_date, transcript_id  HAVING COUNT(DISTINCT Student_Enrolment_Courses.course_id) >= 2
SELECT transcripts.transcript_date, transcripts.transcript_id FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id JOIN student_enrolment_courses ON transcript_contents.student_course_id = student_enrolment_courses.student_course_id GROUP BY transcripts.transcript_date, transcripts.transcript_id HAVING COUNT(DISTINCT student_enrolment_courses.course_id) >= 2
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered LIMIT 1
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered LIMIT 1
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered ASC LIMIT 1
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered LIMIT 1
SELECT DISTINCT first_name FROM Students WHERE permanent_address_id != current_address_id
SELECT students.first_name  FROM students  JOIN addresses ON students.permanent_address_id = addresses.address_id  WHERE students.permanent_address_id <> students.current_address_id;
SELECT addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3  FROM addresses  INNER JOIN students ON addresses.address_id = students.current_address_id  GROUP BY addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3  ORDER BY COUNT(students.student_id) DESC  LIMIT 1
SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses INNER JOIN students ON addresses.address_id = students.current_address_id GROUP BY addresses.address_id, addresses.line_1, addresses.line_2 ORDER BY COUNT(students.student_id) DESC LIMIT 1
SELECT avg(transcript_date) FROM Transcripts
SELECT avg(transcript_date) FROM Transcripts
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
SELECT MIN(transcript_date), other_details FROM Transcripts GROUP BY other_details
SELECT COUNT(DISTINCT transcript_id) FROM Transcripts
SELECT count(*) FROM Transcripts
SELECT MAX(transcript_date) AS last_transcript_release_date FROM Transcripts
SELECT max(transcript_date) AS last_transcript_date FROM Transcripts
SELECT MAX(cnt) as max_enrollment_result, student_course_id FROM (   SELECT COUNT(*) as cnt, student_course_id   FROM Transcript_Contents   GROUP BY student_course_id ) AS T1
SELECT max(course_count), student_course_id FROM (   SELECT count(*) as course_count, student_course_id   FROM Transcript_Contents   JOIN Student_Enrolment_Courses ON Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id   GROUP BY Transcript_Contents.student_course_id ) AS course_counts ORDER BY course_count DESC LIMIT 1;
SELECT transcript_date, transcript_id  FROM Transcripts  GROUP BY transcript_date, transcript_id  ORDER BY COUNT(*) ASC  LIMIT 1
SELECT transcript_date, transcript_id FROM Transcripts JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id GROUP BY transcript_date, transcript_id ORDER BY COUNT(*) ASC LIMIT 1;
SELECT semesters.semester_name   FROM semesters   JOIN student_enrolment ON student_enrolment.semester_id = semesters.semester_id   JOIN student_enrolment_courses ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id   JOIN degree_programs ON degree_programs.degree_program_id = student_enrolment.degree_program_id   WHERE degree_programs.degree_summary_name = 'Bachelor'   AND student_enrolment_courses.course_id IN (        SELECT course_id         FROM student_enrolment_courses         WHERE student_enrolment_id IN (            SELECT student_enrolment_id             FROM student_enrolment             WHERE degree_program_id IN (                SELECT degree_program_id                 FROM degree_programs                 WHERE degree_summary_name = 'Master'            )        )    )  GROUP BY semesters.semester_name
SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (     SELECT degree_program_id FROM Degree_Programs      WHERE degree_summary_name IN ('Master', 'Bachelor')      GROUP BY degree_program_id      HAVING COUNT(DISTINCT degree_summary_name) = 2 )
SELECT count(DISTINCT Students.current_address_id) FROM Students
SELECT address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details FROM Addresses WHERE address_id IN (SELECT permanent_address_id FROM Students WHERE permanent_address_id IS NOT NULL)    OR address_id IN (SELECT current_address_id FROM Students WHERE current_address_id IS NOT NULL)
SELECT Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details FROM Students ORDER BY Students.last_name DESC, Students.first_name DESC, Students.middle_name DESC
SELECT Students.last_name, Students.first_name, Students.middle_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details FROM Students ORDER BY Students.last_name DESC
SELECT * FROM Sections WHERE section_name = 'h'
SELECT section_description FROM Sections WHERE section_name = 'h'
SELECT first_name FROM Students  JOIN Addresses ON Students.permanent_address_id = Addresses.address_id  WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'
SELECT first_name FROM Students  JOIN Addresses ON Students.permanent_address_id = Addresses.address_id  WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'
SELECT cartoon.Title FROM cartoon ORDER BY cartoon.Title ASC
SELECT Title FROM Cartoon ORDER BY Title ASC
SELECT title  FROM Cartoon  WHERE Directed_by = 'Ben Jones'
SELECT title  FROM Cartoon  WHERE Directed_by = 'Ben Jones'
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
SELECT cartoon.Title, cartoon.Directed_by FROM cartoon ORDER BY cartoon.Original_air_date
SELECT cartoon.title, cartoon.directed_by FROM cartoon ORDER BY cartoon.original_air_date
SELECT cartoon.title  FROM cartoon  WHERE cartoon.directed_by = 'Ben Jones' OR cartoon.directed_by = 'Brandon Vietti'
SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti');
SELECT TV_Channel.Country, COUNT(*) AS Num_Channels  FROM TV_Channel  GROUP BY TV_Channel.Country  ORDER BY Num_Channels DESC  LIMIT 1
SELECT TV_Channel.Country, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY Channel_Count DESC LIMIT 1
SELECT count(DISTINCT series_name), count(DISTINCT Content) FROM TV_Channel
SELECT count(DISTINCT series_name), count(DISTINCT Content) FROM TV_Channel
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT Package_Option FROM TV_Channel WHERE TV_Channel.series_name = 'Sky Radio'
SELECT COUNT(DISTINCT id) FROM TV_Channel WHERE language = 'English'
SELECT COUNT(DISTINCT id) FROM TV_Channel WHERE LOWER(Language) = 'english'
SELECT TV_Channel.Language, COUNT(*)  FROM TV_Channel  GROUP BY TV_Channel.Language  HAVING COUNT(*) = (   SELECT MIN(cnt)    FROM (     SELECT COUNT(*) AS cnt      FROM TV_Channel      GROUP BY Language   ) AS T1 )
SELECT language, COUNT(*) AS channel_count FROM TV_Channel GROUP BY language HAVING COUNT(*) = (     SELECT COUNT(*)     FROM TV_Channel     GROUP BY language     ORDER BY COUNT(*) ASC     LIMIT 1 )
SELECT TV_Channel.Language, COUNT(*)  FROM TV_Channel  GROUP BY TV_Channel.Language
SELECT TV_Channel.Language, COUNT(DISTINCT TV_Channel.id) AS channel_count FROM TV_Channel GROUP BY TV_Channel.Language
SELECT series_name FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle!';
SELECT series_name FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle'
SELECT cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio'
SELECT Title FROM Cartoon WHERE Channel = (   SELECT id FROM TV_Channel   WHERE series_name = 'Sky Radio' )
SELECT TV_series.Episode FROM TV_series ORDER BY TV_series.Rating
SELECT TV_series.Episode  FROM TV_series  ORDER BY TV_series.Rating ASC
SELECT tv_series.Episode, tv_series.Rating FROM tv_series ORDER BY tv_series.Rating DESC LIMIT 3
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3
SELECT min(Share), max(Share) FROM TV_series
SELECT MAX(Share), MIN(Share) FROM TV_series
SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'
SELECT Air_Date FROM TV_series WHERE Title = "A Love of a Lifetime"
SELECT weekly_rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'
SELECT Weekly_Rank FROM TV_series WHERE Title = "A Love of a Lifetime"
SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = 'A Love of a Lifetime'
SELECT series_name FROM Cartoon JOIN TV_series ON Cartoon.Channel = TV_series.Channel WHERE TV_series.Episode = "A Love of a Lifetime"
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
SELECT directed_by, COUNT(*)  FROM Cartoon  GROUP BY directed_by
SELECT Cartoon.Directed_by, COUNT(*)  FROM Cartoon  GROUP BY Cartoon.Directed_by
SELECT production_code, TV_Channel.series_name AS channel  FROM Cartoon  JOIN TV_Channel ON Cartoon.channel = TV_Channel.id  ORDER BY Cartoon.original_air_date DESC  LIMIT 1
SELECT production_code, channel  FROM Cartoon  ORDER BY original_air_date DESC  LIMIT 1
SELECT package_option, series_name  FROM TV_Channel  WHERE High_definition_TV = 1
SELECT package_option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'yes'
SELECT TV_Channel.Country  FROM TV_Channel  JOIN Cartoon ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Written_by = 'Todd Casey'
SELECT Country FROM TV_Channel WHERE id IN (   SELECT Channel   FROM Cartoon   WHERE Written_by = 'Todd Casey' )
SELECT DISTINCT Country  FROM TV_Channel  WHERE id NOT IN (   SELECT Channel    FROM Cartoon    WHERE Written_by = 'Todd Casey' )
SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')
SELECT series_name, Country FROM TV_Channel WHERE id IN (     SELECT Channel     FROM Cartoon     WHERE Directed_by IN ('Ben Jones', 'Michael Chang') )
SELECT series_name, country FROM TV_Channel WHERE id IN (     SELECT channel     FROM Cartoon     WHERE directed_by = 'Ben Jones' ) AND id IN (     SELECT channel     FROM Cartoon     WHERE directed_by = 'Michael Chang' )
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country  FROM TV_Channel  WHERE LOWER(TV_Channel.Language) <> 'english'
SELECT pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE LOWER(Language) NOT LIKE '%english%'
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.Country HAVING COUNT(*) > 2
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.id HAVING COUNT(*) > 2
SELECT tv_channel.id FROM tv_channel LEFT JOIN cartoon ON cartoon.channel = tv_channel.id  WHERE cartoon.directed_by <> 'Ben Jones' OR cartoon.directed_by IS NULL
SELECT TV_Channel.id FROM TV_Channel LEFT JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by <> 'Ben Jones' OR Cartoon.Directed_by IS NULL
SELECT tv_channel.package_option FROM tv_channel WHERE tv_channel.id NOT IN (     SELECT cartoon.channel     FROM cartoon     WHERE cartoon.directed_by = 'Ben Jones' )
SELECT package_option FROM tv_channel WHERE id NOT IN (    SELECT channel    FROM cartoon    WHERE directed_by = 'Ben Jones' )
SELECT count(*) FROM poker_player
SELECT COUNT(Poker_Player_ID) FROM poker_player
SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC
SELECT poker_player.Earnings  FROM poker_player  ORDER BY poker_player.Earnings DESC
SELECT final_table_made, best_finish FROM poker_player
SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player
SELECT AVG(Earnings) FROM poker_player
SELECT avg(Earnings) FROM poker_player
SELECT poker_player.money_rank  FROM poker_player  INNER JOIN people ON poker_player.People_ID = people.People_ID  ORDER BY poker_player.earnings DESC  LIMIT 1
SELECT poker_player.money_rank  FROM poker_player  ORDER BY poker_player.earnings DESC  LIMIT 1
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000
SELECT MAX(final_table_made)  FROM poker_player  WHERE earnings < 200000
SELECT people.Name FROM people
SELECT people.Name FROM people
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000
SELECT people.Name  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Final_Table_Made ASC
SELECT people.Name  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  GROUP BY people.People_ID  ORDER BY COUNT(poker_player.Final_Table_Made) ASC
SELECT people.Birth_Date  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Earnings ASC  LIMIT 1
SELECT birth_date  FROM poker_player  JOIN people ON poker_player.people_id = people.people_id  ORDER BY earnings ASC  LIMIT 1
SELECT poker_player.Money_Rank  FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height = (SELECT MAX(Height) FROM people)
SELECT poker_player.money_rank  FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.height = (SELECT MAX(height) FROM people)
SELECT avg(poker_player.Earnings)  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  WHERE people.Height > 200
SELECT avg(poker_player.Earnings) AS average_earnings FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200;
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC
SELECT nationality, COUNT(*) AS count FROM people GROUP BY nationality
SELECT COUNT(*) AS count, nationality  FROM people  GROUP BY nationality
SELECT nationality, COUNT(nationality) AS count  FROM people  GROUP BY nationality  ORDER BY count DESC  LIMIT 1
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
SELECT nationality FROM people GROUP BY nationality HAVING COUNT(DISTINCT People_ID) > 1
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2
SELECT name, birth_date FROM people ORDER BY name ASC
SELECT name, birth_date FROM people ORDER BY name ASC
SELECT name FROM people WHERE Nationality != 'Russia'
SELECT name FROM people WHERE nationality <> 'Russia'
SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player)
SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player)
SELECT count(DISTINCT Nationality) FROM people
SELECT COUNT(DISTINCT Nationality) FROM people
SELECT count(DISTINCT state)  FROM AREA_CODE_STATE
SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC
SELECT vote_id, phone_number, state FROM VOTES
SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM area_code_state
SELECT max(created) AS last_date_created FROM VOTES WHERE state = 'CA'
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name <> 'Jessie Alloway'
SELECT DISTINCT state, created FROM VOTES
SELECT contestant_number, contestant_name FROM contestants GROUP BY contestant_number, contestant_name HAVING COUNT(*) >= 2
SELECT contestant_number, contestant_name  FROM contestants  JOIN votes ON contestants.contestant_number = votes.contestant_number  GROUP BY contestants.contestant_number, contestants.contestant_name  ORDER BY COUNT(*) ASC  LIMIT 1
SELECT count(*) FROM VOTES WHERE state IN ('NY', 'CA')
SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)
SELECT area_code_state.area_code FROM votes JOIN area_code_state ON votes.state = area_code_state.state GROUP BY area_code_state.area_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT created, state, phone_number FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling'
SELECT area_code FROM AREA_CODE_STATE JOIN VOTES ON AREA_CODE_STATE.state = VOTES.state JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name IN ('Tabatha Gehling', 'Kelly Clauss') GROUP BY AREA_CODE_STATE.area_code HAVING COUNT(DISTINCT VOTES.contestant_number) = 2
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'
SELECT name FROM country WHERE IndepYear > 1950
SELECT name FROM country WHERE IndepYear > 1950
SELECT count(DISTINCT T1.Code)   FROM country AS T1   WHERE T1.GovernmentForm LIKE '%Republic%'
SELECT COUNT(DISTINCT Code) FROM country WHERE governmentform LIKE '%Republic%'
SELECT SUM(SurfaceArea)  FROM country  WHERE region = 'Caribbean'
SELECT sum(SurfaceArea) FROM country WHERE Continent = 'Caribbean'
SELECT continent FROM country WHERE name = 'Anguilla'
SELECT continent FROM country WHERE Name = 'Anguilla'
SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul'
SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul'
SELECT language FROM countrylanguage WHERE CountryCode = (     SELECT Code     FROM country     WHERE Name = 'Aruba' ) ORDER BY Percentage DESC LIMIT 1
SELECT countrylanguage.Language FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  WHERE country.Name = 'Aruba' AND countrylanguage.IsOfficial = 1
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'
SELECT Population, LifeExpectancy  FROM country  WHERE Name = 'Brazil'
SELECT region, population FROM country WHERE name = 'Angola'
SELECT Region, Population FROM country WHERE Name = 'Angola'
SELECT AVG(LifeExpectancy) FROM country WHERE region = 'Central Africa';
SELECT avg(LifeExpectancy) FROM country WHERE region = 'Central Africa'
SELECT name FROM country WHERE continent = 'Asia' AND lifeexpectancy = (SELECT MIN(lifeexpectancy) FROM country WHERE continent = 'Asia' AND lifeexpectancy IS NOT NULL) ORDER BY lifeexpectancy ASC LIMIT 1
SELECT country.Name  FROM country  WHERE continent = 'Asia'  ORDER BY LifeExpectancy  LIMIT 1
SELECT sum(Population) AS total_population, max(GNP) AS maximum_GNP   FROM country   WHERE Continent = 'Asia'
SELECT sum(population) AS total_population, max(gnp) AS largest_gnp FROM country WHERE continent = 'Asia'
SELECT AVG(LifeExpectancy) FROM country WHERE GovernmentForm IN ('Republic') AND Continent = 'Africa'
SELECT avg(LifeExpectancy) FROM country WHERE GovernmentForm LIKE '%Republic%' AND Continent = 'Africa'
SELECT sum(SurfaceArea) AS TotalSurfaceArea FROM country WHERE continent IN ('Asia', 'Europe')
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE continent IN ('Asia', 'Europe')
SELECT sum(Population) FROM city WHERE District = 'Gelderland'
SELECT SUM(city.Population) FROM city WHERE city.District = 'Gelderland'
SELECT AVG(GNP), SUM(Population) FROM country WHERE GovernmentForm LIKE '%US Territory%'
SELECT AVG(GNP), SUM(Population)   FROM country   WHERE GovernmentForm = 'US Territory'   AND Continent = 'North America'
SELECT COUNT(DISTINCT Language) AS UniqueLanguages FROM countrylanguage
SELECT count(DISTINCT Language) AS LanguageCount  FROM countrylanguage
SELECT COUNT(DISTINCT GovernmentForm) AS NumGovernments FROM country WHERE Continent = 'Africa'
SELECT COUNT(DISTINCT GovernmentForm)   FROM country   WHERE continent = 'Africa'
SELECT count(DISTINCT Language) AS TotalLanguages FROM countrylanguage WHERE CountryCode = 'ABW'
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW'
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'
SELECT country.Name FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY country.Name ORDER BY COUNT(DISTINCT countrylanguage.Language) DESC LIMIT 1
SELECT name FROM country WHERE code = (   SELECT countrycode   FROM countrylanguage   GROUP BY countrycode   HAVING COUNT(DISTINCT language) = (     SELECT MAX(lang_count)     FROM (       SELECT COUNT(DISTINCT language) AS lang_count       FROM countrylanguage       GROUP BY countrycode     ) AS counts   ) )
SELECT continent FROM countrylanguage GROUP BY continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1
SELECT continent FROM countrylanguage GROUP BY continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1
SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language IN ('Dutch', 'English') GROUP BY CountryCode HAVING COUNT(DISTINCT Language) = 2
SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language IN ('Dutch', 'English')
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T1.Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'French')
SELECT DISTINCT T1.Name   FROM country AS T1   JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode   WHERE T2.Language IN ('English', 'French')   GROUP BY T1.Name   HAVING COUNT(DISTINCT T2.Language) = 2
SELECT DISTINCT country.name  FROM countrylanguage  JOIN country ON countrylanguage.countrycode = country.code  WHERE countrylanguage.language IN ('English', 'French')  AND countrylanguage.isofficial = 'T'  GROUP BY country.name  HAVING COUNT(DISTINCT countrylanguage.language) = 2
SELECT DISTINCT country.Name   FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code   WHERE countrylanguage.Language IN ('English', 'French')   AND countrylanguage.IsOfficial = 'T'   GROUP BY country.Name   HAVING COUNT(DISTINCT countrylanguage.Language) = 2
SELECT COUNT(DISTINCT country.Continent) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
SELECT COUNT(DISTINCT continent) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE language = 'Chinese'
SELECT region FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language IN ('English', 'Dutch'))
SELECT DISTINCT Region FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language IN ('Dutch', 'English'))
SELECT DISTINCT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.IsOfficial = 1   AND countrylanguage.Language IN ('Dutch', 'English')
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch') AND countrylanguage.IsOfficial = 1
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY countrylanguage.Language ORDER BY SUM(countrylanguage.Percentage) DESC LIMIT 1
SELECT language  FROM countrylanguage  WHERE CountryCode IN (      SELECT Code      FROM country      WHERE Continent = 'Asia'  )  GROUP BY language  HAVING COUNT(DISTINCT CountryCode) = (   SELECT MAX(language_count)      FROM (     SELECT COUNT(DISTINCT CountryCode) AS language_count        FROM countrylanguage        WHERE CountryCode IN (            SELECT Code              FROM country              WHERE Continent = 'Asia'          )          GROUP BY language      ) ) ORDER BY language_count DESC LIMIT 1
SELECT countrylanguage.Language  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  WHERE country.GovernmentForm = 'Republic'  GROUP BY countrylanguage.Language  HAVING COUNT(DISTINCT countrylanguage.CountryCode) = 1
SELECT language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.GovernmentForm = 'Republic' GROUP BY language HAVING COUNT(DISTINCT country.Code) = 1
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1
SELECT city.name  FROM city  JOIN country ON city.countrycode = country.code JOIN countrylanguage ON countrylanguage.countrycode = country.code WHERE countrylanguage.language = 'English'  ORDER BY city.population DESC  LIMIT 1
SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' AND surfacearea = (     SELECT MAX(surfacearea)     FROM country     WHERE continent = 'Asia' ) ORDER BY population DESC LIMIT 1
SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' AND surfacearea = (SELECT MAX(surfacearea) FROM country WHERE continent = 'Asia') ORDER BY population DESC LIMIT 1
SELECT avg(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language <> 'English' AND IsOfficial = 'T')
SELECT avg(LifeExpectancy) FROM country WHERE Code NOT IN (    SELECT CountryCode FROM countrylanguage WHERE Language <> 'English' AND IsOfficial = 'T' )
SELECT sum(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language != 'English')
SELECT SUM(Population) AS total_population FROM country WHERE Code NOT IN (     SELECT CountryCode     FROM countrylanguage     WHERE Language = 'English' );
SELECT language FROM countrylanguage WHERE CountryCode = (   SELECT Code   FROM country   WHERE HeadOfState = 'Beatrix' ) AND IsOfficial = 'T'
SELECT countrylanguage.Language  FROM countrylanguage  INNER JOIN country ON countrylanguage.CountryCode = country.Code  WHERE countrylanguage.IsOfficial = 'T'  AND country.HeadOfState = 'Beatrix'
SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.IndepYear < 1930 AND countrylanguage.IsOfficial = 'T'
SELECT COUNT(DISTINCT countrylanguage.Language) AS TotalDistinctLanguages FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.IndepYear < 1930
SELECT DISTINCT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')
SELECT name FROM country WHERE surfacearea > (   SELECT MAX(surfacearea)   FROM country   WHERE continent = 'Europe' )
SELECT country.Name  FROM country  WHERE country.Continent = 'Africa'  AND country.Population < (SELECT MIN(country.Population) FROM country WHERE country.Continent = 'Asia')
SELECT name  FROM country  WHERE continent = 'Africa'  AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')
SELECT country.Name FROM country WHERE continent = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE continent = 'Africa')
SELECT country.Name FROM country WHERE continent = 'Asia' AND population > (SELECT MAX(population) FROM country WHERE continent = 'Africa')
SELECT code FROM country WHERE code NOT IN (SELECT CountryCode FROM countrylanguage WHERE UPPER(Language) = 'ENGLISH')
SELECT code FROM country WHERE code NOT IN (    SELECT CountryCode    FROM countrylanguage    WHERE Language = 'English' )
SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language <> 'English'
SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language NOT IN ('English')
SELECT country.Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language NOT IN ('English') AND country.GovernmentForm NOT LIKE '%Republic%'
SELECT code FROM country WHERE governmentform <> 'Republic' AND code NOT IN (   SELECT countrycode FROM countrylanguage WHERE LOWER(language) = 'english' )
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language <> 'English'
SELECT name FROM city WHERE countrycode IN (    SELECT code FROM country WHERE continent = 'Europe'    AND code NOT IN (       SELECT countrycode FROM countrylanguage WHERE language != 'English'       AND isofficial = 'T'    ) )
SELECT DISTINCT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.Continent = 'Asia'  AND countrylanguage.Language = 'Chinese'
SELECT DISTINCT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.Continent = 'Asia'  AND countrylanguage.Language = 'Chinese'  AND countrylanguage.IsOfficial = 'T'
SELECT name, indepyear, surfacearea FROM country WHERE population = (     SELECT min(population)     FROM country )
SELECT name, indepyear, surfacearea  FROM country  WHERE population = (SELECT min(population) FROM country)
SELECT country.Population, country.Name, country.HeadOfState  FROM country  ORDER BY country.SurfaceArea DESC  LIMIT 1
SELECT name, population, headofstate FROM country ORDER BY SurfaceArea DESC LIMIT 1
SELECT country.name, COUNT(DISTINCT countrylanguage.language)  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  GROUP BY country.code, country.name  HAVING COUNT(DISTINCT countrylanguage.language) >= 3
SELECT country.Name, COUNT(DISTINCT countrylanguage.Language) AS LanguageCount FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(DISTINCT countrylanguage.Language) > 2
SELECT district, count(DISTINCT ID) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY district
SELECT district, COUNT(*)  FROM city  WHERE population > (SELECT AVG(population) FROM city)  GROUP BY district
SELECT governmentform, SUM(population)  FROM country  GROUP BY governmentform  HAVING AVG(lifeexpectancy) > 72;
SELECT governmentform, SUM(population)  FROM country  WHERE lifeexpectancy > 72  GROUP BY governmentform
SELECT AVG(LifeExpectancy), SUM(Population), Continent FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72
SELECT country.Continent, SUM(country.Population), AVG(country.LifeExpectancy)  FROM country  GROUP BY country.Continent  HAVING AVG(country.LifeExpectancy) < 72
SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.SurfaceArea DESC LIMIT 5
SELECT name, surfacearea  FROM country  ORDER BY surfacearea DESC  LIMIT 5
SELECT name  FROM country  ORDER BY Population DESC  LIMIT 3
SELECT name FROM country ORDER BY Population DESC LIMIT 3
SELECT name FROM country ORDER BY population ASC LIMIT 3
SELECT country.Name FROM country ORDER BY country.Population ASC LIMIT 3
SELECT COUNT(DISTINCT Code) FROM country WHERE continent = 'Asia'
SELECT count(*) FROM country WHERE continent = 'Asia'
SELECT country.Name  FROM country  WHERE country.Continent = 'Europe'  AND country.Population = 80000
SELECT name FROM country WHERE continent = 'Europe' AND population = 80000
SELECT sum(population) AS total_population, avg(surfacearea) AS average_area   FROM country   WHERE continent = 'North America'    AND surfacearea > 3000 GROUP BY continent
SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageSurfaceArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;
SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000
SELECT city.Name  FROM city  WHERE city.Population BETWEEN 160000 AND 900000
SELECT countrylanguage.Language  FROM countrylanguage  GROUP BY countrylanguage.Language  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1
SELECT countrylanguage.Language FROM countrylanguage JOIN (     SELECT CountryCode, MAX(Percentage) AS MaxPercentage     FROM countrylanguage     GROUP BY CountryCode ) AS max_lang ON countrylanguage.CountryCode = max_lang.CountryCode AND countrylanguage.Percentage = max_lang.MaxPercentage
SELECT country.Code, countrylanguage.Language FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Percentage = (     SELECT MAX(Percentage) FROM countrylanguage ) GROUP BY countrylanguage.Language
SELECT COUNT(DISTINCT T1.CountryCode)  FROM countrylanguage AS T1  WHERE T1.Language = 'Spanish'  AND T1.Percentage = (    SELECT MAX(Percentage)     FROM countrylanguage     WHERE Language = 'Spanish' )
SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage > 50;
SELECT countrycode  FROM countrylanguage   WHERE language = 'Spanish'   GROUP BY countrycode   HAVING percentage = (     SELECT MAX(percentage)      FROM countrylanguage      WHERE language = 'Spanish' )
SELECT country.Code  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  WHERE countrylanguage.Language = 'Spanish'  AND countrylanguage.Percentage > 50;
SELECT count(*) FROM conductor
SELECT COUNT(Conductor_ID) FROM conductor
SELECT conductor.Name FROM conductor ORDER BY conductor.Age ASC
SELECT name FROM conductor ORDER BY age ASC
SELECT name FROM conductor WHERE nationality <> 'USA'
SELECT name FROM conductor WHERE nationality <> 'USA'
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY Year_of_Founded DESC
SELECT record_company  FROM orchestra  ORDER BY year_of_founded DESC
SELECT avg(Attendance) FROM show
SELECT avg(Attendance) FROM show
SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM performance WHERE Type <> 'Live final';
SELECT MAX(Share), MIN(Share) FROM performance WHERE Type <> 'Live final'
SELECT COUNT(DISTINCT Nationality) FROM conductor
SELECT count(DISTINCT Nationality) FROM conductor
SELECT name FROM conductor ORDER BY Year_of_Work DESC
SELECT c.Name FROM conductor c ORDER BY c.Year_of_Work DESC
SELECT name  FROM conductor  ORDER BY Year_of_Work DESC  LIMIT 1
SELECT conductor.Name FROM conductor GROUP BY conductor.Name ORDER BY COUNT(conductor.Year_of_Work) DESC LIMIT 1
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID
SELECT conductor.name FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.name HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name ORDER BY COUNT(orchestra.Orchestra_ID) DESC LIMIT 1
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name ORDER BY COUNT(DISTINCT orchestra.Orchestra_ID) DESC LIMIT 1
SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008
SELECT T1.Name  FROM conductor AS T1  JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  WHERE T2.Year_of_Founded > 2008
SELECT record_company, COUNT(DISTINCT orchestra_id) FROM orchestra GROUP BY record_company
SELECT COUNT(DISTINCT orchestra.Orchestra_ID) AS orchestra_count, orchestra.Record_Company FROM orchestra GROUP BY orchestra.Record_Company
SELECT major_record_format, COUNT(*) AS format_count FROM orchestra GROUP BY major_record_format ORDER BY format_count ASC;
SELECT major_record_format, COUNT(major_record_format)  FROM orchestra  GROUP BY major_record_format  ORDER BY COUNT(major_record_format) DESC
SELECT record_company, COUNT(orchestra_id) AS orchestra_count FROM orchestra GROUP BY record_company ORDER BY orchestra_count DESC LIMIT 1
SELECT record_company, COUNT(*) AS orchestra_count FROM orchestra GROUP BY record_company ORDER BY orchestra_count DESC LIMIT 1
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
SELECT orchestra.Orchestra FROM orchestra WHERE orchestra.Orchestra_ID NOT IN (     SELECT performance.Orchestra_ID     FROM performance )
SELECT DISTINCT record_company  FROM orchestra  WHERE year_of_founded < 2003 OR year_of_founded > 2003
SELECT record_company FROM orchestra WHERE year_of_founded < 2003   AND record_company IN (     SELECT record_company     FROM orchestra     WHERE year_of_founded > 2003   )
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')
SELECT DISTINCT year_of_founded FROM orchestra  GROUP BY year_of_founded  HAVING COUNT(*) > 1
SELECT year_of_founded FROM orchestra GROUP BY year_of_founded HAVING COUNT(*) > 1
SELECT COUNT(ID) FROM Highschooler
SELECT count(DISTINCT ID) FROM Highschooler
SELECT name, grade FROM Highschooler
SELECT Highschooler.name, Highschooler.grade FROM Highschooler
SELECT grade  FROM Highschooler
SELECT grade FROM Highschooler
SELECT grade FROM Highschooler WHERE name = 'Kyle'
SELECT grade FROM Highschooler WHERE name = 'Kyle'
SELECT Highschooler.name FROM Highschooler WHERE grade = 10
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10
SELECT ID FROM Highschooler WHERE name = 'Kyle'
SELECT Highschooler.ID FROM Highschooler WHERE name = 'Kyle'
SELECT COUNT(DISTINCT ID) FROM Highschooler WHERE grade = 9 OR grade = 10
SELECT COUNT(ID) FROM Highschooler WHERE grade = 9 OR grade = 10
SELECT grade, COUNT(*)  FROM Highschooler  GROUP BY grade
SELECT grade, COUNT(*)  FROM Highschooler  GROUP BY grade
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1
SELECT grade, COUNT(*) AS num_highschoolers FROM Highschooler GROUP BY grade ORDER BY num_highschoolers DESC LIMIT 1
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(DISTINCT ID) >= 4
SELECT Highschooler.ID, count(friend_id) FROM Friend GROUP BY Highschooler.ID
SELECT T1.ID, COUNT(T2.friend_id) AS friend_count FROM Highschooler AS T1 LEFT JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID
SELECT highschooler.name, COUNT(friend.friend_id)  FROM highschooler  JOIN friend ON highschooler.id = friend.student_id  GROUP BY highschooler.name
SELECT T1.name, COUNT(T2.friend_id) AS friend_count FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.name
SELECT Highschooler.name  FROM Highschooler  JOIN Friend ON Friend.student_id = Highschooler.ID  GROUP BY Highschooler.name  ORDER BY COUNT(Friend.friend_id) DESC  LIMIT 1
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Friend.student_id = Highschooler.ID GROUP BY Highschooler.ID, Highschooler.name ORDER BY COUNT(Friend.friend_id) DESC LIMIT 1
SELECT T1.name  FROM Highschooler AS T1  JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.name  HAVING COUNT(T2.friend_id) >= 3
SELECT DISTINCT T1.name  FROM Highschooler AS T1  JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.ID  HAVING COUNT(T2.friend_id) >= 3
SELECT highschooler.name FROM highschooler JOIN friend ON highschooler.ID = friend.student_id JOIN highschooler AS kyle ON friend.friend_id = kyle.ID WHERE kyle.name = 'Kyle';
SELECT T2.name  FROM Highschooler AS T1  JOIN Friend AS T2 ON T1.ID = T2.student_id  JOIN Highschooler AS T3 ON T3.ID = T2.friend_id  WHERE T1.name = 'Kyle';
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT Friend.student_id FROM Friend)
SELECT Highschooler.ID  FROM Highschooler  WHERE NOT EXISTS (     SELECT Friend.student_id      FROM Friend      WHERE Highschooler.ID = Friend.student_id )
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT Friend.student_id FROM Friend)
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT T1.ID  FROM Highschooler AS T1  JOIN Friend AS F ON T1.ID = F.student_id  JOIN Likes AS L ON T1.ID = L.student_id  WHERE T1.ID <> L.liked_id
SELECT DISTINCT student_id  FROM Friend  WHERE student_id IN (     SELECT student_id      FROM Likes      INNER JOIN Highschooler ON Likes.student_id = Highschooler.ID      WHERE Likes.liked_id = Highschooler.ID ) AND student_id IN (     SELECT student_id      FROM Friend  )
SELECT name FROM Highschooler WHERE EXISTS (SELECT * FROM Friend               WHERE Highschooler.ID = Friend.student_id               AND EXISTS (SELECT * FROM Likes                           WHERE Highschooler.ID = Likes.liked_id))
SELECT DISTINCT name  FROM Highschooler  WHERE ID IN (   SELECT student_id    FROM Friend    WHERE student_id IN (SELECT ID FROM Highschooler)      AND friend_id IN (SELECT ID FROM Highschooler) )  AND ID IN (   SELECT student_id    FROM Likes    WHERE student_id IN (SELECT ID FROM Highschooler)      AND liked_id IN (SELECT ID FROM Highschooler) )
SELECT count(*) AS like_count, student_id FROM Likes GROUP BY student_id
SELECT student_id, COUNT(*) AS num_likes FROM Likes GROUP BY student_id
SELECT highschooler.name, COUNT(likes.liked_id) AS number_of_likes FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name;
SELECT highschooler.name, count(likes.*) AS num_likes FROM highschooler INNER JOIN likes ON highschooler.ID = likes.student_id GROUP BY highschooler.name;
SELECT Highschooler.name  FROM Highschooler  JOIN Likes ON Highschooler.ID = Likes.student_id  GROUP BY Highschooler.ID  ORDER BY COUNT(Likes.liked_id) DESC  LIMIT 1
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1
SELECT highschooler.name  FROM highschooler  JOIN likes  ON highschooler.ID = likes.student_id  GROUP BY highschooler.ID  HAVING COUNT(*) >= 2
SELECT The given SQLite SQL query has a couple of issues. Here's the fixed version:  ```sql SELECT DISTINCT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name HAVING COUNT(T2.liked_id) >= 2; ```  Explanation of changes made:  1) The table names in the query were not capitalized correctly. The correct table names are "Highschooler" and "Likes" (with capital letters at the beginning).  2) The JOIN condition was using the wrong column for the join. It should use `T1.ID = T2.student_id` instead of `T1.id = T2.student_id`.  3) The count function was using the wrong column for counting. It should use `COUNT(T2.liked_id)` instead of `COUNT(T1.id)`.  With these fixes, the SQL query will correctly return the names of students who have 2 or more likes.
SELECT name FROM Highschooler WHERE grade > 5 AND ID IN (SELECT student_id FROM Friend            GROUP BY student_id            HAVING COUNT(*) >= 2)
SELECT T1.name  FROM Highschooler AS T1  JOIN Friend AS F ON T1.ID = F.student_id  WHERE T1.grade > 5  GROUP BY T1.name  HAVING COUNT(F.friend_id) >= 2
SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT avg(grade)  FROM Highschooler  WHERE ID IN (SELECT student_id FROM Friend)
SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)
SELECT MIN(grade)  FROM Highschooler  WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT DISTINCT state FROM Owners WHERE state IN (SELECT state FROM Professionals)
SELECT state FROM owners WHERE state IN (SELECT state FROM professionals)
SELECT AVG(dogs.age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id
SELECT AVG(age) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
SELECT professional_id, last_name, cell_number  FROM Professionals  WHERE state = 'Indiana'  OR professional_id IN (     SELECT professional_id      FROM Treatments      GROUP BY professional_id      HAVING COUNT(*) > 2 )
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)
SELECT dogs.name FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.cost_of_treatment <= 1000 GROUP BY dogs.name
SELECT DISTINCT d.name FROM Dogs d LEFT JOIN Treatments t ON d.dog_id = t.dog_id WHERE d.owner_id NOT IN (   SELECT dog_id   FROM Treatments   WHERE cost_of_treatment > 1000 )
SELECT professionals.first_name  FROM professionals  WHERE professionals.first_name NOT IN      (SELECT name FROM dogs      UNION      SELECT first_name FROM owners)
SELECT first_name FROM owners WHERE first_name NOT IN (SELECT name FROM dogs) UNION SELECT first_name FROM professionals WHERE first_name NOT IN (SELECT name FROM dogs)
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (   SELECT professional_id   FROM Treatments )
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners WHERE Owners.owner_id = (     SELECT Dogs.owner_id     FROM Dogs     GROUP BY Dogs.owner_id     ORDER BY COUNT(*) DESC     LIMIT 1 )
SELECT professional_id, role_code, first_name FROM Professionals GROUP BY professional_id, role_code, first_name HAVING COUNT(*) >= 2
SELECT professional_id, role_code, first_name FROM Professionals GROUP BY professional_id, role_code, first_name HAVING COUNT(*) >= 2
SELECT breed_name  FROM Breeds  GROUP BY breed_name  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT breed_name, COUNT(*) AS dog_count FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code GROUP BY breed_name ORDER BY dog_count DESC LIMIT 1
SELECT owners.owner_id, owners.last_name FROM owners WHERE owners.owner_id = (     SELECT dogs.owner_id     FROM dogs     JOIN treatments ON dogs.dog_id = treatments.dog_id     GROUP BY dogs.owner_id     ORDER BY COUNT(treatments.treatment_id) DESC     LIMIT 1 )
SELECT owners.owner_id, owners.last_name  FROM owners  WHERE owners.owner_id = (     SELECT treatments.owner_id      FROM treatments      GROUP BY treatments.owner_id      ORDER BY SUM(treatments.cost_of_treatment) DESC      LIMIT 1 )
SELECT Treatment_Types.treatment_type_description FROM Treatment_Types WHERE Treatment_Types.treatment_type_code = (   SELECT treatment_type_code   FROM Treatments   GROUP BY treatment_type_code   HAVING SUM(cost_of_treatment) = (     SELECT MIN(sum_cost)     FROM (       SELECT treatment_type_code, SUM(cost_of_treatment) AS sum_cost       FROM Treatments       GROUP BY treatment_type_code     ) AS temp   ) )
SELECT treatment_type_description FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code, T2.treatment_type_description ORDER BY SUM(T1.cost_of_treatment) LIMIT 1
SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN charges ON dogs.dog_id = charges.dog_id GROUP BY owners.owner_id, owners.zip_code ORDER BY SUM(charges.charge_amount) DESC LIMIT 1
SELECT owners.owner_id, owners.zip_code FROM owners WHERE owners.owner_id = (     SELECT dogs.owner_id     FROM treatments     JOIN dogs ON treatments.dog_id = dogs.dog_id     GROUP BY dogs.owner_id     ORDER BY SUM(treatments.cost_of_treatment) DESC     LIMIT 1 )
SELECT professional_id, cell_number  FROM Professionals  WHERE professional_id IN (     SELECT professional_id      FROM Treatments      GROUP BY professional_id      HAVING COUNT(DISTINCT treatment_type_code) >= 2 )
SELECT professional_id, cell_number FROM Professionals GROUP BY professional_id, cell_number HAVING COUNT(DISTINCT treatment_type_code) > 1
SELECT Professionals.first_name, Professionals.last_name FROM Professionals WHERE Professionals.professional_id IN (   SELECT Treatments.professional_id   FROM Treatments   WHERE Treatments.cost_of_treatment < (     SELECT AVG(Treatments.cost_of_treatment)     FROM Treatments   ) )
SELECT first_name, last_name FROM Professionals WHERE professional_id IN (     SELECT professional_id     FROM Treatments     WHERE cost_of_treatment < (         SELECT AVG(cost_of_treatment)         FROM Treatments     ) )
SELECT date_of_treatment, first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id
SELECT treatments.date_of_treatment, professionals.first_name  FROM treatments  JOIN professionals ON treatments.professional_id = professionals.professional_id
SELECT cost_of_treatment, treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description  FROM treatments  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code
SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code
SELECT owners.first_name, dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id
SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id JOIN breeds ON dogs.breed_code = breeds.breed_code WHERE breeds.breed_code = (     SELECT breed_code     FROM breeds     GROUP BY breed_code     ORDER BY COUNT(*) ASC     LIMIT 1 )
SELECT T1.name, T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = (SELECT breed_code FROM Breeds ORDER BY breed_code ASC LIMIT 1)
SELECT owners.first_name, dogs.name   FROM owners   JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.state = 'Virginia'
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.state = 'Virginia'
SELECT date_arrived, date_departed  FROM Dogs  WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT dogs.date_arrived, dogs.date_departed  FROM dogs  JOIN treatments ON dogs.dog_id = treatments.dog_id
SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id ORDER BY dogs.age ASC LIMIT 1
SELECT last_name  FROM owners  WHERE owner_id = (     SELECT owner_id      FROM dogs      WHERE age = (         SELECT MIN(age)          FROM dogs     ) )
SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'
SELECT DISTINCT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin')
SELECT date_arrived, date_departed FROM Dogs
SELECT date_arrived, date_departed FROM Dogs
SELECT COUNT(DISTINCT dog_id) FROM Treatments
SELECT COUNT(dog_id) FROM Dogs
SELECT COUNT(DISTINCT professional_id) FROM Professionals
SELECT count(DISTINCT professional_id) FROM Treatments
SELECT role_code, street, city, state  FROM Professionals  WHERE city LIKE '%West%'
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(dog_id) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT MAX(cost_of_treatment) FROM Treatments
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
SELECT count(DISTINCT dog_id) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT COUNT(DISTINCT dog_id) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT COUNT(DISTINCT T1.owner_id)  FROM Owners AS T1  LEFT JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  WHERE T2.owner_id IS NULL
SELECT count(DISTINCT owner_id) FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs)
SELECT count(DISTINCT T1.professional_id)  FROM professionals AS T1  LEFT JOIN treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.professional_id IS NULL
SELECT count(DISTINCT T1.professional_id)  FROM Professionals AS T1  LEFT JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id  WHERE T2.professional_id IS NULL
SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1
SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1;
SELECT AVG(age) FROM Dogs
SELECT AVG(age) FROM Dogs
SELECT MAX(age) FROM Dogs
SELECT MAX(age) AS oldest_dog_age FROM Dogs
SELECT charge_type, charge_amount FROM Charges
SELECT charge_type, charge_amount  FROM Charges
SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1
SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1
SELECT email_address, cell_number, home_phone FROM Professionals
SELECT email_address, cell_number, home_phone  FROM Professionals
SELECT breed_name, size_description FROM Breeds, Sizes
SELECT DISTINCT breed_code, size_code FROM Dogs
SELECT professionals.first_name, treatment_types.treatment_type_description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;
SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;
SELECT count(*) FROM singer
SELECT COUNT(*) FROM singer
SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions ASC
SELECT name FROM singer ORDER BY Net_Worth_Millions ASC
SELECT birth_year, citizenship FROM singer
SELECT Birth_Year, Citizenship FROM singer
SELECT name FROM singer WHERE citizenship != 'France'
SELECT name FROM singer WHERE citizenship <> 'France'
SELECT name FROM singer WHERE birth_year IN (1948, 1949)
SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949
SELECT name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
SELECT name  FROM singer  ORDER BY Net_Worth_Millions DESC  LIMIT 1
SELECT citizenship, COUNT(DISTINCT singer_id) AS singer_count  FROM singer  GROUP BY citizenship
SELECT citizenship, COUNT(DISTINCT Singer_ID) FROM singer GROUP BY citizenship
SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1
SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1
SELECT citizenship, MAX(net_worth_millions) AS max_net_worth FROM singer GROUP BY citizenship
SELECT citizenship, MAX(net_worth_millions) AS max_net_worth FROM singer GROUP BY citizenship
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID
SELECT title, name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID
SELECT name  FROM singer  JOIN song ON singer.Singer_ID = song.Singer_ID  WHERE Sales > 300000;
SELECT name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000
SELECT name FROM singer WHERE Singer_ID IN (     SELECT Singer_ID     FROM song     GROUP BY Singer_ID     HAVING COUNT(*) > 1 )
SELECT name FROM singer WHERE Singer_ID IN (     SELECT Singer_ID     FROM song     GROUP BY Singer_ID     HAVING COUNT(*) > 1 )
SELECT singer.Name, SUM(song.Sales) AS total_sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name
SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name
SELECT name FROM singer WHERE singer.Singer_ID NOT IN (SELECT singer.Singer_ID FROM song)
SELECT singer.Name FROM singer LEFT JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Singer_ID IS NULL
SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 OR birth_year > 1955
SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 OR birth_year > 1955
SELECT count(*) as total_available_features FROM Other_Available_Features
SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code IN (     SELECT feature_type_code     FROM Other_Available_Features     WHERE feature_name = 'AirCon' )
SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code = @property_type_code
SELECT properties.property_name FROM Properties WHERE (Properties.property_type_code IN ('Apartment', 'House')) AND Properties.room_count > 1
