SELECT COUNT(DISTINCT Singer_ID) FROM singer
SELECT COUNT(*) AS total_singers FROM singer
SELECT Name, Country, Age FROM singer ORDER BY Age DESC
SELECT singer.Name, singer.Country, singer.Age  FROM singer  ORDER BY singer.Age DESC
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France'
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'
SELECT singer.Name, singer.Song_Name, singer.Song_release_year FROM singer WHERE singer.Age = (SELECT MIN(singer.Age) FROM singer)
SELECT s.Song_Name, s.Song_release_year  FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID WHERE s.Age = (SELECT MIN(Age) FROM singer)
SELECT DISTINCT Country FROM singer WHERE Age > 20
SELECT DISTINCT Country FROM singer WHERE Age > 20
SELECT Country, COUNT(*)  FROM singer  GROUP BY Country
SELECT COUNT(Singer_ID) AS Singer_Count, Country  FROM singer  GROUP BY Country
SELECT singer.Song_Name FROM singer WHERE singer.Age > (SELECT AVG(singer.Age) FROM singer)
SELECT singer.Song_Name FROM singer WHERE singer.Age > (SELECT AVG(singer.Age) FROM singer)
SELECT Location, Name  FROM stadium  WHERE Capacity BETWEEN 5000 AND 10000
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000
SELECT MAX(Capacity) AS Maximum_Capacity, AVG(Capacity) AS Average_Capacity FROM stadium
SELECT AVG(Capacity), MAX(Capacity) FROM stadium
SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)
SELECT Name, Capacity  FROM stadium  WHERE Average = (SELECT MAX(Average) FROM stadium)
SELECT COUNT(*) FROM concert WHERE Year IN (2014, 2015)
SELECT COUNT(DISTINCT concert_ID) FROM concert WHERE Year = 2014 OR Year = 2015
SELECT stadium.Name, COUNT(concert.concert_ID) FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name
SELECT stadium.Stadium_ID, COUNT(concert.concert_ID) AS Concert_Count FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Stadium_ID
SELECT stadium.Name, stadium.Capacity FROM stadium JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year >= 2014 GROUP BY stadium.Name, stadium.Capacity HAVING COUNT(concert.concert_ID) = (     SELECT MAX(concert_count)     FROM (         SELECT COUNT(concert.concert_ID) as concert_count         FROM concert         WHERE concert.Year >= 2014         GROUP BY concert.Stadium_ID     ) AS counts )
SELECT Name, Capacity FROM stadium WHERE Stadium_ID IN (     SELECT Stadium_ID     FROM concert     WHERE Year > 2013 ) GROUP BY Stadium_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT Year, COUNT(*) AS num_concerts FROM concert GROUP BY Year ORDER BY num_concerts DESC LIMIT 1
SELECT concert.Year FROM concert GROUP BY concert.Year ORDER BY COUNT(*) DESC LIMIT 1
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)
SELECT Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Stadium_ID IS NULL
SELECT DISTINCT Country FROM singer WHERE Age > 40 OR Age < 30
SELECT DISTINCT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014)
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014)
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS num_singers FROM concert LEFT JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_Name, concert.Theme
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_Name, concert.Theme
SELECT singer.Name, COUNT(singer_in_concert.Singer_ID) AS Number_of_Concerts FROM singer LEFT JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name
SELECT T1.Name, COUNT(T2.concert_ID) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name
SELECT DISTINCT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014
SELECT Name FROM singer WHERE Singer_ID IN (   SELECT Singer_ID FROM singer_in_concert   WHERE concert_ID IN (     SELECT concert_ID FROM concert     WHERE Year = 2014   ) )
SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'
SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'
SELECT Name, Location  FROM stadium  WHERE Stadium_ID IN (   SELECT DISTINCT Stadium_ID    FROM concert    WHERE Year = 2014 OR Year = 2015 )
SELECT Name, Location  FROM stadium  WHERE Stadium_ID IN (   SELECT Stadium_ID    FROM concert    WHERE Year = 2014    INTERSECT    SELECT Stadium_ID    FROM concert    WHERE Year = 2015 )
SELECT count(concert.concert_ID) FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE stadium.Capacity = (SELECT MAX(Capacity) FROM stadium)
SELECT COUNT(concert_ID) FROM concert WHERE Stadium_ID IN (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium))
SELECT COUNT(Pets.PetID) FROM Pets WHERE Pets.weight > 10
SELECT COUNT(DISTINCT PetID) FROM Pets WHERE weight > 10
SELECT Pets.weight  FROM Pets  JOIN Has_Pet ON Has_Pet.PetID = Pets.PetID  JOIN Student ON Student.StuID = Has_Pet.StuID  WHERE Pets.PetType = 'dog'  ORDER BY Pets.pet_age ASC  LIMIT 1
SELECT weight  FROM Pets  WHERE PetType = 'dog'  ORDER BY pet_age ASC  LIMIT 1
SELECT MAX(weight) AS max_weight, PetType FROM Pets GROUP BY PetType
SELECT PetType, MAX(weight) AS max_weight FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID GROUP BY PetType
SELECT COUNT(Has_Pet.PetID)  FROM Has_Pet  JOIN Student ON Has_Pet.StuID = Student.StuID  WHERE Student.Age > 20
SELECT COUNT(DISTINCT Has_Pet.PetID) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20
SELECT COUNT(DISTINCT Pets.PetID)  FROM Has_Pet  JOIN Pets ON Has_Pet.PetID = Pets.PetID  JOIN Student ON Has_Pet.StuID = Student.StuID  WHERE Pets.PetType = 'Dog' AND Student.Sex = 'F'
SELECT COUNT(DISTINCT Has_Pet.PetID) AS Dog_Pets_Raised FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType = 'dog' AND Student.Sex = 'female'
SELECT COUNT(DISTINCT PetType) FROM Pets
SELECT COUNT(DISTINCT PetType) FROM Pets
SELECT DISTINCT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' OR Pets.PetType = 'dog'
SELECT DISTINCT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' OR Pets.PetType = 'dog'
SELECT Student.Fname FROM Student WHERE Student.StuID IN (   SELECT Has_Pet.StuID   FROM Has_Pet   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'cat' ) AND Student.StuID IN (   SELECT Has_Pet.StuID   FROM Has_Pet   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'dog' )
SELECT DISTINCT Student.Fname  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'cat'    AND Student.StuID IN (     SELECT StuID      FROM Has_Pet      WHERE PetID IN (       SELECT PetID        FROM Pets        WHERE PetType = 'dog'     )   )
SELECT Major, Age FROM Student WHERE StuID NOT IN (   SELECT StuID   FROM Has_Pet   WHERE PetID IN (     SELECT PetID     FROM Pets     WHERE PetType = 'cat'   ) );
SELECT Student.Major, Student.Age  FROM Student  LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType != 'cat' OR Pets.PetType IS NULL
SELECT Student.StuID FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType != 'cat' OR Pets.PetType IS NULL GROUP BY Student.StuID
SELECT StuID FROM Student WHERE StuID NOT IN (   SELECT StuID   FROM Has_Pet   WHERE PetID IN (     SELECT PetID     FROM Pets     WHERE PetType = 'cat'   ) )
SELECT Student.Fname, Student.Age  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'dog'  AND Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat') GROUP BY Student.StuID
SELECT Fname  FROM Student  WHERE StuID IN (     SELECT StuID      FROM Has_Pet      WHERE PetID IN (         SELECT PetID          FROM Pets          WHERE PetType = 'dog'     )      AND StuID NOT IN (         SELECT StuID          FROM Has_Pet          WHERE PetID IN (             SELECT PetID              FROM Pets              WHERE PetType = 'cat'         )     ) )
SELECT PetType, weight  FROM Pets  WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT PetType, weight  FROM Pets  WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)  ORDER BY weight ASC  LIMIT 1
SELECT Pets.PetID, Pets.weight  FROM Pets  WHERE Pets.pet_age > 1
SELECT PetID, weight FROM Pets WHERE pet_age > 1
SELECT PetType, AVG(pet_age), MAX(pet_age)  FROM Pets  GROUP BY PetType
SELECT Pets.PetType, AVG(Pets.pet_age), MAX(Pets.pet_age) FROM Pets GROUP BY Pets.PetType
SELECT PetType, AVG(weight) AS AverageWeight FROM Pets GROUP BY PetType
SELECT PetType, AVG(weight)  FROM Pets  GROUP BY PetType
SELECT Student.Fname, Student.Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;
SELECT DISTINCT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID
SELECT Pets.PetID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith'
SELECT Pets.PetID FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.LName = 'Smith'
SELECT COUNT(*) AS Number_of_Pets, Student.StuID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID GROUP BY Student.StuID
SELECT Student.StuID, COUNT(Has_Pet.PetID) AS PetCount  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  GROUP BY Student.StuID
SELECT Student.Fname, Student.Sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.Fname, Student.Sex HAVING COUNT(Has_Pet.PetID) > 1
SELECT DISTINCT Student.Fname, Student.Sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING COUNT(Has_Pet.PetID) > 1
SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3 ORDER BY Student.StuID DESC LIMIT 1
SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3
SELECT avg(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT COUNT(*) FROM continents
SELECT COUNT(*) FROM continents
SELECT ContId, Continent, COUNT(CountryId) AS num_countries FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY ContId, Continent
SELECT ContId, Continent, COUNT(CountryId) AS country_count  FROM continents  JOIN countries ON continents.ContId = countries.Continent  GROUP BY ContId, Continent
SELECT COUNT(*) FROM countries
SELECT COUNT(*) FROM countries
SELECT car_makers.FullName, car_makers.Id, COUNT(DISTINCT model_list.Model) AS number_of_models FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.Model) AS ModelCount  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  GROUP BY car_makers.Id, car_makers.FullName
SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.ModelId = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Horsepower ASC LIMIT 1
SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.ModelId = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.Horsepower ASC LIMIT 1
SELECT T1.Model  FROM model_list AS T1  JOIN car_names AS T2 ON T1.ModelId = T2.ModelId  JOIN cars_data AS T3 ON T2.MakeId = T3.Id  WHERE T3.Weight < (SELECT avg(Weight) FROM cars_data)
SELECT Model FROM cars_data WHERE Weight < (   SELECT AVG(Weight)   FROM cars_data )
SELECT FullName FROM car_makers INNER JOIN cars_data ON car_makers.Id = cars_data.Id WHERE cars_data.Year = 1970
SELECT DISTINCT car_makers.Maker FROM car_makers JOIN cars_data ON car_makers.Id = cars_data.Id WHERE cars_data.Year = 1970
SELECT car_makers.Maker, MIN(cars_data.Year) AS ProductionTime FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_makers.Maker
SELECT car_makers.Maker, cars_data.Year  FROM car_makers  JOIN cars_data ON car_makers.Id = cars_data.Id  ORDER BY cars_data.Year ASC  LIMIT 1
SELECT DISTINCT car_names.Model  FROM car_names  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE cars_data.Year > 1980
SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id JOIN car_names AS T3 ON T1.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Year > 1980
SELECT continents.Continent, COUNT(DISTINCT car_makers.Id) AS MakerCount FROM continents JOIN countries ON countries.Continent = continents.ContId JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY continents.Continent
SELECT continents.Continent, COUNT(car_makers.Id) AS car_maker_count FROM continents JOIN countries ON continents.ContId = countries.ContId JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent
SELECT countries.CountryName FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1
SELECT countries.CountryName  FROM countries  JOIN car_makers ON car_makers.Country = countries.CountryId  GROUP BY countries.CountryName  ORDER BY COUNT(car_makers.Id) DESC  LIMIT 1
SELECT COUNT(car_names.Model) AS Model_Count, car_makers.FullName FROM car_names JOIN car_makers ON car_names.MakeId = car_makers.Id GROUP BY car_makers.FullName
SELECT COUNT(car_names.Model) AS Number_of_Car_Models, car_makers.Id, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON car_names.MakeId = model_list.ModelId GROUP BY car_makers.Id, car_makers.FullName
SELECT cars_data.Accelerate  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_names.Model = 'amc hornet sportabout (sw)'
SELECT Accelerate FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Model = 'amc hornet sportabout (sw)') AND MakeId = (SELECT Id FROM car_makers WHERE Maker = 'amc');
SELECT COUNT(DISTINCT car_makers.Id) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France'
SELECT count(DISTINCT car_makers.Id) AS Number_of_Makers_of_Cars_in_France FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France'
SELECT COUNT(DISTINCT model_list.ModelId) FROM model_list JOIN car_names ON car_names.MakeId = model_list.MakeId JOIN car_makers ON car_makers.Id = car_names.MakeId JOIN countries ON countries.CountryId = car_makers.Country WHERE countries.CountryName = 'USA'
SELECT COUNT(DISTINCT model_list.Model)  FROM model_list  JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN countries ON car_makers.Country = countries.CountryId  WHERE countries.CountryName = 'United States'
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4
SELECT AVG(MPG)  FROM cars_data  WHERE Cylinders = 4
SELECT MIN(Weight)  FROM cars_data  WHERE Cylinders = 8    AND Year = 1974
SELECT MIN(Weight)  FROM cars_data  WHERE Cylinders = 8  AND Year = 1974
SELECT 
SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id
SELECT CountryName, CountryId FROM countries WHERE CountryId IN (SELECT DISTINCT Country FROM car_makers);
SELECT CountryName, CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150
SELECT cars_data.Year, AVG(cars_data.Weight) FROM cars_data GROUP BY cars_data.Year
SELECT AVG(Weight) AS AverageWeight, Year FROM cars_data GROUP BY Year
SELECT CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'Europe' GROUP BY CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3
SELECT T1.CountryName  FROM countries AS T1  JOIN continents AS T2 ON T1.Continent = T2.ContId  JOIN car_makers AS T3 ON T3.Country = T1.CountryId  GROUP BY T1.CountryName  HAVING COUNT(DISTINCT T3.Id) >= 3  AND T2.Continent = 'Europe'
SELECT max(cars_data.Horsepower), car_makers.Maker  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.ModelId  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE cars_data.Cylinders = 3  GROUP BY car_makers.Maker
SELECT MAX(cars_data.Horsepower) AS MaxHorsepower, car_makers.Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN car_makers ON car_names.Model = car_makers.Id WHERE cars_data.Cylinders = 3
SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.ModelId = T2.ModelId JOIN cars_data AS T3 ON T2.MakeId = T3.Id ORDER BY T3.MPG DESC LIMIT 1
SELECT cars_data.Model FROM cars_data ORDER BY cars_data.MPG DESC LIMIT 1
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT AVG(cars_data.Edispl)  FROM cars_data JOIN car_names ON cars_data.MakeId = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'volvo'
SELECT AVG(cars_data.Edispl)  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.FullName = 'volvo'
SELECT MAX(Accelerate) AS Max_Accelerate, Cylinders FROM cars_data GROUP BY Cylinders
SELECT 
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id GROUP BY model_list.Model HAVING COUNT(DISTINCT car_makers.Id) = (     SELECT MAX(cnt)     FROM (         SELECT COUNT(DISTINCT car_makers.Id) AS cnt         FROM model_list         JOIN car_makers ON model_list.Maker = car_makers.Id         GROUP BY model_list.Model     ) AS counts )
SELECT Model FROM model_list GROUP BY Model HAVING COUNT(DISTINCT ModelId) > 1
SELECT COUNT(*)  FROM cars_data  WHERE Cylinders > 4
SELECT COUNT(Id) AS CarCount FROM cars_data WHERE Cylinders > 4
SELECT COUNT(*) FROM cars_data WHERE Year = 1980
SELECT COUNT(*) FROM cars_data WHERE Year = 1980
SELECT count(*) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'American Motor Company'
SELECT COUNT(T2.ModelId) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Maker = 'American Motor Company'
SELECT car_makers.Id, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName HAVING COUNT(model_list.ModelId) > 3
SELECT car_makers.Maker, car_makers.Id FROM car_makers JOIN model_list ON model_list.Maker = car_makers.Id GROUP BY car_makers.Maker, car_makers.Id HAVING COUNT(model_list.ModelId) > 3
SELECT DISTINCT T1.Model  FROM model_list AS T1  JOIN car_makers AS T2 ON T1.Maker = T2.Id  JOIN car_names AS T3 ON T1.Model = T3.Model  JOIN cars_data AS T4 ON T3.MakeId = T4.Id  WHERE T2.FullName = 'General Motors' OR T4.Weight > 3500
SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_makers AS T2 ON T2.Id = T1.Maker JOIN car_names AS T3 ON T3.Model = T1.Model JOIN cars_data AS T4 ON T4.Id = T3.MakeId WHERE T2.Maker = 'General Motors' OR T4.Weight > 3500
SELECT DISTINCT Year  FROM cars_data  WHERE Weight >= 3000 AND Weight <= 4000;
SELECT DISTINCT Year  FROM cars_data  WHERE Weight < 4000 OR Weight > 3000;
SELECT cars_data.Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)
SELECT cars_data.Horsepower  FROM cars_data  WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)
SELECT MIN(cars_data.Cylinders)  FROM car_names  JOIN model_list ON car_names.Model = model_list.Model  JOIN cars_data ON car_names.MakeId = cars_data.Id  JOIN car_makers ON car_makers.Id = model_list.Maker  WHERE car_makers.Maker = 'volvo'  ORDER BY cars_data.Accelerate  LIMIT 1
SELECT MIN(cars_data.Cylinders)  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  JOIN car_names ON model_list.ModelId = car_names.Model  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE car_makers.Maker = 'volvo'
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT COUNT(Id) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT count(DISTINCT T1.CountryName) FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count(DISTINCT T2.Id) > 2
SELECT count(DISTINCT T1.CountryName)  FROM countries AS T1  JOIN car_makers AS T2 ON T1.CountryId = T2.Country  GROUP BY T1.CountryId  HAVING count(DISTINCT T2.Id) > 2
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6
SELECT cars_data.Model FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1
SELECT T2.Model  FROM cars_data AS T1  JOIN car_names AS T2 ON T1.Id = T2.MakeId  WHERE T1.Cylinders = 4  ORDER BY T1.Horsepower DESC  LIMIT 1
SELECT car_names.MakeId, car_names.Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN car_makers ON car_names.Model = car_makers.Model WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders <= 3;
SELECT T1.MakeId, T2.Make  FROM car_names AS T1  JOIN model_list AS T2 ON T1.Model = T2.Model  JOIN cars_data AS T3 ON T1.MakeId = T3.Id  WHERE T3.Horsepower > (SELECT MIN(Horsepower) FROM cars_data)  AND T3.Cylinders < 4;
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 AND Year < 1980
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980
SELECT T1.Model  FROM model_list AS T1  JOIN car_names AS T2 ON T1.Model = T2.Model  JOIN cars_data AS T3 ON T2.MakeId = T3.Id  JOIN car_makers AS T4 ON T3.Make = T4.Id  WHERE T3.Weight < 3500 AND T4.Maker != 'Ford Motor Company'
SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id JOIN car_makers AS T4 ON T1.Maker = T4.Id WHERE T3.Weight < 3500 AND T4.Maker != 'Ford Motor Company'
SELECT CountryName FROM countries LEFT JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Country IS NULL
SELECT CountryName  FROM countries  WHERE CountryId NOT IN (SELECT Country FROM car_makers)
SELECT Id, Maker  FROM car_makers  WHERE Id IN (   SELECT Maker    FROM model_list    GROUP BY Maker    HAVING count(*) >= 2 )  AND Maker IN (   SELECT Maker    FROM model_list    GROUP BY Maker    HAVING count(DISTINCT Model) > 3 )
SELECT T1.Id, T1.Maker  FROM car_makers AS T1  JOIN model_list AS T2 ON T1.Id = T2.Maker  JOIN car_names AS T3 ON T2.ModelId = T3.Model  JOIN cars_data AS T4 ON T3.MakeId = T4.Id  GROUP BY T1.Id, T1.Maker  HAVING COUNT(DISTINCT T2.Model) >= 2 AND COUNT(DISTINCT T3.MakeId) > 3.
SELECT T1.CountryId, T1.CountryName  FROM countries AS T1  JOIN car_makers AS T2 ON T1.CountryId = T2.Country  WHERE T2.Id IN (SELECT T3.Maker                  FROM car_names AS T3                  WHERE T3.Model = 'fiat')        OR (SELECT COUNT(*)            FROM car_makers AS T4            WHERE T1.CountryId = T4.Country) > 3
SELECT CountryId, CountryName FROM countries WHERE CountryId IN (     SELECT Country     FROM car_makers     GROUP BY Country     HAVING COUNT(*) > 3 ) OR CountryId IN (     SELECT Country     FROM car_makers     JOIN car_names ON car_makers.Id = car_names.MakeId     JOIN model_list ON car_names.Model = model_list.Model     WHERE model_list.Maker = 'fiat' )
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways'
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways'
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'
SELECT AirportCode, AirportName  FROM airports  WHERE City = 'Anthony'
SELECT COUNT(*) FROM airlines
SELECT COUNT(*) FROM airlines
SELECT COUNT(*) FROM airports
SELECT COUNT(*) FROM airports
SELECT COUNT(*) FROM flights
SELECT COUNT(*) FROM flights
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
SELECT COUNT(DISTINCT uid) FROM airlines WHERE Country = 'USA'
SELECT COUNT(uid) FROM airlines WHERE Country = 'USA'
SELECT City, Country FROM airports WHERE AirportName = 'Alton';
SELECT City, Country FROM airports WHERE AirportName = 'Alton'
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
SELECT AirportName FROM airports WHERE City = 'Aberdeen'
SELECT AirportName FROM airports WHERE City = 'Aberdeen'
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'
SELECT COUNT(*)  FROM flights  WHERE DestAirport = 'ATO'
SELECT COUNT(*) FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen'
SELECT COUNT(flights.FlightNo) FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen'
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen'
SELECT COUNT(*) FROM flights JOIN airports AS source_airport ON flights.SourceAirport = source_airport.AirportCode JOIN airports AS dest_airport ON flights.DestAirport = dest_airport.AirportCode WHERE source_airport.City = 'Aberdeen' AND dest_airport.City = 'Ashley'
SELECT COUNT(*) FROM flights  JOIN airports AS source ON flights.SourceAirport = source.AirportCode  JOIN airports AS destination ON flights.DestAirport = destination.AirportCode  WHERE source.City = 'Aberdeen' AND destination.City = 'Ashley'
SELECT COUNT(flights.FlightNo)  FROM flights  JOIN airlines ON flights.Airline = airlines.Abbreviation  WHERE airlines.Airline = 'JetBlue Airways'
SELECT COUNT(flights.FlightNo) FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = 'Jetblue Airways'
SELECT COUNT(*)  FROM flights  JOIN airlines ON flights.Airline = airlines.uid  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airlines.Airline = 'United Airlines'  AND airports.AirportCode = 'ASY'
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE flights.Airline = 'United Airlines' AND airports.AirportCode = 'ASY'
SELECT COUNT(*)  FROM flights  JOIN airlines ON flights.Airline = airlines.Abbreviation  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airlines.Airline = 'United Airlines' AND flights.SourceAirport = 'AHD'
SELECT COUNT(*) FROM flights  JOIN airlines ON flights.Airline = airlines.Abbreviation  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airlines.Airline = 'United Airlines' AND airports.AirportCode = 'AHD'
SELECT COUNT(*) FROM flights  JOIN airlines ON flights.Airline = airlines.Abbreviation  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airlines.Airline = 'United Airlines'  AND airports.City = 'Aberdeen'
SELECT COUNT(flights.FlightNo)  FROM flights  JOIN airlines ON flights.Airline = airlines.uid  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airlines.Abbreviation = 'UA'  AND airports.City = 'Aberdeen';
SELECT airports.City, COUNT(*) AS num_flights FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.City ORDER BY num_flights DESC LIMIT 1
SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.City ORDER BY COUNT(flights.DestAirport) DESC LIMIT 1
SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY COUNT(flights.SourceAirport) DESC LIMIT 1
SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY COUNT(flights.SourceAirport) DESC LIMIT 1
SELECT airports.AirportCode FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport GROUP BY airports.AirportCode ORDER BY COUNT(*) DESC LIMIT 1
SELECT AirportCode FROM airports WHERE AirportCode IN (     SELECT SourceAirport     FROM flights     GROUP BY SourceAirport     ORDER BY COUNT(*) DESC     LIMIT 1 ) OR AirportCode IN (     SELECT DestAirport     FROM flights     GROUP BY DestAirport     ORDER BY COUNT(*) DESC     LIMIT 1 ) LIMIT 1
SELECT AirportCode FROM airports WHERE AirportCode IN (   SELECT SourceAirport   FROM flights   GROUP BY SourceAirport   ORDER BY COUNT(*) ASC   LIMIT 1 )
SELECT airports.AirportCode FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY flights.SourceAirport HAVING COUNT(*) = (     SELECT MIN(flight_count)     FROM (         SELECT COUNT(*) AS flight_count         FROM flights         GROUP BY SourceAirport     ) AS subquery )
SELECT Airline, COUNT(*) AS FlightCount  FROM flights  GROUP BY Airline  ORDER BY FlightCount DESC  LIMIT 1
SELECT Airline FROM airlines JOIN flights ON airlines.Abbreviation = flights.Airline GROUP BY Airline ORDER BY COUNT(*) DESC LIMIT 1
SELECT Abbreviation, Country FROM airlines WHERE uid = (   SELECT Airline   FROM flights   GROUP BY Airline   ORDER BY COUNT(*) ASC   LIMIT 1 )
SELECT T1.Abbreviation, T1.Country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T2.Airline HAVING COUNT(*) = (SELECT MIN(count) FROM (SELECT COUNT(*) AS count FROM flights GROUP BY Airline) AS T3) ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Airline FROM airlines  INNER JOIN flights ON airlines.uid = flights.Airline  WHERE flights.SourceAirport = 'AHD'
SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD';
SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD';
SELECT airlines.Airline  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  JOIN airlines ON flights.Airline = airlines.Abbreviation  WHERE airports.AirportCode = 'AHD'
SELECT DISTINCT a.Airline  FROM airlines a  INNER JOIN flights f1 ON a.uid = f1.Airline  INNER JOIN flights f2 ON a.uid = f2.Airline  INNER JOIN airports ap1 ON f1.SourceAirport = ap1.AirportCode  INNER JOIN airports ap2 ON f2.SourceAirport = ap2.AirportCode  INNER JOIN airports ap3 ON f1.DestAirport = ap3.AirportCode  INNER JOIN airports ap4 ON f2.DestAirport = ap4.AirportCode  WHERE (ap1.AirportCode = 'APG' AND ap3.AirportCode = 'CVO')  AND (ap2.AirportCode = 'APG' AND ap4.AirportCode = 'CVO')
SELECT A.Airline FROM airlines AS A JOIN flights AS F1 ON A.uid = F1.Airline JOIN airports AS AP1 ON F1.SourceAirport = AP1.AirportCode JOIN flights AS F2 ON A.uid = F2.Airline JOIN airports AS AP2 ON F2.SourceAirport = AP2.AirportCode WHERE AP1.AirportCode = 'APG' AND AP2.AirportCode = 'CVO' GROUP BY A.Airline
SELECT DISTINCT airlines.Airline  FROM airlines  INNER JOIN flights ON airlines.uid = flights.Airline  WHERE flights.SourceAirport = 'CVO'  AND airlines.Airline NOT IN (   SELECT airlines.Airline    FROM airlines    INNER JOIN flights ON airlines.uid = flights.Airline    WHERE flights.SourceAirport = 'APG' )
SELECT Airline FROM flights WHERE SourceAirport = 'CVO' AND Airline NOT IN (SELECT Airline FROM flights WHERE SourceAirport = 'APG')
SELECT airlines.Airline FROM airlines WHERE airlines.Abbreviation IN (     SELECT flights.Airline     FROM flights     GROUP BY flights.Airline     HAVING COUNT(*) >= 10 )
SELECT Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  GROUP BY Airline  HAVING COUNT(*) >= 10
SELECT Airline FROM airlines WHERE uid IN (   SELECT Airline   FROM flights   GROUP BY Airline   HAVING COUNT(*) < 200 )
SELECT Airline FROM airlines WHERE uid IN (   SELECT Airline   FROM flights   GROUP BY Airline   HAVING COUNT(*) < 200 )
SELECT FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = 'United Airlines'
SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = 'United Airlines'
SELECT FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'APG'
SELECT FlightNo  FROM flights  WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE AirportName = 'APG')
SELECT FlightNo  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.AirportCode = 'APG'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT flights.FlightNo  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.AirportName = 'Aberdeen'
SELECT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen' OR airports.City = 'Abilene'
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen' OR airports.City = 'Abilene'
SELECT AirportName FROM airports WHERE AirportCode NOT IN (     SELECT SourceAirport     FROM flights     UNION     SELECT DestAirport     FROM flights )
SELECT AirportCode FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights)   AND AirportCode NOT IN (SELECT DestAirport FROM flights)
SELECT COUNT(*) FROM employee
SELECT COUNT(Employee_ID) FROM employee
SELECT Name FROM employee ORDER BY Age ASC
SELECT Name FROM employee ORDER BY Age ASC
SELECT City, COUNT(Employee_ID) FROM employee GROUP BY City
SELECT City, COUNT(*) FROM employee GROUP BY City
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(DISTINCT Employee_ID) > 1
SELECT City FROM employee  GROUP BY City  HAVING COUNT(*) > 1  AND MAX(Age) < 30
SELECT COUNT(Shop_ID) AS Shop_Count, Location FROM shop GROUP BY Location
SELECT COUNT(Shop_ID) AS shop_count, Location FROM shop GROUP BY Location
SELECT Manager_name, District  FROM shop  WHERE Number_products = (SELECT MAX(Number_products) FROM shop);
SELECT Manager_name, District FROM shop ORDER BY Number_products DESC LIMIT 1;
SELECT min(Number_products) AS min_products, max(Number_products) AS max_products FROM shop
SELECT MIN(Number_products) AS min_products, MAX(Number_products) AS max_products FROM shop
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)
SELECT T1.Name  FROM employee AS T1  JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID  GROUP BY T2.Employee_ID  ORDER BY COUNT(T2.Employee_ID) DESC  LIMIT 1
SELECT employee.Name FROM employee WHERE employee.Employee_ID IN (     SELECT evaluation.Employee_ID     FROM evaluation     GROUP BY evaluation.Employee_ID     HAVING COUNT(*) = (         SELECT MAX(cnt)         FROM (             SELECT evaluation.Employee_ID, COUNT(*) AS cnt             FROM evaluation             GROUP BY evaluation.Employee_ID         ) AS temp_table     ) )
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1
SELECT employee.Name FROM employee INNER JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1
SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation WHERE Year_awarded IS NOT NULL)
SELECT employee.Name FROM employee LEFT JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Employee_ID IS NULL;
SELECT shop.Name  FROM shop  JOIN hiring ON shop.Shop_ID = hiring.Shop_ID  GROUP BY shop.Shop_ID  ORDER BY COUNT(hiring.Employee_ID) DESC  LIMIT 1
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)
SELECT Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Shop_ID IS NULL;
SELECT COUNT(hiring.Employee_ID) AS "Number of Employees Hired", shop.Name AS "Shop Name" FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY shop.Name
SELECT shop.Name, COUNT(employee.Employee_ID) AS Employee_Count FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID JOIN employee ON hiring.Employee_ID = employee.Employee_ID GROUP BY shop.Name
SELECT SUM(Bonus) AS Total_Bonus FROM evaluation
SELECT SUM(Bonus) AS Total_Bonus FROM evaluation
SELECT hiring.* FROM hiring
SELECT * FROM hiring
SELECT District FROM shop WHERE Shop_ID IN (     SELECT Shop_ID FROM shop     WHERE Number_products < 3000 ) AND Shop_ID IN (     SELECT Shop_ID FROM shop     WHERE Number_products > 10000 ) GROUP BY District
SELECT DISTINCT district FROM shop WHERE Number_products < 3000 AND district IN (   SELECT district   FROM shop   WHERE Number_products > 10000 )
SELECT COUNT(DISTINCT Location) FROM shop
SELECT COUNT(DISTINCT Location) FROM shop
SELECT COUNT(Document_ID) FROM Documents
SELECT COUNT(DISTINCT Document_ID) FROM Documents
SELECT Document_ID, Document_Name, Document_Description FROM Documents
SELECT Document_ID, Document_Name, Document_Description FROM Documents
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%';
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'
SELECT COUNT(DISTINCT Templates.Template_ID) FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID
SELECT COUNT(DISTINCT Templates.Template_ID) AS Num_Templates FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID
SELECT COUNT(DISTINCT Documents.Document_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code = 'PPT'
SELECT COUNT(DISTINCT Documents.Document_ID)  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  WHERE Ref_Template_Types.Template_Type_Description = 'PPT'
SELECT T1.Template_ID, COUNT(DISTINCT T2.Document_ID)  FROM Templates AS T1  LEFT JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID  GROUP BY T1.Template_ID
SELECT Templates.Template_ID, COUNT(Documents.Template_ID)  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  GROUP BY Templates.Template_ID
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1
SELECT Templates.Template_ID FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1;
SELECT Templates.Template_ID FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1.
SELECT Templates.Template_ID  FROM Templates  LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID  WHERE Documents.Document_ID IS NULL
SELECT Templates.Template_ID  FROM Templates  LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID  WHERE Documents.Template_ID IS NULL
SELECT COUNT(Template_ID) FROM Templates
SELECT COUNT(*) FROM Templates
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates
SELECT t.Template_ID, t.Version_Number, r.Template_Type_Code FROM Templates t JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code
SELECT DISTINCT T2.Template_Type_Code  FROM Ref_Template_Types AS T1  JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code
SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types
SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_Type_Code = 'PP' OR Templates.Template_Type_Code = 'PPT'
SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_Type_Code IN ('PP', 'PPT')
SELECT COUNT(Template_ID) FROM Templates WHERE Template_Type_Code = 'CV'
SELECT COUNT(Templates.Template_ID) AS Template_Count FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'CV'
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5
SELECT T1.Template_Type_Code, COUNT(T2.Template_ID) FROM Ref_Template_Types AS T1 LEFT JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code
SELECT Template_Type_Code, COUNT(*) AS Template_Count FROM Templates GROUP BY Template_Type_Code ORDER BY Template_Count DESC LIMIT 1
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY COUNT(Templates.Template_ID) DESC LIMIT 1
SELECT T1.Template_Type_Code  FROM Ref_Template_Types AS T1  LEFT JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code  HAVING COUNT(T2.Template_ID) < 3
SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 LEFT JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code HAVING COUNT(T2.Template_ID) < 3;
SELECT min(Templates.Version_Number) AS Smallest_Version_Number, Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code ORDER BY Templates.Version_Number ASC LIMIT 1
SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Data base'
SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'
SELECT Documents.Document_Name  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  WHERE Ref_Template_Types.Template_Type_Code = 'BK'
SELECT Document_Name  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  WHERE Templates.Template_Type_Code = 'BK'
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Documents.Document_ID)  FROM Ref_Template_Types  LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code  LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID  GROUP BY Ref_Template_Types.Template_Type_Code
SELECT T1.Template_Type_Code, COUNT(T3.Document_ID)  FROM Ref_Template_Types AS T1  JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID  GROUP BY T1.Template_Type_Code
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY COUNT(Documents.Template_ID) DESC LIMIT 1
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code NOT IN (   SELECT Templates.Template_Type_Code   FROM Templates )
SELECT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Code NOT IN (     SELECT DISTINCT Template_Type_Code      FROM Templates      JOIN Documents ON Templates.Template_ID = Documents.Template_ID )
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
SELECT Template_Type_Code, Template_Type_Description  FROM Ref_Template_Types
SELECT Template_Type_Description  FROM Ref_Template_Types  WHERE Template_Type_Code = 'AD'
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'
SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID
SELECT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation'
SELECT Templates.Template_ID  FROM Templates  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation'
SELECT COUNT(*) FROM Paragraphs;
SELECT COUNT(*) AS Paragraph_Count FROM Paragraphs
SELECT COUNT(Paragraph_ID) FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show'
SELECT COUNT(Paragraphs.Paragraph_ID)  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  WHERE Documents.Document_Name = 'Summer Show'
SELECT Paragraphs.* FROM Paragraphs WHERE Paragraph_Text = 'Korea';
SELECT Paragraphs.*  FROM Paragraphs  WHERE Paragraph_Text LIKE '%Korea%'
SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID = (     SELECT Document_ID     FROM Documents     WHERE Document_Name = 'Welcome to NY' )
SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text  FROM Paragraphs  JOIN Documents ON Documents.Document_ID = Paragraphs.Document_ID  WHERE Documents.Document_Name = 'Welcome to NY'
SELECT Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews'
SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = 'Customer reviews'
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Num_Of_Paragraphs FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID)  FROM Documents  LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID, Documents.Document_Name
SELECT D.Document_ID, D.Document_Name, COUNT(P.Paragraph_ID) AS Paragraph_Count  FROM Documents AS D  LEFT JOIN Paragraphs AS P ON D.Document_ID = P.Document_ID  GROUP BY D.Document_ID, D.Document_Name
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(Paragraphs.Paragraph_ID) >= 2
SELECT DISTINCT Documents.Document_ID  FROM Documents  JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID  GROUP BY Documents.Document_ID  HAVING COUNT(*) >= 2
SELECT T1.Document_ID, T1.Document_Name  FROM Documents AS T1  JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID  ORDER BY COUNT(T2.Paragraph_ID) DESC  LIMIT 1
SELECT Documents.Document_ID, Documents.Document_Name FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name ORDER BY COUNT(Paragraphs.Paragraph_ID) DESC LIMIT 1
SELECT Documents.Document_ID FROM Paragraphs GROUP BY Documents.Document_ID ORDER BY COUNT(Paragraphs.Paragraph_ID) ASC LIMIT 1.
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY COUNT(Paragraphs.Paragraph_ID) ASC LIMIT 1
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(Paragraphs.Paragraph_ID) BETWEEN 1 AND 2;
SELECT T1.Document_ID  FROM Documents AS T1  JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID  HAVING COUNT(T2.Paragraph_ID) BETWEEN 1 AND 2
SELECT Documents.Document_ID  FROM Documents INNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text IN ('Brazil', 'Ireland')
SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Paragraph_Text = 'Brazil' INTERSECT SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Paragraph_Text = 'Ireland'
SELECT COUNT(Teacher_ID) AS Total_Teachers FROM teacher
SELECT COUNT(*) FROM teacher
SELECT Name FROM teacher ORDER BY Age ASC
SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC
SELECT Age, Hometown FROM teacher
SELECT Name, Age, Hometown FROM teacher
SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District'
SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'
SELECT Name FROM teacher WHERE Age IN (32, 33)
SELECT teacher.Name FROM teacher WHERE teacher.Age = 32 OR teacher.Age = 33
SELECT Hometown  FROM teacher  WHERE Age = (SELECT MIN(Age) FROM teacher)  ORDER BY Age ASC  LIMIT 1
SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
SELECT Hometown, COUNT(DISTINCT Teacher_ID) FROM teacher GROUP BY Hometown
SELECT Hometown, COUNT(Teacher_ID)  FROM teacher  GROUP BY Hometown
SELECT Hometown, COUNT(*) as count  FROM teacher  GROUP BY Hometown  ORDER BY count DESC  LIMIT 1
SELECT Hometown, COUNT(*) AS count FROM teacher GROUP BY Hometown ORDER BY count DESC LIMIT 1
SELECT teacher.Hometown FROM teacher GROUP BY teacher.Hometown HAVING COUNT(DISTINCT teacher.Teacher_ID) >= 2;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(DISTINCT Teacher_ID) >= 2
SELECT T1.Name, T3.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID
SELECT T1.Name, T3.Course  FROM teacher AS T1  JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID  JOIN course AS T3 ON T3.Course_ID = T2.Course_ID
SELECT T1.Name, T3.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID ORDER BY T1.Name ASC
SELECT T1.Name, T3.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID ORDER BY T1.Name ASC
SELECT teacher.Name  FROM teacher  JOIN course_arrange ON course_arrange.Teacher_ID = teacher.Teacher_ID  JOIN course ON course.Course_ID = course_arrange.Course_ID  WHERE course.Course = 'math'
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'math'
SELECT T1.Name, COUNT(T2.Course_ID) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Name
SELECT T1.Name, COUNT(T2.Course_ID) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Name
SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Name HAVING COUNT(DISTINCT T2.Course_ID) >= 2
SELECT Name FROM teacher  WHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange                       GROUP BY Teacher_ID                       HAVING COUNT(DISTINCT Course_ID) >= 2)
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)
SELECT COUNT(*) FROM visitor WHERE Age < 30
SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Level_of_membership DESC
SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4
SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Age DESC
SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)
SELECT avg(Num_of_Staff) FROM museum WHERE Open_Year < 2009
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'
SELECT Name  FROM museum  WHERE Num_of_Staff > (   SELECT MIN(Num_of_Staff)    FROM museum    WHERE Open_Year > 2010 )
SELECT visitor.ID, visitor.Name, visitor.Age  FROM visitor  JOIN visit ON visitor.ID = visit.visitor_ID  GROUP BY visitor.ID, visitor.Name, visitor.Age  HAVING COUNT(DISTINCT visit.Museum_ID) > 1
SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.ID IN (     SELECT visitor_ID     FROM visit     GROUP BY visitor_ID     ORDER BY sum(Total_spent) DESC     LIMIT 1 )
SELECT museum.Museum_ID, museum.Name  FROM museum  JOIN visit ON museum.Museum_ID = visit.Museum_ID  GROUP BY museum.Museum_ID, museum.Name  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)
SELECT T1.Name, T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID ORDER BY T2.Num_of_Ticket DESC LIMIT 1
SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit
SELECT SUM(visit.Total_spent) AS Total_ticket_expense  FROM visit  JOIN visitor ON visit.visitor_ID = visitor.ID  WHERE visitor.Level_of_membership = 1
SELECT T1.Name FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID JOIN museum AS T3 ON T2.Museum_ID = T3.Museum_ID WHERE T3.Open_Year < 2009 OR T3.Open_Year > 2011 GROUP BY T1.Name
SELECT count(DISTINCT visitor.ID) FROM visitor LEFT JOIN visit ON visitor.ID = visit.visitor_ID LEFT JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year <= 2010 OR museum.Open_Year IS NULL
SELECT count(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008;
SELECT COUNT(*) FROM players
SELECT COUNT(DISTINCT player_id) FROM players
SELECT COUNT(*) AS total_matches FROM matches
SELECT COUNT(*) FROM matches;
SELECT first_name, birth_date  FROM players  WHERE country_code = 'USA'
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches JOIN players ON matches.winner_id = players.player_id        OR matches.loser_id = players.player_id
SELECT avg(matches.loser_age) AS average_loser_age, avg(matches.winner_age) AS average_winner_age  FROM matches  JOIN players ON matches.loser_id = players.player_id OR matches.winner_id = players.player_id
SELECT AVG(rankings.ranking) AS average_rank FROM rankings JOIN matches ON rankings.player_id = matches.winner_id JOIN players ON players.player_id = matches.winner_id;
SELECT AVG(rankings.ranking) AS average_rank FROM rankings JOIN matches ON rankings.player_id = matches.winner_id
SELECT MAX(loser_rank) AS highest_rank FROM matches LEFT JOIN players ON matches.loser_id = players.player_id
SELECT MAX(loser_rank) AS best_rank_of_losers FROM matches
SELECT COUNT(DISTINCT country_code) AS distinct_country_codes FROM players
SELECT COUNT(DISTINCT players.country_code) FROM players
SELECT COUNT(DISTINCT loser_name) FROM matches JOIN players ON matches.loser_id = players.player_id
SELECT COUNT(DISTINCT loser_name) FROM matches
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10
SELECT T1.first_name, T1.last_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.year = 2013 INTERSECT SELECT T3.first_name, T3.last_name FROM players AS T3 JOIN matches AS T4 ON T3.player_id = T4.winner_id WHERE T4.year = 2016.
SELECT DISTINCT p.first_name, p.last_name FROM players AS p JOIN matches AS m ON p.player_id = m.winner_id WHERE m.year = 2013 AND p.player_id IN (     SELECT winner_id FROM matches WHERE year = 2016 )
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016)
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016
SELECT SELECT DISTINCT p.country_code, p.first_name FROM players p JOIN matches m ON m.winner_id = p.player_id JOIN matches m2 ON m2.winner_id = p.player_id JOIN tournaments t ON t.tourney_id = m.tourney_id JOIN tournaments t2 ON t2.tourney_id = m2.tourney_id WHERE t.tourney_name = 'WTA Championships' AND t2.tourney_name = 'Australian Open'
SELECT T1.first_name, T1.country_code  FROM players AS T1  JOIN matches AS T2 ON T1.player_id = T2.winner_id  WHERE T2.tourney_name = 'WTA Championships'    AND T2.tourney_name = 'Australian Open'
SELECT players.first_name, players.country_code  FROM players  WHERE players.birth_date = (SELECT MIN(players.birth_date) FROM players) LIMIT 1
SELECT first_name, country_code FROM players ORDER BY birth_date LIMIT 1;
SELECT first_name, last_name FROM players ORDER BY birth_date
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players ORDER BY birth_date
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players WHERE hand = 'left' ORDER BY birth_date;
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(rankings.tours) DESC LIMIT 1
SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id HAVING count(*) = (     SELECT max(count)     FROM (         SELECT player_id, count(*) AS count         FROM rankings         GROUP BY player_id     ) AS T3 )
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1
SELECT year, COUNT(*) as match_count  FROM matches  GROUP BY year  ORDER BY match_count DESC  LIMIT 1
SELECT T1.first_name, T1.last_name, T2.ranking_points  FROM players AS T1  JOIN rankings AS T2 ON T1.player_id = T2.player_id  WHERE T1.player_id = (   SELECT winner_id    FROM matches    GROUP BY winner_id    ORDER BY COUNT(*) DESC    LIMIT 1 )
SELECT SELECT p.first_name || ' ' || p.last_name AS winner_name, MAX(r.ranking_points) AS rank_points FROM players p JOIN matches m ON m.winner_id = p.player_id JOIN rankings r ON r.player_id = p.player_id GROUP BY p.player_id ORDER BY rank_points DESC LIMIT 1;
SELECT players.first_name, players.last_name FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'Australian Open' ORDER BY rankings.ranking_points DESC LIMIT 1
SELECT T1.last_name, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id JOIN rankings AS T3 ON T1.player_id = T3.player_id JOIN tournaments AS T4 ON T2.tourney_id = T4.tourney_id WHERE T4.tourney_name = 'Australian Open' GROUP BY T1.player_id ORDER BY T3.ranking_points DESC LIMIT 1
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.loser_id = players.player_id OR matches.winner_id = players.player_id WHERE matches.minutes = (SELECT MAX(minutes) FROM matches)
SELECT p1.first_name AS winner_first_name, p1.last_name AS winner_last_name, p2.first_name AS loser_first_name, p2.last_name AS loser_last_name FROM matches m JOIN players p1 ON m.winner_id = p1.player_id JOIN players p2 ON m.loser_id = p2.player_id WHERE m.minutes = (SELECT MAX(minutes) FROM matches)
SELECT players.first_name, AVG(rankings.ranking)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name
SELECT players.first_name, AVG(rankings.ranking)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name
SELECT players.first_name, SUM(rankings.ranking_points)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name
SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name
SELECT country_code, COUNT(DISTINCT player_id) AS player_count FROM players GROUP BY country_code
SELECT country_code, COUNT(DISTINCT player_id) FROM players GROUP BY country_code
SELECT country_code, COUNT(*) AS player_count FROM players GROUP BY country_code ORDER BY player_count DESC LIMIT 1
SELECT country_code, COUNT(*) AS player_count FROM players GROUP BY country_code ORDER BY player_count DESC LIMIT 1
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(DISTINCT player_id) > 50
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50
SELECT ranking_date, COUNT(tours) AS total_tours FROM rankings GROUP BY ranking_date
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date
SELECT year, COUNT(*)  FROM matches  GROUP BY year
SELECT year, COUNT(*)  FROM matches  GROUP BY year
SELECT T1.first_name, T1.last_name, T2.ranking FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id JOIN matches AS T3 ON T3.winner_id = T1.player_id ORDER BY T1.birth_date LIMIT 3
SELECT players.first_name, players.last_name, rankings.ranking FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON matches.winner_id = players.player_id ORDER BY players.birth_date ASC LIMIT 3
SELECT COUNT(DISTINCT T2.winner_id)  FROM players AS T1  JOIN matches AS T2 ON T1.player_id = T2.winner_id  WHERE T2.tourney_name = "WTA Championships"  AND T1.hand = "L"
SELECT COUNT(DISTINCT players.player_id) FROM players JOIN matches ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND players.hand = 'Left'
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON rankings.player_id = players.player_id JOIN matches ON matches.winner_id = players.player_id WHERE rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings)
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON matches.winner_id = players.player_id ORDER BY matches.winner_rank_points DESC LIMIT 1
SELECT hand, COUNT(DISTINCT player_id) AS num_players FROM players GROUP BY hand
SELECT hand, COUNT(DISTINCT player_id) FROM players GROUP BY hand
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'
SELECT name, tonnage  FROM ship  ORDER BY name COLLATE NOCASE DESC, tonnage DESC
SELECT name, date, result FROM battle
SELECT MAX(killed) AS max_death_toll, MIN(killed) AS min_death_toll, caused_by_ship_id  FROM death  INNER JOIN ship ON death.caused_by_ship_id = ship.id  GROUP BY caused_by_ship_id
SELECT AVG(death.injured) FROM death INNER JOIN ship ON death.caused_by_ship_id = ship.id
SELECT death.note, death.killed, death.injured  FROM death  JOIN ship ON death.caused_by_ship_id = ship.id  WHERE ship.tonnage = 't'
SELECT name, result FROM battle WHERE bulgarian_commander <> 'Boril'
SELECT DISTINCT battle.id, battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig'
SELECT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id, T1.name HAVING SUM(T3.killed) > 10
SELECT ship.id, ship.name FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1
SELECT DISTINCT name  FROM battle  WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'
SELECT COUNT(DISTINCT result) FROM battle
SELECT count(*)  FROM battle  WHERE id NOT IN (   SELECT lost_in_battle    FROM ship    WHERE tonnage = '225' )
SELECT battle.name, battle.date  FROM battle  JOIN ship ON battle.id = ship.lost_in_battle  WHERE ship.name = 'Lettice' OR ship.name = 'HMS Atalanta'
SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle LEFT JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.location != 'English Channel' OR ship.location IS NULL
SELECT note  FROM death  WHERE note LIKE '%East%'
SELECT line_1, line_2 FROM Addresses
SELECT line_1, line_2 FROM Addresses
SELECT COUNT(*) FROM Courses
SELECT COUNT(course_id) FROM Courses
SELECT course_description  FROM Courses  WHERE course_name = 'math'
SELECT course_description  FROM Courses  WHERE course_id IN (   SELECT course_id    FROM Sections    WHERE course_id IN (     SELECT course_id      FROM Courses      WHERE course_name LIKE '%Math%'   ) )
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
SELECT Departments.department_name, Departments.department_id FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id GROUP BY Departments.department_name, Departments.department_id ORDER BY COUNT(Degree_Programs.degree_program_id) DESC LIMIT 1
SELECT department_name, department_id FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id GROUP BY department_name, department_id ORDER BY COUNT(Degree_Programs.degree_program_id) DESC LIMIT 1
SELECT COUNT(DISTINCT T1.department_id)  FROM Departments AS T1  JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id
SELECT COUNT(DISTINCT department_id) FROM Departments
SELECT COUNT(DISTINCT Degree_Programs.degree_summary_name) FROM Degree_Programs INNER JOIN Departments ON Degree_Programs.department_id = Departments.department_id
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs
SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering')
SELECT COUNT(*) FROM Degree_Programs WHERE department_id IN (SELECT department_id FROM Departments WHERE department_name = 'engineering')
SELECT section_name, section_description FROM Sections
SELECT section_name, section_description FROM Sections
SELECT Courses.course_id, Courses.course_name FROM Courses JOIN Sections ON Sections.course_id = Courses.course_id GROUP BY Courses.course_id, Courses.course_name HAVING COUNT(Sections.section_id) <= 2
SELECT course_name, course_id FROM Courses WHERE course_id NOT IN (     SELECT course_id     FROM Sections     GROUP BY course_id     HAVING count(*) >= 2 )
SELECT section_name FROM Sections ORDER BY section_name DESC
SELECT section_name FROM Sections ORDER BY section_name DESC
SELECT Semesters.semester_id, Semesters.semester_name FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY Semesters.semester_id, Semesters.semester_name ORDER BY COUNT(Student_Enrolment.student_enrolment_id) DESC LIMIT 1
SELECT SELECT Semesters.semester_id, Semesters.semester_name FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY Semesters.semester_id ORDER BY COUNT(Student_Enrolment.student_id) DESC LIMIT 1;
SELECT department_description FROM Departments WHERE department_name LIKE '%the computer%'
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM Students s INNER JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.first_name, s.middle_name, s.last_name, s.student_id HAVING COUNT(DISTINCT se.degree_program_id) = 2 AND COUNT(DISTINCT se.semester_id) = 1
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id, Students.first_name, Students.middle_name, Students.last_name HAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) = 2 AND COUNT(DISTINCT Student_Enrolment.semester_id) = 1 
SELECT Students.first_name, Students.middle_name, Students.last_name  FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  WHERE Degree_Programs.degree_summary_name = 'Bachelor'
SELECT Students.first_name, Students.middle_name, Students.last_name  FROM Students  JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  WHERE Degree_Programs.degree_summary_name = 'Bachelors'
SELECT Degree_Programs.degree_summary_name, COUNT(*) as enrolment_count FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_summary_name ORDER BY enrolment_count DESC LIMIT 1
SELECT Degree_Programs.degree_summary_name  FROM Degree_Programs  JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id  GROUP BY Degree_Programs.degree_summary_name  ORDER BY COUNT(Student_Enrolment.student_enrolment_id) DESC  LIMIT 1
SELECT T1.degree_program_id, T1.degree_summary_name FROM Degree_Programs AS T1 JOIN (     SELECT degree_program_id, count(*) AS enrollment_count     FROM Student_Enrolment     GROUP BY degree_program_id ) AS T3 ON T1.degree_program_id = T3.degree_program_id WHERE T3.enrollment_count = (     SELECT max(enrollment_count)     FROM (         SELECT degree_program_id, count(*) AS enrollment_count         FROM Student_Enrolment         GROUP BY degree_program_id     ) AS T4 )
SELECT Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description ORDER BY COUNT(Student_Enrolment.student_id) DESC LIMIT 1
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(Student_Enrolment.student_enrolment_id) AS enrollments FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY enrollments DESC LIMIT 1
SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id, COUNT(T2.student_enrolment_id) FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(T2.student_enrolment_id) DESC LIMIT 1
SELECT Semesters.semester_name FROM Semesters LEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id WHERE Student_Enrolment.student_enrolment_id IS NULL;
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT DISTINCT semester_id FROM Student_Enrolment)
SELECT DISTINCT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Student_Enrolment_Courses.course_id = Courses.course_id
SELECT course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id ORDER BY COUNT(T2.student_enrolment_id) DESC LIMIT 1
SELECT course_name FROM Courses WHERE course_id IN (   SELECT course_id   FROM Student_Enrolment_Courses   GROUP BY course_id   HAVING COUNT(*) = (     SELECT MAX(enrollment_count)     FROM (       SELECT course_id, COUNT(*) AS enrollment_count       FROM Student_Enrolment_Courses       GROUP BY course_id     ) AS counts   ) );
SELECT Students.last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id LEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id WHERE Addresses.state_province_county = 'North Carolina' AND Student_Enrolment.student_id IS NULL
SELECT Students.last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id LEFT JOIN Student_Enrolment ON Student_Enrolment.student_id = Students.student_id LEFT JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Addresses.state_province_county = 'North Carolina' AND Student_Enrolment.student_id IS NULL
SELECT transcript_id, transcript_date  FROM Transcripts  WHERE transcript_id IN (     SELECT transcript_id      FROM Transcript_Contents      GROUP BY transcript_id      HAVING COUNT(*) >= 2 )
SELECT T1.transcript_date, T1.transcript_id  
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
SELECT first_name, middle_name, last_name  FROM Students  ORDER BY date_first_registered ASC  LIMIT 1
SELECT first_name, middle_name, last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Transcripts ON Student_Enrolment.transcript_id = Transcripts.transcript_id ORDER BY Transcripts.transcript_date ASC LIMIT 1
SELECT first_name, middle_name, last_name FROM Students INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id INNER JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id INNER JOIN Transcript_Contents ON Student_Enrolment_Courses.student_course_id = Transcript_Contents.student_course_id INNER JOIN Transcripts ON Transcript_Contents.transcript_id = Transcripts.transcript_id ORDER BY Transcripts.transcript_date ASC LIMIT 1
SELECT Students.first_name  FROM Students JOIN Addresses AS current ON Students.current_address_id = current.address_id JOIN Addresses AS permanent ON Students.permanent_address_id = permanent.address_id WHERE current.line_1 <> permanent.line_1;
SELECT Students.first_name FROM Students JOIN Addresses AS perm_address ON Students.permanent_address_id = perm_address.address_id JOIN Addresses AS curr_address ON Students.current_address_id = curr_address.address_id WHERE perm_address.line_1 != curr_address.line_1;
SELECT Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3 FROM Addresses JOIN Students ON Students.current_address_id = Addresses.address_id GROUP BY Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3 ORDER BY COUNT(*) DESC LIMIT 1
SELECT Addresses.address_id, Addresses.line_1, Addresses.line_2  FROM Addresses  JOIN Students ON Addresses.address_id = Students.current_address_id GROUP BY Addresses.address_id, Addresses.line_1, Addresses.line_2 ORDER BY COUNT(*) DESC  LIMIT 1
SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts
SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
SELECT transcript_date, other_details  FROM Transcripts  ORDER BY transcript_date ASC  LIMIT 1
SELECT COUNT(transcript_id) FROM Transcripts
SELECT COUNT(*) FROM Transcripts
SELECT MAX(transcript_date) AS last_transcript_release_date FROM Transcripts
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
SELECT T1.student_course_id, COUNT(T2.transcript_id) AS count  FROM Student_Enrolment_Courses AS T1  JOIN Transcript_Contents AS T2 ON T1.student_course_id = T2.student_course_id  GROUP BY T1.student_course_id  ORDER BY count DESC  LIMIT 1
SELECT T2.course_id, COUNT(T1.transcript_id) AS count  FROM Transcript_Contents AS T1  JOIN Student_Enrolment_Courses AS T2 ON T1.student_course_id = T2.student_course_id  GROUP BY T2.course_id  ORDER BY count DESC  LIMIT 1
SELECT transcript_date, transcript_id FROM Transcripts WHERE transcript_id IN (     SELECT transcript_id     FROM Transcript_Contents     GROUP BY transcript_id     ORDER BY COUNT(*) ASC     LIMIT 1 )
SELECT transcript_date, transcript_id  FROM Transcripts  JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id  GROUP BY transcript_id  ORDER BY COUNT(Transcript_Contents.student_course_id) ASC  LIMIT 1
SELECT semester_name  FROM Semesters  WHERE semester_id IN (     SELECT semester_id      FROM Student_Enrolment      WHERE degree_program_id IN (         SELECT degree_program_id          FROM Degree_Programs          WHERE degree_summary_name = 'Master'     )      INTERSECT      SELECT semester_id      FROM Student_Enrolment      WHERE degree_program_id IN (         SELECT degree_program_id          FROM Degree_Programs          WHERE degree_summary_name = 'Bachelor'     ) )
SELECT Semesters.semester_id  FROM Semesters INNER JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Masters' INTERSECT SELECT Semesters.semester_id  FROM Semesters INNER JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelors'
SELECT COUNT(DISTINCT Students.current_address_id) FROM Students
SELECT DISTINCT Addresses.* FROM Addresses JOIN Students ON Students.permanent_address_id = Addresses.address_id OR Students.current_address_id = Addresses.address_id
SELECT Students.*  FROM Students  ORDER BY last_name DESC, first_name DESC
SELECT s.other_student_details, s.first_name, s.middle_name, s.last_name FROM Students s LEFT JOIN Addresses a ON s.current_address_id = a.address_id OR s.permanent_address_id = a.address_id ORDER BY s.last_name DESC;
SELECT DESCRIBE Sections;
SELECT section_description FROM Sections WHERE section_name = 'h'
SELECT first_name FROM Students  JOIN Addresses ON Students.permanent_address_id = Addresses.address_id  WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'
SELECT first_name FROM Students WHERE permanent_address_id IN (     SELECT address_id     FROM Addresses     WHERE country = 'Haiti' ) OR cell_mobile_number = '09700166582'
SELECT Title FROM Cartoon ORDER BY Title ASC
SELECT Title FROM Cartoon ORDER BY Title ASC
SELECT Cartoon.*  FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Directed_by = 'Ben Jones'
SELECT Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by = 'Ben Jones'
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
SELECT COUNT(id) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon INNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id ORDER BY Cartoon.Original_air_date ASC;
SELECT Cartoon.Title, Cartoon.Directed_by  FROM Cartoon  ORDER BY Cartoon.Original_air_date
SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Brandon Vietti'
SELECT Cartoon.Title  FROM Cartoon  WHERE Cartoon.Directed_by IN ('Ben Jones', 'Brandon Vietti')
SELECT Country, COUNT(id) AS num_channels  FROM TV_Channel  GROUP BY Country  ORDER BY num_channels DESC  LIMIT 1
SELECT Country, COUNT(*) AS num_channels FROM TV_Channel GROUP BY Country ORDER BY num_channels DESC LIMIT 1
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel
SELECT COUNT(DISTINCT TV_Channel.series_name), COUNT(DISTINCT TV_Channel.Content) FROM TV_Channel
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT T1.Package_Option  FROM TV_Channel AS T1  JOIN TV_series AS T2 ON T1.id = T2.Channel  WHERE T2.series_name = 'Sky Radio'
SELECT COUNT(DISTINCT id) FROM TV_Channel WHERE Language = 'English'
SELECT COUNT(DISTINCT id) FROM TV_Channel WHERE Language = 'English'
SELECT Language, COUNT(id) AS num_channels  FROM TV_Channel  GROUP BY Language  HAVING COUNT(id) = (   SELECT MIN(channel_count)    FROM (     SELECT COUNT(id) AS channel_count      FROM TV_Channel      GROUP BY Language   ) AS channel_counts )
SELECT language, COUNT(*) AS channel_count FROM TV_Channel GROUP BY language HAVING COUNT(*) = (     SELECT COUNT(*) AS min_count     FROM TV_Channel     GROUP BY language     ORDER BY min_count     LIMIT 1 )
SELECT Language, COUNT(DISTINCT TV_Channel.id) AS num_channels FROM TV_Channel GROUP BY Language
SELECT Language, COUNT(DISTINCT id) AS Num_Channels FROM TV_Channel GROUP BY Language
SELECT TV_Channel.series_name FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle!';
SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id JOIN TV_series ON TV_series.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle'
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio'
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio'
SELECT TV_series.Episode  FROM TV_series  ORDER BY TV_series.Rating DESC
SELECT TV_series.*  FROM TV_series ORDER BY Rating DESC
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3
SELECT TV_series.Episode, TV_series.Rating  FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3
SELECT MIN(Share), MAX(Share) FROM TV_series;
SELECT MAX(Share) AS Maximum_Share, MIN(Share) AS Minimum_Share FROM TV_series
SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = 'A Love of a Lifetime'
SELECT TV_series.Air_Date  FROM TV_series  WHERE TV_series.Episode = 'A Love of a Lifetime'
SELECT TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = 'A Love of a Lifetime'
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'
SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = "A Love of a Lifetime"
SELECT series_name  FROM TV_series  WHERE Episode = 'A Love of a Lifetime'
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio'
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"
SELECT Cartoon.Directed_by, COUNT(Cartoon.id)  FROM Cartoon  WHERE Cartoon.Directed_by IN ('director1', 'director2', 'director3')  GROUP BY Cartoon.Directed_by
SELECT Cartoon.Directed_by, COUNT(Cartoon.id) AS num_cartoons  FROM Cartoon JOIN TV_series ON Cartoon.Channel = TV_series.Channel GROUP BY Cartoon.Directed_by
SELECT Cartoon.Production_code, TV_Channel.series_name  FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  JOIN TV_series ON Cartoon.Title = TV_series.Episode  WHERE TV_series.Air_Date = (SELECT max(Air_Date) FROM TV_series)  ORDER BY TV_series.Air_Date DESC  LIMIT 1
SELECT Production_code, TV_Channel.Channel FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = true
SELECT TV_Channel.Package_Option, TV_series.series_name  FROM TV_Channel  JOIN TV_series ON TV_Channel.id = TV_series.Channel  WHERE TV_Channel.High_definition_TV = 1
SELECT DISTINCT TV_Channel.Country  FROM TV_Channel  JOIN Cartoon ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Written_by = 'Todd Casey'
SELECT DISTINCT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey'
SELECT DISTINCT Country  FROM TV_Channel  WHERE id NOT IN (   SELECT Channel    FROM Cartoon    WHERE Written_by = 'Todd Casey' )
SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (   SELECT Channel   FROM Cartoon   WHERE Written_by = 'Todd Casey' )
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id JOIN TV_series ON TV_series.id = Cartoon.Channel WHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Michael Chang'
SELECT T1.series_name, T1.Country  FROM TV_Channel AS T1  JOIN Cartoon AS T2 ON T1.id = T2.Channel  WHERE T2.Directed_by IN ('Ben Jones', 'Michael Chang')
SELECT Pixel_aspect_ratio_PAR, Country  FROM TV_Channel  WHERE Language != 'English'
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> 'English'
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.Country HAVING count(*) > 2
SELECT TV_Channel.id FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel GROUP BY TV_Channel.id HAVING COUNT(TV_series.id) > 2
SELECT TV_Channel.id FROM TV_Channel LEFT JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.Directed_by IS NULL
SELECT TV_Channel.id  FROM TV_Channel  WHERE TV_Channel.id NOT IN (   SELECT Cartoon.Channel    FROM Cartoon    JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id    WHERE Cartoon.Directed_by = 'Ben Jones' )
SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')
SELECT DISTINCT Package_Option  FROM TV_Channel  WHERE id NOT IN (   SELECT Channel    FROM Cartoon    WHERE Directed_by = 'Ben Jones' )
SELECT COUNT(*) FROM poker_player
SELECT COUNT(DISTINCT People_ID) FROM poker_player
SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC
SELECT poker_player.Earnings FROM poker_player ORDER BY Earnings DESC;
SELECT Final_Table_Made, Best_Finish  FROM poker_player  INNER JOIN people ON poker_player.People_ID = people.People_ID
SELECT poker_player.Final_Table_Made, poker_player.Best_Finish  FROM poker_player  INNER JOIN people ON poker_player.People_ID = people.People_ID
SELECT AVG(Earnings) AS Average_Earnings FROM poker_player
SELECT AVG(Earnings) FROM poker_player
SELECT poker_player.Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)
SELECT poker_player.Money_Rank FROM poker_player ORDER BY poker_player.Earnings DESC LIMIT 1
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;
SELECT MAX(Final_Table_Made)  FROM poker_player  WHERE Earnings < 200000;
SELECT Name FROM people
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID
SELECT Name FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000
SELECT people.Name  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Final_Table_Made ASC
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC
SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings = (   SELECT min(Earnings)   FROM poker_player )
SELECT P.Birth_Date FROM people AS P JOIN poker_player AS PP ON P.People_ID = PP.People_ID ORDER BY PP.Earnings ASC LIMIT 1
SELECT poker_player.Money_Rank  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  ORDER BY people.Height DESC  LIMIT 1
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1
SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200
SELECT AVG(poker_player.Earnings)  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  WHERE people.Height > 200
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC
SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID ORDER BY pp.Earnings DESC
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality
SELECT Nationality, COUNT(*)  FROM people  GROUP BY Nationality
SELECT Nationality, COUNT(*) as Count  FROM people  GROUP BY Nationality  ORDER BY Count DESC  LIMIT 1
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Nationality  FROM people AS T1  JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID  GROUP BY T1.Nationality  HAVING COUNT(DISTINCT T1.People_ID) >= 2
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Name, Birth_Date FROM people ORDER BY Name COLLATE NOCASE ASC
SELECT Name, Birth_Date FROM people ORDER BY Name ASC
SELECT Name  FROM people  WHERE Nationality <> 'Russia'
SELECT Name FROM people WHERE Nationality <> 'Russia'
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
SELECT Name FROM people LEFT JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.People_ID IS NULL
SELECT COUNT(DISTINCT Nationality) FROM people
SELECT COUNT(DISTINCT Nationality) AS Total_Nationalities FROM people
SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE
SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC
SELECT vote_id, phone_number, state FROM VOTES
SELECT max(area_code) AS max_area_code, min(area_code) AS min_area_code FROM AREA_CODE_STATE
SELECT MAX(created) AS last_date_created FROM VOTES WHERE state = 'CA'
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name <> 'Jessie Alloway'
SELECT DISTINCT state, created FROM VOTES
SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name  FROM CONTESTANTS  WHERE CONTESTANTS.contestant_number IN (     SELECT VOTES.contestant_number      FROM VOTES      GROUP BY VOTES.contestant_number      HAVING COUNT(*) >= 2 )
SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN (     SELECT contestant_number     FROM VOTES ) GROUP BY contestant_number, contestant_name ORDER BY COUNT(*) ASC LIMIT 1
SELECT COUNT(VOTES.vote_id) FROM VOTES JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state WHERE AREA_CODE_STATE.state = 'NY' OR AREA_CODE_STATE.state = 'CA'
SELECT COUNT(*)  FROM CONTESTANTS  LEFT JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number  WHERE VOTES.contestant_number IS NULL
SELECT area_code FROM AREA_CODE_STATE  JOIN VOTES ON AREA_CODE_STATE.state = VOTES.state  GROUP BY area_code  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT created, state, phone_number FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling'
SELECT SELECT DISTINCT a.area_code FROM AREA_CODE_STATE a JOIN VOTES v1 ON v1.state = a.state JOIN CONTESTANTS c1 ON c1.contestant_number = v1.contestant_number JOIN VOTES v2 ON v2.state = a.state JOIN CONTESTANTS c2 ON c2.contestant_number = v2.contestant_number WHERE c1.contestant_name = 'Tabatha Gehling' AND c2.contestant_name = 'Kelly Clauss';
SELECT contestant_name  FROM CONTESTANTS  WHERE contestant_name LIKE '%Al%'
SELECT country.Name FROM country WHERE country.IndepYear > 1950
SELECT Name FROM country WHERE IndepYear > 1950
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic'
SELECT COUNT(DISTINCT Code) FROM country WHERE GovernmentForm = 'Republic'
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Region = 'Caribbean'
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Caribbean'
SELECT Continent FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Name = 'Anguilla'
SELECT Continent FROM country WHERE Code = (SELECT CountryCode FROM city WHERE Name = 'Anguilla')
SELECT country.Region  FROM country  JOIN city ON country.Code = city.CountryCode  WHERE city.Name = 'Kabul'
SELECT country.Region FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Name = 'Kabul'
SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba') ORDER BY Percentage DESC LIMIT 1
SELECT countrylanguage.Language FROM countrylanguage JOIN city ON city.CountryCode = countrylanguage.CountryCode JOIN country ON country.Code = city.CountryCode WHERE city.Name = 'Aruba' ORDER BY countrylanguage.Percentage DESC LIMIT 1
SELECT Population, LifeExpectancy  FROM country  WHERE Name = 'Brazil'
SELECT Population, LifeExpectancy  FROM country  WHERE Code = 'BRA'
SELECT Region, Population FROM country WHERE country.Name = 'Angola'
SELECT Region, Population FROM country WHERE Code = (SELECT CountryCode FROM city WHERE Name = 'Angola')
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy  FROM country  WHERE Continent = 'Africa' AND Region = 'Central Africa'
SELECT c.Name  FROM country c  WHERE c.Continent = 'Asia'  ORDER BY c.LifeExpectancy ASC  LIMIT 1
SELECT country.Name  FROM country  WHERE Continent = 'Asia'  ORDER BY LifeExpectancy ASC  LIMIT 1
SELECT SUM(country.Population) AS TotalPopulation, MAX(country.GNP) AS MaximumGNP FROM country JOIN city ON country.Code = city.CountryCode WHERE country.Continent = 'Asia'
SELECT SUM(country.Population) AS total_population, MAX(country.GNP) AS largest_GNP FROM country WHERE country.Continent = 'Asia'
SELECT AVG(LifeExpectancy)  FROM country  WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'
SELECT AVG(LifeExpectancy)  FROM country  WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'
SELECT SUM(Population) FROM city WHERE District = 'Gelderland'
SELECT SUM(city.Population)  FROM city  JOIN country ON city.CountryCode = country.Code  WHERE city.District = 'Gelderland'
SELECT avg(GNP), sum(Population)  FROM country  WHERE GovernmentForm = 'US territory'
SELECT avg(country.GNP) AS mean_GNP, sum(country.Population) AS total_population FROM country JOIN city ON city.CountryCode = country.Code JOIN countrylanguage ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'North America' AND city.Name = 'United States' AND countrylanguage.Language = 'English'
SELECT COUNT(DISTINCT Language) AS UniqueLanguages FROM countrylanguage
SELECT COUNT(DISTINCT Language) FROM countrylanguage
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'
SELECT count(DISTINCT GovernmentForm)  FROM country  WHERE Continent = 'Africa'
SELECT COUNT(DISTINCT countrylanguage.Language)  FROM countrylanguage  JOIN city ON city.CountryCode = countrylanguage.CountryCode  WHERE city.Name = 'Aruba'
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW'
SELECT COUNT(DISTINCT countrylanguage.Language)  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.Name = 'Afghanistan'  AND countrylanguage.IsOfficial = 'T'
SELECT COUNT(DISTINCT Language)  FROM countrylanguage  WHERE CountryCode = 'AFG'  AND IsOfficial = 'T'
SELECT country.Name  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  GROUP BY country.Name  ORDER BY COUNT(DISTINCT countrylanguage.Language) DESC  LIMIT 1
SELECT country.Name  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING count(DISTINCT countrylanguage.Language) =      (SELECT MAX(language_count)      FROM (SELECT COUNT(DISTINCT Language) AS language_count          FROM countrylanguage          GROUP BY CountryCode) AS T)
SELECT country.Continent FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Continent ORDER BY COUNT(DISTINCT countrylanguage.Language) DESC LIMIT 1
SELECT Continent, COUNT(DISTINCT Language) AS LanguageCount FROM countrylanguage INNER JOIN country ON country.Code = countrylanguage.CountryCode GROUP BY Continent ORDER BY LanguageCount DESC LIMIT 1
SELECT COUNT(*) FROM countrylanguage WHERE Language IN ('English', 'Dutch') AND IsOfficial = 'T' GROUP BY CountryCode HAVING COUNT(*) = 2.
SELECT COUNT(DISTINCT country.Code) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'Dutch')
SELECT Name FROM country WHERE Code IN (     SELECT CountryCode     FROM countrylanguage     WHERE Language = 'English' ) AND Code IN (     SELECT CountryCode     FROM countrylanguage     WHERE Language = 'French' )
SELECT C1.Name  FROM country AS C1  JOIN countrylanguage AS CL1 ON C1.Code = CL1.CountryCode  JOIN countrylanguage AS CL2 ON C1.Code = CL2.CountryCode  WHERE CL1.Language = 'English'  AND CL2.Language = 'French' GROUP BY C1.Name
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language IN ('English', 'French') AND T2.IsOfficial = 'T' GROUP BY T1.Name HAVING COUNT(DISTINCT T2.Language) = 2
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T')    OR (countrylanguage.Language = 'French' AND countrylanguage.IsOfficial = 'T')
SELECT COUNT(DISTINCT T1.Continent)  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  WHERE T2.Language = 'Chinese'
SELECT COUNT(DISTINCT country.Continent)  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language = 'Chinese'
SELECT DISTINCT country.Region  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch'
SELECT DISTINCT country.Region  FROM country  JOIN city ON city.CountryCode = country.Code  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language = 'Dutch' OR countrylanguage.Language = 'English'
SELECT country.Name  FROM country  JOIN countrylanguage  ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Language IN ('English', 'Dutch')  AND countrylanguage.IsOfficial = 1
SELECT DISTINCT country.Name  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE (countrylanguage.Language = "English" OR countrylanguage.Language = "Dutch")  AND countrylanguage.IsOfficial = "Yes"
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' GROUP BY countrylanguage.Language ORDER BY SUM(countrylanguage.Percentage) DESC LIMIT 1
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode JOIN city ON country.Code = city.CountryCode WHERE country.Continent = 'Asia' GROUP BY countrylanguage.Language ORDER BY COUNT(DISTINCT country.Code) DESC LIMIT 1
SELECT Language FROM countrylanguage WHERE CountryCode IN (     SELECT Code     FROM country     WHERE GovernmentForm = 'Republic' ) GROUP BY Language HAVING COUNT(DISTINCT CountryCode) = 1
SELECT Language  FROM countrylanguage  WHERE Language IN (     SELECT Language      FROM countrylanguage      GROUP BY Language      HAVING COUNT(DISTINCT CountryCode) = 1 ) AND CountryCode IN (     SELECT Code      FROM country      WHERE GovernmentForm = 'Republic' )
SELECT city.Name  FROM city  JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode  JOIN country ON city.CountryCode = country.Code  WHERE countrylanguage.Language = 'English'  GROUP BY city.Name  ORDER BY city.Population DESC  LIMIT 1
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1
SELECT c.Name, c.Population, c.LifeExpectancy FROM country c JOIN city ct ON c.Code = ct.CountryCode WHERE c.Continent = 'Asia' GROUP BY c.Name, c.Population, c.LifeExpectancy HAVING c.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Asia')
SELECT country.Name, country.Population, country.LifeExpectancy  FROM country  WHERE country.Continent = 'Asia'  AND country.SurfaceArea > 0  ORDER BY country.SurfaceArea DESC  LIMIT 1
SELECT AVG(country.LifeExpectancy) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language <> "English" AND countrylanguage.IsOfficial = "No"
SELECT avg(LifeExpectancy)  FROM country  WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')
SELECT SUM(country.Population)  FROM country  WHERE country.Code NOT IN (     SELECT countrylanguage.CountryCode      FROM countrylanguage      WHERE countrylanguage.Language = 'English'      AND countrylanguage.IsOfficial = 'T' )
SELECT SUM(country.Population)  FROM country  WHERE country.Code NOT IN (   SELECT countrylanguage.CountryCode    FROM countrylanguage    WHERE countrylanguage.Language = 'English' )
SELECT Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T'
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T'
SELECT COUNT(DISTINCT countrylanguage.Language) FROM country JOIN city ON country.Code = city.CountryCode JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 1930
SELECT COUNT(DISTINCT countrylanguage.Language)  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.IndepYear < 1930  AND countrylanguage.IsOfficial = 'T'
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')
SELECT T1.Name  FROM country AS T1  WHERE T1.Continent = 'Africa'  AND T1.Population < (SELECT MIN(T2.Population)                       FROM country AS T2                       WHERE T2.Continent = 'Asia')
SELECT c1.Name  FROM country AS c1  WHERE c1.Continent = 'Africa'  AND c1.Population < (     SELECT MIN(c2.Population)      FROM country AS c2      WHERE c2.Continent = 'Asia' )
SELECT T1.Name  FROM country AS T1  WHERE T1.Continent = 'Asia'  AND T1.Population > (   SELECT MAX(T2.Population)    FROM country AS T2    WHERE T2.Continent = 'Africa' )
SELECT C1.Name FROM country AS C1 WHERE C1.Continent = 'Asia'  AND C1.Population > (SELECT MAX(C2.Population) FROM country AS C2 WHERE C2.Continent = 'Africa')
SELECT Code  FROM country  WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')
SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language <> 'English'
SELECT DISTINCT CountryCode  FROM countrylanguage  WHERE Language <> 'English'
SELECT DISTINCT CountryCode  FROM countrylanguage  WHERE Language != 'English'
SELECT Code  FROM country  WHERE Code NOT IN (     SELECT CountryCode      FROM countrylanguage      WHERE Language <> 'English' )  AND GovernmentForm <> 'Republic'
SELECT T1.Code  FROM country AS T1  LEFT JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  WHERE T2.Language <> 'English'  AND T1.GovernmentForm <> 'Republic'  AND T2.IsOfficial = 'T'
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Europe' AND countrylanguage.Language <> 'English' AND countrylanguage.IsOfficial <> 'T'
SELECT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode  WHERE country.Continent = 'Europe'  AND countrylanguage.Language <> 'English'  AND countrylanguage.IsOfficial = 'F'
SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
SELECT DISTINCT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode  WHERE city.Continent = 'Asia'  AND countrylanguage.Language = 'Chinese'  AND countrylanguage.IsOfficial = 'T'
SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1
SELECT Name, IndepYear, SurfaceArea  FROM country  WHERE Population = (   SELECT MIN(Population)    FROM country )
SELECT Population, Name, HeadOfState FROM country WHERE SurfaceArea = (   SELECT MAX(SurfaceArea)   FROM country )
SELECT Name, Population, HeadOfState FROM country WHERE SurfaceArea = (     SELECT MAX(SurfaceArea)     FROM country )
SELECT T1.Name, COUNT(T2.Language)  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  GROUP BY T1.Name  HAVING COUNT(T2.Language) >= 3
SELECT T1.Name, COUNT(T2.Language) AS LanguageCount  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  GROUP BY T1.Name  HAVING LanguageCount > 2
SELECT district, COUNT(*)  FROM city  WHERE population > (SELECT AVG(population) FROM city)  GROUP BY district
SELECT District, COUNT(*)  FROM city  WHERE Population > (SELECT AVG(Population) FROM city)  GROUP BY District
SELECT GovernmentForm, SUM(Population)  FROM country  WHERE LifeExpectancy > 72  GROUP BY GovernmentForm
SELECT governmentForm, SUM(Population)  FROM country  WHERE governmentForm IN (SELECT DISTINCT governmentForm                           FROM country                           WHERE LifeExpectancy > 72)  GROUP BY governmentForm
SELECT country.Continent, AVG(country.LifeExpectancy), SUM(country.Population) FROM country JOIN city ON country.Code = city.CountryCode JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72
SELECT Continent, SUM(Population) AS TotalPopulation, AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72
SELECT Name, SurfaceArea  FROM country  ORDER BY SurfaceArea DESC  LIMIT 5
SELECT Name, SurfaceArea  FROM country  ORDER BY SurfaceArea DESC  LIMIT 5
SELECT country.Name  FROM country  ORDER BY country.Population DESC  LIMIT 3
SELECT country.Name  FROM country  ORDER BY country.Population DESC  LIMIT 3
SELECT Name  FROM country  ORDER BY Population ASC  LIMIT 3
SELECT Name FROM country ORDER BY Population LIMIT 3
SELECT COUNT(*) FROM country WHERE Continent = 'Asia'
SELECT COUNT(Code) FROM country WHERE Continent = 'Asia'
SELECT country.Name  FROM country  WHERE country.Continent = 'Europe'  AND country.Population = 80000
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000
SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;
SELECT sum(Population), avg(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000 GROUP BY Continent
SELECT ID, Name, CountryCode, District, Population  FROM city  WHERE Population BETWEEN 160000 AND 900000;
SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000
SELECT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language HAVING COUNT(DISTINCT countrylanguage.CountryCode) = (   SELECT MAX(num_countries)   FROM (     SELECT COUNT(DISTINCT country.Code) as num_countries     FROM country     JOIN countrylanguage ON country.Code = countrylanguage.CountryCode     GROUP BY countrylanguage.Language   ) as subquery )
SELECT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language ORDER BY COUNT(DISTINCT countrylanguage.CountryCode) DESC LIMIT 1
SELECT T1.CountryCode, T1.Language  FROM countrylanguage AS T1  JOIN (SELECT CountryCode, MAX(Percentage) AS MaxPercentage        FROM countrylanguage        GROUP BY CountryCode) AS T2  ON T1.CountryCode = T2.CountryCode  AND T1.Percentage = T2.MaxPercentage
SELECT country.Code, MAX(countrylanguage.Language) AS Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING countrylanguage.Percentage = MAX(countrylanguage.Percentage) ORDER BY country.Code ASC
SELECT COUNT(DISTINCT countrylanguage.CountryCode) AS TotalCountries FROM countrylanguage WHERE countrylanguage.Language = 'Spanish' GROUP BY countrylanguage.Language HAVING countrylanguage.Percentage = MAX(countrylanguage.Percentage)
SELECT COUNT(DISTINCT country.Code) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Spanish' AND countrylanguage.IsOfficial = 'T'
SELECT countrylanguage.CountryCode  FROM countrylanguage  WHERE Language = 'Spanish'  GROUP BY countrylanguage.CountryCode  ORDER BY MAX(Percentage) DESC  LIMIT 1
SELECT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Spanish'   AND countrylanguage.Percentage > 50
SELECT COUNT(DISTINCT Conductor_ID) FROM conductor
SELECT COUNT(Conductor_ID) FROM conductor
SELECT conductor.Name FROM conductor ORDER BY conductor.Age ASC
SELECT Name FROM conductor ORDER BY Age ASC
SELECT Name FROM conductor WHERE Nationality <> 'USA'
SELECT Name FROM conductor WHERE Nationality <> 'USA'
SELECT orchestra.Record_Company  FROM orchestra  ORDER BY orchestra.Year_of_Founded DESC
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
SELECT AVG(Attendance) FROM show
SELECT AVG(Attendance) FROM show;
SELECT MAX(Share), MIN(Share)  FROM performance  WHERE Type <> 'Live final'
SELECT max(Share), min(Share)  FROM performance  WHERE Type <> 'Live final';
SELECT COUNT(DISTINCT Nationality) AS Num_Nationalities FROM conductor
SELECT COUNT(DISTINCT Nationality) AS NationalityCount FROM conductor
SELECT c.Name FROM conductor c ORDER BY c.Year_of_Work DESC
SELECT Name, COUNT(Year_of_Work) AS Years_Worked  FROM conductor  GROUP BY Name  ORDER BY Years_Worked DESC
SELECT conductor.Name  FROM conductor  ORDER BY conductor.Year_of_Work DESC  LIMIT 1
SELECT conductor.Name  FROM conductor  GROUP BY conductor.Conductor_ID, conductor.Name  ORDER BY COUNT(conductor.Year_of_Work) DESC  LIMIT 1
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT Name FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1
SELECT T1.Name  FROM conductor AS T1  WHERE T1.Conductor_ID IN (   SELECT T2.Conductor_ID    FROM orchestra AS T2    GROUP BY T2.Conductor_ID    HAVING COUNT(DISTINCT T2.Orchestra_ID) = (     SELECT MAX(orchestra_count)      FROM (       SELECT COUNT(DISTINCT T3.Orchestra_ID) AS orchestra_count        FROM orchestra AS T3        GROUP BY T3.Conductor_ID     ) AS counts   ) )
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID ORDER BY COUNT(T2.Orchestra_ID) DESC LIMIT 1
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008
SELECT conductor.Name  FROM conductor  JOIN orchestra ON orchestra.Conductor_ID = conductor.Conductor_ID  WHERE orchestra.Year_of_Founded > 2008
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) FROM orchestra GROUP BY Record_Company
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS num_orchestras FROM orchestra GROUP BY Record_Company
SELECT Major_Record_Format, COUNT(*) AS Count FROM orchestra GROUP BY Major_Record_Format ORDER BY Count;
SELECT Major_Record_Format, COUNT(*) AS Frequency  FROM orchestra  GROUP BY Major_Record_Format  ORDER BY Frequency DESC
SELECT Record_Company, COUNT(*) AS Orchestra_Count FROM orchestra GROUP BY Record_Company ORDER BY Orchestra_Count DESC LIMIT 1
SELECT Record_Company, COUNT(Orchestra_ID) AS Orchestra_Count FROM orchestra GROUP BY Record_Company ORDER BY Orchestra_Count DESC LIMIT 1
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (     SELECT Orchestra_ID     FROM performance )
SELECT Orchestra FROM orchestra WHERE NOT EXISTS (   SELECT *   FROM performance   WHERE performance.Orchestra_ID = orchestra.Orchestra_ID )
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 OR Year_of_Founded > 2003
SELECT Record_Company  FROM orchestra  WHERE Year_of_Founded < 2003  INTERSECT  SELECT Record_Company  FROM orchestra  WHERE Year_of_Founded > 2003
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')
SELECT Year_of_Founded FROM orchestra  JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID  GROUP BY orchestra.Year_of_Founded  HAVING COUNT(*) > 1
SELECT DISTINCT Year_of_Founded  FROM orchestra  WHERE Orchestra_ID IN (   SELECT Orchestra_ID    FROM performance    GROUP BY Orchestra_ID    HAVING COUNT(*) > 1 )
SELECT COUNT(*) FROM Highschooler
SELECT COUNT(DISTINCT ID) FROM Highschooler
SELECT name, grade FROM Highschooler
SELECT name, grade FROM Highschooler
SELECT grade FROM Highschooler
SELECT grade FROM Highschooler
SELECT grade FROM Highschooler WHERE name = 'Kyle'
SELECT grade FROM Highschooler WHERE name = 'Kyle'
SELECT Highschooler.name  FROM Highschooler  WHERE Highschooler.grade = 10
SELECT name FROM Highschooler WHERE grade = 10
SELECT ID FROM Highschooler WHERE name = 'Kyle'
SELECT ID FROM Highschooler WHERE name = 'Kyle'
SELECT COUNT(DISTINCT ID) FROM Highschooler WHERE grade IN (9, 10)
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)
SELECT grade, COUNT(ID)  FROM Highschooler  GROUP BY grade
SELECT grade, COUNT(ID) FROM Highschooler GROUP BY grade
SELECT grade, COUNT(*) as count FROM Highschooler GROUP BY grade ORDER BY count DESC LIMIT 1
SELECT grade, COUNT(*) AS count FROM Highschooler GROUP BY grade ORDER BY count DESC LIMIT 1
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4
SELECT grade  FROM Highschooler  GROUP BY grade  HAVING COUNT(*) >= 4
SELECT Highschooler.ID, COUNT(Friend.friend_id) AS number_of_friends  FROM Highschooler  LEFT JOIN Friend ON Highschooler.ID = Friend.student_id  GROUP BY Highschooler.ID
SELECT T1.ID, COUNT(T2.friend_id) AS friend_count FROM Highschooler AS T1 LEFT JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID
SELECT Highschooler.name, COUNT(Friend.friend_id) AS friend_count FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name
SELECT Highschooler.name, COUNT(Friend.friend_id) AS friend_count FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID;
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID HAVING COUNT(*) = (     SELECT MAX(friend_count)     FROM (         SELECT COUNT(*) AS friend_count         FROM Friend         GROUP BY student_id     ) AS counts )
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID IN (   SELECT Friend.student_id   FROM Friend   GROUP BY Friend.student_id   HAVING COUNT(*) >= 3 )
SELECT name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING COUNT(Friend.friend_id) >= 3
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.friend_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT DISTINCT T2.name FROM Highschooler AS T1 JOIN Friend AS T3 ON T3.friend_id = T1.ID JOIN Highschooler AS T2 ON T2.ID = T3.student_id WHERE T1.name = 'Kyle'
SELECT COUNT(*) FROM Friend JOIN Highschooler ON Highschooler.ID = Friend.student_id WHERE Highschooler.name = 'Kyle'
SELECT COUNT(*) FROM Friend  JOIN Highschooler ON Friend.friend_id = Highschooler.ID  WHERE Highschooler.name = 'Kyle'
SELECT Highschooler.ID FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.friend_id IS NULL
SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT Highschooler.name FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.friend_id IS NULL
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT DISTINCT Highschooler.ID FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id JOIN Likes ON Highschooler.ID = Likes.liked_id WHERE Highschooler.ID IN (   SELECT friend_id   FROM Friend )
SELECT DISTINCT ID FROM Highschooler WHERE ID IN (   SELECT student_id   FROM Friend ) AND ID IN (   SELECT student_id   FROM Likes ) AND ID IN (   SELECT friend_id   FROM Friend ) AND ID IN (   SELECT liked_id   FROM Likes )
SELECT DISTINCT H.name FROM Highschooler AS H JOIN Friend AS F ON F.student_id = H.ID JOIN Likes AS L ON L.student_id = H.ID WHERE H.ID <> L.liked_id
SELECT T1.name FROM Highschooler AS T1  JOIN Friend AS T2 ON T1.ID = T2.student_id  JOIN Likes AS T3 ON T1.ID = T3.student_id GROUP BY T1.name
SELECT student_id, COUNT(*) AS like_count  FROM Likes  GROUP BY student_id
SELECT student_id, COUNT(*) AS like_count FROM Likes GROUP BY student_id
SELECT Highschooler.name, COUNT(Likes.liked_id) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name
SELECT Highschooler.name, COUNT(Likes.liked_id)  FROM Highschooler  JOIN Likes ON Highschooler.ID = Likes.student_id  GROUP BY Highschooler.name
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID = (     SELECT Likes.student_id     FROM Likes     GROUP BY Likes.student_id     ORDER BY COUNT(*) DESC     LIMIT 1 )
SELECT Highschooler.name  FROM Highschooler  WHERE ID = (   SELECT student_id    FROM Likes    GROUP BY student_id    ORDER BY COUNT(*) DESC    LIMIT 1 )
SELECT T1.name FROM Highschooler AS T1 WHERE T1.ID IN (     SELECT T2.student_id     FROM Likes AS T2     GROUP BY T2.student_id     HAVING COUNT(*) >= 2 )
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name HAVING COUNT(Likes.liked_id) >= 2
SELECT name  FROM Highschooler  WHERE grade > 5  AND (SELECT COUNT(*)       FROM Friend       WHERE student_id = Highschooler.ID) >= 2
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING Highschooler.grade > 5 AND COUNT(DISTINCT Friend.friend_id) >= 2
SELECT COUNT(*) FROM Likes  JOIN Highschooler ON Likes.student_id = Highschooler.ID  WHERE Highschooler.name = 'Kyle'
SELECT COUNT(*)  FROM Likes  WHERE student_id = (   SELECT ID    FROM Highschooler    WHERE name = 'Kyle' )
SELECT avg(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend)
SELECT avg(grade) AS average_grade FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)
SELECT min(grade)  FROM Highschooler  WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT min(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT DISTINCT Owners.state  FROM Owners  JOIN Professionals ON Owners.state = Professionals.state
SELECT state FROM Owners WHERE state IN (SELECT state FROM Professionals)
SELECT AVG(Dogs.age) AS average_age FROM Dogs INNER JOIN Treatments ON Treatments.dog_id = Dogs.dog_id
SELECT AVG(Dogs.age) AS average_age FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
SELECT professional_id, last_name, cell_number  FROM Professionals  WHERE state = 'Indiana' OR professional_id IN (     SELECT professional_id      FROM Treatments      GROUP BY professional_id      HAVING COUNT(*) > 2 )
SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals WHERE Professionals.state = 'Indiana' OR Professionals.professional_id IN (     SELECT professional_id     FROM Treatments     GROUP BY professional_id     HAVING COUNT(*) > 2 )
SELECT name FROM Dogs WHERE dog_id NOT IN (     SELECT dog_id     FROM Treatments     WHERE cost_of_treatment > 1000 )
SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.name HAVING SUM(Treatments.cost_of_treatment) <= 1000
SELECT DISTINCT Professionals.first_name FROM Professionals LEFT JOIN Owners ON Professionals.first_name = Owners.first_name LEFT JOIN Dogs ON Professionals.first_name = Dogs.name WHERE Owners.owner_id IS NULL AND Dogs.dog_id IS NULL
SELECT DISTINCT T1.first_name  FROM Professionals AS T1  LEFT JOIN Owners AS T2 ON T1.first_name = T2.first_name  LEFT JOIN Dogs AS T3 ON T1.first_name = T3.name  WHERE T2.owner_id IS NULL AND T3.dog_id IS NULL
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT professional_id, role_code, email_address  FROM Professionals  WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT Owners.owner_id, Owners.first_name, Owners.last_name  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id  GROUP BY Owners.owner_id  HAVING COUNT(Dogs.dog_id) = (     SELECT MAX(owner_count)      FROM (         SELECT owner_id, COUNT(*) as owner_count          FROM Dogs          GROUP BY owner_id     ) AS dog_counts )
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1
SELECT T1.professional_id, T1.role_code, T1.first_name  FROM Professionals AS T1  JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T1.professional_id, T1.role_code, T1.first_name  HAVING COUNT(*) >= 2
SELECT T1.professional_id, T1.role_code, T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id, T1.role_code, T1.first_name HAVING COUNT(*) >= 2
SELECT Breeds.breed_name  FROM Breeds  JOIN Dogs ON Dogs.breed_code = Breeds.breed_code  GROUP BY Breeds.breed_name  ORDER BY COUNT(Dogs.dog_id) DESC  LIMIT 1
SELECT Breeds.breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY Breeds.breed_name ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1
SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.last_name ORDER BY COUNT(Treatments.treatment_id) DESC LIMIT 1
SELECT T1.owner_id, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id, T1.last_name ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1.
SELECT Treatment_Types.treatment_type_description FROM Treatment_Types WHERE Treatment_Types.treatment_type_code = (     SELECT Treatments.treatment_type_code     FROM Treatments     GROUP BY Treatments.treatment_type_code     ORDER BY SUM(Treatments.cost_of_treatment) ASC     LIMIT 1 )
SELECT Treatment_Types.treatment_type_description  FROM Treatment_Types  JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code  GROUP BY Treatment_Types.treatment_type_description  ORDER BY SUM(Treatments.cost_of_treatment) ASC  LIMIT 1
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Treatments.dog_id = Dogs.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Treatments.dog_id = Dogs.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1
SELECT T1.professional_id, T1.cell_number  FROM Professionals AS T1  JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T1.professional_id  HAVING COUNT(DISTINCT T2.treatment_type_code) >= 2.
SELECT T1.professional_id, T1.cell_number  FROM Professionals AS T1  JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T1.professional_id, T1.cell_number  HAVING COUNT(DISTINCT T2.treatment_type_code) >= 2
SELECT first_name, last_name  FROM Professionals  WHERE professional_id IN (   SELECT professional_id    FROM Treatments    WHERE cost_of_treatment < (     SELECT avg(cost_of_treatment)      FROM Treatments   ) )
SELECT SELECT Professionals.first_name, Professionals.last_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments) GROUP BY Professionals.professional_id
SELECT Treatments.date_of_treatment, Professionals.first_name  FROM Treatments  JOIN Professionals ON Treatments.professional_id = Professionals.professional_id
SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code
SELECT Owners.first_name, Dogs.name  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id
SELECT T1.first_name, T2.name  FROM Owners AS T1  JOIN Dogs AS T2 ON T2.owner_id = T1.owner_id
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Treatments ON Treatments.dog_id = Dogs.dog_id WHERE Breeds.breed_name = (     SELECT breed_name     FROM Breeds     GROUP BY breed_name     ORDER BY COUNT(*) ASC     LIMIT 1 )
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Treatments ON Treatments.dog_id = Dogs.dog_id GROUP BY Dogs.name HAVING COUNT(DISTINCT Dogs.breed_code) = 1 ORDER BY Treatments.date_of_treatment ASC
SELECT Owners.first_name, Dogs.name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Owners.state = 'Virginia'
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia'
SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.age ASC LIMIT 1
SELECT Owners.last_name  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.date_of_birth = (SELECT min(date_of_birth) FROM Dogs)
SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin')
SELECT email_address  FROM Professionals  WHERE state = 'Hawaii' OR state = 'Wisconsin'
SELECT date_arrived, date_departed FROM Dogs
SELECT date_arrived, date_departed  FROM Dogs
SELECT COUNT(DISTINCT dog_id) FROM Treatments
SELECT COUNT(DISTINCT Dogs.dog_id) FROM Treatments  JOIN Dogs ON Treatments.dog_id = Dogs.dog_id
SELECT COUNT(DISTINCT Professionals.professional_id)  FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id
SELECT COUNT(DISTINCT professional_id) FROM Treatments
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'
SELECT first_name, last_name, email_address  FROM Owners  WHERE state LIKE '%North%'
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(dog_id) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT cost_of_treatment  FROM Treatments  ORDER BY date_of_treatment DESC  LIMIT 1
SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment DESC LIMIT 1
SELECT COUNT(DISTINCT dog_id) AS total_dogs_without_treatment FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT COUNT(DISTINCT dog_id) FROM Dogs WHERE dog_id NOT IN (SELECT DISTINCT dog_id FROM Treatments)
SELECT COUNT(*) FROM Owners LEFT JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.owner_id IS NULL
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs)
SELECT COUNT(DISTINCT professional_id) FROM Professionals LEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.professional_id IS NULL
SELECT COUNT(DISTINCT professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT name, age, weight  FROM Dogs  WHERE abandoned_yn = 1
SELECT name, age, weight  FROM Dogs  WHERE abandoned_yn = 1
SELECT AVG(age) FROM Dogs
SELECT AVG(age) AS average_age FROM Dogs
SELECT MAX(age) AS oldest_dog_age FROM Dogs
SELECT MAX(age) AS oldest_age FROM Dogs
SELECT charge_type, SUM(charge_amount) AS total_amount FROM Charges GROUP BY charge_type
SELECT charge_type, charge_amount FROM Charges
SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1
SELECT charge_amount  FROM Charges  ORDER BY charge_amount DESC  LIMIT 1
SELECT email_address, cell_number, home_phone FROM Professionals
SELECT email_address, cell_number, home_phone FROM Professionals
SELECT Breeds.breed_name, Sizes.size_description  FROM Breeds, Dogs, Sizes  WHERE Dogs.breed_code = Breeds.breed_code  AND Dogs.size_code = Sizes.size_code;
SELECT DISTINCT Breeds.breed_name, Sizes.size_description FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Sizes ON Dogs.size_code = Sizes.size_code
SELECT Professionals.first_name, Treatment_Types.treatment_type_description  FROM Professionals  JOIN Treatments ON Professionals.professional_id = Treatments.professional_id  JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
SELECT COUNT(*) FROM singer
SELECT COUNT(Singer_ID) FROM singer
SELECT singer.Name  FROM singer  ORDER BY singer.Net_Worth_Millions ASC
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
SELECT Birth_Year, Citizenship FROM singer
SELECT Birth_Year, Citizenship FROM singer
SELECT Name FROM singer WHERE Citizenship <> 'France'
SELECT Name FROM singer WHERE Citizenship <> 'French'
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949
SELECT singer.Name FROM singer WHERE singer.Birth_Year = 1948 OR singer.Birth_Year = 1949
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
SELECT Citizenship, COUNT(DISTINCT Singer_ID) AS SingerCount FROM singer GROUP BY Citizenship
SELECT Citizenship, COUNT(*)  FROM singer  GROUP BY Citizenship
SELECT Citizenship, COUNT(*) AS Count  FROM singer  GROUP BY Citizenship  ORDER BY Count DESC  LIMIT 1
SELECT Citizenship, COUNT(*) AS Count FROM singer GROUP BY Citizenship ORDER BY Count DESC LIMIT 1
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID
SELECT song.Title, singer.Name  FROM song  JOIN singer ON song.Singer_ID = singer.Singer_ID
SELECT DISTINCT singer.Name  FROM singer  INNER JOIN song ON singer.Singer_ID = song.Singer_ID  WHERE song.Sales > 300000
SELECT Name FROM singer INNER JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Sales > 300000
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID, T1.Name HAVING COUNT(*) > 1.
SELECT singer.Name  FROM singer  JOIN song ON singer.Singer_ID = song.Singer_ID  GROUP BY singer.Name  HAVING COUNT(*) > 1
SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name
SELECT T1.Name, SUM(T2.Sales)  FROM singer AS T1  JOIN song AS T2  ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Name
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
SELECT Name AS sname FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
SELECT No changes are required to the given SQL query because the condition `Birth_Year < 1945 AND Birth_Year > 1955` is contradictory and will not return any results. Singers cannot have birth years that are simultaneously before 1945 and after 1955. Therefore, the fixed SQL query remains as:  ```sql SELECT Citizenship FROM singer WHERE Birth_Year < 1945 AND Birth_Year > 1955 ```  Please note that the query will not return any rows because the condition is impossible to satisfy.
SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955
SELECT COUNT(*) FROM Other_Available_Features
SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code IN (     SELECT feature_type_code     FROM Other_Available_Features     WHERE feature_name = 'AirCon' )
SELECT Ref_Property_Types.property_type_description FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code WHERE Properties.property_type_code = <code> GROUP BY Ref_Property_Types.property_type_description
SELECT Properties.property_name FROM Properties WHERE (Properties.property_type_code = 'house' OR Properties.property_type_code = 'apartment') AND Properties.room_count > 1
