
index is 0
SELECT count(*) FROM singer
How many singers do we have?
schema_links:
[COUNT(singer.Singer_ID)]
classification:
The question is "How many [singers] do we have?". [singers] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 1
SELECT count(*) FROM singer
What is the total number of singers?
schema_links:
[singer.*]
classification:
The question is "What is the total number of [singers]?". [singers] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 2
SELECT name ,  country ,  age FROM singer ORDER BY age DESC
Show name, country, age for all singers ordered by age from the oldest to the youngest.
schema_links:
[singer.Name, singer.Country, singer.Age, ORDER BY singer.Age DESC]
classification:
The question is "Show [name], [country], [age] for all [singers] ordered by [age] from the [oldest] to the [youngest]." [singers] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 3
SELECT name ,  country ,  age FROM singer ORDER BY age DESC
What are the names, countries, and ages for every singer in descending order of age?
schema_links:
[singer.Name, singer.Country, singer.Age]
classification:
The question is "What are the names, countries, and ages for every [singer] in descending order of age?" [singer] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 4
SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
What is the average, minimum, and maximum age of all singers from France?
schema_links:
[singer.Age, singer.Country, 'France']
classification:
The question is "What is the average, minimum, and maximum age of all [singers] from [France]?" [singers] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 5
SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
What is the average, minimum, and maximum age for all French singers?
schema_links:
[singer.Age, singer.Country, 'French']
classification:
The question is "What is the average, minimum, and maximum age for all [French singers]?". [French singers] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 6
SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1
Show the name and the release year of the song by the youngest singer.
schema_links:
[singer.Song_Name, singer.Song_release_year, singer.Age]
classification:
The question is "Show the name and the release year of the song by the youngest [singer]. [singer] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 7
SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1
What are the names and release years for all the songs of the youngest singer?
schema_links:
[singer.Song_Name, singer.Song_release_year, singer.Age]
classification:
The question is "What are the names and release years for all the songs of the [youngest singer]?". [youngest singer] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 8
SELECT DISTINCT country FROM singer WHERE age  >  20
What are all distinct countries where singers above age 20 are from?
schema_links:
[singer.Country,singer.Age,20]
classification:
The question is "What are all distinct countries where singers above age 20 are from?" [countries, singers, age] matches tables = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 9
SELECT DISTINCT country FROM singer WHERE age  >  20
What are  the different countries with singers above age 20?
schema_links:
[singer.Country, singer.Age, 20]
classification:
The question is "What are the different [countries] with singers above [age 20]?". [countries] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 10
SELECT country ,  count(*) FROM singer GROUP BY country
Show all countries and the number of singers in each country.
schema_links:
[singer.Country, COUNT(singer.Singer_ID)]
classification:
The question is "Show all [countries] and the number of [singers] in each [country].". [countries] matches table = [singer]. [singers] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 11
SELECT country ,  count(*) FROM singer GROUP BY country
How many singers are from each country?
schema_links:
[COUNT(singer.Singer_ID),singer.Country]
classification:
The question is "How many [singers] are from each [country]?". [singers] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 12
SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
List all song names by singers above the average age.
schema_links:
[singer.Song_Name,singer.Age,average age]
classification:
The question is "List all song names by singers above the average age.". [singers] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 13
SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
What are all the song names by singers who are older than average?
schema_links:
[singer.Song_Name, singer.Age, average]
classification:
The question is "What are all the song names by singers who are older than [average]?". [singers] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 14
SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
Show location and name for all stadiums with a capacity between 5000 and 10000.
schema_links:
[stadium.Location, stadium.Name, stadium.Capacity, 5000, 10000]
classification:
The question is "Show [location] and [name] for all [stadiums] with a capacity between 5000 and 10000.". [stadiums] matches table = [stadium]. So, tables = [stadium] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 15
SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
What are the locations and names of all stations with capacity between 5000 and 10000?
schema_links:
[stadium.Location, stadium.Name, stadium.Capacity]
classification:
The question is "What are the [locations] and [names] of all [stations] with capacity between 5000 and 10000?" [locations] matches table = [stadium]. [names] matches table = [stadium]. [stations] matches table = [stadium]. So, tables = [stadium] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 16
select max(capacity), average from stadium
What is the maximum capacity and the average of all stadiums ?
schema_links:
[stadium.Capacity, stadium.Average]
classification:
The question is "What is the maximum capacity and the average of all [stadiums]?". [stadiums] matches table = [stadium]. So, tables = [stadium] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 17
select avg(capacity) ,  max(capacity) from stadium
What is the average and maximum capacities for all stadiums ?
schema_links:
[stadium.Capacity, stadium.Highest]
classification:
The question is "What is the average and maximum capacities for all stadiums?" The keyword "stadiums" matches the table "stadium". So, the tables = [stadium] and the number of tables = 1. Therefore, the SQL query can be classified as "EASY".
Label: "EASY"

index is 18
SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
What is the name and capacity for the stadium with highest average attendance?
schema_links:
[stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average]
classification:
The question is "What is the name and capacity for the stadium with the highest average attendance?" The necessary information can be found in the [stadium] table. Therefore, the number of tables involved is 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 19
SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
What is the name and capacity for the stadium with the highest average attendance?
schema_links:
[stadium.Name, stadium.Capacity, stadium.Highest, stadium.Average]
classification:
The question is "What is the name and capacity for the stadium with the highest average attendance?". [stadium] matches table = [stadium]. So, tables = [stadium] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 20
SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015
How many concerts are there in year 2014 or 2015?
schema_links:
[concert.*, concert.Year, 2014, 2015]
classification:
The question is "How many [concerts] are there in year 2014 or 2015?". [concerts] matches table = [concert]. So, tables = [concert] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 21
SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015
How many concerts occurred in 2014 or 2015?
schema_links:
[concert.*, concert.Year, 2014, 2015]
classification:
The question is "How many [concerts] occurred in 2014 or 2015?". [concerts] matches table = [concert]. So, tables = [concert] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 22
SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id
Show the stadium name and the number of concerts in each stadium.
schema_links:
[stadium.Name, concert.Stadium_ID = stadium.Stadium_ID, concert.*]
classification:
The question is "Show the [stadium name] and the [number of concerts] in each stadium." [stadium name] matches table = [stadium]. [number of concerts] requires information from table = [concert]. So, tables = [stadium, concert] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 23
SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id
For each stadium, how many concerts play there?
schema_links:
[stadium.Stadium_ID, concert.concert_ID, concert.Stadium_ID = stadium.Stadium_ID]
classification:
The question is "For each [stadium], how many [concerts] play there?". [stadium] matches table = [stadium]. [concerts] matches table = [concert]. So, tables = [stadium, concert] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 24
SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1
Show the stadium name and capacity with most number of concerts in year 2014 or after.
schema_links:
[stadium.Name, stadium.Capacity, concert.concert_ID, concert.Year, concert.Stadium_ID = stadium.Stadium_ID, 2014]
classification:
The question is "Show the [stadium] name and capacity with [most number of concerts] in year [2014] or after.". [stadium] matches table = [stadium]. [concerts] matches table = [concert]. So, tables = [stadium, concert] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 25
select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1
What is the name and capacity of the stadium with the most concerts after 2013 ?
schema_links:
[stadium.Name, stadium.Capacity, concert.Year, concert.Stadium_ID = stadium.Stadium_ID, 2013]
classification:
The question is "What is the name and capacity of the [stadium] with the most concerts after 2013?". [stadium] matches table = [stadium]. So, tables = [stadium] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 26
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
Which year has most number of concerts?
schema_links:
[concert.Year, concert.concert_ID]
classification:
The question is "Which year has the most number of [concerts]?" [concerts] matches table = [concert]. So, tables = [concert] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 27
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
What is the year that had the most concerts?
schema_links:
[concert.Year]
classification:
The question is "What is the year that had the most concerts?" [concerts] matches table = [concert]. So, tables = [concert] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 28
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
Show the stadium names without any concert.
schema_links:
[stadium.Name, concert.Stadium_ID = stadium.Stadium_ID]
classification:
The question is "Show the stadium names without any [concert]. [stadium] matches table = [stadium]. [concert] matches table = [concert]. So, tables = [stadium, concert] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 29
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
What are the names of the stadiums without any concerts?
schema_links:
[stadium.Name, concert.Stadium_ID]
classification:
The question is "What are the names of the [stadiums] without any [concerts]?" [stadiums] matches table = [stadium]. [concerts] matches table = [concert]. So, tables = [stadium, concert] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 30
SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30
Show countries where a singer above age 40 and a singer below 30 are from.
schema_links:
[singer.Country, singer.Age, 40, 30]
classification:
The question is "Show countries where a [singer] above age 40 and a [singer] below 30 are from." [singer] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 31
SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014
Show names for all stadiums except for stadiums having a concert in year 2014.
schema_links:
[stadium.Name,concert.Stadium_ID = stadium.Stadium_ID,concert.Year,2014]
classification:
The question is "Show names for all [stadiums] except for stadiums having a concert in [year] 2014.". [stadiums] matches table = [stadium]. [concert] matches table = [concert]. tables = [stadium, concert] are connected by table = [concert]. So, tables = [stadium, concert] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 32
SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014
What are the names of all stadiums that did not have a concert in 2014?
schema_links:
[stadium.Name,concert.Year,concert.Stadium_ID = stadium.Stadium_ID,2014]
classification:
The question is "What are the names of all [stadiums] that did not have a concert in 2014?". [stadiums] matches table = [stadium]. So, tables = [stadium] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 33
SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id
Show the name and theme for all concerts and the number of singers in each concert.
schema_links:
[concert.concert_Name, concert.Theme, singer_in_concert.concert_ID]
classification:
The question is "Show the name and theme for all [concerts] and the number of [singers] in each concert." [concerts] matches table = [concert]. [singers] matches table = [singer]. tables = [concert, singer] are connected by table = [singer_in_concert]. So, tables = [concert, singer, singer_in_concert] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 34
select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id
What are the names , themes , and number of singers for every concert ?
schema_links:
[concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID)]
classification:
The question is "What are the names, themes, and number of singers for every concert?". The tables mentioned in the question are [concert] and [singer_in_concert]. So, tables = [concert, singer_in_concert] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 35
SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id
List singer names and number of concerts for each singer.
schema_links:
[singer.Name, COUNT(singer_in_concert.Singer_ID)]
classification:
The question is "List [singer names] and [number of concerts] for each [singer].". [singer names] matches table = [singer]. [number of concerts] requires counting the occurrences of [Singer_ID] in the [singer_in_concert] table. So, tables = [singer, singer_in_concert] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 36
SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id
What are the names of the singers and number of concerts for each person?
schema_links:
[singer.Name, singer_in_concert.*, COUNT(singer_in_concert.concert_ID)]
classification:
The question is "What are the names of the [singers] and number of concerts for each person?". [singers] matches table = [singer]. [concerts] matches table = [concert]. tables = [singer, concert] are connected by table = [singer_in_concert]. So, tables = [singer, concert, singer_in_concert] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 37
SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014
List all singer names in concerts in year 2014.
schema_links:
[singer.Name, singer_in_concert.concert_ID, concert.Year, singer_in_concert.Singer_ID = singer.Singer_ID, singer_in_concert.concert_ID = concert.concert_ID, 2014]
classification:
The question is "List all [singer] names in concerts in [year] 2014.". [singer] matches table = [singer]. tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 38
SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014
What are the names of the singers who performed in a concert in 2014?
schema_links:
[singer.Name,singer_in_concert.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID,concert.Year,2014]
classification:
The question is "What are the names of the [singers] who performed in a concert in 2014?". [singers] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 39
SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
what is the name and nation of the singer who have a song having 'Hey' in its name?
schema_links:
[singer.Name, singer.Country, singer.Song_Name, 'Hey']
classification:
The question is "What is the name and nation of the [singer] who have a song having 'Hey' in its name?" [singer] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 40
SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?
schema_links:
[singer.Name, singer.Country, singer.Song_Name, 'Hey']
classification:
The question is "What is the name and country of origin of every [singer] who has a song with the word 'Hey' in its title?". [singer] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 41
SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015
Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.
schema_links:
[stadium.Name, stadium.Location, concert.Year, concert.Stadium_ID = stadium.Stadium_ID, 2014, 2015]
classification:
The question is "Find the name and location of the [stadiums] which some [concerts] happened in the years of both 2014 and 2015.". [stadiums] matches table = [stadium]. [concerts] matches table = [concert]. So, tables = [stadium, concert] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 42
SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015
What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?
schema_links:
[stadium.Name, stadium.Location, concert.Stadium_ID = stadium.Stadium_ID, concert.Year, 2014, 2015]
classification:
The question is "What are the names and locations of the [stadiums] that had [concerts] that occurred in both 2014 and 2015?". [stadiums] matches table = [stadium]. [concerts] matches table = [concert]. So, tables = [stadium, concert] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 43
select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)
Find the number of concerts happened in the stadium with the highest capacity .
schema_links:
[concert.concert_ID,concert.Stadium_ID = stadium.Stadium_ID,stadium.Capacity]
classification:
The question is "Find the number of [concerts] happened in the [stadium] with the highest [capacity].". [concerts] matches table = [concert]. [stadium] matches table = [stadium]. tables = [concert, stadium] which number of tables = 2. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 44
select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)
What are the number of concerts that occurred in the stadium with the largest capacity ?
schema_links:
[COUNT(concert.concert_ID),stadium.Capacity,concert.Stadium_ID = stadium.Stadium_ID]
classification:
The question is "What are the number of [concerts] that occurred in the [stadium] with the largest capacity?". [concerts] matches table = [concert]. [stadium] matches table = [stadium]. tables = [concert, stadium] which number of tables = 2. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 45
SELECT count(*) FROM pets WHERE weight  >  10
Find the number of pets whose weight is heavier than 10.
schema_links:
[COUNT(Pets.PetID),Pets.weight,10]
classification:
The question is "Find the number of [pets] whose weight is heavier than 10.". [pets] matches table = [Pets]. So, tables = [Pets] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 46
SELECT count(*) FROM pets WHERE weight  >  10
How many pets have a greater weight than 10?
schema_links:
[Pets.weight, 10]
classification:
The question is "How many [pets] have a greater weight than 10?". [pets] matches table = [Pets]. So, tables = [Pets] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 47
SELECT weight FROM pets ORDER BY pet_age LIMIT 1
Find the weight of the youngest dog.
schema_links:
[Pets.weight, Pets.pet_age, Pets.PetType = 'dog']
classification:
The question is "Find the weight of the youngest [dog]." [dog] matches table = [Pets]. So, tables = [Pets] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 48
SELECT weight FROM pets ORDER BY pet_age LIMIT 1
How much does the youngest dog weigh?
schema_links:
[Pets.weight,Pets.pet_age,'dog']
classification:
The question is "How much does the youngest [dog] weigh?" [dog] matches table = [Pets]. So, tables = [Pets] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 49
SELECT max(weight) ,  petType FROM pets GROUP BY petType
Find the maximum weight for each type of pet. List the maximum weight and pet type.
schema_links:
[Pets.PetType, Pets.weight, Has_Pet.PetID = Pets.PetID]
classification:
The question is "Find the maximum weight for each type of pet. List the maximum weight and pet type." [maximum weight, type of pet] matches tables = [Pets]. So, tables = [Pets] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 50
SELECT max(weight) ,  petType FROM pets GROUP BY petType
List the maximum weight and type for each type of pet.
schema_links:
[Pets.PetType, Pets.weight, Has_Pet.PetID = Pets.PetID]
classification:
The question is "List the maximum weight and type for each type of pet." [type of pet] matches table = [Pets]. So, tables = [Pets] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 51
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
Find number of pets owned by students who are older than 20.
schema_links:
[COUNT(Has_Pet.PetID),Has_Pet.StuID = Student.StuID,Student.Age,20]
classification:
The question is "Find [number of pets] owned by [students] who are older than 20.". [number of pets] matches table = [Has_Pet]. [students] matches table = [Student]. tables = [Has_Pet, Student] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 52
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
How many pets are owned by students that have an age greater than 20?
schema_links:
[COUNT(Pets.PetID),Has_Pet.StuID,Student.Age,20]
classification:
The question is "How many pets are owned by [students] that have an age greater than 20?". [students] matches table = [Student]. So, tables = [Student] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 53
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'
Find the number of dog pets that are raised by female students (with sex F).
schema_links:
[Pets.PetID, Has_Pet.PetID = Pets.PetID, Has_Pet.StuID = Student.StuID, Student.Sex, Dog]
classification:
The question is "Find the number of [dog pets] that are raised by [female students] (with sex F)." [dog pets] matches table = [Pets]. [female students] matches table = [Student]. tables = [Pets, Student] are connected by table = [Has_Pet]. So, tables = [Pets, Student, Has_Pet] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 54
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'
How many dog pets are raised by female students?
schema_links:
[Pets.PetType, Student.Sex, Has_Pet.StuID = Student.StuID, Has_Pet.PetID = Pets.PetID, dog, female]
classification:
The question is "How many [dog pets] are raised by [female students]?". [dog pets] matches table = [Pets]. [female students] matches table = [Student]. tables = [Pets, Student] are connected by table = [Has_Pet]. So, tables = [Pets, Student, Has_Pet] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 55
SELECT count(DISTINCT pettype) FROM pets
Find the number of distinct type of pets.
schema_links:
[Pets.PetType]
classification:
The question is "Find the number of distinct type of [pets]." [pets] matches table = [Pets]. So, tables = [Pets] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 56
SELECT count(DISTINCT pettype) FROM pets
How many different types of pet are there?
schema_links:
[Pets.PetType]
classification:
The question is "How many different types of [pet] are there?". [pet] matches table = [Pets]. So, tables = [Pets] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 57
SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'
Find the first name of students who have cat or dog pet.
schema_links:
[Student.Fname, Has_Pet.StuID = Student.StuID, Has_Pet.PetID = Pets.PetID, Pets.PetType, 'cat', 'dog']
classification:
The question is "Find the first name of [students] who have [cat] or [dog] pet.". [students] matches table = [Student]. [cat] matches table = [Pets]. [dog] matches table = [Pets]. tables = [Student, Pets] are connected by table = [Has_Pet]. So, tables = [Student, Pets, Has_Pet] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 58
SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'
What are the first names of every student who has a cat or dog as a pet?
schema_links:
[Student.Fname, Pets.PetType, 'cat', 'dog']
classification:
The question is "What are the first names of every [student] who has a [cat] or [dog] as a pet?". [student] matches table = [Student]. [cat] and [dog] match table = [Pets]. tables = [Student, Pets] are connected by table = [Has_Pet]. So, tables = [Student, Pets, Has_Pet] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 59
select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'
Find the first name of students who have both cat and dog pets .
schema_links:
[Student.Fname, Has_Pet.StuID = Student.StuID, Has_Pet.PetID = Pets.PetID, Pets.PetType = 'cat', Pets.PetType = 'dog']
classification:
The question is "Find the first name of [students] who have both [cat] and [dog] [pets]. [students] matches table = [Student]. [cat] and [dog] match table = [Pets]. [students] and [pets] are connected by tables = [Has_Pet]. So, tables = [Student, Pets, Has_Pet] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 60
SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'
What are the students' first names who have both cats and dogs as pets?
schema_links:
[Student.Fname, Has_Pet.StuID = Student.StuID, Has_Pet.PetID = Pets.PetID, Pets.PetType, 'cat', 'dog']
classification:
The question is "What are the students' first names who have both [cats] and [dogs] as pets?". [cats] matches table = [Pets]. [dogs] matches table = [Pets]. [students' first names] matches table = [Student]. [Student, Pets] are connected by table = [Has_Pet]. So, tables = [Student, Pets, Has_Pet] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 61
SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
Find the major and age of students who do not have a cat pet.
schema_links:
[Student.Major, Student.Age, Pets.PetType != 'cat']
classification:
The question is "Find the [major] and [age] of [students] who do not have a [cat] [pet]." [students] matches table = [Student]. [cat] matches table = [Pets]. tables = [Student, Pets] are connected by table = [Has_Pet]. So, tables = [Student, Pets, Has_Pet] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 62
SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
What major is every student who does not own a cat as a pet, and also how old are they?
schema_links:
[Student.Major,Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID,Pets.PetType,'cat',Student.Age]
classification:
The question is "What major is every student who does not own a cat as a pet, and also how old are they?". [students] matches table = [Student]. [cat] matches table = [Pets]. tables = [Student, Pets] are connected by table = [Has_Pet]. So, tables = [Student, Pets, Has_Pet] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 63
SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'
Find the id of students who do not have a cat pet.
schema_links:
[Student.StuID, Has_Pet.StuID = Student.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, 'cat']
classification:
The question is "Find the id of students who do not have a [cat] pet." [cat] matches table = [Pets]. [students] matches table = [Student]. tables = [Student, Pets] are connected by table = [Has_Pet]. So, tables = [Student, Pets, Has_Pet] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 64
SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'
What are the ids of the students who do not own cats as pets?
schema_links:
[Student.StuID, Pets.PetType, 'cat']
Slicing error for the classification module
classification:
The given question is incomplete. It seems to be missing some information. Could you please provide the complete question?

index is 65
SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
Find the first name and age of students who have a dog but do not have a cat as a pet.
schema_links:
[Student.Fname, Student.Age, Pets.PetType, Has_Pet.StuID = Student.StuID, Has_Pet.PetID = Pets.PetID, 'dog', 'cat']
classification:
The question is "Find the [first name] and [age] of [students] who have a [dog] but do not have a [cat] as a pet.". [students] matches table = [Student]. [dog] matches table = [Pets]. [cat] matches table = [Pets]. tables = [Student, Pets] are connected by table = [Has_Pet]. So, tables = [Student, Pets, Has_Pet] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 66
SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
What is the first name of every student who has a dog but does not have a cat?
schema_links:
[Student.Fname, Pets.PetType, Has_Pet.StuID = Student.StuID, Has_Pet.PetID = Pets.PetID, 'dog', 'cat']
classification:
The question is "What is the first name of every [student] who has a [dog] but does not have a [cat]?". [student] matches table = [Student]. [dog] matches table = [Pets]. [cat] matches table = [Pets]. tables = [Student, Pets] are connected by table = [Has_Pet]. So, tables = [Student, Pets, Has_Pet] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 67
SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1
Find the type and weight of the youngest pet.
schema_links:
[Pets.PetType, Pets.weight, Pets.pet_age]
classification:
The question is "Find the [type] and [weight] of the [youngest pet].". [type] matches table = [Pets]. [weight] matches table = [Pets]. [youngest pet] matches table = [Pets]. So, tables = [Pets] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 68
SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1
What type of pet is the youngest animal, and how much does it weigh?
schema_links:
[Pets.pet_age,Pets.PetType,Pets.weight]
classification:
The question is "What type of [pet] is the [youngest animal], and how much does it weigh?". [pet] matches table = [Pets]. So, tables = [Pets] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 69
SELECT petid ,  weight FROM pets WHERE pet_age  >  1
Find the id and weight of all pets whose age is older than 1.
schema_links:
[Pets.PetID, Pets.weight, Pets.pet_age, 1]
classification:
The question is "Find the id and weight of all [pets] whose age is older than 1.". [pets] matches table = [Pets]. So, tables = [Pets] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 70
SELECT petid ,  weight FROM pets WHERE pet_age  >  1
What is the id and weight of every pet who is older than 1?
schema_links:
[Pets.PetID, Pets.weight, Pets.pet_age, 1]
classification:
The question is "What is the id and weight of every [pet] who is older than 1?". [pets] matches table = [Pets]. So, tables = [Pets] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 71
SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype
Find the average and maximum age for each type of pet.
schema_links:
[Pets.pet_age, Pets.PetType]
classification:
The question is "Find the average and maximum age for each type of [pet]." [pet] matches table = [Pets]. So, tables = [Pets] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 72
SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype
What is the average and maximum age for each pet type?
schema_links:
[Pets.pet_age,Pets.PetType]
classification:
The question is "What is the average and maximum age for each [pet type]?". [pet type] matches table = [Pets]. So, tables = [Pets] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 73
SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype
Find the average weight for each pet type.
schema_links:
[Pets.weight,Pets.PetType]
classification:
The question is "Find the average weight for each [pet type]." [pet type] matches table = [Pets]. So, tables = [Pets] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 74
SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype
What is the average weight for each type of pet?
schema_links:
[Pets.weight, Pets.PetType]
classification:
The question is "What is the average weight for each type of pet?". [type of pet] matches table = [Pets]. So, tables = [Pets] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 75
SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid
Find the first name and age of students who have a pet.
schema_links:
[Student.Fname, Student.Age, Has_Pet.StuID]
classification:
The question is "Find the [first name] and [age] of [students] who have a [pet]." [students] matches table = [Student]. [pet] matches table = [Has_Pet]. tables = [Student, Has_Pet] are connected by table = [Has_Pet]. So, tables = [Student, Has_Pet] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 76
SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid
What are the different first names and ages of the students who do have pets?
schema_links:
[Student.Fname,Student.Age,Has_Pet.StuID = Student.StuID]
classification:
The question is "What are the different [first names] and [ages] of the [students] who do have [pets]?". [students] matches table = [Student]. [pets] matches table = [Has_Pet]. tables = [Student, Has_Pet] are connected by table = [Has_Pet]. So, tables = [Student, Has_Pet] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 77
SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'
Find the id of the pet owned by student whose last name is ‘Smith’.
schema_links:
[Pets.PetID, Has_Pet.StuID = Student.StuID, Has_Pet.PetID = Pets.PetID, Student.LName, 'Smith']
classification:
The question is "Find the id of the [pet] owned by [student] whose last name is ‘Smith’.". [pet] matches table = [Pets]. [student] matches table = [Student]. tables = [Pets, Student] are connected by table = [Has_Pet]. So, tables = [Pets, Student, Has_Pet] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 78
SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'
What is the id of the pet owned by the student whose last name is 'Smith'?
schema_links:
[Pets.PetID,Has_Pet.StuID,Student.LName,'Smith']
classification:
The question is "What is the id of the [pet] owned by the [student] whose last name is 'Smith'?". [pet] matches table = [Pets]. [student] matches table = [Student]. tables = [Pets, Student] are connected by table = [Has_Pet]. So, tables = [Pets, Student, Has_Pet] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 79
SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid
Find the number of pets for each student who has any pet and student id.
schema_links:
[COUNT(Pets.PetID), Student.StuID, Has_Pet.PetID, Has_Pet.StuID, Pets.PetID]
classification:
The question is "Find the number of pets for each [student] who has any pet and [student id].". [student] matches table = [Student]. [pet] matches table = [Pets]. The relationship between [student] and [pet] is captured by the [Has_Pet] table. So, tables = [Student, Pets, Has_Pet] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 80
select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid
For students who have pets , how many pets does each student have ? list their ids instead of names .
schema_links:
[Student.StuID, Has_Pet.StuID = Student.StuID, Has_Pet.PetID = Pets.PetID, COUNT(Has_Pet.PetID)]
classification:
The question is "For [students] who have [pets], how many pets does each student have? list their ids instead of names.". [students] matches table = [Student]. [pets] matches table = [Pets]. tables = [Student, Pets] are connected by table = [Has_Pet]. So, tables = [Student, Pets, Has_Pet] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 81
SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1
Find the first name and gender of student who have more than one pet.
schema_links:
[Student.Fname, Student.Sex, Has_Pet.StuID = Student.StuID, Has_Pet.PetID = Pets.PetID, >1]
classification:
The question is "Find the [first name] and [gender] of [student] who have [more than one pet].". [first name] and [gender] match columns in table = [Student]. [student] matches table = [Student]. [more than one pet] is connected to [student] through tables [Has_Pet] and [Pets]. So, tables = [Student, Has_Pet, Pets] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 82
SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1
What is the first name and gender of the all the students who have more than one pet?
schema_links:
[Student.Fname, Student.Sex, Has_Pet.StuID = Student.StuID]
classification:
The question is "What is the first name and gender of all the [students] who have more than one [pet]?". [students] matches table = [Student]. [pet] matches table = [Has_Pet]. So, tables = [Student, Has_Pet] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 83
SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'
Find the last name of the student who has a cat that is age 3.
schema_links:
[Student.LName,Has_Pet.PetID,Pets.pet_age,'cat',3]
classification:
The question is "Find the last name of the [student] who has a [cat] that is age 3.". [student] matches table = [Student]. [cat] matches table = [Pets]. tables = [Student, Pets] are connected by table = [Has_Pet]. So, tables = [Student, Pets, Has_Pet] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 84
SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'
What is the last name of the student who has a cat that is 3 years old?
schema_links:
[Student.LName,Has_Pet.PetID = Pets.PetID,Pets.pet_age,cat,3]
classification:
The question is "What is the last name of the [student] who has a [cat] that is 3 years old?". [student] matches table = [Student]. [cat] matches table = [Pets]. tables = [Student, Pets] are connected by table = [Has_Pet]. So, tables = [Student, Pets, Has_Pet] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 85
select avg(age) from student where stuid not in (select stuid from has_pet)
Find the average age of students who do not have any pet .
schema_links:
[Student.Age, Has_Pet.StuID, Student.StuID = Has_Pet.StuID]
classification:
The question is "Find the average age of [students] who do not have any [pet]." [students] matches table = [Student]. [pet] matches table = [Has_Pet]. So, tables = [Student, Has_Pet] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 86
select avg(age) from student where stuid not in (select stuid from has_pet)
What is the average age for all students who do not own any pets ?
schema_links:
[Student.Age,Has_Pet.StuID]
classification:
The question is "What is the average age for all students who do not own any pets?". [students] matches table = [Student]. [pets] matches table = [Pets]. tables = [Student, Pets] are connected by table = [Has_Pet]. So, tables = [Student, Pets, Has_Pet] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 87
SELECT count(*) FROM CONTINENTS;
How many continents are there?
schema_links:
[continents.Continent]
classification:
The question is "How many [continents] are there?". [continents] matches table = [continents]. So, tables = [continents] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 88
SELECT count(*) FROM CONTINENTS;
What is the number of continents?
schema_links:
[count(continents.ContId)]
classification:
The question is "What is the number of [continents]?". [continents] matches table = [continents]. So, tables = [continents] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 89
SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;
How many countries does each continent have? List the continent id, continent name and the number of countries.
schema_links:
[continents.ContId, continents.Continent, countries.Continent]
classification:
The question is "How many [countries] does each [continent] have? List the continent id, continent name, and the number of countries." [countries] matches table = [countries]. [continent] matches table = [continents]. So, tables = [countries, continents] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 90
SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;
For each continent, list its id, name, and how many countries it has?
schema_links:
[continents.ContId, continents.Continent, countries.CountryName, countries.Continent = continents.ContId]
classification:
The question is "For each [continent], list its id, name, and how many [countries] it has?". [continent] matches table = [continents]. [countries] matches table = [countries]. So, tables = [continents, countries] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 91
SELECT count(*) FROM COUNTRIES;
How many countries are listed?
schema_links:
[countries.CountryName,countries.*,countries.Continent = continents.ContId]
classification:
The question is "How many [countries] are listed?". [countries] matches table = [countries]. So, tables = [countries] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 92
SELECT count(*) FROM COUNTRIES;
How many countries exist?
schema_links:
[countries.CountryName]
classification:
The question is "How many [countries] exist?". [countries] matches table = [countries]. So, tables = [countries] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 93
SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;
How many models does each car maker produce? List maker full name, id and the number.
schema_links:
[model_list.Model, car_makers.Maker, car_makers.FullName, car_makers.Id]
classification:
The question is "How many [models] does each [car maker] produce? List [maker full name], [id], and the [number]." [models] matches table = [model_list]. [car maker] matches table = [car_makers]. So, tables = [model_list, car_makers] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 94
SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;
What is the full name of each car maker, along with its id and how many models it produces?
schema_links:
[car_makers.FullName,car_makers.Id,model_list.Model,COUNT(model_list.Model)]
classification:
The question is "What is the full name of each [car maker], along with its [id] and how many [models] it produces?". [car maker] matches table = [car_makers]. [models] matches table = [model_list]. So, tables = [car_makers, model_list] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 95
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;
Which model of the car has the minimum horsepower?
schema_links:
[model_list.Model,cars_data.Horsepower,model_list.ModelId = car_names.Model,car_names.MakeId = cars_data.Id]
classification:
The question is "Which model of the car has the minimum horsepower?". The required information can be obtained by joining the tables [model_list], [car_names], and [cars_data]. So, tables = [model_list, car_names, cars_data] which number of tables >= 1. Therefore, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 96
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;
What is the model of the car with the smallest amount of horsepower?
schema_links:
[model_list.Model, cars_data.Horsepower, car_names.MakeId = cars_data.Id, model_list.ModelId = car_names.Model]
classification:
The question is "What is the model of the car with the smallest amount of horsepower?". The relevant tables are [model_list] and [cars_data], which are connected by [car_names] and [model_list]. So, tables = [model_list, car_names, cars_data] which number of tables >= 1. Therefore, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 97
SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)
Find the model of the car whose weight is below the average weight.
schema_links:
[model_list.Model,model_list.ModelId = car_names.Model,car_names.MakeId = cars_data.Id,cars_data.Weight,average weight]
classification:
The question is "Find the [model] of the car whose weight is below the average weight.". [model] matches table = [model_list]. So, tables = [model_list] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 98
SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)
What is the model for the car with a weight smaller than the average?
schema_links:
[model_list.Model, car_names.Model, cars_data.Weight, model_list.ModelId = car_names.Model, car_names.MakeId = cars_data.Id, average weight]
classification:
The question is "What is the model for the car with a weight smaller than the average?". The relevant tables are [model_list, car_names, cars_data]. These tables are connected through the foreign keys [model_list.ModelId = car_names.Model, car_names.MakeId = cars_data.Id]. Since the question involves comparing the weight with the average, it requires performing calculations and filtering based on a condition. Therefore, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 99
SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';
Find the name of the makers that produced some cars in the year of 1970?
schema_links:
[car_makers.Maker, cars_data.Year, 1970, car_makers.Id = cars_data.Id]
classification:
The question is "Find the name of the [makers] that produced some cars in the year of 1970?". [makers] matches table = [car_makers]. So, tables = [car_makers] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 100
SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';
What is the name of the different car makers who produced a car in 1970?
schema_links:
[car_makers.Maker, cars_data.Year, car_makers.Id = cars_data.Id, 1970]
classification:
The question is "What is the name of the different [car makers] who produced a car in 1970?". [car makers] matches table = [car_makers]. tables = [car_makers] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 101
SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);
Find the make and production time of the cars that were produced in the earliest year?
schema_links:
[car_makers.Maker, cars_data.Year, car_makers.Id = car_names.MakeId, car_names.Model = model_list.Model, model_list.Maker = car_makers.Id]
classification:
The question is "Find the make and production time of the cars that were produced in the earliest year?". [make, production time, cars] match tables = [car_makers, cars_data, car_names, model_list]. So, tables = [car_makers, cars_data, car_names, model_list] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 102
SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);
What is the maker of the carr produced in the earliest year and what year was it?
schema_links:
[car_makers.Maker,cars_data.Year]
classification:
The question is "What is the [maker] of the [car] produced in the [earliest year] and what [year] was it?". [maker] matches table = [car_makers]. [car] matches table = [cars_data]. So, tables = [car_makers, cars_data] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 103
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;
Which distinct car models are the produced after 1980?
schema_links:
[car_names.Model, cars_data.Year, 1980]
classification:
The question is "Which distinct [car models] are [produced] after 1980?". [car models] matches table = [car_names]. [produced] matches table = [cars_data]. So, tables = [car_names, cars_data] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 104
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;
What are the different models for the cards produced after 1980?
schema_links:
[model_list.Model,cars_data.Year,cars_data.Id = car_names.MakeId,model_list.Maker = car_makers.Id,1980]
classification:
The question is "What are the different [models] for the cars produced after 1980?". [models] matches table = [model_list]. The cars produced after 1980 can be obtained by filtering the [cars_data] table based on the [Year] column. The [Id] column in the [cars_data] table is connected to the [MakeId] column in the [car_names] table. The [Make] column in the [car_names] table is connected to the [Maker] column in the [model_list] table, which gives us the different models. So, tables = [model_list, car_names, cars_data] which number of tables >= 1. Therefore, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 105
SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;
How many car makers are there in each continents? List the continent name and the count.
schema_links:
[car_makers.Maker, countries.Continent = continents.ContId, car_makers.Country = countries.CountryId]
classification:
The question is "How many [car makers] are there in each [continents]? List the [continent] name and the [count].". [car makers] matches table = [car_makers]. [continents] matches table = [continents]. tables = [car_makers, continents] are connected by table = [countries]. So, tables = [car_makers, continents, countries] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 106
SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;
What is the name of each continent and how many car makers are there in each one?
schema_links:
[continents.Continent, car_makers.*]
classification:
The question is "What is the name of each [continent] and how many [car makers] are there in each one?". [continent] matches table = [continents]. [car makers] matches table = [car_makers]. So, tables = [continents, car_makers] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 107
SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;
Which of the countries has the most car makers? List the country name.
schema_links:
[countries.CountryName,car_makers.Country = countries.CountryId]
classification:
The question is "Which of the [countries] has the most [car makers]? List the [country name]." [countries] matches table = [countries]. [car makers] matches table = [car_makers]. So, tables = [countries, car_makers] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 108
SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;
What is the name of the country with the most car makers?
schema_links:
[countries.CountryName, car_makers.Country = countries.CountryId]
classification:
The question is "What is the name of the country with the most car makers?" [country] matches table = [countries]. [car makers] matches table = [car_makers]. So, tables = [countries, car_makers] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 109
select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;
How many car models are produced by each maker ? Only list the count and the maker full name .
schema_links:
[car_names.Model,car_makers.FullName,car_makers.Id = car_names.MakeId]
classification:
The question is "How many car models are produced by each [maker]? Only list the count and the maker full name.". [maker] matches table = [car_makers]. [car models] matches table = [car_names]. So, tables = [car_makers, car_names] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 110
SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;
What is the number of car models that are produced by each maker and what is the id and full name of each maker?
schema_links:
[COUNT(car_names.Model), car_makers.Id, car_makers.FullName, car_makers.Id = model_list.Maker, car_names.MakeId = model_list.ModelId]
classification:
The question is "What is the number of car models that are produced by each maker and what is the id and full name of each maker?". The relevant tables for this query are [car_names] and [car_makers], which are connected by the [model_list] table. So, the tables involved are [car_names, car_makers, model_list], and the number of tables is greater than 1. Therefore, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 111
SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';
What is the accelerate of the car make amc hornet sportabout (sw)?
schema_links:
[cars_data.Accelerate, model_list.Maker = car_makers.Id, car_names.Model = model_list.Model, 'amc hornet sportabout (sw)']
classification:
The question is "What is the accelerate of the car make [amc hornet sportabout (sw)]?". The keyword "accelerate" matches the column in table = [cars_data]. The car make "amc hornet sportabout (sw)" matches the columns [Maker] and [Model] in tables = [car_makers, model_list, car_names]. So, tables = [cars_data, car_makers, model_list, car_names] which number of tables >= 1. Therefore, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 112
SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';
How much does the car accelerate that makes amc hornet sportabout (sw)?
schema_links:
[cars_data.Accelerate, car_makers.Maker, car_names.Model, car_makers.Id = car_names.MakeId, car_names.MakeId = cars_data.Id, "amc hornet sportabout (sw)"]
classification:
The question is "How much does the car accelerate that makes [amc hornet sportabout (sw)]?". The relevant tables are [cars_data, car_names, car_makers]. These tables are connected by the columns [car_makers.Id = car_names.MakeId] and [car_names.MakeId = cars_data.Id]. So, the number of tables involved is 3, which makes the SQL query classified as "COMPLEX".
Label: "COMPLEX"

index is 113
SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';
How many car makers are there in france?
schema_links:
[car_makers.*,car_makers.Country = countries.CountryId,countries.CountryName,'France']
classification:
The question is "How many [car makers] are there in [France]?". [car makers] matches table = [car_makers]. [France] matches table = [countries]. So, tables = [car_makers, countries] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 114
SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';
What is the number of makers of care in France?
schema_links:
[car_makers.Id,car_makers.Country = countries.CountryId,countries.CountryName,'France']
classification:
The question is "What is the number of [makers] of [cars] in [France]?". [makers] matches table = [car_makers]. [cars] matches tables = [car_names, cars_data]. [France] matches table = [countries]. So, tables = [car_makers, car_names, cars_data, countries] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 115
SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';
How many car models are produced in the usa?
schema_links:
[model_list.ModelId, car_makers.Id = car_names.MakeId, car_names.Model = model_list.Model, car_makers.Country = countries.CountryId, countries.CountryName = 'USA']
classification:
The question is "How many car models are produced in the USA?". Based on the given schema and tables, we can see that the relevant tables are [model_list] and [car_makers]. These tables are connected through [car_names] and [countries]. Therefore, the number of tables involved in the query is 4, which means the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 116
SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';
What is the count of the car models produced in the United States?
schema_links:
[COUNT(model_list.Model),countries.CountryName,countries.CountryId = car_makers.Country,'United States']
classification:
The question is "What is the [count] of the [car models] produced in the [United States]?". [count] indicates an aggregation function, [car models] matches table = [model_list], and [United States] matches table = [countries]. So, tables = [model_list, countries] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 117
SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;
What is the average miles per gallon(mpg) of the cars with 4 cylinders?
schema_links:
[cars_data.MPG, cars_data.Cylinders, 4]
classification:
The question is "What is the average miles per gallon (mpg) of the cars with 4 cylinders?" [cars] matches table = [cars_data]. So, tables = [cars_data] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 118
SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;
What is the average miles per gallon of all the cards with 4 cylinders?
schema_links:
[cars_data.MPG,cars_data.Cylinders,4]
classification:
The question is "What is the average miles per gallon of all the cars with 4 cylinders?". [cars] matches table = [cars_data]. So, tables = [cars_data] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 119
select min(weight) from cars_data where cylinders  =  8 and year  =  1974
What is the smallest weight of the car produced with 8 cylinders on 1974 ?
schema_links:
[cars_data.Weight, cars_data.Cylinders, cars_data.Year, 8, 1974]
classification:
The question is "What is the smallest weight of the car produced with 8 cylinders in 1974?". [car produced with 8 cylinders in 1974] matches table = [cars_data]. So, tables = [cars_data] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 120
select min(weight) from cars_data where cylinders  =  8 and year  =  1974
What is the minimum weight of the car with 8 cylinders produced in 1974 ?
schema_links:
[cars_data.Weight, cars_data.Cylinders, cars_data.Year, 8, 1974]
classification:
The question is "What is the minimum weight of the car with 8 cylinders produced in 1974?". [car] matches table = [cars_data]. So, tables = [cars_data] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 121
SELECT Maker ,  Model FROM MODEL_LIST;
What are all the makers and models?
schema_links:
[car_makers.Maker,model_list.Model,car_makers.Id = model_list.Maker]
classification:
The question is "What are all the [makers] and [models]?". [makers] matches table = [car_makers]. [models] matches table = [model_list]. tables = [car_makers, model_list] are connected by [car_makers.Id = model_list.Maker]. So, tables = [car_makers, model_list] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 122
SELECT Maker ,  Model FROM MODEL_LIST;
What are the makers and models?
schema_links:
[car_makers.Maker,model_list.Model,car_makers.Id = model_list.Maker,car_names.Model = model_list.Model,car_names.MakeId = cars_data.Id]
classification:
The question is "What are the [makers] and [models]?". [makers] matches table = [car_makers]. [models] matches tables = [model_list, car_names, cars_data]. The tables [model_list, car_names, cars_data] are connected through foreign keys. So, tables = [car_makers, model_list, car_names, cars_data] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 123
SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;
What are the countries having at least one car maker? List name and id.
schema_links:
[countries.CountryName, countries.CountryId, car_makers.Country = countries.CountryId]
classification:
The question is "What are the [countries] having at least one [car maker]? List [name] and [id]." [countries] matches table = [countries]. [car maker] matches table = [car_makers]. So, tables = [countries, car_makers] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 124
SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;
What are the names and ids of all countries with at least one car maker?
schema_links:
[countries.CountryName, countries.CountryId, car_makers.Country = countries.CountryId]
classification:
The question is "What are the names and ids of all [countries] with at least one [car maker]?". [countries] matches table = [countries]. [car maker] matches table = [car_makers]. So, tables = [countries, car_makers] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 125
SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;
What is the number of the cars with horsepower more than 150?
schema_links:
[cars_data.*, cars_data.Horsepower, 150]
classification:
The question is "What is the number of the cars with [horsepower] more than 150?". [cars] matches table = [cars_data]. So, tables = [cars_data] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 126
SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;
What is the number of cars with a horsepower greater than 150?
schema_links:
[COUNT(cars_data.Id),cars_data.Horsepower,150]
Slicing error for the classification module
classification:
The given question is incomplete. Please provide the complete question.

index is 127
SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;
What is the average weight of cars each year?
schema_links:
[cars_data.Weight, cars_data.Year]
classification:
The question is "What is the average weight of cars each year?" [cars_data.Weight] matches table = [cars_data]. So, tables = [cars_data] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 128
SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;
What is the average weight and year for each year?
schema_links:
[cars_data.Weight, cars_data.Year]
Slicing error for the classification module
classification:
The given question is incomplete. It seems like you are asking for the average weight and year for each year, but the tables needed for this query are missing. Please provide the table names and their columns related to weight and year so that I can assist you further.

index is 129
SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;
Which countries in europe have at least 3 car manufacturers?
schema_links:
[countries.CountryName, car_makers.Id, countries.Continent = continents.ContId, car_makers.Country = countries.CountryId, Europe, 3]
classification:
The question is "Which [countries] in Europe have at least 3 [car manufacturers]?". [countries] matches table = [countries]. [car manufacturers] matches table = [car_makers]. [Europe] matches table = [continents]. So, tables = [countries, car_makers, continents] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 130
SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;
What are the names of all European countries with at least 3 manufacturers?
schema_links:
[countries.CountryName,countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,car_makers.*,'Europe',3]
classification:
The question is "What are the names of all [European countries] with at least [3 manufacturers]?" [European countries] matches table = [countries]. [manufacturers] matches table = [car_makers]. tables = [countries, car_makers] are connected by table = [car_makers.Country = countries.CountryId]. So, tables = [countries, car_makers] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 131
SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;
What is the maximum horsepower and the make of the car models with 3 cylinders?
schema_links:
[cars_data.Horsepower,car_makers.Maker,cars_data.Cylinders,car_makers.Id = cars_data.Id,3]
classification:
The question is "What is the maximum [horsepower] and the [make] of the car models with 3 [cylinders]?". [horsepower] matches table = [cars_data]. [make] matches table = [car_makers]. [cylinders] matches table = [cars_data]. So, tables = [cars_data, car_makers] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 132
SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;
What is the largest amount of horsepower for the models with 3 cylinders and what make is it?
schema_links:
[cars_data.Horsepower,cars_data.Cylinders,car_makers.Maker,car_makers.Id = cars_data.Id,3]
classification:
The question is "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?" [models with 3 cylinders] matches table = [cars_data]. So, tables = [cars_data] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 133
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;
Which model saves the most gasoline? That is to say, have the maximum miles per gallon.
schema_links:
[model_list.Model, cars_data.MPG, model_list.ModelId = car_names.Model, car_names.MakeId = cars_data.Id]
classification:
The question is "Which [model] saves the most gasoline? That is to say, have the maximum miles per gallon.". [model] matches table = [model_list]. So, tables = [model_list] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 134
select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;
What is the car model with the highest mpg ?
schema_links:
[model_list.Model]
classification:
The question is "What is the car model with the highest [mpg]?" [mpg] matches table = [cars_data]. So, tables = [cars_data] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 135
SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;
What is the average horsepower of the cars before 1980?
schema_links:
[cars_data.Horsepower, cars_data.Year, 1980]
classification:
The question is "What is the average horsepower of the cars before 1980?" [cars_data] matches table = [cars_data]. So, tables = [cars_data] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 136
select avg(horsepower) from cars_data where year  <  1980;
What is the average horsepower for all cars produced before 1980 ?
schema_links:
[cars_data.Horsepower,cars_data.Year,1980]
Slicing error for the classification module
classification:
The given question is incomplete. It appears to be "What is the average horsepower for all cars produced before 1980?" However, it lacks the specific table information needed to determine the complexity. Please provide the table information for the cars dataset, including the relevant columns and their relationships, so that I can classify the query as EASY or COMPLEX based on the number of tables involved.

index is 137
SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';
What is the average edispl of the cars of model volvo?
schema_links:
[cars_data.Edispl, car_names.Model, model_list.Maker, 'volvo']
classification:
The question is "What is the average [edispl] of the cars of model [volvo]?". [edispl] matches table = [cars_data]. [volvo] matches tables = [car_names, model_list, car_makers]. So, tables = [cars_data, car_names, model_list, car_makers] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 138
SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';
What is the average edispl for all volvos?
schema_links:
[cars_data.Edispl, model_list.Maker = car_makers.Id, car_names.Model = model_list.Model, car_names.MakeId = cars_data.Id, 'volvo']
classification:
The question is "What is the average [edispl] for all [volvos]?". [edispl] matches column = [cars_data.Edispl]. [volvos] matches table = [car_makers, model_list, car_names, cars_data]. tables = [car_makers, model_list, car_names, cars_data] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 139
SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;
What is the maximum accelerate for different number of cylinders?
schema_links:
[cars_data.Accelerate,cars_data.Cylinders]
Slicing error for the classification module
classification:
The question "What is the maximum accelerate for different number of cylinders?" does not match any of the given tables or columns in the schema. Therefore, it cannot be classified as either "EASY" or "COMPLEX" based on the number of tables.

index is 140
SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;
What is the maximum accelerate for all the different cylinders?
schema_links:
[cars_data.Accelerate, cars_data.Cylinders]
classification:
The question is "What is the maximum [accelerate] for all the different [cylinders]?". [accelerate] matches table = [cars_data]. [cylinders] matches table = [cars_data]. So, tables = [cars_data] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 141
SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;
Which model has the most version(make) of cars?
schema_links:
[model_list.Model,car_makers.Maker,model_list.Maker = car_makers.Id]
classification:
The question is "Which [model] has the most version(make) of [cars]?". [model] matches table = [model_list]. [cars] matches table = [car_makers]. tables = [model_list, car_makers] are connected by table = [model_list.Maker = car_makers.Id]. So, tables = [model_list, car_makers] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 142
SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;
What model has the most different versions?
schema_links:
[model_list.Model]
classification:
The question is "What [model] has the most different versions?" [model] matches table = [model_list]. So, tables = [model_list] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 143
SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;
How many cars have more than 4 cylinders?
schema_links:
[cars_data.*, cars_data.Cylinders, 4]
classification:
The question is "How many [cars] have more than 4 [cylinders]?". [cars] matches table = [cars_data]. So, tables = [cars_data] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 144
SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;
What is the number of cars with more than 4 cylinders?
schema_links:
[COUNT(cars_data.Id), cars_data.Cylinders, 4]
Slicing error for the classification module
classification:
The question is "What is the number of cars with more than 4 cylinders?". This question does not correspond to the given database schema. Therefore, it cannot be classified as either "EASY" or "COMPLEX" based on the number of tables.

index is 145
SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;
how many cars were produced in 1980?
schema_links:
[COUNT(cars_data.Id),cars_data.Year,1980]
classification:
The question is "how many [cars] were produced in 1980?". [cars] matches table = [cars_data]. So, tables = [cars_data] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 146
SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;
In 1980, how many cars were made?
schema_links:
[cars_data.Year,cars_data.*]
classification:
The question is "In 1980, how many [cars] were made?". [cars] matches table = [cars_data]. So, tables = [cars_data] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 147
SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';
How many car models were produced by the maker with full name American Motor Company?
schema_links:
[model_list.*,car_makers.FullName,model_list.Maker = car_makers.Id,'American Motor Company']
classification:
The question is "How many [car models] were produced by the [maker] with full name [American Motor Company]?". [car models] matches table = [model_list]. [maker] matches table = [car_makers]. So, tables = [model_list, car_makers] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 148
SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';
What is the number of car models created by the car maker American Motor Company?
schema_links:
[COUNT(model_list.ModelId),model_list.Maker,car_makers.Id = model_list.Maker,'American Motor Company']
classification:
The question is "What is the number of car models created by the car maker American Motor Company?". The relevant tables are [car_makers] and [model_list]. They are connected by the condition [car_makers.Id = model_list.Maker]. So, tables = [car_makers, model_list] which number of tables >= 1. Therefore, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 149
SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;
Which makers designed more than 3 car models? List full name and the id.
schema_links:
[car_makers.Id, car_makers.FullName, model_list.Maker, 3]
classification:
The question is "Which [makers] designed more than 3 [car models]? List [full name] and the [id].". [makers] matches table = [car_makers]. [car models] matches table = [model_list]. So, tables = [car_makers, model_list] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 150
SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;
What are the names and ids of all makers with more than 3 models?
schema_links:
[car_makers.Maker, car_makers.Id, model_list.Maker, 3]
classification:
The question is "What are the names and ids of all [makers] with more than 3 [models]?". [makers] matches table = [car_makers]. [models] matches table = [model_list]. So, tables = [car_makers, model_list] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 151
SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;
Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?
schema_links:
[model_list.Model,car_makers.FullName,car_makers.Id = model_list.Maker,cars_data.Weight,cars_data.Id = car_names.MakeId,'General Motors',3500]
classification:
The question is "Which [distinctive models] are produced by [maker] with the [full name General Motors] or [weighing more than 3500]?". [distinctive models] matches table = [model_list]. [maker] matches table = [car_makers]. [full name General Motors] matches [car_makers.FullName]. [weighing more than 3500] matches table = [cars_data]. tables = [model_list, car_makers, cars_data] are connected by table = [car_names]. So, tables = [model_list, car_makers, car_names, cars_data] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 152
SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;
What are the different models created by either the car maker General Motors or weighed more than 3500?
schema_links:
[model_list.Model, car_makers.Maker = car_makers.Id, car_names.Model = model_list.Model, cars_data.Weight, cars_data.Id = car_names.MakeId, car_makers.Id = model_list.Maker, 'General Motors', 3500]
classification:
The question is "What are the different models created by either the car maker General Motors or weighed more than 3500?". [models] matches tables = [model_list, car_makers, car_names, cars_data]. So, tables = [model_list, car_makers, car_names, cars_data] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 153
select distinct year from cars_data where weight between 3000 and 4000;
In which years cars were produced weighing no less than 3000 and no more than 4000 ?
schema_links:
[cars_data.Year, cars_data.Weight, 3000, 4000]
classification:
The question is "In which years were cars produced weighing no less than 3000 and no more than 4000?". The relevant table is [cars_data]. So, the number of tables is 1. Therefore, the SQL query can be classified as "EASY".
Label: "EASY"

index is 154
select distinct year from cars_data where weight between 3000 and 4000;
What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?
schema_links:
[cars_data.Year, cars_data.Weight, 4000, 3000]
classification:
The question is "What are the different [years] in which there were [cars] produced that weighed less than 4000 and also cars that weighted more than 3000?". [years] matches table = [cars_data]. [cars] matches table = [cars_data]. So, tables = [cars_data] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 155
SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;
What is the horsepower of the car with the largest accelerate?
schema_links:
[cars_data.Horsepower, cars_data.Accelerate]
classification:
The question is "What is the horsepower of the car with the largest [accelerate]?" [accelerate] matches table = [cars_data]. So, tables = [cars_data] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 156
SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;
What is the horsepower of the car with the greatest accelerate?
schema_links:
[cars_data.Horsepower, cars_data.Accelerate]
classification:
The question is "What is the horsepower of the car with the greatest accelerate?" [car] and [accelerate] match the table [cars_data]. So, tables = [cars_data] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 157
SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
For model volvo, how many cylinders does the car with the least accelerate have?
schema_links:
[car_names.Model,car_makers.Maker,model_list.Model,cars_data.Cylinders,cars_data.Accelerate,car_names.MakeId = cars_data.Id,car_makers.Id = model_list.Maker,'volvo']
classification:
The question is "For model [volvo], how many [cylinders] does the car with the least [accelerate] have?". [volvo] matches table = [car_names]. [cylinders] matches table = [cars_data]. [accelerate] matches table = [cars_data]. tables = [car_names, cars_data] are connected by table = [model_list]. tables = [car_names, cars_data, model_list] are connected by table = [car_makers]. So, tables = [car_names, cars_data, model_list, car_makers] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 158
SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
For a volvo model, how many cylinders does the version with least accelerate have?
schema_links:
[car_makers.Maker, model_list.Model, cars_data.Cylinders, cars_data.Accelerate, car_makers.Id = model_list.Maker, car_names.MakeId = model_list.Model, cars_data.Id = car_names.MakeId]
classification:
The question is "For a [volvo] [model], how many [cylinders] does the version with [least accelerate] have?". [volvo] matches table = [car_makers]. [model] matches tables = [model_list, car_names]. [cylinders] matches table = [cars_data]. [least accelerate] matches table = [cars_data]. So, tables = [car_makers, model_list, car_names, cars_data] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 159
SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );
How many cars have a larger accelerate than the car with the largest horsepower?
schema_links:
[cars_data.Accelerate,cars_data.Horsepower]
classification:
The question is "How many cars have a larger [accelerate] than the car with the largest [horsepower]?". [accelerate] matches column = [cars_data.Accelerate]. [horsepower] matches column = [cars_data.Horsepower]. So, columns = [cars_data.Accelerate, cars_data.Horsepower] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 160
SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );
What is the number of cars with a greater accelerate than the one with the most horsepower?
schema_links:
[COUNT(cars_data.Id),MAX(cars_data.Horsepower)]
Slicing error for the classification module
classification:
The question is "What is the number of cars with a greater [accelerate] than the one with the most [horsepower]?". [accelerate] matches column = [cars_data.Accelerate]. [horsepower] matches column = [cars_data.Horsepower]. So, columns = [cars_data.Accelerate, cars_data.Horsepower] which number of tables = 0. Therefore, the SQL query cannot be classified as it doesn't involve any specific tables.

index is 161
select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2
How many countries has more than 2 car makers ?
schema_links:
[countries.CountryName,car_makers.Country = countries.CountryId,2]
classification:
The question is "How many [countries] has more than 2 [car makers]?" [countries] matches table = [countries]. [car makers] matches table = [car_makers]. So, tables = [countries, car_makers] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 162
select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2
What is the number of countries with more than 2 car makers ?
schema_links:
[countries.CountryName,car_makers.Id,car_makers.Country = countries.CountryId,2]
classification:
The question is "What is the number of countries with more than 2 [car makers]?" [car makers] matches table = [car_makers]. So, tables = [car_makers] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 163
SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;
How many cars has over 6 cylinders?
schema_links:
[cars_data.*,cars_data.Cylinders,6]
classification:
The question is "How many [cars] has over 6 cylinders?". [cars] matches table = [cars_data]. So, tables = [cars_data] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 164
SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;
What is the number of carsw ith over 6 cylinders?
schema_links:
[]
Slicing error for the classification module
classification:
The question is incomplete. It seems to be asking "What is the number of cars with over 6 cylinders?" but it lacks the necessary information about the tables and columns involved in the query. Please provide the relevant table and column information to classify the query.

index is 165
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;
For the cars with 4 cylinders, which model has the largest horsepower?
schema_links:
[cars_data.Cylinders,cars_data.Horsepower,4]
classification:
The question is "For the cars with [4 cylinders], which [model] has the largest [horsepower]?". [4 cylinders] matches table = [cars_data]. [model] matches table = [model_list]. So, tables = [cars_data, model_list] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 166
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;
For all of the 4 cylinder cars, which model has the most horsepower?
schema_links:
[cars_data.Cylinders,cars_data.Horsepower,4]
classification:
The question is "For all of the [4 cylinder cars], which [model] has the most [horsepower]?". [4 cylinder cars] matches table = [cars_data]. [model] matches table = [model_list]. So, tables = [cars_data, model_list] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 167
SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;
Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.
schema_links:
[cars_data.Horsepower, cars_data.Cylinders, car_makers.Id, car_makers.Maker, lowest horsepower, cylinders <= 3]
classification:
The question is "Among the cars with more than [lowest horsepower], which ones do not have more than [3 cylinders]? List the [car makeid] and [make name]." [cars] matches table = [cars_data]. [lowest horsepower] and [cylinders <= 3] are conditions based on columns in the [cars_data] table. [car makeid] and [make name] correspond to columns in the [car_makers] and [car_names] tables. So, tables = [cars_data, car_makers, car_names] which number of tables >= 1. The SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 168
select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;
Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?
schema_links:
[car_makers.Id = model_list.Maker, model_list.Model = car_names.Model, car_names.MakeId = cars_data.Id, cars_data.Horsepower, cars_data.Cylinders, minimum horsepower, 4]
classification:
The question is "Among the [cars] that do not have the [minimum horsepower], what are the [make ids and names] of all those with [less than 4 cylinders]?" [cars] matches tables = [car_makers, model_list, car_names, cars_data]. [minimum horsepower] and [4 cylinders] can be derived from the [cars_data] table. So, tables = [car_makers, model_list, car_names, cars_data] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 169
select max(mpg) from cars_data where cylinders  =  8 or year  <  1980
What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?
schema_links:
[cars_data.MPG, cars_data.Cylinders, cars_data.Year, 8, 1980]
classification:
The question is "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980?". The relevant table for this question is [cars_data]. So, the number of tables is 1. Therefore, the SQL query can be classified as "EASY".
Label: "EASY"

index is 170
select max(mpg) from cars_data where cylinders  =  8 or year  <  1980
What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?
schema_links:
[cars_data.MPG, cars_data.Cylinders, cars_data.Year, 8, 1980]
classification:
The question is "What is the maximum [mpg] of the [cars] that had [8 cylinders] or that were produced [before 1980]?" [mpg] matches table = [cars_data]. [cars] matches table = [cars_data]. So, tables = [cars_data] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 171
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';
Which models are lighter than 3500 but not built by the 'Ford Motor Company'?
schema_links:
[model_list.Model,cars_data.Weight,car_makers.Maker,model_list.Maker = car_makers.Id,3500,'Ford Motor Company']
classification:
The question is "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?" [models] matches table = [model_list]. [3500] matches table = [cars_data]. ['Ford Motor Company'] matches table = [car_makers]. So, tables = [model_list, cars_data, car_makers] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 172
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';
What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?
schema_links:
[model_list.Model, cars_data.Weight, car_makers.Maker, model_list.Maker = car_makers.Id, 3500, 'Ford Motor Company']
classification:
The question is "What are the different [models] that are lighter than 3500 but were not built by the [Ford Motor Company]?". [models] matches table = [model_list]. So, tables = [model_list] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 173
SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;
What are the name of the countries where there is not a single car maker?
schema_links:
[countries.CountryName,car_makers.Country = countries.CountryId]
classification:
The question is "What are the names of the [countries] where there is not a single [car maker]?" [countries] matches table = [countries]. [car maker] matches table = [car_makers]. So, tables = [countries, car_makers] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 174
SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;
What are the names of the countries with no car makers?
schema_links:
[countries.CountryName,car_makers.Country = countries.CountryId]
classification:
The question is "What are the names of the [countries] with no [car makers]?" [countries] matches table = [countries]. [car makers] matches table = [car_makers]. tables = [countries, car_makers] are connected by table = [car_makers.Country = countries.CountryId]. So, tables = [countries, car_makers] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 175
select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;
Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .
schema_links:
[car_makers.Id, car_makers.Maker, model_list.Maker, 2, 3]
classification:
The question is "Which are the [car makers] which produce at least 2 [models] and more than 3 [car makers]? List the [id] and the [maker].". [car makers] matches table = [car_makers]. [models] matches table = [model_list]. So, tables = [car_makers, model_list] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 176
SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;
What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?
schema_links:
[car_makers.Id = model_list.Maker, car_makers.Maker, model_list.Maker, COUNT(model_list.Model) >= 2, car_names.Model = model_list.Model, car_names.Make, COUNT(car_names.Model) > 3, car_names.MakeId = cars_data.Id]
classification:
The question is "What are the [ids] and [makers] of all [car makers] that produce at least 2 models and make more than 3 cars?". [ids] matches column = [car_makers.Id]. [makers] matches column = [car_makers.Maker]. [car makers] matches table = [car_makers]. The condition "produce at least 2 models" matches table = [model_list] connected by column = [car_makers.Id = model_list.Maker], and the condition "make more than 3 cars" matches table = [car_names] connected by column = [car_names.MakeId = cars_data.Id]. So, tables = [car_makers, model_list, car_names, cars_data] which number of tables >= 1. Hence, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 177
SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';
What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?
schema_links:
[countries.CountryId, countries.CountryName, car_makers.Id, car_names.Model, model_list.Maker, car_makers.Country = countries.CountryId, car_names.Model = model_list.Model]
classification:
The question is "What are the id and names of the [countries] which have more than 3 [car makers] or produce the 'fiat' [model]?". [countries] matches table = [countries]. [car makers] matches table = [car_makers]. [model] matches table = [model_list]. tables = [countries, car_makers, model_list] are connected by table = [car_names]. So, tables = [countries, car_makers, model_list, car_names] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 178
select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';
What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?
schema_links:
[countries.CountryId, countries.CountryName, car_makers.Id, model_list.Maker, 3, "fiat"]
classification:
The question is "What are the ids and names of all [countries] that either have more than 3 [car makers] or produce [fiat] model?". [countries] matches table = [countries]. [car makers] matches table = [car_makers]. [fiat] matches table = [model_list]. So, tables = [countries, car_makers, model_list] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 179
SELECT Country FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
Which country does Airline "JetBlue Airways" belong to?
schema_links:
[airlines.Country,'JetBlue Airways']
classification:
The question is "Which [country] does [Airline] "JetBlue Airways" belong to?". [country] matches table = [airlines]. So, tables = [airlines] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 180
SELECT Country FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
What country is Jetblue Airways affiliated with?
schema_links:
[airlines.Country,'Jetblue Airways']
classification:
The question is "What [country] is [Jetblue Airways] affiliated with?". [country] matches table = [airlines]. So, tables = [airlines] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 181
SELECT Abbreviation FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
What is the abbreviation of Airline "JetBlue Airways"?
schema_links:
[airlines.Abbreviation,airlines.Airline,"JetBlue Airways"]
classification:
The question is "What is the abbreviation of [Airline] "JetBlue Airways"?". [Airline] matches table = [airlines]. So, tables = [airlines] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 182
SELECT Abbreviation FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
Which abbreviation corresponds to Jetblue Airways?
schema_links:
[airlines.Abbreviation,airlines.Airline,'Jetblue Airways']
classification:
The question is "Which [abbreviation] corresponds to [Jetblue Airways]?". [abbreviation] matches table = [airlines]. So, tables = [airlines] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 183
SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  "USA"
List all airline names and their abbreviations in "USA".
schema_links:
[airlines.Airline, airlines.Abbreviation, airports.Country, airports.CountryAbbrev = airlines.uid, "USA"]
classification:
The question is "List all airline names and their abbreviations in 'USA'.". The relevant tables are [airlines] and [airports]. The tables are connected by the condition [airports.Country, airports.CountryAbbrev = airlines.uid, 'USA']. So, tables = [airlines, airports] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 184
SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  "USA"
What are the airline names and abbreviations for airlines in the USA?
schema_links:
[airlines.Airline, airlines.Abbreviation, airlines.Country = airports.Country, airports.Country, 'USA']
classification:
The question is "What are the airline names and abbreviations for airlines in the USA?" The required information can be obtained from the [airlines] and [airports] tables. The tables involved are [airlines] and [airports], which makes the number of tables = 2. Therefore, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 185
SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  "Anthony"
List the airport code and name in the city of Anthony.
schema_links:
[airports.AirportCode, airports.AirportName, airports.City, 'Anthony']
classification:
The question is "List the airport code and name in the city of [Anthony]." The tables involved in this question are [airports]. So, the number of tables is 1. Therefore, the SQL query can be classified as "EASY".
Label: "EASY"

index is 186
SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  "Anthony"
Give the airport code and airport name corresonding to the city Anthony.
schema_links:
[airports.AirportCode, airports.AirportName, airports.City, 'Anthony']
Slicing error for the classification module
classification:
The question is "Give the airport code and airport name corresponding to the city [Anthony]." [Anthony] does not match any specific table or column in the given schema. Therefore, it is not possible to determine the number of tables involved in the query.

index is 187
SELECT count(*) FROM AIRLINES
How many airlines do we have?
schema_links:
[airlines.Airline]
classification:
The question is "How many [airlines] do we have?". [airlines] matches table = [airlines]. So, tables = [airlines] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 188
SELECT count(*) FROM AIRLINES
What is the total number of airlines?
schema_links:
[COUNT(airlines.uid)]
classification:
The question is "What is the total number of [airlines]?". [airlines] matches table = [airlines]. So, tables = [airlines] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 189
SELECT count(*) FROM AIRPORTS
How many airports do we have?
schema_links:
[COUNT(airports.*)]
classification:
The question is "How many [airports] do we have?". [airports] matches table = [airports]. So, tables = [airports] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 190
SELECT count(*) FROM AIRPORTS
Return the number of  airports.
schema_links:
[COUNT(airports.*)]
classification:
The question is "Return the number of airports." There is no specific condition or requirement to join multiple tables or perform complex operations. The query only involves a single table, which is [airports]. So, the SQL query can be classified as "EASY."
Label: "EASY"

index is 191
SELECT count(*) FROM FLIGHTS
How many flights do we have?
schema_links:
[COUNT(flights.*)]
classification:
The question is "How many [flights] do we have?". [flights] matches table = [flights]. So, tables = [flights] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 192
SELECT count(*) FROM FLIGHTS
Return the number of flights.
schema_links:
[COUNT(flights.*)]
classification:
The question is "Return the number of [flights]." [flights] matches table = [flights]. So, tables = [flights] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 193
SELECT Airline FROM AIRLINES WHERE Abbreviation  =  "UAL"
Which airline has abbreviation 'UAL'?
schema_links:
[airlines.Airline,'UAL']
classification:
The question is "Which [airline] has abbreviation 'UAL'?". [airline] matches table = [airlines]. So, tables = [airlines] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 194
SELECT Airline FROM AIRLINES WHERE Abbreviation  =  "UAL"
Give the airline with abbreviation 'UAL'.
schema_links:
[airlines.Airline, airlines.Abbreviation, 'UAL']
classification:
The question is "Give the airline with abbreviation 'UAL'.". [airline] matches table = [airlines]. So, tables = [airlines] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 195
SELECT count(*) FROM AIRLINES WHERE Country  =  "USA"
How many airlines are from USA?
schema_links:
[airlines.Airline,airlines.Country,'USA']
classification:
The question is "How many [airlines] are from USA?" [airlines] matches table = [airlines]. So, tables = [airlines] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 196
SELECT count(*) FROM AIRLINES WHERE Country  =  "USA"
Return the number of airlines in the USA.
schema_links:
[airlines.uid, airlines.Country, 'USA']
classification:
The question is "Return the number of airlines in the USA." The keyword [airlines] matches table = [airlines]. So, tables = [airlines] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 197
SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"
Which city and country is the Alton airport at?
schema_links:
[airports.City, airports.Country, 'Alton']
classification:
The question is "Which [city] and [country] is the Alton airport at?". [city] matches table = [airports]. [country] matches table = [airports]. So, tables = [airports] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 198
SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"
Give the city and country for the Alton airport.
schema_links:
[airports.City,airports.Country,airports.AirportName,'Alton']
classification:
The question is "Give the [city] and [country] for the [Alton airport].". [city] matches column = [airports.City]. [country] matches column = [airports.Country]. [Alton airport] matches value = 'Alton' in column = [airports.AirportName]. So, tables = [airports] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 199
SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  "AKO"
What is the airport name for airport 'AKO'?
schema_links:
[airports.AirportName, airports.AirportCode = 'AKO']
classification:
The question is "What is the airport name for airport 'AKO'?". [airport name] matches the table [airports]. So, tables = [airports] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 200
SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  "AKO"
Return the name of the airport with code 'AKO'.
schema_links:
[airports.AirportName,airports.AirportCode,'AKO']
classification:
The question is "Return the name of the [airport] with code 'AKO'.". [airport] matches table = [airports]. So, tables = [airports] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 201
SELECT AirportName FROM AIRPORTS WHERE City = "Aberdeen"
What are airport names at City 'Aberdeen'?
schema_links:
[airports.AirportName,airports.City,'Aberdeen']
classification:
The question is "What are airport names at [City] 'Aberdeen'?" [City] matches table = [airports]. So, tables = [airports] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 202
SELECT AirportName FROM AIRPORTS WHERE City = "Aberdeen"
What are the names of airports in Aberdeen?
schema_links:
[airports.AirportName, airports.City, "Aberdeen"]
classification:
The question is "What are the names of [airports] in [Aberdeen]?". [airports] matches table = [airports]. So, tables = [airports] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 203
SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  "APG"
How many flights depart from 'APG'?
schema_links:
[flights.*,flights.SourceAirport = airports.AirportCode,'APG']
Slicing error for the classification module
classification:
The given question is not related to the provided tables and schema. The question is about flights and airports, while the provided schema is about a university database. Therefore, it is not possible to classify this question as either "EASY" or "COMPLEX" based on the number of tables.

index is 204
SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  "APG"
Count the number of flights departing from 'APG'.
schema_links:
[flights.FlightNo,flights.SourceAirport,flights.SourceAirport = airports.AirportCode,'APG']
classification:
The question is "Count the number of flights departing from 'APG'." The [flights] match table is [flights]. So, tables = [flights], which means the number of tables is 1. Therefore, the SQL query can be classified as "EASY".
Label: "EASY"

index is 205
SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"
How many flights have destination ATO?
schema_links:
[flights.DestAirport = airports.AirportCode,'ATO']
classification:
The question is "How many flights have destination ATO?" [flights] matches table = [flights]. So, tables = [flights] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 206
SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"
Count the number of flights into ATO.
schema_links:
[flights.*,flights.DestAirport = airports.AirportCode,'ATO']
classification:
The question is "Count the number of flights into ATO." [flights] matches table = [flights]. So, tables = [flights] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 207
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
How many flights depart from City Aberdeen?
schema_links:
[flights.*,flights.SourceAirport = airports.AirportCode,airports.City,Aberdeen]
classification:
The question is "How many [flights] depart from [City] Aberdeen?". [flights] matches table = [flights]. [City] matches table = [airports]. So, tables = [flights, airports] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 208
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Return the number of flights departing from Aberdeen.
schema_links:
[COUNT(flights.FlightNo), flights.SourceAirport = airports.AirportCode, Aberdeen]
classification:
The question is "Return the number of flights departing from [Aberdeen]. [Aberdeen] matches table = [airports]. So, tables = [airports] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 209
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
How many flights arriving in Aberdeen city?
schema_links:
[flights.*,flights.DestAirport = airports.AirportCode,Aberdeen]
Slicing error for the classification module
classification:
The question is "How many flights arriving in [Aberdeen] city?". [flights] matches table = [flights]. So, tables = [flights] which number of tables = 1. However, since the given schema does not include the [airports] table, which is required to match the condition [flights.DestAirport = airports.AirportCode], we cannot determine the complexity of the SQL query based on the given information.

index is 210
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Return the number of flights arriving in Aberdeen.
schema_links:
[flights.*, airports.City, airports.AirportName, flights.DestAirport = airports.AirportCode, Aberdeen]
classification:
The question is "Return the number of flights arriving in [Aberdeen]." [flights] matches table = [flights]. [Aberdeen] matches table = [airports]. tables = [flights, airports] are connected by table = [flights.DestAirport = airports.AirportCode]. So, tables = [flights, airports] which number of tables = 2. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 211
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"
How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?
schema_links:
[flights.FlightNo, flights.SourceAirport = airports.AirportCode, flights.DestAirport = airports.AirportCode, 'Ashley']
Slicing error for the classification module
classification:
The given question is incomplete and does not specify the required tables for retrieving the desired information. Therefore, it is not possible to classify it as either EASY or COMPLEX based on the number of tables. To determine the complexity, we would need additional information about the tables and their relationships in the database schema.

index is 212
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"
How many flights fly from Aberdeen to Ashley?
schema_links:
[flights.FlightNo, flights.SourceAirport = airports.AirportCode, flights.DestAirport = airports.AirportCode, airports.AirportName = 'Aberdeen', airports.AirportName = 'Ashley']
classification:
The question is "How many flights fly from [Aberdeen] to [Ashley]?". [Aberdeen] and [Ashley] refer to airport names, so we can link them to the [airports] table using the columns [Airports.AirportName]. The [flights] table can be linked to [airports] using the columns [flights.SourceAirport] and [flights.DestAirport]. So, tables = [flights, airports] which number of tables = 2. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 213
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"
How many flights does airline 'JetBlue Airways' have?
schema_links:
[COUNT(flights.FlightNo),flights.Airline = airlines.Abbreviation,'JetBlue Airways']
classification:
The question is "How many flights does [airline] 'JetBlue Airways' have?". [airline] matches table = [airlines]. So, tables = [airlines] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 214
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"
Give the number of Jetblue Airways flights.
schema_links:
[COUNT(flights.FlightNo), flights.Airline = airlines.Abbreviation, 'Jetblue Airways']
classification:
The question is "Give the number of [Jetblue Airways] flights.". The [Jetblue Airways] matches the table = [flights] and the condition [flights.Airline = airlines.Abbreviation, 'Jetblue Airways'] matches the table = [airlines]. So, the tables = [flights, airlines] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 215
SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"
How many 'United Airlines' flights go to Airport 'ASY'?
schema_links:
[flights.FlightNo, airlines.Airline, flights.Airline = airlines.uid, flights.DestAirport = airports.AirportCode, airports.AirportCode]
Slicing error for the classification module
classification:
The given question does not match any of the provided schema links. Therefore, it cannot be classified as either "EASY" or "COMPLEX" based on the number of tables.

index is 216
SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"
Count the number of United Airlines flights arriving in ASY Airport.
schema_links:
[flights.FlightNo, flights.DestAirport, flights.DestAirport = airports.AirportCode, United Airlines, ASY]
classification:
The question is "Count the number of [United Airlines] flights arriving in [ASY] Airport.". [United Airlines] matches table = [airlines]. [ASY] matches table = [airports]. tables = [airlines, airports] are connected by table = [flights]. So, tables = [airlines, airports, flights] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 217
SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"
How many 'United Airlines' flights depart from Airport 'AHD'?
schema_links:
[flights.*, flights.Airline = 'United Airlines', flights.SourceAirport, flights.SourceAirport = airports.AirportCode, airports.AirportCode]
classification:
The question is "How many 'United Airlines' flights depart from Airport 'AHD'?" The tables involved are [flights] and [airports], connected by the column [flights.SourceAirport] and [airports.AirportCode]. So, the number of tables involved is 2, which means the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 218
SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"
Return the number of United Airlines flights leaving from AHD Airport.
schema_links:
[flights.FlightNo, flights.SourceAirport, 'United Airlines', 'AHD']
classification:
The question is "Return the number of [United Airlines] flights leaving from [AHD] Airport.". The relevant table is [flights]. So, tables = [flights], which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 219
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"
How many United Airlines flights go to City 'Aberdeen'?
schema_links:
[flights.*, flights.Airline = airlines.Abbreviation, flights.DestAirport = airports.AirportCode, 'United Airlines', 'Aberdeen']
classification:
The question is "How many [United Airlines] flights go to [City 'Aberdeen']?". The table [flights] matches the given question. So, the number of tables is 1. Therefore, the SQL query can be classified as "EASY".
Label: "EASY"

index is 220
SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"
Count the number of United Airlines flights that arrive in Aberdeen.
schema_links:
[COUNT(flights.FlightNo), flights.DestAirport = airports.AirportCode, airlines.uid = flights.Airline, "United Airlines", "Aberdeen"]
classification:
The question is "Count the number of [United Airlines] flights that arrive in [Aberdeen]." [United Airlines] matches table = [airlines]. [Aberdeen] matches table = [airports]. tables = [airlines, airports] are connected by table = [flights]. So, tables = [airlines, airports, flights] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 221
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
Which city has most number of arriving flights?
schema_links:
[airports.City, flights.DestAirport = airports.AirportCode, flights.*]
classification:
The question is "Which [city] has the most number of arriving [flights]?". [city] matches table = [airports]. [flights] matches table = [flights]. tables = [airports, flights] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 222
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
Which city has the most frequent destination airport?
schema_links:
[airports.City,flights.DestAirport = airports.AirportCode]
classification:
The question is "Which city has the most frequent destination airport?" The relevant tables are [airports] and [flights], connected by the relationship [flights.DestAirport = airports.AirportCode]. So, the number of tables is 2, which means the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 223
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
Which city has most number of departing flights?
schema_links:
[airports.City, flights.SourceAirport]
classification:
The question is "Which [city] has the most number of departing [flights]?". [city] matches table = [airports]. [flights] matches table = [flights]. So, tables = [airports, flights] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 224
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
Which city is the most frequent source airport?
schema_links:
[airports.City, flights.SourceAirport]
classification:
The question is "Which [city] is the most frequent source [airport]?" [city] matches table = [airports]. [airport] matches table = [flights]. So, tables = [airports, flights] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 225
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
What is the code of airport that has the highest number of flights?
schema_links:
[airports.AirportCode, flights.SourceAirport = airports.AirportCode, flights.DestAirport = airports.AirportCode, flights.*]
classification:
The question is "What is the code of [airport] that has the highest number of [flights]?". [airport] matches table = [airports]. [flights] matches table = [flights]. So, tables = [airports, flights] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 226
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
What is the airport code of the airport with the most flights?
schema_links:
[airports.AirportCode, flights.SourceAirport = airports.AirportCode, flights.DestAirport = airports.AirportCode]
classification:
The question is "What is the airport code of the airport with the most flights?" [airport code] matches table = [airports]. [flights] matches table = [flights]. [source airport] and [destination airport] in [flights] are foreign keys referencing [airport code] in [airports]. So, tables = [airports, flights] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 227
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
What is the code of airport that has fewest number of flights?
schema_links:
[airports.AirportCode, flights.SourceAirport = airports.AirportCode, flights.DestAirport = airports.AirportCode, flights.*]
classification:
The question is "What is the code of [airport] that has [fewest] number of [flights]?". [airport] matches table = [airports]. [flights] matches table = [flights]. So, tables = [airports, flights] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 228
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
Give the code of the airport with the least flights.
schema_links:
[]
classification:
The question is "Give the code of the [airport] with the least [flights]." [airport] matches table = [airports]. [flights] matches table = [flights]. So, tables = [airports, flights] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 229
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1
Which airline has most number of flights?
schema_links:
[airlines.Airline,flights.Airline]
classification:
The question is "Which [airline] has [most number of flights]?" [airline] matches table = [airlines]. [most number of flights] matches table = [flights]. So, tables = [airlines, flights] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 230
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1
What airline serves the most flights?
schema_links:
[airlines.Airline,flights.Airline = airlines.Abbreviation]
classification:
The question is "What [airline] serves the most [flights]?". [airline] matches table = [airlines]. [flights] matches table = [flights]. So, tables = [airlines, flights] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 231
SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1
Find the abbreviation and country of the airline that has fewest number of flights?
schema_links:
[airlines.Abbreviation, airlines.Country, flights.Airline]
classification:
The question is "Find the [abbreviation] and [country] of the [airline] that has [fewest number of flights]?". [abbreviation] matches column = [airlines.Abbreviation]. [country] matches column = [airlines.Country]. [airline] matches table = [airlines]. [fewest number of flights] matches table = [flights]. So, tables = [airlines, flights] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 232
SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1
What is the abbreviation of the airilne has the fewest flights and what country is it in?
schema_links:
[airlines.Abbreviation,flights.Airline = airlines.uid,airlines.Country]
Slicing error for the classification module
classification:
The given question is incomplete. It seems to be missing a closing quotation mark. Could you please provide the complete question?

index is 233
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"
What are airlines that have some flight departing from airport 'AHD'?
schema_links:
[airlines.Airline,airports.AirportCode,flights.SourceAirport,'AHD']
classification:
The question is "What are [airlines] that have some flight departing from airport 'AHD'?" [airlines] matches table = [airlines]. So, tables = [airlines] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 234
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"
Which airlines have a flight with source airport AHD?
schema_links:
[airlines.Airline,flights.SourceAirport = airports.AirportCode,AHD]
Slicing error for the classification module
classification:
The given question is incomplete. It seems to be missing the information about the tables and columns involved in the query. Please provide the necessary details, including the table names and column names, to classify the complexity of the question.

index is 235
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"
What are airlines that have flights arriving at airport 'AHD'?
schema_links:
[airlines.Airline,flights.DestAirport = airports.AirportCode,flights.Airline = airlines.uid,'AHD']
classification:
The question is "What are [airlines] that have flights arriving at airport 'AHD'?" [airlines] matches table = [airlines]. So, tables = [airlines] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 236
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"
Which airlines have a flight with destination airport AHD?
schema_links:
[airlines.Airline, flights.DestAirport = airports.AirportCode, 'AHD']
classification:
The question is "Which [airlines] have a flight with destination airport AHD?". [airlines] matches table = [airlines]. So, tables = [airlines] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 237
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
Find all airlines that have flights from both airports 'APG' and 'CVO'.
schema_links:
[airlines.Airline, flights.SourceAirport = airports.AirportCode, flights.DestAirport = airports.AirportCode, 'APG', 'CVO']
classification:
The question is "Find all [airlines] that have flights from both airports 'APG' and 'CVO'.". [airlines] matches table = [airlines]. So, tables = [airlines] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 238
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
Which airlines have departing flights from both APG and CVO airports?
schema_links:
[airlines.Airline, flights.SourceAirport = airports.AirportCode, APG, CVO]
classification:
The question is "Which [airlines] have departing flights from both APG and CVO airports?". [airlines] matches table = [airlines]. So, tables = [airlines] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 239
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"
Find all airlines that have flights from airport 'CVO' but not from 'APG'.
schema_links:
[airlines.Airline, flights.SourceAirport = airports.AirportCode, flights.DestAirport = airports.AirportCode, 'CVO', 'APG']
classification:
The question is "Find all [airlines] that have flights from airport 'CVO' but not from 'APG'.". [airlines] matches table = [airlines]. So, tables = [airlines] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 240
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"
Which airlines have departures from CVO but not from APG airports?
schema_links:
[flights.Airline, flights.SourceAirport = airports.AirportCode, 'CVO', 'APG']
classification:
The question is "Which [airlines] have departures from [CVO] but not from [APG] airports?". [airlines] matches table = [airlines]. [CVO] matches table = [airports]. [APG] matches table = [airports]. So, tables = [airlines, airports] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 241
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10
Find all airlines that have at least 10 flights.
schema_links:
[airlines.Airline,flights.Airline,flights.Airline = airlines.Abbreviation,10]
classification:
The question is "Find all [airlines] that have at least 10 [flights]." [airlines] matches table = [airlines]. [flights] matches table = [flights]. tables = [airlines, flights] which number of tables = 2. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 242
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10
Which airlines have at least 10 flights?
schema_links:
[airlines.Airline,flights.Airline,10]
classification:
The question is "Which [airlines] have at least 10 [flights]?". [airlines] matches table = [airlines]. [flights] matches table = [flights]. So, tables = [airlines, flights] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 243
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200
Find all airlines that have fewer than 200 flights.
schema_links:
[airlines.Airline,flights.Airline = airlines.Abbreviation,flights.*]
classification:
The question is "Find all [airlines] that have fewer than 200 flights.". [airlines] matches table = [airlines]. [flights] matches table = [flights]. So, tables = [airlines, flights] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 244
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200
Which airlines have less than 200 flights?
schema_links:
[airlines.Airline,flights.Airline = airlines.uid,flights.*]
Slicing error for the classification module
classification:
The given question does not match the provided schema. It seems to be related to a different database that includes tables such as "airlines," "airports," and "flights." Therefore, it cannot be classified as either EASY or COMPLEX based on the number of tables.

index is 245
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"
What are flight numbers of Airline "United Airlines"?
schema_links:
[flights.FlightNo,flights.Airline = airlines.uid,airlines.Airline,'United Airlines']
classification:
The question is "What are [flight numbers] of [Airline] "United Airlines"?". [flight numbers] matches table = [flights]. [Airline] matches table = [airlines]. So, tables = [flights, airlines] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 246
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"
Which flight numbers correspond to United Airlines flights?
schema_links:
[flights.FlightNo,flights.Airline = airlines.Abbreviation,'United Airlines']
classification:
The question is "Which flight numbers correspond to [United Airlines] flights?". [flight numbers] matches table = [flights]. [United Airlines] matches table = [airlines]. So, tables = [flights, airlines] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 247
SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"
What are flight numbers of flights departing from Airport "APG"?
schema_links:
[flights.FlightNo,flights.SourceAirport,flights.SourceAirport = airports.AirportCode,'APG']
classification:
The question is "What are flight numbers of flights departing from Airport 'APG'?". [flights] matches table = [flights]. So, tables = [flights] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 248
SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"
Give the flight numbers of flights leaving from APG.
schema_links:
[flights.FlightNo,flights.SourceAirport,flights.SourceAirport = airports.AirportCode,'APG']
classification:
The question is "Give the [flight numbers] of flights leaving from [APG].". [flight numbers] matches table = [flights]. [APG] matches table = [airports]. So, tables = [flights, airports] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 249
SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"
What are flight numbers of flights arriving at Airport "APG"?
schema_links:
[flights.FlightNo,flights.DestAirport = airports.AirportCode,airports.AirportCode,"APG"]
classification:
The question is "What are flight numbers of flights arriving at Airport "APG"?". [flight numbers] matches table = [flights]. So, tables = [flights] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 250
SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"
Give the flight numbers of flights landing at APG.
schema_links:
[flights.FlightNo, flights.DestAirport = airports.AirportCode, APG]
classification:
The question is "Give the flight numbers of flights landing at [APG]." [APG] matches table = [airports]. [flights] matches table = [flights]. So, tables = [flights, airports] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 251
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
What are flight numbers of flights departing from City "Aberdeen "?
schema_links:
[flights.FlightNo, flights.SourceAirport = airports.AirportCode, 'Aberdeen']
classification:
The question is "What are flight numbers of flights departing from [City] "Aberdeen"?". [City] matches table = [airports]. So, tables = [airports] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 252
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Give the flight numbers of flights leaving from Aberdeen.
schema_links:
[flights.FlightNo, flights.SourceAirport = airports.AirportCode, airports.AirportName, 'Aberdeen']
classification:
The question is "Give the flight numbers of flights leaving from [Aberdeen]." [Aberdeen] matches table = [airports]. So, tables = [airports] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 253
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
What are flight numbers of flights arriving at City "Aberdeen"?
schema_links:
[flights.FlightNo,flights.DestAirport = airports.AirportCode,airports.City,'Aberdeen']
classification:
The question is "What are flight numbers of flights arriving at City 'Aberdeen'?". The relevant table is [flights], and it is connected to the [airports] table through the foreign key flights.DestAirport = airports.AirportCode. So, tables = [flights, airports], which number of tables >= 1. Therefore, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 254
SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
Give the flight numbers of flights arriving in Aberdeen.
schema_links:
[flights.FlightNo, flights.DestAirport = airports.AirportCode, 'Aberdeen']
classification:
The question is "Give the [flight numbers] of flights arriving in [Aberdeen]." [flight numbers] matches table = [flights]. [Aberdeen] matches table = [airports]. So, tables = [flights, airports] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 255
SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"
Find the number of flights landing in the city of Aberdeen or Abilene.
schema_links:
[flights.*, airports.City, flights.DestAirport = airports.AirportCode, 'Aberdeen', 'Abilene']
classification:
The question is "Find the number of [flights] landing in the city of Aberdeen or Abilene.". [flights] matches table = [flights]. So, tables = [flights] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 256
SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"
How many flights land in Aberdeen or Abilene?
schema_links:
[flights.DestAirport = airports.AirportCode, 'Aberdeen', 'Abilene']
classification:
The question is "How many flights land in [Aberdeen] or [Abilene]?". [Aberdeen] and [Abilene] are values, not tables. The tables mentioned in the schema_links are [flights] and [airports]. So, the tables = [flights, airports] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 257
SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
Find the name of airports which do not have any flight in and out.
schema_links:
[airports.AirportName, flights.SourceAirport = airports.AirportCode, flights.DestAirport = airports.AirportCode]
classification:
The question is "Find the name of [airports] which do not have any flight [in and out].". [airports] matches table = [airports]. So, tables = [airports] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 258
SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
Which airports do not have departing or arriving flights?
schema_links:
[airports.AirportCode, flights.SourceAirport = airports.AirportCode, flights.DestAirport = airports.AirportCode]
classification:
The question is "Which [airports] do not have departing or arriving [flights]?". [airports] matches table = [airports]. [flights] matches table = [flights]. So, tables = [airports, flights] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 259
SELECT count(*) FROM employee
How many employees are there?
schema_links:
[employee.Employee_ID]
classification:
The question is "How many [employees] are there?". [employees] matches table = [employee]. So, tables = [employee] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 260
SELECT count(*) FROM employee
Count the number of employees
schema_links:
[employee.Employee_ID]
classification:
The question is "Count the number of [employees]." [employees] matches table = [employee]. So, tables = [employee] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 261
SELECT name FROM employee ORDER BY age
Sort employee names by their age in ascending order.
schema_links:
[employee.Name, employee.Age]
classification:
The question is "Sort [employee] names by their [age] in ascending order.". [employee] matches table = [employee]. So, tables = [employee] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 262
SELECT name FROM employee ORDER BY age
List the names of employees and sort in ascending order of age.
schema_links:
[employee.Name,employee.Age]
classification:
The question is "List the names of [employees] and sort in ascending order of [age]." [employees] matches table = [employee]. So, tables = [employee] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 263
SELECT count(*) ,  city FROM employee GROUP BY city
What is the number of employees from each city?
schema_links:
[COUNT(employee.Employee_ID),employee.City]
Slicing error for the classification module
classification:
The question is "What is the number of employees from each city?" There is no specific mention of tables or columns related to employees and cities in the provided schema. Therefore, it is not possible to determine the complexity of the SQL query based on the number of tables. Additional information about the table structure and relationships is required to classify the query as "EASY" or "COMPLEX."

index is 264
SELECT count(*) ,  city FROM employee GROUP BY city
Count the number of employees for each city.
schema_links:
[employee.Employee_ID, employee.City]
classification:
The question is "Count the number of employees for each city." [employees] matches table = [employee]. So, tables = [employee] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 265
SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1
Which cities do more than one employee under age 30 come from?
schema_links:
[employee.City, employee.Age, 30]
classification:
The question is "Which cities do more than one employee under age 30 come from?" [cities] matches table = [employee]. So, tables = [employee] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 266
SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1
Find the cities that have more than one employee under age 30.
schema_links:
[employee.City,employee.Age,30]
classification:
The question is "Find the [cities] that have more than one employee under age 30.". [cities] matches table = [employee]. So, tables = [employee] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 267
SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION
Find the number of shops in each location.
schema_links:
[COUNT(shop.Shop_ID), shop.Location]
classification:
The question is "Find the number of [shops] in each [location]. [shops] matches table = [shop]. So, tables = [shop] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 268
SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION
How many shops are there in each location?
schema_links:
[shop.Shop_ID,shop.Location]
classification:
The question is "How many [shops] are there in each [location]?". [shops] matches table = [shop]. [location] matches table = [shop]. So, tables = [shop] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 269
SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1
Find the manager name and district of the shop whose number of products is the largest.
schema_links:
[shop.Manager_name, shop.District, shop.Number_products]
classification:
The question is "Find the [manager name] and [district] of the [shop] whose number of products is the largest.". [manager name] matches column = [shop.Manager_name]. [district] matches column = [shop.District]. [shop] matches table = [shop]. So, tables = [shop] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 270
SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1
What are the manager name and district of the shop that sells the largest number of products?
schema_links:
[shop.Manager_name, shop.District, shop.Number_products]
classification:
The question is "What are the manager name and district of the [shop] that sells the largest number of products?". [shop] matches table = [shop]. So, tables = [shop] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 271
SELECT min(Number_products) ,  max(Number_products) FROM shop
find the minimum and maximum number of products of all stores.
schema_links:
[shop.Number_products,shop.*]
classification:
The question is "Find the [minimum] and [maximum] number of [products] of all [stores].". [minimum] and [maximum] are aggregate functions and do not match any specific table. [products] matches table = [shop]. So, tables = [shop] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 272
SELECT min(Number_products) ,  max(Number_products) FROM shop
What are the minimum and maximum number of products across all the shops?
schema_links:
[shop.Number_products]
classification:
The question is "What are the minimum and maximum number of products across all the [shops]?". [shops] matches table = [shop]. So, tables = [shop] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 273
SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC
Return the name, location and district of all shops in descending order of number of products.
schema_links:
[shop.Name, shop.Location, shop.District, shop.Number_products]
classification:
The question is "Return the name, location and district of all [shops] in descending order of [number of products]. [shops] matches table = [shop]. So, tables = [shop] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 274
SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC
Sort all the shops by number products in descending order, and return the name, location and district of each shop.
schema_links:
[shop.Number_products, shop.Name, shop.Location, shop.District]
Slicing error for the classification module
classification:


index is 275
SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
Find the names of stores whose number products is more than the average number of products.
schema_links:
[shop.Name, shop.Number_products, Average(shop.Number_products)]
classification:
The question is "Find the names of stores whose number of products is more than the average number of products." The required information can be obtained from the [shop] table. So, tables = [shop], which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 276
SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
Which shops' number products is above the average? Give me the shop names.
schema_links:
[shop.Name, shop.Number_products]
classification:
The question is "Which [shops'] number [products] is above the average? Give me the shop names.". [shops'] matches table = [shop]. [products] matches table = [shop]. So, tables = [shop] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 277
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1
find the name of employee who was awarded the most times in the evaluation.
schema_links:
[employee.Name, evaluation.Employee_ID = employee.Employee_ID, evaluation.*]
classification:
The question is "Find the name of [employee] who was awarded the most times in the [evaluation]." [employee] matches table = [employee]. [evaluation] matches table = [evaluation]. So, tables = [employee, evaluation] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 278
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1
Which employee received the most awards in evaluations? Give me the employee name.
schema_links:
[evaluation.Employee_ID = employee.Employee_ID, employee.Name]
classification:
The question is "Which [employee] received the most awards in [evaluations]? Give me the [employee] name.". [employee] matches table = [employee]. [evaluations] matches table = [evaluation]. So, tables = [employee, evaluation] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 279
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1
Find the name of the employee who got the highest one time bonus.
schema_links:
[employee.Name,evaluation.Bonus,evaluation.Employee_ID = employee.Employee_ID]
classification:
The question is "Find the name of the [employee] who got the highest one-time [bonus]." [employee] matches table = [employee]. [bonus] matches table = [evaluation]. tables = [employee, evaluation] are connected by table = [evaluation]. So, tables = [employee, evaluation] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 280
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1
Which employee received the biggest bonus? Give me the employee name.
schema_links:
[evaluation.Employee_ID, evaluation.Bonus, employee.Name]
classification:
The question is "Which [employee] received the biggest [bonus]? Give me the employee name.". [employee] matches table = [employee]. [bonus] matches table = [evaluation]. So, tables = [employee, evaluation] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 281
SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
Find the names of employees who never won any award in the evaluation.
schema_links:
[employee.Name, evaluation.Employee_ID = employee.Employee_ID]
classification:
The question is "Find the names of [employees] who never won any award in the [evaluation]." [employees] matches table = [employee]. [evaluation] matches table = [evaluation]. So, tables = [employee, evaluation] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 282
SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
What are the names of the employees who never received any evaluation?
schema_links:
[employee.Name, evaluation.Employee_ID = employee.Employee_ID]
Slicing error for the classification module
classification:


index is 283
SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1
What is the name of the shop that is hiring the largest number of employees?
schema_links:
[shop.Name,hiring.Shop_ID = shop.Shop_ID]
classification:
The question is "What is the name of the [shop] that is [hiring] the largest number of [employees]?". [shop] matches table = [shop]. [hiring] matches table = [hiring]. [employees] matches table = [employee]. So, tables = [shop, hiring, employee] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 284
SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1
Which shop has the most employees? Give me the shop name.
schema_links:
[shop.Shop_ID, shop.Name, hiring.Shop_ID]
classification:
The question is "Which [shop] has the most [employees]? Give me the [shop name]." [shop] matches table = [shop]. [employees] matches table = [hiring]. So, tables = [shop, hiring] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 285
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
Find the name of the shops that do not hire any employee.
schema_links:
[shop.Name,hiring.Employee_ID,hiring.Shop_ID = shop.Shop_ID]
classification:
The question is "Find the name of the [shops] that do not hire any [employee]. [shops] matches table = [shop]. [employee] matches table = [employee]. tables = [shop, employee] are connected by table = [hiring]. So, tables = [shop, employee, hiring] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 286
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
Which shops run with no employees? Find the shop names
schema_links:
[shop.Name, hiring.Shop_ID = shop.Shop_ID]
classification:
The question is "Which [shops] run with no [employees]? Find the [shop] names.". [shops] matches table = [shop]. [employees] matches table = [hiring]. tables = [shop, hiring] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 287
SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name
Find the number of employees hired in each shop; show the shop name as well.
schema_links:
[COUNT(hiring.Employee_ID),shop.Name,hiring.Shop_ID = shop.Shop_ID]
classification:
The question is "Find the number of employees hired in each [shop]; show the shop name as well.". [shop] matches table = [shop]. So, tables = [shop] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 288
SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name
For each shop, return the number of employees working there and the name of the shop.
schema_links:
[shop.*,COUNT(employee.Employee_ID)]
classification:
The question is "For each [shop], return the number of [employees] working there and the [name] of the shop." [shop] matches table = [shop]. [employees] matches table = [employee]. So, tables = [shop, employee] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 289
SELECT sum(bonus) FROM evaluation
What is total bonus given in all evaluations?
schema_links:
[evaluation.Bonus]
classification:
The question is "What is the total bonus given in all evaluations?" [total bonus] matches column = [evaluation.Bonus]. So, the SQL query can be classified as "EASY" since it does not involve any tables.
Label: "EASY"

index is 290
SELECT sum(bonus) FROM evaluation
Find the total amount of bonus given in all the evaluations.
schema_links:
[evaluation.Bonus]
classification:
The question is "Find the total amount of bonus given in all the evaluations." [evaluations] matches table = [evaluation]. So, tables = [evaluation] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 291
SELECT * FROM hiring
Give me all the information about hiring.
schema_links:
[hiring.*]
classification:
The question is "Give me all the information about [hiring]." [hiring] matches table = [hiring]. So, tables = [hiring] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 292
SELECT * FROM hiring
What is all the information about hiring?
schema_links:
[hiring.*]
classification:
The question is "What is all the information about [hiring]?" [hiring] matches table = [hiring]. So, tables = [hiring] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 293
SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000
Which district has both stores with less than 3000 products and stores with more than 10000 products?
schema_links:
[shop.District, shop.Number_products, 3000, 10000]
classification:
The question is "Which [district] has both stores with less than 3000 products and stores with more than 10000 products?". [district] matches table = [shop]. So, tables = [shop] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 294
SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000
Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.
schema_links:
[shop.District, shop.Number_products, 3000, 10000]
classification:
The question is "Find the [districts] in which there are both [shops] selling less than 3000 products and [shops] selling more than 10000 products.". [districts] matches table = [shop]. [shops] matches table = [shop]. So, tables = [shop] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 295
SELECT count(DISTINCT LOCATION) FROM shop
How many different store locations are there?
schema_links:
[shop.Location]
classification:
The question is "How many different [store locations] are there?". [store locations] matches table = [shop]. So, tables = [shop] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 296
SELECT count(DISTINCT LOCATION) FROM shop
Count the number of distinct store locations.
schema_links:
[shop.Location]
classification:
The question is "Count the number of distinct store locations.". [store locations] matches table = [shop]. So, tables = [shop] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 297
SELECT count(*) FROM Documents
How many documents do we have?
schema_links:
[Documents.Document_ID]
classification:
The question is "How many [documents] do we have?" [documents] matches table = [Documents]. So, tables = [Documents] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 298
SELECT count(*) FROM Documents
Count the number of documents.
schema_links:
[Documents.*]
classification:
The question is "Count the number of [documents]." [documents] matches table = [Documents]. So, tables = [Documents] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 299
SELECT document_id ,  document_name ,  document_description FROM Documents
List document IDs, document names, and document descriptions for all documents.
schema_links:
[Documents.Document_ID, Documents.Document_Name, Documents.Document_Description]
classification:
The question is "List document IDs, document names, and document descriptions for all documents." The relevant table is [Documents]. So, tables = [Documents] which number of tables = 1. Therefore, the SQL query can be classified as "EASY".
Label: "EASY"

index is 300
SELECT document_id ,  document_name ,  document_description FROM Documents
What are the ids, names, and descriptions for all documents?
schema_links:
[Documents.Document_ID, Documents.Document_Name, Documents.Document_Description]
classification:
The question is "What are the ids, names, and descriptions for all [documents]?". [documents] matches table = [Documents]. So, tables = [Documents] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 301
SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE "%w%"
What is the document name and template id for document with description with the letter 'w' in it?
schema_links:
[Documents.Document_Name,Documents.Template_ID,Documents.Document_Description,'w']
classification:
The question is "What is the document name and template id for document with [description] with the letter 'w' in it?". [description] matches table = [Documents]. So, tables = [Documents] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 302
SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE "%w%"
Return the names and template ids for documents that contain the letter w in their description.
schema_links:
[Documents.Document_Name, Documents.Template_ID, Documents.Document_Description, 'w']
classification:
The question is "Return the names and template ids for [documents] that contain the letter 'w' in their description." [documents] matches table = [Documents]. So, tables = [Documents] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 303
SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  "Robbin CV"
What is the document id, template id and description for document named "Robbin CV"?
schema_links:
[Documents.Document_ID, Documents.Template_ID, Documents.Document_Description, 'Robbin CV']
classification:
The question is "What is the [document id], [template id] and [description] for [document] named 'Robbin CV'?". [document] matches table = [Documents]. So, tables = [Documents] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 304
SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  "Robbin CV"
Return the document id, template id, and description for the document with the name Robbin CV.
schema_links:
[Documents.Document_ID, Documents.Template_ID, Documents.Document_Description, Documents.Document_Name, "Robbin CV"]
classification:
The question is "Return the document id, template id, and description for the document with the name Robbin CV.". The keyword "document" matches the table = [Documents]. So, the tables = [Documents] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 305
SELECT count(DISTINCT template_id) FROM Documents
How many different templates do all document use?
schema_links:
[Templates.Template_ID,Documents.Document_ID,Documents.Template_ID = Templates.Template_ID]
classification:
The question is "How many different [templates] do all [documents] use?" [templates] matches table = [Templates]. [documents] matches table = [Documents]. tables = [Templates, Documents] are connected by table = [Documents]. So, tables = [Templates, Documents] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 306
SELECT count(DISTINCT template_id) FROM Documents
Count the number of different templates used for documents.
schema_links:
[Templates.Template_ID, Documents.Template_ID = Templates.Template_ID]
classification:
The question is "Count the number of different [templates] used for [documents]." [templates] matches table = [Templates]. [documents] matches table = [Documents]. So, tables = [Templates, Documents] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 307
SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'
How many documents are using the template with type code 'PPT'?
schema_links:
[Documents.*, Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code, Documents.Template_ID = Templates.Template_ID, 'PPT']
classification:
The question is "How many [documents] are using the template with type code 'PPT'?" [documents] matches table = [Documents]. tables = [Documents] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 308
SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'
Count the number of documents that use the PPT template type.
schema_links:
[COUNT(Documents.Document_ID), Ref_Template_Types.Template_Type_Description, Documents.Template_ID = Templates.Template_ID, Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code, 'PPT']
classification:
The question is "Count the number of documents that use the PPT template type." [documents] matches table = [Documents]. [template type] matches table = [Ref_Template_Types]. So, tables = [Documents, Ref_Template_Types] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 309
SELECT template_id ,  count(*) FROM Documents GROUP BY template_id
Show all template ids and number of documents using each template.
schema_links:
[Templates.Template_ID,Documents.Template_ID = Templates.Template_ID]
classification:
The question is "Show all [template ids] and number of [documents] using each template.". [template ids] matches table = [Templates]. [documents] matches table = [Documents]. tables = [Templates, Documents] are connected by table = [Documents]. So, tables = [Templates, Documents] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 310
SELECT template_id ,  count(*) FROM Documents GROUP BY template_id
What are all different template ids used for documents, and how many times were each of them used?
schema_links:
[Documents.Template_ID = Templates.Template_ID]
classification:
The question is "What are all different [template ids] used for [documents], and how many times were each of them used?". [template ids] matches table = [Templates]. [documents] matches table = [Documents]. So, tables = [Templates, Documents] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 311
SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1
What is the id and type code for the template used by the most documents?
schema_links:
[Templates.Template_ID, Templates.Template_Type_Code, Documents.Template_ID]
classification:
The question is "What is the [id] and [type code] for the [template] used by the most [documents]?". [id] matches [Templates.Template_ID]. [type code] matches [Templates.Template_Type_Code]. [template] matches [Templates]. [documents] matches [Documents]. So, tables = [Templates, Documents] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 312
SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1
Return the id and type code of the template that is used for the greatest number of documents.
schema_links:
[Templates.Template_ID, Templates.Template_Type_Code, Documents.Template_ID]
classification:
The question is "Return the id and type code of the [template] that is used for the greatest number of [documents]." [template] matches table = [Templates]. [documents] matches table = [Documents]. tables = [Templates, Documents] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 313
SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1
Show ids for all templates that are used by more than one document.
schema_links:
[Templates.Template_ID,Documents.Template_ID = Templates.Template_ID]
classification:
The question is "Show ids for all [templates] that are used by more than one [document]." [templates] matches table = [Templates]. [documents] matches table = [Documents]. So, tables = [Templates, Documents] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 314
SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1
What are the template ids of any templates used in more than a single document?
schema_links:
[Templates.Template_ID,Documents.Document_ID,Documents.Template_ID = Templates.Template_ID]
classification:
The question is "What are the [template ids] of any [templates] used in more than a single [document]?". [template ids] matches table = [Templates]. [templates] matches table = [Templates]. [documents] matches table = [Documents]. tables = [Templates, Documents] are connected by table = [Documents]. So, tables = [Templates, Documents] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 315
SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
Show ids for all templates not used by any document.
schema_links:
[Templates.Template_ID, Documents.Template_ID]
classification:
The question is "Show ids for all [templates] not used by any [document]." [templates] matches table = [Templates]. [documents] matches table = [Documents]. So, tables = [Templates, Documents] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 316
SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
What are the ids for templates that are not used in any documents?
schema_links:
[Templates.Template_ID = Documents.Template_ID]
classification:
The question is "What are the ids for [templates] that are not used in any [documents]?" [templates] matches table = [Templates]. [documents] matches table = [Documents]. So, tables = [Templates, Documents] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 317
SELECT count(*) FROM Templates
How many templates do we have?
schema_links:
[Templates.Template_ID]
classification:
The question is "How many [templates] do we have?". [templates] matches table = [Templates]. So, tables = [Templates] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 318
SELECT count(*) FROM Templates
Count the number of templates.
schema_links:
[Templates.Template_ID]
classification:
The question is "Count the number of [templates]." [templates] matches table = [Templates]. So, tables = [Templates] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 319
SELECT template_id ,  version_number ,  template_type_code FROM Templates
Show template ids, version numbers, and template type codes for all templates.
schema_links:
[Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code]
classification:
The question is "Show [template ids], [version numbers], and [template type codes] for all [templates].". [templates] matches table = [Templates]. So, tables = [Templates] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 320
SELECT template_id ,  version_number ,  template_type_code FROM Templates
What are the ids, version numbers, and type codes for each template?
schema_links:
[Templates.Template_ID,Templates.Version_Number,Templates.Template_Type_Code,Ref_Template_Types.Template_Type_Code]
classification:
The question is "What are the [ids], [version numbers], and [type codes] for each [template]?". [ids], [version numbers], and [type codes] match tables = [Templates, Ref_Template_Types]. So, tables = [Templates, Ref_Template_Types] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 321
SELECT DISTINCT template_type_code FROM Templates
Show all distinct template type codes for all templates.
schema_links:
[Ref_Template_Types.Template_Type_Code,Templates.Template_ID]
classification:
The question is "Show all distinct [template type codes] for all [templates]." [template type codes] matches table = [Ref_Template_Types]. [templates] matches table = [Templates]. So, tables = [Ref_Template_Types, Templates] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 322
SELECT DISTINCT template_type_code FROM Templates
What are the different template type codes?
schema_links:
[Ref_Template_Types.Template_Type_Code]
classification:
The question is "What are the different [template type codes]?" [template type codes] matches table = [Ref_Template_Types]. So, tables = [Ref_Template_Types] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 323
SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"
What are the ids of templates with template type code PP or PPT?
schema_links:
[Templates.Template_ID, Templates.Template_Type_Code, Ref_Template_Types.Template_Type_Code, PP, PPT]
classification:
The question is "What are the ids of templates with template type code PP or PPT?". [templates] matches table = [Templates]. So, tables = [Templates] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 324
SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"
Return the ids of templates that have the code PP or PPT.
schema_links:
[Templates.Template_ID, Templates.Template_Type_Code, Ref_Template_Types.Template_Type_Code, 'PP', 'PPT']
classification:
The question is "Return the ids of [templates] that have the code PP or PPT.". [templates] matches table = [Templates]. So, tables = [Templates] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 325
SELECT count(*) FROM Templates WHERE template_type_code  =  "CV"
How many templates have template type code CV?
schema_links:
[Templates.Template_ID,Templates.Template_Type_Code,Ref_Template_Types.Template_Type_Code,'CV']
classification:
The question is "How many [templates] have [template type code CV]?" [templates] matches table = [Templates]. So, tables = [Templates] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 326
SELECT count(*) FROM Templates WHERE template_type_code  =  "CV"
Count the number of templates of the type CV.
schema_links:
[COUNT(Templates.Template_ID),Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Ref_Template_Types.Template_Type_Description,'CV']
classification:
The question is "Count the number of templates of the type [CV]." [CV] matches table = [Ref_Template_Types]. So, tables = [Ref_Template_Types] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 327
SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5
What is the version number and template type code for the template with version number later than 5?
schema_links:
[Templates.Version_Number, Templates.Template_Type_Code, Templates.Version_Number > 5]
classification:
The question is "What is the version number and template type code for the template with version number later than 5?" [template] matches table = [Templates]. So, tables = [Templates] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 328
SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5
Return the version numbers and template type codes of templates with a version number greater than 5.
schema_links:
[Templates.Version_Number, Templates.Template_Type_Code, Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code, 5]
classification:
The question is "Return the version numbers and template type codes of templates with a version number greater than 5." The relevant table is [Templates]. So, the number of tables is 1. The SQL query can be classified as "EASY".
Label: "EASY"

index is 329
SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code
Show all template type codes and number of templates for each.
schema_links:
[Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID)]
classification:
The question is "Show all [template type codes] and [number of templates] for each.". [template type codes] matches table = [Ref_Template_Types]. [number of templates] requires counting the records in the [Templates] table. So, tables = [Ref_Template_Types, Templates] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 330
SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code
What are the different template type codes, and how many templates correspond to each?
schema_links:
[Ref_Template_Types.Template_Type_Code,Templates.Template_ID,Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code]
classification:
The question is "What are the different [template type codes], and how many [templates] correspond to each?". [template type codes] matches table = [Ref_Template_Types]. [templates] matches table = [Templates]. So, tables = [Ref_Template_Types, Templates] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 331
SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
Which template type code has most number of templates?
schema_links:
[Ref_Template_Types.Template_Type_Code,Templates.Template_Type_Code]
classification:
The question is "Which [template type code] has the most number of [templates]?". [template type code] matches table = [Ref_Template_Types]. [templates] matches table = [Templates]. So, tables = [Ref_Template_Types, Templates] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 332
SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
Return the type code of the template type that the most templates belong to.
schema_links:
[Ref_Template_Types.Template_Type_Code, Templates.Template_Type_Code]
classification:
The question is "Return the type code of the template type that the most templates belong to." [template type] matches table = [Ref_Template_Types]. [templates] matches table = [Templates]. So, tables = [Ref_Template_Types, Templates] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 333
SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
Show all template type codes with less than three templates.
schema_links:
[Ref_Template_Types.Template_Type_Code,Templates.Template_Type_Code,Templates.Template_ID = Documents.Template_ID,3]
classification:
The question is "Show all [template type codes] with less than three templates.". [template type codes] matches table = [Ref_Template_Types]. [templates] matches table = [Templates]. So, tables = [Ref_Template_Types, Templates] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 334
SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
What are the codes of template types that have fewer than 3 templates?
schema_links:
[Ref_Template_Types.Template_Type_Code,Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Templates.Template_ID,3]
classification:
The question is "What are the codes of [template types] that have fewer than 3 [templates]?". [template types] matches table = [Ref_Template_Types]. [templates] matches table = [Templates]. So, tables = [Ref_Template_Types, Templates] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 335
SELECT min(Version_Number) ,  template_type_code FROM Templates
What the smallest version number and its template type code?
schema_links:
[Templates.Version_Number, Templates.Template_Type_Code, Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code]
classification:
The question is "What [the smallest version number] and [its template type code]?". [the smallest version number] matches column = [Templates.Version_Number]. [its template type code] matches column = [Templates.Template_Type_Code]. So, tables = [Templates] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 336
SELECT min(Version_Number) ,  template_type_code FROM Templates
Return the lowest version number, along with its corresponding template type code.
schema_links:
[Templates.Version_Number, Templates.Template_Type_Code, Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code]
classification:
The question is "Return the lowest version number, along with its corresponding template type code." The columns mentioned in the question are [Templates.Version_Number, Templates.Template_Type_Code]. These columns match the table [Templates]. So, the query involves only one table, [Templates], and can be classified as "EASY".
Label: "EASY"

index is 337
SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  "Data base"
What is the template type code of the template used by document with the name "Data base"?
schema_links:
[Templates.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Documents.Document_Name,'Data base']
classification:
The question is "What is the [template type code] of the [template] used by [document] with the name 'Data base'?". [template type code] matches table = [Templates]. [template] matches table = [Templates]. [document] matches table = [Documents]. So, tables = [Templates, Documents] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 338
SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  "Data base"
Return the template type code of the template that is used by a document named Data base.
schema_links:
[Templates.Template_Type_Code,Documents.Document_Name,Documents.Template_ID = Templates.Template_ID,'Data base']
classification:
The question is "Return the [template type code] of the template that is used by a [document] named 'Data base'.". [template type code] matches table = [Templates]. [document] matches table = [Documents]. tables = [Templates, Documents] are connected by table = [Documents.Template_ID = Templates.Template_ID]. So, tables = [Templates, Documents] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 339
SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"
Show all document names using templates with template type code BK.
schema_links:
[Documents.Document_Name, Documents.Template_ID = Templates.Template_ID, Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code, 'BK']
classification:
The question is "Show all document names using templates with template type code BK.". [document names] matches table = [Documents]. [templates] matches table = [Templates]. [template type code] matches table = [Ref_Template_Types]. So, tables = [Documents, Templates, Ref_Template_Types] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 340
SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"
What are the names of documents that use templates with the code BK?
schema_links:
[Documents.Document_Name,Documents.Template_ID = Templates.Template_ID,'BK']
classification:
The question is "What are the names of [documents] that use templates with the code BK?". [documents] matches table = [Documents]. [templates] matches table = [Templates]. So, tables = [Documents, Templates] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 341
SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code
Show all template type codes and the number of documents using each type.
schema_links:
[Ref_Template_Types.Template_Type_Code,COUNT(Documents.Document_ID)]
classification:
The question is "Show all [template type codes] and the number of [documents] using each type.". [template type codes] matches table = [Ref_Template_Types]. [documents] matches table = [Documents]. So, tables = [Ref_Template_Types, Documents] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 342
SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code
What are the different template type codes, and how many documents use each type?
schema_links:
[Ref_Template_Types.Template_Type_Code,COUNT(Documents.Document_ID),Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID]
classification:
The question is "What are the different [template type codes], and how many documents use each type?". [template type codes] matches table = [Ref_Template_Types]. [documents] matches table = [Documents]. tables = [Ref_Template_Types, Documents] are connected by table = [Templates]. So, tables = [Ref_Template_Types, Documents, Templates] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 343
SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1
Which template type code is used by most number of documents?
schema_links:
[Ref_Template_Types.Template_Type_Code, Documents.*]
classification:
The question is "Which [template type code] is used by most number of [documents]?". [template type code] matches table = [Ref_Template_Types]. [documents] matches table = [Documents]. So, tables = [Ref_Template_Types, Documents] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 344
SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1
Return the code of the template type that is most commonly used in documents.
schema_links:
[Ref_Template_Types.Template_Type_Code, Documents.*, Templates.Template_ID, Documents.Template_ID = Templates.Template_ID, Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code]
classification:
The question is "Return the code of the [template type] that is most commonly used in [documents].". [template type] matches table = [Ref_Template_Types]. [documents] matches table = [Documents]. [documents] and [template type] are connected through [Templates] table using the columns [Documents.Template_ID = Templates.Template_ID] and [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code]. So, tables = [Ref_Template_Types, Documents, Templates] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 345
SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
Show all template type codes that are not used by any document.
schema_links:
[Ref_Template_Types.Template_Type_Code, Templates.Template_Type_Code, Documents.Template_ID]
classification:
The question is "Show all template type codes that are not used by any document." [template type codes] matches table = [Ref_Template_Types]. [documents] matches table = [Documents]. [templates] matches table = [Templates]. tables = [Ref_Template_Types, Documents, Templates] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 346
SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
What are the codes of template types that are not used for any document?
schema_links:
[Ref_Template_Types.Template_Type_Code, Documents.Template_ID = Templates.Template_ID]
classification:
The question is "What are the codes of [template types] that are not used for any [document]?" [template types] matches table = [Ref_Template_Types]. [document] matches tables = [Documents, Templates]. So, tables = [Ref_Template_Types, Documents, Templates] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 347
SELECT template_type_code ,  template_type_description FROM Ref_template_types
Show all template type codes and descriptions.
schema_links:
[Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description]
classification:
The question is "Show all [template type codes] and [descriptions]." [template type codes] matches table = [Ref_Template_Types]. So, tables = [Ref_Template_Types] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 348
SELECT template_type_code ,  template_type_description FROM Ref_template_types
What are the type codes and descriptions for all template types?
schema_links:
[Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description]
classification:
The question is "What are the [type codes] and [descriptions] for all [template types]?". [type codes] and [descriptions] match columns in table = [Ref_Template_Types]. So, tables = [Ref_Template_Types] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 349
SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"
What is the template type descriptions for template type code "AD".
schema_links:
[Ref_Template_Types.Template_Type_Description,Ref_Template_Types.Template_Type_Code,'AD']
classification:
The question is "What is the [template type descriptions] for [template type code] "AD"." [template type descriptions] matches table = [Ref_Template_Types]. So, tables = [Ref_Template_Types] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 350
SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"
Return the template type description of the template type with the code AD.
schema_links:
[Ref_Template_Types.Template_Type_Description,Ref_Template_Types.Template_Type_Code,Templates.Template_Type_Code,'AD']
classification:
The question is "Return the [template type description] of the template type with the code AD.". [template type description] matches table = [Ref_Template_Types]. So, tables = [Ref_Template_Types] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 351
SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book"
What is the template type code for template type description "Book".
schema_links:
[Ref_Template_Types.Template_Type_Code,Ref_Template_Types.Template_Type_Description,"Book"]
classification:
The question is "What is the template type code for template type description "Book".". [template type description] matches table = [Ref_Template_Types]. So, tables = [Ref_Template_Types] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 352
SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book"
Return the type code of the template type with the description "Book".
schema_links:
[Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, 'Book']
classification:
The question is "Return the type code of the template type with the description 'Book'.". The table that contains the template type information is [Ref_Template_Types]. So, the number of tables involved in the SQL query is 1. Therefore, the SQL query can be classified as "EASY".

Label: "EASY"

index is 353
SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID
What are the distinct template type descriptions for the templates ever used by any document?
schema_links:
[Ref_Template_Types.Template_Type_Description,Templates.Template_ID,Documents.Template_ID,Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code]
classification:
The question is "What are the distinct [template type descriptions] for the [templates] ever used by any [document]?". [template type descriptions] matches table = [Ref_Template_Types]. [templates] matches table = [Templates]. [document] matches table = [Documents]. [templates] and [document] are connected by table = [Templates]. So, tables = [Ref_Template_Types, Templates, Documents] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 354
SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID
Return the different descriptions for templates that have been used in a document.
schema_links:
[Ref_Template_Types.Template_Type_Description,Templates.Template_ID,Documents.Template_ID,Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Document_ID]
classification:
The question is "Return the different descriptions for [templates] that have been used in a [document].". [templates] matches table = [Templates]. [document] matches table = [Documents]. The tables [Templates] and [Documents] are connected by the foreign key [Templates.Template_ID = Documents.Template_ID]. So, tables = [Templates, Documents] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 355
SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  "Presentation"
What are the template ids with template type description "Presentation".
schema_links:
[Templates.Template_ID,Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Ref_Template_Types.Template_Type_Description,'Presentation']
classification:
The question is "What are the template ids with template type description "Presentation".". The relevant tables are [Templates] and [Ref_Template_Types]. The tables are connected by the column [Templates.Template_Type_Code] and [Ref_Template_Types.Template_Type_Code]. So, the number of tables involved is 2. Therefore, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 356
SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  "Presentation"
Return the ids corresponding to templates with the description 'Presentation'.
schema_links:
[Templates.Template_ID,Templates.Template_Type_Description,Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,'Presentation']
classification:
The question is "Return the [ids] corresponding to templates with the [description] 'Presentation'.". [ids] matches table = [Templates]. [description] matches column = [Templates.Template_Type_Description]. So, tables = [Templates] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 357
SELECT count(*) FROM Paragraphs
How many paragraphs in total?
schema_links:
[Paragraphs.*]
classification:
The question is "How many [paragraphs] in total?". [paragraphs] matches table = [Paragraphs]. So, tables = [Paragraphs] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 358
SELECT count(*) FROM Paragraphs
Count the number of paragraphs.
schema_links:
[Paragraphs.*]
Slicing error for the classification module
classification:
The given question "Count the number of paragraphs" does not mention any specific tables or conditions. Therefore, it cannot be classified as either "EASY" or "COMPLEX" based on the number of tables.

index is 359
SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'
How many paragraphs for the document with name 'Summer Show'?
schema_links:
[Paragraphs.*,Documents.Document_ID = Paragraphs.Document_ID,'Summer Show']
classification:
The question is "How many [paragraphs] for the [document] with name 'Summer Show'?" [paragraphs] matches table = [Paragraphs]. [document] matches table = [Documents]. So, tables = [Paragraphs, Documents] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 360
SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'
Count the number of paragraphs in the document named 'Summer Show'.
schema_links:
[COUNT(Paragraphs.Paragraph_ID),Documents.Document_Name,'Summer Show']
classification:
The question is "Count the number of [paragraphs] in the [document] named 'Summer Show'.". [paragraphs] matches table = [Paragraphs]. [document] matches table = [Documents]. So, tables = [Paragraphs, Documents] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 361
select other_details from paragraphs where paragraph_text like 'korea'
Show paragraph details for paragraph with text 'Korea ' .
schema_links:
[Paragraphs.*,Paragraphs.Paragraph_Text,'Korea']
classification:
The question is "Show [paragraph details] for paragraph with text 'Korea'.". [paragraph details] matches table = [Paragraphs]. So, tables = [Paragraphs] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 362
select other_details from paragraphs where paragraph_text like 'korea'
What are the details for the paragraph that includes the text 'Korea ' ?
schema_links:
[Paragraphs.*,Paragraphs.Paragraph_Text,'Korea']
classification:
The question is "What are the details for the [paragraph] that includes the text 'Korea' ?". [paragraph] matches table = [Paragraphs]. So, tables = [Paragraphs] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 363
SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'
Show all paragraph ids and texts for the document with name 'Welcome to NY'.
schema_links:
[Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text, Documents.Document_Name, Documents.Template_ID = Templates.Template_ID, 'Welcome to NY']
classification:
The question is "Show all paragraph ids and texts for the document with name 'Welcome to NY'." [paragraphs] matches table = [Paragraphs]. [documents] matches table = [Documents]. tables = [Paragraphs, Documents] are connected by table = [Templates]. So, tables = [Paragraphs, Documents, Templates] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 364
SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'
What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?
schema_links:
[Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text, Documents.Document_Name, Documents.Document_ID = Paragraphs.Document_ID, 'Welcome to NY']
classification:
The question is "What are the [ids] and [texts] of [paragraphs] in the [document] titled 'Welcome to NY'?" [ids] matches the column = [Paragraphs.Paragraph_ID]. [texts] matches the column = [Paragraphs.Paragraph_Text]. [paragraphs] matches the table = [Paragraphs]. [document] matches the table = [Documents]. [Paragraphs.Document_ID] is linked to [Documents.Document_ID]. So, tables = [Paragraphs, Documents] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 365
SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Customer reviews"
Show all paragraph texts for the document "Customer reviews".
schema_links:
[Paragraphs.Paragraph_Text,Documents.Document_Name,Documents.Document_ID = Paragraphs.Document_ID,'Customer reviews']
classification:
The question is "Show all paragraph texts for the document 'Customer reviews'." The [paragraph texts] match the table = [Paragraphs]. So, the tables = [Paragraphs] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 366
SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Customer reviews"
What are the paragraph texts for the document with the name 'Customer reviews'?
schema_links:
[Paragraphs.Paragraph_Text,Documents.Document_Name,Documents.Document_ID = Paragraphs.Document_ID,'Customer reviews']
classification:
The question is "What are the [paragraph texts] for the [document] with the name 'Customer reviews'?". [paragraph texts] matches table = [Paragraphs]. [document] matches table = [Documents]. tables = [Paragraphs, Documents] are connected by [Documents.Document_ID = Paragraphs.Document_ID]. So, tables = [Paragraphs, Documents] which number of tables = 2. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 367
SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
Show all document ids and the number of paragraphs in each document. Order by document id.
schema_links:
[Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID)]
classification:
The question is "Show all document ids and the number of paragraphs in each document. Order by document id.". [document ids] matches table = [Documents]. [number of paragraphs] can be obtained by counting the rows in [Paragraphs] table for each document. So, tables = [Documents, Paragraphs] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 368
SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.
schema_links:
[Documents.Document_ID,COUNT(Paragraphs.Paragraph_ID),Paragraphs.Document_ID = Documents.Document_ID,ORDER BY Documents.Document_ID]
classification:
The question is "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id." [document ids] matches table = [Documents]. [number of paragraphs corresponding] involves a COUNT operation on [Paragraphs]. tables = [Documents, Paragraphs] are connected by [Paragraphs.Document_ID = Documents.Document_ID]. So, tables = [Documents, Paragraphs] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 369
SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id
Show all document ids, names and the number of paragraphs in each document.
schema_links:
[Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID), Paragraphs.Document_ID = Documents.Document_ID]
classification:
The question is "Show all document ids, names, and the number of paragraphs in each document." The relevant tables are [Documents] and [Paragraphs]. These tables are connected through the relationship [Paragraphs.Document_ID = Documents.Document_ID]. So, tables = [Documents, Paragraphs] which number of tables >= 1. Therefore, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 370
SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id
What are the ids and names of each document, as well as the number of paragraphs in each?
schema_links:
[Documents.Document_ID, Documents.Document_Name, Paragraphs.Paragraph_ID, Documents.Document_ID = Paragraphs.Document_ID, COUNT(Paragraphs.Paragraph_ID)]
classification:
The question is "What are the [ids] and [names] of each [document], as well as the [number of paragraphs] in each?". [ids] matches column = [Documents.Document_ID]. [names] matches column = [Documents.Document_Name]. [document] matches table = [Documents]. [number of paragraphs] can be obtained by counting the [Paragraphs.Paragraph_ID] where [Documents.Document_ID] matches [Paragraphs.Document_ID]. So, tables = [Documents, Paragraphs] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 371
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
List all document ids with at least two paragraphs.
schema_links:
[Documents.Document_ID,Paragraphs.Document_ID,2]
classification:
The question is "List all [document ids] with at least [two paragraphs]." [document ids] matches table = [Documents]. [two paragraphs] matches table = [Paragraphs]. So, tables = [Documents, Paragraphs] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 372
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
What are the ids of documents that have 2 or more paragraphs?
schema_links:
[Documents.Document_ID, Paragraphs.Document_ID = Documents.Document_ID, Paragraphs.*]
classification:
The question is "What are the ids of [documents] that have 2 or more [paragraphs]?". [documents] matches table = [Documents]. [paragraphs] matches table = [Paragraphs]. So, tables = [Documents, Paragraphs] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 373
SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1
What is the document id and name with greatest number of paragraphs?
schema_links:
[Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID), Paragraphs.Document_ID = Documents.Document_ID]
classification:
The given question is incomplete. It should be "What is the document id and name with the greatest number of paragraphs?" Here is the analysis:

The question is "What is the [document id] and [name] with [greatest number of paragraphs]?" [document id] matches table = [Documents]. [name] matches table = [Documents]. [greatest number of paragraphs] involves counting the paragraphs, which matches table = [Paragraphs]. So, tables = [Documents, Paragraphs] which number of tables >= 1. Therefore, the SQL query can be classified as "COMPLEX".

Label: "COMPLEX"

index is 374
SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1
Return the id and name of the document with the most paragraphs.
schema_links:
[Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID)]
classification:
The question is "Return the id and name of the document with the most paragraphs." The relevant tables are [Documents] and [Paragraphs]. So, tables = [Documents, Paragraphs] which number of tables >= 1. Therefore, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 375
SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
What is the document id with least number of paragraphs?
schema_links:
[Documents.Document_ID,COUNT(Paragraphs.Paragraph_ID),Paragraphs.Document_ID = Documents.Document_ID]
classification:
The question is "What is the [document id] with least number of [paragraphs]?". [document id] matches table = [Documents]. [paragraphs] matches table = [Paragraphs]. So, tables = [Documents, Paragraphs] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 376
SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
Return the id of the document with the fewest paragraphs.
schema_links:
[Documents.Document_ID, Paragraphs.Document_ID]
classification:
The question is "Return the id of the document with the fewest paragraphs." [document, paragraphs] matches tables = [Documents, Paragraphs]. So, tables = [Documents, Paragraphs] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 377
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2
What is the document id with 1 to 2 paragraphs?
schema_links:
[Documents.Document_ID, Paragraphs.Document_ID]
Slicing error for the classification module
classification:
The given question does not have a complete query or explicit mention of tables and columns. Without the necessary information, it is not possible to determine the complexity level of the query based on the number of tables.

index is 378
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2
Give the ids of documents that have between one and two paragraphs.
schema_links:
[Documents.Document_ID,Paragraphs.Document_ID]
classification:
The question is "Give the ids of [documents] that have between one and two [paragraphs]." [documents] matches table = [Documents]. [paragraphs] matches table = [Paragraphs]. So, tables = [Documents, Paragraphs] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 379
SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'
Show the document id with paragraph text 'Brazil' and 'Ireland'.
schema_links:
[Documents.Document_ID, Paragraphs.Paragraph_Text, 'Brazil', 'Ireland']
Slicing error for the classification module
classification:
The given question is: "Show the document id with paragraph text 'Brazil' and 'Ireland'."

This question is not directly related to the tables provided in the initial schema. The tables mentioned in the schema do not include tables related to documents or paragraphs.

As a result, it is not possible to determine the complexity of the SQL query based on the number of tables. The classification would depend on the schema and the tables involved in the query, which are not provided in this case.

Therefore, it is not possible to classify the complexity of the SQL query for this specific question.

index is 380
SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'
What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?
schema_links:
[Documents.Document_ID,Paragraphs.Paragraph_Text,'Brazil','Ireland']
classification:
The question is "What are the ids of [documents] that contain the [paragraph text] 'Brazil' and 'Ireland'?". [documents] matches table = [Documents]. So, tables = [Documents] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 381
SELECT count(*) FROM teacher
How many teachers are there?
schema_links:
[teacher.Teacher_ID]
classification:
The question is "How many [teachers] are there?". [teachers] matches table = [teacher]. So, tables = [teacher] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 382
SELECT count(*) FROM teacher
What is the total count of teachers?
schema_links:
[teacher.Teacher_ID]
classification:
The question is "What is the total count of [teachers]?" [teachers] matches table = [teacher]. So, tables = [teacher] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 383
SELECT Name FROM teacher ORDER BY Age ASC
List the names of teachers in ascending order of age.
schema_links:
[teacher.Name, teacher.Age]
classification:
The question is "List the names of [teachers] in ascending order of [age]. [teachers] matches table = [teacher]. So, tables = [teacher] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 384
SELECT Name FROM teacher ORDER BY Age ASC
What are the names of the teachers ordered by ascending age?
schema_links:
[teacher.Name,teacher.Age]
classification:
The question is "What are the names of the [teachers] ordered by ascending [age]?". [teachers] matches table = [teacher]. So, tables = [teacher] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 385
SELECT Age ,  Hometown FROM teacher
What are the age and hometown of teachers?
schema_links:
[teacher.Age, teacher.Hometown]
classification:
The question is "What are the age and hometown of [teachers]?". [teachers] matches table = [teacher]. So, tables = [teacher] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 386
SELECT Age ,  Hometown FROM teacher
What is the age and hometown of every teacher?
schema_links:
[teacher.Age, teacher.Hometown]
classification:
The question is "What is the [age] and [hometown] of every [teacher]?". [age] matches table = [teacher]. [hometown] matches table = [teacher]. [teacher] matches table = [teacher]. So, tables = [teacher] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 387
select name from teacher where hometown != "little lever urban district"
List the name of teachers whose hometown is not `` Little Lever Urban District '' .
schema_links:
[teacher.Name, teacher.Hometown, 'Little Lever Urban District']
classification:
The question is "List the name of teachers whose hometown is not 'Little Lever Urban District'.". [teachers] matches table = [teacher]. So, tables = [teacher] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 388
select name from teacher where hometown != "little lever urban district"
What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?
schema_links:
[teacher.Name, teacher.Hometown, 'Little Lever Urban District']
classification:
The question is "What are the names of the [teachers] whose [hometown] is not 'Little Lever Urban District'?" [teachers] matches table = [teacher]. So, tables = [teacher] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 389
SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33
Show the name of teachers aged either 32 or 33?
schema_links:
[teacher.Name, teacher.Age, 32, 33]
Slicing error for the classification module
classification:


index is 390
SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33
What are the names of the teachers who are aged either 32 or 33?
schema_links:
[teacher.Name, teacher.Age, 32, 33]
classification:
The question is "What are the names of the [teachers] who are aged either 32 or 33?". [teachers] matches table = [teacher]. So, tables = [teacher] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 391
SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
What is the hometown of the youngest teacher?
schema_links:
[teacher.Hometown,teacher.Age]
classification:
The question is "What is the hometown of the youngest [teacher]?". [teacher] matches table = [teacher]. So, tables = [teacher] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 392
SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
Where is the youngest teacher from?
schema_links:
[teacher.Name, teacher.Age, teacher.Hometown]
classification:
The question is "Where is the youngest [teacher] from?". [teacher] matches table = [teacher]. So, tables = [teacher] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 393
SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown
Show different hometown of teachers and the number of teachers from each hometown.
schema_links:
[teacher.Hometown,teacher.Teacher_ID]
classification:
The question is "Show different hometowns of [teachers] and the number of [teachers] from each hometown.". [teachers] matches table = [teacher]. So, tables = [teacher] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 394
SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown
For each hometown, how many teachers are there?
schema_links:
[teacher.Hometown,COUNT(teacher.Teacher_ID)]
classification:
The question is "For each [hometown], how many [teachers] are there?". [hometown] matches column = [teacher.Hometown]. [teachers] matches table = [teacher]. So, tables = [teacher] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 395
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
List the most common hometown of teachers.
schema_links:
[teacher.Hometown, teacher.*]
classification:
The question is "List the most common hometown of [teachers]. [teachers] matches table = [teacher]. So, tables = [teacher] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 396
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
What is the most commmon hometowns for teachers?
schema_links:
[teacher.Hometown]
classification:
The question is "What is the most common [hometowns] for [teachers]?" [hometowns] matches column = [teacher.Hometown]. [teachers] matches table = [teacher]. So, tables = [teacher] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 397
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2
Show the hometowns shared by at least two teachers.
schema_links:
[teacher.Hometown]
classification:
The question is "Show the hometowns shared by at least two [teachers]." [teachers] matches table = [teacher]. So, tables = [teacher] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 398
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2
What are the towns from which at least two teachers come from?
schema_links:
[teacher.Hometown,teacher.Teacher_ID,2]
Slicing error for the classification module
classification:
The given question is incomplete. Could you please provide the complete question?

index is 399
SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID
Show names of teachers and the courses they are arranged to teach.
schema_links:
[teacher.Name, course.Course, course_arrange.Teacher_ID = teacher.Teacher_ID, course_arrange.Course_ID = course.Course_ID]
classification:
The question is "Show names of [teachers] and the [courses] they are arranged to teach.". [teachers] matches table = [teacher]. [courses] matches table = [course]. So, tables = [teacher, course] which number of tables = 2. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 400
SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID
What is the name of each teacher and what course they teach?
schema_links:
[teacher.Name, course.Course, course.Course_ID = course_arrange.Course_ID, teacher.Teacher_ID = course_arrange.Teacher_ID]
classification:
The question is "What is the name of each [teacher] and what [course] they teach?". [teacher] matches table = [teacher]. [course] matches table = [course]. So, tables = [teacher, course] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 401
SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name
Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.
schema_links:
[teacher.Name, course.Course, course_arrange.Teacher_ID = teacher.Teacher_ID, course_arrange.Course_ID = course.Course_ID]
classification:
The question is "Show names of [teachers] and the [courses] they are arranged to teach in ascending alphabetical order of the teacher's name.". [teachers] matches table = [teacher]. [courses] matches table = [course]. So, tables = [teacher, course] are connected by table = [course_arrange]. So, tables = [teacher, course, course_arrange] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 402
SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name
What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?
schema_links:
[teacher.Name, course.Course, course_arrange.Teacher_ID = teacher.Teacher_ID, course_arrange.Course_ID = course.Course_ID]
classification:
The question is "What are the names of the [teachers] and the [courses] they teach in ascending alphabetical order by the name of the teacher?" [teachers] matches table = [teacher]. [courses] matches table = [course]. tables = [teacher, course] are connected by table = [course_arrange]. So, tables = [teacher, course, course_arrange] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 403
SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "Math"
Show the name of the teacher for the math course.
schema_links:
[teacher.Name, course.Course_ID = course_arrange.Course_ID, course_arrange.Teacher_ID = teacher.Teacher_ID, math]
classification:
The question is "Show the name of the [teacher] for the [math] course.". [teacher] matches table = [teacher]. [math] matches table = [course]. So, tables = [teacher, course] are connected by table = [course_arrange]. So, tables = [teacher, course, course_arrange] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 404
SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "Math"
What are the names of the people who teach math courses?
schema_links:
[teacher.Name, course_arrange.Teacher_ID = teacher.Teacher_ID, course_arrange.Course_ID = course.Course_ID, course.Course, 'math']
classification:
The question is "What are the names of the people who teach [math courses]?". [math courses] matches tables = [teacher, course_arrange, course]. tables = [teacher, course_arrange, course] are connected by foreign_key = [course_arrange.Teacher_ID = teacher.Teacher_ID, course_arrange.Course_ID = course.Course_ID]. So, tables = [teacher, course_arrange, course] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 405
SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name
Show names of teachers and the number of courses they teach.
schema_links:
[teacher.Name, course_arrange.Teacher_ID = teacher.Teacher_ID]
classification:
The question is "Show names of [teachers] and the number of [courses] they teach.". [teachers] matches table = [teacher]. [courses] matches table = [course_arrange]. So, tables = [teacher, course_arrange] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 406
SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name
What are the names of the teachers and how many courses do they teach?
schema_links:
[teacher.Name,course_arrange.Teacher_ID = teacher.Teacher_ID,COUNT(course_arrange.Course_ID)]
classification:
The question is "What are the names of the [teachers] and how many courses do they teach?". [teachers] matches table = [teacher]. So, tables = [teacher] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 407
SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2
Show names of teachers that teach at least two courses.
schema_links:
[teacher.Name, course_arrange.Course_ID, course_arrange.Teacher_ID, 2]
classification:
The question is "Show names of [teachers] that teach at least [two courses]." [teachers] matches table = [teacher]. [courses] matches table = [course_arrange]. tables = [teacher, course_arrange] are connected by table = [course]. So, tables = [teacher, course_arrange] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 408
SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2
What are the names of the teachers who teach at least two courses?
schema_links:
[teacher.Name, course_arrange.Teacher_ID]
classification:
The question is "What are the names of the [teachers] who teach at least two [courses]?". [teachers] matches table = [teacher]. [courses] matches table = [course_arrange]. So, tables = [teacher, course_arrange] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 409
SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
List the names of teachers who have not been arranged to teach courses.
schema_links:
[teacher.Name,course_arrange.Teacher_ID = teacher.Teacher_ID]
classification:
The question is "List the names of [teachers] who have not been arranged to teach courses.". [teachers] matches table = [teacher]. So, tables = [teacher] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 410
SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
What are the names of the teachers whose courses have not been arranged?
schema_links:
[teacher.Name,teacher.Teacher_ID = course_arrange.Teacher_ID]
classification:
The question is "What are the names of the [teachers] whose [courses] have not been arranged?". [teachers] matches table = [teacher]. [courses] matches table = [course_arrange]. So, tables = [teacher, course_arrange] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 411
SELECT count(*) FROM visitor WHERE age  <  30
How many visitors below age 30 are there?
schema_links:
[visitor.*,visitor.Age,30]
classification:
The question is "How many [visitors] below age 30 are there?". [visitors] matches table = [visitor]. So, tables = [visitor] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 412
SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC
Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.
schema_links:
[visitor.Name, visitor.Level_of_membership, 4]
classification:
The question is "Find the names of the [visitors] whose [membership level] is higher than 4, and order the results by the level from high to low." [visitors] matches table = [visitor]. So, tables = [visitor] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 413
SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4
What is the average age of the visitors whose membership level is not higher than 4?
schema_links:
[visitor.Age,visitor.Level_of_membership,4]
classification:
The question is "What is the average age of the visitors whose membership level is not higher than 4?". [visitors] matches table = [visitor]. So, tables = [visitor] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 414
SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC
Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.
schema_links:
[visitor.Name, visitor.Level_of_membership, visitor.Level_of_membership > 4, visitor.Age]
classification:
The question is "Find the name and membership level of the [visitors] whose membership level is higher than 4, and sort by their [age] from old to young." [visitors] matches table = [visitor]. So, tables = [visitor] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 415
SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1
Find the id and name of the museum that has the most staff members?
schema_links:
[museum.Museum_ID, museum.Name, museum.Num_of_Staff]
classification:
The question is "Find the id and name of the [museum] that has the most [staff members]?". [museum] matches table = [museum]. So, tables = [museum] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 416
SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009
Find the average number of staff working for the museums that were open before 2009.
schema_links:
[museum.Num_of_Staff,museum.*,museum.Open_Year,2009]
classification:
The question is "Find the average number of staff working for the [museums] that were open before 2009.". [museums] matches table = [museum]. So, tables = [museum] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 417
SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'
What are the opening year and staff number of the museum named Plaza Museum?
schema_links:
[museum.Open_Year,museum.Num_of_Staff,museum.Name,'Plaza Museum']
classification:
The question is "What are the opening year and staff number of the museum named Plaza Museum?". [museum] matches table = [museum]. So, tables = [museum] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 418
SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)
find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.
schema_links:
[museum.Name, museum.Num_of_Staff, museum.Open_Year, 2010]
classification:
The question is "Find the names of [museums] which have more [staff] than the minimum staff number of all [museums] opened after 2010.". [museums] matches table = [museum]. So, tables = [museum] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 419
SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1
find the id, name and age for visitors who visited some museums more than once.
schema_links:
[visitor.ID, visitor.Name, visitor.Age, visit.visitor_ID = visitor.ID, more than once]
classification:
The question is "Find the id, name, and age for [visitors] who visited some [museums] more than once." [visitors] matches table = [visitor]. [museums] matches table = [museum]. So, tables = [visitor, museum] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 420
SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1
What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?
schema_links:
[visitor.ID, visitor.Name, visitor.Level_of_membership, visit.Total_spent, visit.visitor_ID = visitor.ID, visit.Museum_ID = museum.Museum_ID]
classification:
The question is "What are the [id], [name], and [membership level] of [visitors] who have spent the largest amount of money in total in all museum tickets?". [visitors] matches table = [visitor]. So, tables = [visitor] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 421
SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1
What are the id and name of the museum visited most times?
schema_links:
[museum.Museum_ID, museum.Name, visit.Museum_ID]
classification:
The question is "What are the [id] and [name] of the [museum] visited most times?" [museum] matches table = [museum]. [id], [name] match columns = [Museum_ID], [Name] in table = [museum]. [visited], [most times] are not explicitly mentioned in the schema. So, tables = [museum] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 422
SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)
What is the name of the museum that had no visitor yet?
schema_links:
[museum.Name,visit.Museum_ID = museum.Museum_ID]
classification:
The question is "What is the name of the [museum] that had no [visitor] yet?". [museum] matches table = [museum]. [visitor] matches table = [visit]. tables = [museum, visit] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 423
SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1
Find the name and age of the visitor who bought the most tickets at once.
schema_links:
[visitor.Name, visitor.Age, visit.Num_of_Ticket, visit.visitor_ID = visitor.ID]
classification:
The question is "Find the name and age of the [visitor] who bought the most tickets at once." [visitor] matches table = [visitor]. So, tables = [visitor] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 424
SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit
What are the average and maximum number of tickets bought in all visits?
schema_links:
[visit.Num_of_Ticket]
classification:
The question is "What are the [average] and [maximum] number of tickets bought in [all visits]?". [average] and [maximum] can be calculated using an aggregate function like AVG() and MAX(). [all visits] matches table = [visit]. So, tables = [visit] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 425
SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1
What is the total ticket expense of the visitors whose membership level is 1?
schema_links:
[SUM(visit.Total_spent), visit.Total_spent, visitor.Level_of_membership, visitor.ID, visit.visitor_ID = visitor.ID, visitor.Level_of_membership = 1]
classification:
The question is "What is the total ticket expense of the visitors whose membership level is 1?". [visitors] matches table = [visitor]. So, tables = [visitor] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 426
SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011
What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?
schema_links:
[visitor.Name, museum.Open_Year, visit.Museum_ID = museum.Museum_ID, visit.visitor_ID = visitor.ID, 2009, 2011]
classification:
The question is "What is the name of the [visitor] who visited both a museum opened before 2009 and a museum opened after 2011?". [visitor] matches table = [visitor]. tables = [visitor] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 427
SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)
Find the number of visitors who did not visit any museum opened after 2010.
schema_links:
[visitor.*, visit.visitor_ID, museum.Museum_ID = visit.Museum_ID, museum.Open_Year, 2010]
classification:
The question is "Find the number of [visitors] who did not visit any museum opened after 2010.". [visitors] matches table = [visitor]. [museum] matches table = [museum]. [visit] matches table = [visit]. tables = [visitor, museum, visit] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 428
SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008
How many museums were opened after 2013 or before 2008?
schema_links:
[museum.Museum_ID, museum.Open_Year, museum.Open_Year, 2013, 2008]
classification:
The question is "How many [museums] were opened [after 2013] or [before 2008]?". [museums] matches table = [museum]. So, tables = [museum] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 429
SELECT count(*) FROM players
Find the total number of players.
schema_links:
[players.player_id]
classification:
The question is "Find the total number of [players]." [players] matches table = [players]. So, tables = [players] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 430
SELECT count(*) FROM players
How many players are there?
schema_links:
[players.*]
classification:
The question is "How many [players] are there?" [players] matches table = [players]. So, tables = [players] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 431
SELECT count(*) FROM matches
Find the total number of matches.
schema_links:
[matches.*]
classification:
The question is "Find the total number of [matches]." [matches] matches table = [matches]. So, tables = [matches] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 432
SELECT count(*) FROM matches
Count the number of matches.
schema_links:
[matches.*]
classification:
The question is "Count the number of [matches]." [matches] matches table = [matches]. So, tables = [matches] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 433
SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
List the first name and birth date of all players from the country with code USA.
schema_links:
[players.first_name, players.birth_date, players.country_code, 'USA']
classification:
The question is "List the first name and birth date of all players from the country with code USA.". [players] matches table = [players]. So, tables = [players] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 434
SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
What are the first names and birth dates of players from the USA?
schema_links:
[players.first_name, players.birth_date, players.country_code, 'USA']
classification:
The question is "What are the first names and birth dates of [players] from the USA?". [players] matches table = [players]. So, tables = [players] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 435
SELECT avg(loser_age) ,  avg(winner_age) FROM matches
Find the average age of losers and winners of all matches.
schema_links:
[matches.loser_age, matches.winner_age, matches.winner_id = players.player_id, matches.loser_id = players.player_id, matches.*]
classification:
The question is "Find the average age of [losers] and [winners] of all [matches]. [losers] matches table = [matches]. [winners] matches table = [matches]. [matches] matches table = [matches]. So, tables = [matches] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 436
SELECT avg(loser_age) ,  avg(winner_age) FROM matches
What are the average ages of losers and winners across matches?
schema_links:
[players.birth_date, matches.loser_age, matches.winner_age, matches.winner_id = players.player_id, matches.loser_id = players.player_id]
classification:
The question is "What are the average ages of [losers] and [winners] across [matches]?". [losers] matches table = [matches]. [winners] matches table = [matches]. So, tables = [matches] which number of tables = 1. However, we also need to consider the [players] table to obtain the birth dates of the winners and losers. Therefore, the number of tables is more than 1. Thus, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 437
SELECT avg(winner_rank) FROM matches
Find the average rank of winners in all matches.
schema_links:
[rankings.ranking, matches.winner_id = players.player_id]
classification:
The question is "Find the average rank of [winners] in all [matches].". [winners] matches table = [players]. [matches] matches table = [matches]. So, tables = [players, matches] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 438
SELECT avg(winner_rank) FROM matches
What is the average rank for winners in all matches?
schema_links:
[rankings.ranking, matches.winner_id = players.player_id]
classification:
The question is "What is the average rank for winners in all matches?" [winners] matches table = [matches]. [rank] matches table = [rankings]. [players] matches table = [players]. tables = [matches, rankings, players] are connected by [winner_id = player_id]. So, tables = [matches, rankings, players] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 439
SELECT min(loser_rank) FROM matches
Find the highest rank of losers in all matches.
schema_links:
[matches.loser_rank, matches.loser_id = players.player_id, matches.*]
classification:
The question is "Find the highest rank of [losers] in all [matches]." [losers] matches table = [matches]. So, tables = [matches] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 440
SELECT min(loser_rank) FROM matches
What is the best rank of losers across all matches?
schema_links:
[matches.loser_rank,matches.*]
classification:
The question is "What is the best rank of [losers] across all [matches]?". [losers] matches table = [matches]. So, tables = [matches] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 441
SELECT count(DISTINCT country_code) FROM players
find the number of distinct country codes of all players.
schema_links:
[players.country_code,players.player_id]
classification:
The question is "Find the number of distinct [country codes] of all [players].". [country codes] matches table = [players]. So, tables = [players] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 442
SELECT count(DISTINCT country_code) FROM players
How many distinct countries do players come from?
schema_links:
[players.country_code]
classification:
The question is "How many distinct [countries] do [players] come from?". [countries] matches table = [players]. [players] matches table = [players]. So, tables = [players] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 443
SELECT count(DISTINCT loser_name) FROM matches
Find the number of distinct name of losers.
schema_links:
[players.last_name,matches.loser_id = players.player_id]
classification:
The question is "Find the number of distinct name of [losers].". [losers] matches table = [players]. So, tables = [players] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 444
SELECT count(DISTINCT loser_name) FROM matches
How many different loser names are there?
schema_links:
[matches.loser_name]
classification:
The question is "How many different [loser names] are there?". [loser names] matches table = [matches]. So, tables = [matches] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 445
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10
Find the name of tourney that has more than 10 matches.
schema_links:
[matches.tourney_name,matches.*]
classification:
The question is "Find the name of [tourney] that has more than 10 [matches].". [tourney] matches table = [matches]. So, tables = [matches] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 446
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10
What are the names of tournaments that have more than 10 matches?
schema_links:
[matches.tourney_name, matches.*]
classification:
The question is "What are the names of [tournaments] that have more than 10 [matches]?". [tournaments] matches table = [matches]. So, tables = [matches] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 447
SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016
List the names of all winners who played in both 2013 and 2016.
schema_links:
[players.first_name, players.last_name, matches.year, matches.winner_id = players.player_id, 2013, 2016]
classification:
The question is "List the names of all [winners] who played in both 2013 and 2016.". [winners] matches table = [players]. So, tables = [players] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 448
SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016
What are the names of players who won in both 2013 and 2016?
schema_links:
[players.first_name, players.last_name, matches.winner_id, matches.year, 2013, 2016]
classification:
The question is "What are the names of [players] who won in both 2013 and 2016?". [players] matches table = [players]. So, tables = [players] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 449
SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016
List the number of all matches who played in years of 2013 or 2016.
schema_links:
[matches.*, matches.year, 2013, 2016]
classification:
The question is "List the number of all [matches] who played in years of 2013 or 2016.". [matches] matches table = [matches]. So, tables = [matches] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 450
SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016
How many matches were played in 2013 or 2016?
schema_links:
[]
classification:
The question is "How many matches were played in 2013 or 2016?". The table that matches the concept of "matches" is [matches]. So, tables = [matches], which means the number of tables = 1. Therefore, the SQL query can be classified as "EASY".
Label: "EASY"

index is 451
SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'
What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?
schema_links:
[players.country_code, players.first_name, matches.tourney_name, "WTA Championships", "Australian Open"]
classification:
The question is "What are the [country code] and [first name] of the [players] who won in both tourney [WTA Championships] and [Australian Open]?". [players] matches table = [players]. So, tables = [players] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 452
SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'
What are the first names and country codes for players who won both the WTA Championships and the Australian Open?
schema_links:
[players.first_name, players.country_code, matches.tourney_name, matches.winner_id = players.player_id, "WTA Championships", "Australian Open"]
classification:
The question is "What are the first names and country codes for [players] who won both the [WTA Championships] and the [Australian Open]?". [players] matches table = [players]. So, tables = [players] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 453
SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1
Find the first name and country code of the oldest player.
schema_links:
[players.first_name, players.country_code, players.birth_date]
classification:
The question is "Find the [first name] and [country code] of the [oldest player]." [first name], [country code], and [birth date] match table = [players]. So, tables = [players] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 454
SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1
What is the first name and country code of the oldest player?
schema_links:
[players.first_name, players.country_code, players.birth_date]
classification:
The question is "What is the [first name] and [country code] of the [oldest player]?". [first name] matches column = [players.first_name]. [country code] matches column = [players.country_code]. [oldest player] matches column = [players.birth_date]. So, columns = [players.first_name, players.country_code] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 455
SELECT first_name ,  last_name FROM players ORDER BY birth_date
List the first and last name of all players in the order of birth date.
schema_links:
[players.first_name, players.last_name, players.birth_date]
classification:
The question is "List the first and last name of all [players] in the order of birth date.". [players] matches table = [players]. So, tables = [players] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 456
SELECT first_name ,  last_name FROM players ORDER BY birth_date
What are the full names of all players, sorted by birth date?
schema_links:
[players.first_name, players.last_name, players.birth_date]
classification:
The question is "What are the full names of all [players], sorted by [birth date]?" [players] matches table = [players]. So, tables = [players] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 457
SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
List the first and last name of all players who are left / L hand in the order of birth date.
schema_links:
[players.first_name, players.last_name, players.hand, players.birth_date, 'L']
classification:
The question is "List the first and last name of all players who are [left/L hand] in the order of birth date." [players] matches table = [players]. So, tables = [players] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 458
SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
What are the full names of all left handed players, in order of birth date?
schema_links:
[players.first_name, players.last_name, players.hand, players.birth_date, left]
classification:
The question is "What are the full names of all [left handed players], in order of [birth date]?". [left handed players] matches table = [players]. So, tables = [players] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 459
SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1
Find the first name and country code of the player who did the most number of tours.
schema_links:
[players.first_name, players.country_code, rankings.tours, rankings.player_id = players.player_id]
classification:
The question is "Find the [first name] and [country code] of the [player] who did the most number of [tours].". [player] matches table = [players]. [tours] matches table = [rankings]. tables = [players, rankings] are connected by table = [rankings]. So, tables = [players, rankings] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 460
SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1
What is the first name and country code of the player with the most tours?
schema_links:
[players.first_name, players.country_code, rankings.tours, rankings.player_id = players.player_id]
classification:
The question is "What is the first name and country code of the player with the most tours?". [player] matches table = [players]. [tours] matches table = [rankings]. So, tables = [players, rankings] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 461
SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
Find the year that has the most number of matches.
schema_links:
[matches.year]
classification:
The question is "Find the [year] that has the most number of [matches]." [year] matches table = [matches]. So, tables = [matches] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 462
SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
Which year had the most matches?
schema_links:
[matches.year]
classification:
The question is "Which [year] had the most [matches]?" [year] matches table = [matches]. So, tables = [matches] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 463
SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1
Find the name and rank points of the winner who won the most times.
schema_links:
[players.first_name, players.last_name, rankings.ranking_points, matches.winner_id = players.player_id]
classification:
The question is "Find the name and rank points of the [winner] who won the most times." [winner] matches table = [players]. So, tables = [players] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 464
SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1
What is the name of the winner who has won the most matches, and how many rank points does this player have?
schema_links:
[players.first_name, players.last_name, matches.winner_id = players.player_id, rankings.ranking_points]
Slicing error for the classification module
classification:
The given question is incomplete. It seems to be asking for the name of the winner who has won the most matches and the number of rank points this player has. However, the necessary table connections and conditions are missing. Without additional information, it is not possible to determine the complexity of the SQL query. Please provide the missing details.

index is 465
SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.
schema_links:
[players.first_name, players.last_name, rankings.ranking_points, matches.tourney_name, Australian Open]
classification:
The question is "Find the name of the [winner] who has the highest [rank points] and participated in the [Australian Open] tourney.". [winner] matches table = [players]. [rank points] matches table = [rankings]. [Australian Open] matches table = [matches]. So, tables = [players, rankings, matches] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 466
SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
What is the name of the winner with the most rank points who participated in the Australian Open tournament?
schema_links:
[players.last_name, players.first_name, matches.winner_id = players.player_id, matches.tourney_name, rankings.ranking_points, matches.tourney_id = tournaments.tourney_id, Australian Open]
classification:
The question is "What is the name of the [winner] with the most [rank points] who participated in the [Australian Open] tournament?". [winner] matches table = [players]. [rank points] matches table = [rankings]. [Australian Open] matches table = [matches] and [tournaments]. So, tables = [players, rankings, matches, tournaments] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 467
SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1
find the names of loser and winner who played in the match with greatest number of minutes.
schema_links:
[players.first_name, players.last_name, matches.minutes, matches.loser_id = players.player_id, matches.winner_id = players.player_id]
classification:
The question is "Find the names of [loser] and [winner] who played in the match with the greatest number of minutes.". [loser] matches table = [players]. [winner] matches table = [players]. tables = [players] are connected by table = [matches]. So, tables = [players, matches] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 468
SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1
What are the names of the winner and loser who played in the longest match?
schema_links:
[players.first_name, players.last_name, matches.minutes, matches.winner_id = players.player_id, matches.loser_id = players.player_id]
classification:
The question is "What are the names of the [winner] and [loser] who played in the [longest match]?". [winner] matches table = [players]. [loser] matches table = [players]. [longest match] matches table = [matches]. So, tables = [players, matches] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 469
SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
Find the average ranking for each player and their first name.
schema_links:
[rankings.ranking, players.first_name, rankings.player_id = players.player_id]
classification:
The question is "Find the average ranking for each [player] and their [first name].". [player] matches table = [players]. So, tables = [players] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 470
SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
What are the first names of all players, and their average rankings?
schema_links:
[players.first_name, rankings.ranking]
classification:
The question is "What are the first names of all [players], and their average [rankings]?". [players] matches table = [players]. [rankings] matches table = [rankings]. So, tables = [players, rankings] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 471
SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
Find the total ranking points for each player and their first name.
schema_links:
[rankings.ranking_points,players.first_name,rankings.player_id = players.player_id]
classification:
The question is "Find the total ranking points for each player and their first name.". [player] matches table = [players]. [ranking points] matches table = [rankings]. So, tables = [players, rankings] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 472
SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
What are the first names of all players, and their total ranking points?
schema_links:
[players.first_name,rankings.ranking_points,rankings.player_id = players.player_id]
classification:
The question is "What are the first names of all [players], and their total [ranking points]?". [players] matches table = [players]. [ranking points] matches table = [rankings]. So, tables = [players, rankings] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 473
SELECT count(*) ,  country_code FROM players GROUP BY country_code
find the number of players for each country.
schema_links:
[players.country_code]
classification:
The question is "Find the number of players for each country." [players] matches table = [players]. So, tables = [players] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 474
SELECT count(*) ,  country_code FROM players GROUP BY country_code
How many players are from each country?
schema_links:
[players.*, players.country_code]
classification:
The question is "How many players are from each [country]?". [country] matches table = [players]. So, tables = [players] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 475
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
find the code of the country where has the greatest number of players.
schema_links:
[players.country_code, players.*]
classification:
The question is "Find the code of the country where [has] the greatest number of [players]." [has] matches table = [players]. So, tables = [players] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 476
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
What is the code of the country with the most players?
schema_links:
[players.country_code,players.*]
classification:
The question is "What is the code of the [country] with the most [players]?". [country] matches table = [players]. So, tables = [players] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 477
SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50
Find the codes of countries that have more than 50 players.
schema_links:
[players.country_code, players.player_id, 50]
classification:
The question is "Find the codes of [countries] that have more than 50 [players]." [countries] matches table = [players]. So, tables = [players] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 478
SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50
What are the codes of countries with more than 50 players?
schema_links:
[players.country_code,COUNT(players.player_id),50]
classification:
The question is "What are the codes of countries with more than 50 [players]?" [players] matches table = [players]. So, tables = [players] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 479
SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date
Find the total number of tours for each ranking date.
schema_links:
[rankings.tours, rankings.ranking_date, rankings.player_id = players.player_id]
classification:
The question is "Find the total number of [tours] for each [ranking date].". [tours] matches table = [rankings]. [ranking date] matches table = [rankings]. So, tables = [rankings] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 480
SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date
How many total tours were there for each ranking date?
schema_links:
[rankings.tours, rankings.ranking_date]
classification:
The question is "How many total tours were there for each [ranking date]?". [ranking date] matches table = [rankings]. So, tables = [rankings] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 481
SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR
Find the number of matches happened in each year.
schema_links:
[matches.*, matches.year]
classification:
The question is "Find the number of matches happened in each year." [matches] matches table = [matches]. So, tables = [matches] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 482
SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR
How many matches were played in each year?
schema_links:
[matches.*, matches.year]
classification:
The question is "How many matches were played in each year?" [matches] matches table = [matches]. So, tables = [matches] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 483
SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3
Find the name and rank of the 3 youngest winners across all matches.
schema_links:
[players.first_name, players.last_name, rankings.ranking, matches.winner_id = players.player_id]
classification:
The question is "Find the name and rank of the 3 youngest winners across all matches." [name, rank] matches table = [players, rankings]. So, tables = [players, rankings] which number of tables = 2. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 484
SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3
What are the names and ranks of the three youngest winners across all matches?
schema_links:
[players.first_name, players.last_name, rankings.ranking, matches.winner_id = players.player_id]
classification:
The question is "What are the names and ranks of the three youngest [winners] across all [matches]?". [winners] matches table = [players]. [matches] matches table = [matches]. tables = [players, matches] are connected by table = [rankings]. So, tables = [players, matches, rankings] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 485
SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'
How many different winners both participated in the WTA Championships and were left handed?
schema_links:
[players.player_id, matches.tourney_name, players.hand, matches.winner_id = players.player_id, "WTA Championships", "L"]
classification:
The question is "How many different [winners] both participated in the [WTA Championships] and were [left handed]?". [winners] matches table = [players]. [WTA Championships] matches table = [matches]. [left handed] matches column = [players.hand]. tables = [players, matches] are connected by column = [matches.winner_id = players.player_id]. So, tables = [players, matches] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 486
SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'
Find the number of left handed winners who participated in the WTA Championships.
schema_links:
[players.player_id, players.hand, matches.tourney_name, matches.winner_id = players.player_id, WTA Championships, Left]
classification:
The question is "Find the number of left-handed [winners] who participated in the WTA Championships.". [winners] matches table = [matches] which is connected to [players] by [matches.winner_id = players.player_id]. So, tables = [matches, players] which number of tables = 2. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 487
SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
Find the first name, country code and birth date of the winner who has the highest rank points in all matches.
schema_links:
[players.first_name, players.country_code, players.birth_date, rankings.ranking_points, matches.winner_id = players.player_id, rankings.player_id = players.player_id]
classification:
The question is "Find the [first name], [country code] and [birth date] of the [winner] who has the highest [rank points] in all [matches]. [winner] matches table = [players]. [matches] matches table = [matches]. [rankings] matches table = [rankings]. So, tables = [players, matches, rankings] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 488
SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
What is the first name, country code, and birth date of the player with the most winner rank points across all matches?
schema_links:
[players.first_name, players.country_code, players.birth_date, matches.winner_rank_points, matches.winner_id = players.player_id]
classification:
The question is "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?". [player] matches table = [players]. [matches] matches table = [matches]. So, tables = [players, matches] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 489
SELECT count(*) ,  hand FROM players GROUP BY hand
Find the number of players for each hand type.
schema_links:
[players.*, players.hand]
classification:
The question is "Find the number of players for each [hand] type.". [players] matches table = [players]. So, tables = [players] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 490
SELECT count(*) ,  hand FROM players GROUP BY hand
How many players are there for each hand type?
schema_links:
[players.*,players.hand]
classification:
The question is "How many players are there for each hand type?" [players] matches table = [players]. So, tables = [players] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 491
SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'
How many ships ended up being 'Captured'?
schema_links:
[ship.*,ship.disposition_of_ship,'Captured']
classification:
The question is "How many [ships] ended up being 'Captured'?" [ships] matches table = [ship]. So, tables = [ship] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 492
SELECT name ,  tonnage FROM ship ORDER BY name DESC
List the name and tonnage ordered by in descending alphaetical order for the names.
schema_links:
[ship.name, ship.tonnage, ORDER BY ship.name DESC]
classification:
The question is "List the [name] and [tonnage] ordered by in descending alphabetical order for the [names]." [name] and [tonnage] match table = [ship]. So, tables = [ship] which number of tables = 1. The query also includes the ORDER BY clause. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 493
SELECT name ,  date FROM battle
List the name, date and result of each battle.
schema_links:
[battle.name, battle.date, battle.result]
classification:
The question is "List the [name], [date] and [result] of each [battle]." [name], [date], and [result] match table = [battle]. So, tables = [battle] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 494
SELECT max(killed) ,  min(killed) FROM death
What is maximum and minimum death toll caused each time?
schema_links:
[death.killed,death.caused_by_ship_id = ship.id]
classification:
The question is "What is the maximum and minimum death toll caused each time?". [death] matches table = [death]. So, tables = [death] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 495
SELECT avg(injured) FROM death
What is the average number of injuries caused each time?
schema_links:
[death.injured,death.caused_by_ship_id = ship.id]
Slicing error for the classification module
classification:
The given question "What is the average number of injuries caused each time?" does not match any of the provided tables or columns. Therefore, it cannot be classified as either EASY or COMPLEX based on the number of tables.

index is 496
SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'
What are the death and injury situations caused by the ship with tonnage 't'?
schema_links:
[death.note, death.killed, death.injured, ship.id, ship.tonnage, death.caused_by_ship_id = ship.id, ship.tonnage = 't']
Slicing error for the classification module
classification:
The given question is incomplete. It seems like a SQL query is missing. Please provide the complete question or SQL query for further classification.

index is 497
SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'
What are the name and results of the battles when the bulgarian commander is not 'Boril'
schema_links:
[battle.name, battle.result, battle.bulgarian_commander != 'Boril']
classification:
The question is "What are the name and results of the [battles] when the bulgarian commander is not 'Boril'.". [battles] matches table = [battle]. So, tables = [battle] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 498
SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'
What are the different ids and names of the battles that lost any 'Brig' type shipes?
schema_links:
[battle.id, battle.name, ship.name, ship.ship_type, ship.lost_in_battle, 'Brig']
classification:
The question is "What are the different [ids] and [names] of the [battles] that lost any 'Brig' type [ships]?". [ids] matches table = [battle]. [names] matches table = [battle]. [battles] matches table = [battle]. 'Brig' type [ships] matches table = [ship]. So, tables = [battle, ship] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 499
SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10
What are the ids and names of the battles that led to more than 10 people killed in total.
schema_links:
[battle.id, battle.name, death.killed, ship.lost_in_battle = battle.id, death.caused_by_ship_id = ship.id, 10]
classification:
The question is "What are the ids and names of the [battles] that led to more than 10 people killed in total." [battles] matches table = [battle]. tables = [battle] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 500
SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1
What is the ship id and name that caused most total injuries?
schema_links:
[ship.id, ship.name, death.killed, death.injured, death.caused_by_ship_id = ship.id]
classification:
The question is "What is the ship id and name that caused the most total injuries?". [ship id] matches table = [ship]. [name] matches table = [ship]. [total injuries] matches table = [death]. tables = [ship, death] are connected by table = [death]. So, tables = [ship, death] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 501
SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'
What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?
schema_links:
[battle.name, battle.bulgarian_commander, battle.latin_commander, 'Kaloyan', 'Baldwin I']
classification:
The question is "What are the distinct [battle names] which are between [bulgarian commander 'Kaloyan'] and [latin commander 'Baldwin I']?". [battle names] matches table = [battle]. So, tables = [battle] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 502
SELECT count(DISTINCT RESULT) FROM battle
How many different results are there for the battles?
schema_links:
[battle.result]
classification:
The question is "How many different results are there for the [battles]?" [battles] matches table = [battle]. So, tables = [battle] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 503
SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );
How many battles did not lose any ship with tonnage '225'?
schema_links:
[battle.*,ship.tonnage,ship.lost_in_battle = battle.id,225]
classification:
The question is "How many battles did not lose any ship with tonnage '225'?" [battles] matches table = [battle]. [ships] matches table = [ship]. tables = [battle, ship] are connected by table = [ship] and the condition "ship.lost_in_battle = battle.id" and "ship.tonnage = 225". So, tables = [battle, ship] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 504
SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'
List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'
schema_links:
[battle.name, battle.date, ship.name, ship.lost_in_battle = battle.id, 'Lettice', 'HMS Atalanta']
classification:
The question is "List the name and date of the [battle] that has lost the [ship] named 'Lettice' and the ship named 'HMS Atalanta'". [battle] matches table = [battle]. [ship] matches table = [ship]. tables = [battle, ship] are connected by table = [ship]. So, tables = [battle, ship] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 505
SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'
Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.
schema_links:
[battle.name, battle.result, battle.bulgarian_commander, ship.location, 'English Channel']
classification:
The question is "Show names, results, and Bulgarian commanders of the battles with no ships lost in the 'English Channel'." [battles] match table = [battle]. [ships] match table = [ship]. So, tables = [battle, ship] are connected by table = [ship.lost_in_battle = battle.id]. So, tables = [battle, ship] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 506
SELECT note FROM death WHERE note LIKE '%East%'
What are the notes of the death events which has substring 'East'?
schema_links:
[death.note,'East']
Slicing error for the classification module
classification:
The question is "What are the notes of the death events which has substring 'East'?" There is no mention of any tables related to death events or notes in the given schema. Therefore, it is not possible to determine the complexity of the SQL query based on the number of tables.

index is 507
SELECT line_1 ,  line_2 FROM addresses
what are all the addresses including line 1 and line 2?
schema_links:
[Addresses.*, Addresses.line_1, Addresses.line_2]
classification:
The question is "What are all the addresses including [line 1] and [line 2]?". [addresses] matches table = [Addresses]. So, tables = [Addresses] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 508
SELECT line_1 ,  line_2 FROM addresses
What is the first and second line for all addresses?
schema_links:
[Addresses.line_1, Addresses.line_2]
classification:
The question is "What is the first and second line for all [addresses]?". [addresses] matches table = [Addresses]. So, tables = [Addresses] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 509
SELECT count(*) FROM Courses
How many courses in total are listed?
schema_links:
[Courses.*]
classification:
The question is "How many [courses] in total are listed?". [courses] matches table = [Courses]. So, tables = [Courses] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 510
SELECT count(*) FROM Courses
How many courses are there?
schema_links:
[Courses.course_id]
classification:
The question is "How many [courses] are there?". [courses] matches table = [Courses]. So, tables = [Courses] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 511
SELECT course_description FROM Courses WHERE course_name  =  'math'
How is the math course described?
schema_links:
[Courses.course_description,Courses.*]
classification:
The question is "How is the [math course] described?". [math course] matches table = [Courses]. So, tables = [Courses] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 512
SELECT course_description FROM Courses WHERE course_name  =  'math'
What are the descriptions for all the math courses?
schema_links:
[Courses.course_description,Courses.course_name,Courses.course_id = Sections.course_id,'Math']
classification:
The question is "What are the [descriptions] for all the [math courses]?". [descriptions] matches the column = [Courses.course_description]. [math courses] matches table = [Courses]. So, tables = [Courses] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 513
SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'
What is the zip code of the address in the city Port Chelsea?
schema_links:
[Addresses.zip_postcode,Addresses.city,'Port Chelsea']
classification:
The question is "What is the zip code of the address in the city Port Chelsea?". [address] matches table = [Addresses]. So, tables = [Addresses] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 514
SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'
What is the zip code for Port Chelsea?
schema_links:
[Addresses.zip_postcode,Addresses.city,'Port Chelsea']
classification:
The question is "What is the zip code for [Port Chelsea]?". [Port Chelsea] is a city name, so it matches the column "Addresses.city" in the table "Addresses". So, the tables = [Addresses] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 515
SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1
Which department offers the most number of degrees? List department name and id.
schema_links:
[Departments.department_name, Departments.department_id, Degree_Programs.department_id = Departments.department_id]
classification:
The question is "Which [department] offers the most number of degrees? List [department name] and [id].". [department] matches table = [Departments]. So, tables = [Departments] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 516
select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1
What is the name and id of the department with the most number of degrees ?
schema_links:
[Departments.department_name, Departments.department_id, Degree_Programs.department_id]
classification:
The question is "What is the name and id of the [department] with the most number of [degrees]?". [department] matches table = [Departments]. [degrees] matches table = [Degree_Programs]. So, tables = [Departments, Degree_Programs] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 517
SELECT count(DISTINCT department_id) FROM Degree_Programs
How many departments offer any degree?
schema_links:
[Departments.department_id,Degree_Programs.department_id = Departments.department_id]
classification:
The question is "How many [departments] offer any [degree]?". [departments] matches table = [Departments]. [degree] matches table = [Degree_Programs]. So, tables = [Departments, Degree_Programs] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 518
SELECT count(DISTINCT department_id) FROM Degree_Programs
How many different departments offer degrees?
schema_links:
[Departments.department_id, Degree_Programs.department_id]
classification:
The question is "How many different [departments] offer [degrees]?". [departments] matches table = [Departments]. [degrees] matches table = [Degree_Programs]. So, tables = [Departments, Degree_Programs] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 519
SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs
How many different degree names are offered?
schema_links:
[Degree_Programs.degree_summary_name,Degree_Programs.department_id = Departments.department_id]
classification:
The question is "How many different [degree names] are offered?". [degree names] matches table = [Degree_Programs]. So, tables = [Degree_Programs] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 520
SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs
How many different degrees are offered?
schema_links:
[Degree_Programs.degree_summary_name, Degree_Programs.department_id = Departments.department_id]
classification:
The question is "How many different [degrees] are offered?". [degrees] matches table = [Degree_Programs]. So, tables = [Degree_Programs] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 521
SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'
How many degrees does the engineering department offer?
schema_links:
[Degree_Programs.degree_program_id, Degree_Programs.department_id, 'engineering']
classification:
The question is "How many [degrees] does the [engineering department] offer?" [degrees] matches table = [Degree_Programs]. [engineering department] matches table = [Departments]. So, tables = [Degree_Programs, Departments] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 522
SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'
How many degrees does the engineering department have?
schema_links:
[Degree_Programs.degree_program_id,Degree_Programs.department_id = Departments.department_id,Departments.department_name,'engineering']
classification:
The question is "How many [degrees] does the [engineering department] have?". [degrees] matches table = [Degree_Programs]. [engineering department] matches table = [Departments]. tables = [Degree_Programs, Departments] are connected by table = [Degree_Programs.department_id = Departments.department_id]. So, tables = [Degree_Programs, Departments] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 523
SELECT section_name ,  section_description FROM Sections
What are the names and descriptions of all the sections?
schema_links:
[Sections.section_name, Sections.section_description]
classification:
The question is "What are the names and descriptions of all the [sections]?". [sections] matches table = [Sections]. So, tables = [Sections] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 524
SELECT section_name ,  section_description FROM Sections
What are the names and descriptions for all the sections?
schema_links:
[Sections.section_name, Sections.section_description]
classification:
The question is "What are the names and descriptions for all the [sections]?". [sections] matches table = [Sections]. So, tables = [Sections] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 525
SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2
What are the names and id of courses having at most 2 sections?
schema_links:
[Courses.course_id, Courses.course_name, Sections.course_id = Courses.course_id, Sections.*]
classification:
The question is "What are the names and ID of courses having at most 2 sections?". [courses] matches table = [Courses]. [sections] matches table = [Sections]. So, tables = [Courses, Sections] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 526
SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2
What are the names and ids of every course with less than 2 sections?
schema_links:
[Courses.course_name, Courses.course_id, Sections.course_id, 2]
classification:
The question is "What are the names and ids of every [course] with less than 2 [sections]?" [courses] matches table = [Courses]. [sections] matches table = [Sections]. So, tables = [Courses, Sections] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 527
SELECT section_name FROM Sections ORDER BY section_name DESC
List the section_name in reversed lexicographical order.
schema_links:
[Sections.section_name]
classification:
The question is "List the [section_name] in reversed lexicographical order." [section_name] matches table = [Sections]. So, tables = [Sections] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 528
SELECT section_name FROM Sections ORDER BY section_name DESC
What are the names of the sections in reverse alphabetical order?
schema_links:
[Sections.section_name]
classification:
The question is "What are the names of the [sections] in reverse alphabetical order?" [sections] matches table = [Sections]. So, tables = [Sections] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 529
SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1
What is the semester which most student registered in? Show both the name and the id.
schema_links:
[Semesters.semester_id, Semesters.semester_name, Student_Enrolment.semester_id]
classification:
The question is "What is the [semester] which most [student] registered in? Show both the [name] and the [id]." [semester] matches table = [Semesters]. [student] matches table = [Student_Enrolment]. tables = [Semesters, Student_Enrolment] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 530
SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1
For each semester, what is the name and id of the one with the most students registered?
schema_links:
[Semesters.*,Student_Enrolment.semester_id = Semesters.semester_id, COUNT(Student_Enrolment.student_id)]
classification:
The question is "For each [semester], what is the name and id of the one with the most students registered?". [semester] matches table = [Semesters]. So, tables = [Semesters] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 531
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
What is the description of the department whose name has the substring the computer?
schema_links:
[Departments.department_description, Departments.department_name, 'the computer']
classification:
The question is "What is the description of the [department] whose name has the substring 'the computer'?". [department] matches table = [Departments]. So, tables = [Departments] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 532
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
What is the department description for the one whose name has the word computer?
schema_links:
[Departments.department_description, Departments.department_name, 'computer']
classification:
The question is "What is the [department description] for the one whose [name] has the word [computer]?". [department description] matches table = [Departments]. [name] matches table = [Departments]. So, tables = [Departments] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 533
SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.
schema_links:
[Students.first_name, Students.middle_name, Students.last_name, Student_Enrolment.student_id, Student_Enrolment.semester_id, 2]
classification:
The question is "Who are enrolled in [2 degree programs] in [one semester]? List the [first name], [middle name], [last name], and the [id]." [students] matches table = [Students]. tables = [Students, Student_Enrolment] are connected by table = [Student_Enrolment]. So, tables = [Students, Student_Enrolment] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 534
SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?
schema_links:
[Students.student_id, Students.first_name, Students.middle_name, Students.last_name, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, 2]
classification:
The question is "What are the first, middle, and last names, along with the [ids], of all [students] who enrolled in 2 [degree programs] in one [semester]?". [students] matches table = [Students]. [degree programs] matches table = [Degree_Programs]. [semester] matches table = [Semesters]. tables = [Students, Degree_Programs, Semesters, Student_Enrolment] are connected by table = [Student_Enrolment]. So, tables = [Students, Degree_Programs, Semesters, Student_Enrolment] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 535
SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'
Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.
schema_links:
[Students.first_name, Students.middle_name, Students.last_name, Degree_Programs.degree_summary_name, Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id, Student_Enrolment.student_id = Students.student_id, 'Bachelor']
classification:
The question is "Who is enrolled in a [Bachelor] degree program? List the [first name, middle name, last name].". [Bachelor] matches table = [Degree_Programs]. [first name, middle name, last name] matches table = [Students]. tables = [Degree_Programs, Students] are connected by table = [Student_Enrolment]. So, tables = [Degree_Programs, Students, Student_Enrolment] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 536
SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'
What are the first, middle, and last names for everybody enrolled in a Bachelors program?
schema_links:
[Students.first_name, Students.middle_name, Students.last_name, Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name, Student_Enrolment.student_id = Students.student_id, "Bachelors"]
classification:
The question is "What are the [first], [middle], and [last names] for everybody enrolled in a [Bachelors] program?". [first, middle, last names] match columns = [Students.first_name, Students.middle_name, Students.last_name]. [Bachelors] matches table = [Degree_Programs]. So, tables = [Students, Degree_Programs] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 537
SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1
Find the kind of program which most number of students are enrolled in?
schema_links:
[Degree_Programs.degree_summary_name, Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id, Student_Enrolment.*]
classification:
The question is "Find the kind of program which most number of students are enrolled in?". [program, students] matches tables = [Degree_Programs, Student_Enrolment]. The tables are connected by [degree_program_id]. So, tables = [Degree_Programs, Student_Enrolment] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 538
SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1
What is the degree summary name that has the most number of students enrolled?
schema_links:
[Degree_Programs.degree_summary_name, Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id, Student_Enrolment.*]
classification:
The question is "What is the [degree summary name] that has the most number of [students enrolled]?". [degree summary name] matches table = [Degree_Programs]. [students enrolled] matches table = [Student_Enrolment]. So, tables = [Degree_Programs, Student_Enrolment] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 539
SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1
Find the program which most number of students are enrolled in. List both the id and the summary.
schema_links:
[Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name, Student_Enrolment.degree_program_id]
classification:
The question is "Find the program which the most number of [students] are enrolled in. List both the [id] and the [summary]. [students] matches table = [Student_Enrolment]. [program] matches table = [Degree_Programs]. tables = [Student_Enrolment, Degree_Programs] are connected by table = [degree_program_id]. So, tables = [Student_Enrolment, Degree_Programs] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 540
SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1
What is the program id and the summary of the degree that has the most students enrolled?
schema_links:
[Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description, COUNT(Student_Enrolment.student_id)]
Slicing error for the classification module
classification:
The given question is incomplete. It seems to be asking for the program ID and summary of the degree that has the most students enrolled. However, it is missing some information regarding the tables and their relationships. Please provide the necessary information for the query, including the relevant tables and their connections, so that I can assist you further.

index is 541
SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.
schema_links:
[Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(Student_Enrolment.student_enrolment_id), Student_Enrolment.degree_program_id, Student_Enrolment.student_id = Students.student_id]
classification:
The question is "Which [student] has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.". [student] matches table = [Students]. So, tables = [Students] which number of tables = 1. However, there is also a reference to the [Student_Enrolment] table to count the number of enrollments. Therefore, the tables = [Students, Student_Enrolment] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 542
SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?
schema_links:
[Students.first_name, Students.middle_name, Students.last_name, Students.student_id, COUNT(Student_Enrolment.student_enrolment_id), Student_Enrolment.student_id = Students.student_id, Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id]
classification:
The question is "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?". [first name, middle name, last name, id, number of enrollments] matches tables = [Students, Student_Enrolment, Degree_Programs]. The tables are connected as follows: [Students] is connected to [Student_Enrolment] through the foreign key [Student_Enrolment.student_id = Students.student_id], and [Student_Enrolment] is connected to [Degree_Programs] through the foreign key [Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id]. So, tables = [Students, Student_Enrolment, Degree_Programs] which number of tables >= 1. Therefore, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 543
SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )
Which semesters do not have any student enrolled? List the semester name.
schema_links:
[Semesters.semester_name, Semesters.semester_id = Student_Enrolment.semester_id]
classification:
The question is "Which [semesters] do not have any [student] enrolled? List the semester name.". [semesters] matches table = [Semesters]. [student] matches table = [Student_Enrolment]. So, tables = [Semesters, Student_Enrolment] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 544
SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )
What is the name of the semester with no students enrolled?
schema_links:
[Semesters.semester_name, Student_Enrolment.semester_id = Semesters.semester_id]
classification:
The question is "What is the name of the semester with no students enrolled?" [semester] matches table = [Semesters]. [students enrolled] matches table = [Student_Enrolment]. So, tables = [Semesters, Student_Enrolment] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 545
SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id
What are all the course names of the courses which ever have students enrolled in?
schema_links:
[Courses.course_name, Student_Enrolment_Courses.course_id = Courses.course_id]
classification:
The question is "What are all the [course names] of the [courses] which ever have [students enrolled] in?". [course names] matches table = [Courses]. [courses] matches table = [Courses]. [students enrolled] matches table = [Student_Enrolment_Courses]. So, tables = [Courses, Student_Enrolment_Courses] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 546
SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id
What are the names of all courses that have some students enrolled?
schema_links:
[Courses.course_name,Student_Enrolment_Courses.course_id = Courses.course_id]
classification:
The question is "What are the names of all [courses] that have some [students] enrolled?". [courses] matches table = [Courses]. [students] matches table = [Student_Enrolment_Courses]. So, tables = [Courses, Student_Enrolment_Courses] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 547
SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1
What's the name of the course with most number of enrollments?
schema_links:
[Courses.course_name, Student_Enrolment_Courses.course_id = Courses.course_id, COUNT(Student_Enrolment_Courses.student_enrolment_id)]
classification:
The question is "What's the name of the course with the most number of enrollments?". [course] matches table = [Courses]. So, tables = [Courses] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 548
SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1
What is the name of the course with the most students enrolled?
schema_links:
[Courses.course_name, Student_Enrolment_Courses.course_id = Courses.course_id]
classification:
The question is "What is the name of the course with the most students enrolled?". [course] matches table = [Courses]. So, tables = [Courses] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 549
SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.
schema_links:
[Students.last_name,Addresses.state_province_county,'North Carolina',Student_Enrolment.student_id = Students.student_id]
classification:
The question is "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program." [students] matches table = [Students]. So, tables = [Students] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 550
SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
What are the last name of the students who live in North Carolina but have not registered in any degree programs?
schema_links:
[Students.last_name,Students.current_address_id = Addresses.address_id,Addresses.state_province_county,'North Carolina',Student_Enrolment.student_id = Students.student_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id]
classification:
The question is "What are the last names of the students who live in North Carolina but have not registered in any degree programs?". [students] matches table = [Students]. [addresses] matches table = [Addresses]. [degree programs] matches table = [Degree_Programs]. tables = [Students, Addresses, Degree_Programs] are connected by table = [Student_Enrolment]. So, tables = [Students, Addresses, Degree_Programs, Student_Enrolment] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 551
SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2
Show the date and id of the transcript with at least 2 course results.
schema_links:
[Transcripts.transcript_date, Transcripts.transcript_id, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id = Transcripts.transcript_id, 2]
classification:
The question is "Show the [date] and [id] of the [transcript] with at least [2 course results]. [date] matches column = [transcript_date]. [id] matches column = [transcript_id]. [transcript] matches table = [transcripts]. [2 course results] indicates a condition involving multiple courses, which matches table = [transcript_contents]. So, tables = [transcripts, transcript_contents] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 552
SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2
What is the date and id of the transcript with at least 2 courses listed?
schema_links:
[Transcripts.transcript_id, Transcripts.transcript_date, Transcript_Contents.transcript_id = Transcripts.transcript_id, Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.student_enrolment_id, 2]
classification:
The question is "What is the [date] and [id] of the [transcript] with at least 2 [courses] listed?". [date] and [id] match columns in table = [Transcripts]. [transcript] matches table = [Transcripts]. [courses] matches table = [Student_Enrolment_Courses] and [Student_Enrolment]. tables = [Transcripts, Student_Enrolment_Courses, Student_Enrolment] are connected by table = [Transcript_Contents]. So, tables = [Transcripts, Student_Enrolment_Courses, Student_Enrolment, Transcript_Contents] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 553
SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'
What is the phone number of the man with the first name Timmothy and the last name Ward?
schema_links:
[Students.cell_mobile_number,Students.first_name,Students.last_name,'Timmothy','Ward']
classification:
The question is "What is the phone number of the man with the first name [Timmothy] and the last name [Ward]?". [Timmothy] matches the column = [Students.first_name]. [Ward] matches the column = [Students.last_name]. So, tables = [Students] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 554
select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'
What is the mobile phone number of the student named Timmothy Ward ?
schema_links:
[Students.cell_mobile_number, Students.first_name = 'Timmothy', Students.last_name = 'Ward']
classification:
The question is "What is the mobile phone number of the [student] named Timmothy Ward?". [student] matches table = [Students]. So, tables = [Students] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 555
SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
Who is the first student to register? List the first name, middle name and last name.
schema_links:
[Students.date_first_registered, Students.first_name, Students.middle_name, Students.last_name]
classification:
The question is "Who is the first [student] to register? List the [first name], [middle name], and [last name].". [student] matches table = [student]. So, tables = [student] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 556
SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
What is the first, middle, and last name of the first student to register?
schema_links:
[Students.first_name, Students.middle_name, Students.last_name]
classification:
The question is "What is the [first, middle, and last name] of the [first student] to register?". [first student] matches table = [student]. So, tables = [student] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 557
SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1
Who is the earliest graduate of the school? List the first name, middle name and last name.
schema_links:
[Students.first_name, Students.middle_name, Students.last_name, Transcripts.transcript_date, Student_Enrolment.student_id]
Slicing error for the classification module
classification:
The question is "Who is the earliest graduate of the school? List the first name, middle name, and last name.". [earliest graduate] implies finding the student with the earliest [transcript_date]. [first name], [middle name], and [last name] can be found in the [Students] table. The tables involved are [Students] and [Transcripts], connected by [Student_Enrolment]. So, the number of tables involved is 3, which makes the SQL query "COMPLEX".

index is 558
SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1
What is the first, middle, and last name of the earliest school graduate?
schema_links:
[Students.first_name, Students.middle_name, Students.last_name, Transcripts.transcript_date, Transcripts.transcript_id = Transcript_Contents.transcript_id, Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id, Student_Enrolment.student_id = Students.student_id]
classification:
The question is "What is the [first], [middle], and [last name] of the earliest school graduate?". The names correspond to the [Students] table. The earliest school graduate can be determined from the [Transcripts] table by using the [transcript_date]. The tables involved are [Students] and [Transcripts], which are connected through [Transcript_Contents], [Student_Enrolment_Courses], and [Student_Enrolment]. Since the number of tables involved is greater than or equal to 1, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 559
SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
Whose permanent address is different from his or her current address? List his or her first name.
schema_links:
[Students.first_name, Students.current_address_id = Addresses.address_id, Students.permanent_address_id = Addresses.address_id]
classification:
The question is "Whose [permanent address] is different from his or her [current address]? List his or her [first name].". [permanent address] matches table = [Addresses]. [current address] matches table = [Addresses]. [first name] matches table = [Students]. So, tables = [Addresses, Students] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 560
SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
What is the first name of the student whose permanent address is different from his or her current one?
schema_links:
[Students.first_name, Students.permanent_address_id = Addresses.address_id, Students.current_address_id = Addresses.address_id]
classification:
The question is "What is the first name of the [student] whose permanent address is different from his or her current one?". [student] matches table = [Students]. tables = [Students] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 561
SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
Which address holds the most number of students currently? List the address id and all lines.
schema_links:
[Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3]
classification:
The question is "Which [address] holds the most number of [students] currently? List the [address id] and all [lines]." [address] matches table = [Addresses]. [students] matches table = [Students]. So, tables = [Addresses, Students] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 562
SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
What is the id, line 1, and line 2 of the address with the most students?
schema_links:
[Addresses.address_id, Addresses.line_1, Addresses.line_2, Students.current_address_id = Addresses.address_id, Students.permanent_address_id = Addresses.address_id]
classification:
The question is "What is the [id], [line 1], and [line 2] of the [address] with the most [students]?" [id], [line 1], and [line 2] match table = [Addresses]. [address] matches tables = [Students] connected by table = [Addresses]. So, tables = [Addresses, Students] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 563
SELECT avg(transcript_date) FROM Transcripts
On average, when were the transcripts printed?
schema_links:
[Transcripts.transcript_date]
classification:
The question is "On average, when were the [transcripts] printed?". [transcripts] matches table = [Transcripts]. So, tables = [Transcripts] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 564
SELECT avg(transcript_date) FROM Transcripts
What is the average transcript date?
schema_links:
[Transcripts.transcript_date]
classification:
The question is "What is the average transcript date?". [transcript_date] matches column = [Transcripts.transcript_date]. So, columns = [Transcripts.transcript_date] which number of tables = 0. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 565
SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
When is the first transcript released? List the date and details.
schema_links:
[Transcripts.transcript_date,Transcripts.other_details]
classification:
The question is "When is the first [transcript] released? List the date and details.". [transcript] matches table = [Transcripts]. So, tables = [Transcripts] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 566
SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
What is the earliest date of a transcript release, and what details can you tell me?
schema_links:
[Transcripts.transcript_date,Transcripts.other_details]
classification:
The question is "What is the earliest date of a transcript release, and what details can you tell me?". [transcript_date, other_details] matches table = [Transcripts]. So, tables = [Transcripts] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 567
SELECT count(*) FROM Transcripts
How many transcripts are released?
schema_links:
[Transcripts.*]
classification:
The question is "How many [transcripts] are released?". [transcripts] matches table = [transcripts]. So, tables = [transcripts] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 568
SELECT count(*) FROM Transcripts
How many transcripts are listed?
schema_links:
[Transcripts.transcript_id]
classification:
The question is "How many [transcripts] are listed?" [transcripts] matches table = [Transcripts]. So, tables = [Transcripts] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 569
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
What is the last transcript release date?
schema_links:
[Transcripts.transcript_date]
classification:
The question is "What is the last [transcript release date]?". [transcript release date] matches table = [Transcripts]. So, tables = [Transcripts] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 570
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
When was the last transcript released?
schema_links:
[Transcripts.transcript_date]
classification:
The question is "When was the last transcript released?" and it links to the [transcript_date] column in the [Transcripts] table. Since it only involves a single table, the SQL query can be classified as "EASY".
Label: "EASY"

index is 571
SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.
schema_links:
[COUNT(Transcript_Contents.transcript_id),Student_Enrolment_Courses.student_enrolment_id,Student_Enrolment.student_enrolment_id,Transcript_Contents.student_course_id,Student_Enrolment_Courses.student_course_id]
Slicing error for the classification module
classification:
The question is "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id." There is no clear mapping of the tables mentioned in the question to the given schema. Therefore, it is not possible to determine the number of tables involved and classify the SQL query as "EASY" or "COMPLEX".

index is 572
SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?
schema_links:
[COUNT(Transcript_Contents.transcript_id),Student_Enrolment_Courses.student_enrolment_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]
classification:
The question is "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?". The relevant tables for this question are [Transcript_Contents] and [Student_Enrolment_Courses]. The tables are connected by the columns [Transcript_Contents.student_course_id] and [Student_Enrolment_Courses.student_course_id]. Therefore, the number of tables involved is 2, so the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 573
SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1
Show the date of the transcript which shows the least number of results, also list the id.
schema_links:
[Transcripts.transcript_date,Transcripts.transcript_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.*]
classification:
The question is "Show the date of the [transcript] which shows the [least] number of results, also list the [id].". [transcript] matches table = [Transcripts]. [id] matches table = [Transcript_Contents]. tables = [Transcripts, Transcript_Contents] are connected by table = [Transcript_Contents]. So, tables = [Transcripts, Transcript_Contents] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 574
SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1
What is the date and id of the transcript with the least number of results?
schema_links:
[Transcripts.transcript_date, Transcripts.transcript_id, COUNT(Transcript_Contents.student_course_id)]
Slicing error for the classification module
classification:
The given question is incomplete. It seems to be asking for "What is the date and id of the transcript with the least number of [results]?" However, the [results] table or relevant information is not provided in the schema. Without the necessary information, it is not possible to determine the complexity of the SQL query.

index is 575
SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
Find the semester when both Master students and Bachelor students got enrolled in.
schema_links:
[Semesters.semester_name, Student_Enrolment.semester_id, Degree_Programs.degree_summary_name, Student_Enrolment.degree_program_id, "Master", "Bachelor"]
classification:
The question is "Find the [semester] when both [Master students] and [Bachelor students] got enrolled in.". [semester] matches table = [Semesters]. [Master students] matches table = [Student_Enrolment] connected by table = [Degree_Programs]. [Bachelor students] matches table = [Student_Enrolment] connected by table = [Degree_Programs]. So, tables = [Semesters, Student_Enrolment, Degree_Programs] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 576
SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
What is the id of the semester that had both Masters and Bachelors students enrolled?
schema_links:
[Semesters.semester_id, Student_Enrolment.degree_program_id, "Masters", "Bachelors"]
classification:
The question is "What is the id of the [semester] that had both [Masters] and [Bachelors] students enrolled?". [semester] matches table = [Semesters]. [Masters] matches table = [Degree_Programs]. [Bachelors] matches table = [Degree_Programs]. So, tables = [Semesters, Degree_Programs] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 577
SELECT count(DISTINCT current_address_id) FROM Students
How many different addresses do the students currently live?
schema_links:
[Addresses.address_id, Students.current_address_id]
classification:
The question is "How many different addresses do the [students] currently live?" [students] matches table = [student]. So, tables = [student] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 578
SELECT count(DISTINCT current_address_id) FROM Students
What are the different addresses that have students living there?
schema_links:
[Addresses.* , Students.permanent_address_id = Addresses.address_id, Students.current_address_id = Addresses.address_id]
classification:
The question is "What are the different [addresses] that have [students] living there?". [addresses] matches table = [Addresses]. [students] matches table = [Students]. So, tables = [Addresses, Students] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 579
SELECT other_student_details FROM Students ORDER BY other_student_details DESC
List all the student details in reversed lexicographical order.
schema_links:
[]
classification:
The question is "List all the [student] details in reversed lexicographical order.". [student] matches table = [student]. So, tables = [student] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 580
SELECT other_student_details FROM Students ORDER BY other_student_details DESC
What other details can you tell me about students in reverse alphabetical order?
schema_links:
[Students.other_student_details, Students.first_name, Students.middle_name, Students.last_name, Students.current_address_id = Addresses.address_id, Students.permanent_address_id = Addresses.address_id]
classification:
The question is "What other details can you tell me about [students] in reverse alphabetical order?". [students] matches table = [Students]. So, tables = [Students] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 581
SELECT section_description FROM Sections WHERE section_name  =  'h'
Describe the section h.
schema_links:
[Sections.*]
classification:
The question is "Describe the section [h]." [section] matches table = [Sections]. So, tables = [Sections] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 582
SELECT section_description FROM Sections WHERE section_name  =  'h'
What is the description for the section named h?
schema_links:
[Sections.section_description,Sections.section_name,'h']
classification:
The question is "What is the description for the section named [h]?". [h] matches table = [Sections]. So, tables = [Sections] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 583
select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'
Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .
schema_links:
[Students.first_name, Students.permanent_address_id = Addresses.address_id, Addresses.country, Students.cell_mobile_number]
classification:
The question is "Find the first name of the [students] who permanently live in the country Haiti or have the cell phone number 09700166582." [students] matches table = [Students]. So, tables = [Students] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 584
select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'
What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?
schema_links:
[Students.first_name, Students.permanent_address_id = Addresses.address_id, Addresses.country = 'Haiti', Students.cell_mobile_number = '09700166582']
classification:
The question is "What are the first names of the [students] who live in [Haiti] permanently or have the cell phone number [09700166582]?". [students] matches table = [Students]. [Haiti] matches [Addresses.country]. [09700166582] matches [Students.cell_mobile_number]. So, tables = [Students, Addresses] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 585
SELECT Title FROM Cartoon ORDER BY title
List the title of all cartoons in alphabetical order.
schema_links:
[Cartoon.Title, Cartoon.Channel = TV_Channel.id]
classification:
The question is "List the title of all [cartoons] in alphabetical order.". [cartoons] matches table = [Cartoon]. So, tables = [Cartoon] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 586
SELECT Title FROM Cartoon ORDER BY title
What are the titles of the cartoons sorted alphabetically?
schema_links:
[Cartoon.Title]
classification:
The question is "What are the titles of the [cartoons] sorted alphabetically?" [cartoons] matches table = [Cartoon]. So, tables = [Cartoon] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 587
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";
List all cartoon directed by "Ben Jones".
schema_links:
[Cartoon.*, Cartoon.Directed_by, 'Ben Jones']
classification:
The question is "List all [cartoon] directed by 'Ben Jones'.". [cartoon] matches table = [Cartoon]. So, tables = [Cartoon] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 588
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";
What are the names of all cartoons directed by Ben Jones?
schema_links:
[Cartoon.Title, Cartoon.Directed_by, 'Ben Jones']
classification:
The question is "What are the names of all [cartoons] directed by [Ben Jones]?". [cartoons] matches table = [Cartoon]. So, tables = [Cartoon] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 589
SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
How many cartoons were written by "Joseph Kuhr"?
schema_links:
[Cartoon.*, Cartoon.Written_by, "Joseph Kuhr"]
classification:
The question is "How many [cartoons] were written by "Joseph Kuhr"?". [cartoons] matches table = [Cartoon]. So, tables = [Cartoon] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 590
SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
What is the number of cartoones written by Joseph Kuhr?
schema_links:
[Cartoon.id, Cartoon.Written_by, "Joseph Kuhr"]
classification:
The question is "What is the number of cartoons written by Joseph Kuhr?". The relevant table is [Cartoon], and we need to match the column [Written_by] with the value "Joseph Kuhr". So, tables = [Cartoon] which number of tables = 1. Thus, the SQL query can be classified as "EASY".
Label: "EASY"

index is 591
SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date
list all cartoon titles and their directors ordered by their air date
schema_links:
[Cartoon.Title, Cartoon.Directed_by, Cartoon.Original_air_date, Cartoon.Channel = TV_Channel.id]
classification:
The question is "List all [cartoon titles] and their [directors] ordered by their [air date]." [cartoon titles] matches table = [Cartoon]. [directors] matches table = [Cartoon]. tables = [Cartoon] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 592
SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date
What is the name and directors of all the cartoons that are ordered by air date?
schema_links:
[Cartoon.Title, Cartoon.Directed_by, Cartoon.Original_air_date]
classification:
The question is "What is the name and directors of all the [cartoons] that are ordered by air date?". [cartoons] matches table = [Cartoon]. So, tables = [Cartoon] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 593
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
List the title of all cartoon directed by "Ben Jones" or "Brandon Vietti".
schema_links:
[Cartoon.Title, Cartoon.Directed_by, 'Ben Jones', 'Brandon Vietti']
classification:
The question is "List the title of all [cartoon] directed by 'Ben Jones' or 'Brandon Vietti'.". [cartoon] matches table = [Cartoon]. So, tables = [Cartoon] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 594
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?
schema_links:
[Cartoon.Title, Cartoon.Directed_by, Ben Jones, Brandon Vietti]
classification:
The question is "What are the titles of all [cartoons] directed by Ben Jones or Brandon Vietti?". [cartoons] matches table = [Cartoon]. So, tables = [Cartoon] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 595
SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;
Which country has the most of TV Channels? List the country and number of TV Channels it has.
schema_links:
[TV_Channel.Country, COUNT(TV_Channel.id)]
classification:
The question is "Which [country] has the most [TV Channels]? List the country and number of TV Channels it has." [country] matches table = [TV_Channel]. [TV Channels] matches table = [TV_Channel]. So, tables = [TV_Channel] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 596
SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;
What is the country with the most number of TV Channels and how many does it have?
schema_links:
[TV_Channel.Country]
Slicing error for the classification module
classification:
The question is "What is the country with the most number of TV Channels and how many does it have?" The relevant table for this query is [TV_Channel]. So, the number of tables involved is 1. Thus, the SQL query can be classified as "EASY".

index is 597
SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;
List the number of different series names and contents in the TV Channel table.
schema_links:
[TV_Channel.series_name, TV_Channel.Content]
classification:
The question is "List the number of different [series names] and [contents] in the [TV Channel] table.". [series names] matches table = [TV_Channel]. [contents] matches table = [TV_Channel]. So, tables = [TV_Channel] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 598
SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;
How many different series and contents are listed in the TV Channel table?
schema_links:
[TV_series.series_name,TV_Channel.Content]
classification:
The question is "How many different [series] and [contents] are listed in the TV Channel table?". [series] matches table = [TV_series]. [contents] matches table = [TV_Channel]. So, tables = [TV_series, TV_Channel] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 599
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
What is the content of TV Channel with serial name "Sky Radio"?
schema_links:
[TV_Channel.Content,TV_Channel.series_name,'Sky Radio']
Slicing error for the classification module
classification:
The given question is not related to the provided database schema. It appears to be asking about a different schema related to TV channels and series. Since the question doesn't involve any tables from the provided schema, it cannot be classified as either "EASY" or "COMPLEX" based on the number of tables. Instead, it is unrelated to the provided schema.

index is 600
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
What is the content of the series Sky Radio?
schema_links:
[TV_Channel.Content,TV_Channel.series_name,TV_Channel.id = TV_series.Channel,'Sky Radio']
Slicing error for the classification module
classification:
The given question is incomplete. It seems to be missing the actual query or task to be performed. Could you please provide more information or complete the question?

index is 601
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
What is the Package Option of TV Channel with serial name "Sky Radio"?
schema_links:
[TV_Channel.Package_Option, TV_Channel.series_name, 'Sky Radio']
classification:
The question is "What is the [Package Option] of [TV Channel] with [serial name] "Sky Radio"?". [TV Channel] matches table = [TV_Channel]. So, tables = [TV_Channel] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 602
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
What are the Package Options of the TV Channels whose series names are Sky Radio?
schema_links:
[TV_Channel.Package_Option,TV_Channel.series_name,TV_Channel.id = TV_series.Channel,'Sky Radio']
classification:
The question is "What are the [Package Options] of the [TV Channels] whose [series names] are 'Sky Radio'?". [Package Options] matches table = [TV_Channel]. [TV Channels] matches table = [TV_Channel]. [series names] matches column = [TV_Channel.series_name]. So, tables = [TV_Channel] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 603
SELECT count(*) FROM TV_Channel WHERE LANGUAGE = "English";
How many TV Channel using language English?
schema_links:
[TV_Channel.id, English]
classification:
The question is "How many [TV Channel] using language [English]?". [TV Channel] matches table = [TV_Channel]. So, tables = [TV_Channel] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 604
SELECT count(*) FROM TV_Channel WHERE LANGUAGE = "English";
How many TV Channels use the English language?
schema_links:
[TV_Channel.Language,'English']
classification:
The question is "How many [TV Channels] use the [English] language?". [TV Channels] matches table = [TV_Channel]. So, tables = [TV_Channel] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 605
SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
List the language used least number of TV Channel. List language and number of TV Channel.
schema_links:
[TV_Channel.Language, COUNT(TV_Channel.id)]
Slicing error for the classification module
classification:
The given question is incomplete and lacks clarity. It seems to be requesting information about the language used least number of TV Channels and the count of TV Channels for each language. However, the specific tables and columns involved in the query are not provided. Please provide the necessary information to properly classify the complexity of the query.

index is 606
SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
What are the languages used by the least number of TV Channels and how many channels use it?
schema_links:
[TV_Channel.Language, Cartoon.Channel, TV_Channel.id, TV_series.Channel]
classification:
The question is "What are the languages used by the least number of [TV Channels] and how many channels use it?". [TV Channels] matches table = [TV_Channel]. So, tables = [TV_Channel] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 607
SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE
List each language and the number of TV Channels using it.
schema_links:
[TV_Channel.Language]
Slicing error for the classification module
classification:
The given question is missing. Could you please provide the question for classification?

index is 608
SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE
For each language, list the number of TV Channels that use it.
schema_links:
[TV_Channel.Language]
classification:
The question is "For each [language], list the number of [TV Channels] that use it.". [language] matches table = [TV_Channel]. So, tables = [TV_Channel] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 609
SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!";
What is the TV Channel that shows the cartoon "The Rise of the Blue Beetle!"? List the TV Channel's series name.
schema_links:
[TV_Channel.id,Cartoon.Channel = TV_Channel.id,'The Rise of the Blue Beetle!',TV_Channel.series_name]
classification:
The question is "What is the TV Channel that shows the cartoon 'The Rise of the Blue Beetle!'? List the TV Channel's series name." [TV Channel] matches table = [TV_Channel]. [cartoon] matches table = [Cartoon]. So, tables = [TV_Channel, Cartoon] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 610
SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!";
What is the series name of the TV Channel that shows the cartoon "The Rise of the Blue Beetle"?
schema_links:
[TV_series.series_name, Cartoon.Title, TV_series.Channel = TV_Channel.id, Cartoon.Channel = TV_Channel.id, 'The Rise of the Blue Beetle']
classification:
The question is "What is the [series name] of the [TV Channel] that shows the cartoon "The Rise of the Blue Beetle"?". [series name] matches table = [TV_series]. [TV Channel] matches table = [TV_Channel]. The cartoon title "The Rise of the Blue Beetle" matches table = [Cartoon]. The tables [TV_series, TV_Channel, Cartoon] are connected by the foreign keys [TV_series.Channel = TV_Channel.id] and [Cartoon.Channel = TV_Channel.id]. So, tables = [TV_series, TV_Channel, Cartoon] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 611
SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
List the title of all  Cartoons showed on TV Channel with series name "Sky Radio".
schema_links:
[Cartoon.Title, Cartoon.Channel = TV_Channel.id, TV_Channel.series_name, 'Sky Radio']
classification:
The question is "List the title of all [Cartoons] showed on [TV_Channel] with series name 'Sky Radio'.". [Cartoons] matches table = [Cartoon]. [TV_Channel] matches table = [TV_Channel]. tables = [Cartoon, TV_Channel] are connected by table = [TV_series]. So, tables = [Cartoon, TV_Channel, TV_series] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 612
SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
What is the title of all the cartools that are on the TV Channel with the series name "Sky Radio"?
schema_links:
[Cartoon.Title,Cartoon.Channel = TV_Channel.id,TV_Channel.series_name,'Sky Radio']
classification:
The question is "What is the title of all the [cartoons] that are on the [TV Channel] with the series name 'Sky Radio'?". [cartoons] matches table = [Cartoon]. [TV Channel] matches table = [TV_Channel]. So, tables = [Cartoon, TV_Channel] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 613
SELECT Episode FROM TV_series ORDER BY rating
List the Episode of all TV series sorted by rating.
schema_links:
[TV_series.Episode,TV_series.Rating,TV_series.Channel = TV_Channel.id]
classification:
The question is "List the [Episode] of all [TV series] sorted by [rating]." [Episode] matches table = [TV_series]. [TV series] matches table = [TV_series]. So, tables = [TV_series] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 614
SELECT Episode FROM TV_series ORDER BY rating
What are all of the episodes ordered by ratings?
schema_links:
[TV_series.*,TV_series.Rating,TV_series.Channel = TV_Channel.id]
classification:
The question is "What are all of the [episodes] ordered by [ratings]?" [episodes] matches table = [TV_series]. [ratings] matches column = [Rating]. So, tables = [TV_series] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 615
SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
List top 3 highest Rating  TV series. List the TV series's Episode and Rating.
schema_links:
[TV_series.Rating, TV_series.Episode, TV_series.Channel = TV_Channel.id]
classification:
The question is "List top 3 highest [Rating] TV series. List the TV series's [Episode] and [Rating]." [Rating] matches table = [TV_series]. [Episode] matches table = [TV_series]. tables = [TV_series] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 616
SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
What are 3 most highly rated episodes in the TV series table and what were those ratings?
schema_links:
[TV_series.Episode, TV_series.Rating, TV_series.Channel = TV_Channel.id]
classification:
The question is "What are [3] most highly rated [episodes] in the [TV series] table and what were those [ratings]?" [episodes] matches table = [TV_series]. [TV series] matches table = [TV_series]. So, tables = [TV_series] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 617
SELECT max(SHARE) , min(SHARE) FROM TV_series;
What is minimum and maximum share of TV series?
schema_links:
[TV_series.Share]
Slicing error for the classification module
classification:
The provided question does not seem to be related to the given schema. The schema consists of tables related to a university database, while the question seems to be related to TV series. Therefore, it is not possible to classify the SQL query as either "EASY" or "COMPLEX" based on the number of tables.

index is 618
SELECT max(SHARE) , min(SHARE) FROM TV_series;
What is the maximum and minimum share for the TV series?
schema_links:
[TV_series.Share]
classification:
The question is "What is the maximum and minimum [share] for the TV series?". [share] matches table = [TV_series]. So, tables = [TV_series] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 619
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
What is the air date of TV series with Episode "A Love of a Lifetime"?
schema_links:
[TV_series.Air_Date,TV_series.Episode,TV_series.Channel = TV_Channel.id,'A Love of a Lifetime']
classification:
The question is "What is the air date of TV series with [Episode] 'A Love of a Lifetime'?" [Episode] matches table = [TV_series]. So, tables = [TV_series] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 620
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
When did the episode "A Love of a Lifetime" air?
schema_links:
[TV_series.Air_Date,TV_series.Episode,'A Love of a Lifetime']
Slicing error for the classification module
classification:
The question is "When did the episode 'A Love of a Lifetime' air?". The tables mentioned in the question are not part of the provided schema. Therefore, it cannot be classified as either "EASY" or "COMPLEX" based on the number of tables.

index is 621
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
What is Weekly Rank of TV series with Episode "A Love of a Lifetime"?
schema_links:
[TV_series.Weekly_Rank, TV_series.Episode, 'A Love of a Lifetime']
Slicing error for the classification module
classification:
The given question is not related to the provided database schema. The tables and columns mentioned in the question ("Weekly Rank," "TV_series," "Episode") are not part of the schema. Therefore, it is not possible to classify the query as "EASY" or "COMPLEX" based on the number of tables.

index is 622
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
What is the weekly rank for the episode "A Love of a Lifetime"?
schema_links:
[TV_series.Weekly_Rank,TV_series.Episode,'A Love of a Lifetime']
classification:
The question is "What is the weekly rank for the episode 'A Love of a Lifetime'?". [episode] matches table = [TV_series]. So, tables = [TV_series] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 623
SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";
What is the TV Channel of TV series with Episode "A Love of a Lifetime"? List the TV Channel's series name.
schema_links:
[TV_Channel.id, TV_series.Episode, TV_Channel.series_name, TV_series.Channel]
classification:
The question is "What is the TV Channel of TV series with Episode 'A Love of a Lifetime'? List the TV Channel's series name.". The relevant tables are [TV_Channel] and [TV_series]. The tables are connected by the column [TV_series.Channel = TV_Channel.id]. So, tables = [TV_Channel, TV_series] which number of tables >= 1. The SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 624
SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";
What is the name of the series that has the episode "A Love of a Lifetime"?
schema_links:
[TV_series.series_name,TV_series.Episode,'A Love of a Lifetime']
classification:
The question is "What is the name of the [series] that has the episode 'A Love of a Lifetime'?". [series] matches table = [TV_series]. So, tables = [TV_series] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 625
SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
List the Episode of all  TV series showed on TV Channel with series name "Sky Radio".
schema_links:
[TV_series.Episode, TV_series.Channel = TV_Channel.id, TV_Channel.series_name, 'Sky Radio']
classification:
The question is "List the [Episode] of all [TV series] showed on [TV Channel] with series name 'Sky Radio'.". [Episode] matches table = [TV_series]. [TV series] matches table = [TV_series]. [TV Channel] matches table = [TV_Channel]. So, tables = [TV_series, TV_Channel] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 626
SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
What is the episode for the TV series named "Sky Radio"?
schema_links:
[]
Slicing error for the classification module
classification:
The given question does not have any schema links to determine the tables involved. Therefore, it is not possible to classify the complexity of the SQL query based on the number of tables.

index is 627
SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by
Find the number of cartoons directed by each of the listed directors.
schema_links:
[Cartoon.id, Cartoon.Directed_by]
Slicing error for the classification module
classification:
The given question is incomplete and does not specify the necessary conditions or tables to retrieve the required information. Please provide more information or rephrase the question.

index is 628
SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by
How many cartoons did each director create?
schema_links:
[Cartoon.id,Cartoon.Directed_by]
classification:
The question is "How many [cartoons] did each [director] create?". [cartoons] matches table = [Cartoon]. [directors] matches table = [TV_Channel]. tables = [Cartoon, TV_Channel] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 629
select production_code ,  channel from cartoon order by original_air_date desc limit 1
Find the production code and channel of the most recently aired cartoon .
schema_links:
[Cartoon.Production_code,Cartoon.Channel = TV_Channel.id,TV_Channel.series_name,TV_series.Original_air_date]
classification:
The question is "Find the [production code] and [channel] of the most recently aired [cartoon]." [production code] matches table = [Cartoon]. [channel] matches table = [TV_Channel]. [cartoon] matches table = [TV_series]. So, tables = [Cartoon, TV_Channel, TV_series] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 630
select production_code ,  channel from cartoon order by original_air_date desc limit 1
What is the produdction code and channel of the most recent cartoon ?
schema_links:
[Cartoon.Production_code, Cartoon.Channel, Cartoon.Original_air_date, Cartoon.Channel = TV_Channel.id]
classification:
The question is "What is the [production code] and [channel] of the most recent [cartoon]?" [production code] matches table = [Cartoon]. [channel] matches table = [TV_Channel]. [cartoon] matches table = [Cartoon]. So, tables = [Cartoon, TV_Channel] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 631
SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"
Find the package choice and series name of the TV channel that has high definition TV.
schema_links:
[TV_Channel.Package_Option, TV_series.series_name, TV_Channel.Hight_definition_TV, true]
classification:
The question is "Find the [package choice] and [series name] of the TV channel that has [high definition TV].". [package choice] matches table = [TV_Channel]. [series name] matches table = [TV_series]. tables = [TV_Channel, TV_series] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 632
SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"
What are the package options and the name of the series for the TV Channel that supports high definition TV?
schema_links:
[TV_Channel.Package_Option,TV_series.series_name,TV_Channel.Hight_definition_TV,true]
classification:
The question is "What are the [package options] and the name of the [series] for the [TV Channel] that supports high definition TV?". [package options] matches table = [TV_Channel]. [series] matches table = [TV_series]. [TV Channel] matches table = [TV_Channel]. So, tables = [TV_Channel, TV_series] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 633
SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
which countries' tv channels are playing some cartoon written by Todd Casey?
schema_links:
[TV_Channel.Country,Cartoon.Written_by,Cartoon.Channel = TV_Channel.id,Todd Casey]
classification:
The question is "which [countries'] [tv channels] are playing some [cartoon] written by Todd Casey?". [countries'] matches table = [TV_Channel]. [tv channels] matches table = [TV_Channel]. [cartoon] matches table = [Cartoon]. tables = [TV_Channel, Cartoon] are connected by table = [Cartoon]. So, tables = [TV_Channel, Cartoon] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 634
SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
What are the countries that have cartoons on TV that were written by Todd Casey?
schema_links:
[TV_Channel.Country, Cartoon.Channel = TV_Channel.id, Cartoon.Written_by, Todd Casey]
classification:
The question is "What are the [countries] that have [cartoons] on TV that were [written] by [Todd Casey]?". [countries] matches table = [TV_Channel]. [cartoons] matches table = [Cartoon]. tables = [TV_Channel, Cartoon] are connected by table = [Cartoon.Channel = TV_Channel.id]. So, tables = [TV_Channel, Cartoon] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 635
SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
which countries' tv channels are not playing any cartoon written by Todd Casey?
schema_links:
[TV_Channel.Country,TV_Channel.id = Cartoon.Channel,Cartoon.Written_by,'Todd Casey']
classification:
The question is "Which [countries'] tv channels are not playing any cartoon written by Todd Casey?". [countries'] matches table = [TV_Channel]. [cartoon] matches table = [Cartoon]. So, tables = [TV_Channel, Cartoon] are connected by table = [Cartoon]. Therefore, the number of tables = 2, which means the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 636
SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
What are the countries that are not playing cartoons written by Todd Casey?
schema_links:
[TV_Channel.Country,Cartoon.Written_by,Cartoon.Channel = TV_Channel.id,'Todd Casey']
classification:
The question is "What are the countries that are not playing cartoons written by Todd Casey?". The relevant tables are [TV_Channel] and [Cartoon]. The tables are connected by the foreign key [Cartoon.Channel = TV_Channel.id]. So, tables = [TV_Channel, Cartoon], and the number of tables >= 1. Therefore, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 637
SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?
schema_links:
[TV_series.series_name, TV_Channel.Country, Cartoon.Directed_by, Ben Jones, Michael Chang]
classification:
The question is "Find the [series name] and [country] of the [tv channel] that is playing some [cartoons] directed by [Ben Jones] and [Michael Chang]?". [series name] matches table = [TV_series]. [country] matches table = [TV_Channel]. [tv channel] matches table = [TV_Channel]. [cartoons] matches table = [Cartoon]. So, tables = [TV_series, TV_Channel, Cartoon] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 638
SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?
schema_links:
[TV_Channel.series_name, TV_Channel.Country, Cartoon.Directed_by, Ben Jones, Michael Chang]
classification:
The question is "What is the [series name] and [country] of all [TV channels] that are playing [cartoons] directed by [Ben Jones] and cartoons directed by [Michael Chang]?". [series name] matches table = [TV_Channel]. [country] matches table = [TV_Channel]. [TV channels] matches table = [TV_Channel]. [cartoons] matches table = [Cartoon]. [Ben Jones] matches column = [Cartoon.Directed_by]. [Michael Chang] matches column = [Cartoon.Directed_by]. So, tables = [TV_Channel, Cartoon] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 639
SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'
find the pixel aspect ratio and nation of the tv channels that do not use English.
schema_links:
[TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country, TV_Channel.Language != "English"]
Slicing error for the classification module
classification:
The given question is incomplete and does not provide enough information to determine the classification ("EASY" or "COMPLEX") based on the number of tables. Please provide the complete question or specify the missing information.

index is 640
SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'
What is the pixel aspect ratio and country of origin for all TV channels that do not use English?
schema_links:
[TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country, TV_Channel.*, TV_Channel.Language, 'English']
classification:
The question is "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?". [TV channels] matches table = [TV_Channel]. So, tables = [TV_Channel] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 641
SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2
find id of the tv channels that from the countries where have more than two tv channels.
schema_links:
[TV_Channel.id, TV_Channel.Country, 2]
classification:
The given question is incomplete as it doesn't provide the necessary information. However, assuming the question is "Find the id of the TV channels that are from countries with more than two TV channels", we can analyze it.

The question is "Find the id of the [TV channels] that [are from countries] with [more than two TV channels]." [TV channels] matches table = [TV_Channel]. [countries] matches table = [TV_Channel]. So, tables = [TV_Channel] which number of tables = 1. So, the SQL query can be classified as "EASY".

Label: "EASY"

index is 642
SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2
What are the ids of all tv channels that have more than 2 TV channels?
schema_links:
[TV_Channel.id, count(TV_series.id) > 2]
classification:
The question is "What are the ids of all [tv channels] that have more than 2 TV [channels]?". [tv channels] matches table = [TV_Channel]. [channels] matches table = [TV_series]. So, tables = [TV_Channel, TV_series] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 643
SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'
find the id of tv channels that do not play any cartoon directed by Ben Jones.
schema_links:
[TV_Channel.id, Cartoon.Directed_by, Ben Jones]
classification:
The question is "Find the id of [tv channels] that do not play any [cartoon] directed by Ben Jones.". [tv channels] matches table = [TV_Channel]. [cartoon] matches table = [Cartoon]. So, tables = [TV_Channel, Cartoon] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 644
SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'
What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?
schema_links:
[TV_Channel.id,Cartoon.Directed_by,'Ben Jones']
classification:
The question is "What are the ids of the [TV channels] that do not have any [cartoons] directed by Ben Jones?". [TV channels] matches table = [TV_Channel]. [cartoons] matches table = [Cartoon]. So, tables = [TV_Channel, Cartoon] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 645
SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')
find the package option of the tv channel that do not have any cartoon directed by Ben Jones.
schema_links:
[TV_Channel.Package_Option, TV_Channel.id = Cartoon.Channel, Cartoon.Directed_by, 'Ben Jones']
Slicing error for the classification module
classification:
The question is "Find the package option of the TV channel that do not have any cartoon directed by Ben Jones.". The question does not match any specific tables or columns provided in the schema. Therefore, it cannot be classified as either "EASY" or "COMPLEX" based on the number of tables.

index is 646
SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')
What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?
schema_links:
[TV_Channel.Package_Option,TV_Channel.*,Cartoon.Directed_by,'Ben Jones']
classification:
The question is "What are the [package options] of all [TV channels] that are not playing any [cartoons] directed by [Ben Jones]?". [package options] matches table = [TV_Channel]. [TV channels] matches table = [TV_Channel]. [cartoons] matches table = [Cartoon]. So, tables = [TV_Channel, Cartoon] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 647
SELECT count(*) FROM poker_player
How many poker players are there?
schema_links:
[COUNT(poker_player.Poker_Player_ID),poker_player.People_ID = people.People_ID]
classification:
The question is "How many [poker players] are there?". [poker players] matches table = [poker_player]. So, tables = [poker_player] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 648
SELECT count(*) FROM poker_player
Count the number of poker players.
schema_links:
[poker_player.*]
classification:
The question is "Count the number of [poker players]. [poker players] matches table = [poker_player]. So, tables = [poker_player] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 649
SELECT Earnings FROM poker_player ORDER BY Earnings DESC
List the earnings of poker players in descending order.
schema_links:
[poker_player.Earnings, poker_player.People_ID = people.People_ID]
classification:
The question is "List the earnings of [poker players] in descending order." [poker players] matches table = [poker_player]. So, tables = [poker_player] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 650
SELECT Earnings FROM poker_player ORDER BY Earnings DESC
What are the earnings of poker players, ordered descending by value?
schema_links:
[poker_player.Earnings, poker_player.People_ID = people.People_ID]
classification:
The question is "What are the [earnings] of [poker players], ordered descending by value?" [earnings] matches table = [poker_player]. [poker players] matches table = [people]. So, tables = [poker_player, people] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 651
SELECT Final_Table_Made ,  Best_Finish FROM poker_player
List the final tables made and the best finishes of poker players.
schema_links:
[poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.People_ID = people.People_ID]
Slicing error for the classification module
classification:
The given question does not have any references to the tables in the provided schema. Therefore, it is not possible to classify it as either "EASY" or "COMPLEX" based on the number of tables.

index is 652
SELECT Final_Table_Made ,  Best_Finish FROM poker_player
What are the final tables made and best finishes for all poker players?
schema_links:
[poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.People_ID = people.People_ID, poker_player.*]
Slicing error for the classification module
classification:
The given question does not involve any tables from the database schema provided. It appears to be unrelated to the schema, so we cannot classify it as either "EASY" or "COMPLEX" based on the number of tables.

index is 653
SELECT avg(Earnings) FROM poker_player
What is the average earnings of poker players?
schema_links:
[poker_player.Earnings]
classification:
The question is "What is the average earnings of [poker players]?". [poker players] matches table = [poker_player]. So, tables = [poker_player] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 654
SELECT avg(Earnings) FROM poker_player
Return the average earnings across all poker players.
schema_links:
[poker_player.Earnings, poker_player.People_ID = people.People_ID]
classification:
The question is "Return the average earnings across all poker players." The tables involved are [poker_player] and [people], connected by the foreign key [poker_player.People_ID = people.People_ID]. So, tables = [poker_player, people], which number of tables >= 1. Therefore, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 655
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
What is the money rank of the poker player with the highest earnings?
schema_links:
[poker_player.Money_Rank, poker_player.Earnings]
classification:
The question is "What is the money rank of the [poker player] with the highest [earnings]?" [poker player] matches table = [poker_player]. So, tables = [poker_player] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 656
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
Return the money rank of the player with the greatest earnings.
schema_links:
[poker_player.Money_Rank, poker_player.Earnings, poker_player.People_ID = people.People_ID]
classification:
The question is "Return the [money rank] of the player with the greatest [earnings]." [money rank] matches table = [poker_player]. [earnings] matches table = [poker_player]. So, tables = [poker_player] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 657
SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000
What is the maximum number of final tables made among poker players with earnings less than 200000?
schema_links:
[poker_player.Final_Table_Made,poker_player.Earnings,200000]
classification:
The provided question is incomplete. However, based on the given information, it seems to be related to the "poker_player" table. Since only one table is mentioned, the SQL query can be classified as "EASY."

Label: "EASY"

index is 658
SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000
Return the maximum final tables made across all poker players who have earnings below 200000.
schema_links:
[poker_player.Final_Table_Made, poker_player.Earnings, 200000]
Slicing error for the classification module
classification:
The given question does not directly relate to the provided schema. The provided schema does not include a table specifically for poker players or their earnings. Therefore, it is not possible to classify the SQL query as either "EASY" or "COMPLEX" based on the number of tables.

index is 659
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID
What are the names of poker players?
schema_links:
[people.Name, poker_player.People_ID = people.People_ID]
Slicing error for the classification module
classification:
The question is "What are the names of [poker players]?". [poker players] matches table = [poker_player]. However, the required tables are not present in the given schema. Therefore, the SQL query cannot be classified as either "EASY" or "COMPLEX" based on the number of tables.

index is 660
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID
Return the names of all the poker players.
schema_links:
[people.Name]
classification:
The question is "Return the names of all the [poker players]." [poker players] matches table = [poker_player]. So, tables = [poker_player] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 661
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000
What are the names of poker players whose earnings is higher than 300000?
schema_links:
[people.Name, poker_player.Earnings, poker_player.People_ID = people.People_ID, 300000]
classification:
The question is "What are the names of [poker players] whose [earnings] is higher than 300000?". [poker players] matches table = [poker_player]. [earnings] matches column = [poker_player.Earnings]. So, tables = [poker_player] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 662
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000
Give the names of poker players who have earnings above 300000.
schema_links:
[people.Name,poker_player.Earnings,poker_player.People_ID = people.People_ID,300000]
classification:
The question is "Give the names of [poker players] who have earnings above 300000.". [poker players] matches table = [poker_player]. So, tables = [poker_player] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 663
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made
List the names of poker players ordered by the final tables made in ascending order.
schema_links:
[people.Name, poker_player.Final_Table_Made, ascending order]
classification:
The question is "List the names of [poker players] ordered by the [final tables made] in [ascending order]." [poker players] matches table = [poker_player]. So, tables = [poker_player] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 664
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made
What are the names of poker players, ordered ascending by the number of final tables they have made?
schema_links:
[people.Name, poker_player.Final_Table_Made, poker_player.People_ID = people.People_ID]
classification:
The question is "What are the names of [poker players], ordered ascending by the number of [final tables] they have made?". [poker players] matches table = [poker_player]. So, tables = [poker_player] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 665
SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1
What is the birth date of the poker player with the lowest earnings?
schema_links:
[people.Birth_Date, poker_player.Earnings, poker_player.People_ID = people.People_ID]
classification:
The question is "What is the birth date of the [poker player] with the lowest [earnings]?" [poker player] matches table = [poker_player]. [earnings] matches table = [poker_player]. So, tables = [poker_player] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 666
SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1
Return the birth date of the poker player with the lowest earnings.
schema_links:
[people.Birth_Date, poker_player.Earnings, poker_player.People_ID = people.People_ID]
classification:
The question is "Return the birth date of the [poker player] with the lowest [earnings]." [poker player] matches table = [poker_player]. So, tables = [poker_player] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 667
SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1
What is the money rank of the tallest poker player?
schema_links:
[poker_player.Money_Rank, people.Height]
classification:
The question is "What is the [money rank] of the [tallest] [poker player]?". [money rank] matches column = [poker_player.Money_Rank]. [tallest] matches column = [people.Height]. So, columns = [poker_player.Money_Rank, people.Height] which number of tables = 2. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 668
SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1
Return the money rank of the poker player with the greatest height.
schema_links:
[poker_player.Money_Rank,poker_player.Poker_Player_ID,poker_player.People_ID = people.People_ID,people.Height]
classification:
The question is "Return the [money rank] of the [poker player] with the greatest [height]." [money rank] matches table = [poker_player]. [poker player] matches table = [people]. tables = [poker_player, people] are connected by table = [poker_player]. So, tables = [poker_player, people] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 669
SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200
What is the average earnings of poker players with height higher than 200?
schema_links:
[poker_player.Earnings,poker_player.People_ID = people.People_ID,people.Height,200]
Slicing error for the classification module
classification:
The given question is incomplete. Please provide the complete question so that I can assist you further.

index is 670
SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200
Give average earnings of poker players who are taller than 200.
schema_links:
[poker_player.Earnings,poker_player.People_ID = people.People_ID,people.Height,200]
classification:
The question is "Give average earnings of [poker players] who are taller than 200.". [poker players] matches table = [poker_player]. [poker_player] is connected to [people] table through [People_ID]. So, tables = [poker_player, people] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 671
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC
What are the names of poker players in descending order of earnings?
schema_links:
[people.Name, poker_player.Earnings, poker_player.People_ID = people.People_ID]
classification:
The question is "What are the names of [poker players] in descending order of [earnings]?". [poker players] matches table = [poker_player]. So, tables = [poker_player] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 672
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC
Return the names of poker players sorted by their earnings descending.
schema_links:
[people.Name, poker_player.Earnings]
classification:
The question is "Return the names of [poker players] sorted by their [earnings] descending." [poker players] matches table = [poker_player]. So, tables = [poker_player] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 673
SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality
What are different nationalities of people and the corresponding number of people from each nation?
schema_links:
[people.Nationality]
Slicing error for the classification module
classification:
The given question is incomplete and lacks the necessary information to determine the complexity based on the number of tables. Please provide more information or rephrase the question.

index is 674
SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality
How many people are there of each nationality?
schema_links:
[people.Nationality]
classification:
The question is "How many people are there of each nationality?" The information needed is present in the [people] table. So, tables = [people], which indicates that the SQL query can be classified as "EASY".
Label: "EASY"

index is 675
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
What is the most common nationality of people?
schema_links:
[people.Nationality, poker_player.People_ID = people.People_ID]
classification:
The question is "What is the most common nationality of [people]?". [people] matches table = [people]. So, tables = [people] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 676
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
Give the nationality that is most common across all people.
schema_links:
[people.Nationality]
classification:
The question is "Give the [nationality] that is most common across all [people]." [nationality] matches table = [people]. So, tables = [people] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 677
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2
What are the nationalities that are shared by at least two people?
schema_links:
[people.Nationality, poker_player.People_ID = people.People_ID]
classification:
The question is "What are the [nationalities] that are shared by at least two [people]?". [nationalities] matches table = [people]. [people] matches table = [people]. So, tables = [people] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 678
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2
Return the nationalities for which there are two or more people.
schema_links:
[people.Nationality, poker_player.People_ID = people.People_ID]
classification:
The question is "Return the [nationalities] for which there are [two or more people].". [nationalities] matches table = [people]. [people] matches table = [poker_player]. So, tables = [people, poker_player] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 679
SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC
List the names and birth dates of people in ascending alphabetical order of name.
schema_links:
[people.Name, people.Birth_Date, poker_player.People_ID = people.People_ID]
classification:
The question is "List the names and birth dates of [people] in ascending alphabetical order of name." [people] matches table = [people]. So, tables = [people] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 680
SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC
What are the names and birth dates of people, ordered by their names in alphabetical order?
schema_links:
[people.Name, people.Birth_Date]
classification:
The question is "What are the names and birth dates of [people], ordered by their names in alphabetical order?". [people] matches table = [people]. So, tables = [people] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 681
SELECT Name FROM people WHERE Nationality != "Russia"
Show names of people whose nationality is not "Russia".
schema_links:
[people.Name, people.Nationality, 'Russia']
classification:
The question is "Show names of [people] whose [nationality] is not "Russia"." [people] matches table = [people]. So, tables = [people] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 682
SELECT Name FROM people WHERE Nationality != "Russia"
What are the names of people who are not from Russia?
schema_links:
[people.Name,people.Nationality,'Russia']
classification:
The question is "What are the names of [people] who are not from Russia?". [people] matches table = [people]. So, tables = [people] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 683
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
List the names of people that are not poker players.
schema_links:
[people.Name,poker_player.Poker_Player_ID is null]
classification:
The question is "List the names of [people] that are not [poker players]." [people] matches table = [people]. [poker players] matches table = [poker_player]. So, tables = [people, poker_player] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 684
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
What are the names of people who do not play poker?
schema_links:
[people.Name,poker_player.People_ID = people.People_ID]
classification:
The question is "What are the names of [people] who do not play [poker]?". [people] matches table = [people]. [poker] matches table = [poker_player]. So, tables = [people, poker_player] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 685
SELECT count(DISTINCT Nationality) FROM people
How many distinct nationalities are there?
schema_links:
[people.Nationality]
classification:
The question is "How many distinct [nationalities] are there?". [nationalities] matches table = [people]. So, tables = [people] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 686
SELECT count(DISTINCT Nationality) FROM people
Count the number of different nationalities.
schema_links:
[people.Nationality]
classification:
The question is "Count the number of different [nationalities]." [nationalities] matches table = [people]. So, tables = [people] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 687
SELECT count(*) FROM area_code_state
How many states are there?
schema_links:
[AREA_CODE_STATE.state]
classification:
The question is "How many [states] are there?". [states] matches table = [AREA_CODE_STATE]. So, tables = [AREA_CODE_STATE] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 688
SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC
List the contestant numbers and names, ordered by contestant name descending.
schema_links:
[CONTESTANTS.contestant_number, CONTESTANTS.contestant_name]
classification:
The question is "List the [contestant numbers] and [names], ordered by [contestant name] descending." [contestant numbers] matches table = [CONTESTANTS]. [names] matches table = [CONTESTANTS]. [contestant name] matches table = [CONTESTANTS]. So, tables = [CONTESTANTS] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 689
SELECT vote_id ,  phone_number ,  state FROM votes
List the vote ids, phone numbers and states of all votes.
schema_links:
[VOTES.vote_id, VOTES.phone_number, VOTES.state]
classification:
The question is "List the [vote ids], [phone numbers] and [states] of all [votes].". [votes] matches table = [VOTES]. So, tables = [VOTES] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 690
SELECT max(area_code) ,  min(area_code) FROM area_code_state
What are the maximum and minimum values of area codes?
schema_links:
[AREA_CODE_STATE.area_code]
Slicing error for the classification module
classification:
The given question is incomplete and lacks the necessary information to determine the complexity based on the number of tables. Please provide more details or complete the question.

index is 691
SELECT max(created) FROM votes WHERE state  =  'CA'
What is last date created of votes from the state 'CA'?
schema_links:
[VOTES.created,VOTES.state,AREA_CODE_STATE.state,'CA']
classification:
The question is "What is the last date [created] of votes from the state 'CA'?" [created] matches table = [VOTES]. [state] matches table = [AREA_CODE_STATE]. So, tables = [VOTES, AREA_CODE_STATE] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 692
SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'
What are the names of the contestants whose names are not 'Jessie Alloway'
schema_links:
[CONTESTANTS.contestant_name,CONTESTANTS.contestant_name, 'Jessie Alloway']
classification:
The question is "What are the names of the [contestants] whose names are not 'Jessie Alloway'." [contestants] matches table = [CONTESTANTS]. So, tables = [CONTESTANTS] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 693
SELECT DISTINCT state ,  created FROM votes
What are the distinct states and create time of all votes?
schema_links:
[VOTES.state, VOTES.created]
classification:
The question is "What are the distinct [states] and [create time] of all [votes]?". [states] matches table = [VOTES]. [create time] matches table = [VOTES]. [votes] matches table = [VOTES]. So, tables = [VOTES] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 694
SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2
What are the contestant numbers and names of the contestants who had at least two votes?
schema_links:
[CONTESTANTS.contestant_number, CONTESTANTS.contestant_name, VOTES.contestant_number, 2]
classification:
The question is "What are the [contestant numbers] and [names] of the contestants who had at least [two votes]?". [contestant numbers] and [names] match table = [CONTESTANTS]. [votes] matches table = [VOTES]. So, tables = [CONTESTANTS, VOTES] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 695
SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1
Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?
schema_links:
[CONTESTANTS.contestant_number, CONTESTANTS.contestant_name, VOTES.vote_id]
classification:
The question is "Of all the [contestants] who got voted, what is the contestant number and name of the contestant who got [least votes]?". [contestants] matches table = [CONTESTANTS]. So, tables = [CONTESTANTS] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 696
SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'
What are the number of votes from state 'NY' or 'CA'?
schema_links:
[COUNT(VOTES.vote_id),VOTES.state,AREA_CODE_STATE.state,'NY','CA']
classification:
The question is "What are the number of votes from state 'NY' or 'CA'?" The required information can be obtained from the tables [VOTES] and [AREA_CODE_STATE]. So, the tables involved are [VOTES, AREA_CODE_STATE], which is a minimum of 2 tables. Therefore, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 697
SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )
How many contestants did not get voted?
schema_links:
[CONTESTANTS.contestant_number,VOTES.contestant_number]
classification:
The question is "How many [contestants] did not get [voted]?". [contestants] matches table = [CONTESTANTS]. [voted] matches table = [VOTES]. So, tables = [CONTESTANTS, VOTES] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 698
SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1
What is the area code in which the most voters voted?
schema_links:
[AREA_CODE_STATE.area_code, VOTES.*]
classification:
The question is "What is the [area code] in which the most [voters] voted?" [area code] matches table = [AREA_CODE_STATE]. [voters] matches table = [VOTES]. So, tables = [AREA_CODE_STATE, VOTES] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 699
SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'
What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?
schema_links:
[VOTES.created, VOTES.state, VOTES.phone_number, CONTESTANTS.contestant_name, VOTES.contestant_number = CONTESTANTS.contestant_number, 'Tabatha Gehling']
classification:
The question is "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?" [create dates, states, and phone numbers of the votes] match table = [VOTES]. [contestant named 'Tabatha Gehling'] matches table = [CONTESTANTS]. So, tables = [VOTES, CONTESTANTS] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 700
SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'
List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.
schema_links:
[AREA_CODE_STATE.area_code, CONTESTANTS.contestant_name, VOTES.state, VOTES.contestant_number, 'Tabatha Gehling', 'Kelly Clauss']
classification:
The question is "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.". The relevant tables are [AREA_CODE_STATE, CONTESTANTS, VOTES]. So, tables = [AREA_CODE_STATE, CONTESTANTS, VOTES] which number of tables >= 1. Therefore, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 701
select contestant_name from contestants where contestant_name like "%al%"
Return the names of the contestants whose names contain the substring 'Al' .
schema_links:
[CONTESTANTS.contestant_name,'Al']
classification:
The question is "Return the names of the [contestants] whose names contain the substring 'Al'.". [contestants] matches table = [CONTESTANTS]. So, tables = [CONTESTANTS] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 702
SELECT Name FROM country WHERE IndepYear  >  1950
What are the names of all the countries that became independent after 1950?
schema_links:
[country.Name, country.IndepYear, 1950]
classification:
The question is "What are the names of all the countries that became independent after 1950?" [countries] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 703
SELECT Name FROM country WHERE IndepYear  >  1950
Give the names of the nations that were founded after 1950.
schema_links:
[country.Name, country.IndepYear, 1950]
classification:
The question is "Give the names of the nations that were founded after 1950." [nations] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 704
SELECT count(*) FROM country WHERE GovernmentForm  =  "Republic"
How many countries have a republic as their form of government?
schema_links:
[country.*, country.GovernmentForm, 'Republic']
classification:
The question is "How many [countries] have a [republic] as their form of government?". [countries] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 705
SELECT count(*) FROM country WHERE GovernmentForm  =  "Republic"
How many countries have governments that are republics?
schema_links:
[country.*, country.GovernmentForm, 'Republic']
classification:
The question is "How many [countries] have governments that are [republics]?". [countries] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 706
SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"
What is the total surface area of the countries in the Caribbean region?
schema_links:
[country.SurfaceArea, country.Region, "Caribbean"]
classification:
The question is "What is the total surface area of the countries in the [Caribbean] region?". [countries] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 707
SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"
How much surface area do the countires in the Carribean cover together?
schema_links:
[country.SurfaceArea, country.Continent, 'Caribbean']
classification:
The question is "How much [surface area] do the [countries] in the [Caribbean] cover together?". [surface area] matches table = [country]. [countries] matches table = [country]. [Caribbean] matches a condition but does not match any specific table. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 708
SELECT Continent FROM country WHERE Name  =  "Anguilla"
Which continent is Anguilla in?
schema_links:
[country.Continent,city.CountryCode = country.Code,'Anguilla']
classification:
The question is "Which [continent] is [Anguilla] in?" [continent] matches table = [country]. [Anguilla] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 709
SELECT Continent FROM country WHERE Name  =  "Anguilla"
What is the continent name which Anguilla belongs to?
schema_links:
[country.Continent,city.CountryCode = country.Code,'Anguilla']
Slicing error for the classification module
classification:
The question is "What is the continent name which [Anguilla] belongs to?" [Anguilla] doesn't match any table in the given schema. So, the SQL query cannot be classified based on the number of tables.

index is 710
SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"
Which region is the city Kabul located in?
schema_links:
[country.Region, city.Name, city.CountryCode = country.Code, 'Kabul']
classification:
The question is "Which [region] is the city [Kabul] located in?". [region] matches table = [country]. [Kabul] matches table = [city]. So, tables = [country, city] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 711
SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"
What region is Kabul in?
schema_links:
[country.Region, city.Name, city.CountryCode = country.Code, 'Kabul']
classification:
The question is "What region is [Kabul] in?". [Kabul] matches table = [city]. [city] is connected to table = [country] through column [city.CountryCode = country.Code]. So, tables = [city, country] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 712
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1
Which language is the most popular in Aruba?
schema_links:
[countrylanguage.Language, city.Name, city.CountryCode = country.Code, countrylanguage.CountryCode = country.Code, Aruba]
classification:
The question is "Which [language] is the most popular in [Aruba]?". [language] matches table = [countrylanguage]. [Aruba] matches table = [city] and [country]. So, tables = [countrylanguage, city, country] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 713
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1
What language is predominantly spoken in Aruba?
schema_links:
[countrylanguage.Language, countrylanguage.Percentage, city.Name, city.CountryCode = country.Code, countrylanguage.CountryCode = country.Code, 'Aruba']
classification:
The question is "What language is predominantly spoken in [Aruba]?". [Aruba] matches table = [city]. [language] matches table = [countrylanguage]. tables = [city, countrylanguage] are connected by table = [country]. So, tables = [city, countrylanguage, country] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 714
SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"
What are the population and life expectancies in Brazil?
schema_links:
[country.Population,country.LifeExpectancy,city.CountryCode = country.Code,Brazil]
classification:
The question is "What are the [population] and [life expectancies] in [Brazil]?". [population] matches table = [country]. [life expectancies] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 715
SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"
Give me Brazil’s population and life expectancies.
schema_links:
[country.Population,country.LifeExpectancy,city.CountryCode = country.Code,Brazil]
classification:
The question is "Give me Brazil’s [population] and [life expectancies].". [population, life expectancies] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 716
SELECT Population ,  Region FROM country WHERE Name  =  "Angola"
What are the region and population of Angola?
schema_links:
[country.Region,country.Population,country.Code = city.CountryCode,'Angola']
classification:
The question is "What are the [region] and [population] of [Angola]?". [region] matches table = [country]. [population] matches table = [country]. [Angola] matches table = [country] using column = [Code]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 717
SELECT Population ,  Region FROM country WHERE Name  =  "Angola"
What region does Angola belong to and what is its population?
schema_links:
[country.Region,country.Population,country.Code = city.CountryCode,'Angola']
classification:
The question is "What [region] does Angola belong to and what is its [population]?". [region] matches table = [country]. [population] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 718
SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"
What is the average expected life expectancy for countries in the region of Central Africa?
schema_links:
[country.LifeExpectancy,country.Region,'Central Africa']
classification:
The question is "What is the average expected life expectancy for countries in the region of Central Africa?". The question does not involve any specific tables from the given schema. Instead, it focuses on a specific region and a specific attribute from the "country" table. Since no tables are directly mentioned, the query can be classified as "EASY" as it does not require any table joins or complex SQL operations.
Label: "EASY"

index is 719
SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"
How long is the people’s average life expectancy in Central Africa?
schema_links:
[country.LifeExpectancy, country.Continent, country.Region, 'Central Africa']
Slicing error for the classification module
classification:
The given question is incomplete and lacks a clear SQL query. However, based on the provided schema links, we can classify it as "COMPLEX" because it involves multiple tables (country) and the condition includes specific criteria (Central Africa) that requires joining and aggregating data.

index is 720
SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1
What is the name of country that has the shortest life expectancy in Asia?
schema_links:
[country.Name, country.LifeExpectancy, country.Continent, city.CountryCode = country.Code, countrylanguage.CountryCode = country.Code, Asia]
classification:
The question is "What is the name of [country] that has the shortest [life expectancy] in [Asia]?". [country] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 721
SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1
Give the name of the country in Asia with the lowest life expectancy.
schema_links:
[country.Name,country.Continent,country.LifeExpectancy,Asia]
classification:
The question is "Give the name of the [country] in Asia with the lowest life expectancy.". [country] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 722
SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"
What is the total population and maximum GNP in Asia?
schema_links:
[country.Population, country.GNP, country.Continent, country.Code = city.CountryCode, country.Code = countrylanguage.CountryCode, Asia]
classification:
The question is "What is the total [population] and maximum [GNP] in [Asia]?". [population] matches table = [country]. [GNP] matches table = [country]. [Asia] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 723
SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"
How many people live in Asia, and what is the largest GNP among them?
schema_links:
[country.Population, country.Continent, country.GNP, country.Code = city.CountryCode, country.Code = countrylanguage.CountryCode, 'Asia']
classification:
The question is "How many people live in [Asia], and what is the largest [GNP] among them?". [Asia] matches table = [country]. [GNP] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 724
SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"
What is the average life expectancy in African countries that are republics?
schema_links:
[country.LifeExpectancy, country.Continent, country.GovernmentForm, African, republics]
classification:
The question is "What is the average life expectancy in African countries that are republics?". [countries] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 725
SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"
Give the average life expectancy for countries in Africa which are republics?
schema_links:
[country.LifeExpectancy, country.Continent, country.GovernmentForm, Africa, republic]
Slicing error for the classification module
classification:
The given question is incomplete. However, based on the available information, we can identify the relevant tables and columns to determine the complexity.

The question is "Give the average life expectancy for countries in Africa which are [republics]?". The relevant tables are [country] and [countrylanguage]. We need to join these tables on the [CountryCode] column. The complexity depends on whether the [GovernmentForm] column in the [country] table contains the information about the country's status as a republic.

If the [GovernmentForm] column contains the necessary information, the query can be classified as "EASY" because only one table is involved.

If the [GovernmentForm] column does not contain the necessary information and we need to join additional tables or use more complex conditions, the query can be classified as "COMPLEX."

Please provide more information or complete the question to accurately determine the complexity.

index is 726
SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"
What is the total surface area of the continents Asia and Europe?
schema_links:
[country.SurfaceArea, country.Continent, country.Code = city.CountryCode, country.Code = countrylanguage.CountryCode, Asia, Europe]
classification:
The question is "What is the total surface area of the continents [Asia] and [Europe]?". [Asia] and [Europe] match table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 727
SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"
Give the total surface area covered by countries in Asia or Europe.
schema_links:
[country.SurfaceArea,country.Continent,'Asia','Europe']
classification:
The question is "Give the total surface area covered by countries in [Asia] or [Europe]." [countries] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 728
SELECT sum(Population) FROM city WHERE District  =  "Gelderland"
How many people live in Gelderland district?
schema_links:
[city.Population,city.District,city.CountryCode = country.Code,'Gelderland']
classification:
The question is "How many people live in [Gelderland] district?". [Gelderland] is related to the [district] column in the [city] table. So, the table involved is [city]. Since the number of tables is 1, the SQL query can be classified as "EASY".
Label: "EASY"

index is 729
SELECT sum(Population) FROM city WHERE District  =  "Gelderland"
What is the total population of Gelderland district?
schema_links:
[country.Population,city.Population,city.CountryCode = country.Code,'Gelderland']
classification:
The question is "What is the total population of [Gelderland] district?". [Gelderland] matches table = [city]. So, tables = [city] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 730
SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"
What is the average GNP and total population in all nations whose government is US territory?
schema_links:
[country.GNP,country.Population,country.GovernmentForm,city.CountryCode = country.Code,'US territory']
Slicing error for the classification module
classification:
The given question is incomplete. It seems like a part of the question is missing after "What is the average GNP and total population in all nations whose government is US territory?" Could you please provide the complete question or clarify the missing part?

index is 731
SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"
Give the mean GNP and total population of nations which are considered US territory.
schema_links:
[country.GNP,country.Population,country.Continent,country.Code = city.CountryCode,country.Code = countrylanguage.CountryCode,US]
classification:
The question is "Give the mean GNP and total population of nations which are considered US territory.". It involves multiple tables: [country, city, countrylanguage]. So, the number of tables involved is greater than 1. Hence, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 732
SELECT count(DISTINCT LANGUAGE) FROM countrylanguage
How many unique languages are spoken in the world?
schema_links:
[countrylanguage.Language, countrylanguage.CountryCode = country.Code]
classification:
The question is "How many unique [languages] are spoken in the world?". [languages] matches table = [countrylanguage]. So, tables = [countrylanguage] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 733
SELECT count(DISTINCT LANGUAGE) FROM countrylanguage
What is the number of distinct languages used around the world?
schema_links:
[countrylanguage.Language, country.Code = countrylanguage.CountryCode]
classification:
The question is "What is the number of distinct languages used around the world?". [languages] matches table = [countrylanguage]. So, tables = [countrylanguage] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 734
SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa"
How many type of governments are in Africa?
schema_links:
[country.GovernmentForm, country.Continent, 'Africa']
Slicing error for the classification module
classification:
The question is "How many type of governments are in [Africa]?". [Africa] does not match any specific table in the given schema. Therefore, we cannot determine the number of tables involved in the query. The schema_links provided do not provide sufficient information to classify the query as either "EASY" or "COMPLEX".

index is 735
SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa"
How many different forms of governments are there in Africa?
schema_links:
[country.GovernmentForm,country.Continent,Africa]
classification:
The question is "How many different forms of governments are there in [Africa]?". [Africa] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 736
SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"
What is the total number of languages used in Aruba?
schema_links:
[COUNT(DISTINCT countrylanguage.Language),city.CountryCode = country.Code,'Aruba']
Slicing error for the classification module
classification:
The question is "What is the total number of languages used in [Aruba]?". [Aruba] doesn't match any tables in the given schema. Hence, it is not possible to determine the number of tables involved in this query. Please provide the relevant schema information or clarify the question further.

index is 737
SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"
How many languages are spoken in Aruba?
schema_links:
[countrylanguage.Language,country.Code = countrylanguage.CountryCode,'Aruba']
classification:
The question is "How many languages are spoken in [Aruba]?" [Aruba] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 738
SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"
How many official languages does Afghanistan have?
schema_links:
[COUNT(countrylanguage.Language), country.Name, country.Code = city.CountryCode, country.Code = countrylanguage.CountryCode, 'Afghanistan']
classification:
The question is "How many official languages does [Afghanistan] have?" [Afghanistan] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 739
SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"
How many official languages are spoken in Afghanistan?
schema_links:
[COUNT(countrylanguage.Language),countrylanguage.CountryCode = country.Code,country.Code]
classification:
The question is "How many official languages are spoken in Afghanistan?". [official languages] matches table = [countrylanguage]. So, tables = [countrylanguage] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 740
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
What is name of the country that speaks the largest number of languages?
schema_links:
[country.Name, country.Code = countrylanguage.CountryCode, countrylanguage.Language]
classification:
The question is "What is the name of the [country] that speaks the largest number of [languages]?". [country] matches table = [country]. [languages] matches table = [countrylanguage]. So, tables = [country, countrylanguage] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 741
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
Give the name of the nation that uses the greatest amount of languages.
schema_links:
[country.Name, country.Code = countrylanguage.CountryCode, countrylanguage.*]
classification:
The question is "Give the name of the [nation] that uses the greatest amount of [languages].". [nation] matches table = [country]. [languages] matches table = [countrylanguage]. So, tables = [country, countrylanguage] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 742
SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1
Which continent has the most diverse languages?
schema_links:
[country.Continent, country.Code = countrylanguage.CountryCode, countrylanguage.Language]
classification:
The question is "Which [continent] has the most diverse [languages]?". [continent] matches table = [country]. [languages] matches table = [countrylanguage]. So, tables = [country, countrylanguage] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 743
SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1
Which continent speaks the most languages?
schema_links:
[countrylanguage.Continent, countrylanguage.Language, country.Code = countrylanguage.CountryCode]
classification:
The question is "Which [continent] speaks the most [languages]?". [continent] matches table = [countrylanguage]. [languages] matches table = [countrylanguage]. So, tables = [countrylanguage] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 744
SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
How many countries speak both English and Dutch?
schema_links:
[country.*,country.Code = countrylanguage.CountryCode,countrylanguage.Language,English,Dutch]
classification:
The question is "How many [countries] speak both English and Dutch?". [countries] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 745
SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
What is the number of nations that use English and Dutch?
schema_links:
[COUNT(country.Code), country.Code = countrylanguage.CountryCode, countrylanguage.Language, 'English', 'Dutch']
classification:
The question is "What is the number of nations that use [English] and [Dutch]?" [nations] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 746
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
What are the names of nations speak both English and French?
schema_links:
[country.Name, country.Code = countrylanguage.CountryCode, countrylanguage.Language, 'English', 'French']
classification:
The question is "What are the names of nations that speak both [English] and [French]?". [nations] matches table = [country]. [English] matches table = [countrylanguage]. [French] matches table = [countrylanguage]. tables = [country, countrylanguage] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 747
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
Give the names of nations that speak both English and French.
schema_links:
[country.Name,country.Code = countrylanguage.CountryCode,countrylanguage.Language,English,French]
classification:
The question is "Give the names of [nations] that speak both English and French.". [nations] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 748
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
What are the names of nations where both English and French are official languages?
schema_links:
[country.Name, country.Code = countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, English, French, 'T']
classification:
The question is "What are the names of nations where both English and French are official languages?". [nations] matches table = [country]. [English, French] match table = [countrylanguage]. So, tables = [country, countrylanguage] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 749
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
Give the names of countries with English and French as official languages.
schema_links:
[country.Name, countrylanguage.Language, countrylanguage.IsOfficial, country.Code = city.CountryCode, country.Code = countrylanguage.CountryCode, "English", "French", "T"]
classification:
The question is "Give the names of countries with [English] and [French] as official languages." [countries] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 750
SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"
What is the number of distinct continents where Chinese is spoken?
schema_links:
[COUNT(DISTINCT country.Continent),countrylanguage.Language,country.Code = countrylanguage.CountryCode,'Chinese']
classification:
The question is "What is the number of distinct continents where [Chinese] is spoken?". [Chinese] matches table = [countrylanguage]. So, tables = [countrylanguage] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 751
SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"
How many continents speak Chinese?
schema_links:
[country.Continent,country.Code = countrylanguage.CountryCode,'Chinese']
classification:
The question is "How many continents speak [Chinese]?". [Chinese] matches table = [countrylanguage]. So, tables = [countrylanguage] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 752
SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
What are the regions that use English or Dutch?
schema_links:
[country.Region,country.Code = countrylanguage.CountryCode,countrylanguage.Language,English, Dutch]
classification:
The question is "What are the [regions] that use [English] or [Dutch]?". [regions] matches table = [country]. [English] and [Dutch] match table = [countrylanguage]. So, tables = [country, countrylanguage] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 753
SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
Which regions speak Dutch or English?
schema_links:
[country.Region, country.Code = city.CountryCode, country.Code = countrylanguage.CountryCode, countrylanguage.Language, 'Dutch', 'English']
classification:
The question is "Which [regions] speak [Dutch] or [English]?". [regions] matches table = [country]. [Dutch] matches table = [countrylanguage]. [English] matches table = [countrylanguage]. So, tables = [country, countrylanguage] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 754
select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "english" and isofficial  =  "t" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "dutch" and isofficial  =  "t"
What are the countries where either English or Dutch is the official language ?
schema_links:
[country.Name, country.Code = countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, English, Dutch, true]
classification:
The question is "What are the countries where either [English] or [Dutch] is the official language?". [countries] matches table = [country]. [English, Dutch] matches table = [countrylanguage]. So, tables = [country, countrylanguage] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 755
SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND IsOfficial  =  "T" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch" AND IsOfficial  =  "T"
Which countries have either English or Dutch as an official language?
schema_links:
[country.Name, country.Code = city.CountryCode, country.Code = countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, English, Dutch, Yes]
classification:
The question is "Which [countries] have either [English] or [Dutch] as an official language?". [countries] matches table = [country]. [English, Dutch] matches table = [countrylanguage]. tables = [country, countrylanguage] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 756
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1
Which language is the most popular on the Asian continent?
schema_links:
[countrylanguage.Language, countrylanguage.Percentage, country.Code = countrylanguage.CountryCode, country.Continent, 'Asia']
classification:
The question is "Which language is the most popular on the Asian continent?" The relevant tables are [countrylanguage] and [country]. Both tables are connected through the foreign key [country.Code = countrylanguage.CountryCode]. So, tables = [country, countrylanguage] which number of tables >= 1. Therefore, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 757
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1
What is the language that is used by the largest number of Asian nations?
schema_links:
[countrylanguage.Language, country.Continent, country.Code = city.CountryCode, country.Code = countrylanguage.CountryCode, Asia]
classification:
The question is "What is the [language] that is used by the largest number of [Asian] nations?". [language] matches table = [countrylanguage]. [Asian] matches table = [country]. So, tables = [countrylanguage, country] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 758
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1
Which languages are spoken by only one country in republic governments?
schema_links:
[countrylanguage.Language, countrylanguage.CountryCode, country.Code, country.GovernmentForm, "republic"]
Slicing error for the classification module
classification:
The given question is incomplete. It appears to be missing the closing quotation mark. Could you please provide the complete question?

index is 759
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1
What languages are only used by a single country with a republic government?
schema_links:
[countrylanguage.Language,countrylanguage.CountryCode,country.GovernmentForm,'Republic']
classification:
The question is "What languages are only used by a single country with a [republic] government?". [languages] matches table = [countrylanguage]. [single country] matches table = [country]. So, tables = [countrylanguage, country] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 760
SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1
Find the city with the largest population that uses English.
schema_links:
[city.Population, countrylanguage.Language, city.CountryCode = country.Code, countrylanguage.CountryCode = country.Code, English]
classification:
The question is "Find the city with the largest population that uses [English]." [city] matches table = [city]. [English] matches table = [countrylanguage]. [city, countrylanguage] are connected by table = [country]. So, tables = [city, country, countrylanguage] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 761
SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1
What is the most populace city that speaks English?
schema_links:
[city.Name, countrylanguage.Language, city.CountryCode = country.Code, countrylanguage.CountryCode = country.Code, 'English']
classification:
The question is "What is the most populous city that speaks [English]?". [English] matches table = [countrylanguage]. [city] matches table = [city]. tables = [countrylanguage, city] are connected by [city.CountryCode = country.Code, countrylanguage.CountryCode = country.Code]. So, tables = [countrylanguage, city] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 762
SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1
Find the name, population and expected life length of asian country with the largest area?
schema_links:
[country.Name, country.Population, country.LifeExpectancy, country.SurfaceArea, city.CountryCode = country.Code, countrylanguage.CountryCode = country.Code, Asian]
classification:
The question is "Find the name, population, and expected life length of [Asian country] with the largest area?". [Asian country] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 763
SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1
What are the name, population, and life expectancy of the largest Asian country by land?
schema_links:
[country.Name, country.Population, country.LifeExpectancy, country.Continent = Asia, country.SurfaceArea = land]
classification:
The question is "What are the name, population, and life expectancy of the largest [Asian] country by [land]?". [Asian] matches table = [country]. [land] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 764
SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
What is average life expectancy in the countries where English is not the official language?
schema_links:
[country.LifeExpectancy, country.Code = countrylanguage.CountryCode, countrylanguage.Language = "English", countrylanguage.IsOfficial = "No"]
classification:
The question is "What is average life expectancy in the countries where English is not the official language?". We need information about [countries] and [countrylanguage]. [countries] matches table = [country]. [countrylanguage] matches table = [countrylanguage]. So, tables = [country, countrylanguage] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 765
SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
Give the mean life expectancy of countries in which English is not the official language.
schema_links:
[country.LifeExpectancy, country.Code = countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, English, not official]
Slicing error for the classification module
classification:
The given question is incomplete and lacks clarity in specifying the required information. Could you please provide more details or clarify the query?

index is 766
SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")
What is the total number of people living in the nations that do not use English?
schema_links:
[country.Population, country.Code = countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, English, No]
classification:
The question is "What is the total number of people living in the nations that do not use [English]?". [nations] matches table = [country]. [English] matches table = [countrylanguage]. So, tables = [country, countrylanguage] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 767
SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")
How many people live in countries that do not speak English?
schema_links:
[country.Population, country.Code = countrylanguage.CountryCode, countrylanguage.Language, 'English']
classification:
The question is "How many people live in countries that do not speak [English]?". [countries] matches table = [country]. [English] matches table = [countrylanguage]. So, tables = [country, countrylanguage] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 768
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"
What is the official language spoken in the country whose head of state is Beatrix?
schema_links:
[countrylanguage.Language,countrylanguage.CountryCode = country.Code,country.HeadOfState,'Beatrix']
classification:
The question is "What is the official language spoken in the [country] whose head of state is [Beatrix]?". [country] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 769
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"
What is the official language used in the country the name of whose head of state is Beatrix.
schema_links:
[countrylanguage.Language,country.HeadOfState,countrylanguage.CountryCode = country.Code,'Beatrix']
classification:
The question is "What is the official language used in the country the name of whose head of state is [Beatrix]." [country, head of state] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 770
SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"
What is the total number of unique official languages spoken in the countries that are founded before 1930?
schema_links:
[COUNT(DISTINCT countrylanguage.Language), country.IndepYear, country.Code = city.CountryCode, country.Code = countrylanguage.CountryCode, 1930]
classification:
The question is "What is the total number of unique official languages spoken in the countries that are founded before 1930?". The relevant tables are [country] and [countrylanguage]. So, tables = [country, countrylanguage] which number of tables >= 1. The SQL query involves multiple joins and the DISTINCT keyword, so it can be classified as "COMPLEX".
Label: "COMPLEX"

index is 771
SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"
For the countries founded before 1930, what is the total number of distinct official languages?
schema_links:
[country.Code, country.IndepYear, COUNT(DISTINCT countrylanguage.Language), countrylanguage.CountryCode]
classification:
The question is "For the countries founded before 1930, what is the total number of distinct official languages?". The relevant tables for this query are [country, countrylanguage]. So, the number of tables involved is 2. Therefore, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 772
SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")
What are the countries that have greater surface area than any country in Europe?
schema_links:
[country.Name,country.SurfaceArea,city.CountryCode = country.Code,Europe]
classification:
The question is "What are the countries that have greater surface area than any country in Europe?" [countries] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 773
SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")
Which countries have greater area than that of any country in Europe?
schema_links:
[country.Name,country.SurfaceArea,Europe]
classification:
The question is "Which [countries] have greater area than that of any country in [Europe]?". [countries] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 774
SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  "Asia")
What are the African countries that have a  population less than any country in Asia?
schema_links:
[country.Name, country.Population, country.Continent, country.Code = city.CountryCode, countrylanguage.CountryCode = country.Code, Africa, Asia]
classification:
The question is "What are the [African countries] that have a population less than any country in [Asia]?". [African countries] matches table = [country]. [Asia] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 775
SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  "Asia")
Which African countries have a smaller population than that of any country in Asia?
schema_links:
[country.Name, country.Population, country.Continent, city.CountryCode = country.Code, countrylanguage.CountryCode = country.Code, Africa, Asia]
classification:
The question is "Which [African countries] have a smaller population than that of any country in [Asia]?". [African countries] matches table = [country]. [Asia] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 776
SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  "Africa")
Which Asian countries have a population that is larger than any country in Africa?
schema_links:
[country.Name, country.Population, country.Continent, city.CountryCode = country.Code, countrylanguage.CountryCode = country.Code, 'Asia', 'Africa']
Slicing error for the classification module
classification:
The given question is incomplete. It seems to be asking about a comparison between Asian countries and African countries based on population, but the specific criteria for the comparison are missing. Without the specific criteria, it is difficult to determine the complexity level of the SQL query. Please provide more details or complete the question for a proper classification.

index is 777
SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  "Africa")
What are the Asian countries which have a population larger than that of any country in Africa?
schema_links:
[country.Name, country.Population, country.Continent, country.Code = city.CountryCode, country.Code = countrylanguage.CountryCode, Asia, Africa]
classification:
The given question is: "What are the Asian countries which have a population larger than that of any country in Africa?"

In this case, we can see that the required information can be obtained by joining multiple tables and applying aggregate functions. The tables involved are [country, city, countrylanguage].

Since the question involves multiple tables and requires comparison and aggregation, the SQL query can be classified as "COMPLEX".

Label: "COMPLEX"

index is 778
SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
What are the country codes for countries that do not speak English?
schema_links:
[country.Code,countrylanguage.Language,'English']
classification:
The question is "What are the country codes for countries that do not speak [English]?". [countries] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 779
SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
Return the country codes for countries that do not speak English.
schema_links:
[country.Code, countrylanguage.Language, country.Code = countrylanguage.CountryCode, English]
classification:
The question is "Return the country codes for countries that do not speak [English]." [countries] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 780
SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"
What are the country codes of countries where people use languages other than English?
schema_links:
[country.Code,countrylanguage.Language,country.Code = countrylanguage.CountryCode,'English']
classification:
The question is "What are the country codes of countries where people use languages other than English?". [countries] matches table = [country]. [languages] matches table = [countrylanguage]. So, tables = [country, countrylanguage] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 781
SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"
Give the country codes for countries in which people speak langauges that are not English.
schema_links:
[country.Code, countrylanguage.CountryCode, countrylanguage.Language != 'English']
classification:
The question is "Give the country codes for countries in which people speak languages that are not English." The relevant tables are [country, countrylanguage]. So, tables = [country, countrylanguage] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 782
SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
What are the codes of the countries that do not speak English and whose government forms are not Republic?
schema_links:
[country.Code, countrylanguage.Language, country.GovernmentForm, country.Code = countrylanguage.CountryCode, 'English', 'Republic']
classification:
The question is "What are the codes of the [countries] that do not speak [English] and whose government forms are not [Republic]?". [countries] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 783
SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
Return the codes of countries that do not speak English and do not have Republics for governments.
schema_links:
[country.Code, countrylanguage.Language, country.GovernmentForm, city.CountryCode = country.Code, countrylanguage.CountryCode = country.Code, English, Republic]
classification:
The given question is:
"Return the codes of countries that do not speak English and do not have Republics for governments."

To determine the complexity based on the number of tables involved, let's analyze the schema links:

- [country.Code] matches table = [country]
- [countrylanguage.Language] matches table = [countrylanguage]
- [country.GovernmentForm] matches table = [country]
- [city.CountryCode] matches table = [city]
- [countrylanguage.CountryCode] matches table = [countrylanguage]
- [English] does not match any table.
- [Republic] does not match any table.

From the schema links, we have tables = [country, countrylanguage, city], which indicates that the number of tables involved is greater than 1. Therefore, the SQL query can be classified as "COMPLEX."

Label: "COMPLEX"

index is 784
SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
Which cities are in European countries where English is not the official language?
schema_links:
[city.Name, country.Continent, countrylanguage.Language, countrylanguage.IsOfficial, city.CountryCode = country.Code, countrylanguage.CountryCode = country.Code, European, English, not official]
classification:
The question is "Which [cities] are in [European countries] where [English] is not the [official language]?". [cities] matches table = [city]. [European countries] matches table = [country]. [English] matches table = [countrylanguage]. So, tables = [city, country, countrylanguage] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 785
SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
What are the names of cities in Europe for which English is not the official language?
schema_links:
[city.Name, city.CountryCode, country.Code, countrylanguage.Language, countrylanguage.IsOfficial, Europe, English, 'F']
Slicing error for the classification module
classification:
The given question is incomplete and lacks a closing quotation mark. However, based on the provided information, the question can be classified as "COMPLEX" because it involves multiple tables and requires joining tables to retrieve the desired information.

index is 786
select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  "asia"
Which unique cities are in Asian countries where Chinese is the official language ?
schema_links:
[city.Name, country.Continent, country.Code, countrylanguage.Language, countrylanguage.IsOfficial, city.CountryCode = country.Code, countrylanguage.CountryCode = country.Code, Asian, Chinese, true]
classification:
The question is "Which unique [cities] are in [Asian countries] where [Chinese] is the [official language]?". [cities] matches table = [city]. [Asian countries] matches table = [country]. [Chinese] matches table = [countrylanguage]. tables = [city, country, countrylanguage] are connected by table = [country.Code]. So, tables = [city, country, countrylanguage] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 787
SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  "Asia"
Return the different names of cities that are in Asia and for which Chinese is the official language.
schema_links:
[city.Name, city.Continent, countrylanguage.Language, countrylanguage.IsOfficial, Asia, Chinese, True]
classification:
The question is "Return the different names of [cities] that are in [Asia] and for which [Chinese] is the official language.". [cities] matches table = [city]. So, tables = [city] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 788
SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1
What are the name, independence year, and surface area of the country with the smallest population?
schema_links:
[country.Name, country.IndepYear, country.SurfaceArea, country.Population]
classification:
The question is "What are the name, independence year, and surface area of the country with the smallest population?". The information needed can be obtained from the [country] table. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 789
SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1
Give the name, year of independence, and surface area of the country that has the lowest population.
schema_links:
[country.Name, country.IndepYear, country.SurfaceArea, country.Population]
classification:
The question is "Give the name, year of independence, and surface area of the [country] that has the lowest [population]." [country] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 790
SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
What are the population, name and leader of the country with the largest area?
schema_links:
[country.Population, country.Name, country.HeadOfState]
classification:
The question is "What are the [population], [name] and [leader] of the [country] with the largest area?". [population, name, leader, country] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 791
SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
Give the name, population, and head of state for the country that has the largest area.
schema_links:
[country.Name, country.Population, country.HeadOfState, country.SurfaceArea]
classification:
The question is "Give the name, population, and head of state for the country that has the largest [area]." [country] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 792
SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2
Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.
schema_links:
[country.Name, COUNT(countrylanguage.Language), country.Code = city.CountryCode, country.Code = countrylanguage.CountryCode, 3]
classification:
The question is "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.". The relevant tables are [country, countrylanguage, city]. So, tables = [country, countrylanguage, city] which number of tables >= 1. The SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 793
SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2
What are the names of countries that speak more than 2 languages, as well as how many languages they speak?
schema_links:
[country.Name, country.Code = countrylanguage.CountryCode, COUNT(countrylanguage.Language), 2]
classification:
The question is "What are the names of [countries] that speak more than 2 languages, as well as [how many languages] they speak?". [countries] matches table = [country]. [how many languages] is a count operation. [languages] matches table = [countrylanguage]. So, tables = [country, countrylanguage] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 794
SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District
Find the number of cities in each district whose population is greater than the average population of cities?
schema_links:
[city.District,city.Population]
classification:
The question is "Find the number of cities in each [district] whose population is greater than the average population of cities?". [district] matches table = [city]. So, tables = [city] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 795
SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District
How many cities in each district have a population that is above the average population across all cities?
schema_links:
[city.District, city.Population]
Slicing error for the classification module
classification:
The given question is incomplete and does not specify the tables to be used for the query. Therefore, it cannot be classified as either "EASY" or "COMPLEX" based on the number of tables.

index is 796
SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72
Find the government form name and total population for each government form whose average life expectancy is longer than 72.
schema_links:
[country.GovernmentForm, country.Population, country.LifeExpectancy, city.CountryCode = country.Code, countrylanguage.CountryCode = country.Code, 72]
classification:
The question is "Find the government form name and total population for each government form whose average life expectancy is longer than 72." [government form name] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 797
SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72
What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?
schema_links:
[country.GovernmentForm, country.Population, country.LifeExpectancy, 72]
classification:
The question is "What are the different [government forms] and what is the total [population] of each for government forms that have an average life expectancy greater than 72?". [government forms] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 798
SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72
Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?
schema_links:
[country.Continent, country.LifeExpectancy, country.Population, city.CountryCode = country.Code, countrylanguage.CountryCode = country.Code, 72]
classification:
The question is "Find the average life expectancy and total population for each [continent] where the average life expectancy is shorter than 72?". [continent] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 799
SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72
What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?
schema_links:
[country.Continent, country.Population, country.LifeExpectancy, 72]
classification:
The question is "What are the different [continents] and the total [population] and average [life expectancy] corresponding to each, for continents that have an average life expectancy less than 72?". [continents] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 800
SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
What are the names and areas of countries with the top 5 largest area?
schema_links:
[country.Name, country.SurfaceArea, 5]
classification:
The question is "What are the names and areas of [countries] with the top 5 largest area?". [countries] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 801
SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
Return the names and surface areas of the 5 largest countries.
schema_links:
[country.Name, country.SurfaceArea]
classification:
The question is "Return the names and surface areas of the 5 largest countries." [names] matches table = [country]. [surface areas] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 802
SELECT Name FROM country ORDER BY Population DESC LIMIT 3
What are names of countries with the top 3 largest population?
schema_links:
[country.Name, country.Population]
classification:
The question is "What are names of [countries] with the top 3 largest [population]?". [countries] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 803
SELECT Name FROM country ORDER BY Population DESC LIMIT 3
Return the names of the 3 most populated countries.
schema_links:
[country.Name]
classification:
The question is "Return the names of the 3 most populated [countries]." [countries] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 804
SELECT Name FROM country ORDER BY Population ASC LIMIT 3
What are the names of the nations with the 3 lowest populations?
schema_links:
[country.Name,country.Population]
classification:
The question is "What are the names of the nations with the 3 lowest populations?" [nations] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 805
SELECT Name FROM country ORDER BY Population ASC LIMIT 3
Return the names of the 3 countries with the fewest people.
schema_links:
[country.Name, country.Population]
classification:
The question is "Return the names of the 3 [countries] with the fewest people.". [countries] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 806
SELECT count(*) FROM country WHERE continent  =  "Asia"
how many countries are in Asia?
schema_links:
[COUNT(country.Code),country.Continent,'Asia']
classification:
The question is "how many [countries] are in [Asia]?". [countries] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 807
SELECT count(*) FROM country WHERE continent  =  "Asia"
Count the number of countries in Asia.
schema_links:
[COUNT(country.Code), country.Continent, "Asia"]
classification:
The question is "Count the number of [countries] in Asia.". [countries] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 808
SELECT Name FROM country WHERE continent  =  "Europe" AND Population  =  "80000"
What are the names of the countries that are in the continent of Europe and have a population of 80000?
schema_links:
[country.Name, country.Continent, country.Population, 'Europe', 80000]
classification:
The question is "What are the names of the [countries] that are in the [continent] of Europe and have a [population] of 80000?". [countries] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 809
SELECT Name FROM country WHERE continent  =  "Europe" AND Population  =  "80000"
Give the names of countries that are in Europe and have a population equal to 80000.
schema_links:
[country.Name, country.Continent, country.Population, country.Code = city.CountryCode, country.Code = countrylanguage.CountryCode, Europe, 80000]
classification:
The question is "Give the names of [countries] that are in [Europe] and have a population equal to [80000]." [countries] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 810
select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000
What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?
schema_links:
[country.Population, country.SurfaceArea, country.Continent = 'North America', country.SurfaceArea > 3000]
classification:
The question is "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000?". [countries] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 811
select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000
Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .
schema_links:
[country.Population, country.SurfaceArea, country.Continent, city.CountryCode = country.Code, country.Code = countrylanguage.CountryCode, >3000, North America]
classification:
The question is "Give the total [population] and average [surface area] corresponding to [countries] in North America that have a surface area greater than 3000.". [countries] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 812
SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000
What are the cities whose population is between 160000 and 900000?
schema_links:
[city.*, city.Population, 160000, 900000]
classification:
The question is "What are the cities whose population is between 160000 and 900000?". [cities] matches table = [city]. So, tables = [city] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 813
select name from city where population between 160000 and 900000
Return the names of cities that have a population between 160000 and 900000 .
schema_links:
[city.Name, city.Population, 160000, 900000]
classification:
The question is "Return the names of [cities] that have a population between 160000 and 900000." [cities] matches table = [city]. So, tables = [city] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 814
SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1
Which language is spoken by the largest number of countries?
schema_links:
[countrylanguage.Language, countrylanguage.CountryCode = country.Code, country.Name, country.Code]
classification:
The question is "Which [language] is spoken by the largest number of [countries]?". [language] matches table = [countrylanguage]. [countries] matches table = [country]. So, tables = [country, countrylanguage] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 815
SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1
Give the language that is spoken in the most countries.
schema_links:
[countrylanguage.Language,countrylanguage.CountryCode = country.Code]
classification:
The question is "Give the [language] that is spoken in the [most countries]." [language] matches table = [countrylanguage]. So, tables = [countrylanguage] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 816
SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
What is the language spoken by the largest percentage of people in each country?
schema_links:
[countrylanguage.Language,countrylanguage.Percentage,country.Name,countrylanguage.CountryCode = country.Code]
classification:
The question is "What is the language spoken by the largest percentage of people in each [country]?" [country] matches table = [country]. So, tables = [country] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 817
SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?
schema_links:
[country.Code, countrylanguage.Language, country.Code = countrylanguage.CountryCode]
classification:
The question is "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?". [countries] matches table = [country]. [languages] matches table = [countrylanguage]. So, tables = [country, countrylanguage] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 818
SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
What is the total number of countries where Spanish is spoken by the largest percentage of people?
schema_links:
[COUNT(country.Code), countrylanguage.Language, countrylanguage.Percentage, country.Code = countrylanguage.CountryCode, Spanish]
classification:
The question is "What is the total number of countries where [Spanish] is spoken by the largest percentage of people?". [Spanish] matches table = [countrylanguage]. So, tables = [countrylanguage] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 819
SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
Count the number of countries for which Spanish is the predominantly spoken language.
schema_links:
[COUNT(country.Code), country.Code = countrylanguage.CountryCode, countrylanguage.Language = 'Spanish', countrylanguage.IsOfficial = 'T']
classification:
The question is "Count the number of countries for which [Spanish] is the predominantly spoken language." [Spanish] matches table = [countrylanguage]. So, tables = [countrylanguage] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 820
SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
What are the codes of countries where Spanish is spoken by the largest percentage of people?
schema_links:
[country.Code = countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.Percentage, Spanish]
classification:
The question is "What are the codes of [countries] where [Spanish] is spoken by the largest percentage of people?". [countries] matches table = [country]. [Spanish] matches table = [countrylanguage]. So, tables = [country, countrylanguage] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 821
SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
Return the codes of countries for which Spanish is the predominantly spoken language.
schema_links:
[country.Code, countrylanguage.Language, countrylanguage.Percentage, country.Code = countrylanguage.CountryCode, Spanish]
classification:
The question is "Return the codes of [countries] for which [Spanish] is the predominantly spoken language.". [countries] matches table = [country]. [Spanish] matches table = [countrylanguage]. So, tables = [country, countrylanguage] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 822
SELECT count(*) FROM conductor
How many conductors are there?
schema_links:
[conductor.Conductor_ID]
classification:
The question is "How many [conductors] are there?". [conductors] matches table = [conductor]. So, tables = [conductor] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 823
SELECT count(*) FROM conductor
Count the number of conductors.
schema_links:
[conductor.Conductor_ID]
classification:
The question is "Count the number of [conductors]." [conductors] matches table = [conductor]. So, tables = [conductor] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 824
SELECT Name FROM conductor ORDER BY Age ASC
List the names of conductors in ascending order of age.
schema_links:
[conductor.Name,conductor.Age]
classification:
The question is "List the names of [conductors] in ascending order of [age]." [conductors] matches table = [conductor]. So, tables = [conductor] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 825
SELECT Name FROM conductor ORDER BY Age ASC
What are the names of conductors, ordered by age?
schema_links:
[conductor.Name, conductor.Age]
classification:
The question is "What are the names of [conductors], ordered by [age]?". [conductors] matches table = [conductor]. So, tables = [conductor] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 826
SELECT Name FROM conductor WHERE Nationality != 'USA'
What are the names of conductors whose nationalities are not "USA"?
schema_links:
[conductor.Name, conductor.Nationality, 'USA']
classification:
The question is "What are the names of [conductors] whose [nationalities] are not 'USA'?". [conductors] matches table = [conductor]. So, tables = [conductor] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 827
SELECT Name FROM conductor WHERE Nationality != 'USA'
Return the names of conductors that do not have the nationality "USA".
schema_links:
[conductor.Name, conductor.Nationality, 'USA']
classification:
The question is "Return the names of [conductors] that do not have the nationality 'USA'.". [conductors] matches table = [conductor]. So, tables = [conductor] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 828
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
What are the record companies of orchestras in descending order of years in which they were founded?
schema_links:
[orchestra.Record_Company,orchestra.Year_of_Founded]
classification:
The question is "What are the record companies of [orchestras] in descending order of years in which they were founded?" [orchestras] matches table = [orchestra]. So, tables = [orchestra] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 829
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
Return the record companies of orchestras, sorted descending by the years in which they were founded.
schema_links:
[orchestra.Record_Company,orchestra.Year_of_Founded]
classification:
The question is "Return the record companies of [orchestras], sorted descending by the years in which they were founded.". [orchestras] matches table = [orchestra]. So, tables = [orchestra] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 830
SELECT avg(Attendance) FROM SHOW
What is the average attendance of shows?
schema_links:
[show.Attendance]
classification:
The question is "What is the average attendance of [shows]?". [shows] matches table = [show]. So, tables = [show] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 831
SELECT avg(Attendance) FROM SHOW
Return the average attendance across all shows.
schema_links:
[show.Attendance]
Slicing error for the classification module
classification:
The question is "Return the average attendance across all shows." There is no explicit mention of any tables or columns related to the schema provided. So, it's not possible to determine the complexity of the SQL query based on the given information.

index is 832
SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"
What are the maximum and minimum share of performances whose type is not "Live final".
schema_links:
[performance.Share, performance.Type, 'Live final']
classification:
The question is "What are the maximum and minimum [share] of performances whose [type] is not 'Live final'.". [share] matches table = [performance]. [type] matches table = [performance]. So, tables = [performance] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 833
SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"
Return the maximum and minimum shares for performances that do not have the type "Live final".
schema_links:
[performance.Share,performance.Type,'Live final']
classification:
The question is "Return the maximum and minimum [shares] for [performances] that do not have the [type] 'Live final'.". [shares] matches table = [performance]. [performances] matches table = [performance]. [type] matches column = [performance.Type]. So, tables = [performance] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 834
SELECT count(DISTINCT Nationality) FROM conductor
How many different nationalities do conductors have?
schema_links:
[conductor.Nationality]
classification:
The question is "How many different [nationalities] do [conductors] have?" [nationalities] matches column = [conductor.Nationality]. [conductors] matches table = [conductor]. So, tables = [conductor] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 835
SELECT count(DISTINCT Nationality) FROM conductor
Count the number of different nationalities of conductors.
schema_links:
[conductor.Nationality]
classification:
The question is "Count the number of different [nationalities] of [conductors]." [nationalities] matches table = [conductor]. So, tables = [conductor] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 836
SELECT Name FROM conductor ORDER BY Year_of_Work DESC
List names of conductors in descending order of years of work.
schema_links:
[conductor.Name, conductor.Year_of_Work]
classification:
The question is "List names of [conductors] in descending order of [years of work]." [conductors] matches table = [conductor]. So, tables = [conductor] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 837
SELECT Name FROM conductor ORDER BY Year_of_Work DESC
What are the names of conductors, sorted descending by the number of years they have worked?
schema_links:
[conductor.Name,conductor.Year_of_Work]
classification:
The question is "What are the names of [conductors], sorted descending by the number of years they have worked?". [conductors] matches table = [conductor]. So, tables = [conductor] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 838
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
List the name of the conductor with the most years of work.
schema_links:
[conductor.Name, conductor.Year_of_Work]
classification:
The question is "List the name of the [conductor] with the most years of work.". [conductor] matches table = [conductor]. So, tables = [conductor] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 839
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
What is the name of the conductor who has worked the greatest number of years?
schema_links:
[conductor.Name,conductor.Year_of_Work]
classification:
The question is "What is the name of the [conductor] who has worked the greatest number of years?". [conductor] matches table = [conductor]. So, tables = [conductor] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 840
SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID
Show the names of conductors and the orchestras they have conducted.
schema_links:
[conductor.Name, orchestra.Orchestra, orchestra.Conductor_ID = conductor.Conductor_ID]
classification:
The question is "Show the names of [conductors] and the [orchestras] they have conducted.". [conductors] matches table = [conductor]. [orchestras] matches table = [orchestra]. tables = [conductor, orchestra] are connected by table = [orchestra]. So, tables = [conductor, orchestra] which number of tables = 2. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 841
SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID
What are the names of conductors as well as the corresonding orchestras that they have conducted?
schema_links:
[conductor.Name,orchestra.Orchestra,orchestra.Conductor_ID = conductor.Conductor_ID]
classification:
The question is "What are the names of [conductors] as well as the corresponding [orchestras] that they have conducted?". [conductors] matches table = [conductor]. [orchestras] matches table = [orchestra]. So, tables = [conductor, orchestra] which number of tables = 2. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 842
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1
Show the names of conductors that have conducted more than one orchestras.
schema_links:
[conductor.Name, orchestra.Conductor_ID]
Slicing error for the classification module
classification:
The given question is incomplete. It seems to be asking for the names of conductors who have conducted more than one orchestra, but the schema links provided are not sufficient to determine the tables involved in the query. Can you please provide more information or clarify the question?

index is 843
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1
What are the names of conductors who have conducted at more than one orchestra?
schema_links:
[conductor.Name, orchestra.Conductor_ID = conductor.Conductor_ID]
classification:
The question is "What are the names of [conductors] who have conducted at more than one [orchestra]?". [conductors] matches table = [conductor]. [orchestra] matches table = [orchestra]. So, tables = [conductor, orchestra] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 844
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1
Show the name of the conductor that has conducted the most number of orchestras.
schema_links:
[conductor.Name, orchestra.Conductor_ID]
classification:
The question is "Show the name of the [conductor] that has conducted the most number of [orchestras].". [conductor] matches table = [conductor]. [orchestras] matches table = [orchestra]. So, tables = [conductor, orchestra] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 845
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1
What is the name of the conductor who has conducted the most orchestras?
schema_links:
[conductor.Name,orchestra.Conductor_ID = conductor.Conductor_ID]
classification:
The question is "What is the name of the [conductor] who has conducted the most [orchestras]?" [conductor] matches table = [conductor]. [orchestras] matches table = [orchestra]. So, tables = [conductor, orchestra] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 846
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008
Please show the name of the conductor that has conducted orchestras founded after 2008.
schema_links:
[conductor.Name,orchestra.Conductor_ID = conductor.Conductor_ID,orchestra.Year_of_Founded,2008]
classification:
The question is "Please show the name of the [conductor] that has conducted [orchestras] founded after 2008.". [conductor] matches table = [conductor]. [orchestras] matches table = [orchestra]. So, tables = [conductor, orchestra] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 847
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008
What are the names of conductors who have conducted orchestras founded after the year 2008?
schema_links:
[conductor.Name,orchestra.Conductor_ID = conductor.Conductor_ID,orchestra.Year_of_Founded,2008]
classification:
The question is "What are the names of [conductors] who have conducted [orchestras] founded after the year 2008?". [conductors] matches table = [conductor]. [orchestras] matches table = [orchestra]. tables = [conductor, orchestra] are connected by table = [orchestra]. So, tables = [conductor, orchestra] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 848
SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company
Please show the different record companies and the corresponding number of orchestras.
schema_links:
[orchestra.Record_Company, COUNT(orchestra.Orchestra_ID)]
classification:
The question is "Please show the different [record companies] and the corresponding number of [orchestras]." [record companies] matches table = [orchestra]. [orchestras] matches table = [orchestra]. So, tables = [orchestra] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 849
SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company
How many orchestras does each record company manage?
schema_links:
[orchestra.*, orchestra.Record_Company]
classification:
The question is "How many [orchestras] does each [record company] manage?". [orchestras] matches table = [orchestra]. [record company] matches table = [orchestra]. So, tables = [orchestra] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 850
SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
Please show the record formats of orchestras in ascending order of count.
schema_links:
[orchestra.Major_Record_Format]
classification:
The question is "Please show the record formats of [orchestras] in ascending order of count.". [orchestras] matches table = [orchestra]. So, tables = [orchestra] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 851
SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
What are the major record formats of orchestras, sorted by their frequency?
schema_links:
[orchestra.Major_Record_Format]
classification:
The question is "What are the major record formats of [orchestras], sorted by their frequency?" [orchestras] matches table = [orchestra]. So, tables = [orchestra] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 852
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
List the record company shared by the most number of orchestras.
schema_links:
[orchestra.Record_Company,orchestra.*]
classification:
The question is "List the record company shared by the most number of [orchestras]." [orchestras] matches table = [orchestra]. So, tables = [orchestra] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 853
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
What is the record company used by the greatest number of orchestras?
schema_links:
[orchestra.Record_Company]
classification:
The question is "What is the record company used by the greatest number of orchestras?" [record company] matches the column [Record_Company] in the table [orchestra]. So, the table [orchestra] is involved in the query. Since there is only one table involved, the SQL query can be classified as "EASY".

Label: "EASY"

index is 854
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
List the names of orchestras that have no performance.
schema_links:
[orchestra.Orchestra, performance.*]
classification:
The question is "List the names of [orchestras] that have no [performance]." [orchestras] matches table = [orchestra]. [performance] matches table = [performance]. So, tables = [orchestra, performance] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 855
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
What are the orchestras that do not have any performances?
schema_links:
[orchestra.Orchestra, performance.Orchestra_ID]
Slicing error for the classification module
classification:
The given question is incomplete and missing necessary information. Please provide the complete question, including the desired output and any relevant tables or columns involved.

index is 856
SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003
Show the record companies shared by orchestras founded before 2003 and after 2003.
schema_links:
[orchestra.Record_Company,orchestra.Year_of_Founded,2003]
classification:
The question is "Show the record companies shared by orchestras founded before 2003 and after 2003." The tables involved are [orchestra]. So, the number of tables is 1. Therefore, the SQL query can be classified as "EASY".
Label: "EASY"

index is 857
SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003
What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?
schema_links:
[orchestra.Record_Company, orchestra.Year_of_Founded]
classification:
The question is "What are the record companies that are used by both [orchestras] founded before 2003 and those founded after 2003?". [orchestras] matches table = [orchestra]. So, tables = [orchestra] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 858
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"
Find the number of orchestras whose record format is "CD" or "DVD".
schema_links:
[orchestra.Orchestra_ID, orchestra.Major_Record_Format, 'CD', 'DVD']
classification:
The question is "Find the number of [orchestras] whose record format is "CD" or "DVD"." [orchestras] matches table = [orchestra]. So, tables = [orchestra] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 859
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"
Count the number of orchestras that have CD or DVD as their record format.
schema_links:
[orchestra.Major_Record_Format, 'CD', 'DVD']
classification:
The question is "Count the number of [orchestras] that have [CD] or [DVD] as their record format." [orchestras] matches table = [orchestra]. So, tables = [orchestra] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 860
SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1
Show the years in which orchestras that have given more than one performance are founded.
schema_links:
[orchestra.Year_of_Founded, performance.Orchestra_ID = orchestra.Orchestra_ID, performance.Performance_ID]
classification:
The question is "Show the years in which [orchestras] that have given more than one [performance] are founded." [orchestras] matches table = [orchestra]. [performances] matches table = [performance]. tables = [orchestra, performance] are connected by table = [performance]. So, tables = [orchestra, performance] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 861
SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1
What are years of founding for orchestras that have had more than a single performance?
schema_links:
[orchestra.Year_of_Founded,performance.Orchestra_ID = orchestra.Orchestra_ID]
classification:
The question is "What are the years of founding for orchestras that have had more than a single performance?". The relevant tables are [orchestra] and [performance], which are connected by the foreign key [performance.Orchestra_ID = orchestra.Orchestra_ID]. So, the tables involved are [orchestra, performance], which number of tables >= 1. Therefore, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 862
SELECT count(*) FROM Highschooler
How many high schoolers are there?
schema_links:
[Highschooler.ID]
classification:
The question is "How many [high schoolers] are there?". [high schoolers] matches table = [Highschooler]. So, tables = [Highschooler] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 863
SELECT count(*) FROM Highschooler
Count the number of high schoolers.
schema_links:
[Highschooler.ID]
classification:
The question is "Count the number of [high schoolers]." [high schoolers] matches table = [Highschooler]. So, tables = [Highschooler] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 864
SELECT name ,  grade FROM Highschooler
Show the names and grades of each high schooler.
schema_links:
[Highschooler.name, Highschooler.grade]
classification:
The question is "Show the names and grades of each [high schooler]." [high schooler] matches table = [Highschooler]. So, tables = [Highschooler] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 865
SELECT name ,  grade FROM Highschooler
What are the names and grades for each high schooler?
schema_links:
[Highschooler.name, Highschooler.grade]
classification:
The question is "What are the names and grades for each [high schooler]?". [high schooler] matches table = [Highschooler]. So, tables = [Highschooler] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 866
SELECT grade FROM Highschooler
Show all the grades of the high schoolers.
schema_links:
[Highschooler.grade]
classification:
The question is "Show all the grades of the [high schoolers]." [high schoolers] matches table = [Highschooler]. So, tables = [Highschooler] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 867
SELECT grade FROM Highschooler
What is the grade of each high schooler?
schema_links:
[Highschooler.grade]
classification:
The question is "What is the grade of each [high schooler]?". [high schooler] matches table = [Highschooler]. So, tables = [Highschooler] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 868
SELECT grade FROM Highschooler WHERE name  =  "Kyle"
What grade is Kyle in?
schema_links:
[Highschooler.grade, Highschooler.name, 'Kyle']
classification:
The question is "What grade is [Kyle] in?" [Kyle] matches table = [Highschooler]. So, tables = [Highschooler] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 869
SELECT grade FROM Highschooler WHERE name  =  "Kyle"
Return the grade for the high schooler named Kyle.
schema_links:
[Highschooler.grade, Highschooler.name, 'Kyle']
classification:
The question is "Return the grade for the high schooler named [Kyle]. [Kyle] matches table = [Highschooler]. So, tables = [Highschooler] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 870
SELECT name FROM Highschooler WHERE grade  =  10
Show the names of all high schoolers in grade 10.
schema_links:
[Highschooler.name, Highschooler.grade, 10]
classification:
The question is "Show the names of all [high schoolers] in [grade 10].". [high schoolers] matches table = [Highschooler]. So, tables = [Highschooler] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 871
SELECT name FROM Highschooler WHERE grade  =  10
What are the names of all high schoolers in grade 10?
schema_links:
[Highschooler.name, Highschooler.grade, 10]
classification:
The question is "What are the names of all [high schoolers] in [grade 10]?". [high schoolers] matches table = [Highschooler]. So, tables = [Highschooler] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 872
SELECT ID FROM Highschooler WHERE name  =  "Kyle"
Show the ID of the high schooler named Kyle.
schema_links:
[Highschooler.ID, Highschooler.name, 'Kyle']
classification:
The question is "Show the ID of the high schooler named [Kyle].". [Kyle] matches table = [Highschooler]. So, tables = [Highschooler] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 873
SELECT ID FROM Highschooler WHERE name  =  "Kyle"
What is Kyle's id?
schema_links:
[Highschooler.ID]
classification:
The question is "What is [Kyle's] id?". [Kyle's] matches table = [Highschooler]. So, tables = [Highschooler] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 874
SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10
How many high schoolers are there in grade 9 or 10?
schema_links:
[Highschooler.ID, Highschooler.grade, 9, 10]
classification:
The question is "How many [high schoolers] are there in [grade 9 or 10]?". [high schoolers] matches table = [Highschooler]. So, tables = [Highschooler] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 875
SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10
Count the number of high schoolers in grades 9 or 10.
schema_links:
[Highschooler.*, Highschooler.grade, 9, 10]
classification:
The question is "Count the number of [high schoolers] in grades 9 or 10.". [high schoolers] matches table = [Highschooler]. So, tables = [Highschooler] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 876
SELECT grade ,  count(*) FROM Highschooler GROUP BY grade
Show the number of high schoolers for each grade.
schema_links:
[Highschooler.ID, Highschooler.grade]
classification:
The question is "Show the number of high schoolers for each grade." The relevant table is [Highschooler]. So, tables = [Highschooler], which means the number of tables = 1. Therefore, the SQL query can be classified as "EASY".
Label: "EASY"

index is 877
SELECT grade ,  count(*) FROM Highschooler GROUP BY grade
How many high schoolers are in each grade?
schema_links:
[Highschooler.*, Highschooler.grade]
classification:
The question is "How many [high schoolers] are in each [grade]?". [high schoolers] matches table = [Highschooler]. So, tables = [Highschooler] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 878
SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
Which grade has the most high schoolers?
schema_links:
[Highschooler.grade,Highschooler.ID]
classification:
The question is "Which [grade] has the most [high schoolers]?". [grade] matches table = [Highschooler]. [high schoolers] matches table = [Highschooler]. So, tables = [Highschooler] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 879
SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
Return the grade that has the greatest number of high schoolers.
schema_links:
[Highschooler.grade, Highschooler.*]
Slicing error for the classification module
classification:
The given question is incomplete. Please provide the complete question so that I can classify it as "EASY" or "COMPLEX" based on the number of tables involved.

index is 880
SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4
Show me all grades that have at least 4 students.
schema_links:
[Highschooler.grade,COUNT(Highschooler.ID),4]
classification:
The question is "Show me all [grades] that have at least 4 [students]." [grades] matches table = [Highschooler]. [students] matches table = [Highschooler]. So, tables = [Highschooler] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 881
SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4
Which grades have 4 or more high schoolers?
schema_links:
[Highschooler.grade,4]
classification:
The question is "Which [grades] have 4 or more [high schoolers]?". [grades] matches table = [Highschooler]. So, tables = [Highschooler] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 882
SELECT student_id ,  count(*) FROM Friend GROUP BY student_id
Show the student IDs and numbers of friends corresponding to each.
schema_links:
[Highschooler.ID, COUNT(Friend.friend_id), Friend.student_id = Highschooler.ID]
classification:
The question is "Show the [student IDs] and [numbers of friends] corresponding to each.". [student IDs] matches table = [Highschooler]. [numbers of friends] can be obtained by counting the occurrences of [Friend.friend_id] grouped by [Friend.student_id]. So, tables = [Highschooler, Friend] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 883
SELECT student_id ,  count(*) FROM Friend GROUP BY student_id
How many friends does each student have?
schema_links:
[COUNT(Friend.friend_id),Highschooler.ID,Friend.student_id = Highschooler.ID]
classification:
The question is "How many [friends] does each [student] have?". [friends] matches table = [Friend]. [students] matches table = [Highschooler]. So, tables = [Friend, Highschooler] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 884
SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
Show the names of high school students and their corresponding number of friends.
schema_links:
[Highschooler.name,Friend.friend_id,Highschooler.ID,Friend.student_id,COUNT(Friend.friend_id)]
classification:
The question is "Show the names of [high school students] and their corresponding number of [friends].". [high school students] matches table = [Highschooler]. [friends] matches table = [Friend]. So, tables = [Highschooler, Friend] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 885
SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
What are the names of the high schoolers and how many friends does each have?
schema_links:
[Highschooler.name,Friend.friend_id,Friend.student_id]
classification:
The question is "What are the names of the [high schoolers] and how many [friends] does each have?". [high schoolers] matches table = [Highschooler]. [friends] matches table = [Friend]. So, tables = [Highschooler, Friend] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 886
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
What is the name of the high schooler who has the greatest number of friends?
schema_links:
[Highschooler.name, Friend.student_id = Highschooler.ID]
classification:
The question is "What is the name of the [high schooler] who has the greatest number of [friends]?". [high schooler] matches table = [Highschooler]. [friends] matches table = [Friend]. So, tables = [Highschooler, Friend] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 887
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Return the name of the high school student with the most friends.
schema_links:
[Highschooler.name, Friend.student_id = Highschooler.ID]
classification:
The question is "Return the name of the [high school student] with the most [friends]." [high school student] matches table = [Highschooler]. [friends] matches table = [Friend]. So, tables = [Highschooler, Friend] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 888
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3
Show the names of high schoolers who have at least 3 friends.
schema_links:
[Highschooler.name,Friend.student_id,3]
classification:
The question is "Show the names of [high schoolers] who have at least 3 [friends]. [high schoolers] matches table = [Highschooler]. [friends] matches table = [Friend]. So, tables = [Highschooler, Friend] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 889
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3
What are the names of high schoolers who have 3 or more friends?
schema_links:
[Highschooler.name,Friend.student_id = Highschooler.ID,COUNT(Friend.friend_id),3]
classification:
The question is "What are the names of [high schoolers] who have [3 or more friends]?". [high schoolers] matches table = [Highschooler]. [3 or more friends] can be determined by counting the number of entries in the [Friend] table for each [high schooler]. So, tables = [Highschooler, Friend] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 890
SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"
Show the names of all of the high schooler Kyle's friends.
schema_links:
[Highschooler.name,Friend.friend_id,Friend.student_id,Highschooler.ID,Kyle]
classification:
The question is "Show the names of all of the [high schooler] Kyle's friends.". [high schooler] matches table = [Highschooler]. Kyle's friends are connected through the [Friend] table. So, tables = [Highschooler, Friend] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 891
SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"
Return the names of friends of the high school student Kyle.
schema_links:
[Highschooler.name,Friend.friend_id,Friend.student_id,Highschooler.ID,'Kyle']
classification:
The question is "Return the names of friends of the high school student [Kyle].". [Kyle] matches table = [Highschooler]. So, tables = [Highschooler] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 892
SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
How many friends does the high school student Kyle have?
schema_links:
[Friend.friend_id, Friend.student_id = Highschooler.ID, Highschooler.ID, Highschooler.name, 'Kyle']
classification:
The question is "How many friends does the high school student [Kyle] have?". [Kyle] matches table = [Highschooler]. [friends] matches table = [Friend]. So, tables = [Highschooler, Friend] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 893
SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
Count the number of friends Kyle has.
schema_links:
[Friend.student_id = Highschooler.ID, Highschooler.name, 'Kyle']
classification:
The question is "Count the number of friends [Kyle] has.". [Kyle] matches table = [Highschooler]. So, tables = [Highschooler] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 894
SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend
Show ids of all students who do not have any friends.
schema_links:
[Highschooler.ID,Friend.student_id = Highschooler.ID]
classification:
The question is "Show ids of all [students] who do not have any [friends]." [students] matches table = [Highschooler]. [friends] matches table = [Friend]. So, tables = [Highschooler, Friend] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 895
SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend
What are the ids of high school students who do not have friends?
schema_links:
[Highschooler.ID, Friend.student_id]
classification:
The question is "What are the ids of [high school students] who do not have [friends]?". [high school students] matches table = [Highschooler]. [friends] matches table = [Friend]. So, tables = [Highschooler, Friend] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 896
SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id
Show names of all high school students who do not have any friends.
schema_links:
[Highschooler.name,Friend.friend_id,Highschooler.ID = Friend.student_id]
classification:
The question is "Show names of all [high school students] who do not have any [friends]." [high school students] matches table = [Highschooler]. [friends] matches table = [Friend]. So, tables = [Highschooler, Friend] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 897
SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id
What are the names of students who have no friends?
schema_links:
[Highschooler.name, Friend.student_id = Highschooler.ID, Friend.friend_id = Highschooler.ID]
classification:
The question is "What are the names of [students] who have no [friends]?". [students] matches table = [Highschooler]. [friends] matches table = [Friend]. So, tables = [Highschooler, Friend] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 898
SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes
Show the ids of high schoolers who have friends and are also liked by someone else.
schema_links:
[Highschooler.ID, Friend.student_id = Highschooler.ID, Friend.friend_id = Highschooler.ID, Likes.student_id = Highschooler.ID, Likes.liked_id = Highschooler.ID]
classification:
The question is "Show the ids of [high schoolers] who have [friends] and are also [liked] by someone else.". [high schoolers] matches table = [Highschooler]. [friends] matches tables = [Friend]. [liked] matches tables = [Likes]. So, tables = [Highschooler, Friend, Likes] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 899
SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes
What are the ids of students who both have friends and are liked?
schema_links:
[Highschooler.ID, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id]
classification:
The question is "What are the ids of [students] who both have [friends] and are [liked]?". [students] matches table = [Highschooler]. [friends] matches table = [Friend]. [liked] matches table = [Likes]. So, tables = [Highschooler, Friend, Likes] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 900
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id
Show name of all students who have some friends and also are liked by someone else.
schema_links:
[Highschooler.name, Friend.student_id, Likes.student_id, Likes.liked_id]
classification:
The question is "Show name of all [students] who have some [friends] and also are [liked] by someone else.". [students] matches table = [Highschooler]. [friends] matches table = [Friend]. [liked] matches table = [Likes]. So, tables = [Highschooler, Friend, Likes] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 901
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id
What are the names of high schoolers who both have friends and are liked?
schema_links:
[Highschooler.name, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id]
classification:
The question is "What are the names of [high schoolers] who both have [friends] and are [liked]?". [high schoolers] matches table = [Highschooler]. [friends] matches table = [Friend]. [liked] matches table = [Likes]. So, tables = [Highschooler, Friend, Likes] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 902
SELECT student_id ,  count(*) FROM Likes GROUP BY student_id
Count the number of likes for each student id.
schema_links:
[Likes.*, Highschooler.ID, Likes.student_id = Highschooler.ID]
classification:
The question is "Count the number of likes for each [student] id.". [student] matches table = [Highschooler]. So, tables = [Highschooler] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 903
SELECT student_id ,  count(*) FROM Likes GROUP BY student_id
How many likes correspond to each student id?
schema_links:
[Likes.student_id, COUNT(Likes.student_id)]
classification:
The question is "How many [likes] correspond to each [student_id]?". [likes] matches table = [Likes]. [student_id] matches column = [Likes.student_id]. So, tables = [Likes] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 904
SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
Show the names of high schoolers who have likes, and numbers of likes for each.
schema_links:
[Highschooler.name,Likes.student_id]
classification:
The question is "Show the names of [high schoolers] who have [likes], and [numbers of likes] for each.". [high schoolers] matches table = [Highschooler]. [likes] matches table = [Likes]. So, tables = [Highschooler, Likes] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 905
SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
What are the names of high schoolers who have likes, and how many likes does each have?
schema_links:
[Highschooler.name,Likes.student_id,COUNT(Likes.liked_id),Highschooler.ID = Likes.student_id]
classification:
The question is "What are the names of [high schoolers] who have [likes], and how many likes does each have?". [high schoolers] matches table = [Highschooler]. [likes] matches table = [Likes]. So, tables = [Highschooler, Likes] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 906
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
What is the name of the high schooler who has the greatest number of likes?
schema_links:
[Highschooler.name,Likes.student_id = Highschooler.ID,Likes.*]
classification:
The question is "What is the name of the [high schooler] who has the greatest number of [likes]?". [high schooler] matches table = [Highschooler]. [likes] matches table = [Likes]. So, tables = [Highschooler, Likes] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 907
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
Give the name of the student with the most likes.
schema_links:
[Highschooler.name, Likes.student_id = Highschooler.ID, Likes.*]
classification:
The question is "Give the name of the [student] with the most [likes].". [student] matches table = [Highschooler]. [likes] matches table = [Likes]. So, tables = [Highschooler, Likes] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 908
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2
Show the names of students who have at least 2 likes.
schema_links:
[Highschooler.name,Likes.student_id = Highschooler.ID]
classification:
The question is "Show the names of [students] who have at least 2 [likes]." [students] matches table = [Highschooler]. [likes] matches table = [Likes]. So, tables = [Highschooler, Likes] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 909
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2
What are the names of students who have 2 or more likes?
schema_links:
[Highschooler.name,Likes.student_id,2]
classification:
The question is "What are the names of [students] who have [2 or more likes]?". [students] matches table = [Highschooler]. So, tables = [Highschooler] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 910
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2
Show the names of students who have a grade higher than 5 and have at least 2 friends.
schema_links:
[Highschooler.name,Highschooler.grade,Friend.student_id,2,5]
classification:
The question is "Show the names of [students] who have a grade higher than 5 and have at least 2 [friends]." [students] matches table = [Highschooler]. [friends] matches table = [Friend]. So, tables = [Highschooler, Friend] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 911
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2
What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?
schema_links:
[Highschooler.name, Highschooler.grade, Friend.student_id = Highschooler.ID]
classification:
The question is "What are the names of [high schoolers] who have a [grade] of over 5 and have [2 or more friends]?". [high schoolers] matches table = [Highschooler]. So, tables = [Highschooler] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 912
SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
How many likes does Kyle have?
schema_links:
[COUNT(Likes.*),Highschooler.name,Likes.student_id = Highschooler.ID,'Kyle']
classification:
The question is "How many likes does [Kyle] have?". [Kyle] matches table = [Highschooler]. So, tables = [Highschooler] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 913
SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
Return the number of likes that the high schooler named Kyle has.
schema_links:
[COUNT(Likes.student_id),Likes.student_id = Highschooler.ID,Highschooler.ID,'Kyle']
classification:
The question is "Return the number of [likes] that the [high schooler] named [Kyle] has.". [likes] matches table = [Likes]. [high schooler] matches table = [Highschooler]. tables = [Likes, Highschooler] are connected by table = [Likes]. So, tables = [Likes, Highschooler] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 914
SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
Find the average grade of all students who have some friends.
schema_links:
[Highschooler.grade,Friend.student_id = Highschooler.ID]
classification:
The question is "Find the average grade of all students who have some [friends]." [students] matches table = [Highschooler]. [friends] matches table = [Friend]. So, tables = [Highschooler, Friend] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 915
SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
What is the average grade of students who have friends?
schema_links:
[Highschooler.grade,Friend.student_id = Highschooler.ID]
Slicing error for the classification module
classification:
The provided question does not match any of the given schema links. It seems to involve tables and columns not mentioned in the schema. Therefore, it is not possible to classify the SQL query as either "EASY" or "COMPLEX" based on the number of tables.

index is 916
SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
Find the minimum grade of students who have no friends.
schema_links:
[Highschooler.grade,Friend.student_id = Highschooler.ID]
classification:
The question is "Find the minimum grade of [students] who have no [friends]." [students] matches table = [Highschooler]. [friends] matches table = [Friend]. So, tables = [Highschooler, Friend] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 917
SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
What is the lowest grade of students who do not have any friends?
schema_links:
[Highschooler.grade,Friend.friend_id, Friend.student_id]
classification:
The question is "What is the lowest grade of [students] who do not have any [friends]?". [students] matches table = [Highschooler]. [friends] matches table = [Friend]. So, tables = [Highschooler, Friend] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 918
SELECT state FROM Owners INTERSECT SELECT state FROM Professionals
Which states have both owners and professionals living there?
schema_links:
[Owners.state,Professionals.state]
classification:
The question is "Which [states] have both [owners] and [professionals] living there?". [states] matches table = [Owners]. [owners] matches table = [Owners]. [professionals] matches table = [Professionals]. So, tables = [Owners, Professionals] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 919
SELECT state FROM Owners INTERSECT SELECT state FROM Professionals
Find the states where both owners and professionals live.
schema_links:
[Owners.state, Professionals.state]
classification:
The question is "Find the [states] where both [owners] and [professionals] live." [states] matches table = [Owners, Professionals]. [owners] matches table = [Owners]. [professionals] matches table = [Professionals]. So, tables = [Owners, Professionals] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 920
SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )
What is the average age of the dogs who have gone through any treatments?
schema_links:
[Dogs.age,Treatments.dog_id = Dogs.dog_id]
classification:
The question is "What is the average age of the [dogs] who have gone through any [treatments]?". [dogs] matches table = [Dogs]. [treatments] matches table = [Treatments]. So, tables = [Dogs, Treatments] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 921
SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )
Find the average age of the dogs who went through treatments.
schema_links:
[Dogs.age,Treatments.dog_id = Dogs.dog_id]
classification:
The question is "Find the average age of the dogs who went through treatments." [dogs] matches table = [Dogs]. So, tables = [Dogs] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 922
SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.
schema_links:
[Professionals.professional_id, Professionals.last_name, Professionals.cell_number, Professionals.state, Treatments.professional_id, 'Indiana', >2]
classification:
The question is "Which [professionals] live in the state of Indiana or have done treatment on more than 2 treatments? List his or her [id], [last name], and [cell phone].". [professionals] matches table = [Professionals]. So, tables = [Professionals] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 923
SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.
schema_links:
[Professionals.professional_id, Professionals.last_name, Professionals.cell_number, Professionals.state, Treatments.professional_id, 'Indiana']
classification:
The question is "Find the [id], [last name] and [cell phone] of the [professionals] who live in the state of [Indiana] or have performed more than two [treatments].". [professionals] matches table = [professionals]. [treatments] matches table = [treatments]. So, tables = [professionals, treatments] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 924
select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )
Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .
schema_links:
[Dogs.name,Treatments.cost_of_treatment,Dogs.dog_id = Treatments.dog_id,1000]
classification:
The question is "Which [dogs] have not cost their owner more than 1000 for [treatment]? List the dog names.". [dogs] matches table = [Dogs]. [treatment] matches table = [Treatments]. So, tables = [Dogs, Treatments] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 925
select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )
What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?
schema_links:
[Dogs.name, Treatments.cost_of_treatment, Dogs.owner_id = Owners.owner_id, Treatments.dog_id = Dogs.dog_id, 1000]
classification:
The question is "What are the names of the [dogs] for which the [owner] has not spent more than 1000 for [treatment]?". [dogs] matches table = [Dogs]. [owner] matches table = [Owners]. [treatment] matches table = [Treatments]. tables = [Dogs, Owners, Treatments] are connected by table = [Owners, Treatments]. So, tables = [Dogs, Owners, Treatments] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 926
SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs
Which first names are used for professionals or owners but are not used as dog names?
schema_links:
[Professionals.first_name, Owners.first_name, Dogs.name]
classification:
The question is "Which first names are used for [professionals] or [owners] but are not used as [dog names]?". [professionals] matches table = [professionals]. [owners] matches table = [owners]. [dog names] matches table = [dogs]. So, tables = [professionals, owners, dogs] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 927
SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs
Find the first names that are used for professionals or owners but are not used as dog names.
schema_links:
[Professionals.first_name, Owners.first_name, Dogs.name]
classification:
The question is "Find the first names that are used for [professionals] or [owners] but are not used as [dog names].". [professionals] matches table = [Professionals]. [owners] matches table = [Owners]. [dog names] matches table = [Dogs]. So, tables = [Professionals, Owners, Dogs] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 928
SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
Which professional did not operate any treatment on dogs? List the professional's id, role and email.
schema_links:
[Professionals.professional_id, Professionals.role_code, Professionals.email_address, Treatments.professional_id]
classification:
The question is "Which [professional] did not operate any treatment on [dogs]? List the professional's id, role, and email." [professional] matches table = [Professionals]. [dogs] matches table = [Dogs]. tables = [Professionals, Dogs] are connected by table = [Treatments]. So, tables = [Professionals, Dogs, Treatments] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 929
SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
Give me the id, role and email of the professionals who did not perform any treatment on dogs.
schema_links:
[Professionals.professional_id, Professionals.role_code, Professionals.email_address, Treatments.professional_id]
classification:
The question is "Give me the [id], [role], and [email] of the [professionals] who did not perform any treatment on [dogs]." [professionals] matches table = [Professionals]. [dogs] matches table = [Dogs]. tables = [Professionals, Dogs] are connected by table = [Treatments]. So, tables = [Professionals, Dogs, Treatments] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 930
SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
Which owner owns the most dogs? List the owner id, first name and last name.
schema_links:
[Owners.owner_id, Owners.first_name, Owners.last_name, Dogs.owner_id]
classification:
The question is "Which [owner] owns the most [dogs]? List the owner id, first name, and last name." [owner] matches table = [Owners]. [dogs] matches table = [Dogs]. So, tables = [Owners, Dogs] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 931
SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
Return the owner id, first name and last name of the owner who has the most dogs.
schema_links:
[Owners.owner_id, Owners.first_name, Owners.last_name, Dogs.owner_id]
classification:
The question is "Return the owner id, first name, and last name of the owner who has the most dogs." [owner id, first name, last name] matches table = [Owners]. [Dogs] is connected to [Owners] through [owner id]. So, tables = [Owners, Dogs] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 932
SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
Which professionals have done at least two treatments? List the professional's id, role, and first name.
schema_links:
[Professionals.professional_id, Professionals.role_code, Professionals.first_name, Treatments.professional_id]
classification:
The question is "Which [professionals] have done at least two [treatments]? List the professional's id, role, and first name.". [professionals] matches table = [Professionals]. [treatments] matches table = [Treatments]. So, tables = [Professionals, Treatments] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 933
SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
What are the id, role, and first name of the professionals who have performed two or more treatments?
schema_links:
[Professionals.professional_id, Professionals.role_code, Professionals.first_name, Treatments.professional_id]
classification:
The question is "What are the id, role, and first name of the [professionals] who have performed [two or more treatments]?" [professionals] matches table = [Professionals]. [treatments] matches table = [Treatments]. So, tables = [Professionals, Treatments] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 934
SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1
What is the name of the breed with the most dogs?
schema_links:
[Breeds.breed_name, Dogs.breed_code = Breeds.breed_code, Dogs.*]
classification:
The question is "What is the name of the [breed] with the most [dogs]?" [breed] matches table = [Breeds]. [dogs] matches table = [Dogs]. So, tables = [Breeds, Dogs] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 935
SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1
Which breed do the most dogs have? Give me the breed name.
schema_links:
[Breeds.breed_name,Dogs.breed_code = Breeds.breed_code]
classification:
The question is "Which [breed] do the most [dogs] have? Give me the breed name.". [breed] matches table = [Breeds]. [dogs] matches table = [Dogs]. So, tables = [Breeds, Dogs] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 936
SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.
schema_links:
[Owners.owner_id,Owners.last_name,Treatments.dog_id,Treatments.dog_id = Dogs.dog_id,Dogs.owner_id = Owners.owner_id]
classification:
The question is "Which [owner] has paid for the most treatments on his or her dogs? List the [owner] id and last name.". [owner] matches table = [Owners]. tables = [Owners] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 937
SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.
schema_links:
[Owners.owner_id, Owners.last_name, Treatments.cost_of_treatment, Treatments.dog_id = Dogs.dog_id, Treatments.professional_id = Professionals.professional_id]
classification:
The question is "Tell me the [owner id] and [last name] of the [owner] who spent the most on [treatments] of his or her [dogs].". [owner id] matches table = [Owners]. [last name] matches table = [Owners]. [owner] matches table = [Owners]. [treatments] matches table = [Treatments]. [dogs] matches table = [Dogs]. tables = [Owners, Treatments, Dogs] are connected by table = [Treatments]. So, tables = [Owners, Treatments, Dogs] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 938
SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1
What is the description of the treatment type that costs the least money in total?
schema_links:
[Treatment_Types.treatment_type_description,Treatments.cost_of_treatment,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]
classification:
The question is "What is the description of the [treatment type] that costs the [least money] in total?". [treatment type] matches table = [Treatment_Types]. [least money] involves comparing values from table = [Treatments]. So, tables = [Treatment_Types, Treatments] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 939
SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1
Give me the description of the treatment type whose total cost is the lowest.
schema_links:
[Treatment_Types.treatment_type_description,Treatments.cost_of_treatment,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]
classification:
The question is "Give me the description of the [treatment type] whose total cost is the lowest.". [treatment type] matches table = [Treatment_Types]. So, tables = [Treatment_Types] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 940
SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1
Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.
schema_links:
[Owners.owner_id,Owners.zip_code,Treatments.cost_of_treatment,Owners.owner_id = Dogs.owner_id,Treatments.dog_id = Dogs.dog_id]
classification:
The question is "Which [owner] has paid the largest amount of money in total for their [dogs]? Show the owner id and zip code." [owner] matches table = [Owners]. [dogs] matches table = [Dogs]. tables = [Owners, Dogs] are connected by table = [Treatments]. So, tables = [Owners, Dogs, Treatments] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 941
SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1
Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.
schema_links:
[Owners.owner_id, Owners.zip_code, Treatments.cost_of_treatment, Treatments.dog_id = Dogs.dog_id, Dogs.owner_id = Owners.owner_id]
classification:
The question is "Find the [owner id] and [zip code] of the [owner] who spent the most money in total for his or her [dogs]. [owner] matches table = [Owners]. [dogs] matches table = [Dogs]. [owner id] and [zip code] are columns of [Owners]. The spending of an owner on their dogs is determined by the [cost of treatment] in the [Treatments] table, which is connected to [Dogs] through [dog id]. So, tables = [Owners, Dogs, Treatments] which number of tables >= 1. The SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 942
SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
Which professionals have done at least two types of treatments? List the professional id and cell phone.
schema_links:
[Professionals.professional_id, Professionals.cell_number, Treatments.professional_id = Professionals.professional_id, Treatments.treatment_type_code = Treatment_Types.treatment_type_code]
classification:
The question is "Which [professionals] have done at least two types of treatments? List the professional id and cell phone." [professionals] matches table = [Professionals]. So, tables = [Professionals] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 943
SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
Find the id and cell phone of the professionals who operate two or more types of treatments.
schema_links:
[Professionals.professional_id, Professionals.cell_number, Treatments.professional_id, Treatments.treatment_type_code]
classification:
The question is "Find the [id] and [cell phone] of the [professionals] who operate two or more types of [treatments]." [professionals] matches table = [Professionals]. [treatments] matches table = [Treatments]. So, tables = [Professionals, Treatments] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 944
SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )
What are the first name and last name of the professionals who have done treatment with cost below average?
schema_links:
[Professionals.first_name, Professionals.last_name, Treatments.professional_id, Treatments.cost_of_treatment]
classification:
The question is "What are the first name and last name of the [professionals] who have done treatment with cost below average?". [professionals] matches table = [professionals]. So, tables = [professionals] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 945
SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )
Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.
schema_links:
[Professionals.first_name, Professionals.last_name, Treatments.professional_id, Treatments.cost_of_treatment, average]
classification:
The question is "Which [professionals] have operated a [treatment] that costs less than the [average]? Give me their [first names] and [last names].". [professionals] matches table = [Professionals]. [treatment] matches table = [Treatments]. tables = [Professionals, Treatments] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 946
SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id
List the date of each treatment, together with the first name of the professional who operated it.
schema_links:
[Treatments.date_of_treatment,Treatments.professional_id = Professionals.professional_id,Professionals.first_name]
classification:
The question is "List the [date] of each [treatment], together with the [first name] of the [professional] who operated it.". [date] matches table = [Treatments]. [treatment] matches table = [Treatments]. [first name] matches table = [Professionals]. [professional] matches table = [Professionals]. tables = [Treatments, Professionals] are connected by table = [Treatments.professional_id = Professionals.professional_id]. So, tables = [Treatments, Professionals] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 947
SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id
What are the date and the operating professional's first name of each treatment?
schema_links:
[Treatments.date_of_treatment,Professionals.first_name,Treatments.professional_id = Professionals.professional_id]
Slicing error for the classification module
classification:
The given question is incomplete. It states: "What are the date and the operating professional's first name of each treatment?" However, it doesn't provide any information about the relevant tables or columns. Please provide more details or clarify the question so that I can assist you further.

index is 948
SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code
List the cost of each treatment and the corresponding treatment type description.
schema_links:
[Treatments.cost_of_treatment,Treatments.treatment_type_code = Treatment_Types.treatment_type_code,Treatment_Types.treatment_type_description]
classification:
The question is "List the cost of each [treatment] and the corresponding [treatment type] description.". [treatment] matches table = [Treatments]. [treatment type] matches table = [Treatment_Types]. So, tables = [Treatments, Treatment_Types] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 949
SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code
What are the cost and treatment type description of each treatment?
schema_links:
[Treatments.cost_of_treatment, Treatment_Types.treatment_type_description, Treatments.treatment_type_code = Treatment_Types.treatment_type_code]
classification:
The question is "What are the [cost] and [treatment type description] of each [treatment]?". [cost] matches column = [Treatments.cost_of_treatment]. [treatment type description] matches column = [Treatment_Types.treatment_type_description]. [treatment] matches table = [Treatments]. So, tables = [Treatments] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 950
SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
List each owner's first name, last name, and the size of his for her dog.
schema_links:
[Owners.first_name, Owners.last_name, Dogs.size_code, Dogs.owner_id = Owners.owner_id, Dogs.size_code = Sizes.size_code]
classification:
The question is "List each owner's [first name], [last name], and the [size] of his or her [dog].". [first name] and [last name] match columns in table = [Owners]. [size] matches column in table = [Sizes]. [dog] matches table = [Dogs]. [owner] and [size] are connected to [dog] by foreign keys. So, tables = [Owners, Dogs, Sizes] which number of tables >= 1. Therefore, the SQL query can be classified as "COMPLEX". 
Label: "COMPLEX"

index is 951
SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
What are each owner's first name, last name, and the size of their dog?
schema_links:
[Owners.first_name, Owners.last_name, Dogs.owner_id = Owners.owner_id, Sizes.size_description, Dogs.size_code = Sizes.size_code]
classification:
The question is "What are each [owner]'s first name, last name, and the [size] of their dog?". [owner] matches table = [Owners]. [size] matches table = [Sizes]. So, tables = [Owners, Sizes] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 952
SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
List pairs of the owner's first name and the dogs's name.
schema_links:
[Owners.first_name,Dogs.name,Dogs.owner_id = Owners.owner_id]
classification:
The question is "List pairs of the [owner's first name] and the [dog's name]." [owner's first name] matches table = [Owners]. [dog's name] matches table = [Dogs]. tables = [Owners, Dogs] are connected by [Dogs.owner_id = Owners.owner_id]. So, tables = [Owners, Dogs] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 953
SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
What are each owner's first name and their dogs's name?
schema_links:
[Owners.first_name, Dogs.name, Dogs.owner_id = Owners.owner_id]
classification:
The question is "What are each [owner's] first name and their [dog's] name?". [owner's] matches table = [Owners]. [dog's] matches table = [Dogs]. tables = [Owners, Dogs] are connected by table = [Dogs]. So, tables = [Owners, Dogs] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 954
SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )
List the names of the dogs of the rarest breed and the treatment dates of them.
schema_links:
[Dogs.name, Breeds.breed_name, Treatments.date_of_treatment, Dogs.breed_code = Breeds.breed_code, Treatments.dog_id = Dogs.dog_id]
classification:
The question is "List the names of the dogs of the rarest breed and the treatment dates of them." [dogs] matches table = [Dogs]. [rarest breed] matches table = [Breeds]. [treatment dates] matches table = [Treatments]. So, tables = [Dogs, Breeds, Treatments] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 955
SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )
Which dogs are of the rarest breed? Show their names and treatment dates.
schema_links:
[Dogs.name, Breeds.breed_name, Treatments.date_of_treatment, Treatments.dog_id = Dogs.dog_id, Dogs.breed_code = Breeds.breed_code]
classification:
The question is "Which [dogs] are of the [rarest breed]? Show their names and treatment dates." [dogs] matches table = [Dogs]. [rarest breed] matches table = [Breeds]. So, tables = [Dogs, Breeds] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 956
SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'
Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.
schema_links:
[Dogs.*, Owners.state = 'Virginia', Owners.first_name, Dogs.name]
classification:
The question is "Which [dogs] are owned by someone who lives in Virginia? List the owner's first name and the dog's name.". [dogs] matches table = [Dogs]. So, tables = [Dogs] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 957
SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'
Find the first names of owners living in Virginia and the names of dogs they own.
schema_links:
[Owners.first_name,Owners.state,'Virginia',Dogs.name,Dogs.owner_id = Owners.owner_id]
classification:
The question is "Find the first names of [owners] living in [Virginia] and the names of [dogs] they own." [owners] matches table = [Owners]. [dogs] matches table = [Dogs]. So, tables = [Owners, Dogs] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 958
SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id
What are the arriving date and the departing date of the dogs who have gone through a treatment?
schema_links:
[Dogs.date_arrived, Dogs.date_departed, Treatments.dog_id = Dogs.dog_id]
classification:
The question is "What are the arriving date and the departing date of the [dogs] who have gone through a [treatment]?" [dogs] matches table = [Dogs]. [treatment] matches table = [Treatments]. So, tables = [Dogs, Treatments] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 959
SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id
Find the arriving date and the departing date of the dogs that received a treatment.
schema_links:
[Dogs.date_arrived, Dogs.date_departed, Treatments.dog_id = Dogs.dog_id]
classification:
The question is "Find the [arriving date] and the [departing date] of the [dogs] that received a [treatment]." [arriving date, departing date] matches columns = [date_arrived, date_departed]. [dogs] matches table = [Dogs]. [treatment] matches table = [Treatments]. So, tables = [Dogs, Treatments] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 960
SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )
List the last name of the owner owning the youngest dog.
schema_links:
[Owners.last_name, Dogs.age, Dogs.owner_id]
classification:
The question is "List the last name of the [owner] owning the youngest [dog].". [owner] matches table = [Owners]. [dog] matches table = [Dogs]. So, tables = [Owners, Dogs] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 961
SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )
Who owns the youngest dog? Give me his or her last name.
schema_links:
[Owners.last_name,Dogs.owner_id = Owners.owner_id]
classification:
The question is "Who owns the youngest dog? Give me his or her last name." [owners] matches table = [Owners]. [dogs] matches table = [Dogs]. tables = [Owners, Dogs] are connected by table = [Dogs.owner_id = Owners.owner_id]. So, tables = [Owners, Dogs] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 962
SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'
List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.
schema_links:
[Professionals.email_address,Professionals.state,'Hawaii','Wisconsin']
classification:
The question is "List the emails of the [professionals] who live in the state of Hawaii or the state of Wisconsin.". [professionals] matches table = [Professionals]. So, tables = [Professionals] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 963
SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'
What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?
schema_links:
[Professionals.email_address, Professionals.state, 'Hawaii', 'Wisconsin']
classification:
The question is "What are the emails of the [professionals] living in either the state of Hawaii or the state of Wisconsin?". [professionals] matches table = [Professionals]. So, tables = [Professionals] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 964
SELECT date_arrived ,  date_departed FROM Dogs
What are the arriving date and the departing date of all the dogs?
schema_links:
[Dogs.date_arrived, Dogs.date_departed, Dogs.*]
classification:
The given question is "What are the arriving date and the departing date of all the dogs?" It involves retrieving information from a single table, which is [Dogs]. Therefore, the number of tables involved is 1, and the SQL query can be classified as "EASY".
Label: "EASY"

index is 965
SELECT date_arrived ,  date_departed FROM Dogs
List the arrival date and the departure date for all the dogs.
schema_links:
[Dogs.date_arrived, Dogs.date_departed]
classification:
The question is "List the [arrival date] and the [departure date] for all the [dogs].". [arrival date] matches column = [Dogs.date_arrived]. [departure date] matches column = [Dogs.date_departed]. [dogs] matches table = [Dogs]. So, tables = [Dogs] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 966
SELECT count(DISTINCT dog_id) FROM Treatments
How many dogs went through any treatments?
schema_links:
[COUNT(DISTINCT Dogs.dog_id),Treatments.dog_id = Dogs.dog_id]
classification:
The question is "How many [dogs] went through any [treatments]?". [dogs] matches table = [Dogs]. [treatments] matches table = [Treatments]. So, tables = [Dogs, Treatments] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 967
SELECT count(DISTINCT dog_id) FROM Treatments
Count the number of dogs that went through a treatment.
schema_links:
[COUNT(Dogs.dog_id), Treatments.dog_id = Dogs.dog_id]
classification:
The question is "Count the number of [dogs] that went through a [treatment]." [dogs] matches table = [Dogs]. [treatment] matches table = [Treatments]. So, tables = [Dogs, Treatments] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 968
SELECT count(DISTINCT professional_id) FROM Treatments
How many professionals have performed any treatment to dogs?
schema_links:
[Professionals.professional_id, Treatments.professional_id = Professionals.professional_id, Treatments.dog_id = Dogs.dog_id]
classification:
The question is "How many [professionals] have performed any [treatment] to [dogs]?". [professionals] matches table = [Professionals]. [treatment] matches table = [Treatments]. [dogs] matches table = [Dogs]. So, tables = [Professionals, Treatments, Dogs] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 969
SELECT count(DISTINCT professional_id) FROM Treatments
Find the number of professionals who have ever treated dogs.
schema_links:
[COUNT(Professionals.professional_id),Treatments.professional_id = Professionals.professional_id]
classification:
The question is "Find the number of [professionals] who have ever treated [dogs]." [professionals] matches table = [Professionals]. [dogs] matches table = [Dogs]. tables = [Professionals, Dogs] are connected by table = [Treatments]. So, tables = [Professionals, Dogs, Treatments] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 970
SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'
Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.
schema_links:
[Professionals.role_code, Professionals.street, Professionals.city, Professionals.state, Professionals.city = 'West']
classification:
The question is "Which [professionals] live in a city containing the substring 'West'? List his or her [role], [street], [city], and [state].". [professionals] matches table = [Professionals]. So, tables = [Professionals] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 971
SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'
Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.
schema_links:
[Professionals.role_code, Professionals.street, Professionals.city, Professionals.state, 'West']
classification:
The question is "Find the [role], [street], [city] and [state] of the [professionals] living in a city that contains the substring 'West'.". [professionals] matches table = [Professionals]. So, tables = [Professionals] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 972
SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'
Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.
schema_links:
[Owners.first_name, Owners.last_name, Owners.email_address, Owners.state, 'North']
classification:
The question is "Which owners live in the state whose name contains the substring 'North'? List his first name, last name, and email.". [owners] matches the table = [Owners]. So, tables = [Owners] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 973
SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'
Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.
schema_links:
[Owners.first_name, Owners.last_name, Owners.email_address, Owners.state, 'North']
classification:
The question is "Return the first name, last name and email of the [owners] living in a [state] whose name contains the substring 'North'.". [owners] matches table = [Owners]. So, tables = [Owners] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 974
SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )
How many dogs have an age below the average?
schema_links:
[Dogs.age, average]
classification:
The question is "How many [dogs] have an age below the [average]?". [dogs] matches table = [Dogs]. So, tables = [Dogs] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 975
SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )
Count the number of dogs of an age below the average.
schema_links:
[COUNT(Dogs.dog_id),Dogs.age]
classification:
The question is "Count the number of [dogs] of an age below the average.". [dogs] matches table = [Dogs]. So, tables = [Dogs] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 976
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
How much does the most recent treatment cost?
schema_links:
[Treatments.cost_of_treatment]
classification:
The question is "How much does the most recent treatment cost?" The [most recent treatment] is related to the [Treatments] table. So, tables = [Treatments] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 977
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
Show me the cost of the most recently performed treatment.
schema_links:
[Treatments.cost_of_treatment]
Slicing error for the classification module
classification:
The question is "Show me the cost of the most recently performed treatment." There is no specific mention of tables or relationships in the question. Therefore, it is not possible to determine the complexity based on the number of tables. Additional information is needed to classify the query as either "EASY" or "COMPLEX".

index is 978
SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )
How many dogs have not gone through any treatment?
schema_links:
[Dogs.dog_id = Treatments.dog_id]
classification:
The question is "How many [dogs] have not gone through any [treatment]?". [dogs] matches table = [Dogs]. [treatment] matches table = [Treatments]. So, tables = [Dogs, Treatments] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 979
select count(*) from dogs where dog_id not in ( select dog_id from treatments )
Tell me the number of dogs that have not received any treatment .
schema_links:
[COUNT(Dogs.dog_id),Treatments.dog_id = Dogs.dog_id]
classification:
The question is "Tell me the number of [dogs] that have not received any [treatment]." [dogs] matches table = [Dogs]. [treatment] matches table = [Treatments]. So, tables = [Dogs, Treatments] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 980
SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )
How many owners temporarily do not have any dogs?
schema_links:
[Owners.owner_id = Dogs.owner_id]
classification:
The question is "How many [owners] temporarily do not have any [dogs]?" [owners] matches table = [Owners]. [dogs] matches table = [Dogs]. So, tables = [Owners, Dogs] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 981
SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )
Find the number of owners who do not own any dogs at this moment.
schema_links:
[Owners.owner_id = Dogs.owner_id]
classification:
The question is "Find the number of [owners] who do not own any [dogs] at this moment.". [owners] matches table = [Owners]. [dogs] matches table = [Dogs]. So, tables = [Owners, Dogs] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 982
SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )
How many professionals did not operate any treatment on dogs?
schema_links:
[Professionals.professional_id = Treatments.professional_id]
classification:
The question is "How many [professionals] did not operate any treatment on [dogs]?". [professionals] matches table = [Professionals]. [dogs] matches table = [Dogs]. So, tables = [Professionals, Dogs] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 983
SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )
Find the number of professionals who have not treated any dogs.
schema_links:
[Professionals.professional_id = Treatments.professional_id]
classification:
The question is "Find the number of [professionals] who have not treated any [dogs]. [professionals] matches table = [Professionals]. [dogs] matches table = [Dogs]. So, tables = [Professionals, Dogs] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 984
SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1
List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.
schema_links:
[Dogs.name, Dogs.age, Dogs.weight, Dogs.abandoned_yn, 1]
classification:
The question is "List the dog name, age, and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.". The relevant table for this query is [Dogs]. So, the number of tables is 1, and the SQL query can be classified as "EASY".
Label: "EASY"

index is 985
SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1
What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.
schema_links:
[Dogs.name, Dogs.age, Dogs.weight, Dogs.abandoned_yn=1]
classification:
The question is "What are the [dog name], [age] and [weight] of the [dogs] that were [abandoned]?". [dogs] matches table = [Dogs]. So, tables = [Dogs] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 986
SELECT avg(age) FROM Dogs
What is the average age of all the dogs?
schema_links:
[Dogs.age]
classification:
The question is "What is the average age of all the [dogs]?". [dogs] matches table = [Dogs]. So, tables = [Dogs] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 987
SELECT avg(age) FROM Dogs
Compute the average age of all the dogs.
schema_links:
[Dogs.age]
classification:
The question is "Compute the average age of all the [dogs]." [dogs] matches table = [Dogs]. So, tables = [Dogs] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 988
SELECT max(age) FROM Dogs
What is the age of the oldest dog?
schema_links:
[Dogs.age]
classification:
The question is "What is the age of the oldest [dog]?". [dog] matches table = [Dogs]. So, tables = [Dogs] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 989
SELECT max(age) FROM Dogs
Tell me the age of the oldest dog.
schema_links:
[Dogs.age]
classification:
The question is "Tell me the age of the oldest [dog]." [dog] matches table = [Dogs]. So, tables = [Dogs] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 990
SELECT charge_type ,  charge_amount FROM Charges
How much does each charge type costs? List both charge type and amount.
schema_links:
[Charges.charge_type, Charges.charge_amount]
classification:
The question is "How much does each charge type cost? List both charge type and amount.". [charge type] matches table = [Charges]. So, tables = [Charges] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 991
SELECT charge_type ,  charge_amount FROM Charges
List each charge type and its amount.
schema_links:
[Charges.charge_type, Charges.charge_amount]
classification:
The question is "List each [charge type] and its [amount]." [charge type] matches table = [Charges]. So, tables = [Charges] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 992
SELECT max(charge_amount) FROM Charges
How much does the most expensive charge type costs?
schema_links:
[Charges.charge_amount]
Slicing error for the classification module
classification:
The given question is incomplete and lacks necessary information. It states, "How much does the most expensive charge type costs?" without specifying the tables or columns involved. Please provide more context or clarify the question so that I can assist you further.

index is 993
SELECT max(charge_amount) FROM Charges
What is the charge amount of the most expensive charge type?
schema_links:
[Charges.charge_amount, Charges.charge_type]
classification:
The question is "What is the charge amount of the most expensive [charge type]?". [charge type] matches table = [Charges]. So, tables = [Charges] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 994
SELECT email_address ,  cell_number ,  home_phone FROM professionals
List the email, cell phone and home phone of all the professionals.
schema_links:
[Professionals.email_address, Professionals.cell_number, Professionals.home_phone]
classification:
The question is "List the email, cell phone, and home phone of all the [professionals]." [professionals] matches table = [professionals]. So, tables = [professionals] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 995
SELECT email_address ,  cell_number ,  home_phone FROM professionals
What are the email, cell phone and home phone of each professional?
schema_links:
[Professionals.email_address, Professionals.cell_number, Professionals.home_phone]
classification:
The question is "What are the [email], [cell phone], and [home phone] of each [professional]?". [email], [cell phone], and [home phone] match columns in table = [Professionals]. So, tables = [Professionals] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 996
SELECT DISTINCT breed_code ,  size_code FROM dogs
What are all the possible breed type and size type combinations?
schema_links:
[Breeds.breed_name, Dogs.breed_code = Breeds.breed_code, Sizes.size_description, Dogs.size_code = Sizes.size_code]
classification:
The question is "What are all the possible [breed type] and [size type] combinations?". [breed type] matches table = [Breeds]. [size type] matches table = [Sizes]. So, tables = [Breeds, Sizes] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 997
SELECT DISTINCT breed_code ,  size_code FROM dogs
Find the distinct breed type and size type combinations for dogs.
schema_links:
[Breeds.breed_name, Sizes.size_description, Dogs.*]
classification:
The question is "Find the distinct [breed type] and [size type] combinations for [dogs]." [breed type] matches table = [Breeds]. [size type] matches table = [Sizes]. [dogs] matches table = [Dogs]. So, tables = [Breeds, Sizes, Dogs] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 998
SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code
List the first name of all the professionals along with the description of the treatment they have done.
schema_links:
[Professionals.first_name, Treatment_Types.treatment_type_description]
classification:
The question is "List the first name of all the [professionals] along with the description of the [treatment] they have done.". [professionals] matches table = [Professionals]. [treatment] matches table = [Treatments]. tables = [Professionals, Treatments] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 999
SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code
What are each professional's first name and description of the treatment they have performed?
schema_links:
[Professionals.first_name, Treatment_Types.treatment_type_description]
classification:
The question is "What are each [professional]'s [first name] and [description] of the treatment they have performed?". [professionals] matches table = [professionals]. So, tables = [professionals] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 1000
SELECT count(*) FROM singer
How many singers are there?
schema_links:
[COUNT(singer.Singer_ID)]
classification:
The question is "How many [singers] are there?". [singers] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 1001
SELECT count(*) FROM singer
What is the count of singers?
schema_links:
[singer.*]
classification:
The question is "What is the count of [singers]?" [singers] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 1002
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
List the name of singers in ascending order of net worth.
schema_links:
[singer.Name, singer.Net_Worth_Millions]
classification:
The question is "List the name of [singers] in ascending order of [net worth]. [singers] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 1003
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
What are the names of singers ordered by ascending net worth?
schema_links:
[singer.Name, singer.Net_Worth_Millions]
classification:
The question is "What are the names of [singers] ordered by ascending net worth?". [singers] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 1004
SELECT Birth_Year ,  Citizenship FROM singer
What are the birth year and citizenship of singers?
schema_links:
[singer.Birth_Year, singer.Citizenship]
classification:
The question is "What are the [birth year] and [citizenship] of [singers]?". [birth year] matches column = [Singer_ID]. [citizenship] matches column = [Singer_ID]. [singers] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 1005
SELECT Birth_Year ,  Citizenship FROM singer
What are the birth years and citizenships of the singers?
schema_links:
[singer.Birth_Year, singer.Citizenship]
classification:
The question is "What are the birth years and citizenships of the [singers]?". [singers] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 1006
SELECT Name FROM singer WHERE Citizenship != "France"
List the name of singers whose citizenship is not "France".
schema_links:
[singer.Name, singer.Citizenship, 'France']
classification:
The question is "List the name of [singers] whose citizenship is not "France". [singers] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 1007
SELECT Name FROM singer WHERE Citizenship != "France"
What are the names of the singers who are not French citizens?
schema_links:
[singer.Name,singer.Citizenship,'French']
Slicing error for the classification module
classification:


index is 1008
SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949
Show the name of singers whose birth year is either 1948 or 1949?
schema_links:
[singer.Name, singer.Birth_Year, 1948, 1949]
classification:
The question is "Show the name of [singers] whose birth year is either 1948 or 1949?". [singers] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 1009
SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949
What are the names of the singers whose birth years are either 1948 or 1949?
schema_links:
[singer.Name, singer.Birth_Year, 1948, 1949]
classification:
The question is "What are the names of the [singers] whose birth years are either 1948 or 1949?". [singers] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 1010
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
What is the name of the singer with the largest net worth?
schema_links:
[singer.Name, singer.Net_Worth_Millions]
classification:
The question is "What is the name of the [singer] with the largest [net worth]?". [singer] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 1011
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
What is the name of the singer who is worth the most?
schema_links:
[singer.Name, singer.Net_Worth_Millions]
classification:
The question is "What is the name of the [singer] who is worth the most?" [singer] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 1012
SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship
Show different citizenship of singers and the number of singers of each citizenship.
schema_links:
[singer.Citizenship]
classification:
The question is "Show different [citizenship] of [singers] and the number of singers of each [citizenship].". [singers] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 1013
SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship
For each citizenship, how many singers are from that country?
schema_links:
[singer.Citizenship, singer.Singer_ID]
classification:
The question is "For each [citizenship], how many [singers] are from that country?". [citizenship] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 1014
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1
Please show the most common citizenship of singers.
schema_links:
[singer.Citizenship]
classification:
The question is "Please show the most common [citizenship] of [singers]." [citizenship] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 1015
select citizenship from singer group by citizenship order by count(*) desc limit 1
What is the most common singer citizenship ?
schema_links:
[singer.Citizenship]
classification:
The question is "What is the most common [singer] citizenship?". [singer] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 1016
SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship
Show different citizenships and the maximum net worth of singers of each citizenship.
schema_links:
[singer.Citizenship,singer.Net_Worth_Millions]
classification:
The question is "Show different [citizenships] and the maximum net worth of singers of each citizenship.". [citizenships] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 1017
SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship
For each citizenship, what is the maximum net worth?
schema_links:
[singer.Citizenship,singer.Net_Worth_Millions]
classification:
The question is "For each [citizenship], what is the maximum net worth?". [citizenship] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 1018
SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID
Show titles of songs and names of singers.
schema_links:
[song.Title,singer.Name,song.Singer_ID = singer.Singer_ID]
classification:
The question is "Show [titles of songs] and [names of singers]." [titles of songs] matches table = [song]. [names of singers] matches table = [singer]. tables = [song, singer] are connected by table = [song]. So, tables = [song, singer] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 1019
SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID
What are the song titles and singer names?
schema_links:
[song.Title, singer.Name]
classification:
The question is "What are the [song titles] and [singer names]?". [song titles] matches table = [song]. [singer names] matches table = [singer]. So, tables = [song, singer] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 1020
SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000
Show distinct names of singers that have songs with sales more than 300000.
schema_links:
[singer.Name, song.Sales, song.Singer_ID = singer.Singer_ID]
classification:
The question is "Show distinct names of [singers] that have songs with sales more than 300000." [singers] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 1021
SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000
what are the different names of the singers that have sales more than 300000?
schema_links:
[singer.Name, song.Sales, song.Singer_ID = singer.Singer_ID, 300000]
classification:
The question is "What are the different names of the [singers] that have [sales] more than 300000?". [singers] matches table = [singer]. [sales] matches table = [song]. So, tables = [singer, song] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 1022
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1
Show the names of singers that have more than one song.
schema_links:
[singer.Name, song.Singer_ID = singer.Singer_ID]
classification:
The question is "Show the names of [singers] that have more than one [song]. [singers] matches table = [singer]. [song] matches table = [song]. So, tables = [singer, song] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 1023
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1
What are the names of the singers that have more than one songs?
schema_links:
[singer.Name, song.Singer_ID = singer.Singer_ID]
classification:
The question is "What are the names of the [singers] that have more than one [songs]?". [singers] matches table = [singer]. [songs] matches table = [song]. So, tables = [singer, song] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 1024
SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name
Show the names of singers and the total sales of their songs.
schema_links:
[singer.Name, song.Sales, song.Singer_ID = singer.Singer_ID]
classification:
The question is "Show the names of [singers] and the total [sales] of their [songs]." [singers] matches table = [singer]. [sales] matches table = [song]. [songs] matches table = [song]. tables = [singer, song] are connected by table = [song]. So, tables = [singer, song] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 1025
SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name
For each singer name, what is the total sales for their songs?
schema_links:
[singer.Name,song.Sales,song.Singer_ID = singer.Singer_ID]
classification:
The question is "For each [singer] name, what is the total sales for their [songs]?". [singer] matches table = [singer]. [songs] matches table = [song]. So, tables = [singer, song] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 1026
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
List the name of singers that do not have any song.
schema_links:
[singer.Name, song.Singer_ID]
classification:
The question is "List the name of [singers] that do not have any [song]." [singers] matches table = [singer]. [song] matches table = [song]. So, tables = [singer, song] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 1027
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
What is the sname of every sing that does not have any song?
schema_links:
[singer.Name, song.Singer_ID = singer.Singer_ID]
Slicing error for the classification module
classification:
There seems to be an error in the question. The query is incomplete and contains a typo ("sname" instead of "name"). Could you please provide the correct question?

index is 1028
SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955
Show the citizenship shared by singers with birth year before 1945 and after 1955.
schema_links:
[singer.Citizenship,singer.Birth_Year,1945,1955]
classification:
The question is "Show the citizenship shared by [singers] with birth year before 1945 and after 1955.". [singers] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 1029
SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955
What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?
schema_links:
[singer.Citizenship, singer.Singer_ID, singer.Birth_Year, 1945, 1955]
classification:
The question is "What are the [citizenships] that are shared by [singers] with a birth year before 1945 and after 1955?". [citizenships] matches table = [singer]. [singers] matches table = [singer]. So, tables = [singer] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 1030
SELECT count(*) FROM Other_Available_Features
How many available features are there in total?
schema_links:
[Other_Available_Features.*]
classification:
The question is "How many [available features] are there in total?". [available features] matches table = [Other_Available_Features]. So, tables = [Other_Available_Features] which number of tables = 1. So, the SQL query can be classified as "EASY".
Label: "EASY"

index is 1031
SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  "AirCon"
What is the feature type name of feature AirCon?
schema_links:
[Ref_Feature_Types.feature_type_name,Other_Available_Features.feature_name,'AirCon']
classification:
The question is "What is the [feature type name] of feature [AirCon]?". [feature type name] matches table = [Ref_Feature_Types]. [feature] matches table = [Other_Available_Features]. So, tables = [Ref_Feature_Types, Other_Available_Features] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"

index is 1032
SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code
Show the property type descriptions of properties belonging to that code.
schema_links:
[]
Slicing error for the classification module
classification:
I apologize, but I'm unable to classify the question as "EASY" or "COMPLEX" based on the number of tables. The question you provided does not have a clear link to the database schema and tables provided earlier. If you have any other questions or if there's anything else I can assist you with, please let me know.

index is 1033
SELECT property_name FROM Properties WHERE property_type_code  =  "House" UNION SELECT property_name FROM Properties WHERE property_type_code  =  "Apartment" AND room_count  >  1
What are the names of properties that are either houses or apartments with more than 1 room?
schema_links:
[Properties.property_name, Properties.property_type_code = Ref_Property_Types.property_type_code, Properties.room_count, house, apartment, >1]
classification:
The question is "What are the names of [properties] that are either [houses] or [apartments] with more than 1 [room]?". [properties] matches table = [Properties]. [houses] and [apartments] can be derived from [Properties.property_type_code] and [Ref_Property_Types.property_type_code]. [rooms] matches [Properties.room_count]. So, tables = [Properties, Ref_Property_Types] which number of tables >= 1. So, the SQL query can be classified as "COMPLEX".
Label: "COMPLEX"
