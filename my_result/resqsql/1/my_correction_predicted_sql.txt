SELECT COUNT(Singer_ID) FROM singer
SELECT COUNT(*) FROM singer
SELECT name, country, age FROM singer ORDER BY age DESC
SELECT singer.Name, singer.Country, singer.Age  FROM singer  ORDER BY singer.Age DESC
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'
SELECT singer.Name, singer.Song_Name, singer.Song_release_year FROM singer WHERE singer.Age = (   SELECT MIN(Age)   FROM singer ) LIMIT 1;
SELECT s.name, s.song_release_year FROM singer s WHERE s.age = (SELECT MIN(age) FROM singer)
SELECT DISTINCT Country FROM singer WHERE Age > 20
SELECT DISTINCT country FROM singer WHERE Age > 20
SELECT country, COUNT(*) AS singer_count FROM singer GROUP BY country
SELECT COUNT(DISTINCT Singer_ID) AS Singer_Count, Country FROM singer GROUP BY Country
SELECT song_name  FROM singer  WHERE Age > (SELECT AVG(Age) FROM singer)
SELECT s.song_name FROM singer s WHERE s.Age > (SELECT AVG(Age) FROM singer)
SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;
SELECT MAX(Capacity) AS Maximum_Capacity, AVG(Capacity) AS Average_Capacity FROM stadium
SELECT avg(Capacity), max(Capacity) FROM stadium
SELECT name, capacity  FROM stadium  ORDER BY average DESC  LIMIT 1
SELECT name, capacity FROM stadium GROUP BY name, capacity HAVING average = (     SELECT MAX(average)     FROM stadium )
SELECT COUNT(*) FROM concert WHERE Year = 2014 OR Year = 2015
SELECT COUNT(DISTINCT concert_ID) FROM concert WHERE Year = 2014 OR Year = 2015;
SELECT stadium.Name, COUNT(concert.concert_ID) AS concert_count FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name
SELECT COUNT(concert_ID) AS concert_count, stadium.name  FROM concert  JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID  GROUP BY stadium.name
SELECT name, capacity FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year >= 2014 GROUP BY stadium.Stadium_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT name, capacity  FROM stadium  WHERE stadium_id = (     SELECT stadium_id      FROM concert      WHERE year > 2013      GROUP BY stadium_id      ORDER BY COUNT(concert_id) DESC      LIMIT 1 )
SELECT year, COUNT(*) AS concert_count  FROM concert  GROUP BY year  ORDER BY concert_count DESC  LIMIT 1
SELECT concert.Year FROM concert GROUP BY concert.Year ORDER BY COUNT(*) DESC LIMIT 1
SELECT name FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.stadium_id IS NULL
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
SELECT DISTINCT Country  FROM singer  WHERE Age > 40     AND Country IN (       SELECT Country        FROM singer        WHERE Age < 30    )
SELECT name FROM stadium WHERE stadium_id NOT IN (   SELECT stadium_id   FROM concert   WHERE year = 2014 )
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE Year = 2014)
SELECT concert_name, theme, COUNT(singer_id)  FROM concert  JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID  GROUP BY concert_name, theme
SELECT concert_name, theme, COUNT(singer.Singer_ID) FROM concert LEFT JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert_name, theme
SELECT singer.Name, COUNT(singer_in_concert.Singer_ID)  FROM singer  INNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  GROUP BY singer.Name
SELECT singer.Name, COUNT(singer_in_concert.singer_id)  FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  GROUP BY singer.Name
SELECT name  FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID  WHERE concert.Year = 2014
SELECT singer.Name FROM singer_in_concert JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE concert.Year = 2014
SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%'
SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%'
SELECT name, location  FROM stadium  WHERE stadium_id IN (     SELECT stadium_id      FROM concert      WHERE year = 2014 )  AND stadium_id IN (     SELECT stadium_id      FROM concert      WHERE year = 2015 )
SELECT stadium.name, stadium.location  FROM stadium  INNER JOIN concert ON stadium.stadium_id = concert.stadium_id  WHERE concert.year IN (2014, 2015)  GROUP BY stadium.name, stadium.location  HAVING COUNT(DISTINCT concert.year) = 2
SELECT COUNT(concert.concert_ID)  FROM concert  WHERE concert.Stadium_ID = (   SELECT stadium.Stadium_ID    FROM stadium    ORDER BY stadium.Capacity DESC    LIMIT 1 )
SELECT COUNT(DISTINCT concert_ID) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)
SELECT COUNT(*) FROM Pets WHERE weight > 10
SELECT count(*) FROM Pets WHERE weight > 10
SELECT weight  FROM Pets  WHERE pet_age = (   SELECT MIN(pet_age)    FROM Pets    WHERE pet_type = 'dog' )
SELECT min(weight) FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT min(pet_age) FROM Pets WHERE PetType = 'dog')
SELECT MAX(weight) AS max_weight, PetType FROM Pets GROUP BY PetType
SELECT Pets.PetType, MAX(Pets.weight) AS max_weight FROM Pets GROUP BY Pets.PetType
SELECT count(DISTINCT Has_Pet.PetID) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20
SELECT COUNT(DISTINCT has_pet.PetID) FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Student.Age > 20
SELECT COUNT(pets.petid) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'F' AND pets.pettype = 'dog'
SELECT COUNT(DISTINCT has_pet.petid)  FROM pets  JOIN has_pet ON pets.petid = has_pet.petid  JOIN student ON student.stuid = has_pet.stuid  WHERE pets.pettype = 'dog' AND student.sex = 'female'
SELECT COUNT(DISTINCT PetType) FROM Pets
SELECT COUNT(DISTINCT PetType) FROM Pets
SELECT Student.FName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog')
SELECT fname FROM Student WHERE StuID IN (     SELECT StuID     FROM Has_Pet     WHERE PetID IN (         SELECT PetID         FROM Pets         WHERE PetType = 'cat' OR PetType = 'dog'     ) )
SELECT DISTINCT fname  FROM Student  WHERE StuID IN (   SELECT StuID    FROM Has_Pet    JOIN Pets ON Has_Pet.PetID = Pets.PetID    WHERE PetType = 'cat' )  AND StuID IN (   SELECT StuID    FROM Has_Pet    JOIN Pets ON Has_Pet.PetID = Pets.PetID    WHERE PetType = 'dog' )
SELECT DISTINCT Fname  FROM Student  WHERE StuID IN (   SELECT StuID    FROM Has_Pet    WHERE PetID IN (     SELECT PetID      FROM Pets      WHERE PetType = 'cat'   ) )  AND StuID IN (   SELECT StuID    FROM Has_Pet    WHERE PetID IN (     SELECT PetID      FROM Pets      WHERE PetType = 'dog'   ) );
SELECT major, age  FROM Student  WHERE Student.StuID NOT IN (     SELECT Has_Pet.StuID      FROM Has_Pet      INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID      WHERE Pets.PetType = 'cat' )
SELECT major, age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))
SELECT Student.StuID FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType != 'cat' OR Pets.PetType IS NULL;
SELECT student.stuid FROM student LEFT JOIN has_pet ON student.stuid = has_pet.stuid LEFT JOIN pets ON has_pet.petid = pets.petid AND pets.pettype = 'cat' WHERE has_pet.petid IS NULL;
SELECT fname, age  FROM Student  WHERE EXISTS (   SELECT *   FROM Has_Pet   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Student.StuID = Has_Pet.StuID   AND PetType = 'dog' ) AND NOT EXISTS (   SELECT *   FROM Has_Pet   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Student.StuID = Has_Pet.StuID   AND PetType = 'cat' )
SELECT fname FROM Student WHERE StuID IN (     SELECT StuID FROM Has_Pet     WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog')     AND StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat')) )
SELECT Pets.PetType, Pets.weight FROM Pets WHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.pet_age LIMIT 1
SELECT pets.PetID, pets.weight FROM pets WHERE pets.pet_age > 1
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1
SELECT Pets.PetType, AVG(Pets.pet_age), MAX(Pets.pet_age) FROM Pets GROUP BY Pets.PetType
SELECT pets.pettype, AVG(pets.pet_age), MAX(pets.pet_age) FROM pets GROUP BY pets.pettype
SELECT Pets.PetType, AVG(Pets.weight) FROM Pets GROUP BY Pets.PetType
SELECT pettype, AVG(weight)  FROM Pets  GROUP BY pettype
SELECT fname, age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)
SELECT fname, age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID
SELECT pets.petid  FROM has_pet  JOIN student ON student.stuid = has_pet.stuid  WHERE student.lname = 'Smith'
SELECT petid FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.LName = 'Smith'
SELECT COUNT(*) AS pet_count, stuid FROM Has_Pet GROUP BY stuid
SELECT Has_Pet.StuID, COUNT(Has_Pet.PetID)  FROM Has_Pet  GROUP BY Has_Pet.StuID
SELECT fname, sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING COUNT(*) > 1
SELECT fname, sex FROM Student WHERE StuID IN (     SELECT StuID     FROM Has_Pet     GROUP BY StuID     HAVING COUNT(PetID) > 1 )
SELECT student.LName  FROM student  JOIN has_pet ON student.StuID = has_pet.StuID  JOIN pets ON has_pet.PetID = pets.PetID  WHERE pets.PetType = 'cat' AND pets.pet_age = 3
SELECT student.lname  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pet_age = 3    AND pets.pettype = 'cat'
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT avg(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT count(DISTINCT ContId) FROM continents
SELECT count(DISTINCT ContId) FROM continents
SELECT contid, continent, COUNT(countryid) AS num_countries FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY contid, continent
SELECT contid, continent, COUNT(*) AS country_count FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY contid, continent
SELECT count(*) FROM countries
SELECT count(*) FROM countries
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.ModelId) AS NumberOfModels FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.Model) AS NumOfModels FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id
SELECT model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)
SELECT T3.Model FROM cars_data AS T1 JOIN car_names AS T3 ON T1.Id = T3.MakeId WHERE T1.Horsepower = (     SELECT MIN(Horsepower)     FROM cars_data )
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT model FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT FULLNAME FROM car_makers WHERE Id IN (     SELECT MakeId     FROM car_names     WHERE ModelId IN (         SELECT Id         FROM cars_data         WHERE Year = 1970     ) )
SELECT SELECT DISTINCT Maker FROM car_makers JOIN car_names ON car_names.MakeId = car_makers.Id JOIN cars_data ON cars_data.Id = car_names.MakeId WHERE cars_data.Year = 1970
SELECT car_names.Make, MIN(cars_data.Year) AS EarliestYear FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_names.Make
SELECT car_makers.Maker, cars_data.Year FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data)
SELECT DISTINCT car_names.Model  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  WHERE cars_data.Year > 1980
SELECT model FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  WHERE cars_data.Year > 1980
SELECT continents.Continent, COUNT(DISTINCT car_makers.Maker) AS MakerCount FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent;
SELECT continents.Continent, COUNT(car_makers.Maker)  FROM continents  JOIN countries ON continents.ContId = countries.Continent  JOIN car_makers ON countries.CountryId = car_makers.Country  GROUP BY continents.Continent
SELECT countries.CountryName  FROM countries  JOIN car_makers ON countries.CountryId = car_makers.Country  GROUP BY countries.CountryName  ORDER BY COUNT(car_makers.Id) DESC  LIMIT 1
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1
SELECT count(DISTINCT model_list.ModelId) AS ModelCount, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName
SELECT COUNT(DISTINCT T3.model) AS num_car_models, T1.id, T1.fullname FROM car_makers AS T1 JOIN model_list AS T2 ON T1.id = T2.maker JOIN car_names AS T3 ON T2.modelid = T3.makeid JOIN cars_data AS T4 ON T3.makeid = T4.id GROUP BY T1.id, T1.fullname
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'amc' AND car_makers.FullName = 'amc hornet sportabout (sw)'
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_names.Make = 'amc hornet' AND model_list.Model = 'amc hornet sportabout (sw)'
SELECT COUNT(DISTINCT Maker) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'france')
SELECT COUNT(DISTINCT Maker) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France')
SELECT COUNT(DISTINCT car_names.Model) FROM car_names JOIN model_list ON car_names.Model = model_list.ModelId JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'usa'
SELECT COUNT(DISTINCT ModelId) FROM model_list WHERE Maker IN (   SELECT Id   FROM car_makers   WHERE Country = (     SELECT CountryId     FROM countries     WHERE CountryName = 'United States'   ) )
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4
SELECT avg(MPG) FROM cars_data WHERE Cylinders = 4
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974
SELECT MIN(Weight)  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cylinders = 8 AND Year = 1974
SELECT car_makers.Maker, car_names.Model FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId
SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model
SELECT countryname, countryid FROM countries WHERE countryid IN (SELECT country                     FROM car_makers)
SELECT countryname, countryid FROM countries WHERE countryid IN (SELECT country                     FROM car_makers)
SELECT count(*) FROM cars_data WHERE Horsepower > 150
SELECT count(*) FROM cars_data WHERE Horsepower > 150
SELECT year, AVG(Weight) AS average_weight FROM cars_data GROUP BY year
SELECT AVG(Weight), Year FROM cars_data GROUP BY Year
SELECT countries.CountryName  FROM countries  JOIN car_makers ON countries.CountryId = car_makers.Country  JOIN continents ON countries.Continent = continents.ContId  WHERE continents.Continent = 'Europe'  GROUP BY countries.CountryName  HAVING COUNT(DISTINCT car_makers.Id) >= 3;
SELECT countries.CountryName  FROM countries  JOIN continents ON countries.Continent = continents.ContId  JOIN car_makers ON car_makers.Country = countries.CountryId  WHERE continents.Continent = 'Europe' GROUP BY countries.CountryName  HAVING COUNT(DISTINCT car_makers.Id) >= 3
SELECT MAX(cars_data.Horsepower) AS max_horsepower, car_makers.Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3 GROUP BY car_makers.Maker
SELECT max(cars_data.Horsepower) AS max_horsepower, car_makers.Maker AS make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3 GROUP BY car_makers.Maker
SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.MPG = (SELECT MAX(MPG) FROM cars_data)
SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId ORDER BY cars_data.MPG DESC LIMIT 1
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT avg(Horsepower) FROM cars_data WHERE Year < 1980
SELECT avg(Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'volvo'
SELECT avg(cars_data.Edispl) FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'volvo'
SELECT cylinders, MAX(Accelerate)  FROM cars_data  GROUP BY cylinders
SELECT MAX(Accelerate) FROM cars_data GROUP BY Cylinders
SELECT model FROM model_list GROUP BY model ORDER BY COUNT(MakeId) DESC LIMIT 1
SELECT model  FROM model_list  GROUP BY model  ORDER BY COUNT(DISTINCT Maker) DESC  LIMIT 1
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4
SELECT COUNT(*) FROM cars_data WHERE Year = 1980
SELECT COUNT(DISTINCT Id) FROM cars_data WHERE Year = 1980
SELECT COUNT(DISTINCT model_list.model) AS TotalCarModels FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname = 'American Motor Company'
SELECT COUNT(DISTINCT model) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = 'American Motor Company'
SELECT fullname, id  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  GROUP BY fullname, id  HAVING COUNT(model_list.Model) > 3
SELECT car_makers.Maker, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker, car_makers.Id HAVING COUNT(model_list.ModelId) > 3
SELECT DISTINCT car_names.Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN car_makers ON car_names.Make = car_makers.Maker JOIN cars_data ON car_names.Model = cars_data.Id WHERE car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500
SELECT DISTINCT model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500
SELECT DISTINCT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000
SELECT DISTINCT Year  FROM cars_data  WHERE Weight < 4000 OR Weight > 3000;
SELECT cars_data.Horsepower  FROM cars_data  WHERE cars_data.Accelerate = (   SELECT max(cars_data.Accelerate)    FROM cars_data )
SELECT cars_data.Horsepower  FROM cars_data  WHERE cars_data.Accelerate = (SELECT MAX(cars_data.Accelerate) FROM cars_data)
SELECT cars_data.Cylinders  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  WHERE model_list.Maker = 'volvo'  AND cars_data.Accelerate = (   SELECT MIN(Accelerate)    FROM cars_data )
SELECT cylinders FROM cars_data WHERE Id = (   SELECT car_names.MakeId    FROM car_names    JOIN model_list ON car_names.Model = model_list.Model   WHERE model_list.Maker = (     SELECT Id      FROM car_makers      WHERE Maker = 'volvo'   ) ) ORDER BY Accelerate ASC LIMIT 1
SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT max(Horsepower) FROM cars_data)
SELECT count(DISTINCT T1.CountryId) FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count(DISTINCT T2.Id) > 2
SELECT COUNT(DISTINCT Country)  FROM car_makers  GROUP BY Country  HAVING COUNT(DISTINCT Id) > 2
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6
SELECT model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1
SELECT model FROM model_list WHERE modelid = (   SELECT makeid   FROM car_names   WHERE makeid = (     SELECT makeid     FROM cars_data     WHERE cylinders = 4     AND horsepower = (       SELECT MAX(horsepower)       FROM cars_data       WHERE cylinders = 4     )   ) )
SELECT car_names.makeid, car_names.make  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  WHERE cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data)  AND cars_data.cylinders <= 3
SELECT car_names.MakeId, car_names.Make FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders < 4
SELECT MAX(MPG)  FROM cars_data  WHERE Cylinders = 8 AND Year < 1980
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker != 'Ford Motor Company'
SELECT DISTINCT T2.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.ModelId JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T1.Weight < 3500 AND T4.FullName <> 'Ford Motor Company'
SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers)
SELECT countryname  FROM countries  WHERE countryid NOT IN (SELECT country FROM car_makers)
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT model_list.Model) >= 2 AND COUNT(DISTINCT car_makers.Id) > 3
SELECT car_makers.Id, car_makers.Maker  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  JOIN car_names ON model_list.ModelId = car_names.MakeId  JOIN cars_data ON car_names.MakeId = cars_data.Id  GROUP BY car_makers.Id, car_makers.Maker  HAVING COUNT(DISTINCT model_list.Model) >= 2 AND COUNT(DISTINCT car_names.MakeId) > 3
SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId GROUP BY countries.CountryId, countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) > 3 OR car_names.Model = 'fiat';
SELECT countryid, countryname FROM countries WHERE countryid IN (   SELECT country   FROM car_makers   GROUP BY country   HAVING COUNT(DISTINCT maker) > 3 ) OR countryid IN (   SELECT countries.countryid   FROM countries   JOIN car_makers ON countries.countryid = car_makers.country   JOIN model_list ON car_makers.id = model_list.maker   JOIN car_names ON model_list.modelid = car_names.makeid   WHERE car_names.make = 'fiat' ) GROUP BY countryid, countryname
SELECT Country FROM airlines WHERE Airline = "JetBlue Airways"
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT abbreviation FROM airlines WHERE Airline = "JetBlue Airways"
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways'
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'
SELECT airportcode, airportname FROM airports WHERE city = 'Anthony'
SELECT airportcode, airportname FROM airports WHERE City = 'Anthony'
SELECT COUNT(DISTINCT uid) FROM airlines
SELECT COUNT(DISTINCT uid) FROM airlines
SELECT COUNT(DISTINCT AirportCode) FROM airports
SELECT COUNT(*) FROM airports
SELECT count(*) FROM flights
SELECT COUNT(*) FROM flights
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
SELECT count(DISTINCT uid) FROM airlines WHERE Country = 'USA'
SELECT COUNT(*) FROM airlines WHERE Country = 'USA'
SELECT City, Country FROM airports WHERE AirportName = 'Alton'
SELECT City, Country FROM airports WHERE AirportName = 'Alton'
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
SELECT AirportName FROM airports WHERE City = 'Aberdeen'
SELECT AirportName FROM airports WHERE City = 'Aberdeen'
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'
SELECT count(*) FROM flights WHERE SourceAirport = 'APG'
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'
SELECT COUNT(FlightNo)  FROM flights  WHERE SourceAirport IN (     SELECT AirportCode      FROM airports      WHERE City = 'Aberdeen' )
SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = 'Aberdeen'
SELECT COUNT(*) FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen'
SELECT COUNT(*) FROM flights WHERE DestAirport = 'Aberdeen'
SELECT count(*) FROM airports  JOIN flights ON airports.airportcode = flights.sourceairport  WHERE airports.city = 'Aberdeen'  AND flights.destairport = (SELECT airportcode FROM airports WHERE city = 'Ashley')
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley'
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue Airways'
SELECT count(*) FROM flights WHERE Airline = 'JetBlue Airways'
SELECT count(*) FROM flights  JOIN airlines ON flights.airline = airlines.Airline  JOIN airports ON flights.destairport = airports.AirportCode  WHERE airlines.Airline = 'United Airlines'  AND airports.AirportCode = 'ASY'
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'ASY' AND airlines.Airline = 'United Airlines'
SELECT COUNT(*)  FROM flights  WHERE SourceAirport = 'AHD'    AND Airline IN (SELECT Airline FROM airlines WHERE Airline = 'United Airlines')
SELECT COUNT(DISTINCT FlightNo) FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD' AND airlines.Airline = 'United Airlines'
SELECT COUNT(*)  FROM flights  JOIN airlines ON flights.airline = airlines.abbreviation JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.airline = 'United Airlines'  AND airports.city = 'Aberdeen'
SELECT COUNT(*)  FROM flights  JOIN airlines ON flights.airline = airlines.Airline  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airlines.Airline = 'United Airlines'  AND airports.City = 'Aberdeen';
SELECT airports.City  FROM airports  JOIN flights ON flights.DestAirport = airports.AirportCode  GROUP BY airports.City  ORDER BY COUNT(flights.DestAirport) DESC  LIMIT 1
SELECT airports.City  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  GROUP BY airports.City  ORDER BY COUNT(flights.DestAirport) DESC  LIMIT 1
SELECT city  FROM airports  JOIN flights ON airports.AirportCode = flights.SourceAirport  GROUP BY airports.City  ORDER BY COUNT(flights.SourceAirport) DESC  LIMIT 1
SELECT airports.City  FROM airports  JOIN flights ON airports.AirportCode = flights.SourceAirport  GROUP BY airports.City  ORDER BY COUNT(flights.SourceAirport) DESC  LIMIT 1
SELECT airports.AirportCode  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  GROUP BY airports.AirportCode  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT airports.AirportCode  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  GROUP BY airports.AirportCode  ORDER BY COUNT(flights.FlightNo) DESC  LIMIT 1
SELECT airports.AirportCode FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.AirportCode ORDER BY COUNT(*) ASC LIMIT 1
SELECT airports.AirportCode FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY flights.DestAirport ORDER BY COUNT(flights.DestAirport) ASC LIMIT 1
SELECT airline, COUNT(*) AS flight_count FROM flights GROUP BY airline ORDER BY flight_count DESC LIMIT 1
SELECT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  GROUP BY airlines.Airline  ORDER BY COUNT(flights.FlightNo) DESC  LIMIT 1
SELECT abbreviation, country  FROM airlines  JOIN flights ON flights.airline = airlines.airline  GROUP BY abbreviation, country  HAVING count(flightno) = (   SELECT MIN(count(flightno))    FROM flights    GROUP BY airline )
SELECT abbreviation, country FROM airlines WHERE uid = (     SELECT airline     FROM flights     GROUP BY airline     HAVING COUNT(*) = (         SELECT MIN(cnt)         FROM (             SELECT COUNT(*) AS cnt             FROM flights             GROUP BY airline         ) AS T     ) )
SELECT airline FROM airlines  WHERE uid IN (   SELECT DISTINCT Airline    FROM flights    WHERE SourceAirport = 'AHD' OR DestAirport = 'AHD' )
SELECT DISTINCT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.SourceAirport = 'AHD'
SELECT airline FROM airlines WHERE uid IN (SELECT DISTINCT Airline FROM flights WHERE DestAirport = 'AHD')
SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.DestAirport = 'AHD'
SELECT airline FROM airlines JOIN flights ON airlines.uid = flights.airline WHERE flights.sourceairport IN ('APG', 'CVO')   AND flights.destairport IN ('APG', 'CVO') GROUP BY airline HAVING COUNT(DISTINCT flights.sourceairport) = 2;
SELECT airlines.Airline FROM flights INNER JOIN airlines ON flights.Airline = airlines.uid INNER JOIN airports AS source_airport ON flights.SourceAirport = source_airport.AirportCode INNER JOIN airports AS dest_airport ON flights.DestAirport = dest_airport.AirportCode WHERE (source_airport.AirportCode = 'APG' OR source_airport.AirportCode = 'CVO')   AND (dest_airport.AirportCode = 'APG' OR dest_airport.AirportCode = 'CVO') GROUP BY airlines.Airline HAVING COUNT(DISTINCT source_airport.AirportCode) > 1 AND COUNT(DISTINCT dest_airport.AirportCode) > 1;
SELECT airline  FROM airlines  WHERE uid IN (SELECT DISTINCT airline FROM flights WHERE sourceairport = 'CVO')    AND uid NOT IN (SELECT DISTINCT airline FROM flights WHERE sourceairport = 'APG')
SELECT airlines.Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline INNER JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'CVO' AND airlines.Airline NOT IN (     SELECT airlines.Airline     FROM airlines     INNER JOIN flights ON airlines.uid = flights.Airline     INNER JOIN airports ON flights.SourceAirport = airports.AirportCode     WHERE airports.City = 'APG' ) GROUP BY airlines.Airline
SELECT airlines.Airline  FROM flights  JOIN airlines ON flights.Airline = airlines.Abbreviation  GROUP BY airlines.Airline  HAVING COUNT(flights.FlightNo) >= 10
SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.uid, airlines.Airline HAVING COUNT(*) < 200
SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING COUNT(*) < 200
SELECT flightno  FROM flights  WHERE Airline = 'United Airlines'
SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = 'United Airlines'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = "APG"
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'APG'
SELECT FlightNo FROM flights WHERE DestAirport = "APG"
SELECT flights.FlightNo  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.AirportName = 'APG';
SELECT flights.FlightNo FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen'
SELECT flights.FlightNo  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = "Aberdeen";
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT COUNT(DISTINCT flights.flightno)  FROM flights  JOIN airports ON flights.destairport = airports.AirportCode WHERE airports.City = 'Aberdeen' OR airports.City = 'Abilene'
SELECT count(*)  FROM flights  WHERE DestAirport IN ('Aberdeen', 'Abilene')
SELECT airportname  FROM airports  WHERE airportcode NOT IN (     SELECT sourceairport      FROM flights      UNION      SELECT destairport      FROM flights )
SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights)   AND AirportCode NOT IN (SELECT DestAirport FROM flights)
SELECT count(Employee_ID) FROM employee
SELECT COUNT(*) FROM employee
SELECT employee.Name FROM employee ORDER BY employee.Age ASC
SELECT employee.Name FROM employee ORDER BY employee.Age ASC
SELECT city, COUNT(Employee_ID) AS employee_count FROM employee GROUP BY city
SELECT COUNT(*) AS employee_count, city FROM employee GROUP BY city
SELECT City FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(DISTINCT Employee_ID) > 1
SELECT employee.city FROM employee WHERE age < 30 GROUP BY employee.city HAVING COUNT(DISTINCT employee.Employee_ID) > 1
SELECT COUNT(DISTINCT T1.Shop_ID) AS num_shops, T1.Location FROM shop AS T1 GROUP BY T1.Location
SELECT COUNT(Shop_ID), Location  FROM shop  GROUP BY Location
SELECT manager_name, district  FROM shop  WHERE number_products = (SELECT MAX(number_products) FROM shop)
SELECT manager_name, district FROM shop WHERE number_products = (     SELECT MAX(number_products)     FROM shop )
SELECT MIN(Number_products), MAX(Number_products) FROM shop
SELECT MIN(Number_products), MAX(Number_products) FROM shop
SELECT name, location, district FROM shop ORDER BY Number_products DESC
SELECT shop.name, shop.location, shop.district  FROM shop  ORDER BY shop.number_products DESC
SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)
SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop)
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.Employee_ID, employee.Name ORDER BY COUNT(*) DESC LIMIT 1
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.Name ORDER BY COUNT(*) DESC LIMIT 1
SELECT employee.Name FROM evaluation JOIN employee ON evaluation.Employee_ID = employee.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1
SELECT employee.Name FROM evaluation JOIN employee ON evaluation.Employee_ID = employee.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1
SELECT name  FROM employee  WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
SELECT name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1
SELECT name  FROM shop  WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
SELECT name FROM shop WHERE shop.Shop_ID NOT IN (SELECT DISTINCT Shop_ID FROM hiring)
SELECT COUNT(T2.Employee_ID) AS num_employees, T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Name
SELECT COUNT(T1.Employee_ID), T2.Name FROM shop AS T2 JOIN hiring AS T1 ON T2.Shop_ID = T1.Shop_ID GROUP BY T2.Name
SELECT SUM(Bonus) AS Total_Bonus FROM evaluation
SELECT SUM(Bonus) FROM evaluation
SELECT * FROM hiring
SELECT hiring.*, employee.Name, employee.Age, employee.City, shop.Name AS Shop_Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name FROM hiring JOIN employee ON hiring.Employee_ID = employee.Employee_ID JOIN shop ON hiring.Shop_ID = shop.Shop_ID;
SELECT DISTINCT district FROM shop WHERE district IN (     SELECT DISTINCT district FROM shop WHERE number_products < 3000 ) AND district IN (     SELECT DISTINCT district FROM shop WHERE number_products > 10000 )
SELECT DISTINCT district  FROM shop  WHERE district IN (     SELECT district      FROM shop      GROUP BY district      HAVING SUM(CASE WHEN number_products < 3000 THEN 1 ELSE 0 END) > 0      AND SUM(CASE WHEN number_products > 10000 THEN 1 ELSE 0 END) > 0 )
SELECT COUNT(DISTINCT Location) FROM shop
SELECT COUNT(DISTINCT Location) FROM shop
SELECT COUNT(*) FROM Documents
SELECT COUNT(*) FROM Documents
SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents;
SELECT document_id, document_name, document_description FROM documents
SELECT documents.document_name, documents.template_id  FROM documents  WHERE documents.document_description LIKE '%w%'
SELECT document_name, template_id FROM documents WHERE document_description LIKE '%w%';
SELECT document_id, template_id, document_description  FROM documents  WHERE document_name = "Robbin CV"
SELECT document_id, template_id, document_description FROM documents WHERE document_name = 'Robbin CV'
SELECT count(DISTINCT Template_ID) FROM Documents
SELECT COUNT(DISTINCT Template_ID) FROM Documents
SELECT count(*)  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  WHERE Templates.Template_Type_Code = 'PPT'
SELECT COUNT(*) FROM Documents WHERE Template_ID IN (     SELECT Template_ID     FROM Templates     WHERE Template_Type_Code = 'PPT' )
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS Number_of_Documents FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID
SELECT Templates.Template_ID, COUNT(Documents.Template_ID)  FROM Documents  INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID
SELECT Templates.Template_ID, Templates.Template_Type_Code  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  GROUP BY Templates.Template_ID  ORDER BY COUNT(Documents.Document_ID) DESC  LIMIT 1
SELECT templates.template_id, templates.template_type_code FROM templates JOIN documents ON documents.template_id = templates.template_id GROUP BY templates.template_id, templates.template_type_code ORDER BY COUNT(documents.document_id) DESC LIMIT 1
SELECT templates.Template_ID FROM templates JOIN documents ON templates.Template_ID = documents.Template_ID GROUP BY templates.Template_ID HAVING COUNT(DISTINCT documents.Document_ID) > 1
SELECT Templates.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1
SELECT templates.template_id FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id WHERE documents.template_id IS NULL
SELECT templates.template_id FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id WHERE documents.template_id IS NULL
SELECT COUNT(*) FROM Templates
SELECT COUNT(*) FROM Templates
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates
SELECT template_id, version_number, template_type_code FROM Templates
SELECT DISTINCT Template_Type_Code FROM Templates
SELECT Template_Type_Code FROM Ref_Template_Types
SELECT templates.template_id  FROM templates  WHERE templates.template_type_code = 'PP' OR templates.template_type_code = 'PPT'
SELECT templates.template_id FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE templates.template_type_code IN ('PP', 'PPT')
SELECT COUNT(Template_ID) FROM Templates WHERE Template_Type_Code = 'CV'
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5
SELECT template_type_code, COUNT(template_id) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY template_type_code
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS Template_Count FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code
SELECT template_type_code, COUNT(template_id) AS template_count FROM templates GROUP BY template_type_code ORDER BY template_count DESC LIMIT 1
SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT Ref_Template_Types.Template_Type_Code  FROM Templates  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  GROUP BY Ref_Template_Types.Template_Type_Code  HAVING COUNT(Templates.Template_ID) < 3
SELECT Ref_Template_Types.Template_Type_Code  FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_Type_Code HAVING COUNT(Templates.Template_ID) < 3
SELECT version_number, template_type_code FROM Templates WHERE version_number = (SELECT MIN(version_number) FROM Templates)
SELECT min(Version_Number), Template_Type_Code FROM Templates
SELECT Ref_Template_Types.Template_Type_Code  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Documents.Document_Name = "Data base"
SELECT template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id WHERE documents.document_name = 'Data base'
SELECT documents.Document_Name  FROM documents  JOIN templates ON documents.Template_ID = templates.Template_ID  WHERE templates.Template_Type_Code = 'BK'
SELECT documents.document_name FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'BK'
SELECT Ref_Template_Types.Template_Type_Code, COUNT(*) AS Document_Count FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code
SELECT template_type_code, COUNT(DISTINCT documents.document_id)  FROM ref_template_types  JOIN templates ON ref_template_types.template_type_code = templates.template_type_code  JOIN documents ON templates.template_id = documents.template_id  GROUP BY template_type_code
SELECT Ref_Template_Types.Template_Type_Code  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  GROUP BY Ref_Template_Types.Template_Type_Code  ORDER BY COUNT(Documents.Document_ID) DESC  LIMIT 1
SELECT Ref_Template_Types.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY COUNT(Documents.Template_ID) DESC LIMIT 1
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_ID FROM Documents)
SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN (   SELECT Template_Type_Code    FROM Templates    WHERE Template_ID IN (     SELECT Template_ID      FROM Documents   ) )
SELECT template_type_code, template_type_description FROM Ref_Template_Types
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
SELECT template_type_description FROM Ref_Template_Types WHERE Template_Type_Code = "AD"
SELECT template_type_description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = "Book"
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = "Book"
SELECT DISTINCT t.template_type_description FROM ref_template_types AS t JOIN templates AS temp ON t.template_type_code = temp.template_type_code JOIN documents AS doc ON temp.template_id = doc.template_id
SELECT DISTINCT Template_Details FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation'
SELECT template_id FROM templates WHERE template_type_code = (SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Presentation')
SELECT COUNT(Paragraph_ID) FROM Paragraphs
SELECT COUNT(Paragraph_ID) FROM Paragraphs;
SELECT count(paragraphs.paragraph_id) FROM paragraphs  JOIN documents ON paragraphs.document_id = documents.document_id  WHERE documents.document_name = 'Summer Show'
SELECT COUNT(*) FROM Paragraphs  JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID  WHERE Documents.Document_Name = 'Summer Show'
SELECT paragraph_text, paragraph_id, document_id, other_details FROM paragraphs WHERE paragraph_text = 'Korea'
SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'
SELECT paragraphs.paragraph_id, paragraphs.paragraph_text  FROM paragraphs  JOIN documents ON paragraphs.document_id = documents.document_id  WHERE documents.document_name = 'Welcome to NY'
SELECT paragraph_id, paragraph_text  FROM paragraphs  JOIN documents ON paragraphs.document_id = documents.document_id  WHERE documents.document_name = 'Welcome to NY'
SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID = (   SELECT Document_ID   FROM Documents   WHERE Document_Name = 'Customer reviews' )
SELECT paragraph_text  FROM paragraphs  WHERE document_id = (   SELECT document_id    FROM documents    WHERE document_name = 'Customer reviews' )
SELECT documents.document_id, COUNT(paragraphs.paragraph_id) AS paragraph_count FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY documents.document_id
SELECT documents.document_id, COUNT(paragraphs.paragraph_id)  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  ORDER BY documents.document_id
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id)  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id, documents.document_name
SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS paragraph_count FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name;
SELECT documents.document_id  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  HAVING COUNT(DISTINCT paragraphs.paragraph_id) >= 2
SELECT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id HAVING COUNT(paragraphs.paragraph_id) >= 2
SELECT documents.document_id, documents.document_name  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id, documents.document_name  ORDER BY COUNT(paragraphs.paragraph_id) DESC  LIMIT 1
SELECT documents.document_id, documents.document_name FROM documents JOIN (     SELECT document_id, COUNT(paragraph_id) AS paragraph_count     FROM paragraphs     GROUP BY document_id ) AS paragraph_counts ON documents.document_id = paragraph_counts.document_id ORDER BY paragraph_counts.paragraph_count DESC LIMIT 1
SELECT documents.document_id  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  ORDER BY COUNT(paragraphs.paragraph_id) ASC  LIMIT 1
SELECT documents.document_id  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY COUNT(paragraphs.paragraph_id) LIMIT 1
SELECT document_id  FROM Paragraphs  GROUP BY document_id  HAVING COUNT(paragraph_id) BETWEEN 1 AND 2
SELECT document_id  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  HAVING COUNT(DISTINCT paragraphs.paragraph_id) BETWEEN 1 AND 2
SELECT document_id FROM Paragraphs WHERE paragraph_text IN ('Brazil', 'Ireland')
SELECT documents.document_id FROM documents JOIN paragraphs ON paragraphs.document_id = documents.document_id WHERE paragraphs.paragraph_text IN ('Brazil', 'Ireland');
SELECT count(Teacher_ID) FROM teacher
SELECT COUNT(Teacher_ID) FROM teacher
SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC
SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC
SELECT teacher.Age, teacher.Hometown FROM teacher
SELECT Age, Hometown FROM teacher
SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'
SELECT name FROM teacher WHERE hometown <> 'Little Lever Urban District'
SELECT teacher.Name FROM teacher WHERE teacher.Age = 32 OR teacher.Age = 33
SELECT teacher.Name FROM teacher WHERE teacher.Age = 32 OR teacher.Age = 33
SELECT hometown  FROM teacher  ORDER BY Age ASC  LIMIT 1
SELECT teacher.Hometown FROM teacher ORDER BY teacher.Age ASC LIMIT 1
SELECT hometown, COUNT(*) AS num_teachers FROM teacher GROUP BY hometown
SELECT teacher.Hometown, COUNT(teacher.Teacher_ID) FROM teacher GROUP BY teacher.Hometown
SELECT teacher.hometown  FROM teacher  GROUP BY teacher.hometown  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT teacher.hometown, COUNT(*) AS count FROM teacher GROUP BY teacher.hometown ORDER BY count DESC LIMIT 1
SELECT teacher.Hometown FROM teacher GROUP BY teacher.Hometown HAVING COUNT(DISTINCT teacher.Teacher_ID) > 1
SELECT DISTINCT hometown  FROM teacher  GROUP BY hometown  HAVING COUNT(DISTINCT Teacher_ID) > 1
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID
SELECT T1.Name, T3.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID ORDER BY T1.Name ASC
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course.Course_ID = course_arrange.Course_ID WHERE course.Course = 'Math'
SELECT teacher.Name  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  JOIN course ON course_arrange.Course_ID = course.Course_ID  WHERE course.Course = 'Math'
SELECT teacher.Name, COUNT(course_arrange.Course_ID)  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  GROUP BY teacher.Name
SELECT T1.Name, COUNT(T2.Course_ID) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Name
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2
SELECT name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)
SELECT DISTINCT name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)
SELECT COUNT(ID) FROM visitor WHERE Age < 30
SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Level_of_membership DESC
SELECT avg(Age) FROM visitor WHERE Level_of_membership <= 4
SELECT visitor.Name, visitor.Level_of_membership  FROM visitor  WHERE visitor.Level_of_membership > 4  ORDER BY visitor.Age ASC
SELECT museum_id, name  FROM museum  ORDER BY num_of_staff DESC  LIMIT 1
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'
SELECT name FROM museum WHERE num_of_staff > (SELECT MIN(num_of_staff) FROM museum WHERE open_year > 2010)
SELECT visitor.ID, visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID, visitor.Name, visitor.Age HAVING COUNT(DISTINCT visit.Museum_ID) > 1
SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID, visitor.Name, visitor.Level_of_membership ORDER BY SUM(visit.Total_spent) DESC LIMIT 1
SELECT museum_id, name FROM museum GROUP BY museum_id, name ORDER BY COUNT(*) DESC LIMIT 1
SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)
SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visit.visitor_ID = visitor.ID ORDER BY visit.Num_of_Ticket DESC LIMIT 1
SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit
SELECT SUM(Total_spent) AS Total_Ticket_Expense FROM visit WHERE visitor_ID IN (   SELECT ID   FROM visitor   WHERE Level_of_membership = 1 )
SELECT visitor.name FROM visitor JOIN visit ON visit.visitor_ID = visitor.ID JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year < 2009 OR museum.Open_Year > 2011 GROUP BY visitor.name HAVING COUNT(DISTINCT museum.Museum_ID) > 1
SELECT count(DISTINCT T1.ID) FROM visitor AS T1 WHERE T1.ID NOT IN (   SELECT DISTINCT T2.visitor_ID   FROM visit AS T2   JOIN museum AS T3 ON T2.Museum_ID = T3.Museum_ID   WHERE T3.Open_Year > 2010 )
SELECT COUNT(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008
SELECT count(player_id) FROM players
SELECT COUNT(player_id) FROM players
SELECT COUNT(match_num) AS total_matches FROM matches
SELECT COUNT(*) FROM matches
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SELECT avg(loser_age) AS average_loser_age, avg(winner_age) AS average_winner_age  FROM matches
SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches
SELECT AVG(winner_rank) FROM matches
SELECT AVG(winner_rank) FROM matches
SELECT max(loser_rank) AS highest_rank FROM matches
SELECT MAX(loser_rank) AS best_rank_of_losers FROM matches
SELECT COUNT(DISTINCT country_code) FROM players
SELECT count(DISTINCT country_code) FROM players
SELECT COUNT(DISTINCT loser_name) FROM matches
SELECT COUNT(DISTINCT loser_name) FROM matches
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10
SELECT DISTINCT winner_name  FROM matches  WHERE year IN (2013, 2016)
SELECT DISTINCT players.first_name, players.last_name FROM players WHERE players.player_id IN (     SELECT matches.winner_id     FROM matches     WHERE matches.year = 2013 ) AND players.player_id IN (     SELECT matches.winner_id     FROM matches     WHERE matches.year = 2016 )
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;
SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016
SELECT players.country_code, players.first_name FROM players JOIN matches ON matches.winner_id = players.player_id JOIN matches AS m2 ON m2.winner_id = players.player_id JOIN tournaments ON tournaments.tourney_id = matches.tourney_id JOIN tournaments AS t2 ON t2.tourney_id = m2.tourney_id WHERE tournaments.tourney_name = 'WTA Championships'   AND t2.tourney_name = 'Australian Open' GROUP BY players.country_code, players.first_name HAVING COUNT(DISTINCT players.player_id) = 2;
SELECT players.first_name, players.country_code  FROM players INNER JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'Australian Open' AND matches.tourney_name = 'WTA Championships'
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1
SELECT first_name, last_name  FROM players  ORDER BY birth_date;
SELECT first_name, last_name FROM players ORDER BY birth_date
SELECT players.first_name, players.last_name  FROM players  WHERE players.hand = 'L'  ORDER BY players.birth_date
SELECT first_name, last_name FROM players WHERE hand = 'Left' ORDER BY birth_date
SELECT players.first_name, players.country_code  FROM players  WHERE player_id = (   SELECT player_id    FROM rankings    WHERE tours = (     SELECT MAX(tours)      FROM rankings   ) )
SELECT first_name, country_code  FROM players  GROUP BY player_id  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT year, COUNT(*) as match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1
SELECT winner_name, SUM(winner_rank_points) AS total_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY winner_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT winner_name, SUM(winner_rank_points) AS rank_points FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY winner_name ORDER BY rank_points DESC LIMIT 1;
SELECT matches.winner_name FROM matches WHERE matches.tourney_name = 'Australian Open' AND matches.winner_rank_points = (   SELECT MAX(matches.winner_rank_points)   FROM matches   WHERE matches.tourney_name = 'Australian Open' )
SELECT matches.winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (   SELECT MAX(winner_rank_points)   FROM matches   WHERE tourney_name = 'Australian Open' )
SELECT matches.winner_name, matches.loser_name FROM matches WHERE minutes = (     SELECT MAX(minutes)     FROM matches )
SELECT matches.winner_name, matches.loser_name FROM matches ORDER BY matches.minutes DESC LIMIT 1
SELECT avg(T1.ranking) AS average_ranking, T2.first_name FROM rankings AS T1 JOIN players AS T2 ON T1.player_id = T2.player_id GROUP BY T2.first_name
SELECT players.first_name, AVG(rankings.ranking)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name
SELECT players.first_name, SUM(rankings.ranking_points)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.player_id, players.first_name
SELECT first_name, SUM(ranking_points)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name
SELECT COUNT(DISTINCT T1.player_id) AS player_count, T1.country_code FROM players AS T1 GROUP BY T1.country_code
SELECT country_code, COUNT(*)  FROM players  GROUP BY country_code
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1
SELECT country_code, COUNT(player_id) AS player_count  FROM players  GROUP BY country_code  ORDER BY player_count DESC  LIMIT 1
SELECT DISTINCT country_code FROM players GROUP BY country_code HAVING COUNT(DISTINCT player_id) > 50
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT ranking_date, SUM(tours)  FROM rankings  GROUP BY ranking_date
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year
SELECT year, COUNT(*) AS match_count  FROM matches  GROUP BY year
SELECT matches.winner_name, matches.winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY matches.winner_age LIMIT 3
SELECT players.first_name, players.last_name, matches.winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY players.birth_date DESC LIMIT 3
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_id IN (SELECT player_id FROM players WHERE hand = 'L')
SELECT COUNT(DISTINCT matches.winner_id) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND players.hand = 'left'
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON players.player_id = matches.winner_id GROUP BY players.player_id ORDER BY MAX(rankings.ranking_points) DESC LIMIT 1
SELECT players.first_name, players.country_code, players.birth_date  FROM players  WHERE players.player_id = (     SELECT rankings.player_id      FROM rankings      WHERE rankings.ranking_points = (         SELECT MAX(ranking_points)          FROM rankings     ) )
SELECT hand, COUNT(*)  FROM players  GROUP BY hand
SELECT hand, COUNT(DISTINCT player_id) FROM players GROUP BY hand
SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured'
SELECT name, tonnage  FROM ship  ORDER BY name DESC
SELECT battle.name, battle.date, battle.result FROM battle;
SELECT MAX(killed) AS maximum_death_toll, MIN(killed) AS minimum_death_toll, caused_by_ship_id FROM death GROUP BY caused_by_ship_id
SELECT AVG(injured) FROM death
SELECT note, killed, injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't'
SELECT name, result  FROM battle  WHERE bulgarian_commander != 'Boril'
SELECT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'
SELECT id, name FROM battle WHERE id IN (   SELECT caused_by_ship_id   FROM death   GROUP BY caused_by_ship_id   HAVING SUM(killed) > 10 )
SELECT ship.id, ship.name FROM ship JOIN death ON death.caused_by_ship_id = ship.id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1
SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'
SELECT COUNT(DISTINCT result) FROM battle
SELECT count(*) FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.tonnage <> '225'
SELECT name, date  FROM battle  JOIN ship ON battle.id = ship.lost_in_battle  WHERE ship.name = 'Lettice' OR ship.name = 'HMS Atalanta'
SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (   SELECT lost_in_battle   FROM ship   WHERE location = 'English Channel' )
SELECT note  FROM death  WHERE note LIKE '%East%'
SELECT line_1, line_2 FROM Addresses
SELECT line_1, line_2 FROM Addresses;
SELECT COUNT(*) FROM Courses
SELECT count(course_id) FROM Courses
SELECT course_description FROM Courses WHERE course_name = 'math'
SELECT course_description FROM Courses WHERE course_name = 'math'
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
SELECT departments.department_name, departments.department_id FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY departments.department_id, departments.department_name ORDER BY COUNT(degree_programs.degree_program_id) DESC LIMIT 1
SELECT Department.departement_name, Departments.department_id FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id GROUP BY Departments.department_id ORDER BY COUNT(Degree_Programs.degree_program_id) DESC LIMIT 1
SELECT COUNT(DISTINCT department_id) FROM Departments
SELECT COUNT(DISTINCT department_id) FROM Departments
SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs
SELECT count(DISTINCT degree_program_id) FROM Degree_Programs
SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering')
SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering')
SELECT section_name, section_description FROM Sections
SELECT section_name, section_description  FROM Sections
SELECT course_name, course_id  FROM Courses  INNER JOIN Sections ON Courses.course_id = Sections.course_id  GROUP BY Courses.course_id  HAVING COUNT(Sections.section_id) <= 2
SELECT Courses.course_name, Courses.course_id  FROM Courses  JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_name, Courses.course_id HAVING COUNT(Sections.section_id) < 2
SELECT section_name FROM Sections ORDER BY section_name DESC
SELECT section_name FROM Sections ORDER BY section_name DESC
SELECT Semesters.semester_name, Semesters.semester_id FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY Semesters.semester_id ORDER BY COUNT(Student_Enrolment.student_id) DESC LIMIT 1
SELECT semester_name, semester_id  FROM Semesters  WHERE semester_id IN (   SELECT semester_id    FROM Student_Enrolment    GROUP BY semester_id    HAVING count(*) = (     SELECT MAX(count(*))      FROM Student_Enrolment      GROUP BY semester_id   ) )
SELECT department_description  FROM Departments  WHERE department_name LIKE '%the computer%'
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
SELECT first_name, middle_name, last_name, student_id FROM Students WHERE student_id IN (   SELECT student_id   FROM Student_Enrolment   GROUP BY student_id   HAVING COUNT(DISTINCT degree_program_id) = 2   AND COUNT(DISTINCT semester_id) = 1 )
SELECT first_name, middle_name, last_name, student_id FROM Students WHERE student_id IN (   SELECT student_id   FROM Student_Enrolment   GROUP BY student_id   HAVING COUNT(DISTINCT degree_program_id) = 2     AND COUNT(DISTINCT semester_id) = 1 )
SELECT first_name, middle_name, last_name FROM Students INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelor'
SELECT students.first_name, students.middle_name, students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_summary_name = 'Bachelors'
SELECT degree_summary_name, COUNT(*) AS enrolment_count FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY enrolment_count DESC LIMIT 1
SELECT degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT degree_programs.degree_program_id, degree_summary_name FROM student_enrolment JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY student_enrolment.degree_program_id ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1
SELECT degree_program_id, degree_summary_description  FROM Degree_Programs  GROUP BY degree_program_id, degree_summary_description  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(Student_Enrolment.student_enrolment_id) AS enrollment_count FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id, Students.first_name, Students.middle_name, Students.last_name ORDER BY enrollment_count DESC LIMIT 1
SELECT Students.first_name, Students.middle_name, Students.last_name, Students.student_id, COUNT(Student_Enrolment.student_enrolment_id) AS num_enrollments FROM Students INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY num_enrollments DESC LIMIT 1;
SELECT Semesters.semester_name FROM Semesters LEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id WHERE Student_Enrolment.student_enrolment_id IS NULL
SELECT semester_name  FROM Semesters  WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)
SELECT course_name FROM Courses WHERE course_id IN (SELECT DISTINCT course_id FROM Student_Enrolment_Courses)
SELECT DISTINCT T1.course_name  FROM Courses AS T1  WHERE EXISTS  (SELECT T2.course_id  FROM Student_Enrolment_Courses AS T2  WHERE T1.course_id = T2.course_id)
SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_id, Courses.course_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT students.last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id WHERE addresses.state_province_county = 'North Carolina' AND NOT EXISTS (   SELECT * FROM student_enrolment   WHERE student_enrolment.student_id = students.student_id )
SELECT last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id LEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id WHERE Addresses.state_province_county = 'North Carolina'   AND Student_Enrolment.student_enrolment_id IS NULL;
SELECT transcript_date, transcript_id FROM Transcripts INNER JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id GROUP BY transcript_date, transcript_id HAVING COUNT(DISTINCT Transcript_Contents.student_course_id) >= 2
SELECT transcripts.transcript_date, transcripts.transcript_id  FROM transcripts  JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id  JOIN student_enrolment_courses ON transcript_contents.student_course_id = student_enrolment_courses.student_course_id GROUP BY transcripts.transcript_date, transcripts.transcript_id HAVING COUNT(DISTINCT student_enrolment_courses.course_id) >= 2
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
SELECT first_name, middle_name, last_name  FROM Students  ORDER BY date_first_registered  LIMIT 1
SELECT Students.first_name, Students.middle_name, Students.last_name  FROM Students ORDER BY Students.date_first_registered ASC LIMIT 1
SELECT first_name, middle_name, last_name  FROM Students  ORDER BY date_first_registered  LIMIT 1
SELECT DISTINCT first_name  FROM Students  WHERE permanent_address_id != current_address_id
SELECT first_name  FROM Students  JOIN Addresses ON Students.permanent_address_id <> Addresses.address_id  WHERE Students.permanent_address_id <> Students.current_address_id;
SELECT addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3  FROM addresses  JOIN students ON addresses.address_id = students.current_address_id  GROUP BY addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3  ORDER BY COUNT(students.current_address_id) DESC  LIMIT 1
SELECT addresses.address_id, addresses.line_1, addresses.line_2  FROM addresses  JOIN students ON students.current_address_id = addresses.address_id  GROUP BY addresses.address_id  ORDER BY COUNT(students.student_id) DESC  LIMIT 1
SELECT avg(transcript_date) FROM Transcripts
SELECT avg(transcript_date) FROM Transcripts
SELECT transcript_date, other_details  FROM Transcripts  ORDER BY transcript_date ASC  LIMIT 1
SELECT MIN(transcript_date) AS earliest_date, other_details FROM Transcripts GROUP BY other_details
SELECT COUNT(DISTINCT transcript_id) FROM Transcripts
SELECT COUNT(*) FROM Transcripts
SELECT MAX(transcript_date) FROM Transcripts
SELECT max(transcript_date) FROM Transcripts
SELECT MAX(cnt) AS max_enrollment_count, student_course_id FROM (     SELECT COUNT(*) AS cnt, student_course_id     FROM Transcript_Contents     JOIN Student_Enrolment_Courses ON Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id     GROUP BY student_course_id ) AS T1
SELECT MAX(course_count), student_enrolment_id FROM (   SELECT COUNT(*) AS course_count, SEC.student_enrolment_id   FROM Transcript_Contents TC   INNER JOIN Student_Enrolment_Courses SEC ON TC.student_course_id = SEC.student_course_id   GROUP BY SEC.student_enrolment_id ) AS course_counts GROUP BY student_enrolment_id ORDER BY MAX(course_count) DESC LIMIT 1;
SELECT Transcripts.transcript_date, COUNT(*) AS result_count FROM Transcripts JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id GROUP BY Transcripts.transcript_id ORDER BY result_count LIMIT 1;
SELECT transcript_date, transcript_id FROM Transcripts JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id JOIN Student_Enrolment_Courses ON Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id GROUP BY Transcripts.transcript_id ORDER BY COUNT(*) ASC LIMIT 1;
SELECT semesters.semester_name  FROM semesters  JOIN student_enrolment ON student_enrolment.semester_id = semesters.semester_id  JOIN student_enrolment_courses ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id  JOIN degree_programs ON degree_programs.degree_program_id = student_enrolment.degree_program_id  WHERE degree_programs.degree_summary_name = 'Bachelor'  AND student_enrolment_courses.course_id IN (     SELECT student_enrolment_courses.course_id      FROM student_enrolment_courses      JOIN student_enrolment ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id      WHERE student_enrolment.degree_program_id IN (         SELECT degree_program_id          FROM degree_programs          WHERE degree_summary_name = 'Master'     ) )
SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (   SELECT degree_program_id   FROM Degree_Programs   WHERE degree_summary_name = 'Masters' OR degree_summary_name = 'Bachelors'   GROUP BY degree_program_id   HAVING COUNT(DISTINCT degree_summary_name) = 2 )
SELECT count(DISTINCT Students.current_address_id) FROM Students
SELECT DISTINCT address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details  FROM Addresses  JOIN Students ON Students.current_address_id = Addresses.address_id OR Students.permanent_address_id = Addresses.address_id  WHERE address_id IS NOT NULL
SELECT Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details  FROM Students  ORDER BY Students.last_name DESC, Students.first_name DESC, Students.middle_name DESC, Students.student_id DESC
SELECT Students.* FROM Students ORDER BY last_name DESC
SELECT section_id, course_id, section_name, section_description, other_details FROM Sections WHERE section_name = 'h'
SELECT section_description  FROM Sections  WHERE section_name = 'h'
SELECT students.first_name  FROM students  JOIN addresses ON students.permanent_address_id = addresses.address_id  WHERE addresses.country = 'Haiti' OR students.cell_mobile_number = '09700166582'
SELECT first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'
SELECT Cartoon.Title FROM Cartoon ORDER BY Cartoon.Title ASC
SELECT Title FROM Cartoon ORDER BY Title ASC
SELECT cartoon.title  FROM cartoon  JOIN TV_Channel ON cartoon.Channel = TV_Channel.id WHERE cartoon.directed_by = "Ben Jones";
SELECT title FROM Cartoon WHERE Directed_by = 'Ben Jones'
SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr"
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
SELECT cartoon.title, cartoon.directed_by FROM cartoon JOIN TV_Channel ON cartoon.Channel = TV_Channel.id ORDER BY cartoon.original_air_date;
SELECT cartoon.Title, cartoon.Directed_by FROM Cartoon ORDER BY cartoon.Original_air_date
SELECT cartoon.Title FROM cartoon WHERE cartoon.Directed_by = "Ben Jones" OR cartoon.Directed_by = "Brandon Vietti"
SELECT title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti')
SELECT country, COUNT(*) AS num_channels FROM TV_Channel GROUP BY country ORDER BY num_channels DESC LIMIT 1
SELECT country, COUNT(*) AS channel_count FROM TV_Channel GROUP BY country ORDER BY channel_count DESC LIMIT 1
SELECT count(DISTINCT series_name), count(DISTINCT Content) FROM TV_Channel
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;
SELECT content  FROM TV_Channel  WHERE series_name = "Sky Radio"
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio"
SELECT Package_Option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = 'Sky Radio'
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'
SELECT COUNT(DISTINCT id) FROM TV_Channel WHERE Language = 'English'
SELECT tv_channel.language, COUNT(tv_channel.language) AS channel_count FROM tv_channel GROUP BY tv_channel.language HAVING COUNT(tv_channel.language) = (   SELECT MIN(cnt)   FROM (     SELECT COUNT(*) AS cnt     FROM tv_channel     GROUP BY language   ) AS T1 )
SELECT TV_Channel.Language, COUNT(*)  FROM TV_Channel  GROUP BY TV_Channel.Language  HAVING COUNT(*) = (     SELECT COUNT(*)      FROM TV_Channel      GROUP BY Language      ORDER BY COUNT(*) ASC      LIMIT 1 )
SELECT TV_Channel.Language, COUNT(*)  FROM TV_Channel  GROUP BY TV_Channel.Language
SELECT TV_Channel.Language, COUNT(*)  FROM TV_Channel  GROUP BY TV_Channel.Language
SELECT series_name  FROM TV_Channel  JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = 'The Rise of the Blue Beetle!'
SELECT series_name FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle'
SELECT cartoon.Title  FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE TV_Channel.series_name = "Sky Radio"
SELECT Title  FROM Cartoon WHERE Channel = (   SELECT id   FROM TV_Channel   WHERE series_name = "Sky Radio" )
SELECT TV_series.Episode FROM TV_series ORDER BY TV_series.Rating
SELECT TV_series.Episode FROM TV_series ORDER BY TV_series.Rating;
SELECT TV_series.Episode, TV_series.Rating  FROM TV_series  ORDER BY TV_series.Rating DESC  LIMIT 3
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3
SELECT MIN(Share), MAX(Share) FROM TV_series
SELECT MAX(Share), MIN(Share) FROM TV_series
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime"
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime"
SELECT weekly_rank  FROM TV_series  WHERE Episode = "A Love of a Lifetime"
SELECT Weekly_Rank  FROM TV_series  WHERE Episode = "A Love of a Lifetime"
SELECT series_name  FROM TV_Channel  JOIN TV_series ON TV_Channel.id = TV_series.Channel  WHERE TV_series.Episode = "A Love of a Lifetime"
SELECT series_name FROM TV_series WHERE Episode = "A Love of a Lifetime"
SELECT Episode FROM TV_series WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio')
SELECT Sorry, but I'm unable to fix the given SQLite SQL QUERY for the question as the required tables and columns are not present in the provided schema links. The schema links only include tables related to a university database. Can you please provide the correct tables and columns for the question?
SELECT directed_by, COUNT(*) AS cartoon_count FROM Cartoon GROUP BY directed_by
SELECT directed_by, COUNT(*)  FROM Cartoon  GROUP BY directed_by
SELECT production_code, cartoon.channel  FROM cartoon  JOIN TV_Channel ON cartoon.channel = TV_Channel.id  ORDER BY cartoon.original_air_date DESC  LIMIT 1
SELECT production_code, TV_Channel.series_name AS channel FROM Cartoon JOIN TV_Channel ON Cartoon.channel = TV_Channel.id ORDER BY Cartoon.original_air_date DESC LIMIT 1
SELECT package_option, series_name FROM TV_Channel WHERE High_definition_TV = 1
SELECT package_option, series_name FROM TV_Channel WHERE High_definition_TV = 'Yes'
SELECT TV_Channel.Country  FROM TV_Channel  JOIN Cartoon ON Cartoon.Channel = TV_Channel.id  WHERE Cartoon.Written_by = 'Todd Casey';
SELECT DISTINCT Country FROM TV_Channel WHERE EXISTS (   SELECT *   FROM Cartoon   INNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id   WHERE Cartoon.Written_by = 'Todd Casey'     AND TV_Channel.id = Cartoon.Channel )
SELECT DISTINCT country FROM TV_Channel WHERE id NOT IN (SELECT DISTINCT channel FROM Cartoon WHERE Written_by = 'Todd Casey')
SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')
SELECT series_name, Country FROM TV_Channel WHERE id IN (   SELECT Channel   FROM Cartoon   WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Michael Chang' )
SELECT series_name, country FROM TV_Channel WHERE id IN (   SELECT Channel   FROM Cartoon   WHERE directed_by = 'Ben Jones' ) AND id IN (   SELECT Channel   FROM Cartoon   WHERE directed_by = 'Michael Chang' )
SELECT TV_Channel.pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language <> 'English'
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language <> 'English'
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.id HAVING COUNT(*) > 2
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.id HAVING COUNT(*) > 2
SELECT id FROM TV_Channel WHERE id NOT IN (   SELECT Channel   FROM Cartoon   WHERE Directed_by = 'Ben Jones' )
SELECT DISTINCT id FROM TV_Channel WHERE id NOT IN (SELECT DISTINCT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')
SELECT package_option FROM TV_Channel WHERE id NOT IN (     SELECT Channel     FROM Cartoon     WHERE Directed_by = 'Ben Jones' )
SELECT package_option  FROM tv_channel  WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')
SELECT count(*) FROM poker_player
SELECT COUNT(poker_player_id) FROM poker_player
SELECT poker_player.Earnings  FROM poker_player  ORDER BY poker_player.Earnings DESC
SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC
SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player
SELECT Final_Table_Made, Best_Finish FROM poker_player
SELECT avg(Earnings) FROM poker_player
SELECT AVG(Earnings) FROM poker_player
SELECT poker_player.money_rank  FROM poker_player  ORDER BY poker_player.earnings DESC  LIMIT 1
SELECT poker_player.money_rank  FROM poker_player  ORDER BY poker_player.earnings DESC  LIMIT 1
SELECT MAX(Final_Table_Made)  FROM poker_player  WHERE Earnings < 200000;
SELECT max(final_table_made) FROM poker_player WHERE earnings < 200000
SELECT name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID
SELECT name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID
SELECT name  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  WHERE poker_player.Earnings > 300000
SELECT name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000
SELECT people.Name  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Final_Table_Made ASC
SELECT people.Name  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  GROUP BY people.Name  ORDER BY COUNT(poker_player.Final_Table_Made) ASC
SELECT birth_date FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Earnings ASC  LIMIT 1
SELECT birth_date FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY earnings ASC LIMIT 1
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height = (SELECT MAX(Height) FROM people)
SELECT poker_player.money_rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.height = (SELECT MAX(height) FROM people)
SELECT AVG(earnings) FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  WHERE people.Height > 200
SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200
SELECT people.Name  FROM people  JOIN poker_player ON people.People_ID = poker_player.People_ID  ORDER BY poker_player.Earnings DESC
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC
SELECT nationality, COUNT(*) FROM people GROUP BY nationality
SELECT COUNT(*) AS Count, Nationality FROM people GROUP BY Nationality
SELECT nationality, COUNT(nationality) AS nationality_count FROM people GROUP BY nationality ORDER BY nationality_count DESC LIMIT 1
SELECT Nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1
SELECT nationality FROM people GROUP BY nationality HAVING COUNT(DISTINCT People_ID) > 1
SELECT nationality FROM people GROUP BY nationality HAVING COUNT(DISTINCT People_ID) >= 2
SELECT name, birth_date FROM people ORDER BY name ASC
SELECT name, birth_date FROM people ORDER BY name ASC
SELECT name FROM people WHERE Nationality != 'Russia'
SELECT name FROM people WHERE Nationality != 'Russia'
SELECT name  FROM people  WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
SELECT name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
SELECT count(DISTINCT Nationality) FROM people
SELECT COUNT(DISTINCT Nationality) FROM people
SELECT count(DISTINCT state) FROM AREA_CODE_STATE
SELECT contestant_number, contestant_name  FROM CONTESTANTS  ORDER BY contestant_name DESC
SELECT vote_id, phone_number, state FROM VOTES;
SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE
SELECT max(created) FROM VOTES WHERE state = 'CA'
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name <> 'Jessie Alloway'
SELECT DISTINCT state, created FROM VOTES
SELECT contestant_number, contestant_name FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number GROUP BY contestant_number, contestant_name HAVING COUNT(*) >= 2
SELECT contestant_number, contestant_name  FROM contestants  JOIN votes ON contestants.contestant_number = votes.contestant_number  GROUP BY contestants.contestant_number, contestants.contestant_name  ORDER BY COUNT(*) ASC  LIMIT 1
SELECT count(*) FROM VOTES WHERE state = 'NY' OR state = 'CA'
SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)
SELECT area_code_state.area_code  FROM votes  JOIN area_code_state ON votes.state = area_code_state.state  GROUP BY area_code_state.area_code  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT created, state, phone_number FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling'
SELECT area_code FROM area_code_state AS acs JOIN contestants AS c ON acs.state = c.state JOIN votes AS v ON c.contestant_number = v.contestant_number AND acs.state = v.state WHERE c.contestant_name IN ('Kelly Clauss', 'Tabatha Gehling') GROUP BY acs.area_code HAVING COUNT(DISTINCT v.contestant_number) = 2
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'
SELECT country.Name FROM country WHERE country.IndepYear > 1950
SELECT name FROM country WHERE IndepYear > 1950
SELECT COUNT(DISTINCT T1.Code)  FROM country AS T1  WHERE T1.GovernmentForm = 'Republic'
SELECT count(DISTINCT Code) FROM country WHERE GovernmentForm = 'Republic'
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'
SELECT sum(SurfaceArea) FROM country WHERE Continent = 'Caribbean'
SELECT Continent FROM country WHERE Name = 'Anguilla'
SELECT Continent FROM country WHERE Name = 'Anguilla'
SELECT Region FROM country WHERE Name = 'Kabul'
SELECT Region FROM country WHERE Name = 'Kabul'
SELECT countrylanguage.Language FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = 'Aruba' ORDER BY countrylanguage.Percentage DESC LIMIT 1
SELECT language FROM countrylanguage WHERE CountryCode = (   SELECT Code   FROM country   WHERE Name = 'Aruba' )
SELECT population, lifeexpectancy  FROM country  WHERE name = 'Brazil'
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'
SELECT region, population FROM country WHERE Name = 'Angola'
SELECT Region, Population FROM country WHERE name = 'Angola'
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'
SELECT avg(LifeExpectancy)  FROM country  WHERE Region = 'Central Africa'
SELECT name FROM country WHERE continent = 'Asia' AND lifeexpectancy = (SELECT MIN(lifeexpectancy) FROM country WHERE continent = 'Asia')
SELECT name  FROM country  WHERE continent = 'Asia'  AND lifeExpectancy = (     SELECT MIN(lifeExpectancy)      FROM country      WHERE continent = 'Asia' )
SELECT SUM(Population), MAX(GNP) FROM country WHERE Continent = 'Asia'
SELECT sum(Population), max(GNP)  FROM country  WHERE Continent = 'Asia'
SELECT AVG(LifeExpectancy)  FROM country  WHERE GovernmentForm = 'Republic'  AND Continent = 'Africa'
SELECT avg(LifeExpectancy) FROM country WHERE GovernmentForm = 'Republic' AND Continent = 'Africa'
SELECT SUM(SurfaceArea) AS TotalSurfaceArea  FROM country  WHERE continent IN ('Asia', 'Europe')
SELECT sum(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')
SELECT sum(population) FROM city WHERE district = "Gelderland"
SELECT SUM(population) FROM city WHERE District = 'Gelderland'
SELECT AVG(GNP), SUM(Population) FROM country WHERE GovernmentForm = 'US Territory'
SELECT AVG(GNP) AS mean_gnp, SUM(Population) AS total_population FROM country WHERE GovernmentForm = 'US Territory' AND Code2 = 'US'
SELECT COUNT(DISTINCT Language) FROM countrylanguage
SELECT count(DISTINCT Language) FROM countrylanguage
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'
SELECT count(DISTINCT GovernmentForm)  FROM country  WHERE Continent = 'Africa'
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW';
SELECT count(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW'
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'
SELECT count(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'
SELECT country.name  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  GROUP BY country.name  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT name FROM country WHERE code = (   SELECT countrycode   FROM countrylanguage   GROUP BY countrycode   HAVING COUNT(DISTINCT language) = (     SELECT MAX(lang_count)     FROM (       SELECT COUNT(DISTINCT language) AS lang_count       FROM countrylanguage       GROUP BY countrycode     ) AS counts   ) )
SELECT continent FROM countrylanguage GROUP BY continent ORDER BY COUNT(DISTINCT language) DESC LIMIT 1
SELECT continent FROM countrylanguage GROUP BY continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1
SELECT COUNT(DISTINCT CountryCode)  FROM countrylanguage  WHERE Language IN ('Dutch', 'English')  GROUP BY CountryCode  HAVING COUNT(DISTINCT Language) = 2
SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language IN ('Dutch', 'English')
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T1.Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'French')
SELECT T1.Name  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  WHERE T2.Language IN ('English', 'French') GROUP BY T1.Name HAVING COUNT(DISTINCT T2.Language) = 2
SELECT DISTINCT country.name FROM countrylanguage AS cl1 JOIN country ON cl1.countrycode = country.code WHERE cl1.language = 'English' AND cl1.isofficial = 'T' AND EXISTS (   SELECT *   FROM countrylanguage AS cl2   WHERE cl2.countrycode = country.code AND cl2.language = 'French' AND cl2.isofficial = 'T' )
SELECT DISTINCT country.name  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  WHERE countrylanguage.Language IN ('English', 'French')  AND countrylanguage.IsOfficial = 'T'  GROUP BY country.name  HAVING COUNT(DISTINCT countrylanguage.Language) = 2
SELECT COUNT(DISTINCT country.Continent) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'Chinese'
SELECT COUNT(DISTINCT country.Continent)  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'Chinese'
SELECT DISTINCT Region FROM countrylanguage WHERE Language IN ('English', 'Dutch')
SELECT region FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Dutch' OR language = 'English')
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Dutch' OR countrylanguage.Language = 'English'
SELECT DISTINCT Name FROM country  WHERE Code IN (   SELECT CountryCode    FROM countrylanguage    WHERE Language = 'English' OR Language = 'Dutch' )
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY countrylanguage.Language ORDER BY SUM(countrylanguage.Percentage) DESC LIMIT 1
SELECT language FROM countrylanguage WHERE countrycode IN (   SELECT code   FROM country   WHERE continent = 'Asia' ) GROUP BY language HAVING COUNT(DISTINCT countrycode) = (   SELECT MAX(language_count)   FROM (     SELECT COUNT(DISTINCT countrycode) AS language_count     FROM countrylanguage     WHERE countrycode IN (       SELECT code       FROM country       WHERE continent = 'Asia'     )     GROUP BY language   ) AS counts )
SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.GovernmentForm = 'Republic' GROUP BY countrylanguage.language HAVING COUNT(DISTINCT countrylanguage.CountryCode) = 1
SELECT countrylanguage.Language  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  WHERE country.GovernmentForm = 'Republic'  GROUP BY countrylanguage.Language  HAVING COUNT(*) = 1
SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1
SELECT city.Name  FROM city  JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC  LIMIT 1
SELECT name, population, lifeexpectancy FROM country WHERE continent = 'Asia' AND surfacearea = (     SELECT MAX(surfacearea)     FROM country     WHERE continent = 'Asia' ) ORDER BY population DESC LIMIT 1
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1;
SELECT avg(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language <> 'English' AND IsOfficial = 'T')
SELECT avg(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')
SELECT sum(population) AS total_population FROM country WHERE code NOT IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English' )
SELECT SUM(Population)  FROM country  WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')
SELECT language  FROM countrylanguage  WHERE CountryCode = (     SELECT Code      FROM country      WHERE HeadOfState = 'Beatrix' )  AND IsOfficial = 'T'
SELECT language FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode = (   SELECT Code   FROM country   WHERE HeadOfState = 'Beatrix' )
SELECT count(DISTINCT countrylanguage.Language)  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  WHERE country.IndepYear < 1930 AND countrylanguage.IsOfficial = 'T'
SELECT COUNT(DISTINCT countrylanguage.Language)  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  WHERE country.IndepYear < 1930
SELECT DISTINCT name  FROM country  WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')
SELECT country.Name  FROM country  WHERE country.SurfaceArea > (     SELECT MAX(SurfaceArea)      FROM country      WHERE country.Continent = 'Europe' )
SELECT DISTINCT Name  FROM country  WHERE continent = 'Africa'    AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')
SELECT name  FROM country  WHERE continent = 'Africa'  AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')
SELECT name  FROM country  WHERE continent = 'Asia'    AND population > (     SELECT MAX(population)      FROM country      WHERE continent = 'Africa'   )
SELECT country.Name FROM country WHERE country.Continent = 'Asia'   AND country.Population > (     SELECT MAX(c.Population)     FROM country c     WHERE c.Continent = 'Africa'   )
SELECT code  FROM country  WHERE code NOT IN (   SELECT countrycode    FROM countrylanguage    WHERE language = 'English' )
SELECT country.Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language <> 'English' OR countrylanguage.Language IS NULL
SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language <> 'English'
SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language <> 'English'
SELECT code  FROM country  WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')  AND governmentform <> 'Republic'
SELECT code FROM country WHERE governmentform <> 'Republic' AND code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T')
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language <> 'English'
SELECT name FROM city WHERE countrycode IN (   SELECT code   FROM country   WHERE continent = 'Europe'   AND code NOT IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English'     AND isofficial = 'T'   ) )
SELECT DISTINCT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.Continent = 'Asia'  AND countrylanguage.Language = 'Chinese'
SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
SELECT name, indepyear, surfacearea  FROM country  WHERE population = (SELECT MIN(population) FROM country)
SELECT name, indepyear, surfacearea  FROM country  WHERE population = (SELECT MIN(population) FROM country)
SELECT country.Population, country.Name, country.HeadOfState  FROM country  ORDER BY country.SurfaceArea DESC  LIMIT 1
SELECT country.Name, country.Population, country.HeadOfState  FROM country  ORDER BY country.SurfaceArea DESC  LIMIT 1
SELECT country.Name, COUNT(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(DISTINCT countrylanguage.Language) >= 3
SELECT country.name, COUNT(DISTINCT countrylanguage.language) AS language_count  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  GROUP BY country.Code, country.name  HAVING language_count > 2
SELECT district, COUNT(DISTINCT ID)  FROM city  WHERE population > (SELECT AVG(population) FROM city)  GROUP BY district
SELECT district, COUNT(*)  FROM city  WHERE population > (SELECT AVG(population) FROM city)  GROUP BY district
SELECT governmentform, SUM(population) AS total_population  FROM country  GROUP BY governmentform  HAVING AVG(lifeexpectancy) > 72
SELECT governmentform, SUM(population)  FROM country  WHERE lifeexpectancy > 72  GROUP BY governmentform
SELECT AVG(LifeExpectancy), SUM(Population), Continent FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72
SELECT country.Continent, SUM(country.Population), AVG(country.LifeExpectancy) FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72
SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5
SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5
SELECT name  FROM country  ORDER BY Population DESC  LIMIT 3
SELECT name FROM country ORDER BY Population DESC LIMIT 3
SELECT name FROM country ORDER BY population ASC LIMIT 3
SELECT name FROM country ORDER BY Population LIMIT 3;
SELECT COUNT(DISTINCT Code) FROM country WHERE Continent = 'Asia'
SELECT COUNT(*) FROM country WHERE continent = 'Asia'
SELECT name  FROM country  WHERE continent = 'Europe' AND population = 80000
SELECT name FROM country WHERE continent = 'Europe' AND population = 80000;
SELECT sum(Population), avg(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000
SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000
SELECT city.Name  FROM city  WHERE city.Population BETWEEN 160000 AND 900000
SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000
SELECT countrylanguage.Language  FROM countrylanguage  GROUP BY countrylanguage.Language  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1
SELECT countrylanguage.Language FROM countrylanguage JOIN (     SELECT CountryCode, MAX(Percentage) AS MaxPercentage     FROM countrylanguage     GROUP BY CountryCode ) AS MaxLanguages ON countrylanguage.CountryCode = MaxLanguages.CountryCode AND countrylanguage.Percentage = MaxLanguages.MaxPercentage
SELECT country.Code, countrylanguage.Language  FROM country  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE countrylanguage.Percentage = (   SELECT MAX(Percentage)    FROM countrylanguage    GROUP BY CountryCode ) GROUP BY countrylanguage.Language
SELECT count(DISTINCT T1.CountryCode)  FROM countrylanguage AS T1  WHERE T1.Language = 'Spanish'  AND T1.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')
SELECT count(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage > 50
SELECT countrycode  FROM countrylanguage  WHERE language = 'Spanish'  GROUP BY countrycode  HAVING percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE language = 'Spanish')
SELECT country.Code FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'Spanish'  AND countrylanguage.Percentage > 50
SELECT COUNT(Conductor_ID) FROM conductor
SELECT COUNT(Conductor_ID) FROM conductor
SELECT name FROM conductor ORDER BY age ASC
SELECT conductor.Name FROM conductor ORDER BY conductor.Age
SELECT name FROM conductor WHERE nationality <> 'USA'
SELECT name FROM conductor WHERE Nationality <> 'USA'
SELECT record_company  FROM orchestra  GROUP BY record_company  ORDER BY year_of_founded DESC
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
SELECT avg(Attendance) AS Average_Attendance FROM show
SELECT avg(Attendance) FROM show
SELECT max(Share), min(Share)  FROM performance  WHERE Type <> 'Live final'
SELECT MAX(share), MIN(share)  FROM performance  WHERE Type <> 'Live final'
SELECT COUNT(DISTINCT Nationality) FROM conductor
SELECT COUNT(DISTINCT Nationality) FROM conductor
SELECT name FROM conductor ORDER BY Year_of_Work DESC
SELECT conductor.Name  FROM conductor  ORDER BY conductor.Year_of_Work DESC
SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC LIMIT 1
SELECT name FROM conductor GROUP BY name ORDER BY SUM(year_of_work) DESC LIMIT 1
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID
SELECT conductor.Name FROM conductor GROUP BY conductor.Name HAVING COUNT(DISTINCT conductor.Orchestra_ID) > 1
SELECT name FROM conductor GROUP BY name HAVING COUNT(DISTINCT Orchestra_ID) > 1
SELECT conductor.Name FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name ORDER BY COUNT(orchestra.Orchestra_ID) DESC LIMIT 1
SELECT conductor.Name FROM conductor JOIN orchestra ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Name ORDER BY COUNT(DISTINCT orchestra.Orchestra_ID) DESC LIMIT 1
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008
SELECT record_company, COUNT(DISTINCT orchestra_id) AS number_of_orchestras FROM orchestra GROUP BY record_company
SELECT COUNT(DISTINCT Orchestra_ID) AS num_orchestras, Record_Company FROM orchestra GROUP BY Record_Company
SELECT major_record_format, COUNT(*) AS record_format_count FROM orchestra GROUP BY major_record_format ORDER BY record_format_count ASC
SELECT major_record_format, COUNT(major_record_format)  FROM orchestra  GROUP BY major_record_format  ORDER BY COUNT(major_record_format) DESC
SELECT record_company  FROM orchestra  GROUP BY record_company  ORDER BY COUNT(DISTINCT orchestra_id) DESC  LIMIT 1
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(Orchestra_ID) DESC LIMIT 1
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
SELECT orchestra.Orchestra FROM orchestra WHERE NOT EXISTS (SELECT * FROM performance WHERE orchestra.Orchestra_ID = performance.Orchestra_ID)
SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 OR Year_of_Founded > 2003
SELECT record_company  FROM orchestra  WHERE year_of_founded < 2003    AND record_company IN (     SELECT record_company      FROM orchestra      WHERE year_of_founded > 2003   )
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'
SELECT year_of_founded FROM orchestra GROUP BY year_of_founded HAVING COUNT(*) > 1
SELECT year_of_founded FROM orchestra GROUP BY year_of_founded HAVING COUNT(*) > 1
SELECT COUNT(ID) FROM Highschooler
SELECT COUNT(DISTINCT ID) FROM Highschooler
SELECT name, grade FROM Highschooler
SELECT name, grade FROM Highschooler
SELECT grade FROM Highschooler
SELECT grade FROM Highschooler
SELECT grade FROM Highschooler WHERE name = 'Kyle'
SELECT grade FROM Highschooler WHERE name = 'Kyle'
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10
SELECT Highschooler.name FROM Highschooler WHERE grade = 10
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.name = 'Kyle'
SELECT Highschooler.ID FROM Highschooler WHERE name = 'Kyle'
SELECT COUNT(*) FROM Highschooler WHERE grade = 9 OR grade = 10
SELECT COUNT(ID) FROM Highschooler WHERE grade = 9 OR grade = 10
SELECT grade, COUNT(*)  FROM Highschooler  GROUP BY grade
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade
SELECT grade, COUNT(*) AS count FROM Highschooler GROUP BY grade ORDER BY count DESC LIMIT 1
SELECT grade, COUNT(*) AS count FROM Highschooler GROUP BY grade ORDER BY count DESC LIMIT 1
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4
SELECT DISTINCT grade  FROM Highschooler  GROUP BY grade  HAVING count(DISTINCT ID) >= 4
SELECT student_id, count(friend_id) AS num_friends FROM Friend GROUP BY student_id
SELECT T1.ID, COUNT(T2.friend_id)  FROM Highschooler AS T1  LEFT JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.ID
SELECT highschooler.name, COUNT(friend.friend_id) AS friend_count FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.name
SELECT T1.name, COUNT(T2.friend_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.name
SELECT Highschooler.name FROM highschooler JOIN friend ON highschooler.ID = friend.student_id GROUP BY highschooler.name ORDER BY COUNT(friend.friend_id) DESC LIMIT 1
SELECT Highschooler.name  FROM Highschooler  JOIN Friend ON Highschooler.ID = Friend.student_id  GROUP BY Highschooler.ID  ORDER BY COUNT(Friend.friend_id) DESC  LIMIT 1
SELECT T1.name  FROM Highschooler AS T1  JOIN Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.ID, T1.name  HAVING COUNT(T2.friend_id) >= 3
SELECT DISTINCT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID HAVING COUNT(T2.friend_id) >= 3
SELECT name FROM highschooler JOIN friend ON highschooler.id = friend.friend_id WHERE highschooler.name = "Kyle"
SELECT T2.name  FROM Highschooler AS T1  JOIN Friend AS T2 ON T1.ID = T2.friend_id  WHERE T1.name = 'Kyle'
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT Highschooler.ID FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.student_id IS NULL
SELECT id FROM Highschooler WHERE id NOT IN (SELECT student_id FROM Friend)
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT name  FROM Highschooler  WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT DISTINCT T1.ID FROM Highschooler AS T1 JOIN Friend AS F ON T1.ID = F.student_id JOIN Likes AS L ON T1.ID = L.student_id WHERE T1.ID <> L.liked_id
SELECT DISTINCT friend.student_id  FROM friend  WHERE EXISTS (     SELECT *      FROM likes      WHERE friend.student_id = likes.student_id      AND EXISTS (         SELECT *          FROM highschooler          WHERE friend.student_id = highschooler.id     ) )
SELECT name FROM Highschooler WHERE EXISTS (     SELECT *     FROM Friend     WHERE Highschooler.ID = Friend.student_id     AND EXISTS (         SELECT *         FROM Likes         WHERE Highschooler.ID = Likes.liked_id     ) )
SELECT name  FROM Highschooler  WHERE ID IN (     SELECT student_id      FROM Friend      WHERE student_id IN (         SELECT student_id          FROM Likes     ) )
SELECT COUNT(*) AS like_count, student_id FROM Likes GROUP BY student_id
SELECT student_id, COUNT(*) AS like_count FROM Likes GROUP BY student_id
SELECT Highschooler.name, COUNT(likes.liked_id)  FROM Highschooler  JOIN Likes ON Highschooler.ID = Likes.student_id  GROUP BY Highschooler.name
SELECT highschooler.name, count(likes.*) AS likes_count FROM highschooler INNER JOIN likes ON highschooler.ID = likes.student_id GROUP BY highschooler.name
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Likes.student_id = Highschooler.ID GROUP BY Highschooler.ID, Highschooler.name ORDER BY COUNT(Likes.liked_id) DESC LIMIT 1
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1
SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.ID = likes.student_id GROUP BY highschooler.name HAVING COUNT(*) >= 2
SELECT T1.name  FROM Highschooler AS T1  JOIN Likes AS T2 ON T1.ID = T2.student_id  GROUP BY T1.name  HAVING COUNT(T2.student_id) >= 2
SELECT name  FROM Highschooler  WHERE grade > 5  AND ID IN (SELECT student_id             FROM Friend             GROUP BY student_id             HAVING COUNT(friend_id) >= 2)
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS F ON T1.ID = F.student_id WHERE T1.grade > 5 GROUP BY T1.ID, T1.name HAVING COUNT(DISTINCT F.friend_id) >= 2
SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)
SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)
SELECT MIN(grade)  FROM Highschooler  WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT min(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT DISTINCT state  FROM Owners  WHERE state IN (SELECT DISTINCT state FROM Professionals)
SELECT state FROM Owners WHERE state IN (     SELECT state     FROM Professionals )
SELECT AVG(age) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
SELECT AVG(age) FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (     SELECT professional_id     FROM Treatments     GROUP BY professional_id     HAVING COUNT(*) > 2 )
SELECT professional_id, last_name, cell_number  FROM Professionals  WHERE state = 'Indiana' OR professional_id IN (   SELECT professional_id    FROM Treatments    GROUP BY professional_id    HAVING COUNT(*) > 2 )
SELECT dogs.name FROM dogs  JOIN treatments ON dogs.dog_id = treatments.dog_id  WHERE treatments.cost_of_treatment <= 1000  GROUP BY dogs.name
SELECT DISTINCT Dogs.name  FROM Dogs  WHERE Dogs.owner_id NOT IN      (SELECT Dogs.dog_id      FROM Treatments      WHERE Treatments.cost_of_treatment > 1000)
SELECT professionals.first_name  FROM professionals  WHERE professionals.first_name NOT IN (SELECT name FROM dogs)  AND professionals.first_name NOT IN (SELECT first_name FROM owners)
SELECT first_name FROM owners WHERE first_name NOT IN (SELECT name FROM dogs)  UNION  SELECT first_name FROM professionals WHERE first_name NOT IN (SELECT name FROM dogs)
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT 
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1
SELECT Owners.owner_id, Owners.first_name, Owners.last_name  FROM Owners  WHERE Owners.owner_id = (   SELECT Dogs.owner_id    FROM Dogs    GROUP BY Dogs.owner_id    ORDER BY COUNT(*) DESC    LIMIT 1 )
SELECT professional_id, role_code, first_name  FROM Professionals  GROUP BY professional_id, role_code, first_name  HAVING COUNT(*) >= 2
SELECT professional_id, role_code, first_name  FROM Professionals  GROUP BY professional_id, role_code, first_name  HAVING COUNT(*) >= 2
SELECT breed_name  FROM Breeds  JOIN Dogs ON Breeds.breed_code = Dogs.breed_code  GROUP BY Breeds.breed_code, Breeds.breed_name  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT breed_name FROM Breeds GROUP BY breed_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT owners.owner_id, owners.last_name FROM owners WHERE owners.owner_id = (   SELECT dogs.owner_id   FROM dogs   JOIN treatments ON dogs.dog_id = treatments.dog_id   GROUP BY dogs.owner_id   ORDER BY COUNT(treatments.treatment_id) DESC   LIMIT 1 )
SELECT owner_id, last_name FROM Owners WHERE owner_id = (   SELECT owner_id   FROM Treatments   GROUP BY owner_id   ORDER BY SUM(cost_of_treatment) DESC   LIMIT 1 )
SELECT treatment_type_description  FROM Treatment_Types  WHERE treatment_type_code = (     SELECT treatment_type_code      FROM Treatments      GROUP BY treatment_type_code      HAVING sum(cost_of_treatment) = (         SELECT min(total_cost)          FROM (             SELECT treatment_type_code, sum(cost_of_treatment) AS total_cost              FROM Treatments              GROUP BY treatment_type_code         ) AS temp     ) )
SELECT T2.treatment_type_description FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_description ORDER BY SUM(T1.cost_of_treatment) LIMIT 1
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1
SELECT owners.owner_id, owners.zip_code FROM owners WHERE owners.owner_id = (     SELECT dogs.owner_id     FROM treatments     JOIN dogs ON treatments.dog_id = dogs.dog_id     GROUP BY dogs.owner_id     ORDER BY SUM(treatments.cost_of_treatment) DESC     LIMIT 1 )
SELECT professional_id, cell_number  FROM Professionals  WHERE professional_id IN (     SELECT professional_id      FROM Treatments      GROUP BY professional_id      HAVING COUNT(DISTINCT treatment_type_code) >= 2 )
SELECT professional_id, cell_number FROM Professionals GROUP BY professional_id, cell_number HAVING COUNT(DISTINCT treatment_type_code) > 1
SELECT Professionals.first_name, Professionals.last_name  FROM Professionals  INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id  WHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT first_name, last_name FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   WHERE cost_of_treatment < (     SELECT AVG(cost_of_treatment)     FROM Treatments   ) )
SELECT treatments.date_of_treatment, professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id
SELECT treatments.date_of_treatment, professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id
SELECT cost_of_treatment, treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT cost_of_treatment, treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code
SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code
SELECT owners.first_name, dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id
SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id
SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id JOIN breeds ON dogs.breed_code = breeds.breed_code WHERE breeds.breed_code = (     SELECT breed_code     FROM breeds     GROUP BY breed_code     ORDER BY COUNT(*) ASC     LIMIT 1 )
SELECT T1.name, T2.date_of_treatment  FROM Dogs AS T1  JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id  WHERE T1.breed_code = (SELECT breed_code FROM Breeds ORDER BY breed_code ASC LIMIT 1)
SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.state = 'Virginia'
SELECT owners.first_name, dogs.name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE owners.state = 'Virginia'
SELECT date_arrived, date_departed  FROM Dogs  WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT dogs.date_arrived, dogs.date_departed FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id
SELECT owners.last_name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  ORDER BY dogs.age ASC  LIMIT 1
SELECT last_name FROM Owners WHERE owner_id = (     SELECT owner_id     FROM Dogs     WHERE age = (         SELECT min(age)         FROM Dogs     ) )
SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'
SELECT DISTINCT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin')
SELECT date_arrived, date_departed FROM Dogs
SELECT date_arrived, date_departed FROM Dogs
SELECT COUNT(DISTINCT dog_id) FROM Treatments
SELECT COUNT(dog_id) FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
SELECT count(DISTINCT professional_id) FROM Treatments
SELECT count(DISTINCT professional_id) FROM Professionals
SELECT role_code, street, city, state  FROM Professionals  WHERE city LIKE '%West%'
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'
SELECT first_name, last_name, email_address  FROM Owners  WHERE state LIKE '%North%'
SELECT owners.first_name, owners.last_name, owners.email_address FROM owners WHERE owners.state LIKE '%North%'
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(dog_id) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT cost_of_treatment  FROM Treatments  ORDER BY date_of_treatment DESC  LIMIT 1;
SELECT treatments.cost_of_treatment  FROM treatments  ORDER BY treatments.date_of_treatment DESC  LIMIT 1
SELECT COUNT(DISTINCT dog_id) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT COUNT(DISTINCT Dogs.dog_id) FROM Dogs WHERE Dogs.dog_id NOT IN (SELECT Treatments.dog_id FROM Treatments)
SELECT count(DISTINCT T1.owner_id)  FROM Owners AS T1  LEFT JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id  WHERE T2.owner_id IS NULL
SELECT count(DISTINCT owner_id) FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs)
SELECT count(DISTINCT T1.professional_id) FROM Professionals AS T1 WHERE T1.professional_id NOT IN (SELECT T2.professional_id FROM Treatments AS T2)
SELECT count(DISTINCT T1.professional_id)  FROM professionals AS T1  LEFT JOIN treatments AS T2 ON T1.professional_id = T2.professional_id  WHERE T2.professional_id IS NULL
SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1
SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1
SELECT AVG(age) FROM Dogs
SELECT AVG(age) FROM Dogs
SELECT MAX(age) FROM Dogs
SELECT MAX(age) FROM Dogs
SELECT charge_type, SUM(charge_amount) AS total_cost FROM Charges GROUP BY charge_type
SELECT charge_type, charge_amount  FROM Charges
SELECT max(charge_amount) AS max_charge_amount FROM Charges
SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1
SELECT email_address, cell_number, home_phone FROM Professionals
SELECT email_address, cell_number, home_phone FROM Professionals
SELECT breed_name, size_description FROM Breeds, Sizes
SELECT DISTINCT breed_code, size_code FROM Dogs
SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT professionals.first_name, treatments.treatment_type_description  FROM professionals  JOIN treatments ON professionals.professional_id = treatments.professional_id  JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
SELECT count(*) FROM singer
SELECT COUNT(*) FROM singer
SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions ASC
SELECT name FROM singer ORDER BY Net_Worth_Millions ASC
SELECT birth_year, citizenship FROM singer
SELECT birth_year, citizenship FROM singer
SELECT name FROM singer WHERE citizenship <> 'France'
SELECT name FROM singer WHERE citizenship <> 'French'
SELECT name  FROM singer  WHERE birth_year = 1948 OR birth_year = 1949
SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949
SELECT name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
SELECT name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
SELECT citizenship, COUNT(DISTINCT singer_id) FROM singer GROUP BY citizenship
SELECT citizenship, COUNT(DISTINCT Singer_ID) FROM singer GROUP BY citizenship
SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1
SELECT citizenship, COUNT(*) as count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1
SELECT citizenship, MAX(net_worth_millions) AS max_net_worth FROM singer GROUP BY citizenship
SELECT citizenship, MAX(net_worth_millions)  FROM singer  GROUP BY citizenship
SELECT title, name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID
SELECT name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000;
SELECT DISTINCT Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000
SELECT name  FROM singer  GROUP BY name  HAVING COUNT(*) > 1
SELECT name  FROM singer  WHERE Singer_ID IN (   SELECT Singer_ID    FROM song    GROUP BY Singer_ID    HAVING COUNT(*) > 1 )
SELECT singer.Name, SUM(song.Sales) AS total_sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name
SELECT singer.Name, SUM(song.Sales)  FROM singer  JOIN song ON singer.Singer_ID = song.Singer_ID  GROUP BY singer.Name
SELECT name  FROM singer  WHERE singer.Singer_ID NOT IN (SELECT song.Singer_ID FROM song)
SELECT name AS sname FROM singer WHERE NOT EXISTS (SELECT * FROM song WHERE singer.Singer_ID = song.Singer_ID)
SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 OR birth_year > 1955
SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 OR birth_year > 1955
SELECT COUNT(*) FROM Other_Available_Features
SELECT feature_type_name FROM ref_feature_types WHERE feature_type_code IN (     SELECT feature_type_code     FROM other_available_features     WHERE feature_name = 'AirCon' )
SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code = @property_type_code
SELECT properties.property_name FROM properties WHERE (properties.property_type_code = 'Apartment' OR properties.property_type_code = 'House')  AND properties.room_count > 1
