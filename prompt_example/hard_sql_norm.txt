
# Through the database regularization process, learn how to write SQL query
The normal forms (from least normalized to most normalized) are: UNF(Unnormalized form), 1NF(First normal form), 2NF(Second normal form), 3NF(Third normal form).
Now, we have an initial data(UNF data):
Table Comsumptions, columns = [*,Name,Sex,Gender,Item,Price,Quantity,Store,Address,Date,Order_Number]
Table Comsumptions, cell_values = [{Name:Lily,Sex:Female,Gender:F,Item:pensil|eraser,Price:20|50,Quantity:1|2,Store:A store,Address:University Road,Date:12/17,Order_Number:1},{Name:Amy,Sex:Female,Gender:F,Item:milk|sandwish,Price:70|10,Quantity:3|1,Store:B store,Address:Beimen Road,Date:12/18,Order_Number:2},{Name:Amy,Sex:Female,Gender:F,Item:milk|sandwish,Price:70|10,Quantity:3|4,Store:B store,Address:Beimen Road,Date:12/19,Order_Number:3},{Name:David,Sex:Male,Gender:M,Item:omelette|milk tea,Price:30|40,Quantity:1|2,Store:C store,Address:Chenggong Road,Date:12/19,Order_Number:4}]
## Text-to-SQL example:
Q: What did Lily buy on 12/17?
SQL: SELECT Item FROM Comsumptions WHERE Name = 'Lily' and Date = '12/17' 

To satisfy 1NF, we need to follow:
1) each column of a table must have a single value.
2) Columns which contain sets of values or nested records are not allowed.
3) each table requires at least one primary key.
In the initial table, Item and Quantity contain multiple values. Sex and Gender have the same meaning. In the table, there is no primary key.
## Based on 1NF, the new table:
Table Comsumptions, columns = [*,Name,Sex,Item,Price,Quantity,Total_Amount,Store,Address,Date,Order_Number]
Table Comsumptions, primary_keys = [Name,Item,Quantity,Store,Date,Order_Number]
Table Comsumptions, cell_values = [{Name:Lily,Sex:Female,Item:pensil,Price:20,Quantity:1,Total_Amount:20,Store:A store,Address:University Road,Date:12/17,Order_Number:1},{Name:Lily,Sex:Female,Item:eraser,Price:50,Quantity:2,Total_Amount:100,Store:A store,Address:University Road,Date:12/17,Order_Number:1},{Name:Amy,Sex:Female,Item:milk,Price:70,Quantity:3,Total_Amount:140,Store:B store,Address:Beimen Road,Date:12/18,Order_Number:2},{Name:Amy,Sex:Female,Item:sandwish,Price:10,Quantity:1,Total_Amount:10,Store:B store,Address:Beimen Road,Date:12/18,Order_Number:2},{Name:Amy,Sex:Female,Item:milk,Price:70,Quantity:3,Total_Amount:210,Store:B store,Address:Beimen Road,Date:12/19,Order_Number:3},{Name:Amy,Sex:Female,Item:sandwish,Price:10,Quantity:4,Total_Amount:40,Store:B store,Address:Beimen Road,Date:12/19,Order_Number:3},{Name:David,Sex:Male,Item:omelette,Price:30,Quantity:1,Total_Amount:30,Store:C store,Address:Chenggong Road,Date:12/19,Order_Number:4},{Name:David,Sex:Male,Item:milk tea,Price:40,Quantity:2,Total_Amount:80,Store:C store,Address:Chenggong Road,Date:12/19,Order_Number:4}]
## Text-to-SQL example:
Q1: What did Lily buy on 12/17?
SQL1: SELECT Item FROM Comsumptions WHERE Name = 'Lily' and Date = '12/17' 
Q2: How much did Amy spend on 12/19?
SQL2: SELECT SUM(*) FROM Comsumptions WHERE Name='Amy' and Date = '12/19'

To satisfy 2NF, we need to follow:
1) Single column primary Key does not functionally dependant on any subset of candidate key relation.
In the 1NF table, every consumption record records the gender of the consumer, the name and address of the store, and there are too many duplicates.
## Based on 2NF, the new table:
Table Consumers, columns = [*,Id,Name,Sex]
Table Consumers, primary_keys = [Id]
Table Consumers, cell_values = [{Id:2,Name:Lily,Sex:Female,Id:3,Name:Amy,Sex:Female,Id:4,Name:David,Sex:Male}]
Table Shops, columns = [*,Id,Store,Address]
Table Shops, primary_keys = [Id]
Table Shops, cell_values = [{Id:1,Store:A store,Address:University Road,Id:2,Store:B store,Address:Beimen Road,Id:3,Store:C store,Address:Chenggong Road}]
Table Items, columns = [*,Id,Item,Price,Store_Id]
Table Items, primary_keys = [Id]
Table Items, cell_values = [{Id:1,Item:pensil,Price:20,Store_Id:1},{Id:2,Item:eraser,Price:50,Store_Id:1},{Id:3,Item:milk,Price:70,Store_Id:2},{Id:4,Item:sandwish,Price:10,Store_Id:2},{Id:5,Item:omelette,Price:30,Store_Id:3},{Id:6,Item:milk tea,Price:40,Store_Id:3}]
Table Orders, columns = [*,Id,Consumer_Id,Item_Id,Quantity,Total_Amount,Date,Order_Number]
Table Orders, primary_keys = [Id]
Table Orders, cell_values = [{Id:1,Consumer_Id:1,Item_Id:1,Quantity:1,Total_Amount:20,Date:12/17,Order_Number:1},{Id:2,Consumer_Id:1,Item_Id:2,Quantity:2,Total_Amount:100,Date:12/17,Order_Number:1},{Id:3,Consumer_Id:2,Item_Id:3,Quantity:3,Total_Amount:210,Date:12/18,Order_Number:2},{Id:4,Consumer_Id:2,Item_Id:4,Quantity:1,Total_Amount:10,Date:12/18,Order_Number:2},{Id:5,Consumer_Id:2,Item_Id:3,Quantity:3,Total_Amount:210,Date:12/19,Order_Number:3},{Id:6,Consumer_Id:2,Item_Id:4,Quantity:4,Total_Amount:40,Date:12/19,Order_Number:3},{Id:7,Consumer_Id:3,Item_Id:5,Quantity:1,Total_Amount:30,Date:12/19,Order_Number:4},{Id:8,Consumer_Id:3,Item_Id:6,Quantity:2,Total_Amount:80,Date:12/19,Order_Number:4}]
## Text-to-SQL example:
Q: What did Lily buy on 12/17?
SQL: SELECT Item FROM Items JOIN Orders ON Items.Id = Orders.Item_Id JOIN Consumers ON Consumers.Id = Orders.Consumer_Id WHERE Consumers.Name = 'Lily' and Orders.Date = '12/17' 

Q: How much did Amy spend on 12/19?
SQL: SELECT SUM(Total_Amount) FROM Orders JOIN Consumers ON Orders.Consumer_Id = Consumers.Id WHERE Consumers.Name = 'Amy' AND Date = '12/19'

# Use the intermediate representation and the schema links to generate the SQL queries for each of the questions.
Table advisor, columns = [*,s_ID,i_ID]
Table classroom, columns = [*,building,room_number,capacity]
Table course, columns = [*,course_id,title,dept_name,credits]
Table department, columns = [*,dept_name,building,budget]
Table instructor, columns = [*,ID,name,dept_name,salary]
Table prereq, columns = [*,course_id,prereq_id]
Table section, columns = [*,course_id,sec_id,semester,year,building,room_number,time_slot_id]
Table student, columns = [*,ID,name,dept_name,tot_cred]
Table takes, columns = [*,ID,course_id,sec_id,semester,year,grade]
Table teaches, columns = [*,ID,course_id,sec_id,semester,year]
Table time_slot, columns = [*,time_slot_id,day,start_hr,start_min,end_hr,end_min]
Foreign_keys = [course.dept_name = department.dept_name,instructor.dept_name = department.dept_name,section.building = classroom.building,section.room_number = classroom.room_number,section.course_id = course.course_id,teaches.ID = instructor.ID,teaches.course_id = section.course_id,teaches.sec_id = section.sec_id,teaches.semester = section.semester,teaches.year = section.year,student.dept_name = department.dept_name,takes.ID = student.ID,takes.course_id = section.course_id,takes.sec_id = section.sec_id,takes.semester = section.semester,takes.year = section.year,advisor.s_ID = student.ID,advisor.i_ID = instructor.ID,prereq.prereq_id = course.course_id,prereq.course_id = course.course_id]
Table Has_Pet, columns = [*,StuID,PetID]
Table Pets, columns = [*,PetID,PetType,pet_age,weight]
Table Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]
Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]

Q: "Find the title of courses that have two prerequisites?"
Schema_links: [course.title,course.course_id = prereq.course_id]
A: Let's think step by step. "Find the title of courses that have two prerequisites?" can be solved by knowing the answer to the following sub-question "What are the titles for courses with two prerequisites?".
The SQL query for the sub-question "What are the titles for courses with two prerequisites?" is SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2
So, the answer to the question "Find the title of courses that have two prerequisites?" is =
Intermediate_representation: select course.title from course  where  count ( prereq.* )  = 2  group by prereq.course_id
SQL: SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2

Q: "Find the name and building of the department with the highest budget."
Schema_links: [department.dept_name,department.building,department.budget]
A: Let's think step by step. "Find the name and building of the department with the highest budget." can be solved by knowing the answer to the following sub-question "What is the department name and corresponding building for the department with the greatest budget?".
The SQL query for the sub-question "What is the department name and corresponding building for the department with the greatest budget?" is SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1
So, the answer to the question "Find the name and building of the department with the highest budget." is =
Intermediate_representation: select department.dept_name , department.building from department  order by department.budget desc limit 1
SQL: SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1

Q: "Find the title, credit, and department name of courses that have more than one prerequisites?"
Schema_links: [course.title,course.credits,course.dept_name,course.course_id = prereq.course_id]
A: Let's think step by step. "Find the title, credit, and department name of courses that have more than one prerequisites?" can be solved by knowing the answer to the following sub-question "What is the title, credit value, and department name for courses with more than one prerequisite?".
The SQL query for the sub-question "What is the title, credit value, and department name for courses with more than one prerequisite?" is SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1
So, the answer to the question "Find the name and building of the department with the highest budget." is =
Intermediate_representation: select course.title , course.credits , course.dept_name from course  where  count ( prereq.* )  > 1  group by prereq.course_id 
SQL: SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1

Q: "Give the name and building of the departments with greater than average budget."
Schema_links: [department.dept_name,department.building,department.budget]
A: Let's think step by step. "Give the name and building of the departments with greater than average budget." can be solved by knowing the answer to the following sub-question "What is the average budget of departments?".
The SQL query for the sub-question "What is the average budget of departments?" is SELECT avg(budget) FROM department
So, the answer to the question "Give the name and building of the departments with greater than average budget." is =
Intermediate_representation: select department.dept_name , department.building from department  where  @.@ > avg ( department.budget )
SQL: SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)

Q: "Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010."
Schema_links: [teaches.id,teaches.semester,teaches.YEAR,Fall,2009,Spring,2010]
A: Let's think step by step. "Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010." can be solved by knowing the answer to the following sub-question "Find the id of instructors who taught a class in Spring 2010".
The SQL query for the sub-question "Find the id of instructors who taught a class in Spring 2010" is SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010
So, the answer to the question "Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010." is = 
Intermediate_representation: select teaches.ID from teaches  where  teaches.semester = "Fall"  and  teaches.year = 2009  and  teaches.semester != "Spring"  and  teaches.year = 2010 
SQL: SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010

Q: "Find the name of the courses that do not have any prerequisite?"
Schema_links: [course.title,course.course_id]
A: Let's think step by step. "Find the name of the courses that do not have any prerequisite?" can be solved by knowing the answer to the following sub-question "What are the courses that have any prerequisite?".
The SQL query for the sub-question "What are the courses that have any prerequisite?" is SELECT course_id FROM prereq
So, the answer to the question "Find the name of the courses that do not have any prerequisite?" is =
Intermediate_representation: select course.title from course  where  @.@ not in prereq.course_id 
SQL: SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)

Q: "Find the salaries of all distinct instructors that are less than the largest salary."
Schema_links: [instructor.salary]
A: Let's think step by step. "Find the salaries of all distinct instructors that are less than the largest salary." can be solved by knowing the answer to the following sub-question "What is the largest salary of instructors".
The SQL query for the sub-question "What is the largest salary of instructors" is SELECT max(salary) FROM instructor
So, the answer to the question "Find the salaries of all distinct instructors that are less than the largest salary." is =
Intermediate_representation: select  distinct instructor.salary from instructor  where  @.@ < max ( instructor.salary )
SQL: SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)

Q: "Find the names of students who have taken any course in the fall semester of year 2003."
Schema_links: [student.id,student.name,takes.id,takes.semester,fall,2003]
A: Let's think step by step. "Find the names of students who have taken any course in the fall semester of year 2003." can be solved by knowing the answer to the following sub-question "Find the students who have taken any course in the fall semester of year 2003.".
The SQL query for the sub-question "Find the students who have taken any course in the fall semester of year 2003." is SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003
So, the answer to the question "Find the names of students who have taken any course in the fall semester of year 2003." is =
Intermediate_representation: select student.name from student  where  takes.semester = "Fall"  and  takes.year = 2003
SQL: SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)

Q: "Find the minimum salary for the departments whose average salary is above the average payment of all instructors."
Schema_links: [instructor.salary,instructor.dept_name]
A: Let's think step by step. "Find the minimum salary for the departments whose average salary is above the average payment of all instructors." can be solved by knowing the answer to the following sub-question "What is the average payment of all instructors.".
The SQL query for the sub-question "What is the average payment of all instructors." is SELECT avg(salary) FROM instructor
So, the answer to the question "Find the minimum salary for the departments whose average salary is above the average payment of all instructors." is =
Intermediate_representation: select min(instructor.salary) , instructor.dept_name from instructor  where  avg ( instructor.salary )  > avg ( instructor.salary )   group by instructor.dept_name
SQL: SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)

Q: "What is the course title of the prerequisite of course Mobile Computing?"
Schema_links: [course.title,course.course_id = prereq.course_id,prereq.prereq_id,course.title,Mobile Computing]
A: Let's think step by step. "What is the course title of the prerequisite of course Mobile Computing?" can be solved by knowing the answer to the following sub-question "What are the ids of the prerequisite of course Mobile Computing?".
The SQL query for the sub-question "What are the ids of the prerequisite of course Mobile Computing?" is SSELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing'
So, the answer to the question "What is the course title of the prerequisite of course Mobile Computing?" is =
Intermediate_representation: select course.title from course  where  @.@ in prereq.*  and  course.title = "Mobile Computing"
SQL: SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')

Q: "Give the title and credits for the course that is taught in the classroom with the greatest capacity."
Schema_links: [classroom.capacity,classroom.building = SECTION.building,classroom.room_number = SECTION.room_number,course.title,course.credits,course.course_id = SECTION.course_id]
A: Let's think step by step. "Give the title and credits for the course that is taught in the classroom with the greatest capacity." can be solved by knowing the answer to the following sub-question "What is the capacity of the largest room?".
The SQL query for the sub-question "What is the capacity of the largest room?" is (SELECT max(capacity) FROM classroom)
So, the answer to the question "Give the title and credits for the course that is taught in the classroom with the greatest capacity." is =
Intermediate_representation: select course.title , course.credits from classroom  order by classroom.capacity desc limit 1"
SQL: SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)

Q: "Find the first name of students who have both cat and dog pets ."
schema_links: [Student.Fname, Has_Pet.StuID = Student.StuID, Has_Pet.PetID = Pets.PetID, Pets.PetType]
A: Let's think step by step. "Find the first name of students who have both cat and dog pets ." can be solved by knowing the answer to the following sub-question "".
The SQL query for the sub-question"